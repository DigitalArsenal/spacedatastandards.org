// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MtiHRRScatterer_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// HRR Scatterer record for a target pixel that exceeds the target detection threshold.
type MtiHRRScatterer_Full struct {
	_tab flatbuffers.Table
}

const MtiHRRScatterer_FullIdentifier = "MTIH"

func GetRootAsMtiHRRScatterer_Full(buf []byte, offset flatbuffers.UOffsetT) *MtiHRRScatterer_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MtiHRRScatterer_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishMtiHRRScatterer_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MtiHRRScatterer_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func MtiHRRScatterer_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, MtiHRRScatterer_FullIdentifier)
}

func GetSizePrefixedRootAsMtiHRRScatterer_Full(buf []byte, offset flatbuffers.UOffsetT) *MtiHRRScatterer_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MtiHRRScatterer_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMtiHRRScatterer_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MtiHRRScatterer_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedMtiHRRScatterer_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, MtiHRRScatterer_FullIdentifier)
}

func (rcv *MtiHRRScatterer_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MtiHRRScatterer_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Scatterer’s power magnitude.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRRScatterer_Full) H321() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Scatterer’s power magnitude.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRRScatterer_Full) MutateH321(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

/// Scatterer’s complex phase, in degrees.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRRScatterer_Full) H322() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Scatterer’s complex phase, in degrees.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRRScatterer_Full) MutateH322(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// Scatterer’s Range index relative to Range-Doppler chip, where increasing index equates to increasing range.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRRScatterer_Full) H323() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Scatterer’s Range index relative to Range-Doppler chip, where increasing index equates to increasing range.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRRScatterer_Full) MutateH323(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// Scatterer’s Doppler index relative to Range-Doppler chip, where increasing index equates to increasing Doppler.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRRScatterer_Full) H324() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Scatterer’s Doppler index relative to Range-Doppler chip, where increasing index equates to increasing Doppler.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRRScatterer_Full) MutateH324(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func MtiHRRScatterer_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func MtiHRRScatterer_FullAddH321(builder *flatbuffers.Builder, h321 int32) {
	builder.PrependInt32Slot(0, h321, 0)
}
func MtiHRRScatterer_FullAddH322(builder *flatbuffers.Builder, h322 int32) {
	builder.PrependInt32Slot(1, h322, 0)
}
func MtiHRRScatterer_FullAddH323(builder *flatbuffers.Builder, h323 int32) {
	builder.PrependInt32Slot(2, h323, 0)
}
func MtiHRRScatterer_FullAddH324(builder *flatbuffers.Builder, h324 int32) {
	builder.PrependInt32Slot(3, h324, 0)
}
func MtiHRRScatterer_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
