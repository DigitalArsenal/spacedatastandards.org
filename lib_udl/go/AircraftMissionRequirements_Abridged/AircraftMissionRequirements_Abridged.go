// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AircraftMissionRequirements_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of Requirements associated with this Air Transport Mission.
type AircraftMissionRequirements_Abridged struct {
	_tab flatbuffers.Table
}

const AircraftMissionRequirements_AbridgedIdentifier = "AIRC"

func GetRootAsAircraftMissionRequirements_Abridged(buf []byte, offset flatbuffers.UOffsetT) *AircraftMissionRequirements_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AircraftMissionRequirements_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishAircraftMissionRequirements_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AircraftMissionRequirements_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AircraftMissionRequirements_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AircraftMissionRequirements_AbridgedIdentifier)
}

func GetSizePrefixedRootAsAircraftMissionRequirements_Abridged(buf []byte, offset flatbuffers.UOffsetT) *AircraftMissionRequirements_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AircraftMissionRequirements_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAircraftMissionRequirements_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AircraftMissionRequirements_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAircraftMissionRequirements_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AircraftMissionRequirements_AbridgedIdentifier)
}

func (rcv *AircraftMissionRequirements_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AircraftMissionRequirements_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Global Decision Support System (GDSS) mission requirement identifier.
/// Example: /// Example: 23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftMissionRequirements_Abridged) GdssReqId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Global Decision Support System (GDSS) mission requirement identifier.
/// Example: /// Example: 23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c
/// Constraints: Minimum length = 0, Maximum length = 36
/// Identifier of the onload itinerary location.
/// Example: /// Example: 200
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) OnloadId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Identifier of the onload itinerary location.
/// Example: /// Example: 200
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) MutateOnloadId(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// Onload location code.
/// Example: /// Example: KCHS
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *AircraftMissionRequirements_Abridged) OnloadLocode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Onload location code.
/// Example: /// Example: KCHS
/// Constraints: Minimum length = 0, Maximum length = 20
/// Identifier of the offload itinerary location.
/// Example: /// Example: 300
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) OffloadId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Identifier of the offload itinerary location.
/// Example: /// Example: 300
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) MutateOffloadId(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Offload location code.
/// Example: /// Example: KHOP
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *AircraftMissionRequirements_Abridged) OffloadLocode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Offload location code.
/// Example: /// Example: KHOP
/// Constraints: Minimum length = 0, Maximum length = 20
/// Unit line number.
/// Example: /// Example: T01ME01
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AircraftMissionRequirements_Abridged) Uln() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unit line number.
/// Example: /// Example: T01ME01
/// Constraints: Minimum length = 0, Maximum length = 8
/// Transportation requirement number.
/// Example: /// Example: T01ME01
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *AircraftMissionRequirements_Abridged) TransReqNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transportation requirement number.
/// Example: /// Example: T01ME01
/// Constraints: Minimum length = 0, Maximum length = 50
/// Project name.
/// Example: /// Example: CENTINTRA21
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *AircraftMissionRequirements_Abridged) ProjName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Project name.
/// Example: /// Example: CENTINTRA21
/// Constraints: Minimum length = 0, Maximum length = 50
/// Identification number of the Operation Plan (OPLAN) associated with this mission.
/// Example: /// Example: 5027
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AircraftMissionRequirements_Abridged) Oplan() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identification number of the Operation Plan (OPLAN) associated with this mission.
/// Example: /// Example: 5027
/// Constraints: Minimum length = 0, Maximum length = 32
/// Number of passengers associated with the mission.
/// Example: /// Example: 44
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) NumPax() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of passengers associated with the mission.
/// Example: /// Example: 44
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) MutateNumPax(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

/// Number of litter patients tasked for the mission.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) NumLitter() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of litter patients tasked for the mission.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) MutateNumLitter(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

/// Number of ambulatory patients tasked for the mission.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) NumAmbulatory() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of ambulatory patients tasked for the mission.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) MutateNumAmbulatory(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

/// Number of attendants tasked for the mission.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) NumAttendant() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of attendants tasked for the mission.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) MutateNumAttendant(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// Total weight of the bulk cargo, in kilograms.
/// Example: /// Example: 1.3
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) BulkWeight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total weight of the bulk cargo, in kilograms.
/// Example: /// Example: 1.3
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) MutateBulkWeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Total weight of the oversized cargo, in kilograms.
/// Example: /// Example: 1.3
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) OversizeWeight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total weight of the oversized cargo, in kilograms.
/// Example: /// Example: 1.3
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) MutateOversizeWeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Total weight of the outsize cargo, in kilograms.
/// Example: /// Example: 1.3
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) OutsizeWeight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total weight of the outsize cargo, in kilograms.
/// Example: /// Example: 1.3
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) MutateOutsizeWeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Earliest available date the cargo can be picked up.
/// Example: /// Example: 2024-01-01T16:00:00Z
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) Ead() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Earliest available date the cargo can be picked up.
/// Example: /// Example: 2024-01-01T16:00:00Z
/// Constraints: No constraints specified.
/// Latest available date the cargo may be delivered.
/// Example: /// Example: 2024-01-01T16:00:00Z
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRequirements_Abridged) Lad() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Latest available date the cargo may be delivered.
/// Example: /// Example: 2024-01-01T16:00:00Z
/// Constraints: No constraints specified.
func AircraftMissionRequirements_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(18)
}
func AircraftMissionRequirements_AbridgedAddGdssReqId(builder *flatbuffers.Builder, gdssReqId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(gdssReqId), 0)
}
func AircraftMissionRequirements_AbridgedAddOnloadId(builder *flatbuffers.Builder, onloadId int32) {
	builder.PrependInt32Slot(1, onloadId, 0)
}
func AircraftMissionRequirements_AbridgedAddOnloadLocode(builder *flatbuffers.Builder, onloadLocode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(onloadLocode), 0)
}
func AircraftMissionRequirements_AbridgedAddOffloadId(builder *flatbuffers.Builder, offloadId int32) {
	builder.PrependInt32Slot(3, offloadId, 0)
}
func AircraftMissionRequirements_AbridgedAddOffloadLocode(builder *flatbuffers.Builder, offloadLocode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(offloadLocode), 0)
}
func AircraftMissionRequirements_AbridgedAddUln(builder *flatbuffers.Builder, uln flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(uln), 0)
}
func AircraftMissionRequirements_AbridgedAddTransReqNum(builder *flatbuffers.Builder, transReqNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(transReqNum), 0)
}
func AircraftMissionRequirements_AbridgedAddProjName(builder *flatbuffers.Builder, projName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(projName), 0)
}
func AircraftMissionRequirements_AbridgedAddOplan(builder *flatbuffers.Builder, oplan flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(oplan), 0)
}
func AircraftMissionRequirements_AbridgedAddNumPax(builder *flatbuffers.Builder, numPax int32) {
	builder.PrependInt32Slot(9, numPax, 0)
}
func AircraftMissionRequirements_AbridgedAddNumLitter(builder *flatbuffers.Builder, numLitter int32) {
	builder.PrependInt32Slot(10, numLitter, 0)
}
func AircraftMissionRequirements_AbridgedAddNumAmbulatory(builder *flatbuffers.Builder, numAmbulatory int32) {
	builder.PrependInt32Slot(11, numAmbulatory, 0)
}
func AircraftMissionRequirements_AbridgedAddNumAttendant(builder *flatbuffers.Builder, numAttendant int32) {
	builder.PrependInt32Slot(12, numAttendant, 0)
}
func AircraftMissionRequirements_AbridgedAddBulkWeight(builder *flatbuffers.Builder, bulkWeight float64) {
	builder.PrependFloat64Slot(13, bulkWeight, 0.0)
}
func AircraftMissionRequirements_AbridgedAddOversizeWeight(builder *flatbuffers.Builder, oversizeWeight float64) {
	builder.PrependFloat64Slot(14, oversizeWeight, 0.0)
}
func AircraftMissionRequirements_AbridgedAddOutsizeWeight(builder *flatbuffers.Builder, outsizeWeight float64) {
	builder.PrependFloat64Slot(15, outsizeWeight, 0.0)
}
func AircraftMissionRequirements_AbridgedAddEad(builder *flatbuffers.Builder, ead flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(ead), 0)
}
func AircraftMissionRequirements_AbridgedAddLad(builder *flatbuffers.Builder, lad flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(lad), 0)
}
func AircraftMissionRequirements_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
