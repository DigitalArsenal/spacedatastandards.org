// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AirspaceControlPoint_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// The controlPoint set describes any reference/controlling/rendevous point for a given airspace control means.
type AirspaceControlPoint_Full struct {
	_tab flatbuffers.Table
}

const AirspaceControlPoint_FullIdentifier = "AIRS"

func GetRootAsAirspaceControlPoint_Full(buf []byte, offset flatbuffers.UOffsetT) *AirspaceControlPoint_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AirspaceControlPoint_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishAirspaceControlPoint_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirspaceControlPoint_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AirspaceControlPoint_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AirspaceControlPoint_FullIdentifier)
}

func GetSizePrefixedRootAsAirspaceControlPoint_Full(buf []byte, offset flatbuffers.UOffsetT) *AirspaceControlPoint_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AirspaceControlPoint_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAirspaceControlPoint_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirspaceControlPoint_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAirspaceControlPoint_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AirspaceControlPoint_FullIdentifier)
}

func (rcv *AirspaceControlPoint_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AirspaceControlPoint_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// One of possible control point type codes, such as CP, ER, OT, etc.
/// Example: /// Example: CP
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *AirspaceControlPoint_Full) CtrlPtType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// One of possible control point type codes, such as CP, ER, OT, etc.
/// Example: /// Example: CP
/// Constraints: Minimum length = 0, Maximum length = 2
/// The name applied to the control point, used as a reference.
/// Example: /// Example: APPLE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirspaceControlPoint_Full) CtrlPtName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name applied to the control point, used as a reference.
/// Example: /// Example: APPLE
/// Constraints: Minimum length = 0, Maximum length = 32
/// A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds) format that represents the location of the control point.
/// Example: /// Example: 203632N0594256E
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AirspaceControlPoint_Full) CtrlPtLocation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds) format that represents the location of the control point.
/// Example: /// Example: 203632N0594256E
/// Constraints: Minimum length = 0, Maximum length = 16
/// The altitude of the control point.
/// Example: /// Example: BRFL:MSL-FL230
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirspaceControlPoint_Full) CtrlPtAltitude() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The altitude of the control point.
/// Example: /// Example: BRFL:MSL-FL230
/// Constraints: Minimum length = 0, Maximum length = 32
func AirspaceControlPoint_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func AirspaceControlPoint_FullAddCtrlPtType(builder *flatbuffers.Builder, ctrlPtType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ctrlPtType), 0)
}
func AirspaceControlPoint_FullAddCtrlPtName(builder *flatbuffers.Builder, ctrlPtName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(ctrlPtName), 0)
}
func AirspaceControlPoint_FullAddCtrlPtLocation(builder *flatbuffers.Builder, ctrlPtLocation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(ctrlPtLocation), 0)
}
func AirspaceControlPoint_FullAddCtrlPtAltitude(builder *flatbuffers.Builder, ctrlPtAltitude flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(ctrlPtAltitude), 0)
}
func AirspaceControlPoint_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
