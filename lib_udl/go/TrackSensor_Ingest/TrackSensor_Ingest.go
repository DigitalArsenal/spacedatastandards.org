// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package TrackSensor_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Schema for Track Sensor data.
type TrackSensor_Ingest struct {
	_tab flatbuffers.Table
}

const TrackSensor_IngestIdentifier = "TRAC"

func GetRootAsTrackSensor_Ingest(buf []byte, offset flatbuffers.UOffsetT) *TrackSensor_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TrackSensor_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishTrackSensor_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(TrackSensor_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func TrackSensor_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, TrackSensor_IngestIdentifier)
}

func GetSizePrefixedRootAsTrackSensor_Ingest(buf []byte, offset flatbuffers.UOffsetT) *TrackSensor_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TrackSensor_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTrackSensor_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(TrackSensor_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedTrackSensor_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, TrackSensor_IngestIdentifier)
}

func (rcv *TrackSensor_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TrackSensor_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// The track object range from the observing sensor, in kilometers.
/// Example: /// Example: 4023.95
/// Constraints: No constraints specified.
func (rcv *TrackSensor_Ingest) Range() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The track object range from the observing sensor, in kilometers.
/// Example: /// Example: 4023.95
/// Constraints: No constraints specified.
func (rcv *TrackSensor_Ingest) MutateRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// The observing sensor azimuth angle, in degrees and topocentric frame.
/// Example: /// Example: 90
/// Constraints: No constraints specified.
func (rcv *TrackSensor_Ingest) Az() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The observing sensor azimuth angle, in degrees and topocentric frame.
/// Example: /// Example: 90
/// Constraints: No constraints specified.
func (rcv *TrackSensor_Ingest) MutateAz(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
/// Example: /// Example: 1234
/// Constraints: No constraints specified.
func (rcv *TrackSensor_Ingest) SensorNumber() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
/// Example: /// Example: 1234
/// Constraints: No constraints specified.
func (rcv *TrackSensor_Ingest) MutateSensorNumber(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// Unique name of this sensor.
/// Example: /// Example: SENSOR_NAME
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *TrackSensor_Ingest) SensorName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique name of this sensor.
/// Example: /// Example: SENSOR_NAME
/// Constraints: Minimum length = 0, Maximum length = 128
/// The mission number which produced this track observation.
/// Example: /// Example: Example Mission
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *TrackSensor_Ingest) MissionNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The mission number which produced this track observation.
/// Example: /// Example: Example Mission
/// Constraints: Minimum length = 0, Maximum length = 128
/// Minimum range measurement capability of the sensor, in kilometers.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *TrackSensor_Ingest) MinRangeLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum range measurement capability of the sensor, in kilometers.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *TrackSensor_Ingest) MutateMinRangeLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// The field of view (FOV) type (Butterfly, Cone Angular, Cone Distance, Horizon to Horizon, Unknown) employed by the sensor observing this object.
/// Example: /// Example: UNKNOWN
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *TrackSensor_Ingest) SensorFovtype() TrackSensor_Ingest_sensorFOVType_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return TrackSensor_Ingest_sensorFOVType_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The field of view (FOV) type (Butterfly, Cone Angular, Cone Distance, Horizon to Horizon, Unknown) employed by the sensor observing this object.
/// Example: /// Example: UNKNOWN
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *TrackSensor_Ingest) MutateSensorFovtype(n TrackSensor_Ingest_sensorFOVType_Enum) bool {
	return rcv._tab.MutateInt8Slot(16, int8(n))
}

func TrackSensor_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func TrackSensor_IngestAddRange(builder *flatbuffers.Builder, range_ float64) {
	builder.PrependFloat64Slot(0, range_, 0.0)
}
func TrackSensor_IngestAddAz(builder *flatbuffers.Builder, az float64) {
	builder.PrependFloat64Slot(1, az, 0.0)
}
func TrackSensor_IngestAddSensorNumber(builder *flatbuffers.Builder, sensorNumber int32) {
	builder.PrependInt32Slot(2, sensorNumber, 0)
}
func TrackSensor_IngestAddSensorName(builder *flatbuffers.Builder, sensorName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(sensorName), 0)
}
func TrackSensor_IngestAddMissionNumber(builder *flatbuffers.Builder, missionNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(missionNumber), 0)
}
func TrackSensor_IngestAddMinRangeLimit(builder *flatbuffers.Builder, minRangeLimit float64) {
	builder.PrependFloat64Slot(5, minRangeLimit, 0.0)
}
func TrackSensor_IngestAddSensorFovtype(builder *flatbuffers.Builder, sensorFovtype TrackSensor_Ingest_sensorFOVType_Enum) {
	builder.PrependInt8Slot(6, int8(sensorFovtype), 0)
}
func TrackSensor_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
