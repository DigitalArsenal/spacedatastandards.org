// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ObjectOfInterest_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// OnOrbit objects of interest, which include information about the last known state of the object.
type ObjectOfInterest_Full struct {
	_tab flatbuffers.Table
}

const ObjectOfInterest_FullIdentifier = "OBJE"

func GetRootAsObjectOfInterest_Full(buf []byte, offset flatbuffers.UOffsetT) *ObjectOfInterest_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ObjectOfInterest_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishObjectOfInterest_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ObjectOfInterest_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ObjectOfInterest_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ObjectOfInterest_FullIdentifier)
}

func GetSizePrefixedRootAsObjectOfInterest_Full(buf []byte, offset flatbuffers.UOffsetT) *ObjectOfInterest_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ObjectOfInterest_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedObjectOfInterest_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ObjectOfInterest_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedObjectOfInterest_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ObjectOfInterest_FullIdentifier)
}

func (rcv *ObjectOfInterest_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ObjectOfInterest_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: OBJECTOFINTEREST-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *ObjectOfInterest_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: OBJECTOFINTEREST-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *ObjectOfInterest_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// UUID of the parent Onorbit record.
/// Example: /// Example: REF-ONORBIT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *ObjectOfInterest_Full) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID of the parent Onorbit record.
/// Example: /// Example: REF-ONORBIT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Unique name of the object of interest event.
/// Example: /// Example: Example_name
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *ObjectOfInterest_Full) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique name of the object of interest event.
/// Example: /// Example: Example_name
/// Constraints: Minimum length = 0, Maximum length = 128
/// Sensor tasking start time for object of interest.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) SensorTaskingStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sensor tasking start time for object of interest.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// Sensor tasking stop time for object of interest.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) SensorTaskingStopTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sensor tasking stop time for object of interest.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// Priority of the object of interest as an integer (1=highest priority).
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) Priority() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Priority of the object of interest as an integer (1=highest priority).
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutatePriority(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).
/// Example: /// Example: OPEN
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *ObjectOfInterest_Full) Status() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).
/// Example: /// Example: OPEN
/// Constraints: Minimum length = 0, Maximum length = 16
/// Time of last status change of the object of interest event.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) StatusDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of last status change of the object of interest event.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// Description of the object of interest event.
/// Example: /// Example: Example description
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *ObjectOfInterest_Full) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the object of interest event.
/// Example: /// Example: Example description
/// Constraints: Minimum length = 0, Maximum length = 256
/// Last reported observation time in ISO 8601 UTC time, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) LastObTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Last reported observation time in ISO 8601 UTC time, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MissedObTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// Possible delta V applications for the object of interest, in km/sec.
/// Example: /// Example: [1.1, 2.2, 3.3]
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) DeltaVs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ObjectOfInterest_Full) DeltaVsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Possible delta V applications for the object of interest, in km/sec.
/// Example: /// Example: [1.1, 2.2, 3.3]
/// Constraints: No constraints specified.
/// Possible delta time applications for the object of interest, in seconds.
/// Example: /// Example: [1.1, 2.2, 3.3]
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) DeltaTs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ObjectOfInterest_Full) DeltaTsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Possible delta time applications for the object of interest, in seconds.
/// Example: /// Example: [1.1, 2.2, 3.3]
/// Constraints: No constraints specified.
/// Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) SvEpoch() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// Last reported x position of the object in km, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) X() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported x position of the object in km, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Last reported y position of the object in km, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) Y() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported y position of the object in km, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Last reported z position of the object in km, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) Z() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported z position of the object in km, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Last reported x velocity of the object in km/sec, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) Xvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported x velocity of the object in km/sec, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateXvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Last reported y velocity of the object in km/sec, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) Yvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported y velocity of the object in km/sec, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateYvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Last reported z velocity of the object in km/sec, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) Zvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported z velocity of the object in km/sec, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateZvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) ElsetEpoch() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MeanMotion() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateMeanMotion(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) Eccentricity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateEccentricity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) Inclination() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateInclination(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) Raan() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateRaan(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) ArgOfPerigee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateArgOfPerigee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MeanAnomaly() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateMeanAnomaly(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) RevNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateRevNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(62, n)
}

/// Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) BStar() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateBStar(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MeanMotionDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateMeanMotionDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MeanMotionDdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateMeanMotionDdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) SemiMajorAxis() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateSemiMajorAxis(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// Last reported orbit period. Period of the orbit is equal to inverse of mean motion.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) Period() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported orbit period. Period of the orbit is equal to inverse of mean motion.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutatePeriod(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) Apogee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutateApogee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// Last reported perigee. The orbit point nearest to the center of the earth in kilometers.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) Perigee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported perigee. The orbit point nearest to the center of the earth in kilometers.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) MutatePerigee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// Optional array of Onorbit IDs (idOnOrbit) representing satellites potentially affected by this object of interest.
/// Example: /// Example: ['AFFECTEDOBJECT1-ID', 'AFFECTEDOBJECT2-ID']
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) AffectedObjects(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ObjectOfInterest_Full) AffectedObjectsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of Onorbit IDs (idOnOrbit) representing satellites potentially affected by this object of interest.
/// Example: /// Example: ['AFFECTEDOBJECT1-ID', 'AFFECTEDOBJECT2-ID']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *ObjectOfInterest_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *ObjectOfInterest_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *ObjectOfInterest_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *ObjectOfInterest_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ObjectOfInterest_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ObjectOfInterest_Full) DataMode() ObjectOfInterest_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return ObjectOfInterest_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ObjectOfInterest_Full) MutateDataMode(n ObjectOfInterest_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(94, int8(n))
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) OnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Manifolds associated with this object of interest.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Full) Manifolds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ObjectOfInterest_Full) ManifoldsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Manifolds associated with this object of interest.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func ObjectOfInterest_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(48)
}
func ObjectOfInterest_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ObjectOfInterest_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func ObjectOfInterest_FullAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func ObjectOfInterest_FullAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(3, satNo, 0)
}
func ObjectOfInterest_FullAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(name), 0)
}
func ObjectOfInterest_FullAddSensorTaskingStartTime(builder *flatbuffers.Builder, sensorTaskingStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(sensorTaskingStartTime), 0)
}
func ObjectOfInterest_FullAddSensorTaskingStopTime(builder *flatbuffers.Builder, sensorTaskingStopTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(sensorTaskingStopTime), 0)
}
func ObjectOfInterest_FullAddPriority(builder *flatbuffers.Builder, priority int32) {
	builder.PrependInt32Slot(7, priority, 0)
}
func ObjectOfInterest_FullAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(status), 0)
}
func ObjectOfInterest_FullAddStatusDate(builder *flatbuffers.Builder, statusDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(statusDate), 0)
}
func ObjectOfInterest_FullAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(description), 0)
}
func ObjectOfInterest_FullAddLastObTime(builder *flatbuffers.Builder, lastObTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(lastObTime), 0)
}
func ObjectOfInterest_FullAddMissedObTime(builder *flatbuffers.Builder, missedObTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(missedObTime), 0)
}
func ObjectOfInterest_FullAddDeltaVs(builder *flatbuffers.Builder, deltaVs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(deltaVs), 0)
}
func ObjectOfInterest_FullStartDeltaVsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ObjectOfInterest_FullAddDeltaTs(builder *flatbuffers.Builder, deltaTs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(deltaTs), 0)
}
func ObjectOfInterest_FullStartDeltaTsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ObjectOfInterest_FullAddSvEpoch(builder *flatbuffers.Builder, svEpoch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(svEpoch), 0)
}
func ObjectOfInterest_FullAddX(builder *flatbuffers.Builder, x float64) {
	builder.PrependFloat64Slot(16, x, 0.0)
}
func ObjectOfInterest_FullAddY(builder *flatbuffers.Builder, y float64) {
	builder.PrependFloat64Slot(17, y, 0.0)
}
func ObjectOfInterest_FullAddZ(builder *flatbuffers.Builder, z float64) {
	builder.PrependFloat64Slot(18, z, 0.0)
}
func ObjectOfInterest_FullAddXvel(builder *flatbuffers.Builder, xvel float64) {
	builder.PrependFloat64Slot(19, xvel, 0.0)
}
func ObjectOfInterest_FullAddYvel(builder *flatbuffers.Builder, yvel float64) {
	builder.PrependFloat64Slot(20, yvel, 0.0)
}
func ObjectOfInterest_FullAddZvel(builder *flatbuffers.Builder, zvel float64) {
	builder.PrependFloat64Slot(21, zvel, 0.0)
}
func ObjectOfInterest_FullAddElsetEpoch(builder *flatbuffers.Builder, elsetEpoch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(elsetEpoch), 0)
}
func ObjectOfInterest_FullAddMeanMotion(builder *flatbuffers.Builder, meanMotion float64) {
	builder.PrependFloat64Slot(23, meanMotion, 0.0)
}
func ObjectOfInterest_FullAddEccentricity(builder *flatbuffers.Builder, eccentricity float64) {
	builder.PrependFloat64Slot(24, eccentricity, 0.0)
}
func ObjectOfInterest_FullAddInclination(builder *flatbuffers.Builder, inclination float64) {
	builder.PrependFloat64Slot(25, inclination, 0.0)
}
func ObjectOfInterest_FullAddRaan(builder *flatbuffers.Builder, raan float64) {
	builder.PrependFloat64Slot(26, raan, 0.0)
}
func ObjectOfInterest_FullAddArgOfPerigee(builder *flatbuffers.Builder, argOfPerigee float64) {
	builder.PrependFloat64Slot(27, argOfPerigee, 0.0)
}
func ObjectOfInterest_FullAddMeanAnomaly(builder *flatbuffers.Builder, meanAnomaly float64) {
	builder.PrependFloat64Slot(28, meanAnomaly, 0.0)
}
func ObjectOfInterest_FullAddRevNo(builder *flatbuffers.Builder, revNo int32) {
	builder.PrependInt32Slot(29, revNo, 0)
}
func ObjectOfInterest_FullAddBStar(builder *flatbuffers.Builder, bStar float64) {
	builder.PrependFloat64Slot(30, bStar, 0.0)
}
func ObjectOfInterest_FullAddMeanMotionDot(builder *flatbuffers.Builder, meanMotionDot float64) {
	builder.PrependFloat64Slot(31, meanMotionDot, 0.0)
}
func ObjectOfInterest_FullAddMeanMotionDdot(builder *flatbuffers.Builder, meanMotionDdot float64) {
	builder.PrependFloat64Slot(32, meanMotionDdot, 0.0)
}
func ObjectOfInterest_FullAddSemiMajorAxis(builder *flatbuffers.Builder, semiMajorAxis float64) {
	builder.PrependFloat64Slot(33, semiMajorAxis, 0.0)
}
func ObjectOfInterest_FullAddPeriod(builder *flatbuffers.Builder, period float64) {
	builder.PrependFloat64Slot(34, period, 0.0)
}
func ObjectOfInterest_FullAddApogee(builder *flatbuffers.Builder, apogee float64) {
	builder.PrependFloat64Slot(35, apogee, 0.0)
}
func ObjectOfInterest_FullAddPerigee(builder *flatbuffers.Builder, perigee float64) {
	builder.PrependFloat64Slot(36, perigee, 0.0)
}
func ObjectOfInterest_FullAddAffectedObjects(builder *flatbuffers.Builder, affectedObjects flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(affectedObjects), 0)
}
func ObjectOfInterest_FullStartAffectedObjectsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ObjectOfInterest_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(createdAt), 0)
}
func ObjectOfInterest_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(createdBy), 0)
}
func ObjectOfInterest_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(updatedAt), 0)
}
func ObjectOfInterest_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(updatedBy), 0)
}
func ObjectOfInterest_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(source), 0)
}
func ObjectOfInterest_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(origin), 0)
}
func ObjectOfInterest_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(origNetwork), 0)
}
func ObjectOfInterest_FullAddDataMode(builder *flatbuffers.Builder, dataMode ObjectOfInterest_Full_dataMode_Enum) {
	builder.PrependInt8Slot(45, int8(dataMode), 0)
}
func ObjectOfInterest_FullAddOnOrbit(builder *flatbuffers.Builder, onOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(onOrbit), 0)
}
func ObjectOfInterest_FullAddManifolds(builder *flatbuffers.Builder, manifolds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(manifolds), 0)
}
func ObjectOfInterest_FullStartManifoldsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ObjectOfInterest_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
