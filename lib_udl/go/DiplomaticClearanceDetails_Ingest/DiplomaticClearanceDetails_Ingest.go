// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DiplomaticClearanceDetails_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of diplomatic clearance details.
type DiplomaticClearanceDetails_Ingest struct {
	_tab flatbuffers.Table
}

const DiplomaticClearanceDetails_IngestIdentifier = "DIPL"

func GetRootAsDiplomaticClearanceDetails_Ingest(buf []byte, offset flatbuffers.UOffsetT) *DiplomaticClearanceDetails_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DiplomaticClearanceDetails_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishDiplomaticClearanceDetails_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DiplomaticClearanceDetails_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func DiplomaticClearanceDetails_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, DiplomaticClearanceDetails_IngestIdentifier)
}

func GetSizePrefixedRootAsDiplomaticClearanceDetails_Ingest(buf []byte, offset flatbuffers.UOffsetT) *DiplomaticClearanceDetails_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DiplomaticClearanceDetails_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDiplomaticClearanceDetails_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DiplomaticClearanceDetails_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedDiplomaticClearanceDetails_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, DiplomaticClearanceDetails_IngestIdentifier)
}

func (rcv *DiplomaticClearanceDetails_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DiplomaticClearanceDetails_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the Aircraft Sortie associated with this diplomatic clearance record.
/// Example: /// Example: 207010e0-f97d-431c-8c00-7e46acfef0f5
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *DiplomaticClearanceDetails_Ingest) IdSortie() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Aircraft Sortie associated with this diplomatic clearance record.
/// Example: /// Example: 207010e0-f97d-431c-8c00-7e46acfef0f5
/// Constraints: Minimum length = 0, Maximum length = 36
/// Identifies the Itinerary point of a sortie where an air event occurs.
/// Example: /// Example: 825
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearanceDetails_Ingest) LegNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Identifies the Itinerary point of a sortie where an air event occurs.
/// Example: /// Example: 825
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearanceDetails_Ingest) MutateLegNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// The 1801 fileable route of flight string associated with this diplomatic clearance. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
/// Example: /// Example: DCT DOH P430 BAYAN/M062F150 P430 RAMKI
/// Constraints: Minimum length = 0, Maximum length = 4000
func (rcv *DiplomaticClearanceDetails_Ingest) RouteString() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The 1801 fileable route of flight string associated with this diplomatic clearance. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
/// Example: /// Example: DCT DOH P430 BAYAN/M062F150 P430 RAMKI
/// Constraints: Minimum length = 0, Maximum length = 4000
/// The start time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearanceDetails_Ingest) ValidStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The start time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// The end time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearanceDetails_Ingest) ValidEndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The end time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// Identifier of this diplomatic clearance issued by the host country.
/// Example: /// Example: MFMW225662GHQ
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *DiplomaticClearanceDetails_Ingest) ClearanceId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of this diplomatic clearance issued by the host country.
/// Example: /// Example: MFMW225662GHQ
/// Constraints: Minimum length = 0, Maximum length = 32
/// Optional clearance ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *DiplomaticClearanceDetails_Ingest) ExternalClearanceId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional clearance ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
/// Constraints: Minimum length = 0, Maximum length = 36
/// The call sign of the sortie cleared with this diplomatic clearance.
/// Example: /// Example: FALCN09
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *DiplomaticClearanceDetails_Ingest) ClearedCallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign of the sortie cleared with this diplomatic clearance.
/// Example: /// Example: FALCN09
/// Constraints: Minimum length = 0, Maximum length = 24
/// The placement of this diplomatic clearance within a sequence of clearances used on a sortie. For example, a sequence value of 3 means that it is the third diplomatic clearance the aircraft will use.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearanceDetails_Ingest) SequenceNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The placement of this diplomatic clearance within a sequence of clearances used on a sortie. For example, a sequence value of 3 means that it is the third diplomatic clearance the aircraft will use.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearanceDetails_Ingest) MutateSequenceNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

/// The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: NL
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *DiplomaticClearanceDetails_Ingest) CountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: NL
/// Constraints: Minimum length = 0, Maximum length = 4
/// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
/// Example: /// Example: IZ
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *DiplomaticClearanceDetails_Ingest) AltCountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
/// Example: /// Example: IZ
/// Constraints: Minimum length = 0, Maximum length = 16
/// Name of the country issuing this diplomatic clearance.
/// Example: /// Example: NETHERLANDS
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *DiplomaticClearanceDetails_Ingest) CountryName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the country issuing this diplomatic clearance.
/// Example: /// Example: NETHERLANDS
/// Constraints: Minimum length = 0, Maximum length = 50
/// Description of when this diplomatic clearance is valid.
/// Example: /// Example: CY2023
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *DiplomaticClearanceDetails_Ingest) ValidDesc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of when this diplomatic clearance is valid.
/// Example: /// Example: CY2023
/// Constraints: Minimum length = 0, Maximum length = 256
/// Remarks concerning the valid diplomatic clearance window.
/// Example: /// Example: Period remarks
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *DiplomaticClearanceDetails_Ingest) WindowRemark() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Remarks concerning the valid diplomatic clearance window.
/// Example: /// Example: Period remarks
/// Constraints: Minimum length = 0, Maximum length = 256
/// The navigation point name where the aircraft must enter the country.
/// Example: /// Example: LOMOS
/// Constraints: Minimum length = 0, Maximum length = 38
func (rcv *DiplomaticClearanceDetails_Ingest) EntryPoint() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The navigation point name where the aircraft must enter the country.
/// Example: /// Example: LOMOS
/// Constraints: Minimum length = 0, Maximum length = 38
/// Earliest time the aircraft may enter the country, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearanceDetails_Ingest) EntryNet() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Earliest time the aircraft may enter the country, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// The navigation point name where the aircraft must exit the country.
/// Example: /// Example: BUDOP
/// Constraints: Minimum length = 0, Maximum length = 38
func (rcv *DiplomaticClearanceDetails_Ingest) ExitPoint() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The navigation point name where the aircraft must exit the country.
/// Example: /// Example: BUDOP
/// Constraints: Minimum length = 0, Maximum length = 38
/// Latest time the aircraft may exit the country, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearanceDetails_Ingest) ExitNlt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Latest time the aircraft may exit the country, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// Flag indicating whether the clearance request requires ICAO specific information.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearanceDetails_Ingest) ReqIcao() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating whether the clearance request requires ICAO specific information.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearanceDetails_Ingest) MutateReqIcao(n bool) bool {
	return rcv._tab.MutateBoolSlot(40, n)
}

/// The type of action the aircraft can take with this diplomatic clearance (e.g. O for Overfly, L for Land, etc.).
/// Example: /// Example: O
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *DiplomaticClearanceDetails_Ingest) Action() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of action the aircraft can take with this diplomatic clearance (e.g. O for Overfly, L for Land, etc.).
/// Example: /// Example: O
/// Constraints: Minimum length = 0, Maximum length = 1
/// Indicates the current status of the diplomatic clearance request.
/// Example: /// Example: IN WORK
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *DiplomaticClearanceDetails_Ingest) Status() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the current status of the diplomatic clearance request.
/// Example: /// Example: IN WORK
/// Constraints: Minimum length = 0, Maximum length = 16
/// The diplomatic clearance profile name used within clearance management systems.
/// Example: /// Example: T LAND/OFLY IATA COMPLIANT CARGO 23
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *DiplomaticClearanceDetails_Ingest) Profile() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The diplomatic clearance profile name used within clearance management systems.
/// Example: /// Example: T LAND/OFLY IATA COMPLIANT CARGO 23
/// Constraints: Minimum length = 0, Maximum length = 100
/// Flag indicating whether entry/exit points are required for clearances.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearanceDetails_Ingest) ReqPoint() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating whether entry/exit points are required for clearances.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearanceDetails_Ingest) MutateReqPoint(n bool) bool {
	return rcv._tab.MutateBoolSlot(48, n)
}

/// Remarks concerning this diplomatic clearance.
/// Example: /// Example: Clearance remarks
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *DiplomaticClearanceDetails_Ingest) ClearanceRemark() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Remarks concerning this diplomatic clearance.
/// Example: /// Example: Clearance remarks
/// Constraints: Minimum length = 0, Maximum length = 1024
func DiplomaticClearanceDetails_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(24)
}
func DiplomaticClearanceDetails_IngestAddIdSortie(builder *flatbuffers.Builder, idSortie flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(idSortie), 0)
}
func DiplomaticClearanceDetails_IngestAddLegNum(builder *flatbuffers.Builder, legNum int32) {
	builder.PrependInt32Slot(1, legNum, 0)
}
func DiplomaticClearanceDetails_IngestAddRouteString(builder *flatbuffers.Builder, routeString flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(routeString), 0)
}
func DiplomaticClearanceDetails_IngestAddValidStartTime(builder *flatbuffers.Builder, validStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(validStartTime), 0)
}
func DiplomaticClearanceDetails_IngestAddValidEndTime(builder *flatbuffers.Builder, validEndTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(validEndTime), 0)
}
func DiplomaticClearanceDetails_IngestAddClearanceId(builder *flatbuffers.Builder, clearanceId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(clearanceId), 0)
}
func DiplomaticClearanceDetails_IngestAddExternalClearanceId(builder *flatbuffers.Builder, externalClearanceId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(externalClearanceId), 0)
}
func DiplomaticClearanceDetails_IngestAddClearedCallSign(builder *flatbuffers.Builder, clearedCallSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(clearedCallSign), 0)
}
func DiplomaticClearanceDetails_IngestAddSequenceNum(builder *flatbuffers.Builder, sequenceNum int32) {
	builder.PrependInt32Slot(8, sequenceNum, 0)
}
func DiplomaticClearanceDetails_IngestAddCountryCode(builder *flatbuffers.Builder, countryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(countryCode), 0)
}
func DiplomaticClearanceDetails_IngestAddAltCountryCode(builder *flatbuffers.Builder, altCountryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(altCountryCode), 0)
}
func DiplomaticClearanceDetails_IngestAddCountryName(builder *flatbuffers.Builder, countryName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(countryName), 0)
}
func DiplomaticClearanceDetails_IngestAddValidDesc(builder *flatbuffers.Builder, validDesc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(validDesc), 0)
}
func DiplomaticClearanceDetails_IngestAddWindowRemark(builder *flatbuffers.Builder, windowRemark flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(windowRemark), 0)
}
func DiplomaticClearanceDetails_IngestAddEntryPoint(builder *flatbuffers.Builder, entryPoint flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(entryPoint), 0)
}
func DiplomaticClearanceDetails_IngestAddEntryNet(builder *flatbuffers.Builder, entryNet flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(entryNet), 0)
}
func DiplomaticClearanceDetails_IngestAddExitPoint(builder *flatbuffers.Builder, exitPoint flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(exitPoint), 0)
}
func DiplomaticClearanceDetails_IngestAddExitNlt(builder *flatbuffers.Builder, exitNlt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(exitNlt), 0)
}
func DiplomaticClearanceDetails_IngestAddReqIcao(builder *flatbuffers.Builder, reqIcao bool) {
	builder.PrependBoolSlot(18, reqIcao, false)
}
func DiplomaticClearanceDetails_IngestAddAction(builder *flatbuffers.Builder, action flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(action), 0)
}
func DiplomaticClearanceDetails_IngestAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(status), 0)
}
func DiplomaticClearanceDetails_IngestAddProfile(builder *flatbuffers.Builder, profile flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(profile), 0)
}
func DiplomaticClearanceDetails_IngestAddReqPoint(builder *flatbuffers.Builder, reqPoint bool) {
	builder.PrependBoolSlot(22, reqPoint, false)
}
func DiplomaticClearanceDetails_IngestAddClearanceRemark(builder *flatbuffers.Builder, clearanceRemark flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(clearanceRemark), 0)
}
func DiplomaticClearanceDetails_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
