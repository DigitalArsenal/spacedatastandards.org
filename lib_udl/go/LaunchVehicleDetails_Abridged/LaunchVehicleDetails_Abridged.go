// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LaunchVehicleDetails_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.
type LaunchVehicleDetails_Abridged struct {
	_tab flatbuffers.Table
}

const LaunchVehicleDetails_AbridgedIdentifier = "LAUN"

func GetRootAsLaunchVehicleDetails_Abridged(buf []byte, offset flatbuffers.UOffsetT) *LaunchVehicleDetails_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LaunchVehicleDetails_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishLaunchVehicleDetails_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LaunchVehicleDetails_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func LaunchVehicleDetails_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, LaunchVehicleDetails_AbridgedIdentifier)
}

func GetSizePrefixedRootAsLaunchVehicleDetails_Abridged(buf []byte, offset flatbuffers.UOffsetT) *LaunchVehicleDetails_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LaunchVehicleDetails_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLaunchVehicleDetails_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LaunchVehicleDetails_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedLaunchVehicleDetails_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, LaunchVehicleDetails_AbridgedIdentifier)
}

func (rcv *LaunchVehicleDetails_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LaunchVehicleDetails_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: LAUNCHVEHICLEDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *LaunchVehicleDetails_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: LAUNCHVEHICLEDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Identifier of the parent launch vehicle record.
/// Example: /// Example: LAUNCHVEHICLE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *LaunchVehicleDetails_Abridged) IdLaunchVehicle() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the parent launch vehicle record.
/// Example: /// Example: LAUNCHVEHICLE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *LaunchVehicleDetails_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Vehicle variant.
/// Example: /// Example: Example-variant
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Abridged) Variant() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Vehicle variant.
/// Example: /// Example: Example-variant
/// Constraints: Minimum length = 0, Maximum length = 64
/// Vehicle minor variant.
/// Example: /// Example: Example-minor-variant
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Abridged) MinorVariant() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Vehicle minor variant.
/// Example: /// Example: Example-minor-variant
/// Constraints: Minimum length = 0, Maximum length = 64
/// Vehicle category.
/// Example: /// Example: Example-category
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Abridged) Category() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Vehicle category.
/// Example: /// Example: Example-category
/// Constraints: Minimum length = 0, Maximum length = 64
/// ID of the organization that manufactures the launch vehicle.
/// Example: /// Example: MANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *LaunchVehicleDetails_Abridged) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the organization that manufactures the launch vehicle.
/// Example: /// Example: MANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Vehicle launch prefix.
/// Example: /// Example: AX011
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *LaunchVehicleDetails_Abridged) LaunchPrefix() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Vehicle launch prefix.
/// Example: /// Example: AX011
/// Constraints: Minimum length = 0, Maximum length = 8
/// Vehicle family.
/// Example: /// Example: Example-family
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Abridged) Family() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Vehicle family.
/// Example: /// Example: Example-family
/// Constraints: Minimum length = 0, Maximum length = 64
/// Propellant type.
/// Example: /// Example: Nitrogen
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Abridged) Propellant() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Propellant type.
/// Example: /// Example: Nitrogen
/// Constraints: Minimum length = 0, Maximum length = 64
/// Oxidizer type.
/// Example: /// Example: Bromine
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Abridged) Oxidizer() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Oxidizer type.
/// Example: /// Example: Bromine
/// Constraints: Minimum length = 0, Maximum length = 64
/// Vehicle length in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) Length() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle length in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateLength(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Vehicle diameter in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) Diameter() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle diameter in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateDiameter(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Vehicle total mass at launch time in kg (including all boosters).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) LaunchMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle total mass at launch time in kg (including all boosters).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateLaunchMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Maximum vehicle payload mass to GEO orbit in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) GeoPayloadMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum vehicle payload mass to GEO orbit in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateGeoPayloadMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Max vehicle payload mass to Geo-Transfer Orbit in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) GtoPayloadMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Max vehicle payload mass to Geo-Transfer Orbit in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateGtoPayloadMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Max vehicle payload mass to LEO orbit in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) LeoPayloadMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Max vehicle payload mass to LEO orbit in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateLeoPayloadMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Max vehicle payload mass to Sun-Synchronous Orbit in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) SsoPayloadMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Max vehicle payload mass to Sun-Synchronous Orbit in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateSsoPayloadMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Vehicle fairing length in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) FairingLength() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle fairing length in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateFairingLength(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Name of the fairing.
/// Example: /// Example: Example-fairing-name
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Abridged) FairingName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the fairing.
/// Example: /// Example: Example-fairing-name
/// Constraints: Minimum length = 0, Maximum length = 64
/// Vehicle fairing maximum external diameter in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) FairingExternalDiameter() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle fairing maximum external diameter in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateFairingExternalDiameter(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Vehicle fairing maximum internal diameter in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) FairingInternalDiameter() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle fairing maximum internal diameter in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateFairingInternalDiameter(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Vehicle fairing mass in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) FairingMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle fairing mass in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateFairingMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Fairing material.
/// Example: /// Example: Example-fairing-material
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Abridged) FairingMaterial() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Fairing material.
/// Example: /// Example: Example-fairing-material
/// Constraints: Minimum length = 0, Maximum length = 64
/// Vehicle maximum acceleration load in g.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MaxAccelLoad() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle maximum acceleration load in g.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateMaxAccelLoad(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Vehicle maximum payload lateral frequency in Hz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MaxPayloadFreqLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle maximum payload lateral frequency in Hz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateMaxPayloadFreqLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Vehicle maximum payload longitudinal frequency in Hz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MaxPayloadFreqLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle maximum payload longitudinal frequency in Hz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateMaxPayloadFreqLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Vehicle maximum acoustic level in dB.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MaxAcousticLevel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle maximum acoustic level in dB.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateMaxAcousticLevel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Vehicle maximum acoustic level range in Hz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MaxAcousticLevelRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle maximum acoustic level range in Hz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateMaxAcousticLevelRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Vehicle overall sound pressure level in dB.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) SoundPressureLevel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle overall sound pressure level in dB.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateSoundPressureLevel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Vehicle maximum flight shock force in g.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MaxFlightShockForce() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle maximum flight shock force in g.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateMaxFlightShockForce(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Vehicle maximum flight shock frequency in Hz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MaxFlightShockFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle maximum flight shock frequency in Hz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateMaxFlightShockFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// Vehicle fairing maximum pressure change in kPa/sec.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MaxFairingPressureChange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle fairing maximum pressure change in kPa/sec.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateMaxFairingPressureChange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// Launch vehicle estimated launch price in US dollars.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) EstLaunchPrice() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle estimated launch price in US dollars.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateEstLaunchPrice(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// Launch vehicle typical estimated launch price in US dollars.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) EstLaunchPriceTypical() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle typical estimated launch price in US dollars.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateEstLaunchPriceTypical(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) GtoInj3SigAccuracyApogeeTarget() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateGtoInj3SigAccuracyApogeeTarget(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) GtoInj3SigAccuracyApogeeMargin() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateGtoInj3SigAccuracyApogeeMargin(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) GtoInj3SigAccuracyPerigeeTarget() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateGtoInj3SigAccuracyPerigeeTarget(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) GtoInj3SigAccuracyPerigeeMargin() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateGtoInj3SigAccuracyPerigeeMargin(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) GtoInj3SigAccuracyInclinationTarget() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateGtoInj3SigAccuracyInclinationTarget(n float64) bool {
	return rcv._tab.MutateFloat64Slot(82, n)
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) GtoInj3SigAccuracyInclinationMargin() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateGtoInj3SigAccuracyInclinationMargin(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// Launch vehicle attitude accuracy (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) AttitudeAccuracy() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle attitude accuracy (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateAttitudeAccuracy(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// Launch vehicle payload separation rate in m/s.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) PayloadSeparationRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle payload separation rate in m/s.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutatePayloadSeparationRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(88, n)
}

/// Launch vehicle deployment rotation rate in RPM.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) DeploymentRotationRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle deployment rotation rate in RPM.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) MutateDeploymentRotationRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// Optional URL for additional information on the vehicle.
/// Example: /// Example: Example URL
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *LaunchVehicleDetails_Abridged) SourceUrl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URL for additional information on the vehicle.
/// Example: /// Example: Example URL
/// Constraints: Minimum length = 0, Maximum length = 256
/// Notes/Description of the launch vehicle.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *LaunchVehicleDetails_Abridged) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes/Description of the launch vehicle.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
/// Notes/Description of the launch vehicle fairing.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *LaunchVehicleDetails_Abridged) FairingNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes/Description of the launch vehicle fairing.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
/// Notes/Description of the launch vehicle payload.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *LaunchVehicleDetails_Abridged) PayloadNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes/Description of the launch vehicle payload.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LaunchVehicleDetails_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LaunchVehicleDetails_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LaunchVehicleDetails_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LaunchVehicleDetails_Abridged) DataMode() LaunchVehicleDetails_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return LaunchVehicleDetails_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LaunchVehicleDetails_Abridged) MutateDataMode(n LaunchVehicleDetails_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(110, int8(n))
}

func LaunchVehicleDetails_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(54)
}
func LaunchVehicleDetails_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func LaunchVehicleDetails_AbridgedAddIdLaunchVehicle(builder *flatbuffers.Builder, idLaunchVehicle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idLaunchVehicle), 0)
}
func LaunchVehicleDetails_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func LaunchVehicleDetails_AbridgedAddVariant(builder *flatbuffers.Builder, variant flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(variant), 0)
}
func LaunchVehicleDetails_AbridgedAddMinorVariant(builder *flatbuffers.Builder, minorVariant flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(minorVariant), 0)
}
func LaunchVehicleDetails_AbridgedAddCategory(builder *flatbuffers.Builder, category flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(category), 0)
}
func LaunchVehicleDetails_AbridgedAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func LaunchVehicleDetails_AbridgedAddLaunchPrefix(builder *flatbuffers.Builder, launchPrefix flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(launchPrefix), 0)
}
func LaunchVehicleDetails_AbridgedAddFamily(builder *flatbuffers.Builder, family flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(family), 0)
}
func LaunchVehicleDetails_AbridgedAddPropellant(builder *flatbuffers.Builder, propellant flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(propellant), 0)
}
func LaunchVehicleDetails_AbridgedAddOxidizer(builder *flatbuffers.Builder, oxidizer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(oxidizer), 0)
}
func LaunchVehicleDetails_AbridgedAddLength(builder *flatbuffers.Builder, length float64) {
	builder.PrependFloat64Slot(11, length, 0.0)
}
func LaunchVehicleDetails_AbridgedAddDiameter(builder *flatbuffers.Builder, diameter float64) {
	builder.PrependFloat64Slot(12, diameter, 0.0)
}
func LaunchVehicleDetails_AbridgedAddLaunchMass(builder *flatbuffers.Builder, launchMass float64) {
	builder.PrependFloat64Slot(13, launchMass, 0.0)
}
func LaunchVehicleDetails_AbridgedAddGeoPayloadMass(builder *flatbuffers.Builder, geoPayloadMass float64) {
	builder.PrependFloat64Slot(14, geoPayloadMass, 0.0)
}
func LaunchVehicleDetails_AbridgedAddGtoPayloadMass(builder *flatbuffers.Builder, gtoPayloadMass float64) {
	builder.PrependFloat64Slot(15, gtoPayloadMass, 0.0)
}
func LaunchVehicleDetails_AbridgedAddLeoPayloadMass(builder *flatbuffers.Builder, leoPayloadMass float64) {
	builder.PrependFloat64Slot(16, leoPayloadMass, 0.0)
}
func LaunchVehicleDetails_AbridgedAddSsoPayloadMass(builder *flatbuffers.Builder, ssoPayloadMass float64) {
	builder.PrependFloat64Slot(17, ssoPayloadMass, 0.0)
}
func LaunchVehicleDetails_AbridgedAddFairingLength(builder *flatbuffers.Builder, fairingLength float64) {
	builder.PrependFloat64Slot(18, fairingLength, 0.0)
}
func LaunchVehicleDetails_AbridgedAddFairingName(builder *flatbuffers.Builder, fairingName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(fairingName), 0)
}
func LaunchVehicleDetails_AbridgedAddFairingExternalDiameter(builder *flatbuffers.Builder, fairingExternalDiameter float64) {
	builder.PrependFloat64Slot(20, fairingExternalDiameter, 0.0)
}
func LaunchVehicleDetails_AbridgedAddFairingInternalDiameter(builder *flatbuffers.Builder, fairingInternalDiameter float64) {
	builder.PrependFloat64Slot(21, fairingInternalDiameter, 0.0)
}
func LaunchVehicleDetails_AbridgedAddFairingMass(builder *flatbuffers.Builder, fairingMass float64) {
	builder.PrependFloat64Slot(22, fairingMass, 0.0)
}
func LaunchVehicleDetails_AbridgedAddFairingMaterial(builder *flatbuffers.Builder, fairingMaterial flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(fairingMaterial), 0)
}
func LaunchVehicleDetails_AbridgedAddMaxAccelLoad(builder *flatbuffers.Builder, maxAccelLoad float64) {
	builder.PrependFloat64Slot(24, maxAccelLoad, 0.0)
}
func LaunchVehicleDetails_AbridgedAddMaxPayloadFreqLat(builder *flatbuffers.Builder, maxPayloadFreqLat float64) {
	builder.PrependFloat64Slot(25, maxPayloadFreqLat, 0.0)
}
func LaunchVehicleDetails_AbridgedAddMaxPayloadFreqLon(builder *flatbuffers.Builder, maxPayloadFreqLon float64) {
	builder.PrependFloat64Slot(26, maxPayloadFreqLon, 0.0)
}
func LaunchVehicleDetails_AbridgedAddMaxAcousticLevel(builder *flatbuffers.Builder, maxAcousticLevel float64) {
	builder.PrependFloat64Slot(27, maxAcousticLevel, 0.0)
}
func LaunchVehicleDetails_AbridgedAddMaxAcousticLevelRange(builder *flatbuffers.Builder, maxAcousticLevelRange float64) {
	builder.PrependFloat64Slot(28, maxAcousticLevelRange, 0.0)
}
func LaunchVehicleDetails_AbridgedAddSoundPressureLevel(builder *flatbuffers.Builder, soundPressureLevel float64) {
	builder.PrependFloat64Slot(29, soundPressureLevel, 0.0)
}
func LaunchVehicleDetails_AbridgedAddMaxFlightShockForce(builder *flatbuffers.Builder, maxFlightShockForce float64) {
	builder.PrependFloat64Slot(30, maxFlightShockForce, 0.0)
}
func LaunchVehicleDetails_AbridgedAddMaxFlightShockFreq(builder *flatbuffers.Builder, maxFlightShockFreq float64) {
	builder.PrependFloat64Slot(31, maxFlightShockFreq, 0.0)
}
func LaunchVehicleDetails_AbridgedAddMaxFairingPressureChange(builder *flatbuffers.Builder, maxFairingPressureChange float64) {
	builder.PrependFloat64Slot(32, maxFairingPressureChange, 0.0)
}
func LaunchVehicleDetails_AbridgedAddEstLaunchPrice(builder *flatbuffers.Builder, estLaunchPrice float64) {
	builder.PrependFloat64Slot(33, estLaunchPrice, 0.0)
}
func LaunchVehicleDetails_AbridgedAddEstLaunchPriceTypical(builder *flatbuffers.Builder, estLaunchPriceTypical float64) {
	builder.PrependFloat64Slot(34, estLaunchPriceTypical, 0.0)
}
func LaunchVehicleDetails_AbridgedAddGtoInj3SigAccuracyApogeeTarget(builder *flatbuffers.Builder, gtoInj3SigAccuracyApogeeTarget float64) {
	builder.PrependFloat64Slot(35, gtoInj3SigAccuracyApogeeTarget, 0.0)
}
func LaunchVehicleDetails_AbridgedAddGtoInj3SigAccuracyApogeeMargin(builder *flatbuffers.Builder, gtoInj3SigAccuracyApogeeMargin float64) {
	builder.PrependFloat64Slot(36, gtoInj3SigAccuracyApogeeMargin, 0.0)
}
func LaunchVehicleDetails_AbridgedAddGtoInj3SigAccuracyPerigeeTarget(builder *flatbuffers.Builder, gtoInj3SigAccuracyPerigeeTarget float64) {
	builder.PrependFloat64Slot(37, gtoInj3SigAccuracyPerigeeTarget, 0.0)
}
func LaunchVehicleDetails_AbridgedAddGtoInj3SigAccuracyPerigeeMargin(builder *flatbuffers.Builder, gtoInj3SigAccuracyPerigeeMargin float64) {
	builder.PrependFloat64Slot(38, gtoInj3SigAccuracyPerigeeMargin, 0.0)
}
func LaunchVehicleDetails_AbridgedAddGtoInj3SigAccuracyInclinationTarget(builder *flatbuffers.Builder, gtoInj3SigAccuracyInclinationTarget float64) {
	builder.PrependFloat64Slot(39, gtoInj3SigAccuracyInclinationTarget, 0.0)
}
func LaunchVehicleDetails_AbridgedAddGtoInj3SigAccuracyInclinationMargin(builder *flatbuffers.Builder, gtoInj3SigAccuracyInclinationMargin float64) {
	builder.PrependFloat64Slot(40, gtoInj3SigAccuracyInclinationMargin, 0.0)
}
func LaunchVehicleDetails_AbridgedAddAttitudeAccuracy(builder *flatbuffers.Builder, attitudeAccuracy float64) {
	builder.PrependFloat64Slot(41, attitudeAccuracy, 0.0)
}
func LaunchVehicleDetails_AbridgedAddPayloadSeparationRate(builder *flatbuffers.Builder, payloadSeparationRate float64) {
	builder.PrependFloat64Slot(42, payloadSeparationRate, 0.0)
}
func LaunchVehicleDetails_AbridgedAddDeploymentRotationRate(builder *flatbuffers.Builder, deploymentRotationRate float64) {
	builder.PrependFloat64Slot(43, deploymentRotationRate, 0.0)
}
func LaunchVehicleDetails_AbridgedAddSourceUrl(builder *flatbuffers.Builder, sourceUrl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(sourceUrl), 0)
}
func LaunchVehicleDetails_AbridgedAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(notes), 0)
}
func LaunchVehicleDetails_AbridgedAddFairingNotes(builder *flatbuffers.Builder, fairingNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(fairingNotes), 0)
}
func LaunchVehicleDetails_AbridgedAddPayloadNotes(builder *flatbuffers.Builder, payloadNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(payloadNotes), 0)
}
func LaunchVehicleDetails_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(createdAt), 0)
}
func LaunchVehicleDetails_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(createdBy), 0)
}
func LaunchVehicleDetails_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(source), 0)
}
func LaunchVehicleDetails_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(origin), 0)
}
func LaunchVehicleDetails_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(origNetwork), 0)
}
func LaunchVehicleDetails_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode LaunchVehicleDetails_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(53, int8(dataMode), 0)
}
func LaunchVehicleDetails_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
