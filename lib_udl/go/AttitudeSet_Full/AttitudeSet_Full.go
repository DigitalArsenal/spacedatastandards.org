// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AttitudeSet_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and meta data indicating the specifics of the orientation of an on-orbit object.  Attitude is typically distributed in a flat file containing details of the attitude generation as well as a large collection of individual points at varying time steps. AttitudeSet is analogous to this flat file.
type AttitudeSet_Full struct {
	_tab flatbuffers.Table
}

const AttitudeSet_FullIdentifier = "ATTI"

func GetRootAsAttitudeSet_Full(buf []byte, offset flatbuffers.UOffsetT) *AttitudeSet_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AttitudeSet_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishAttitudeSet_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AttitudeSet_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AttitudeSet_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AttitudeSet_FullIdentifier)
}

func GetSizePrefixedRootAsAttitudeSet_Full(buf []byte, offset flatbuffers.UOffsetT) *AttitudeSet_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AttitudeSet_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAttitudeSet_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AttitudeSet_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAttitudeSet_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AttitudeSet_FullIdentifier)
}

func (rcv *AttitudeSet_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AttitudeSet_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ATTITUDESET-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AttitudeSet_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ATTITUDESET-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AttitudeSet_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the on-orbit satellite to which this attitude set applies.
/// Example: /// Example: 41947
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AttitudeSet_Full) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the on-orbit satellite to which this attitude set applies.
/// Example: /// Example: 41947
/// Constraints: Minimum length = 0, Maximum length = 36
/// Satellite/catalog number of the on-orbit object to which this attitude set applies.
/// Example: /// Example: 41947
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the on-orbit object to which this attitude set applies.
/// Example: /// Example: 41947
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: D6593
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AttitudeSet_Full) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: D6593
/// Constraints: Minimum length = 0, Maximum length = 36
/// The type of attitude message or messages associated with this set.
/// AEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.
/// APM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.
/// Example: /// Example: AEM
/// Constraints: Minimum length = 1, Maximum length = 3
func (rcv *AttitudeSet_Full) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of attitude message or messages associated with this set.
/// AEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.
/// APM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.
/// Example: /// Example: AEM
/// Constraints: Minimum length = 1, Maximum length = 3
/// Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.
/// Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AttitudeSet_Full) EsId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.
/// Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
/// Constraints: Minimum length = 0, Maximum length = 36
/// Array of UDL UUIDs of one or more AttitudeSet records associated with this set.  For example, a spacecraft Attitude Ephemeris Set might include a reference to an Attitude Parameter Message defining the sensor to body frame transformation for a sensor onboard the spacecraft, which allows for calculation of the sensor orientation in frame2 of the attitude ephemeris.
/// Example: /// Example: ['2ea97de6-4680-4767-a07e-35d16398ef60']
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) AsRef(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AttitudeSet_Full) AsRefLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UDL UUIDs of one or more AttitudeSet records associated with this set.  For example, a spacecraft Attitude Ephemeris Set might include a reference to an Attitude Parameter Message defining the sensor to body frame transformation for a sensor onboard the spacecraft, which allows for calculation of the sensor orientation in frame2 of the attitude ephemeris.
/// Example: /// Example: ['2ea97de6-4680-4767-a07e-35d16398ef60']
/// Constraints: No constraints specified.
/// Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.
/// Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AttitudeSet_Full) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.
/// Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AttitudeSet_Full) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.
/// Example: /// Example: 2022-07-07T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) StartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.
/// Example: /// Example: 2022-07-07T16:00:00.123456Z
/// Constraints: No constraints specified.
/// The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.
/// Example: /// Example: 2022-07-07T18:00:00.654321Z
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) EndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.
/// Example: /// Example: 2022-07-07T18:00:00.654321Z
/// Constraints: No constraints specified.
/// Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
/// Example: /// Example: SCBODY
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AttitudeSet_Full) Frame1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
/// Example: /// Example: SCBODY
/// Constraints: Minimum length = 1, Maximum length = 36
/// Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
/// Example: /// Example: J2000
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AttitudeSet_Full) Frame2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
/// Example: /// Example: J2000
/// Constraints: Minimum length = 1, Maximum length = 36
/// Number of attitude records contained in this set.
/// Example: /// Example: 120
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) NumPoints() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of attitude records contained in this set.
/// Example: /// Example: 120
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) MutateNumPoints(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.
/// Example: /// Example: 60
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) StepSize() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.
/// Example: /// Example: 60
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) MutateStepSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// Initial precession angle (ECI J2000 frame) in degrees.
/// Example: /// Example: 30.5
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) PrecAngleInit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Initial precession angle (ECI J2000 frame) in degrees.
/// Example: /// Example: 30.5
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) MutatePrecAngleInit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Initial spin angle (ECI J2000 frame) in degrees.
/// Example: /// Example: 25.5
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) SpinAngleInit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Initial spin angle (ECI J2000 frame) in degrees.
/// Example: /// Example: 25.5
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) MutateSpinAngleInit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. 
/// The following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as '2', a double rotation with X-Z sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can be expressed as '312'.
/// Example: /// Example: 123
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *AttitudeSet_Full) EulerRotSeq() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. 
/// The following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as '2', a double rotation with X-Z sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can be expressed as '312'.
/// Example: /// Example: 123
/// Constraints: Minimum length = 0, Maximum length = 3
/// Collection of attitude data associated with this Attitude Set.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) AttitudeList(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AttitudeSet_Full) AttitudeListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of attitude data associated with this Attitude Set.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Recommended interpolation method for estimating attitude ephemeris data.
/// Example: /// Example: LINEAR
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AttitudeSet_Full) Interpolator() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Recommended interpolation method for estimating attitude ephemeris data.
/// Example: /// Example: LINEAR
/// Constraints: Minimum length = 0, Maximum length = 16
/// Recommended polynomial interpolation degree.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) InterpolatorDegree() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Recommended polynomial interpolation degree.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) MutateInterpolatorDegree(n int32) bool {
	return rcv._tab.MutateInt32Slot(46, n)
}

/// Optional notes/comments for this attitude set.
/// Example: /// Example: Notes for this attitude set
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *AttitudeSet_Full) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional notes/comments for this attitude set.
/// Example: /// Example: Notes for this attitude set
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-07-05T12:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-07-05T12:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AttitudeSet_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AttitudeSet_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AttitudeSet_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AttitudeSet_Full) DataMode() AttitudeSet_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return AttitudeSet_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AttitudeSet_Full) MutateDataMode(n AttitudeSet_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(58, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AttitudeSet_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AttitudeSet_Full) OnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func AttitudeSet_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(30)
}
func AttitudeSet_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AttitudeSet_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AttitudeSet_FullAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func AttitudeSet_FullAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(3, satNo, 0)
}
func AttitudeSet_FullAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(origObjectId), 0)
}
func AttitudeSet_FullAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(type_), 0)
}
func AttitudeSet_FullAddEsId(builder *flatbuffers.Builder, esId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(esId), 0)
}
func AttitudeSet_FullAddAsRef(builder *flatbuffers.Builder, asRef flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(asRef), 0)
}
func AttitudeSet_FullStartAsRefVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AttitudeSet_FullAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(idSensor), 0)
}
func AttitudeSet_FullAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(origSensorId), 0)
}
func AttitudeSet_FullAddStartTime(builder *flatbuffers.Builder, startTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(startTime), 0)
}
func AttitudeSet_FullAddEndTime(builder *flatbuffers.Builder, endTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(endTime), 0)
}
func AttitudeSet_FullAddFrame1(builder *flatbuffers.Builder, frame1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(frame1), 0)
}
func AttitudeSet_FullAddFrame2(builder *flatbuffers.Builder, frame2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(frame2), 0)
}
func AttitudeSet_FullAddNumPoints(builder *flatbuffers.Builder, numPoints int32) {
	builder.PrependInt32Slot(14, numPoints, 0)
}
func AttitudeSet_FullAddStepSize(builder *flatbuffers.Builder, stepSize int32) {
	builder.PrependInt32Slot(15, stepSize, 0)
}
func AttitudeSet_FullAddPrecAngleInit(builder *flatbuffers.Builder, precAngleInit float64) {
	builder.PrependFloat64Slot(16, precAngleInit, 0.0)
}
func AttitudeSet_FullAddSpinAngleInit(builder *flatbuffers.Builder, spinAngleInit float64) {
	builder.PrependFloat64Slot(17, spinAngleInit, 0.0)
}
func AttitudeSet_FullAddEulerRotSeq(builder *flatbuffers.Builder, eulerRotSeq flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(eulerRotSeq), 0)
}
func AttitudeSet_FullAddAttitudeList(builder *flatbuffers.Builder, attitudeList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(attitudeList), 0)
}
func AttitudeSet_FullStartAttitudeListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AttitudeSet_FullAddInterpolator(builder *flatbuffers.Builder, interpolator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(interpolator), 0)
}
func AttitudeSet_FullAddInterpolatorDegree(builder *flatbuffers.Builder, interpolatorDegree int32) {
	builder.PrependInt32Slot(21, interpolatorDegree, 0)
}
func AttitudeSet_FullAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(notes), 0)
}
func AttitudeSet_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(createdAt), 0)
}
func AttitudeSet_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(createdBy), 0)
}
func AttitudeSet_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(source), 0)
}
func AttitudeSet_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(origin), 0)
}
func AttitudeSet_FullAddDataMode(builder *flatbuffers.Builder, dataMode AttitudeSet_Full_dataMode_Enum) {
	builder.PrependInt8Slot(27, int8(dataMode), 0)
}
func AttitudeSet_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(origNetwork), 0)
}
func AttitudeSet_FullAddOnOrbit(builder *flatbuffers.Builder, onOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(onOrbit), 0)
}
func AttitudeSet_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
