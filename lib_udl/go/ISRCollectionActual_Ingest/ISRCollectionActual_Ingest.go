// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ISRCollectionActual_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Actual start and stop for the collection.
type ISRCollectionActual_Ingest struct {
	_tab flatbuffers.Table
}

const ISRCollectionActual_IngestIdentifier = "ISRC"

func GetRootAsISRCollectionActual_Ingest(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionActual_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ISRCollectionActual_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishISRCollectionActual_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionActual_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ISRCollectionActual_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ISRCollectionActual_IngestIdentifier)
}

func GetSizePrefixedRootAsISRCollectionActual_Ingest(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionActual_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ISRCollectionActual_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedISRCollectionActual_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionActual_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedISRCollectionActual_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ISRCollectionActual_IngestIdentifier)
}

func (rcv *ISRCollectionActual_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ISRCollectionActual_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique Identifier of actual collection period for historical archive.
/// Example: /// Example: ISRCOLLECTIONACTUAL-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *ISRCollectionActual_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique Identifier of actual collection period for historical archive.
/// Example: /// Example: ISRCOLLECTIONACTUAL-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Start time the collection actually occurred, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
func (rcv *ISRCollectionActual_Ingest) Start() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Start time the collection actually occurred, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
/// Stop time the collection actually occurred, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
func (rcv *ISRCollectionActual_Ingest) Stop() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Stop time the collection actually occurred, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
func ISRCollectionActual_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ISRCollectionActual_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ISRCollectionActual_IngestAddStart(builder *flatbuffers.Builder, start flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(start), 0)
}
func ISRCollectionActual_IngestAddStop(builder *flatbuffers.Builder, stop flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(stop), 0)
}
func ISRCollectionActual_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
