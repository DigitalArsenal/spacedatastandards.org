// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Scientific_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Scientific or other data from Seradata.
type Scientific_Full struct {
	_tab flatbuffers.Table
}

const Scientific_FullIdentifier = "SCIE"

func GetRootAsScientific_Full(buf []byte, offset flatbuffers.UOffsetT) *Scientific_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Scientific_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishScientific_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Scientific_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Scientific_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Scientific_FullIdentifier)
}

func GetSizePrefixedRootAsScientific_Full(buf []byte, offset flatbuffers.UOffsetT) *Scientific_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Scientific_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedScientific_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Scientific_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedScientific_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Scientific_FullIdentifier)
}

func (rcv *Scientific_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Scientific_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SCIENTIFIC-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Scientific_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SCIENTIFIC-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Scientific_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: REF-SPACECRAFT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Scientific_Full) SpacecraftId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: REF-SPACECRAFT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Hosted for company/Organization Id.
/// Example: /// Example: REF-HOSTEDFORCOMPANYORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Scientific_Full) HostedForCompanyOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Hosted for company/Organization Id.
/// Example: /// Example: REF-HOSTEDFORCOMPANYORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the organization which manufactures this bus.
/// Example: /// Example: REF-MANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Scientific_Full) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the organization which manufactures this bus.
/// Example: /// Example: REF-MANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Payload category, e.g. Magnetometer, Radiometer, Sensor, etc.
/// Example: /// Example: Sensor
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *Scientific_Full) PayloadCategory() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Payload category, e.g. Magnetometer, Radiometer, Sensor, etc.
/// Example: /// Example: Sensor
/// Constraints: Minimum length = 0, Maximum length = 50
/// Sensor name from sera data, e.g. SEM/MAG (SEM / Magnetometer).
/// Example: /// Example: SEM/MAG
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Scientific_Full) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sensor name from sera data, e.g. SEM/MAG (SEM / Magnetometer).
/// Example: /// Example: SEM/MAG
/// Constraints: Minimum length = 1, Maximum length = 128
/// Frequency band, e.g. Gamma.
/// Example: /// Example: Gamma
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *Scientific_Full) FrequencyBand() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Frequency band, e.g. Gamma.
/// Example: /// Example: Gamma
/// Constraints: Minimum length = 0, Maximum length = 50
/// Notes associated with the payload.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *Scientific_Full) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes associated with the payload.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 256
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Scientific_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Scientific_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Scientific_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Scientific_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Scientific_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Scientific_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Scientific_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Scientific_Full) DataMode() Scientific_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return Scientific_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Scientific_Full) MutateDataMode(n Scientific_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(36, int8(n))
}

/// ID of the parent entity for this Scientific.
/// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Scientific_Full) IdEntity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the parent entity for this Scientific.
/// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
/// Constraints: Minimum length = 0, Maximum length = 36
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Scientific_Full) Entity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func Scientific_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func Scientific_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Scientific_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Scientific_FullAddSpacecraftId(builder *flatbuffers.Builder, spacecraftId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(spacecraftId), 0)
}
func Scientific_FullAddHostedForCompanyOrgId(builder *flatbuffers.Builder, hostedForCompanyOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(hostedForCompanyOrgId), 0)
}
func Scientific_FullAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func Scientific_FullAddPayloadCategory(builder *flatbuffers.Builder, payloadCategory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(payloadCategory), 0)
}
func Scientific_FullAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(name), 0)
}
func Scientific_FullAddFrequencyBand(builder *flatbuffers.Builder, frequencyBand flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(frequencyBand), 0)
}
func Scientific_FullAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(notes), 0)
}
func Scientific_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(createdAt), 0)
}
func Scientific_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(createdBy), 0)
}
func Scientific_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(updatedAt), 0)
}
func Scientific_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(updatedBy), 0)
}
func Scientific_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(source), 0)
}
func Scientific_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(origin), 0)
}
func Scientific_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(origNetwork), 0)
}
func Scientific_FullAddDataMode(builder *flatbuffers.Builder, dataMode Scientific_Full_dataMode_Enum) {
	builder.PrependInt8Slot(16, int8(dataMode), 0)
}
func Scientific_FullAddIdEntity(builder *flatbuffers.Builder, idEntity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(idEntity), 0)
}
func Scientific_FullAddEntity(builder *flatbuffers.Builder, entity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(entity), 0)
}
func Scientific_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
