// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AirfieldStatus_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// The airfield status contains dynamic data of an airfield's capabilities.
type AirfieldStatus_Abridged struct {
	_tab flatbuffers.Table
}

const AirfieldStatus_AbridgedIdentifier = "AIRF"

func GetRootAsAirfieldStatus_Abridged(buf []byte, offset flatbuffers.UOffsetT) *AirfieldStatus_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AirfieldStatus_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishAirfieldStatus_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirfieldStatus_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AirfieldStatus_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AirfieldStatus_AbridgedIdentifier)
}

func GetSizePrefixedRootAsAirfieldStatus_Abridged(buf []byte, offset flatbuffers.UOffsetT) *AirfieldStatus_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AirfieldStatus_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAirfieldStatus_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirfieldStatus_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAirfieldStatus_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AirfieldStatus_AbridgedIdentifier)
}

func (rcv *AirfieldStatus_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AirfieldStatus_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AirfieldStatus_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AirfieldStatus_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the Airfield for which this status is referencing.
/// Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AirfieldStatus_Abridged) IdAirfield() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Airfield for which this status is referencing.
/// Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
/// Constraints: Minimum length = 1, Maximum length = 36
/// Alternate airfield identifier provided by the source.
/// Example: /// Example: AIRFIELD-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirfieldStatus_Abridged) AltAirfieldId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Alternate airfield identifier provided by the source.
/// Example: /// Example: AIRFIELD-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Maximum on ground (MOG) number of high-reach/wide-body passenger aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) PassengerServiceMog() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Maximum on ground (MOG) number of high-reach/wide-body passenger aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MutatePassengerServiceMog(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// Maximum on ground (MOG) number of fleet aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) FleetServiceMog() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Maximum on ground (MOG) number of fleet aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MutateFleetServiceMog(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

/// Maximum on ground (MOG) number of high-reach/wide-body cargo aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
/// Example: /// Example: 8
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) CargoMog() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Maximum on ground (MOG) number of high-reach/wide-body cargo aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
/// Example: /// Example: 8
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MutateCargoMog(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// Maximum on ground (MOG) number of aircraft that can be simultaneously refueled based on spacing and manpower at the time of status.
/// Example: /// Example: 9
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) FuelMog() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Maximum on ground (MOG) number of aircraft that can be simultaneously refueled based on spacing and manpower at the time of status.
/// Example: /// Example: 9
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MutateFuelMog(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// Array of fuel types available at the airfield. This array must be the same length as fuelQtys.
/// Example: /// Example: ['JP-8', 'Jet A', 'AVGAS']
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) FuelTypes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirfieldStatus_Abridged) FuelTypesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of fuel types available at the airfield. This array must be the same length as fuelQtys.
/// Example: /// Example: ['JP-8', 'Jet A', 'AVGAS']
/// Constraints: No constraints specified.
/// Array of quantities for each fuel type at the airfield, in kilograms. The values in this array must correspond to the position index in fuelTypes. This array must be the same length as fuelTypes.
/// Example: /// Example: [263083.6, 286674.9, 18143.69]
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) FuelQtys(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirfieldStatus_Abridged) FuelQtysLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of quantities for each fuel type at the airfield, in kilograms. The values in this array must correspond to the position index in fuelTypes. This array must be the same length as fuelTypes.
/// Example: /// Example: [263083.6, 286674.9, 18143.69]
/// Constraints: No constraints specified.
/// Maximum on ground (MOG) number of aircraft that can be simultaneously ground handled for standard maintenance based on spacing and manpower at the time of status.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MxMog() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Maximum on ground (MOG) number of aircraft that can be simultaneously ground handled for standard maintenance based on spacing and manpower at the time of status.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MutateMxMog(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

/// Maximum on ground (MOG) number of aircraft due to items not directly related to the airfield infrastructure or aircraft servicing capability based on spacing and manpower at the time of status.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) OperatingMog() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Maximum on ground (MOG) number of aircraft due to items not directly related to the airfield infrastructure or aircraft servicing capability based on spacing and manpower at the time of status.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MutateOperatingMog(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

/// The number of aircraft that are currently on ground (COG) at the airfield.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) NumCog() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of aircraft that are currently on ground (COG) at the airfield.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MutateNumCog(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// Maximum on ground (MOG) number of working wide-body aircraft based on spacing and manpower at the time of status.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) WideWorkingMog() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Maximum on ground (MOG) number of working wide-body aircraft based on spacing and manpower at the time of status.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MutateWideWorkingMog(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

/// Maximum on ground (MOG) number of parking wide-body aircraft based on spacing and manpower at the time of status.
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) WideParkingMog() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Maximum on ground (MOG) number of parking wide-body aircraft based on spacing and manpower at the time of status.
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MutateWideParkingMog(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// Maximum on ground (MOG) number of working narrow-body aircraft based on spacing and manpower at the time of status.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) NarrowWorkingMog() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Maximum on ground (MOG) number of working narrow-body aircraft based on spacing and manpower at the time of status.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MutateNarrowWorkingMog(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// Maximum on ground (MOG) number of parking narrow-body aircraft based on spacing and manpower at the time of status.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) NarrowParkingMog() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Maximum on ground (MOG) number of parking narrow-body aircraft based on spacing and manpower at the time of status.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MutateNarrowParkingMog(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

/// Array of material handling equipment types at the airfield. This array must be the same length as mheQtys.
/// Example: /// Example: ['30k', 'AT', '60k']
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MheTypes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirfieldStatus_Abridged) MheTypesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of material handling equipment types at the airfield. This array must be the same length as mheQtys.
/// Example: /// Example: ['30k', 'AT', '60k']
/// Constraints: No constraints specified.
/// Array of quantities for each material handling equipment types at the airfield. The values in this array must correspond to the position index in mheTypes. This array must be the same length as mheTypes.
/// Example: /// Example: [1, 3, 1]
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MheQtys(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirfieldStatus_Abridged) MheQtysLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of quantities for each material handling equipment types at the airfield. The values in this array must correspond to the position index in mheTypes. This array must be the same length as mheTypes.
/// Example: /// Example: [1, 3, 1]
/// Constraints: No constraints specified.
/// The level of medical support and capabilities available at the airfield.
/// Example: /// Example: Large Field Hospital
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirfieldStatus_Abridged) MedCap() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The level of medical support and capabilities available at the airfield.
/// Example: /// Example: Large Field Hospital
/// Constraints: Minimum length = 0, Maximum length = 64
/// The category of aircraft rescue and fire fighting (ARFF) services that are currently available at the airfield. Entries should include  the code (FAA or ICAO) and the category.
/// Example: /// Example: FAA-A
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirfieldStatus_Abridged) ArffCat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The category of aircraft rescue and fire fighting (ARFF) services that are currently available at the airfield. Entries should include  the code (FAA or ICAO) and the category.
/// Example: /// Example: FAA-A
/// Constraints: Minimum length = 0, Maximum length = 64
/// The expected time to receive ground support equipment (e.g. power units, air units, cables, hoses, etc.), in minutes.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) GseTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The expected time to receive ground support equipment (e.g. power units, air units, cables, hoses, etc.), in minutes.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MutateGseTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(46, n)
}

/// The number or ID of primary runway at the airfield.
/// Example: /// Example: 35R
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AirfieldStatus_Abridged) PriRwyNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The number or ID of primary runway at the airfield.
/// Example: /// Example: 35R
/// Constraints: Minimum length = 0, Maximum length = 16
/// The primary runway condition reading value used for determining runway braking action, from 0 to 26. A value of 0 indicates braking action is poor or non-existent, where a value of 26 indicates braking action is good.
/// Example: /// Example: 23
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) RwyCondReading() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The primary runway condition reading value used for determining runway braking action, from 0 to 26. A value of 0 indicates braking action is poor or non-existent, where a value of 26 indicates braking action is good.
/// Example: /// Example: 23
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MutateRwyCondReading(n int32) bool {
	return rcv._tab.MutateInt32Slot(50, n)
}

/// The primary runway friction factor which is dependent on the surface friction between the tires of the aircraft and the runway surface, from 0 to 100. A lower number indicates less friction and less braking response.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) RwyFrictionFactor() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The primary runway friction factor which is dependent on the surface friction between the tires of the aircraft and the runway surface, from 0 to 100. A lower number indicates less friction and less braking response.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MutateRwyFrictionFactor(n int32) bool {
	return rcv._tab.MutateInt32Slot(52, n)
}

/// Array of markings currently on the primary runway.
/// Example: /// Example: ['Aiming Point', 'Threshold']
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) RwyMarkings(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirfieldStatus_Abridged) RwyMarkingsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of markings currently on the primary runway.
/// Example: /// Example: ['Aiming Point', 'Threshold']
/// Constraints: No constraints specified.
/// Description of the current status of the airfield.
/// Example: /// Example: Status message about the airfield.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *AirfieldStatus_Abridged) Message() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the current status of the airfield.
/// Example: /// Example: Status message about the airfield.
/// Constraints: Minimum length = 0, Maximum length = 1024
/// The primary frequency which the airfield is currently operating, in megahertz.
/// Example: /// Example: 123.45
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) PriFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The primary frequency which the airfield is currently operating, in megahertz.
/// Example: /// Example: 123.45
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) MutatePriFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Array of slot types that an airfield requires a particular aircraft provide in order to consume a slot at this location.
/// Example: /// Example: ['PARKING', 'WORKING', 'LANDING']
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) SlotTypesReq(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirfieldStatus_Abridged) SlotTypesReqLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of slot types that an airfield requires a particular aircraft provide in order to consume a slot at this location.
/// Example: /// Example: ['PARKING', 'WORKING', 'LANDING']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AirfieldStatus_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirfieldStatus_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirfieldStatus_Abridged) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirfieldStatus_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirfieldStatus_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirfieldStatus_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirfieldStatus_Abridged) DataMode() AirfieldStatus_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return AirfieldStatus_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirfieldStatus_Abridged) MutateDataMode(n AirfieldStatus_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(74, int8(n))
}

func AirfieldStatus_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(36)
}
func AirfieldStatus_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AirfieldStatus_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AirfieldStatus_AbridgedAddIdAirfield(builder *flatbuffers.Builder, idAirfield flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idAirfield), 0)
}
func AirfieldStatus_AbridgedAddAltAirfieldId(builder *flatbuffers.Builder, altAirfieldId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(altAirfieldId), 0)
}
func AirfieldStatus_AbridgedAddPassengerServiceMog(builder *flatbuffers.Builder, passengerServiceMog int32) {
	builder.PrependInt32Slot(4, passengerServiceMog, 0)
}
func AirfieldStatus_AbridgedAddFleetServiceMog(builder *flatbuffers.Builder, fleetServiceMog int32) {
	builder.PrependInt32Slot(5, fleetServiceMog, 0)
}
func AirfieldStatus_AbridgedAddCargoMog(builder *flatbuffers.Builder, cargoMog int32) {
	builder.PrependInt32Slot(6, cargoMog, 0)
}
func AirfieldStatus_AbridgedAddFuelMog(builder *flatbuffers.Builder, fuelMog int32) {
	builder.PrependInt32Slot(7, fuelMog, 0)
}
func AirfieldStatus_AbridgedAddFuelTypes(builder *flatbuffers.Builder, fuelTypes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(fuelTypes), 0)
}
func AirfieldStatus_AbridgedStartFuelTypesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirfieldStatus_AbridgedAddFuelQtys(builder *flatbuffers.Builder, fuelQtys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(fuelQtys), 0)
}
func AirfieldStatus_AbridgedStartFuelQtysVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirfieldStatus_AbridgedAddMxMog(builder *flatbuffers.Builder, mxMog int32) {
	builder.PrependInt32Slot(10, mxMog, 0)
}
func AirfieldStatus_AbridgedAddOperatingMog(builder *flatbuffers.Builder, operatingMog int32) {
	builder.PrependInt32Slot(11, operatingMog, 0)
}
func AirfieldStatus_AbridgedAddNumCog(builder *flatbuffers.Builder, numCog int32) {
	builder.PrependInt32Slot(12, numCog, 0)
}
func AirfieldStatus_AbridgedAddWideWorkingMog(builder *flatbuffers.Builder, wideWorkingMog int32) {
	builder.PrependInt32Slot(13, wideWorkingMog, 0)
}
func AirfieldStatus_AbridgedAddWideParkingMog(builder *flatbuffers.Builder, wideParkingMog int32) {
	builder.PrependInt32Slot(14, wideParkingMog, 0)
}
func AirfieldStatus_AbridgedAddNarrowWorkingMog(builder *flatbuffers.Builder, narrowWorkingMog int32) {
	builder.PrependInt32Slot(15, narrowWorkingMog, 0)
}
func AirfieldStatus_AbridgedAddNarrowParkingMog(builder *flatbuffers.Builder, narrowParkingMog int32) {
	builder.PrependInt32Slot(16, narrowParkingMog, 0)
}
func AirfieldStatus_AbridgedAddMheTypes(builder *flatbuffers.Builder, mheTypes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(mheTypes), 0)
}
func AirfieldStatus_AbridgedStartMheTypesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirfieldStatus_AbridgedAddMheQtys(builder *flatbuffers.Builder, mheQtys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(mheQtys), 0)
}
func AirfieldStatus_AbridgedStartMheQtysVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirfieldStatus_AbridgedAddMedCap(builder *flatbuffers.Builder, medCap flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(medCap), 0)
}
func AirfieldStatus_AbridgedAddArffCat(builder *flatbuffers.Builder, arffCat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(arffCat), 0)
}
func AirfieldStatus_AbridgedAddGseTime(builder *flatbuffers.Builder, gseTime int32) {
	builder.PrependInt32Slot(21, gseTime, 0)
}
func AirfieldStatus_AbridgedAddPriRwyNum(builder *flatbuffers.Builder, priRwyNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(priRwyNum), 0)
}
func AirfieldStatus_AbridgedAddRwyCondReading(builder *flatbuffers.Builder, rwyCondReading int32) {
	builder.PrependInt32Slot(23, rwyCondReading, 0)
}
func AirfieldStatus_AbridgedAddRwyFrictionFactor(builder *flatbuffers.Builder, rwyFrictionFactor int32) {
	builder.PrependInt32Slot(24, rwyFrictionFactor, 0)
}
func AirfieldStatus_AbridgedAddRwyMarkings(builder *flatbuffers.Builder, rwyMarkings flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(rwyMarkings), 0)
}
func AirfieldStatus_AbridgedStartRwyMarkingsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirfieldStatus_AbridgedAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(message), 0)
}
func AirfieldStatus_AbridgedAddPriFreq(builder *flatbuffers.Builder, priFreq float64) {
	builder.PrependFloat64Slot(27, priFreq, 0.0)
}
func AirfieldStatus_AbridgedAddSlotTypesReq(builder *flatbuffers.Builder, slotTypesReq flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(slotTypesReq), 0)
}
func AirfieldStatus_AbridgedStartSlotTypesReqVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirfieldStatus_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(createdAt), 0)
}
func AirfieldStatus_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(createdBy), 0)
}
func AirfieldStatus_AbridgedAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(sourceDl), 0)
}
func AirfieldStatus_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(source), 0)
}
func AirfieldStatus_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(origin), 0)
}
func AirfieldStatus_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(origNetwork), 0)
}
func AirfieldStatus_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode AirfieldStatus_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(35, int8(dataMode), 0)
}
func AirfieldStatus_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
