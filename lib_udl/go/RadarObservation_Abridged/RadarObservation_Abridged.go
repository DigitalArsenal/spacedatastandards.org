// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RadarObservation_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
type RadarObservation_Abridged struct {
	_tab flatbuffers.Table
}

const RadarObservation_AbridgedIdentifier = "RADA"

func GetRootAsRadarObservation_Abridged(buf []byte, offset flatbuffers.UOffsetT) *RadarObservation_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RadarObservation_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishRadarObservation_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RadarObservation_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func RadarObservation_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, RadarObservation_AbridgedIdentifier)
}

func GetSizePrefixedRootAsRadarObservation_Abridged(buf []byte, offset flatbuffers.UOffsetT) *RadarObservation_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RadarObservation_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRadarObservation_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RadarObservation_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedRadarObservation_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, RadarObservation_AbridgedIdentifier)
}

func (rcv *RadarObservation_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RadarObservation_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: RADAROBSERVATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *RadarObservation_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: RADAROBSERVATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *RadarObservation_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Ob detection time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) ObTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ob detection time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RadarObservation_Abridged) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the reporting sensor.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RadarObservation_Abridged) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the reporting sensor.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

/// Optional identifier to indicate the specific tasking which produced this observation.
/// Example: /// Example: TASK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RadarObservation_Abridged) TaskId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to indicate the specific tasking which produced this observation.
/// Example: /// Example: TASK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RadarObservation_Abridged) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier of the track to which this observation belongs.
/// Example: /// Example: TRACK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RadarObservation_Abridged) TrackId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of the track to which this observation belongs.
/// Example: /// Example: TRACK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
/// Example: /// Example: FIRST
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *RadarObservation_Abridged) ObPosition() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
/// Example: /// Example: FIRST
/// Constraints: Minimum length = 0, Maximum length = 8
/// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RadarObservation_Abridged) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RadarObservation_Abridged) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Uct() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateUct(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

/// azimuth angle in degrees and topocentric frame.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Azimuth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// azimuth angle in degrees and topocentric frame.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateAzimuth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) AzimuthUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateAzimuthUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Sensor azimuth angle bias in degrees.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) AzimuthBias() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor azimuth angle bias in degrees.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateAzimuthBias(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Rate of change of the line of sight azimuth in degrees per second.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) AzimuthRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rate of change of the line of sight azimuth in degrees per second.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateAzimuthRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Line of sight elevation in degrees and topocentric frame.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Elevation() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line of sight elevation in degrees and topocentric frame.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateElevation(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) ElevationUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateElevationUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Sensor elevation bias in degrees.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) ElevationBias() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor elevation bias in degrees.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateElevationBias(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Rate of change of the line of sight elevation in degrees per second.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) ElevationRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rate of change of the line of sight elevation in degrees per second.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateElevationRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Target range in km.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Range() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Target range in km.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Range accelaration in km/s2.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) RangeAccel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Range accelaration in km/s2.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateRangeAccel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) RangeAccelUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateRangeAccelUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// One sigma uncertainty in the range measurement, in kilometers.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) RangeUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the range measurement, in kilometers.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateRangeUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Sensor range bias in km.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) RangeBias() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor range bias in km.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateRangeBias(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Rate of change of the line of sight range in km/sec.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) RangeRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rate of change of the line of sight range in km/sec.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateRangeRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// One sigma uncertainty in the range rate measurement, in kilometers/second.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) RangeRateUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the range rate measurement, in kilometers/second.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateRangeRateUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Corrected doppler measurement in meters per second.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Doppler() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Corrected doppler measurement in meters per second.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateDoppler(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// One sigma uncertainty in the corrected doppler measurement, in meters/second.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) DopplerUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the corrected doppler measurement, in meters/second.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateDopplerUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Line of sight right ascension in degrees and J2000 coordinate frame.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Ra() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line of sight right ascension in degrees and J2000 coordinate frame.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateRa(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Line of sight declination angle in degrees and J2000 coordinate frame.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Declination() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line of sight declination angle in degrees and J2000 coordinate frame.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateDeclination(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// X position of target in km in J2000 coordinate frame.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) X() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// X position of target in km in J2000 coordinate frame.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// Y position of target in km in J2000 coordinate frame.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Y() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Y position of target in km in J2000 coordinate frame.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// Z position of target in km in J2000 coordinate frame.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Z() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Z position of target in km in J2000 coordinate frame.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// X velocity of target in km/sec in J2000 coordinate frame.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Xvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// X velocity of target in km/sec in J2000 coordinate frame.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateXvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// Y velocity of target in km/sec in J2000 coordinate frame.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Yvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Y velocity of target in km/sec in J2000 coordinate frame.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateYvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// Z velocity of target in km/sec in J2000 coordinate frame.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Zvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Z velocity of target in km/sec in J2000 coordinate frame.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateZvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Senx() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateSenx(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
/// Example: /// Example: 40.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Seny() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
/// Example: /// Example: 40.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateSeny(n float64) bool {
	return rcv._tab.MutateFloat64Slot(82, n)
}

/// Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
/// Example: /// Example: 35.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Senz() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
/// Example: /// Example: 35.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateSenz(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// Radar cross section in meters squared for polarization principal.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Rcs() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Radar cross section in meters squared for polarization principal.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateRcs(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) RcsUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateRcsUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(88, n)
}

/// Radar cross section in meters squared for orthogonal polarization.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) OrthogonalRcs() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Radar cross section in meters squared for orthogonal polarization.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateOrthogonalRcs(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) OrthogonalRcsUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateOrthogonalRcsUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(92, n)
}

/// Signal to noise ratio, in dB.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Snr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Signal to noise ratio, in dB.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateSnr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(94, n)
}

/// ID of the beam that produced this observation.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Beam() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// ID of the beam that produced this observation.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateBeam(n float64) bool {
	return rcv._tab.MutateFloat64Slot(96, n)
}

/// Sensor timing bias in seconds.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) TimingBias() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor timing bias in seconds.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) MutateTimingBias(n float64) bool {
	return rcv._tab.MutateFloat64Slot(98, n)
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: rawFileURI
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *RadarObservation_Abridged) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: rawFileURI
/// Constraints: Minimum length = 0, Maximum length = 256
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *RadarObservation_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RadarObservation_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RadarObservation_Abridged) DataMode() RadarObservation_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return RadarObservation_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RadarObservation_Abridged) MutateDataMode(n RadarObservation_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(106, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *RadarObservation_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *RadarObservation_Abridged) SenReferenceFrame() RadarObservation_Abridged_senReferenceFrame_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return RadarObservation_Abridged_senReferenceFrame_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *RadarObservation_Abridged) MutateSenReferenceFrame(n RadarObservation_Abridged_senReferenceFrame_Enum) bool {
	return rcv._tab.MutateInt8Slot(112, int8(n))
}

/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RadarObservation_Abridged) Descriptor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RadarObservation_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RadarObservation_Abridged) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
/// Example: /// Example: RADAR
/// Constraints: No constraints specified.
func (rcv *RadarObservation_Abridged) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
/// Example: /// Example: RADAR
/// Constraints: No constraints specified.
func RadarObservation_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(59)
}
func RadarObservation_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func RadarObservation_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func RadarObservation_AbridgedAddObTime(builder *flatbuffers.Builder, obTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(obTime), 0)
}
func RadarObservation_AbridgedAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func RadarObservation_AbridgedAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(idSensor), 0)
}
func RadarObservation_AbridgedAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(5, satNo, 0)
}
func RadarObservation_AbridgedAddTaskId(builder *flatbuffers.Builder, taskId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(taskId), 0)
}
func RadarObservation_AbridgedAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(transactionId), 0)
}
func RadarObservation_AbridgedAddTrackId(builder *flatbuffers.Builder, trackId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(trackId), 0)
}
func RadarObservation_AbridgedAddObPosition(builder *flatbuffers.Builder, obPosition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(obPosition), 0)
}
func RadarObservation_AbridgedAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(origObjectId), 0)
}
func RadarObservation_AbridgedAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(origSensorId), 0)
}
func RadarObservation_AbridgedAddUct(builder *flatbuffers.Builder, uct bool) {
	builder.PrependBoolSlot(12, uct, false)
}
func RadarObservation_AbridgedAddAzimuth(builder *flatbuffers.Builder, azimuth float64) {
	builder.PrependFloat64Slot(13, azimuth, 0.0)
}
func RadarObservation_AbridgedAddAzimuthUnc(builder *flatbuffers.Builder, azimuthUnc float64) {
	builder.PrependFloat64Slot(14, azimuthUnc, 0.0)
}
func RadarObservation_AbridgedAddAzimuthBias(builder *flatbuffers.Builder, azimuthBias float64) {
	builder.PrependFloat64Slot(15, azimuthBias, 0.0)
}
func RadarObservation_AbridgedAddAzimuthRate(builder *flatbuffers.Builder, azimuthRate float64) {
	builder.PrependFloat64Slot(16, azimuthRate, 0.0)
}
func RadarObservation_AbridgedAddElevation(builder *flatbuffers.Builder, elevation float64) {
	builder.PrependFloat64Slot(17, elevation, 0.0)
}
func RadarObservation_AbridgedAddElevationUnc(builder *flatbuffers.Builder, elevationUnc float64) {
	builder.PrependFloat64Slot(18, elevationUnc, 0.0)
}
func RadarObservation_AbridgedAddElevationBias(builder *flatbuffers.Builder, elevationBias float64) {
	builder.PrependFloat64Slot(19, elevationBias, 0.0)
}
func RadarObservation_AbridgedAddElevationRate(builder *flatbuffers.Builder, elevationRate float64) {
	builder.PrependFloat64Slot(20, elevationRate, 0.0)
}
func RadarObservation_AbridgedAddRange(builder *flatbuffers.Builder, range_ float64) {
	builder.PrependFloat64Slot(21, range_, 0.0)
}
func RadarObservation_AbridgedAddRangeAccel(builder *flatbuffers.Builder, rangeAccel float64) {
	builder.PrependFloat64Slot(22, rangeAccel, 0.0)
}
func RadarObservation_AbridgedAddRangeAccelUnc(builder *flatbuffers.Builder, rangeAccelUnc float64) {
	builder.PrependFloat64Slot(23, rangeAccelUnc, 0.0)
}
func RadarObservation_AbridgedAddRangeUnc(builder *flatbuffers.Builder, rangeUnc float64) {
	builder.PrependFloat64Slot(24, rangeUnc, 0.0)
}
func RadarObservation_AbridgedAddRangeBias(builder *flatbuffers.Builder, rangeBias float64) {
	builder.PrependFloat64Slot(25, rangeBias, 0.0)
}
func RadarObservation_AbridgedAddRangeRate(builder *flatbuffers.Builder, rangeRate float64) {
	builder.PrependFloat64Slot(26, rangeRate, 0.0)
}
func RadarObservation_AbridgedAddRangeRateUnc(builder *flatbuffers.Builder, rangeRateUnc float64) {
	builder.PrependFloat64Slot(27, rangeRateUnc, 0.0)
}
func RadarObservation_AbridgedAddDoppler(builder *flatbuffers.Builder, doppler float64) {
	builder.PrependFloat64Slot(28, doppler, 0.0)
}
func RadarObservation_AbridgedAddDopplerUnc(builder *flatbuffers.Builder, dopplerUnc float64) {
	builder.PrependFloat64Slot(29, dopplerUnc, 0.0)
}
func RadarObservation_AbridgedAddRa(builder *flatbuffers.Builder, ra float64) {
	builder.PrependFloat64Slot(30, ra, 0.0)
}
func RadarObservation_AbridgedAddDeclination(builder *flatbuffers.Builder, declination float64) {
	builder.PrependFloat64Slot(31, declination, 0.0)
}
func RadarObservation_AbridgedAddX(builder *flatbuffers.Builder, x float64) {
	builder.PrependFloat64Slot(32, x, 0.0)
}
func RadarObservation_AbridgedAddY(builder *flatbuffers.Builder, y float64) {
	builder.PrependFloat64Slot(33, y, 0.0)
}
func RadarObservation_AbridgedAddZ(builder *flatbuffers.Builder, z float64) {
	builder.PrependFloat64Slot(34, z, 0.0)
}
func RadarObservation_AbridgedAddXvel(builder *flatbuffers.Builder, xvel float64) {
	builder.PrependFloat64Slot(35, xvel, 0.0)
}
func RadarObservation_AbridgedAddYvel(builder *flatbuffers.Builder, yvel float64) {
	builder.PrependFloat64Slot(36, yvel, 0.0)
}
func RadarObservation_AbridgedAddZvel(builder *flatbuffers.Builder, zvel float64) {
	builder.PrependFloat64Slot(37, zvel, 0.0)
}
func RadarObservation_AbridgedAddSenx(builder *flatbuffers.Builder, senx float64) {
	builder.PrependFloat64Slot(38, senx, 0.0)
}
func RadarObservation_AbridgedAddSeny(builder *flatbuffers.Builder, seny float64) {
	builder.PrependFloat64Slot(39, seny, 0.0)
}
func RadarObservation_AbridgedAddSenz(builder *flatbuffers.Builder, senz float64) {
	builder.PrependFloat64Slot(40, senz, 0.0)
}
func RadarObservation_AbridgedAddRcs(builder *flatbuffers.Builder, rcs float64) {
	builder.PrependFloat64Slot(41, rcs, 0.0)
}
func RadarObservation_AbridgedAddRcsUnc(builder *flatbuffers.Builder, rcsUnc float64) {
	builder.PrependFloat64Slot(42, rcsUnc, 0.0)
}
func RadarObservation_AbridgedAddOrthogonalRcs(builder *flatbuffers.Builder, orthogonalRcs float64) {
	builder.PrependFloat64Slot(43, orthogonalRcs, 0.0)
}
func RadarObservation_AbridgedAddOrthogonalRcsUnc(builder *flatbuffers.Builder, orthogonalRcsUnc float64) {
	builder.PrependFloat64Slot(44, orthogonalRcsUnc, 0.0)
}
func RadarObservation_AbridgedAddSnr(builder *flatbuffers.Builder, snr float64) {
	builder.PrependFloat64Slot(45, snr, 0.0)
}
func RadarObservation_AbridgedAddBeam(builder *flatbuffers.Builder, beam float64) {
	builder.PrependFloat64Slot(46, beam, 0.0)
}
func RadarObservation_AbridgedAddTimingBias(builder *flatbuffers.Builder, timingBias float64) {
	builder.PrependFloat64Slot(47, timingBias, 0.0)
}
func RadarObservation_AbridgedAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(rawFileUri), 0)
}
func RadarObservation_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(source), 0)
}
func RadarObservation_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(origin), 0)
}
func RadarObservation_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode RadarObservation_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(51, int8(dataMode), 0)
}
func RadarObservation_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(createdAt), 0)
}
func RadarObservation_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(53, flatbuffers.UOffsetT(createdBy), 0)
}
func RadarObservation_AbridgedAddSenReferenceFrame(builder *flatbuffers.Builder, senReferenceFrame RadarObservation_Abridged_senReferenceFrame_Enum) {
	builder.PrependInt8Slot(54, int8(senReferenceFrame), 0)
}
func RadarObservation_AbridgedAddDescriptor(builder *flatbuffers.Builder, descriptor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(55, flatbuffers.UOffsetT(descriptor), 0)
}
func RadarObservation_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(56, flatbuffers.UOffsetT(origNetwork), 0)
}
func RadarObservation_AbridgedAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(57, flatbuffers.UOffsetT(sourceDl), 0)
}
func RadarObservation_AbridgedAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(58, flatbuffers.UOffsetT(type_), 0)
}
func RadarObservation_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
