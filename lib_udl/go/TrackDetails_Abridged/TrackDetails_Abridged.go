// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package TrackDetails_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// These services provide operations for querying of all available track details and amplifying track data. A track is a position and optionally a heading/velocity of an object such as an aircraft, marine vessel, etc at a particular timestamp. It also includes optional information regarding the identity/type of the target object and other amplifying object data, if known.
type TrackDetails_Abridged struct {
	_tab flatbuffers.Table
}

const TrackDetails_AbridgedIdentifier = "TRAC"

func GetRootAsTrackDetails_Abridged(buf []byte, offset flatbuffers.UOffsetT) *TrackDetails_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TrackDetails_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishTrackDetails_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(TrackDetails_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func TrackDetails_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, TrackDetails_AbridgedIdentifier)
}

func GetSizePrefixedRootAsTrackDetails_Abridged(buf []byte, offset flatbuffers.UOffsetT) *TrackDetails_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TrackDetails_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTrackDetails_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(TrackDetails_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedTrackDetails_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, TrackDetails_AbridgedIdentifier)
}

func (rcv *TrackDetails_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TrackDetails_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: TRACK-DETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *TrackDetails_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: TRACK-DETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *TrackDetails_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
///  AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
///  LAND: On the surface of dry land.
///  SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
///  SURFACE: On the surface of a body of water.
///  SUBSURFACE: Below the surface of a body of water.
///  UNKNOWN: Environment is not known.
/// Example: /// Example: LAND
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *TrackDetails_Abridged) Env() TrackDetails_Abridged_env_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return TrackDetails_Abridged_env_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
///  AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
///  LAND: On the surface of dry land.
///  SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
///  SURFACE: On the surface of a body of water.
///  SUBSURFACE: Below the surface of a body of water.
///  UNKNOWN: Environment is not known.
/// Example: /// Example: LAND
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *TrackDetails_Abridged) MutateEnv(n TrackDetails_Abridged_env_Enum) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

/// Optional message type designation.
/// Example: /// Example: PLATFORM
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackDetails_Abridged) MsgType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional message type designation.
/// Example: /// Example: PLATFORM
/// Constraints: Minimum length = 0, Maximum length = 32
/// The vessel hull number designation of this maritime vessel.  The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
/// Example: /// Example: A30081
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *TrackDetails_Abridged) HullNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The vessel hull number designation of this maritime vessel.  The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
/// Example: /// Example: A30081
/// Constraints: Minimum length = 0, Maximum length = 7
/// The Pseudo Identification Feature (PIF) number is a four digit code that provides an exact ID for the ship or aircraft. Friendly military only.
/// Example: /// Example: 0137
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *TrackDetails_Abridged) Pif() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Pseudo Identification Feature (PIF) number is a four digit code that provides an exact ID for the ship or aircraft. Friendly military only.
/// Example: /// Example: 0137
/// Constraints: Minimum length = 0, Maximum length = 5
/// The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
/// Example: /// Example: B45524
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *TrackDetails_Abridged) Sconum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
/// Example: /// Example: B45524
/// Constraints: Minimum length = 0, Maximum length = 36
/// The Naval Tactical Data System (NTDS) track number assigned to this track.
/// Example: /// Example: ZZ777
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *TrackDetails_Abridged) Ntds() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Naval Tactical Data System (NTDS) track number assigned to this track.
/// Example: /// Example: ZZ777
/// Constraints: Minimum length = 0, Maximum length = 6
/// The Intel Discrete Identifier (IDI) code assigned to this track.  The IDI is a four-digit code representing hostile or unknown tracks.
/// Example: /// Example: 7670
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *TrackDetails_Abridged) DisId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Intel Discrete Identifier (IDI) code assigned to this track.  The IDI is a four-digit code representing hostile or unknown tracks.
/// Example: /// Example: 7670
/// Constraints: Minimum length = 0, Maximum length = 5
/// The category code that represents the associated facility purpose within the target system.  This value is the category code in the MIDB (Modernized Intelligence Database).
/// Example: /// Example: 20345
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *TrackDetails_Abridged) MidbCat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The category code that represents the associated facility purpose within the target system.  This value is the category code in the MIDB (Modernized Intelligence Database).
/// Example: /// Example: 20345
/// Constraints: Minimum length = 0, Maximum length = 6
/// The Basic Encyclopedia (BE) number associated with this installation or area.
/// Example: /// Example: ENC-123
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *TrackDetails_Abridged) BeNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Basic Encyclopedia (BE) number associated with this installation or area.
/// Example: /// Example: ENC-123
/// Constraints: Minimum length = 0, Maximum length = 10
/// The O-suffix associated with this facility.  The O-suffix is a five-character alpha/numeric system used to identify a facility, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the facility within the Modernized Integrated Database (MIDB).  The Installation beNumber and oSuffix are also used in conjunction with the midbCat code to classify the function or purpose of the facility.
/// Example: /// Example: AA125
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *TrackDetails_Abridged) OSuffix() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The O-suffix associated with this facility.  The O-suffix is a five-character alpha/numeric system used to identify a facility, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the facility within the Modernized Integrated Database (MIDB).  The Installation beNumber and oSuffix are also used in conjunction with the midbCat code to classify the function or purpose of the facility.
/// Example: /// Example: AA125
/// Constraints: Minimum length = 0, Maximum length = 6
/// This value represents the site number of a specific electronic site or its associated equipment.
/// Example: /// Example: E12345012
/// Constraints: Minimum length = 0, Maximum length = 9
func (rcv *TrackDetails_Abridged) Pin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// This value represents the site number of a specific electronic site or its associated equipment.
/// Example: /// Example: E12345012
/// Constraints: Minimum length = 0, Maximum length = 9
/// Flag indicating whether the missile is considered lost, if reporting a missile track.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) LostTrkInd() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating whether the missile is considered lost, if reporting a missile track.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateLostTrkInd(n bool) bool {
	return rcv._tab.MutateBoolSlot(30, n)
}

/// Track ID for the source of the Missile-Unique Identifier (MUID), if reporting a missile track.
/// Example: /// Example: MUID-SRC-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *TrackDetails_Abridged) MuidSrcTrk() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Track ID for the source of the Missile-Unique Identifier (MUID), if reporting a missile track.
/// Example: /// Example: MUID-SRC-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Source of the Missile-Unique Identifier (MUID), if reporting a missile track.
/// Example: /// Example: MUID-SRC
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *TrackDetails_Abridged) MuidSrc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the Missile-Unique Identifier (MUID), if reporting a missile track.
/// Example: /// Example: MUID-SRC
/// Constraints: Minimum length = 0, Maximum length = 36
/// The status of the missile track in this record, if reporting a missile track (e.g. AT LAUNCH, AT OBSERVATION, FLYING, IMPACTED, LOST, STALE, DEBRIS).
/// Example: /// Example: AT LAUNCH
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackDetails_Abridged) MslStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The status of the missile track in this record, if reporting a missile track (e.g. AT LAUNCH, AT OBSERVATION, FLYING, IMPACTED, LOST, STALE, DEBRIS).
/// Example: /// Example: AT LAUNCH
/// Constraints: Minimum length = 0, Maximum length = 32
/// Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
/// Example: /// Example: 0.95
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) TrkConf() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
/// Example: /// Example: 0.95
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateTrkConf(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Track Quality is reported as an integer from 0-15. Track Quality specifies the reliability of the positional information of a reported track; Higher values indicate higher track quality, i.e., lower errors in reported position.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) TrkQual() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Track Quality is reported as an integer from 0-15. Track Quality specifies the reliability of the positional information of a reported track; Higher values indicate higher track quality, i.e., lower errors in reported position.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateTrkQual(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

/// A track may be designated as an alert track with the following designations:
/// HIT - High Interest Track
/// TGT - Target
/// SUS - Suspect Carrier
/// NSP - Cleared Suspect
/// If alert is null, the track is assumed to be of non-alert status.
/// Example: /// Example: TGT
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *TrackDetails_Abridged) Alert() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A track may be designated as an alert track with the following designations:
/// HIT - High Interest Track
/// TGT - Target
/// SUS - Suspect Carrier
/// NSP - Cleared Suspect
/// If alert is null, the track is assumed to be of non-alert status.
/// Example: /// Example: TGT
/// Constraints: Minimum length = 0, Maximum length = 3
/// Original source cross-reference code for the Command that originated the report.
/// Example: /// Example: INT
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *TrackDetails_Abridged) OrigXref() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Original source cross-reference code for the Command that originated the report.
/// Example: /// Example: INT
/// Constraints: Minimum length = 0, Maximum length = 5
/// Primary ELINT Notification (ELNOT), a five character identifier assigned to each non-communication emission for collection and reporting purposes.  This five-digit field begins with an alpha character, followed by three numbers, ending with another alpha character.
/// Example: /// Example: A123A
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *TrackDetails_Abridged) Elnot1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Primary ELINT Notification (ELNOT), a five character identifier assigned to each non-communication emission for collection and reporting purposes.  This five-digit field begins with an alpha character, followed by three numbers, ending with another alpha character.
/// Example: /// Example: A123A
/// Constraints: Minimum length = 0, Maximum length = 5
/// Secondary ELINT Notification (ELNOT), a five character identifier assigned to each non-communication emission for collection and reporting purposes.  This five-digit field begins with an alpha character, followed by three numbers, ending with another alpha character.
/// Example: /// Example: A123B
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *TrackDetails_Abridged) Elnot2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Secondary ELINT Notification (ELNOT), a five character identifier assigned to each non-communication emission for collection and reporting purposes.  This five-digit field begins with an alpha character, followed by three numbers, ending with another alpha character.
/// Example: /// Example: A123B
/// Constraints: Minimum length = 0, Maximum length = 5
/// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
///  PENDING: Track object which has not been evaluated.
///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
/// Example: /// Example: FRIEND
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackDetails_Abridged) ObjIdent() TrackDetails_Abridged_objIdent_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return TrackDetails_Abridged_objIdent_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
///  PENDING: Track object which has not been evaluated.
///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
/// Example: /// Example: FRIEND
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackDetails_Abridged) MutateObjIdent(n TrackDetails_Abridged_objIdent_Enum) bool {
	return rcv._tab.MutateInt8Slot(50, int8(n))
}

/// The generic classification of the track object/group (e.g., BALLISTIC, HELICOPTER, TRACKED, WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676 object type classifications.
/// Example: /// Example: TRACKED
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackDetails_Abridged) ObjType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The generic classification of the track object/group (e.g., BALLISTIC, HELICOPTER, TRACKED, WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676 object type classifications.
/// Example: /// Example: TRACKED
/// Constraints: Minimum length = 0, Maximum length = 32
/// The object platform type is intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.  For cases in which no MIl-STD-6016 designation exists, a general description can be used (e.g. SATELLITE).
/// Example: /// Example: WEAPON
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackDetails_Abridged) ObjPlat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The object platform type is intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.  For cases in which no MIl-STD-6016 designation exists, a general description can be used (e.g. SATELLITE).
/// Example: /// Example: WEAPON
/// Constraints: Minimum length = 0, Maximum length = 32
/// The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.  For cases in which no MIl-STD-6016 designation exists, a general description can be used (e.g. ANTISPACE WARFARE).
/// Example: /// Example: HOLDING
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackDetails_Abridged) ObjAct() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.  For cases in which no MIl-STD-6016 designation exists, a general description can be used (e.g. ANTISPACE WARFARE).
/// Example: /// Example: HOLDING
/// Constraints: Minimum length = 0, Maximum length = 32
/// Nationality of the tracked object.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *TrackDetails_Abridged) ObjNat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Nationality of the tracked object.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 24
/// Track name.
/// Example: /// Example: TRACK-NAME
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *TrackDetails_Abridged) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Track name.
/// Example: /// Example: TRACK-NAME
/// Constraints: Minimum length = 0, Maximum length = 48
/// Abbreviated track name.
/// Example: /// Example: COMMSCHECK
/// Constraints: Minimum length = 0, Maximum length = 11
func (rcv *TrackDetails_Abridged) ShortName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Abbreviated track name.
/// Example: /// Example: COMMSCHECK
/// Constraints: Minimum length = 0, Maximum length = 11
/// UUID identifying the track, which should remain the same on subsequent tracks of the same object.
/// Example: /// Example: trkId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *TrackDetails_Abridged) TrkId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID identifying the track, which should remain the same on subsequent tracks of the same object.
/// Example: /// Example: trkId
/// Constraints: Minimum length = 0, Maximum length = 36
/// The track number (TN) of a surveillance entity. Intended as, but not constrained to, the J-series track number encoded as five character alpha-numeric characters. Users should refer to J-series documentation for specific TN definitions.
/// Example: /// Example: trkNum
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackDetails_Abridged) TrkNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The track number (TN) of a surveillance entity. Intended as, but not constrained to, the J-series track number encoded as five character alpha-numeric characters. Users should refer to J-series documentation for specific TN definitions.
/// Example: /// Example: trkNum
/// Constraints: Minimum length = 0, Maximum length = 32
/// Value Indicating the scope of this track:
/// 1 - TERMINAL  (Terminal) - available only on the workstation where they were created.
/// 2 - LOCAL  (Local) - available only on workstations in the local area network
/// 3 - OTH  (Over the Horizon) - available to everyone.
/// Example: /// Example: OTH
/// Constraints: Minimum length = 0, Maximum length = 12
func (rcv *TrackDetails_Abridged) TrkScope() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Value Indicating the scope of this track:
/// 1 - TERMINAL  (Terminal) - available only on the workstation where they were created.
/// 2 - LOCAL  (Local) - available only on workstations in the local area network
/// 3 - OTH  (Over the Horizon) - available to everyone.
/// Example: /// Example: OTH
/// Constraints: Minimum length = 0, Maximum length = 12
/// The unique identifier of the source node.
/// Example: /// Example: MCS
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *TrackDetails_Abridged) SourceUid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The unique identifier of the source node.
/// Example: /// Example: MCS
/// Constraints: Minimum length = 0, Maximum length = 4
/// The call sign currently assigned to this track object.
/// Example: /// Example: Charlie
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *TrackDetails_Abridged) CallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign currently assigned to this track object.
/// Example: /// Example: Charlie
/// Constraints: Minimum length = 0, Maximum length = 24
/// Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
///  FAKER: Friendly track, object, or entity acting as an exercise hostile.
///  JOKER: Friendly track, object, or entity acting as an exercise suspect.
///  KILO: Friendly high-value object.
///  TRAVELLER: Suspect land or surface track following a recognized traffic route.
///  ZOMBIE: Suspect track, object, or entity of special interest.
/// Example: /// Example: JOKER
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackDetails_Abridged) IdentAmp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
///  FAKER: Friendly track, object, or entity acting as an exercise hostile.
///  JOKER: Friendly track, object, or entity acting as an exercise suspect.
///  KILO: Friendly high-value object.
///  TRAVELLER: Suspect land or surface track following a recognized traffic route.
///  ZOMBIE: Suspect track, object, or entity of special interest.
/// Example: /// Example: JOKER
/// Constraints: Minimum length = 0, Maximum length = 32
/// Space amplification indicates additional information on the space environment object being reported (e.g. DEBRIS, FUEL-AIR EXPLOSIVE, NUCLEAR WARHEAD).
/// Example: /// Example: NUCLEAR WARHEAD
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackDetails_Abridged) SpaceAmp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Space amplification indicates additional information on the space environment object being reported (e.g. DEBRIS, FUEL-AIR EXPLOSIVE, NUCLEAR WARHEAD).
/// Example: /// Example: NUCLEAR WARHEAD
/// Constraints: Minimum length = 0, Maximum length = 32
/// Confidence level of the amplifying characteristics.  Values range from 0 to 6, with 0 indicating the lowest confidence and 6 indicating the highest.
/// Example: /// Example: 6
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) SpaceAmpConf() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Confidence level of the amplifying characteristics.  Values range from 0 to 6, with 0 indicating the lowest confidence and 6 indicating the highest.
/// Example: /// Example: 6
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateSpaceAmpConf(n int32) bool {
	return rcv._tab.MutateInt32Slot(78, n)
}

/// Specific type of point or track with an environment of space.
/// Example: /// Example: SS-21_MOD_2_CRBM
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackDetails_Abridged) SpaceSpecType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specific type of point or track with an environment of space.
/// Example: /// Example: SS-21_MOD_2_CRBM
/// Constraints: Minimum length = 0, Maximum length = 32
/// Subtype is a finer grain categorization of missile types. Examples include but are not limited to SRBM, MRBM, IRBM, LRBM, ICBM, SLBM:
/// SRBM - Short-Range Ballistic Missile
/// MRBM - Medium-Range Ballistic Missile
/// IRBM - Intermediate-Range Ballistic Missile
/// LRBM - Long-Range Ballistic Missile
/// ICBM - Intercontinental Ballistic Missile
/// SLBM - Submarine-Launched Ballistic Missile.
/// Example: /// Example: SLBM
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *TrackDetails_Abridged) AcftSubType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Subtype is a finer grain categorization of missile types. Examples include but are not limited to SRBM, MRBM, IRBM, LRBM, ICBM, SLBM:
/// SRBM - Short-Range Ballistic Missile
/// MRBM - Medium-Range Ballistic Missile
/// IRBM - Intermediate-Range Ballistic Missile
/// LRBM - Long-Range Ballistic Missile
/// ICBM - Intercontinental Ballistic Missile
/// SLBM - Submarine-Launched Ballistic Missile.
/// Example: /// Example: SLBM
/// Constraints: Minimum length = 0, Maximum length = 16
/// Track timestamp in ISO8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Ts() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Track timestamp in ISO8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
/// Missile launch timestamp in ISO8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) LaunchTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Missile launch timestamp in ISO8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
/// Missile impact timestamp in ISO8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) ImpactTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Missile impact timestamp in ISO8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
/// The message timestamp that the ftn track position was recorded, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) FtnMsgTs() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The message timestamp that the ftn track position was recorded, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
/// An ftn used to associate information and directives with the track.
/// Example: /// Example: FTN
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackDetails_Abridged) Ftn() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// An ftn used to associate information and directives with the track.
/// Example: /// Example: FTN
/// Constraints: Minimum length = 0, Maximum length = 32
/// The name of the Command reporting the Force Over-The-Horizon Track Coordinator (FOTC) track number.
/// Example: /// Example: TRUETT
/// Constraints: Minimum length = 0, Maximum length = 18
func (rcv *TrackDetails_Abridged) FtnCmd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the Command reporting the Force Over-The-Horizon Track Coordinator (FOTC) track number.
/// Example: /// Example: TRUETT
/// Constraints: Minimum length = 0, Maximum length = 18
/// The message timestamp that the reference track position was recorded, in ISO 8601 UTC format with microsecond precision. The 'rtnMsgTs' and 'rtn' arrays must match in size.
/// Example: /// Example: ['2021-02-25T12:00:00.123456Z']
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) RtnMsgTs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TrackDetails_Abridged) RtnMsgTsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The message timestamp that the reference track position was recorded, in ISO 8601 UTC format with microsecond precision. The 'rtnMsgTs' and 'rtn' arrays must match in size.
/// Example: /// Example: ['2021-02-25T12:00:00.123456Z']
/// Constraints: No constraints specified.
/// A Reference Track Number used to associate information and directives with the track.  Referenced, but not constrained to, MIL-STD-6016F Reference Track Number. The 'rtnMsgTs' and 'rtn' arrays must match in size.
/// Example: /// Example: ['ex-a']
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Rtn(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TrackDetails_Abridged) RtnLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// A Reference Track Number used to associate information and directives with the track.  Referenced, but not constrained to, MIL-STD-6016F Reference Track Number. The 'rtnMsgTs' and 'rtn' arrays must match in size.
/// Example: /// Example: ['ex-a']
/// Constraints: No constraints specified.
/// Value representing the state of the Received Track.
/// Example: /// Example: Local_RTN
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *TrackDetails_Abridged) RtnTrkState() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Value representing the state of the Received Track.
/// Example: /// Example: Local_RTN
/// Constraints: Minimum length = 0, Maximum length = 16
/// The name of the Command reporting the Received Track Number (RTN).
/// Example: /// Example: YORKTOWN
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *TrackDetails_Abridged) RtnCmd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the Command reporting the Received Track Number (RTN).
/// Example: /// Example: YORKTOWN
/// Constraints: Minimum length = 0, Maximum length = 8
/// Id/name of sensor providing the track data.
/// Example: /// Example: OTH
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackDetails_Abridged) Sen() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Id/name of sensor providing the track data.
/// Example: /// Example: OTH
/// Constraints: Minimum length = 0, Maximum length = 32
/// Source cross-reference code for the Command that originated the track report.
/// Example: /// Example: INT
/// Constraints: Minimum length = 0, Maximum length = 18
func (rcv *TrackDetails_Abridged) RptChxref() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source cross-reference code for the Command that originated the track report.
/// Example: /// Example: INT
/// Constraints: Minimum length = 0, Maximum length = 18
/// Flag indicating whether this track is archived.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) RptArchived() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating whether this track is archived.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateRptArchived(n bool) bool {
	return rcv._tab.MutateBoolSlot(108, n)
}

/// Flag indicating that this track is self reported.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) SelfReport() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this track is self reported.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateSelfReport(n bool) bool {
	return rcv._tab.MutateBoolSlot(110, n)
}

/// The MIL-STD-2525B symbology code that applies to the subject of this track.
/// Example: /// Example: SHP*S----------
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *TrackDetails_Abridged) Mil2525Bstr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The MIL-STD-2525B symbology code that applies to the subject of this track.
/// Example: /// Example: SHP*S----------
/// Constraints: Minimum length = 0, Maximum length = 16
/// Transponder ID for the track.  This does not correspond to the UDL transponder schema.
/// Example: /// Example: 11
/// Constraints: Minimum length = 0, Maximum length = 61
func (rcv *TrackDetails_Abridged) TrnspdrId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transponder ID for the track.  This does not correspond to the UDL transponder schema.
/// Example: /// Example: 11
/// Constraints: Minimum length = 0, Maximum length = 61
/// Transponder type for the track.
/// Example: /// Example: AFTS
/// Constraints: Minimum length = 0, Maximum length = 51
func (rcv *TrackDetails_Abridged) TrnspdrType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transponder type for the track.
/// Example: /// Example: AFTS
/// Constraints: Minimum length = 0, Maximum length = 51
/// Radar name of the sensor tracking this object (e.g., RAY1500, SPN-43, HEADNET).
/// Example: /// Example: RAY1500
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *TrackDetails_Abridged) EmitterName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Radar name of the sensor tracking this object (e.g., RAY1500, SPN-43, HEADNET).
/// Example: /// Example: RAY1500
/// Constraints: Minimum length = 0, Maximum length = 16
/// Source code for source of information used to detect track.
/// Example: /// Example: S1
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *TrackDetails_Abridged) InfoSource() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source code for source of information used to detect track.
/// Example: /// Example: S1
/// Constraints: Minimum length = 0, Maximum length = 64
/// Flag indicating that the missile is currently in a state of boosting, if reporting a missile track.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Boosting() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that the missile is currently in a state of boosting, if reporting a missile track.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateBoosting(n bool) bool {
	return rcv._tab.MutateBoolSlot(122, n)
}

/// Frequency, in hertz, for the signature report.
/// Example: /// Example: 63.65
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Freq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Frequency, in hertz, for the signature report.
/// Example: /// Example: 63.65
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(124, n)
}

/// Maximum frequency, in hertz, reported for this acoustic track.
/// Example: /// Example: 10324.53
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MaxFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum frequency, in hertz, reported for this acoustic track.
/// Example: /// Example: 10324.53
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateMaxFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(126, n)
}

/// List of harmonics of the signature report in descending order of predominance using 1-2 digit combinations separated by commas, e.g., 8,12,4. (1-22NS).
/// Example: /// Example: 8,12,4
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *TrackDetails_Abridged) Harmonics() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// List of harmonics of the signature report in descending order of predominance using 1-2 digit combinations separated by commas, e.g., 8,12,4. (1-22NS).
/// Example: /// Example: 8,12,4
/// Constraints: Minimum length = 0, Maximum length = 24
/// Pulse repetition interval of the emitter, measured in microseconds.  The interval between the start of one pulse and the start of another.
/// Example: /// Example: 56657.2238
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Pri() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pulse repetition interval of the emitter, measured in microseconds.  The interval between the start of one pulse and the start of another.
/// Example: /// Example: 56657.2238
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutatePri(n float64) bool {
	return rcv._tab.MutateFloat64Slot(130, n)
}

/// Pulse repetition frequency of the emitter, measured in pulses per second.  PRF is the number of pulses transmitted per second. This is the reciprocal of the pri value.
/// Example: /// Example: 17.65
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Prf() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pulse repetition frequency of the emitter, measured in pulses per second.  PRF is the number of pulses transmitted per second. This is the reciprocal of the pri value.
/// Example: /// Example: 17.65
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutatePrf(n float64) bool {
	return rcv._tab.MutateFloat64Slot(132, n)
}

/// Pulse width of the emitter, measured in microseconds.  This is the duration of the pulse.
/// Example: /// Example: 1347.45
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Pw() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pulse width of the emitter, measured in microseconds.  This is the duration of the pulse.
/// Example: /// Example: 1347.45
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutatePw(n float64) bool {
	return rcv._tab.MutateFloat64Slot(134, n)
}

/// Type of radar scan.
/// Example: /// Example: UNK
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *TrackDetails_Abridged) ScanType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of radar scan.
/// Example: /// Example: UNK
/// Constraints: Minimum length = 0, Maximum length = 5
/// Scan rate of the emitter, measured in seconds per rotation (SPR).
/// Example: /// Example: 12.01
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) ScanRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Scan rate of the emitter, measured in seconds per rotation (SPR).
/// Example: /// Example: 12.01
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateScanRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(138, n)
}

/// The Sequential Contact Number (SCN) for this track.
/// Example: /// Example: 1474305
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Scn() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The Sequential Contact Number (SCN) for this track.
/// Example: /// Example: 1474305
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateScn(n int32) bool {
	return rcv._tab.MutateInt32Slot(140, n)
}

/// Correlation Index; reference code for the site that originally reported the track.
/// Example: /// Example: BB
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *TrackDetails_Abridged) CI() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Correlation Index; reference code for the site that originally reported the track.
/// Example: /// Example: BB
/// Constraints: Minimum length = 0, Maximum length = 3
/// The angle formed between the line of sight of the observer and the horizon, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
/// Example: /// Example: 15.2
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) AngElev() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The angle formed between the line of sight of the observer and the horizon, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
/// Example: /// Example: 15.2
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateAngElev(n float64) bool {
	return rcv._tab.MutateFloat64Slot(144, n)
}

/// WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 19.88550102
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 19.88550102
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(146, n)
}

/// WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 46.74596844
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 46.74596844
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(148, n)
}

/// WGS-84 latitude of the missile launch point, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 19.88550102
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) LaunchLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the missile launch point, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 19.88550102
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateLaunchLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(150, n)
}

/// WGS-84 longitude of the missile launch point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 46.74550102
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) LaunchLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(152))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the missile launch point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 46.74550102
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateLaunchLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(152, n)
}

/// WGS-84 latitude of the missile impact point, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 19.88550102
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) ImpactLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the missile impact point, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 19.88550102
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateImpactLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(154, n)
}

/// WGS-84 longitude of the missile impact point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 46.74550102
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) ImpactLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(156))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the missile impact point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 46.74550102
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateImpactLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(156, n)
}

/// WGS-84 azimuth corridor reference point latitude, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 19.88550102
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) PolarSingLocLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(158))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 azimuth corridor reference point latitude, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 19.88550102
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutatePolarSingLocLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(158, n)
}

/// WGS-84 azimuth corridor reference point longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 46.74550102
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) PolarSingLocLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(160))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 azimuth corridor reference point longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 46.74550102
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutatePolarSingLocLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(160, n)
}

/// The azimuth corridor centerline angle measured in degrees clockwise from true north, of the center line of an azimuth corridor. The center line extends from the referenced corridor origin location.
/// Example: /// Example: 12.876
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) AzCorrCenterLine() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(162))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The azimuth corridor centerline angle measured in degrees clockwise from true north, of the center line of an azimuth corridor. The center line extends from the referenced corridor origin location.
/// Example: /// Example: 12.876
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateAzCorrCenterLine(n float64) bool {
	return rcv._tab.MutateFloat64Slot(162, n)
}

/// Azimuth corridor arc distance measured in meters from reference point of azimuth corridor to far edge of bounded azimuth corridor wedge, measured along azimuth corridor center line.
/// Example: /// Example: 71.76
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) AzCorrArcWidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(164))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Azimuth corridor arc distance measured in meters from reference point of azimuth corridor to far edge of bounded azimuth corridor wedge, measured along azimuth corridor center line.
/// Example: /// Example: 71.76
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateAzCorrArcWidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(164, n)
}

/// The error in the semi-intermediate axis.  The semi-intermediate axis is intermediate in length between semi-major and semi-minor axes. This field is doubled and centered on intersection of area semi-major axis and area semi-minor axis at 90 degrees to the plane defined by those axes. For these shapes, the volume is defined as having a 50-percent probability of containing the true location of the referenced entity.
/// Example: /// Example: 7010.882
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) ErrSemiIntAxis() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(166))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The error in the semi-intermediate axis.  The semi-intermediate axis is intermediate in length between semi-major and semi-minor axes. This field is doubled and centered on intersection of area semi-major axis and area semi-minor axis at 90 degrees to the plane defined by those axes. For these shapes, the volume is defined as having a 50-percent probability of containing the true location of the referenced entity.
/// Example: /// Example: 7010.882
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateErrSemiIntAxis(n float64) bool {
	return rcv._tab.MutateFloat64Slot(166, n)
}

/// The error in the Area Orientation.  Area Orientation is the angle or roll in degrees, between area semi-minor axis and plane defined by local vertical and area semi-major axis. When reported without major and minor axis, it is angle between an axis perpendicular to a 2D true north axis and plane defined by local vertical and a 2D true north axis.
/// Example: /// Example: 69.6
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) ErrAreaOrient() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(168))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The error in the Area Orientation.  Area Orientation is the angle or roll in degrees, between area semi-minor axis and plane defined by local vertical and area semi-major axis. When reported without major and minor axis, it is angle between an axis perpendicular to a 2D true north axis and plane defined by local vertical and a 2D true north axis.
/// Example: /// Example: 69.6
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateErrAreaOrient(n float64) bool {
	return rcv._tab.MutateFloat64Slot(168, n)
}

/// The error in the Semi-major elevation axis. Semi-major elevation axis is the elevation of the cubical, 3D rectangular, cylindrical, 3D ellipsoidal, or spherical semi-major axis, in degrees, measured from local horizontal.
/// Example: /// Example: 168.8
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) ErrSemiMajElev() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(170))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The error in the Semi-major elevation axis. Semi-major elevation axis is the elevation of the cubical, 3D rectangular, cylindrical, 3D ellipsoidal, or spherical semi-major axis, in degrees, measured from local horizontal.
/// Example: /// Example: 168.8
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateErrSemiMajElev(n float64) bool {
	return rcv._tab.MutateFloat64Slot(170, n)
}

/// Geometric area switch identifies the 3D shape of the error volume by providing the 2D shape for the 3D plane. The 3D plane is the plane orthogonal to the area semi-major axis and area semi-minor axis. Depending on whether the 2D plane is reported as an error ellipse 2D or as an error rectangle 2D, this switch reports a complete error volume that is cubical, 3D rectangular, cylindrical, 3D ellipsoidal, or spherical.
/// 0 - SWITCH_TYPE_UNKNOWN
/// 1 - SQUARE_RECTANGLE
/// 2 - CIRCLE_ELLIPSE.
/// Example: /// Example: CIRCLE_ELLIPSE
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *TrackDetails_Abridged) ErrGeoAreaSwitch() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(172))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geometric area switch identifies the 3D shape of the error volume by providing the 2D shape for the 3D plane. The 3D plane is the plane orthogonal to the area semi-major axis and area semi-minor axis. Depending on whether the 2D plane is reported as an error ellipse 2D or as an error rectangle 2D, this switch reports a complete error volume that is cubical, 3D rectangular, cylindrical, 3D ellipsoidal, or spherical.
/// 0 - SWITCH_TYPE_UNKNOWN
/// 1 - SQUARE_RECTANGLE
/// 2 - CIRCLE_ELLIPSE.
/// Example: /// Example: CIRCLE_ELLIPSE
/// Constraints: Minimum length = 0, Maximum length = 24
/// Track point burnout altitude relative to WGS-84 ellipsoid, in meters.
/// Example: /// Example: 30567.452
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) BurnoutAlt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(174))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Track point burnout altitude relative to WGS-84 ellipsoid, in meters.
/// Example: /// Example: 30567.452
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateBurnoutAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(174, n)
}

/// Threat Event System Track ID.
/// Example: /// Example: 6217
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *TrackDetails_Abridged) TesEventId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(176))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Threat Event System Track ID.
/// Example: /// Example: 6217
/// Constraints: Minimum length = 0, Maximum length = 8
/// Track object speed, in meters/sec.
/// Example: /// Example: 15.03443
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Spd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(178))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Track object speed, in meters/sec.
/// Example: /// Example: 15.03443
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateSpd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(178, n)
}

/// The average speed, in kilometers/hour, calculated for the subject during the latest voyage/excursion.
/// Example: /// Example: 18.25
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) AvgSpd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(180))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The average speed, in kilometers/hour, calculated for the subject during the latest voyage/excursion.
/// Example: /// Example: 18.25
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateAvgSpd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(180, n)
}

/// Motion model Time On Leg in hours.
/// Example: /// Example: 4.1
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Tol() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(182))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Motion model Time On Leg in hours.
/// Example: /// Example: 4.1
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateTol(n float64) bool {
	return rcv._tab.MutateFloat64Slot(182, n)
}

/// Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a track object height above ellipsoid, and negative values indicate a track object below ellipsoid, applicable to the depth estimate for a subsurface track.
/// Example: /// Example: 153.01
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Alt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(184))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a track object height above ellipsoid, and negative values indicate a track object below ellipsoid, applicable to the depth estimate for a subsurface track.
/// Example: /// Example: 153.01
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(184, n)
}

/// Track object heading, in degrees clockwise from true north.
/// Example: /// Example: 19.7
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Hdng() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(186))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Track object heading, in degrees clockwise from true north.
/// Example: /// Example: 19.7
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateHdng(n float64) bool {
	return rcv._tab.MutateFloat64Slot(186, n)
}

/// The track object course-over-ground, in degrees clockwise from true North at the object location (0-360 degrees).
/// Example: /// Example: 4.3580153
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Course() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(188))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The track object course-over-ground, in degrees clockwise from true North at the object location (0-360 degrees).
/// Example: /// Example: 4.3580153
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateCourse(n float64) bool {
	return rcv._tab.MutateFloat64Slot(188, n)
}

/// The number of propeller revolutions per minute for a submarine or ship.
/// Example: /// Example: 8.2
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) PropRpm() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(190))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The number of propeller revolutions per minute for a submarine or ship.
/// Example: /// Example: 8.2
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutatePropRpm(n float64) bool {
	return rcv._tab.MutateFloat64Slot(190, n)
}

/// The number of turns of the vessel propellers per knot of forward motion.
/// Example: /// Example: 2.65
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Tpk() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(192))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The number of turns of the vessel propellers per knot of forward motion.
/// Example: /// Example: 2.65
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateTpk(n float64) bool {
	return rcv._tab.MutateFloat64Slot(192, n)
}

/// The Cooperative Location Indicator specifies whether the reported entity location was derived using reported locations from sensors on more than one platform.
/// 0 - COOPERATIVE_LOCATOR_NONE
/// 1 - SINGLE_PLATFORM
/// 2 - FRAGMENT
/// 3 - COOPERATIVE.
/// Example: /// Example: COOPERATIVE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackDetails_Abridged) CoopLocInd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(194))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Cooperative Location Indicator specifies whether the reported entity location was derived using reported locations from sensors on more than one platform.
/// 0 - COOPERATIVE_LOCATOR_NONE
/// 1 - SINGLE_PLATFORM
/// 2 - FRAGMENT
/// 3 - COOPERATIVE.
/// Example: /// Example: COOPERATIVE
/// Constraints: Minimum length = 0, Maximum length = 32
/// The manuevering indicator specifying the missile boost phase.
/// 0 - POST_BOOST_NONE
/// 1 - POST_BOOST_MANUEVER
/// 2 - POST_BOOST_COMPLETE_MANUEVER.
/// Example: /// Example: POST_BOOST_NONE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackDetails_Abridged) ManeuverInd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(196))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The manuevering indicator specifying the missile boost phase.
/// 0 - POST_BOOST_NONE
/// 1 - POST_BOOST_MANUEVER
/// 2 - POST_BOOST_COMPLETE_MANUEVER.
/// Example: /// Example: POST_BOOST_NONE
/// Constraints: Minimum length = 0, Maximum length = 32
/// The launch location Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the launchAouData array and is required if launchAouData is not null. See the launchAouData field definition for specific information.
/// Example: /// Example: ELLIPSE
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *TrackDetails_Abridged) LaunchAouType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(198))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The launch location Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the launchAouData array and is required if launchAouData is not null. See the launchAouData field definition for specific information.
/// Example: /// Example: ELLIPSE
/// Constraints: Minimum length = 0, Maximum length = 20
/// Three element array representing the launch location Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the launchAouType specified in this record:
///  ELLIPSE:
///    brg - orientation in degrees of the ellipse
///    a1 - semi-major axis in meters
///    a2 - semi-minor axis in meters
///  BEARING (BEARING BOX or MTST BEARING BOX):
///    brg - orientation in degrees of the bearing box
///    a1 - length of bearing box in meters
///    a2 - half-width of bearing box in meters
///  OTHER (All other type values):
///    brg - line of bearing in degrees true
///    a1 - bearing error in degrees
///    a2 - estimated range in meters.
/// Example: /// Example: [34.3, 26.5, 1.2]
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) LaunchAouData(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(200))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TrackDetails_Abridged) LaunchAouDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(200))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Three element array representing the launch location Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the launchAouType specified in this record:
///  ELLIPSE:
///    brg - orientation in degrees of the ellipse
///    a1 - semi-major axis in meters
///    a2 - semi-minor axis in meters
///  BEARING (BEARING BOX or MTST BEARING BOX):
///    brg - orientation in degrees of the bearing box
///    a1 - length of bearing box in meters
///    a2 - half-width of bearing box in meters
///  OTHER (All other type values):
///    brg - line of bearing in degrees true
///    a1 - bearing error in degrees
///    a2 - estimated range in meters.
/// Example: /// Example: [34.3, 26.5, 1.2]
/// Constraints: No constraints specified.
/// The impact point Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the impactAouData array and is required if impactAouData is not null. See the impactAouData field definition for specific information.
/// Example: /// Example: ELLIPSE
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *TrackDetails_Abridged) ImpactAouType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(202))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The impact point Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the impactAouData array and is required if impactAouData is not null. See the impactAouData field definition for specific information.
/// Example: /// Example: ELLIPSE
/// Constraints: Minimum length = 0, Maximum length = 20
/// Three element array representing the impact point Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the impactAouType specified in this record:
///  ELLIPSE:
///    brg - orientation in degrees of the ellipse
///    a1 - semi-major axis in meters
///    a2 - semi-minor axis in meters
///  BEARING (BEARING BOX or MTST BEARING BOX):
///    brg - orientation in degrees of the bearing box
///    a1 - length of bearing box in meters
///    a2 - half-width of bearing box in meters
///  OTHER (All other type values):
///    brg - line of bearing in degrees true
///    a1 - bearing error in degrees
///    a2 - estimated range in meters.
/// Example: /// Example: [34.3, 26.5, 1.2]
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) ImpactAouData(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(204))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TrackDetails_Abridged) ImpactAouDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(204))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Three element array representing the impact point Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the impactAouType specified in this record:
///  ELLIPSE:
///    brg - orientation in degrees of the ellipse
///    a1 - semi-major axis in meters
///    a2 - semi-minor axis in meters
///  BEARING (BEARING BOX or MTST BEARING BOX):
///    brg - orientation in degrees of the bearing box
///    a1 - length of bearing box in meters
///    a2 - half-width of bearing box in meters
///  OTHER (All other type values):
///    brg - line of bearing in degrees true
///    a1 - bearing error in degrees
///    a2 - estimated range in meters.
/// Example: /// Example: [34.3, 26.5, 1.2]
/// Constraints: No constraints specified.
/// The track Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouRptData array and is required if aouRptData is not null. See the aouRptData field definition for specific information.
/// Example: /// Example: ELLIPSE
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *TrackDetails_Abridged) AouRptType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(206))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The track Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouRptData array and is required if aouRptData is not null. See the aouRptData field definition for specific information.
/// Example: /// Example: ELLIPSE
/// Constraints: Minimum length = 0, Maximum length = 20
/// Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouRptType specified in this record:
///  ELLIPSE:
///    brg - orientation in degrees of the ellipse
///    a1 - semi-major axis in meters
///    a2 - semi-minor axis in meters
///  BEARING (BEARING BOX or MTST BEARING BOX):
///    brg - orientation in degrees of the bearing box
///    a1 - length of bearing box in meters
///    a2 - half-width of bearing box in meters
///  OTHER (All other type values):
///    brg - line of bearing in degrees true
///    a1 - bearing error in degrees
///    a2 - estimated range in meters.
/// Example: /// Example: [34.3, 26.5, 1.2]
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) AouRptData(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(208))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TrackDetails_Abridged) AouRptDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(208))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouRptType specified in this record:
///  ELLIPSE:
///    brg - orientation in degrees of the ellipse
///    a1 - semi-major axis in meters
///    a2 - semi-minor axis in meters
///  BEARING (BEARING BOX or MTST BEARING BOX):
///    brg - orientation in degrees of the bearing box
///    a1 - length of bearing box in meters
///    a2 - half-width of bearing box in meters
///  OTHER (All other type values):
///    brg - line of bearing in degrees true
///    a1 - bearing error in degrees
///    a2 - estimated range in meters.
/// Example: /// Example: [34.3, 26.5, 1.2]
/// Constraints: No constraints specified.
/// Track object location in ECEF [x, y, z], meters. When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.35, 3.42]
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) EcefPos(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(210))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TrackDetails_Abridged) EcefPosLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(210))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Track object location in ECEF [x, y, z], meters. When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.35, 3.42]
/// Constraints: No constraints specified.
/// Track object velocity in ECEF [x', y', z'], meters/sec. When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.35, 3.42]
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) EcefVel(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(212))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TrackDetails_Abridged) EcefVelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(212))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Track object velocity in ECEF [x', y', z'], meters/sec. When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.35, 3.42]
/// Constraints: No constraints specified.
/// The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
/// Example: /// Example: 97
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Containment() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(214))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
/// Example: /// Example: 97
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateContainment(n float64) bool {
	return rcv._tab.MutateFloat64Slot(214, n)
}

/// The distance, in meters, of the closest point of approach between this track to the master reference track.
/// Example: /// Example: 500
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Cpa() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(216))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The distance, in meters, of the closest point of approach between this track to the master reference track.
/// Example: /// Example: 500
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateCpa(n float64) bool {
	return rcv._tab.MutateFloat64Slot(216, n)
}

/// The time, in ISO 8601 UTC format with millisecond precision, of the  closest point of approach between this track and the master reference track.
/// Example: /// Example: 2021-02-25T12:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Tcpa() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(218))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time, in ISO 8601 UTC format with millisecond precision, of the  closest point of approach between this track and the master reference track.
/// Example: /// Example: 2021-02-25T12:00:00.123Z
/// Constraints: No constraints specified.
/// The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored, Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation status definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with navigation status. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: Underway Using Engine
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *TrackDetails_Abridged) NavStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(220))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored, Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation status definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with navigation status. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: Underway Using Engine
/// Constraints: Minimum length = 0, Maximum length = 64
/// The type of electronic position fixing device (e.g. GPS, GLONASS, etc.). Intended as, but not constrained to, the USCG NAVCEN electronic position fixing device definitions. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: GPS
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *TrackDetails_Abridged) PosDeviceType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(222))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of electronic position fixing device (e.g. GPS, GLONASS, etc.). Intended as, but not constrained to, the USCG NAVCEN electronic position fixing device definitions. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: GPS
/// Constraints: Minimum length = 0, Maximum length = 24
/// Type of Aid to Navigation. Intended as, but not constrained to, the USCG NAVCEN  aids to navigation. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: Cardinal Mark N
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *TrackDetails_Abridged) Aton() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(224))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of Aid to Navigation. Intended as, but not constrained to, the USCG NAVCEN  aids to navigation. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: Cardinal Mark N
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator position (OFF, ON, UNK) for optional floating navigational aids only.
/// Example: /// Example: ON
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *TrackDetails_Abridged) OffPosInd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(226))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicator position (OFF, ON, UNK) for optional floating navigational aids only.
/// Example: /// Example: ON
/// Constraints: Minimum length = 0, Maximum length = 3
/// The reference dimensions of the vessel, reported as [A, B, C, D], in meters. Where the array values represent the distance fore (A), aft (B), to port (C), and to starboard (D) of the navigation antenna. Array with values A = C = 0 and B, D > 0 indicate the length (B) and width (D) of the vessel without antenna position reference.
/// Example: /// Example: [50.1, 50.1, 20.1, 20.1]
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) AntennaRefDimensions(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(228))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TrackDetails_Abridged) AntennaRefDimensionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(228))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The reference dimensions of the vessel, reported as [A, B, C, D], in meters. Where the array values represent the distance fore (A), aft (B), to port (C), and to starboard (D) of the navigation antenna. Array with values A = C = 0 and B, D > 0 indicate the length (B) and width (D) of the vessel without antenna position reference.
/// Example: /// Example: [50.1, 50.1, 20.1, 20.1]
/// Constraints: No constraints specified.
/// The common name for a group of ships with similar design, usually named for the first vessel of the class.
/// Example: /// Example: Nimitz
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *TrackDetails_Abridged) ShipClass() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(230))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The common name for a group of ships with similar design, usually named for the first vessel of the class.
/// Example: /// Example: Nimitz
/// Constraints: Minimum length = 0, Maximum length = 64
/// The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
/// Example: /// Example: 9015462
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Imon() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(232))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
/// Example: /// Example: 9015462
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateImon(n int32) bool {
	return rcv._tab.MutateInt32Slot(232, n)
}

/// The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
/// Example: /// Example: 304010417
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Mmsi() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(234))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
/// Example: /// Example: 304010417
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateMmsi(n int32) bool {
	return rcv._tab.MutateInt32Slot(234, n)
}

/// The maximum static draught, in meters, of the vessel according to the AIS transmission.
/// Example: /// Example: 21.1
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Draught() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(236))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The maximum static draught, in meters, of the vessel according to the AIS transmission.
/// Example: /// Example: 21.1
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateDraught(n float64) bool {
	return rcv._tab.MutateFloat64Slot(236, n)
}

/// The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
/// Example: /// Example: 511.1
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Length() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(238))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
/// Example: /// Example: 511.1
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateLength(n float64) bool {
	return rcv._tab.MutateFloat64Slot(238, n)
}

/// The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
/// Example: /// Example: 24.1
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Width() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(240))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
/// Example: /// Example: 24.1
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateWidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(240, n)
}

/// The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: Freight
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *TrackDetails_Abridged) CargoType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(242))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: Freight
/// Constraints: Minimum length = 0, Maximum length = 48
/// Appearance group code.
/// GP1 - Superstructure exceeds 1/3 of ship length.
/// GP2 - Superstructure less than 1/3 of ship length.
/// GP3 - Stack aft.
/// Example: /// Example: GP1
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *TrackDetails_Abridged) AppGrp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(244))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Appearance group code.
/// GP1 - Superstructure exceeds 1/3 of ship length.
/// GP2 - Superstructure less than 1/3 of ship length.
/// GP3 - Stack aft.
/// Example: /// Example: GP1
/// Constraints: Minimum length = 0, Maximum length = 7
/// Hull profile code. Based on GCCS-J hull profiles.
/// FLUSH           No breaks in Hull Profile.
/// RAISED 1        Hull Profile shows distinct raised area at bow. Remainder of deck is flush.
/// RAISED 2        Hull Profile shows distinct raised area amidships. Bow and stern are flush.
/// RAISED 3        Hull Profile shows distinct raised area at stern. Remainder of deck is flush.
/// RAISED 1-2-3    Distinct raised areas at bow, midships, and stern with breaks between each raise.
/// RAISED 1-2      Raised area at bow and midships with break between.
/// RAISED 1-3      Raised area at bow and stern with break between.
/// RAISED 12       Continuous raised area encompassing both bow and midships.
/// RAISED 23       Continuous raised area encompassing midships and stern.
/// RAISED 12-3     Raised areas at bow, midships and stern. Bow and midship raises are continuous. Break between midship and stern raises.
/// RAISED 1-23     Raised areas at bow, midships, and stern. Midship and stern raises are continuous with break between bow and midship raises.
/// RAISED 1-L2-3   Raised areas at bow, midships, and stern with break between each raise. Midships raise is longer than that associated with raised 1-2-3.
/// Example: /// Example: Raised 1-23
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *TrackDetails_Abridged) HullProf() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(246))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Hull profile code. Based on GCCS-J hull profiles.
/// FLUSH           No breaks in Hull Profile.
/// RAISED 1        Hull Profile shows distinct raised area at bow. Remainder of deck is flush.
/// RAISED 2        Hull Profile shows distinct raised area amidships. Bow and stern are flush.
/// RAISED 3        Hull Profile shows distinct raised area at stern. Remainder of deck is flush.
/// RAISED 1-2-3    Distinct raised areas at bow, midships, and stern with breaks between each raise.
/// RAISED 1-2      Raised area at bow and midships with break between.
/// RAISED 1-3      Raised area at bow and stern with break between.
/// RAISED 12       Continuous raised area encompassing both bow and midships.
/// RAISED 23       Continuous raised area encompassing midships and stern.
/// RAISED 12-3     Raised areas at bow, midships and stern. Bow and midship raises are continuous. Break between midship and stern raises.
/// RAISED 1-23     Raised areas at bow, midships, and stern. Midship and stern raises are continuous with break between bow and midship raises.
/// RAISED 1-L2-3   Raised areas at bow, midships, and stern with break between each raise. Midships raise is longer than that associated with raised 1-2-3.
/// Example: /// Example: Raised 1-23
/// Constraints: Minimum length = 0, Maximum length = 16
/// The type of propulsion employed by the track object (Diesel, Nuclear).
/// Example: /// Example: Diesel
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *TrackDetails_Abridged) PropType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(248))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of propulsion employed by the track object (Diesel, Nuclear).
/// Example: /// Example: Diesel
/// Constraints: Minimum length = 0, Maximum length = 6
/// The number of blades per shaft of the track object.  Applicable for maritime vessels.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) NumBlades() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(250))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of blades per shaft of the track object.  Applicable for maritime vessels.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateNumBlades(n int32) bool {
	return rcv._tab.MutateInt32Slot(250, n)
}

/// The number of shafts on the track object.  Applicable for maritime vessels.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) NumShafts() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(252))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of shafts on the track object.  Applicable for maritime vessels.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateNumShafts(n int32) bool {
	return rcv._tab.MutateInt32Slot(252, n)
}

/// The stern type code (Counter, Cruiser) associated with the track object.
/// Example: /// Example: Cruiser
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *TrackDetails_Abridged) SternType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(254))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The stern type code (Counter, Cruiser) associated with the track object.
/// Example: /// Example: Cruiser
/// Constraints: Minimum length = 0, Maximum length = 16
/// The weight, in tons, of the vessel associated with this track.
/// Example: /// Example: 3423.76
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) VslWt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(256))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The weight, in tons, of the vessel associated with this track.
/// Example: /// Example: 3423.76
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateVslWt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(256, n)
}

/// The Arrival Time of the vessel at the destination, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) ArrTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(258))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Arrival Time of the vessel at the destination, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
/// The flag of the arrival port.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *TrackDetails_Abridged) ArrFlag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(260))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The flag of the arrival port.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 36
/// The reported arrival cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: Freight
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *TrackDetails_Abridged) ArrCargo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(262))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The reported arrival cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: Freight
/// Constraints: Minimum length = 0, Maximum length = 48
/// The Arrival Port of the vessel according to the AIS transmission.
/// Example: /// Example: Lanshan
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *TrackDetails_Abridged) ArrPort() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(264))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Arrival Port of the vessel according to the AIS transmission.
/// Example: /// Example: Lanshan
/// Constraints: Minimum length = 0, Maximum length = 20
/// The Departure Port of the vessel according to the AIS transmission.
/// Example: /// Example: Lanshan
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *TrackDetails_Abridged) DepPort() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(266))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Departure Port of the vessel according to the AIS transmission.
/// Example: /// Example: Lanshan
/// Constraints: Minimum length = 0, Maximum length = 20
/// The flag of the departure port.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *TrackDetails_Abridged) DepFlag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(268))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The flag of the departure port.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 36
/// The reported departure cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: Freight
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *TrackDetails_Abridged) DepCargo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(270))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The reported departure cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: Freight
/// Constraints: Minimum length = 0, Maximum length = 48
/// The flag of the destination port.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *TrackDetails_Abridged) DesFlag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(272))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The flag of the destination port.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 36
/// The reported destination cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: Freight
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *TrackDetails_Abridged) DesCargo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(274))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The reported destination cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: Freight
/// Constraints: Minimum length = 0, Maximum length = 48
/// The destination of the vessel according to the AIS transmission.
/// Example: /// Example: USCLE
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *TrackDetails_Abridged) Destination() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(276))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The destination of the vessel according to the AIS transmission.
/// Example: /// Example: USCLE
/// Constraints: Minimum length = 0, Maximum length = 20
/// The Estimated Time of Arrival of the vessel at the destination port, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Eta() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(278))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Estimated Time of Arrival of the vessel at the destination port, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
/// The Estimated Time of Departure of the vessel from the departure port (depPort), according to Marine Traffic calculations, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Etd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(280))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Estimated Time of Departure of the vessel from the departure port (depPort), according to Marine Traffic calculations, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
/// A text amplifier displaying IFF/SIF/AIS Identification modes and codes.
/// Example: /// Example: ID Mode
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *TrackDetails_Abridged) Iff() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(282))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A text amplifier displaying IFF/SIF/AIS Identification modes and codes.
/// Example: /// Example: ID Mode
/// Constraints: Minimum length = 0, Maximum length = 64
/// Flag indicating that the track object has an emergency.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) EmgInd() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(284))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that the track object has an emergency.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateEmgInd(n bool) bool {
	return rcv._tab.MutateBoolSlot(284, n)
}

/// The drop-point indicator setting.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) DropPtInd() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(286))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// The drop-point indicator setting.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateDropPtInd(n bool) bool {
	return rcv._tab.MutateBoolSlot(286, n)
}

/// Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Reinforced() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(288))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateReinforced(n bool) bool {
	return rcv._tab.MutateBoolSlot(288, n)
}

/// Flag indicating for the track represents a reduced force object or group.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Reduced() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(290))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating for the track represents a reduced force object or group.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateReduced(n bool) bool {
	return rcv._tab.MutateBoolSlot(290, n)
}

/// Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Hq() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(292))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateHq(n bool) bool {
	return rcv._tab.MutateBoolSlot(292, n)
}

/// Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment, and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Dummy() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(294))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment, and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateDummy(n bool) bool {
	return rcv._tab.MutateBoolSlot(294, n)
}

/// Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) TaskForce() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(296))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateTaskForce(n bool) bool {
	return rcv._tab.MutateBoolSlot(296, n)
}

/// Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment, and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Feint() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(298))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment, and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateFeint(n bool) bool {
	return rcv._tab.MutateBoolSlot(298, n)
}

/// Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) Installation() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(300))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) MutateInstallation(n bool) bool {
	return rcv._tab.MutateBoolSlot(300, n)
}

/// A text amplifier for units, equipment and installations; content is implementation specific.
/// Example: /// Example: Staff Comments
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *TrackDetails_Abridged) StaffCmts() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(302))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A text amplifier for units, equipment and installations; content is implementation specific.
/// Example: /// Example: Staff Comments
/// Constraints: Minimum length = 0, Maximum length = 256
/// A text amplifier for units, equipment and installations; content is implementation specific.
/// Example: /// Example: Additional information
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *TrackDetails_Abridged) AddInfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(304))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A text amplifier for units, equipment and installations; content is implementation specific.
/// Example: /// Example: Additional information
/// Constraints: Minimum length = 0, Maximum length = 256
/// A text amplifier code for units, equipment, and installations that consists of a one-letter reliability rating and a one-number credibility rating based on the following definitions of each:
///  Reliability Ratings:
///   A-completely reliable
///   B-usually reliable
///   C-fairly reliable
///   D-not usually reliable
///   E-unreliable
///   F-reliability cannot be judged
///  Credibility Ratings:
///   1-confirmed by other sources
///   2-probably true
///   3-possibly true
///   4-doubtfully true
///   5-improbable
///   6-truth cannot be judged.
/// Example: /// Example: A1
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *TrackDetails_Abridged) EvalRating() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(306))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A text amplifier code for units, equipment, and installations that consists of a one-letter reliability rating and a one-number credibility rating based on the following definitions of each:
///  Reliability Ratings:
///   A-completely reliable
///   B-usually reliable
///   C-fairly reliable
///   D-not usually reliable
///   E-unreliable
///   F-reliability cannot be judged
///  Credibility Ratings:
///   1-confirmed by other sources
///   2-probably true
///   3-possibly true
///   4-doubtfully true
///   5-improbable
///   6-truth cannot be judged.
/// Example: /// Example: A1
/// Constraints: Minimum length = 0, Maximum length = 2
/// Time the row was created in the database.
/// Example: /// Example: 2021-02-25T12:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *TrackDetails_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(308))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database.
/// Example: /// Example: 2021-02-25T12:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *TrackDetails_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(310))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *TrackDetails_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(312))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *TrackDetails_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(314))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *TrackDetails_Abridged) DataMode() TrackDetails_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(316))
	if o != 0 {
		return TrackDetails_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *TrackDetails_Abridged) MutateDataMode(n TrackDetails_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(316, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackDetails_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(318))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func TrackDetails_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(158)
}
func TrackDetails_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func TrackDetails_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func TrackDetails_AbridgedAddEnv(builder *flatbuffers.Builder, env TrackDetails_Abridged_env_Enum) {
	builder.PrependInt8Slot(2, int8(env), 0)
}
func TrackDetails_AbridgedAddMsgType(builder *flatbuffers.Builder, msgType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(msgType), 0)
}
func TrackDetails_AbridgedAddHullNum(builder *flatbuffers.Builder, hullNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(hullNum), 0)
}
func TrackDetails_AbridgedAddPif(builder *flatbuffers.Builder, pif flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(pif), 0)
}
func TrackDetails_AbridgedAddSconum(builder *flatbuffers.Builder, sconum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(sconum), 0)
}
func TrackDetails_AbridgedAddNtds(builder *flatbuffers.Builder, ntds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(ntds), 0)
}
func TrackDetails_AbridgedAddDisId(builder *flatbuffers.Builder, disId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(disId), 0)
}
func TrackDetails_AbridgedAddMidbCat(builder *flatbuffers.Builder, midbCat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(midbCat), 0)
}
func TrackDetails_AbridgedAddBeNumber(builder *flatbuffers.Builder, beNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(beNumber), 0)
}
func TrackDetails_AbridgedAddOSuffix(builder *flatbuffers.Builder, oSuffix flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(oSuffix), 0)
}
func TrackDetails_AbridgedAddPin(builder *flatbuffers.Builder, pin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(pin), 0)
}
func TrackDetails_AbridgedAddLostTrkInd(builder *flatbuffers.Builder, lostTrkInd bool) {
	builder.PrependBoolSlot(13, lostTrkInd, false)
}
func TrackDetails_AbridgedAddMuidSrcTrk(builder *flatbuffers.Builder, muidSrcTrk flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(muidSrcTrk), 0)
}
func TrackDetails_AbridgedAddMuidSrc(builder *flatbuffers.Builder, muidSrc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(muidSrc), 0)
}
func TrackDetails_AbridgedAddMslStatus(builder *flatbuffers.Builder, mslStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(mslStatus), 0)
}
func TrackDetails_AbridgedAddTrkConf(builder *flatbuffers.Builder, trkConf float64) {
	builder.PrependFloat64Slot(17, trkConf, 0.0)
}
func TrackDetails_AbridgedAddTrkQual(builder *flatbuffers.Builder, trkQual int32) {
	builder.PrependInt32Slot(18, trkQual, 0)
}
func TrackDetails_AbridgedAddAlert(builder *flatbuffers.Builder, alert flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(alert), 0)
}
func TrackDetails_AbridgedAddOrigXref(builder *flatbuffers.Builder, origXref flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(origXref), 0)
}
func TrackDetails_AbridgedAddElnot1(builder *flatbuffers.Builder, elnot1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(elnot1), 0)
}
func TrackDetails_AbridgedAddElnot2(builder *flatbuffers.Builder, elnot2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(elnot2), 0)
}
func TrackDetails_AbridgedAddObjIdent(builder *flatbuffers.Builder, objIdent TrackDetails_Abridged_objIdent_Enum) {
	builder.PrependInt8Slot(23, int8(objIdent), 0)
}
func TrackDetails_AbridgedAddObjType(builder *flatbuffers.Builder, objType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(objType), 0)
}
func TrackDetails_AbridgedAddObjPlat(builder *flatbuffers.Builder, objPlat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(objPlat), 0)
}
func TrackDetails_AbridgedAddObjAct(builder *flatbuffers.Builder, objAct flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(objAct), 0)
}
func TrackDetails_AbridgedAddObjNat(builder *flatbuffers.Builder, objNat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(objNat), 0)
}
func TrackDetails_AbridgedAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(name), 0)
}
func TrackDetails_AbridgedAddShortName(builder *flatbuffers.Builder, shortName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(shortName), 0)
}
func TrackDetails_AbridgedAddTrkId(builder *flatbuffers.Builder, trkId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(trkId), 0)
}
func TrackDetails_AbridgedAddTrkNum(builder *flatbuffers.Builder, trkNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(trkNum), 0)
}
func TrackDetails_AbridgedAddTrkScope(builder *flatbuffers.Builder, trkScope flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(trkScope), 0)
}
func TrackDetails_AbridgedAddSourceUid(builder *flatbuffers.Builder, sourceUid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(sourceUid), 0)
}
func TrackDetails_AbridgedAddCallSign(builder *flatbuffers.Builder, callSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(callSign), 0)
}
func TrackDetails_AbridgedAddIdentAmp(builder *flatbuffers.Builder, identAmp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(identAmp), 0)
}
func TrackDetails_AbridgedAddSpaceAmp(builder *flatbuffers.Builder, spaceAmp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(spaceAmp), 0)
}
func TrackDetails_AbridgedAddSpaceAmpConf(builder *flatbuffers.Builder, spaceAmpConf int32) {
	builder.PrependInt32Slot(37, spaceAmpConf, 0)
}
func TrackDetails_AbridgedAddSpaceSpecType(builder *flatbuffers.Builder, spaceSpecType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(spaceSpecType), 0)
}
func TrackDetails_AbridgedAddAcftSubType(builder *flatbuffers.Builder, acftSubType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(acftSubType), 0)
}
func TrackDetails_AbridgedAddTs(builder *flatbuffers.Builder, ts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(ts), 0)
}
func TrackDetails_AbridgedAddLaunchTime(builder *flatbuffers.Builder, launchTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(launchTime), 0)
}
func TrackDetails_AbridgedAddImpactTime(builder *flatbuffers.Builder, impactTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(impactTime), 0)
}
func TrackDetails_AbridgedAddFtnMsgTs(builder *flatbuffers.Builder, ftnMsgTs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(ftnMsgTs), 0)
}
func TrackDetails_AbridgedAddFtn(builder *flatbuffers.Builder, ftn flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(ftn), 0)
}
func TrackDetails_AbridgedAddFtnCmd(builder *flatbuffers.Builder, ftnCmd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(ftnCmd), 0)
}
func TrackDetails_AbridgedAddRtnMsgTs(builder *flatbuffers.Builder, rtnMsgTs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(rtnMsgTs), 0)
}
func TrackDetails_AbridgedStartRtnMsgTsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TrackDetails_AbridgedAddRtn(builder *flatbuffers.Builder, rtn flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(rtn), 0)
}
func TrackDetails_AbridgedStartRtnVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TrackDetails_AbridgedAddRtnTrkState(builder *flatbuffers.Builder, rtnTrkState flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(rtnTrkState), 0)
}
func TrackDetails_AbridgedAddRtnCmd(builder *flatbuffers.Builder, rtnCmd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(rtnCmd), 0)
}
func TrackDetails_AbridgedAddSen(builder *flatbuffers.Builder, sen flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(sen), 0)
}
func TrackDetails_AbridgedAddRptChxref(builder *flatbuffers.Builder, rptChxref flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(rptChxref), 0)
}
func TrackDetails_AbridgedAddRptArchived(builder *flatbuffers.Builder, rptArchived bool) {
	builder.PrependBoolSlot(52, rptArchived, false)
}
func TrackDetails_AbridgedAddSelfReport(builder *flatbuffers.Builder, selfReport bool) {
	builder.PrependBoolSlot(53, selfReport, false)
}
func TrackDetails_AbridgedAddMil2525Bstr(builder *flatbuffers.Builder, mil2525Bstr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(54, flatbuffers.UOffsetT(mil2525Bstr), 0)
}
func TrackDetails_AbridgedAddTrnspdrId(builder *flatbuffers.Builder, trnspdrId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(55, flatbuffers.UOffsetT(trnspdrId), 0)
}
func TrackDetails_AbridgedAddTrnspdrType(builder *flatbuffers.Builder, trnspdrType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(56, flatbuffers.UOffsetT(trnspdrType), 0)
}
func TrackDetails_AbridgedAddEmitterName(builder *flatbuffers.Builder, emitterName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(57, flatbuffers.UOffsetT(emitterName), 0)
}
func TrackDetails_AbridgedAddInfoSource(builder *flatbuffers.Builder, infoSource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(58, flatbuffers.UOffsetT(infoSource), 0)
}
func TrackDetails_AbridgedAddBoosting(builder *flatbuffers.Builder, boosting bool) {
	builder.PrependBoolSlot(59, boosting, false)
}
func TrackDetails_AbridgedAddFreq(builder *flatbuffers.Builder, freq float64) {
	builder.PrependFloat64Slot(60, freq, 0.0)
}
func TrackDetails_AbridgedAddMaxFreq(builder *flatbuffers.Builder, maxFreq float64) {
	builder.PrependFloat64Slot(61, maxFreq, 0.0)
}
func TrackDetails_AbridgedAddHarmonics(builder *flatbuffers.Builder, harmonics flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(62, flatbuffers.UOffsetT(harmonics), 0)
}
func TrackDetails_AbridgedAddPri(builder *flatbuffers.Builder, pri float64) {
	builder.PrependFloat64Slot(63, pri, 0.0)
}
func TrackDetails_AbridgedAddPrf(builder *flatbuffers.Builder, prf float64) {
	builder.PrependFloat64Slot(64, prf, 0.0)
}
func TrackDetails_AbridgedAddPw(builder *flatbuffers.Builder, pw float64) {
	builder.PrependFloat64Slot(65, pw, 0.0)
}
func TrackDetails_AbridgedAddScanType(builder *flatbuffers.Builder, scanType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(66, flatbuffers.UOffsetT(scanType), 0)
}
func TrackDetails_AbridgedAddScanRate(builder *flatbuffers.Builder, scanRate float64) {
	builder.PrependFloat64Slot(67, scanRate, 0.0)
}
func TrackDetails_AbridgedAddScn(builder *flatbuffers.Builder, scn int32) {
	builder.PrependInt32Slot(68, scn, 0)
}
func TrackDetails_AbridgedAddCI(builder *flatbuffers.Builder, cI flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(69, flatbuffers.UOffsetT(cI), 0)
}
func TrackDetails_AbridgedAddAngElev(builder *flatbuffers.Builder, angElev float64) {
	builder.PrependFloat64Slot(70, angElev, 0.0)
}
func TrackDetails_AbridgedAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(71, lat, 0.0)
}
func TrackDetails_AbridgedAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(72, lon, 0.0)
}
func TrackDetails_AbridgedAddLaunchLat(builder *flatbuffers.Builder, launchLat float64) {
	builder.PrependFloat64Slot(73, launchLat, 0.0)
}
func TrackDetails_AbridgedAddLaunchLon(builder *flatbuffers.Builder, launchLon float64) {
	builder.PrependFloat64Slot(74, launchLon, 0.0)
}
func TrackDetails_AbridgedAddImpactLat(builder *flatbuffers.Builder, impactLat float64) {
	builder.PrependFloat64Slot(75, impactLat, 0.0)
}
func TrackDetails_AbridgedAddImpactLon(builder *flatbuffers.Builder, impactLon float64) {
	builder.PrependFloat64Slot(76, impactLon, 0.0)
}
func TrackDetails_AbridgedAddPolarSingLocLat(builder *flatbuffers.Builder, polarSingLocLat float64) {
	builder.PrependFloat64Slot(77, polarSingLocLat, 0.0)
}
func TrackDetails_AbridgedAddPolarSingLocLon(builder *flatbuffers.Builder, polarSingLocLon float64) {
	builder.PrependFloat64Slot(78, polarSingLocLon, 0.0)
}
func TrackDetails_AbridgedAddAzCorrCenterLine(builder *flatbuffers.Builder, azCorrCenterLine float64) {
	builder.PrependFloat64Slot(79, azCorrCenterLine, 0.0)
}
func TrackDetails_AbridgedAddAzCorrArcWidth(builder *flatbuffers.Builder, azCorrArcWidth float64) {
	builder.PrependFloat64Slot(80, azCorrArcWidth, 0.0)
}
func TrackDetails_AbridgedAddErrSemiIntAxis(builder *flatbuffers.Builder, errSemiIntAxis float64) {
	builder.PrependFloat64Slot(81, errSemiIntAxis, 0.0)
}
func TrackDetails_AbridgedAddErrAreaOrient(builder *flatbuffers.Builder, errAreaOrient float64) {
	builder.PrependFloat64Slot(82, errAreaOrient, 0.0)
}
func TrackDetails_AbridgedAddErrSemiMajElev(builder *flatbuffers.Builder, errSemiMajElev float64) {
	builder.PrependFloat64Slot(83, errSemiMajElev, 0.0)
}
func TrackDetails_AbridgedAddErrGeoAreaSwitch(builder *flatbuffers.Builder, errGeoAreaSwitch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(84, flatbuffers.UOffsetT(errGeoAreaSwitch), 0)
}
func TrackDetails_AbridgedAddBurnoutAlt(builder *flatbuffers.Builder, burnoutAlt float64) {
	builder.PrependFloat64Slot(85, burnoutAlt, 0.0)
}
func TrackDetails_AbridgedAddTesEventId(builder *flatbuffers.Builder, tesEventId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(86, flatbuffers.UOffsetT(tesEventId), 0)
}
func TrackDetails_AbridgedAddSpd(builder *flatbuffers.Builder, spd float64) {
	builder.PrependFloat64Slot(87, spd, 0.0)
}
func TrackDetails_AbridgedAddAvgSpd(builder *flatbuffers.Builder, avgSpd float64) {
	builder.PrependFloat64Slot(88, avgSpd, 0.0)
}
func TrackDetails_AbridgedAddTol(builder *flatbuffers.Builder, tol float64) {
	builder.PrependFloat64Slot(89, tol, 0.0)
}
func TrackDetails_AbridgedAddAlt(builder *flatbuffers.Builder, alt float64) {
	builder.PrependFloat64Slot(90, alt, 0.0)
}
func TrackDetails_AbridgedAddHdng(builder *flatbuffers.Builder, hdng float64) {
	builder.PrependFloat64Slot(91, hdng, 0.0)
}
func TrackDetails_AbridgedAddCourse(builder *flatbuffers.Builder, course float64) {
	builder.PrependFloat64Slot(92, course, 0.0)
}
func TrackDetails_AbridgedAddPropRpm(builder *flatbuffers.Builder, propRpm float64) {
	builder.PrependFloat64Slot(93, propRpm, 0.0)
}
func TrackDetails_AbridgedAddTpk(builder *flatbuffers.Builder, tpk float64) {
	builder.PrependFloat64Slot(94, tpk, 0.0)
}
func TrackDetails_AbridgedAddCoopLocInd(builder *flatbuffers.Builder, coopLocInd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(95, flatbuffers.UOffsetT(coopLocInd), 0)
}
func TrackDetails_AbridgedAddManeuverInd(builder *flatbuffers.Builder, maneuverInd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(96, flatbuffers.UOffsetT(maneuverInd), 0)
}
func TrackDetails_AbridgedAddLaunchAouType(builder *flatbuffers.Builder, launchAouType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(97, flatbuffers.UOffsetT(launchAouType), 0)
}
func TrackDetails_AbridgedAddLaunchAouData(builder *flatbuffers.Builder, launchAouData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(98, flatbuffers.UOffsetT(launchAouData), 0)
}
func TrackDetails_AbridgedStartLaunchAouDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TrackDetails_AbridgedAddImpactAouType(builder *flatbuffers.Builder, impactAouType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(99, flatbuffers.UOffsetT(impactAouType), 0)
}
func TrackDetails_AbridgedAddImpactAouData(builder *flatbuffers.Builder, impactAouData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(100, flatbuffers.UOffsetT(impactAouData), 0)
}
func TrackDetails_AbridgedStartImpactAouDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TrackDetails_AbridgedAddAouRptType(builder *flatbuffers.Builder, aouRptType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(101, flatbuffers.UOffsetT(aouRptType), 0)
}
func TrackDetails_AbridgedAddAouRptData(builder *flatbuffers.Builder, aouRptData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(102, flatbuffers.UOffsetT(aouRptData), 0)
}
func TrackDetails_AbridgedStartAouRptDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TrackDetails_AbridgedAddEcefPos(builder *flatbuffers.Builder, ecefPos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(103, flatbuffers.UOffsetT(ecefPos), 0)
}
func TrackDetails_AbridgedStartEcefPosVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TrackDetails_AbridgedAddEcefVel(builder *flatbuffers.Builder, ecefVel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(104, flatbuffers.UOffsetT(ecefVel), 0)
}
func TrackDetails_AbridgedStartEcefVelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TrackDetails_AbridgedAddContainment(builder *flatbuffers.Builder, containment float64) {
	builder.PrependFloat64Slot(105, containment, 0.0)
}
func TrackDetails_AbridgedAddCpa(builder *flatbuffers.Builder, cpa float64) {
	builder.PrependFloat64Slot(106, cpa, 0.0)
}
func TrackDetails_AbridgedAddTcpa(builder *flatbuffers.Builder, tcpa flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(107, flatbuffers.UOffsetT(tcpa), 0)
}
func TrackDetails_AbridgedAddNavStatus(builder *flatbuffers.Builder, navStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(108, flatbuffers.UOffsetT(navStatus), 0)
}
func TrackDetails_AbridgedAddPosDeviceType(builder *flatbuffers.Builder, posDeviceType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(109, flatbuffers.UOffsetT(posDeviceType), 0)
}
func TrackDetails_AbridgedAddAton(builder *flatbuffers.Builder, aton flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(110, flatbuffers.UOffsetT(aton), 0)
}
func TrackDetails_AbridgedAddOffPosInd(builder *flatbuffers.Builder, offPosInd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(111, flatbuffers.UOffsetT(offPosInd), 0)
}
func TrackDetails_AbridgedAddAntennaRefDimensions(builder *flatbuffers.Builder, antennaRefDimensions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(112, flatbuffers.UOffsetT(antennaRefDimensions), 0)
}
func TrackDetails_AbridgedStartAntennaRefDimensionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TrackDetails_AbridgedAddShipClass(builder *flatbuffers.Builder, shipClass flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(113, flatbuffers.UOffsetT(shipClass), 0)
}
func TrackDetails_AbridgedAddImon(builder *flatbuffers.Builder, imon int32) {
	builder.PrependInt32Slot(114, imon, 0)
}
func TrackDetails_AbridgedAddMmsi(builder *flatbuffers.Builder, mmsi int32) {
	builder.PrependInt32Slot(115, mmsi, 0)
}
func TrackDetails_AbridgedAddDraught(builder *flatbuffers.Builder, draught float64) {
	builder.PrependFloat64Slot(116, draught, 0.0)
}
func TrackDetails_AbridgedAddLength(builder *flatbuffers.Builder, length float64) {
	builder.PrependFloat64Slot(117, length, 0.0)
}
func TrackDetails_AbridgedAddWidth(builder *flatbuffers.Builder, width float64) {
	builder.PrependFloat64Slot(118, width, 0.0)
}
func TrackDetails_AbridgedAddCargoType(builder *flatbuffers.Builder, cargoType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(119, flatbuffers.UOffsetT(cargoType), 0)
}
func TrackDetails_AbridgedAddAppGrp(builder *flatbuffers.Builder, appGrp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(120, flatbuffers.UOffsetT(appGrp), 0)
}
func TrackDetails_AbridgedAddHullProf(builder *flatbuffers.Builder, hullProf flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(121, flatbuffers.UOffsetT(hullProf), 0)
}
func TrackDetails_AbridgedAddPropType(builder *flatbuffers.Builder, propType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(122, flatbuffers.UOffsetT(propType), 0)
}
func TrackDetails_AbridgedAddNumBlades(builder *flatbuffers.Builder, numBlades int32) {
	builder.PrependInt32Slot(123, numBlades, 0)
}
func TrackDetails_AbridgedAddNumShafts(builder *flatbuffers.Builder, numShafts int32) {
	builder.PrependInt32Slot(124, numShafts, 0)
}
func TrackDetails_AbridgedAddSternType(builder *flatbuffers.Builder, sternType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(125, flatbuffers.UOffsetT(sternType), 0)
}
func TrackDetails_AbridgedAddVslWt(builder *flatbuffers.Builder, vslWt float64) {
	builder.PrependFloat64Slot(126, vslWt, 0.0)
}
func TrackDetails_AbridgedAddArrTime(builder *flatbuffers.Builder, arrTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(127, flatbuffers.UOffsetT(arrTime), 0)
}
func TrackDetails_AbridgedAddArrFlag(builder *flatbuffers.Builder, arrFlag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(128, flatbuffers.UOffsetT(arrFlag), 0)
}
func TrackDetails_AbridgedAddArrCargo(builder *flatbuffers.Builder, arrCargo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(129, flatbuffers.UOffsetT(arrCargo), 0)
}
func TrackDetails_AbridgedAddArrPort(builder *flatbuffers.Builder, arrPort flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(130, flatbuffers.UOffsetT(arrPort), 0)
}
func TrackDetails_AbridgedAddDepPort(builder *flatbuffers.Builder, depPort flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(131, flatbuffers.UOffsetT(depPort), 0)
}
func TrackDetails_AbridgedAddDepFlag(builder *flatbuffers.Builder, depFlag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(132, flatbuffers.UOffsetT(depFlag), 0)
}
func TrackDetails_AbridgedAddDepCargo(builder *flatbuffers.Builder, depCargo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(133, flatbuffers.UOffsetT(depCargo), 0)
}
func TrackDetails_AbridgedAddDesFlag(builder *flatbuffers.Builder, desFlag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(134, flatbuffers.UOffsetT(desFlag), 0)
}
func TrackDetails_AbridgedAddDesCargo(builder *flatbuffers.Builder, desCargo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(135, flatbuffers.UOffsetT(desCargo), 0)
}
func TrackDetails_AbridgedAddDestination(builder *flatbuffers.Builder, destination flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(136, flatbuffers.UOffsetT(destination), 0)
}
func TrackDetails_AbridgedAddEta(builder *flatbuffers.Builder, eta flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(137, flatbuffers.UOffsetT(eta), 0)
}
func TrackDetails_AbridgedAddEtd(builder *flatbuffers.Builder, etd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(138, flatbuffers.UOffsetT(etd), 0)
}
func TrackDetails_AbridgedAddIff(builder *flatbuffers.Builder, iff flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(139, flatbuffers.UOffsetT(iff), 0)
}
func TrackDetails_AbridgedAddEmgInd(builder *flatbuffers.Builder, emgInd bool) {
	builder.PrependBoolSlot(140, emgInd, false)
}
func TrackDetails_AbridgedAddDropPtInd(builder *flatbuffers.Builder, dropPtInd bool) {
	builder.PrependBoolSlot(141, dropPtInd, false)
}
func TrackDetails_AbridgedAddReinforced(builder *flatbuffers.Builder, reinforced bool) {
	builder.PrependBoolSlot(142, reinforced, false)
}
func TrackDetails_AbridgedAddReduced(builder *flatbuffers.Builder, reduced bool) {
	builder.PrependBoolSlot(143, reduced, false)
}
func TrackDetails_AbridgedAddHq(builder *flatbuffers.Builder, hq bool) {
	builder.PrependBoolSlot(144, hq, false)
}
func TrackDetails_AbridgedAddDummy(builder *flatbuffers.Builder, dummy bool) {
	builder.PrependBoolSlot(145, dummy, false)
}
func TrackDetails_AbridgedAddTaskForce(builder *flatbuffers.Builder, taskForce bool) {
	builder.PrependBoolSlot(146, taskForce, false)
}
func TrackDetails_AbridgedAddFeint(builder *flatbuffers.Builder, feint bool) {
	builder.PrependBoolSlot(147, feint, false)
}
func TrackDetails_AbridgedAddInstallation(builder *flatbuffers.Builder, installation bool) {
	builder.PrependBoolSlot(148, installation, false)
}
func TrackDetails_AbridgedAddStaffCmts(builder *flatbuffers.Builder, staffCmts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(149, flatbuffers.UOffsetT(staffCmts), 0)
}
func TrackDetails_AbridgedAddAddInfo(builder *flatbuffers.Builder, addInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(150, flatbuffers.UOffsetT(addInfo), 0)
}
func TrackDetails_AbridgedAddEvalRating(builder *flatbuffers.Builder, evalRating flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(151, flatbuffers.UOffsetT(evalRating), 0)
}
func TrackDetails_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(152, flatbuffers.UOffsetT(createdAt), 0)
}
func TrackDetails_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(153, flatbuffers.UOffsetT(createdBy), 0)
}
func TrackDetails_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(154, flatbuffers.UOffsetT(source), 0)
}
func TrackDetails_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(155, flatbuffers.UOffsetT(origin), 0)
}
func TrackDetails_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode TrackDetails_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(156, int8(dataMode), 0)
}
func TrackDetails_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(157, flatbuffers.UOffsetT(origNetwork), 0)
}
func TrackDetails_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
