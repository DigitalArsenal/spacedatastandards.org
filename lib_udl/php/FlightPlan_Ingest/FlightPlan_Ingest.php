<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Flight Plan contains data specifying the details of an intended flight including schedule and expected route.
class FlightPlan_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return FlightPlan_Ingest
     */
    public static function getRootAsFlightPlan_Ingest(ByteBuffer $bb)
    {
        $obj = new FlightPlan_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function FlightPlan_IngestIdentifier()
    {
        return "FLIG";
    }

    public static function FlightPlan_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::FlightPlan_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return FlightPlan_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) encode/decode procedures.
    /// Example: /// Example: AJM7939B1123
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAmcMissionId()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UDL unique identifier of the aircraft sortie associated with this flight plan.
    /// Example: /// Example: 9d60c1b1-10b1-b2a7-e403-84c5d7eeb170
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSortie()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UDL unique identifier of the aircraft associated with this flight plan.
    /// Example: /// Example: 4f4a67c6-40fd-11ee-be56-0242ac120002
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdAircraft()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The leg number of this flight plan.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getLegNum()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The UDL unique identifier of the departure airfield associated with this flight plan.
    /// Example: /// Example: 2a9020f6-40fd-11ee-be56-0242ac120002
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdDepAirfield()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The airfield identifier of the departure location, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: /// Example: KSLV
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getDepAirfield()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UDL unique identifier of the arrival airfield associated with this flight plan.
    /// Example: /// Example: 363080c2-40fd-11ee-be56-0242ac120002
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdArrAirfield()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The airfield identifier of the arrival location, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: /// Example: KCHS
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getArrAirfield()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source ID of the flight plan from the generating system.
    /// Example: /// Example: AFMAPP20322347140001
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getExternalId()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The generation time of this flight plan in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2023-05-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getGenTS()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of the aircraft associated with this flight plan. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
    /// Example: /// Example: KC-130 HERCULES
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getAircraftMDS()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The tail number of the aircraft associated with this flight plan.
    /// Example: /// Example: 77187
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getTailNumber()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The call sign assigned to the aircraft for this flight plan.
    /// Example: /// Example: HKY629
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getCallSign()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The date and time the weather valid period begins in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2023-05-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getWxValidStart()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The date and time the weather valid period ends in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2023-05-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getWxValidEnd()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The estimated time of departure for the aircraft, in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2023-05-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getEstDepTime()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The percent degrade due to drag for this aircraft.
    /// Example: /// Example: 16.9
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDragIndex()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The fuel degrade percentage used for this mission.
    /// Example: /// Example: 10.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFuelDegrade()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Operating weight of the aircraft in pounds.
    /// Example: /// Example: 251830.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOpWeight()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The mission index value for this mission. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
    /// Example: /// Example: 44.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMsnIndex()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total of all fuel required to complete the flight in pounds, including fuel to be dispensed on a refueling mission.
    /// Example: /// Example: 180000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRampFuel()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fuel required to start engines and taxi to the end of the runway in pounds.
    /// Example: /// Example: 1500.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTaxiFuel()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fuel at takeoff, which is calculated as the ramp fuel minus the taxi fuel in pounds.
    /// Example: /// Example: 178500.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTakeoffFuel()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fuel required from brake release to Top of Climb in pounds.
    /// Example: /// Example: 7000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getClimbFuel()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Time required from brake release to Top of Climb expressed as HH:MM.
    /// Example: /// Example: 00:13
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getClimbTime()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional fuel burned at Top of Climb in pounds.
    /// Example: /// Example: 500.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHoldDownFuel()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Additional fuel burned at Top of Climb for icing in pounds.
    /// Example: /// Example: 1000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTocIceFuel()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fuel remaining at Top of Climb in pounds.
    /// Example: /// Example: 160000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTocFuel()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fuel required to fly from Top of Climb to Top of Descent in pounds.
    /// Example: /// Example: 155000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEnrouteFuel()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Time required to fly from Top of Climb to Top of Descent expressed as HH:MM.
    /// Example: /// Example: 06:30
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getEnrouteTime()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional fuel burned at Top of Descent for thunderstorm avoidance in pounds.
    /// Example: /// Example: 1000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getThunderAvoidFuel()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Additional fuel burned at Top of Descent for icing in pounds.
    /// Example: /// Example: 2000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTodIceFuel()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Additional fuel burned at Top of Descent for the operational condition in pounds.
    /// Example: /// Example: 5000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOpConditionFuel()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fuel remaining at Top of Descent in pounds.
    /// Example: /// Example: 32000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTodFuel()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Additional fuel burned at landing/missed approach for an early descent in pounds.
    /// Example: /// Example: 500.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEarlyDescentFuel()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Additional fuel burned at landing/missed approach for icing during arrival in pounds.
    /// Example: /// Example: 1000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getArrIceFuel()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Additional fuel burned at the destination for holding in pounds.
    /// Example: /// Example: 6000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHoldFuel()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Additional time for holding at the destination expressed as HH:MM.
    /// Example: /// Example: 01:00
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getHoldTime()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Fuel burned from the initial approach point to landing in pounds.
    /// Example: /// Example: 3000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAppLandingFuel()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fuel planned to be burned during the flight in pounds.
    /// Example: /// Example: 145000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBurnedFuel()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fuel planned to be remaining on the airplane at landing in pounds.
    /// Example: /// Example: 19000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLandingFuel()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The minimum fuel on board required to divert in pounds.
    /// Example: /// Example: 25000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMinDivertFuel()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fuel required to fly to alternate landing site 1 and land in pounds.
    /// Example: /// Example: 6000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getArrAlternate1Fuel()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fuel required to fly to alternate landing site 2 and land in pounds.
    /// Example: /// Example: 6000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getArrAlternate2Fuel()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The amount of contingency fuel in pounds.
    /// Example: /// Example: 3000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getContingencyFuel()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The amount of reserve fuel in pounds.
    /// Example: /// Example: 10000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getReserveFuel()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The depressurization fuel required to fly from the Equal Time Point to the Last Suitable/First Suitable airfield at depressurization altitude in pounds.
    /// Example: /// Example: 20000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDepressFuel()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The amount of unusable fuel in pounds.
    /// Example: /// Example: 2300.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getUnusableFuel()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The amount of unidentified extra fuel required to get to min landing in pounds.
    /// Example: /// Example: 5000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getUnidentExtraFuel()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The amount of identified extra fuel carried and not available in the burn plan in pounds.
    /// Example: /// Example: 5000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getIdentExtraFuel()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total fuel remaining at alternate landing site 1 in pounds.
    /// Example: /// Example: 18000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRemAlternate1Fuel()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total fuel remaining at alternate landing site 2 in pounds.
    /// Example: /// Example: 18000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRemAlternate2Fuel()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total endurance time based on the fuel on board expressed as HH:MM.
    /// Example: /// Example: 08:45
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getEnduranceTime()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the planned Standard Instrument Departure (SID) procedure.
    /// Example: /// Example: RENV3B
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getSid()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the planned Standard Terminal Arrival (STAR) procedure.
    /// Example: /// Example: ADANA
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getStar()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The GPS Receiver Autonomous Integrity Monitoring (RAIM) message. A RAIM system assesses the integrity of the GPS signals. This system predicts outages for a specified geographical area. These predictions are based on the location, path, and scheduled GPS satellite outages.
    /// Example: /// Example: Failed by FAA SAPT 184022AUG2022
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getGpsRAIM()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The departure runway for this flight.
    /// Example: /// Example: 05L
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getDepRunway()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The arrival runway for this flight.
    /// Example: /// Example: 05L
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getArrRunway()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The 1801 fileable route of flight string for this flight. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
    /// Example: /// Example: RENV3B RENVI Y86 GOSVA/N0317F260 DCT EVLIT DCT UMUGI DCT NISIX DCT GIGOD DCT DIPEB DCT
    /// GORPI Z80 TILAV L87 RAKIT Z717 PODUS Z130 MAG/N0298F220 Z20 KENIG/N0319F220 Z20 ORTAG T177
    /// ESEGU Z20 BEBLA DCT MASEK/N0300F200 DCT GISEM/N0319F200 DCT BOMBI/N0276F060 DCT RIDSU DCT
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getRouteString()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of country codes for the countries overflown during this flight in ISO 3166-1 Alpha-2 format.
    /// Example: /// Example: ['US', 'CA', 'UK']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCountryCodes($j)
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCountryCodesLength()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The Extended Operations (ETOPS) rating used to calculate this flight plan.
    /// Example: /// Example: 85 MINUTES
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getEtopsRating()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of Extended Operations (ETOPS) adequate landing airfields that are within the mission region.
    /// Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getEtopsAirfields($j)
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEtopsAirfieldsLength()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of Extended Operations (ETOPS) alternate suitable landing airfields that are within the mission region.
    /// Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getEtopsAltAirfields($j)
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEtopsAltAirfieldsLength()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The Extended Operations (ETOPS) validity window for the alternate airfield.
    /// Example: /// Example: LPLA: 0317Z-0722Z
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getEtopsValWindow()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Remarks from the planners concerning this flight plan.
    /// Example: /// Example: Flight plan is good for 2 days before airspace closes over the UK.
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getPlannerRemark()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Remarks about the planned cargo associated with this flight plan.
    /// Example: /// Example: Expecting 55,000 lbs. If different, call us.
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getCargoRemark()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Wind factor for the first half of the route. This is the average wind factor from first Top of Climb to the mid-time of the entire route in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
    /// Example: /// Example: -1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWindFac1()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Wind factor for the second half of the route. This is the average wind factor from the mid-time of the entire route to last Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWindFac2()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average wind factor from Top of Climb to Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
    /// Example: /// Example: 5.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWindFacAvg()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average temperature deviation of the primary, divert, and alternate path for the route between first Top of Climb and last Top of Descent in degrees Celsius.
    /// Example: /// Example: 16.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgTempDev()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Array of Air Traffic Control (ATC) addresses.
    /// Example: /// Example: ['EYCBZMFO', 'EUCHZMFP', 'ETARYXYX', 'EDUUZVZI']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAtcAddresses($j)
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAtcAddressesLength()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Air Traffic Control address filing the flight plan.
    /// Example: /// Example: ETARYXYX
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getOriginator()
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The number of aircraft flying this flight plan.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumAircraft()
    {
        $o = $this->__offset(152);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The flight rules this flight plan is being filed under.
    /// Example: /// Example: l
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getFlightRules()
    {
        $o = $this->__offset(154);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of flight (MILITARY, CIVILIAN, etc).
    /// Example: /// Example: MILITARY
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getFlightType()
    {
        $o = $this->__offset(156);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A character string representation of the initial filed cruise speed for this flight (prepended values of K, N, and M represent kilometers per hour, knots, and Mach, respectively).
    /// Example: /// Example: N0305
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getInitialCruiseSpeed()
    {
        $o = $this->__offset(158);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A character string representation of the initial filed altitude level for this flight (prepended values of F, S, A, and M represent flight level in hundreds of feet, standard metric level in tens of meters, altitude in hundreds of feet, and altitude in tens of meters, respectively).
    /// Example: /// Example: F270
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getInitialFlightLevel()
    {
        $o = $this->__offset(160);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The first designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: /// Example: EDDS
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getArrAlternate1()
    {
        $o = $this->__offset(162);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The second designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: /// Example: EDDM
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getArrAlternate2()
    {
        $o = $this->__offset(164);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The designated alternate departure airfield, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: /// Example: LFPO
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getDepAlternate()
    {
        $o = $this->__offset(166);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The wake turbulence category for this flight. The categories are assigned by the International Civil Aviation Organization (ICAO) and are based on maximum certified takeoff mass for the purpose of separating aircraft in flight due to wake turbulence. Valid values include LIGHT, MEDIUM, LARGE, HEAVY, and SUPER.
    /// Example: /// Example: MEDIUM
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getWakeTurbCat()
    {
        $o = $this->__offset(168);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The list of equipment on the aircraft as defined in the Flight Information Publications (FLIP) General Planning (GP) manual.
    /// Example: /// Example: SDFGHIRTUWXYZ/H
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getEquipment()
    {
        $o = $this->__offset(170);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional remarks for air traffic control for this flight.
    /// Example: /// Example: STS/STATE PBN/A1B2B5C2C4D2D4 EUR/PROTECTED
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getNotes()
    {
        $o = $this->__offset(172);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(174);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(176);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(178);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(180);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(182);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(184);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(186);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \FlightPlan_Ingest_dataMode_Enum::REAL;
    }

    /// Collection of air refueling events occurring on this flight.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAirRefuelEvents($j)
    {
        $o = $this->__offset(188);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAirRefuelEventsLength()
    {
        $o = $this->__offset(188);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getFlightPlanMessages($j)
    {
        $o = $this->__offset(190);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getFlightPlanMessagesLength()
    {
        $o = $this->__offset(190);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Collection of waypoints associated with this flight plan.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getFlightPlanWaypoints($j)
    {
        $o = $this->__offset(192);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getFlightPlanWaypointsLength()
    {
        $o = $this->__offset(192);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getFlightPlanPointGroups($j)
    {
        $o = $this->__offset(194);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getFlightPlanPointGroupsLength()
    {
        $o = $this->__offset(194);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startFlightPlan_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(96);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return FlightPlan_Ingest
     */
    public static function createFlightPlan_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $amcMissionId, $idSortie, $idAircraft, $legNum, $idDepAirfield, $depAirfield, $idArrAirfield, $arrAirfield, $externalId, $genTS, $aircraftMDS, $tailNumber, $callSign, $wxValidStart, $wxValidEnd, $estDepTime, $dragIndex, $fuelDegrade, $opWeight, $msnIndex, $rampFuel, $taxiFuel, $takeoffFuel, $climbFuel, $climbTime, $holdDownFuel, $tocIceFuel, $tocFuel, $enrouteFuel, $enrouteTime, $thunderAvoidFuel, $todIceFuel, $opConditionFuel, $todFuel, $earlyDescentFuel, $arrIceFuel, $holdFuel, $holdTime, $appLandingFuel, $burnedFuel, $landingFuel, $minDivertFuel, $arrAlternate1Fuel, $arrAlternate2Fuel, $contingencyFuel, $reserveFuel, $depressFuel, $unusableFuel, $unidentExtraFuel, $identExtraFuel, $remAlternate1Fuel, $remAlternate2Fuel, $enduranceTime, $sid, $star, $gpsRAIM, $depRunway, $arrRunway, $routeString, $countryCodes, $etopsRating, $etopsAirfields, $etopsAltAirfields, $etopsValWindow, $plannerRemark, $cargoRemark, $windFac1, $windFac2, $windFacAvg, $avgTempDev, $atcAddresses, $originator, $numAircraft, $flightRules, $flightType, $initialCruiseSpeed, $initialFlightLevel, $arrAlternate1, $arrAlternate2, $depAlternate, $wakeTurbCat, $equipment, $notes, $createdAt, $createdBy, $sourceDL, $source, $origin, $origNetwork, $dataMode, $airRefuelEvents, $flightPlanMessages, $flightPlanWaypoints, $flightPlanPointGroups)
    {
        $builder->startObject(96);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addAmcMissionId($builder, $amcMissionId);
        self::addIdSortie($builder, $idSortie);
        self::addIdAircraft($builder, $idAircraft);
        self::addLegNum($builder, $legNum);
        self::addIdDepAirfield($builder, $idDepAirfield);
        self::addDepAirfield($builder, $depAirfield);
        self::addIdArrAirfield($builder, $idArrAirfield);
        self::addArrAirfield($builder, $arrAirfield);
        self::addExternalId($builder, $externalId);
        self::addGenTS($builder, $genTS);
        self::addAircraftMDS($builder, $aircraftMDS);
        self::addTailNumber($builder, $tailNumber);
        self::addCallSign($builder, $callSign);
        self::addWxValidStart($builder, $wxValidStart);
        self::addWxValidEnd($builder, $wxValidEnd);
        self::addEstDepTime($builder, $estDepTime);
        self::addDragIndex($builder, $dragIndex);
        self::addFuelDegrade($builder, $fuelDegrade);
        self::addOpWeight($builder, $opWeight);
        self::addMsnIndex($builder, $msnIndex);
        self::addRampFuel($builder, $rampFuel);
        self::addTaxiFuel($builder, $taxiFuel);
        self::addTakeoffFuel($builder, $takeoffFuel);
        self::addClimbFuel($builder, $climbFuel);
        self::addClimbTime($builder, $climbTime);
        self::addHoldDownFuel($builder, $holdDownFuel);
        self::addTocIceFuel($builder, $tocIceFuel);
        self::addTocFuel($builder, $tocFuel);
        self::addEnrouteFuel($builder, $enrouteFuel);
        self::addEnrouteTime($builder, $enrouteTime);
        self::addThunderAvoidFuel($builder, $thunderAvoidFuel);
        self::addTodIceFuel($builder, $todIceFuel);
        self::addOpConditionFuel($builder, $opConditionFuel);
        self::addTodFuel($builder, $todFuel);
        self::addEarlyDescentFuel($builder, $earlyDescentFuel);
        self::addArrIceFuel($builder, $arrIceFuel);
        self::addHoldFuel($builder, $holdFuel);
        self::addHoldTime($builder, $holdTime);
        self::addAppLandingFuel($builder, $appLandingFuel);
        self::addBurnedFuel($builder, $burnedFuel);
        self::addLandingFuel($builder, $landingFuel);
        self::addMinDivertFuel($builder, $minDivertFuel);
        self::addArrAlternate1Fuel($builder, $arrAlternate1Fuel);
        self::addArrAlternate2Fuel($builder, $arrAlternate2Fuel);
        self::addContingencyFuel($builder, $contingencyFuel);
        self::addReserveFuel($builder, $reserveFuel);
        self::addDepressFuel($builder, $depressFuel);
        self::addUnusableFuel($builder, $unusableFuel);
        self::addUnidentExtraFuel($builder, $unidentExtraFuel);
        self::addIdentExtraFuel($builder, $identExtraFuel);
        self::addRemAlternate1Fuel($builder, $remAlternate1Fuel);
        self::addRemAlternate2Fuel($builder, $remAlternate2Fuel);
        self::addEnduranceTime($builder, $enduranceTime);
        self::addSid($builder, $sid);
        self::addStar($builder, $star);
        self::addGpsRAIM($builder, $gpsRAIM);
        self::addDepRunway($builder, $depRunway);
        self::addArrRunway($builder, $arrRunway);
        self::addRouteString($builder, $routeString);
        self::addCountryCodes($builder, $countryCodes);
        self::addEtopsRating($builder, $etopsRating);
        self::addEtopsAirfields($builder, $etopsAirfields);
        self::addEtopsAltAirfields($builder, $etopsAltAirfields);
        self::addEtopsValWindow($builder, $etopsValWindow);
        self::addPlannerRemark($builder, $plannerRemark);
        self::addCargoRemark($builder, $cargoRemark);
        self::addWindFac1($builder, $windFac1);
        self::addWindFac2($builder, $windFac2);
        self::addWindFacAvg($builder, $windFacAvg);
        self::addAvgTempDev($builder, $avgTempDev);
        self::addAtcAddresses($builder, $atcAddresses);
        self::addOriginator($builder, $originator);
        self::addNumAircraft($builder, $numAircraft);
        self::addFlightRules($builder, $flightRules);
        self::addFlightType($builder, $flightType);
        self::addInitialCruiseSpeed($builder, $initialCruiseSpeed);
        self::addInitialFlightLevel($builder, $initialFlightLevel);
        self::addArrAlternate1($builder, $arrAlternate1);
        self::addArrAlternate2($builder, $arrAlternate2);
        self::addDepAlternate($builder, $depAlternate);
        self::addWakeTurbCat($builder, $wakeTurbCat);
        self::addEquipment($builder, $equipment);
        self::addNotes($builder, $notes);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        self::addAirRefuelEvents($builder, $airRefuelEvents);
        self::addFlightPlanMessages($builder, $flightPlanMessages);
        self::addFlightPlanWaypoints($builder, $flightPlanWaypoints);
        self::addFlightPlanPointGroups($builder, $flightPlanPointGroups);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAmcMissionId(FlatBufferBuilder $builder, $amcMissionId)
    {
        $builder->addOffsetX(2, $amcMissionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSortie(FlatBufferBuilder $builder, $idSortie)
    {
        $builder->addOffsetX(3, $idSortie, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdAircraft(FlatBufferBuilder $builder, $idAircraft)
    {
        $builder->addOffsetX(4, $idAircraft, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addLegNum(FlatBufferBuilder $builder, $legNum)
    {
        $builder->addIntX(5, $legNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdDepAirfield(FlatBufferBuilder $builder, $idDepAirfield)
    {
        $builder->addOffsetX(6, $idDepAirfield, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepAirfield(FlatBufferBuilder $builder, $depAirfield)
    {
        $builder->addOffsetX(7, $depAirfield, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdArrAirfield(FlatBufferBuilder $builder, $idArrAirfield)
    {
        $builder->addOffsetX(8, $idArrAirfield, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArrAirfield(FlatBufferBuilder $builder, $arrAirfield)
    {
        $builder->addOffsetX(9, $arrAirfield, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalId(FlatBufferBuilder $builder, $externalId)
    {
        $builder->addOffsetX(10, $externalId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGenTS(FlatBufferBuilder $builder, $genTS)
    {
        $builder->addOffsetX(11, $genTS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAircraftMDS(FlatBufferBuilder $builder, $aircraftMDS)
    {
        $builder->addOffsetX(12, $aircraftMDS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTailNumber(FlatBufferBuilder $builder, $tailNumber)
    {
        $builder->addOffsetX(13, $tailNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCallSign(FlatBufferBuilder $builder, $callSign)
    {
        $builder->addOffsetX(14, $callSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWxValidStart(FlatBufferBuilder $builder, $wxValidStart)
    {
        $builder->addOffsetX(15, $wxValidStart, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWxValidEnd(FlatBufferBuilder $builder, $wxValidEnd)
    {
        $builder->addOffsetX(16, $wxValidEnd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEstDepTime(FlatBufferBuilder $builder, $estDepTime)
    {
        $builder->addOffsetX(17, $estDepTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDragIndex(FlatBufferBuilder $builder, $dragIndex)
    {
        $builder->addDoubleX(18, $dragIndex, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFuelDegrade(FlatBufferBuilder $builder, $fuelDegrade)
    {
        $builder->addDoubleX(19, $fuelDegrade, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOpWeight(FlatBufferBuilder $builder, $opWeight)
    {
        $builder->addDoubleX(20, $opWeight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMsnIndex(FlatBufferBuilder $builder, $msnIndex)
    {
        $builder->addDoubleX(21, $msnIndex, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRampFuel(FlatBufferBuilder $builder, $rampFuel)
    {
        $builder->addDoubleX(22, $rampFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTaxiFuel(FlatBufferBuilder $builder, $taxiFuel)
    {
        $builder->addDoubleX(23, $taxiFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTakeoffFuel(FlatBufferBuilder $builder, $takeoffFuel)
    {
        $builder->addDoubleX(24, $takeoffFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addClimbFuel(FlatBufferBuilder $builder, $climbFuel)
    {
        $builder->addDoubleX(25, $climbFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClimbTime(FlatBufferBuilder $builder, $climbTime)
    {
        $builder->addOffsetX(26, $climbTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHoldDownFuel(FlatBufferBuilder $builder, $holdDownFuel)
    {
        $builder->addDoubleX(27, $holdDownFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTocIceFuel(FlatBufferBuilder $builder, $tocIceFuel)
    {
        $builder->addDoubleX(28, $tocIceFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTocFuel(FlatBufferBuilder $builder, $tocFuel)
    {
        $builder->addDoubleX(29, $tocFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEnrouteFuel(FlatBufferBuilder $builder, $enrouteFuel)
    {
        $builder->addDoubleX(30, $enrouteFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEnrouteTime(FlatBufferBuilder $builder, $enrouteTime)
    {
        $builder->addOffsetX(31, $enrouteTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addThunderAvoidFuel(FlatBufferBuilder $builder, $thunderAvoidFuel)
    {
        $builder->addDoubleX(32, $thunderAvoidFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTodIceFuel(FlatBufferBuilder $builder, $todIceFuel)
    {
        $builder->addDoubleX(33, $todIceFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOpConditionFuel(FlatBufferBuilder $builder, $opConditionFuel)
    {
        $builder->addDoubleX(34, $opConditionFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTodFuel(FlatBufferBuilder $builder, $todFuel)
    {
        $builder->addDoubleX(35, $todFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEarlyDescentFuel(FlatBufferBuilder $builder, $earlyDescentFuel)
    {
        $builder->addDoubleX(36, $earlyDescentFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addArrIceFuel(FlatBufferBuilder $builder, $arrIceFuel)
    {
        $builder->addDoubleX(37, $arrIceFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHoldFuel(FlatBufferBuilder $builder, $holdFuel)
    {
        $builder->addDoubleX(38, $holdFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHoldTime(FlatBufferBuilder $builder, $holdTime)
    {
        $builder->addOffsetX(39, $holdTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAppLandingFuel(FlatBufferBuilder $builder, $appLandingFuel)
    {
        $builder->addDoubleX(40, $appLandingFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBurnedFuel(FlatBufferBuilder $builder, $burnedFuel)
    {
        $builder->addDoubleX(41, $burnedFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLandingFuel(FlatBufferBuilder $builder, $landingFuel)
    {
        $builder->addDoubleX(42, $landingFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMinDivertFuel(FlatBufferBuilder $builder, $minDivertFuel)
    {
        $builder->addDoubleX(43, $minDivertFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addArrAlternate1Fuel(FlatBufferBuilder $builder, $arrAlternate1Fuel)
    {
        $builder->addDoubleX(44, $arrAlternate1Fuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addArrAlternate2Fuel(FlatBufferBuilder $builder, $arrAlternate2Fuel)
    {
        $builder->addDoubleX(45, $arrAlternate2Fuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addContingencyFuel(FlatBufferBuilder $builder, $contingencyFuel)
    {
        $builder->addDoubleX(46, $contingencyFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addReserveFuel(FlatBufferBuilder $builder, $reserveFuel)
    {
        $builder->addDoubleX(47, $reserveFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDepressFuel(FlatBufferBuilder $builder, $depressFuel)
    {
        $builder->addDoubleX(48, $depressFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUnusableFuel(FlatBufferBuilder $builder, $unusableFuel)
    {
        $builder->addDoubleX(49, $unusableFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUnidentExtraFuel(FlatBufferBuilder $builder, $unidentExtraFuel)
    {
        $builder->addDoubleX(50, $unidentExtraFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addIdentExtraFuel(FlatBufferBuilder $builder, $identExtraFuel)
    {
        $builder->addDoubleX(51, $identExtraFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRemAlternate1Fuel(FlatBufferBuilder $builder, $remAlternate1Fuel)
    {
        $builder->addDoubleX(52, $remAlternate1Fuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRemAlternate2Fuel(FlatBufferBuilder $builder, $remAlternate2Fuel)
    {
        $builder->addDoubleX(53, $remAlternate2Fuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEnduranceTime(FlatBufferBuilder $builder, $enduranceTime)
    {
        $builder->addOffsetX(54, $enduranceTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSid(FlatBufferBuilder $builder, $sid)
    {
        $builder->addOffsetX(55, $sid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStar(FlatBufferBuilder $builder, $star)
    {
        $builder->addOffsetX(56, $star, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGpsRAIM(FlatBufferBuilder $builder, $gpsRAIM)
    {
        $builder->addOffsetX(57, $gpsRAIM, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepRunway(FlatBufferBuilder $builder, $depRunway)
    {
        $builder->addOffsetX(58, $depRunway, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArrRunway(FlatBufferBuilder $builder, $arrRunway)
    {
        $builder->addOffsetX(59, $arrRunway, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRouteString(FlatBufferBuilder $builder, $routeString)
    {
        $builder->addOffsetX(60, $routeString, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCountryCodes(FlatBufferBuilder $builder, $countryCodes)
    {
        $builder->addOffsetX(61, $countryCodes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCountryCodesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCountryCodesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEtopsRating(FlatBufferBuilder $builder, $etopsRating)
    {
        $builder->addOffsetX(62, $etopsRating, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEtopsAirfields(FlatBufferBuilder $builder, $etopsAirfields)
    {
        $builder->addOffsetX(63, $etopsAirfields, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEtopsAirfieldsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEtopsAirfieldsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEtopsAltAirfields(FlatBufferBuilder $builder, $etopsAltAirfields)
    {
        $builder->addOffsetX(64, $etopsAltAirfields, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEtopsAltAirfieldsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEtopsAltAirfieldsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEtopsValWindow(FlatBufferBuilder $builder, $etopsValWindow)
    {
        $builder->addOffsetX(65, $etopsValWindow, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlannerRemark(FlatBufferBuilder $builder, $plannerRemark)
    {
        $builder->addOffsetX(66, $plannerRemark, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCargoRemark(FlatBufferBuilder $builder, $cargoRemark)
    {
        $builder->addOffsetX(67, $cargoRemark, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWindFac1(FlatBufferBuilder $builder, $windFac1)
    {
        $builder->addDoubleX(68, $windFac1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWindFac2(FlatBufferBuilder $builder, $windFac2)
    {
        $builder->addDoubleX(69, $windFac2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWindFacAvg(FlatBufferBuilder $builder, $windFacAvg)
    {
        $builder->addDoubleX(70, $windFacAvg, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgTempDev(FlatBufferBuilder $builder, $avgTempDev)
    {
        $builder->addDoubleX(71, $avgTempDev, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAtcAddresses(FlatBufferBuilder $builder, $atcAddresses)
    {
        $builder->addOffsetX(72, $atcAddresses, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAtcAddressesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAtcAddressesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOriginator(FlatBufferBuilder $builder, $originator)
    {
        $builder->addOffsetX(73, $originator, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumAircraft(FlatBufferBuilder $builder, $numAircraft)
    {
        $builder->addIntX(74, $numAircraft, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFlightRules(FlatBufferBuilder $builder, $flightRules)
    {
        $builder->addOffsetX(75, $flightRules, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFlightType(FlatBufferBuilder $builder, $flightType)
    {
        $builder->addOffsetX(76, $flightType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addInitialCruiseSpeed(FlatBufferBuilder $builder, $initialCruiseSpeed)
    {
        $builder->addOffsetX(77, $initialCruiseSpeed, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addInitialFlightLevel(FlatBufferBuilder $builder, $initialFlightLevel)
    {
        $builder->addOffsetX(78, $initialFlightLevel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArrAlternate1(FlatBufferBuilder $builder, $arrAlternate1)
    {
        $builder->addOffsetX(79, $arrAlternate1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArrAlternate2(FlatBufferBuilder $builder, $arrAlternate2)
    {
        $builder->addOffsetX(80, $arrAlternate2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepAlternate(FlatBufferBuilder $builder, $depAlternate)
    {
        $builder->addOffsetX(81, $depAlternate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWakeTurbCat(FlatBufferBuilder $builder, $wakeTurbCat)
    {
        $builder->addOffsetX(82, $wakeTurbCat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEquipment(FlatBufferBuilder $builder, $equipment)
    {
        $builder->addOffsetX(83, $equipment, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNotes(FlatBufferBuilder $builder, $notes)
    {
        $builder->addOffsetX(84, $notes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(85, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(86, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(87, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(88, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(89, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(90, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(91, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAirRefuelEvents(FlatBufferBuilder $builder, $airRefuelEvents)
    {
        $builder->addOffsetX(92, $airRefuelEvents, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAirRefuelEventsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAirRefuelEventsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addFlightPlanMessages(FlatBufferBuilder $builder, $flightPlanMessages)
    {
        $builder->addOffsetX(93, $flightPlanMessages, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createFlightPlanMessagesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startFlightPlanMessagesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addFlightPlanWaypoints(FlatBufferBuilder $builder, $flightPlanWaypoints)
    {
        $builder->addOffsetX(94, $flightPlanWaypoints, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createFlightPlanWaypointsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startFlightPlanWaypointsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addFlightPlanPointGroups(FlatBufferBuilder $builder, $flightPlanPointGroups)
    {
        $builder->addOffsetX(95, $flightPlanPointGroups, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createFlightPlanPointGroupsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startFlightPlanPointGroupsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endFlightPlan_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishFlightPlan_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "FLIG");
    }
}
