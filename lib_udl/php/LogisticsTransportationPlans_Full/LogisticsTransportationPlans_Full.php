<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
class LogisticsTransportationPlans_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return LogisticsTransportationPlans_Full
     */
    public static function getRootAsLogisticsTransportationPlans_Full(ByteBuffer $bb)
    {
        $obj = new LogisticsTransportationPlans_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function LogisticsTransportationPlans_FullIdentifier()
    {
        return "LOGI";
    }

    public static function LogisticsTransportationPlans_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::LogisticsTransportationPlans_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return LogisticsTransportationPlans_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
    /// Example: /// Example: T89002
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getPlansNumber()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates whether there have been changes to changes to ICAOs, estArrTime, or estDepTime since this Transportation Plan was last edited.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getMissionChange()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Defines the transporation plan as either a deployment or redeployment.
    /// Example: /// Example: DEPLOY
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getPlanDefinition()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Transporation Coordination status code. Cancel, Send to APCC, working, agree, disapprove or blank.
    /// Example: /// Example: N
    /// Constraints: Minimum length = 1, Maximum length = 1
    public function getStatusCode()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The AMS username of the operator who alters the coordination status.  Automatically captured by the system.
    /// Example: /// Example: SMITH, JOHN
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCoordinator()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The AMS user unit_id of the operator who alters the coordination status.  Automatically captured by the system from table AMS_USER.
    /// Example: /// Example: TACC
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getCoordinatorUnit()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The origin location.
    /// Example: /// Example: KATL
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getOriginICAO()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ETD of the first segment, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-15T14:25:00.123Z
    /// Constraints: No constraints specified.
    public function getEstDepTime()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ETA of the final segment, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-15T14:25:00.123Z
    /// Constraints: No constraints specified.
    public function getEstArrTime()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Destination location ICAO.
    /// Example: /// Example: YBCS
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getDestinationICAO()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The identifier that represents a Logistics Master Record.
    /// Example: /// Example: L62126
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getLogisticMasterRecordId()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Contains the tail number displayed by GDSS2.
    /// Example: /// Example: 99209
    /// Constraints: Minimum length = 0, Maximum length = 7
    public function getTpTailNumber()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
    /// Example: /// Example: C17A
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getTpAircraftMDS()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The major command for the current unit.
    /// Example: /// Example: HQAMC
    /// Constraints: Minimum length = 0, Maximum length = 250
    public function getMajcom()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Approximate time of arrival of final segement, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-14T20:37:00.123Z
    /// Constraints: No constraints specified.
    public function getApproxArrTime()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Transportation plan duration, expressed in the format MMM:SS.
    /// Example: /// Example: 086:20
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getDuration()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Actual time of departure of first segment, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-14T19:37:00.123Z
    /// Constraints: No constraints specified.
    public function getActDepTime()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// GC. LGTP_CLSD_DT.  GD2:  Date when the transportation plan was closed, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-14T20:37:00.123Z
    /// Constraints: No constraints specified.
    public function getClosedDate()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// GC. LGTP_CANX_DT.  GD2: Date when the transportation plan was cancelled, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-14T20:37:00.123Z
    /// Constraints: No constraints specified.
    public function getCancelledDate()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// These are the initial maintenance values entered based on the pilot descriptions or the official maintenance evaluation code.
    /// Example: /// Example: NMCMU
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getAircraftStatus()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Transportation plan enroute stops.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumEnrouteStops()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// GDSS2 uses an 8 character serial number to uniquely identify the aircraft and MDS combination. This is a portion of the full manufacturer serial number.
    /// Example: /// Example: 9009209
    /// Constraints: Minimum length = 0, Maximum length = 30
    public function getSerialNumber()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The number of transloads for this Transportation Plan.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumTransLoads()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Last time transportation plan was updated, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-14T20:37:00.123Z
    /// Constraints: No constraints specified.
    public function getLastChangedDate()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The transportation segments associated with this transportation plan.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLogisticsSegments($j)
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLogisticsSegmentsLength()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Remarks associated with this transportation plan.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLogisticsTransportationPlansRemarks($j)
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLogisticsTransportationPlansRemarksLength()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startLogisticsTransportationPlans_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(26);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return LogisticsTransportationPlans_Full
     */
    public static function createLogisticsTransportationPlans_Full(FlatBufferBuilder $builder, $plansNumber, $missionChange, $planDefinition, $statusCode, $coordinator, $coordinatorUnit, $originICAO, $estDepTime, $estArrTime, $destinationICAO, $logisticMasterRecordId, $tpTailNumber, $tpAircraftMDS, $majcom, $approxArrTime, $duration, $actDepTime, $closedDate, $cancelledDate, $aircraftStatus, $numEnrouteStops, $serialNumber, $numTransLoads, $lastChangedDate, $logisticsSegments, $logisticsTransportationPlansRemarks)
    {
        $builder->startObject(26);
        self::addPlansNumber($builder, $plansNumber);
        self::addMissionChange($builder, $missionChange);
        self::addPlanDefinition($builder, $planDefinition);
        self::addStatusCode($builder, $statusCode);
        self::addCoordinator($builder, $coordinator);
        self::addCoordinatorUnit($builder, $coordinatorUnit);
        self::addOriginICAO($builder, $originICAO);
        self::addEstDepTime($builder, $estDepTime);
        self::addEstArrTime($builder, $estArrTime);
        self::addDestinationICAO($builder, $destinationICAO);
        self::addLogisticMasterRecordId($builder, $logisticMasterRecordId);
        self::addTpTailNumber($builder, $tpTailNumber);
        self::addTpAircraftMDS($builder, $tpAircraftMDS);
        self::addMajcom($builder, $majcom);
        self::addApproxArrTime($builder, $approxArrTime);
        self::addDuration($builder, $duration);
        self::addActDepTime($builder, $actDepTime);
        self::addClosedDate($builder, $closedDate);
        self::addCancelledDate($builder, $cancelledDate);
        self::addAircraftStatus($builder, $aircraftStatus);
        self::addNumEnrouteStops($builder, $numEnrouteStops);
        self::addSerialNumber($builder, $serialNumber);
        self::addNumTransLoads($builder, $numTransLoads);
        self::addLastChangedDate($builder, $lastChangedDate);
        self::addLogisticsSegments($builder, $logisticsSegments);
        self::addLogisticsTransportationPlansRemarks($builder, $logisticsTransportationPlansRemarks);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlansNumber(FlatBufferBuilder $builder, $plansNumber)
    {
        $builder->addOffsetX(0, $plansNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addMissionChange(FlatBufferBuilder $builder, $missionChange)
    {
        $builder->addBoolX(1, $missionChange, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlanDefinition(FlatBufferBuilder $builder, $planDefinition)
    {
        $builder->addOffsetX(2, $planDefinition, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStatusCode(FlatBufferBuilder $builder, $statusCode)
    {
        $builder->addOffsetX(3, $statusCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCoordinator(FlatBufferBuilder $builder, $coordinator)
    {
        $builder->addOffsetX(4, $coordinator, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCoordinatorUnit(FlatBufferBuilder $builder, $coordinatorUnit)
    {
        $builder->addOffsetX(5, $coordinatorUnit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOriginICAO(FlatBufferBuilder $builder, $originICAO)
    {
        $builder->addOffsetX(6, $originICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEstDepTime(FlatBufferBuilder $builder, $estDepTime)
    {
        $builder->addOffsetX(7, $estDepTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEstArrTime(FlatBufferBuilder $builder, $estArrTime)
    {
        $builder->addOffsetX(8, $estArrTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDestinationICAO(FlatBufferBuilder $builder, $destinationICAO)
    {
        $builder->addOffsetX(9, $destinationICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLogisticMasterRecordId(FlatBufferBuilder $builder, $logisticMasterRecordId)
    {
        $builder->addOffsetX(10, $logisticMasterRecordId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTpTailNumber(FlatBufferBuilder $builder, $tpTailNumber)
    {
        $builder->addOffsetX(11, $tpTailNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTpAircraftMDS(FlatBufferBuilder $builder, $tpAircraftMDS)
    {
        $builder->addOffsetX(12, $tpAircraftMDS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMajcom(FlatBufferBuilder $builder, $majcom)
    {
        $builder->addOffsetX(13, $majcom, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addApproxArrTime(FlatBufferBuilder $builder, $approxArrTime)
    {
        $builder->addOffsetX(14, $approxArrTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDuration(FlatBufferBuilder $builder, $duration)
    {
        $builder->addOffsetX(15, $duration, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActDepTime(FlatBufferBuilder $builder, $actDepTime)
    {
        $builder->addOffsetX(16, $actDepTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClosedDate(FlatBufferBuilder $builder, $closedDate)
    {
        $builder->addOffsetX(17, $closedDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCancelledDate(FlatBufferBuilder $builder, $cancelledDate)
    {
        $builder->addOffsetX(18, $cancelledDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAircraftStatus(FlatBufferBuilder $builder, $aircraftStatus)
    {
        $builder->addOffsetX(19, $aircraftStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumEnrouteStops(FlatBufferBuilder $builder, $numEnrouteStops)
    {
        $builder->addIntX(20, $numEnrouteStops, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSerialNumber(FlatBufferBuilder $builder, $serialNumber)
    {
        $builder->addOffsetX(21, $serialNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumTransLoads(FlatBufferBuilder $builder, $numTransLoads)
    {
        $builder->addIntX(22, $numTransLoads, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastChangedDate(FlatBufferBuilder $builder, $lastChangedDate)
    {
        $builder->addOffsetX(23, $lastChangedDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLogisticsSegments(FlatBufferBuilder $builder, $logisticsSegments)
    {
        $builder->addOffsetX(24, $logisticsSegments, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLogisticsSegmentsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLogisticsSegmentsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLogisticsTransportationPlansRemarks(FlatBufferBuilder $builder, $logisticsTransportationPlansRemarks)
    {
        $builder->addOffsetX(25, $logisticsTransportationPlansRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLogisticsTransportationPlansRemarksVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLogisticsTransportationPlansRemarksVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endLogisticsTransportationPlans_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishLogisticsTransportationPlans_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "LOGI");
    }
}
