<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Properties and characteristics of equipment that can be associated with a site or other entity.
class Equipment_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Equipment_Full
     */
    public static function getRootAsEquipment_Full(ByteBuffer $bb)
    {
        $obj = new Equipment_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Equipment_FullIdentifier()
    {
        return "EQUI";
    }

    public static function Equipment_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Equipment_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Equipment_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the Parent equipment record associated with this equipment record.
    /// Example: /// Example: PARENT-EQUIPMENT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdParentEquipment()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the Site Entity associated with the equipment record.
    /// Example: /// Example: SITE-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSite()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the operating unit associated with the equipment record.
    /// Example: /// Example: UNIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOperatingUnit()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the Equipment record from the originating system.
    /// Example: /// Example: ORIG-EQP-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAltEqpId()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Designated equipment code assigned to the item of equipment or an abbreviation record type unique identifier. Users should consult the data provider for information on the equipment code structure.
    /// Example: /// Example: X12345
    /// Constraints: Minimum length = 0, Maximum length = 7
    public function getEqpCode()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Uniquely identifies each item or group of equipment associated with a unit, facility or site.
    /// Example: /// Example: 001
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getEqpIdNum()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The DoD Standard Country Code designator for the country or political entity to which the equipment geographic coordinates reside. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: IQ
    /// Constraints: Minimum length = 1, Maximum length = 4
    public function getCountryCode()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
    /// Example: /// Example: IZ
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getAltCountryCode()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// World Aeronautical Chart identifier for the area in which a designated place is located.
    /// Example: /// Example: 0427
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getWac()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Provider specific sequential number assigned to the equipment.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSeqNum()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Generic type this specific piece of equipment belongs to, and the identifying nomenclature which describes the equipment.
    /// Example: /// Example: AMPHIBIOUS WARFARE SHIP
    /// Constraints: Minimum length = 0, Maximum length = 54
    public function getNomen()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: OPR
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getOperStatus()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The physical manner of being or state of existence of the entity.  A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: RDY
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getCondition()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Availability of the entity relative to its condition.  Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getConditionAvail()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
    /// Example: /// Example: 7
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getEval()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Functional Production Area (FPA) under the Shared Production Program (SPP).  Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: NOB
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getFpa()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the function or mission of this equipment, which may or may not be engaged in at any particular time.  Typically refers to a unit, organization, or installation/facility performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: OCC
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getFunction()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
    /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
    /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
    /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    /// PENDING: Track object which has not been evaluated.
    /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    /// Example: /// Example: FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getIdent()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The DoD Standard Country Code designator for the country or political entity to which the equipment owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: OTHR
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getAllegiance()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
    /// Example: /// Example: HL
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getAltAllegiance()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the reason that the equipment is at that location. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: GR
    /// Constraints: Minimum length = 0, Maximum length = 9
    public function getLocReason()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Internationally recognized water area in which the vessel is most likely to be deployed or in which it normally operates most frequently.
    /// Example: /// Example: Territorial Sea
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOperAreaPrimary()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Principal operational function being performed.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: JG
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getFunctPrimary()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: WGS
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getCoordDatum()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc. specified in degrees, minute, and seconds.
    /// Pos. 1-2.  Latitude Degrees     [00-90]
    /// Pos. 3-4.  Latitude Minutes     [00-59]
    /// Pos. 5-6.  Latitude Seconds     [00-59]
    /// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
    /// Pos. 10. Latitude Hemisphere       [NS] 
    /// Pos. 11-13. Longitude Degrees     [00-180] 
    /// Pos. 14-15. Longitude Minutes     [00-59] 
    /// Pos. 16-17. Longitude Seconds     [00-59] 
    /// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
    /// Pos. 21. Longitude Hemisphere     [EW]
    /// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]].
    /// Example: /// Example: 340000000N0430000000E
    /// Constraints: Minimum length = 0, Maximum length = 21
    public function getCoord()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the plus or minus error assessed against the method used to derive the coordinate.
    /// Example: /// Example: 12.345
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCoordDerivAcc()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 39.019242
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLat()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -104.251659
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLon()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Ground elevation, in meters, of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
    /// Example: /// Example: 123.45
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevMsl()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy. Confidence level has a range of values from 0 to 100, with 100 being highest level of confidence.
    /// Example: /// Example: 50
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getElevMslConfLvl()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Indicates the plus or minus error assessed against the method used to derive the elevation, measured in meters.
    /// Example: /// Example: 12.34
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevMslDerivAcc()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The distance between Mean Sea Level and a referenced ellipsoid, measured in meters.
    /// Example: /// Example: 12.34
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGeoidalMslSep()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Indicates the grid system used in the development of the milGrid coordinates. Values are:
    /// UPS - Universal Polar System
    /// UTM - Universal Transverse Mercator.
    /// Example: /// Example: UTM
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getMilGridSys()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
    /// 4Q (grid zone designator, GZD)
    /// FJ (the 100,000-meter square identifier)
    /// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
    /// Example: /// Example: 4QFJ12345678
    /// Constraints: Minimum length = 0, Maximum length = 15
    public function getMilGrid()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Universal Transverse Mercator (UTM) grid coordinates.
    /// Pos. 1-2, UTM Zone Column   [01-60
    /// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
    /// Pos. 4, UTM False Easting   [0-9]
    /// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
    /// Pos. 10-11, UTM False Northing    [0-9][0-9]
    /// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
    /// Example: /// Example: 19P4390691376966
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getUtm()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
    /// Example: /// Example: AL006
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getAirDefArea()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: IZ07
    /// Constraints: Minimum length = 0, Maximum length = 7
    public function getPolSubdiv()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Relative to the parent entity, the total number of military personnel or equipment assessed to be on-hand (OH).
    /// Example: /// Example: 7
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getQtyOH()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
    /// Example: /// Example: SOGPU----------
    /// Constraints: Minimum length = 0, Maximum length = 15
    public function getSymCode()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the importance of the equipment. Referenced, but not constrained to, the following class ratings type classifications.
    /// 0 - Not of significant importance of the system
    /// 1 - Primary importance to system
    /// 2 - Secondary importance to system
    /// 3 - Tertiary importance to system
    /// O - Other. Explain in Remarks.
    /// Example: /// Example: 1
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getClassRating()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Referenced, but not constrained to, the following record status type classifications.
    /// A - Active
    /// I - Inactive
    /// K - Acknowledged
    /// L - Local
    /// Q - A nominated (NOM) or Data Change Request (DCR) record
    /// R - Production reduced by CMD decision
    /// W - Working Record.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getRecStatus()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
    /// Example: /// Example: 2008-06-10
    /// Constraints: No constraints specified.
    public function getReviewDate()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Responsible Producer - Organization that is responsible for the maintenance of the record.
    /// Example: /// Example: RT
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getResProd()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: Provider Reference Documentation
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getReferenceDoc()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of UDL record types such as AIRCRAFT, VESSEL, EO, MTI that are related to this equipment record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: /// Example: ['AIRCRAFT']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSrcTyps($j)
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSrcTypsLength()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of UUID(s) of the UDL data record(s) that are related to this equipment record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
    /// Example: /// Example: ['SRC_ID_1']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSrcIds($j)
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSrcIdsLength()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getEquipmentRemarks($j)
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEquipmentRemarksLength()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Equipment_Full_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEquipment_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(56);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Equipment_Full
     */
    public static function createEquipment_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $idParentEquipment, $idSite, $idOperatingUnit, $altEqpId, $eqpCode, $eqpIdNum, $countryCode, $altCountryCode, $wac, $seqNum, $nomen, $operStatus, $condition, $conditionAvail, $eval, $fpa, $function, $ident, $allegiance, $altAllegiance, $locReason, $operAreaPrimary, $functPrimary, $coordDatum, $coord, $coordDerivAcc, $lat, $lon, $elevMsl, $elevMslConfLvl, $elevMslDerivAcc, $geoidalMslSep, $milGridSys, $milGrid, $utm, $airDefArea, $polSubdiv, $qtyOH, $symCode, $classRating, $recStatus, $reviewDate, $resProd, $referenceDoc, $srcTyps, $srcIds, $equipmentRemarks, $createdAt, $createdBy, $updatedAt, $updatedBy, $source, $origin, $dataMode)
    {
        $builder->startObject(56);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdParentEquipment($builder, $idParentEquipment);
        self::addIdSite($builder, $idSite);
        self::addIdOperatingUnit($builder, $idOperatingUnit);
        self::addAltEqpId($builder, $altEqpId);
        self::addEqpCode($builder, $eqpCode);
        self::addEqpIdNum($builder, $eqpIdNum);
        self::addCountryCode($builder, $countryCode);
        self::addAltCountryCode($builder, $altCountryCode);
        self::addWac($builder, $wac);
        self::addSeqNum($builder, $seqNum);
        self::addNomen($builder, $nomen);
        self::addOperStatus($builder, $operStatus);
        self::addCondition($builder, $condition);
        self::addConditionAvail($builder, $conditionAvail);
        self::addEval($builder, $eval);
        self::addFpa($builder, $fpa);
        self::addFunction($builder, $function);
        self::addIdent($builder, $ident);
        self::addAllegiance($builder, $allegiance);
        self::addAltAllegiance($builder, $altAllegiance);
        self::addLocReason($builder, $locReason);
        self::addOperAreaPrimary($builder, $operAreaPrimary);
        self::addFunctPrimary($builder, $functPrimary);
        self::addCoordDatum($builder, $coordDatum);
        self::addCoord($builder, $coord);
        self::addCoordDerivAcc($builder, $coordDerivAcc);
        self::addLat($builder, $lat);
        self::addLon($builder, $lon);
        self::addElevMsl($builder, $elevMsl);
        self::addElevMslConfLvl($builder, $elevMslConfLvl);
        self::addElevMslDerivAcc($builder, $elevMslDerivAcc);
        self::addGeoidalMslSep($builder, $geoidalMslSep);
        self::addMilGridSys($builder, $milGridSys);
        self::addMilGrid($builder, $milGrid);
        self::addUtm($builder, $utm);
        self::addAirDefArea($builder, $airDefArea);
        self::addPolSubdiv($builder, $polSubdiv);
        self::addQtyOH($builder, $qtyOH);
        self::addSymCode($builder, $symCode);
        self::addClassRating($builder, $classRating);
        self::addRecStatus($builder, $recStatus);
        self::addReviewDate($builder, $reviewDate);
        self::addResProd($builder, $resProd);
        self::addReferenceDoc($builder, $referenceDoc);
        self::addSrcTyps($builder, $srcTyps);
        self::addSrcIds($builder, $srcIds);
        self::addEquipmentRemarks($builder, $equipmentRemarks);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdParentEquipment(FlatBufferBuilder $builder, $idParentEquipment)
    {
        $builder->addOffsetX(2, $idParentEquipment, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSite(FlatBufferBuilder $builder, $idSite)
    {
        $builder->addOffsetX(3, $idSite, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOperatingUnit(FlatBufferBuilder $builder, $idOperatingUnit)
    {
        $builder->addOffsetX(4, $idOperatingUnit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltEqpId(FlatBufferBuilder $builder, $altEqpId)
    {
        $builder->addOffsetX(5, $altEqpId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEqpCode(FlatBufferBuilder $builder, $eqpCode)
    {
        $builder->addOffsetX(6, $eqpCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEqpIdNum(FlatBufferBuilder $builder, $eqpIdNum)
    {
        $builder->addOffsetX(7, $eqpIdNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountryCode(FlatBufferBuilder $builder, $countryCode)
    {
        $builder->addOffsetX(8, $countryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltCountryCode(FlatBufferBuilder $builder, $altCountryCode)
    {
        $builder->addOffsetX(9, $altCountryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWac(FlatBufferBuilder $builder, $wac)
    {
        $builder->addOffsetX(10, $wac, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSeqNum(FlatBufferBuilder $builder, $seqNum)
    {
        $builder->addIntX(11, $seqNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNomen(FlatBufferBuilder $builder, $nomen)
    {
        $builder->addOffsetX(12, $nomen, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOperStatus(FlatBufferBuilder $builder, $operStatus)
    {
        $builder->addOffsetX(13, $operStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCondition(FlatBufferBuilder $builder, $condition)
    {
        $builder->addOffsetX(14, $condition, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addConditionAvail(FlatBufferBuilder $builder, $conditionAvail)
    {
        $builder->addOffsetX(15, $conditionAvail, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addEval(FlatBufferBuilder $builder, $eval)
    {
        $builder->addIntX(16, $eval, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFpa(FlatBufferBuilder $builder, $fpa)
    {
        $builder->addOffsetX(17, $fpa, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFunction(FlatBufferBuilder $builder, $function)
    {
        $builder->addOffsetX(18, $function, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdent(FlatBufferBuilder $builder, $ident)
    {
        $builder->addOffsetX(19, $ident, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAllegiance(FlatBufferBuilder $builder, $allegiance)
    {
        $builder->addOffsetX(20, $allegiance, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltAllegiance(FlatBufferBuilder $builder, $altAllegiance)
    {
        $builder->addOffsetX(21, $altAllegiance, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLocReason(FlatBufferBuilder $builder, $locReason)
    {
        $builder->addOffsetX(22, $locReason, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOperAreaPrimary(FlatBufferBuilder $builder, $operAreaPrimary)
    {
        $builder->addOffsetX(23, $operAreaPrimary, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFunctPrimary(FlatBufferBuilder $builder, $functPrimary)
    {
        $builder->addOffsetX(24, $functPrimary, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCoordDatum(FlatBufferBuilder $builder, $coordDatum)
    {
        $builder->addOffsetX(25, $coordDatum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCoord(FlatBufferBuilder $builder, $coord)
    {
        $builder->addOffsetX(26, $coord, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCoordDerivAcc(FlatBufferBuilder $builder, $coordDerivAcc)
    {
        $builder->addDoubleX(27, $coordDerivAcc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLat(FlatBufferBuilder $builder, $lat)
    {
        $builder->addDoubleX(28, $lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLon(FlatBufferBuilder $builder, $lon)
    {
        $builder->addDoubleX(29, $lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevMsl(FlatBufferBuilder $builder, $elevMsl)
    {
        $builder->addDoubleX(30, $elevMsl, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addElevMslConfLvl(FlatBufferBuilder $builder, $elevMslConfLvl)
    {
        $builder->addIntX(31, $elevMslConfLvl, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevMslDerivAcc(FlatBufferBuilder $builder, $elevMslDerivAcc)
    {
        $builder->addDoubleX(32, $elevMslDerivAcc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGeoidalMslSep(FlatBufferBuilder $builder, $geoidalMslSep)
    {
        $builder->addDoubleX(33, $geoidalMslSep, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMilGridSys(FlatBufferBuilder $builder, $milGridSys)
    {
        $builder->addOffsetX(34, $milGridSys, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMilGrid(FlatBufferBuilder $builder, $milGrid)
    {
        $builder->addOffsetX(35, $milGrid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUtm(FlatBufferBuilder $builder, $utm)
    {
        $builder->addOffsetX(36, $utm, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAirDefArea(FlatBufferBuilder $builder, $airDefArea)
    {
        $builder->addOffsetX(37, $airDefArea, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPolSubdiv(FlatBufferBuilder $builder, $polSubdiv)
    {
        $builder->addOffsetX(38, $polSubdiv, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addQtyOH(FlatBufferBuilder $builder, $qtyOH)
    {
        $builder->addIntX(39, $qtyOH, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSymCode(FlatBufferBuilder $builder, $symCode)
    {
        $builder->addOffsetX(40, $symCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassRating(FlatBufferBuilder $builder, $classRating)
    {
        $builder->addOffsetX(41, $classRating, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRecStatus(FlatBufferBuilder $builder, $recStatus)
    {
        $builder->addOffsetX(42, $recStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReviewDate(FlatBufferBuilder $builder, $reviewDate)
    {
        $builder->addOffsetX(43, $reviewDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addResProd(FlatBufferBuilder $builder, $resProd)
    {
        $builder->addOffsetX(44, $resProd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReferenceDoc(FlatBufferBuilder $builder, $referenceDoc)
    {
        $builder->addOffsetX(45, $referenceDoc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSrcTyps(FlatBufferBuilder $builder, $srcTyps)
    {
        $builder->addOffsetX(46, $srcTyps, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSrcTypsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSrcTypsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSrcIds(FlatBufferBuilder $builder, $srcIds)
    {
        $builder->addOffsetX(47, $srcIds, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSrcIdsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSrcIdsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEquipmentRemarks(FlatBufferBuilder $builder, $equipmentRemarks)
    {
        $builder->addOffsetX(48, $equipmentRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEquipmentRemarksVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEquipmentRemarksVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(49, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(50, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(51, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(52, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(53, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(54, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(55, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEquipment_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEquipment_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "EQUI");
    }
}
