<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Schema for the CotPositionData to post.
class CotPositionData_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return CotPositionData_Ingest
     */
    public static function getRootAsCotPositionData_Ingest(ByteBuffer $bb)
    {
        $obj = new CotPositionData_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function CotPositionData_IngestIdentifier()
    {
        return "COTP";
    }

    public static function CotPositionData_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::CotPositionData_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return CotPositionData_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Name of the POI target Object.
    /// Example: /// Example: POI_NAME
    /// Constraints: Minimum length = 1, Maximum length = 2147483647
    public function getCallSign()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Team role  (Team Member| Team Lead | HQ | Sniper | Medic | Forward Observer | RTO | K9).
    /// Example: /// Example: Team Member
    /// Constraints: Minimum length = 1, Maximum length = 2147483647
    public function getTeamRole()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of the POI target Object.
    /// Example: /// Example: Description of the object
    /// Constraints: Minimum length = 1, Maximum length = 2147483647
    public function getTeam()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startCotPositionData_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(3);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return CotPositionData_Ingest
     */
    public static function createCotPositionData_Ingest(FlatBufferBuilder $builder, $callSign, $teamRole, $team)
    {
        $builder->startObject(3);
        self::addCallSign($builder, $callSign);
        self::addTeamRole($builder, $teamRole);
        self::addTeam($builder, $team);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCallSign(FlatBufferBuilder $builder, $callSign)
    {
        $builder->addOffsetX(0, $callSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTeamRole(FlatBufferBuilder $builder, $teamRole)
    {
        $builder->addOffsetX(1, $teamRole, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTeam(FlatBufferBuilder $builder, $team)
    {
        $builder->addOffsetX(2, $team, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endCotPositionData_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishCotPositionData_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "COTP");
    }
}
