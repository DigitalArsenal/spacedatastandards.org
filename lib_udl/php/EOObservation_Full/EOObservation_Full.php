<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.
class EOObservation_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EOObservation_Full
     */
    public static function getRootAsEOObservation_Full(ByteBuffer $bb)
    {
        $obj = new EOObservation_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EOObservation_FullIdentifier()
    {
        return "EOOB";
    }

    public static function EOObservation_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EOObservation_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EOObservation_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: EOOBSERVATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Ob detection time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getObTime()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Object Correlation Quality value (non-standardized). Users should consult data providers regarding the expected range of values.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCorrQuality()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the Sky Imagery.
    /// Example: /// Example: SKYIMAGERY-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSkyImagery()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
    /// Example: /// Example: AUTOTRACK
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getCollectMethod()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional identifier to indicate the specific tasking which produced this observation.
    /// Example: /// Example: TASK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTaskId()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTransactionId()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier of the track to which this observation belongs.
    /// Example: /// Example: TRACK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTrackId()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
    /// Example: /// Example: FIRST
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getObPosition()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigObjectId()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigSensorId()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getUct()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Line of sight azimuth angle in degrees and topocentric frame.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzimuth()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the line of sight azimuth angle, in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzimuthUnc()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor line of sight azimuth angle bias in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzimuthBias()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change of the line of sight azimuth in degrees per second.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzimuthRate()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line of sight elevation in degrees and topocentric frame.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevation()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the line of sight elevation angle, in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevationUnc()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor line of sight elevation bias in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevationBias()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change of the line of sight elevation in degrees per second.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevationRate()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line of sight range in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRange()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the line of sight range, in kilometers.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRangeUnc()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor line of sight range bias in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRangeBias()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change of the line of sight range in km/sec.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRangeRate()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the line of sight range rate, in kilometers/second.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRangeRateUnc()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line of sight right ascension, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRa()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRaRate()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the line of sight right ascension angle, in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRaUnc()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor line of sight right ascension bias in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRaBias()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line of sight declination, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeclination()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeclinationRate()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the line of sight declination angle, in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeclinationUnc()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor line of sight declination angle bias in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeclinationBias()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLosx()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLosy()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLosz()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the line of sight pointing in micro-radians.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLosUnc()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLosxvel()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLosyvel()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLoszvel()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlat()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlon()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor altitude at obTime (if mobile/onorbit) in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenalt()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenx()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSeny()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenz()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenvelx()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenvely()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenvelz()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).
    /// Example: /// Example: [0.4492, 0.02, 0.8765, 0.2213]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSenQuat($j)
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSenQuatLength()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The number of RSOs detected in the sensor field of view.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getFovCount()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Image exposure duration in seconds.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getExpDuration()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Formula: 2.5 * log_10 (zero_mag_counts / expDuration).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZeroptd()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Net object signature = counts / expDuration.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNetObjSig()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Net object signature uncertainty = counts uncertainty / expDuration.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNetObjSigUnc()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Calibrated magnitude in units of magnitudes.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMag()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty of calibrated magnitude in units of magnitudes.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMagUnc()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Formula: mag - 5.0 * log_10(geo_range / 1000000.0).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMagNormRange()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For GEO detections, the latitude in degrees north.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGeolat()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For GEO detections, the longitude in degrees east.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGeolon()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For GEO detections, the altitude in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGeoalt()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For GEO detections, the range in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGeorange()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSkyBkgrnd()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPrimaryExtinction()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Primary Extinction Coefficient Uncertainty, in Magnitudes.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPrimaryExtinctionUnc()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSolarPhaseAngle()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing and positive when opening.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSolarEqPhaseAngle()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Angle from the sun to the equatorial plane.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSolarDecAngle()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Shutter delay in seconds.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getShutterDelay()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor timing bias in seconds.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTimingBias()
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: Example URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getRawFileURI()
    {
        $o = $this->__offset(152);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Intensity of the target for IR observations, in kw/sr/um.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getIntensity()
    {
        $o = $this->__offset(154);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Background intensity for IR observations, in kw/sr/um.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBgIntensity()
    {
        $o = $this->__offset(156);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: PROVIDED_DATA1
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getDescriptor()
    {
        $o = $this->__offset(158);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(160);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(162);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(164);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \EOObservation_Full_dataMode_Enum::REAL;
    }

    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTags($j)
    {
        $o = $this->__offset(166);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTagsLength()
    {
        $o = $this->__offset(166);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(168);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(170);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// This is the uncertainty in the zero point for the filter used for this observation/row in units of mag. For use with differential photometry.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZeroPtdUnc()
    {
        $o = $this->__offset(172);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getEoobservationDetails()
    {
        $o = $this->__offset(174);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getOnOrbit()
    {
        $o = $this->__offset(176);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    /**
     * @return sbyte
     */
    public function getReferenceFrame()
    {
        $o = $this->__offset(178);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \EOObservation_Full_referenceFrame_Enum::J2000;
    }

    /// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    /**
     * @return sbyte
     */
    public function getSenReferenceFrame()
    {
        $o = $this->__offset(180);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \EOObservation_Full_senReferenceFrame_Enum::J2000;
    }

    /// Boolean indicating that the target object was in umbral eclipse at the time of this observation.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getUmbra()
    {
        $o = $this->__offset(182);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getPenumbra()
    {
        $o = $this->__offset(184);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(186);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(188);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
    /// Example: /// Example: OPTICAL
    /// Constraints: No constraints specified.
    public function getType()
    {
        $o = $this->__offset(190);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEOObservation_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(94);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EOObservation_Full
     */
    public static function createEOObservation_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $obTime, $corrQuality, $idOnOrbit, $idSensor, $idSkyImagery, $collectMethod, $satNo, $taskId, $transactionId, $trackId, $obPosition, $origObjectId, $origSensorId, $uct, $azimuth, $azimuthUnc, $azimuthBias, $azimuthRate, $elevation, $elevationUnc, $elevationBias, $elevationRate, $range, $rangeUnc, $rangeBias, $rangeRate, $rangeRateUnc, $ra, $raRate, $raUnc, $raBias, $declination, $declinationRate, $declinationUnc, $declinationBias, $losx, $losy, $losz, $losUnc, $losxvel, $losyvel, $loszvel, $senlat, $senlon, $senalt, $senx, $seny, $senz, $senvelx, $senvely, $senvelz, $senQuat, $fovCount, $expDuration, $zeroptd, $netObjSig, $netObjSigUnc, $mag, $magUnc, $magNormRange, $geolat, $geolon, $geoalt, $georange, $skyBkgrnd, $primaryExtinction, $primaryExtinctionUnc, $solarPhaseAngle, $solarEqPhaseAngle, $solarDecAngle, $shutterDelay, $timingBias, $rawFileURI, $intensity, $bgIntensity, $descriptor, $source, $origin, $dataMode, $tags, $createdAt, $createdBy, $zeroPtdUnc, $eoobservationDetails, $onOrbit, $referenceFrame, $senReferenceFrame, $umbra, $penumbra, $origNetwork, $sourceDL, $type)
    {
        $builder->startObject(94);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addObTime($builder, $obTime);
        self::addCorrQuality($builder, $corrQuality);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addIdSensor($builder, $idSensor);
        self::addIdSkyImagery($builder, $idSkyImagery);
        self::addCollectMethod($builder, $collectMethod);
        self::addSatNo($builder, $satNo);
        self::addTaskId($builder, $taskId);
        self::addTransactionId($builder, $transactionId);
        self::addTrackId($builder, $trackId);
        self::addObPosition($builder, $obPosition);
        self::addOrigObjectId($builder, $origObjectId);
        self::addOrigSensorId($builder, $origSensorId);
        self::addUct($builder, $uct);
        self::addAzimuth($builder, $azimuth);
        self::addAzimuthUnc($builder, $azimuthUnc);
        self::addAzimuthBias($builder, $azimuthBias);
        self::addAzimuthRate($builder, $azimuthRate);
        self::addElevation($builder, $elevation);
        self::addElevationUnc($builder, $elevationUnc);
        self::addElevationBias($builder, $elevationBias);
        self::addElevationRate($builder, $elevationRate);
        self::addRange($builder, $range);
        self::addRangeUnc($builder, $rangeUnc);
        self::addRangeBias($builder, $rangeBias);
        self::addRangeRate($builder, $rangeRate);
        self::addRangeRateUnc($builder, $rangeRateUnc);
        self::addRa($builder, $ra);
        self::addRaRate($builder, $raRate);
        self::addRaUnc($builder, $raUnc);
        self::addRaBias($builder, $raBias);
        self::addDeclination($builder, $declination);
        self::addDeclinationRate($builder, $declinationRate);
        self::addDeclinationUnc($builder, $declinationUnc);
        self::addDeclinationBias($builder, $declinationBias);
        self::addLosx($builder, $losx);
        self::addLosy($builder, $losy);
        self::addLosz($builder, $losz);
        self::addLosUnc($builder, $losUnc);
        self::addLosxvel($builder, $losxvel);
        self::addLosyvel($builder, $losyvel);
        self::addLoszvel($builder, $loszvel);
        self::addSenlat($builder, $senlat);
        self::addSenlon($builder, $senlon);
        self::addSenalt($builder, $senalt);
        self::addSenx($builder, $senx);
        self::addSeny($builder, $seny);
        self::addSenz($builder, $senz);
        self::addSenvelx($builder, $senvelx);
        self::addSenvely($builder, $senvely);
        self::addSenvelz($builder, $senvelz);
        self::addSenQuat($builder, $senQuat);
        self::addFovCount($builder, $fovCount);
        self::addExpDuration($builder, $expDuration);
        self::addZeroptd($builder, $zeroptd);
        self::addNetObjSig($builder, $netObjSig);
        self::addNetObjSigUnc($builder, $netObjSigUnc);
        self::addMag($builder, $mag);
        self::addMagUnc($builder, $magUnc);
        self::addMagNormRange($builder, $magNormRange);
        self::addGeolat($builder, $geolat);
        self::addGeolon($builder, $geolon);
        self::addGeoalt($builder, $geoalt);
        self::addGeorange($builder, $georange);
        self::addSkyBkgrnd($builder, $skyBkgrnd);
        self::addPrimaryExtinction($builder, $primaryExtinction);
        self::addPrimaryExtinctionUnc($builder, $primaryExtinctionUnc);
        self::addSolarPhaseAngle($builder, $solarPhaseAngle);
        self::addSolarEqPhaseAngle($builder, $solarEqPhaseAngle);
        self::addSolarDecAngle($builder, $solarDecAngle);
        self::addShutterDelay($builder, $shutterDelay);
        self::addTimingBias($builder, $timingBias);
        self::addRawFileURI($builder, $rawFileURI);
        self::addIntensity($builder, $intensity);
        self::addBgIntensity($builder, $bgIntensity);
        self::addDescriptor($builder, $descriptor);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addTags($builder, $tags);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addZeroPtdUnc($builder, $zeroPtdUnc);
        self::addEoobservationDetails($builder, $eoobservationDetails);
        self::addOnOrbit($builder, $onOrbit);
        self::addReferenceFrame($builder, $referenceFrame);
        self::addSenReferenceFrame($builder, $senReferenceFrame);
        self::addUmbra($builder, $umbra);
        self::addPenumbra($builder, $penumbra);
        self::addOrigNetwork($builder, $origNetwork);
        self::addSourceDL($builder, $sourceDL);
        self::addType($builder, $type);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObTime(FlatBufferBuilder $builder, $obTime)
    {
        $builder->addOffsetX(2, $obTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCorrQuality(FlatBufferBuilder $builder, $corrQuality)
    {
        $builder->addDoubleX(3, $corrQuality, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(4, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(5, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSkyImagery(FlatBufferBuilder $builder, $idSkyImagery)
    {
        $builder->addOffsetX(6, $idSkyImagery, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCollectMethod(FlatBufferBuilder $builder, $collectMethod)
    {
        $builder->addOffsetX(7, $collectMethod, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(8, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskId(FlatBufferBuilder $builder, $taskId)
    {
        $builder->addOffsetX(9, $taskId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransactionId(FlatBufferBuilder $builder, $transactionId)
    {
        $builder->addOffsetX(10, $transactionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrackId(FlatBufferBuilder $builder, $trackId)
    {
        $builder->addOffsetX(11, $trackId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObPosition(FlatBufferBuilder $builder, $obPosition)
    {
        $builder->addOffsetX(12, $obPosition, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(13, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSensorId(FlatBufferBuilder $builder, $origSensorId)
    {
        $builder->addOffsetX(14, $origSensorId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addUct(FlatBufferBuilder $builder, $uct)
    {
        $builder->addBoolX(15, $uct, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzimuth(FlatBufferBuilder $builder, $azimuth)
    {
        $builder->addDoubleX(16, $azimuth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzimuthUnc(FlatBufferBuilder $builder, $azimuthUnc)
    {
        $builder->addDoubleX(17, $azimuthUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzimuthBias(FlatBufferBuilder $builder, $azimuthBias)
    {
        $builder->addDoubleX(18, $azimuthBias, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzimuthRate(FlatBufferBuilder $builder, $azimuthRate)
    {
        $builder->addDoubleX(19, $azimuthRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevation(FlatBufferBuilder $builder, $elevation)
    {
        $builder->addDoubleX(20, $elevation, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevationUnc(FlatBufferBuilder $builder, $elevationUnc)
    {
        $builder->addDoubleX(21, $elevationUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevationBias(FlatBufferBuilder $builder, $elevationBias)
    {
        $builder->addDoubleX(22, $elevationBias, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevationRate(FlatBufferBuilder $builder, $elevationRate)
    {
        $builder->addDoubleX(23, $elevationRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRange(FlatBufferBuilder $builder, $range)
    {
        $builder->addDoubleX(24, $range, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRangeUnc(FlatBufferBuilder $builder, $rangeUnc)
    {
        $builder->addDoubleX(25, $rangeUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRangeBias(FlatBufferBuilder $builder, $rangeBias)
    {
        $builder->addDoubleX(26, $rangeBias, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRangeRate(FlatBufferBuilder $builder, $rangeRate)
    {
        $builder->addDoubleX(27, $rangeRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRangeRateUnc(FlatBufferBuilder $builder, $rangeRateUnc)
    {
        $builder->addDoubleX(28, $rangeRateUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRa(FlatBufferBuilder $builder, $ra)
    {
        $builder->addDoubleX(29, $ra, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRaRate(FlatBufferBuilder $builder, $raRate)
    {
        $builder->addDoubleX(30, $raRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRaUnc(FlatBufferBuilder $builder, $raUnc)
    {
        $builder->addDoubleX(31, $raUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRaBias(FlatBufferBuilder $builder, $raBias)
    {
        $builder->addDoubleX(32, $raBias, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeclination(FlatBufferBuilder $builder, $declination)
    {
        $builder->addDoubleX(33, $declination, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeclinationRate(FlatBufferBuilder $builder, $declinationRate)
    {
        $builder->addDoubleX(34, $declinationRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeclinationUnc(FlatBufferBuilder $builder, $declinationUnc)
    {
        $builder->addDoubleX(35, $declinationUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeclinationBias(FlatBufferBuilder $builder, $declinationBias)
    {
        $builder->addDoubleX(36, $declinationBias, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLosx(FlatBufferBuilder $builder, $losx)
    {
        $builder->addDoubleX(37, $losx, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLosy(FlatBufferBuilder $builder, $losy)
    {
        $builder->addDoubleX(38, $losy, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLosz(FlatBufferBuilder $builder, $losz)
    {
        $builder->addDoubleX(39, $losz, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLosUnc(FlatBufferBuilder $builder, $losUnc)
    {
        $builder->addDoubleX(40, $losUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLosxvel(FlatBufferBuilder $builder, $losxvel)
    {
        $builder->addDoubleX(41, $losxvel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLosyvel(FlatBufferBuilder $builder, $losyvel)
    {
        $builder->addDoubleX(42, $losyvel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLoszvel(FlatBufferBuilder $builder, $loszvel)
    {
        $builder->addDoubleX(43, $loszvel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlat(FlatBufferBuilder $builder, $senlat)
    {
        $builder->addDoubleX(44, $senlat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlon(FlatBufferBuilder $builder, $senlon)
    {
        $builder->addDoubleX(45, $senlon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenalt(FlatBufferBuilder $builder, $senalt)
    {
        $builder->addDoubleX(46, $senalt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenx(FlatBufferBuilder $builder, $senx)
    {
        $builder->addDoubleX(47, $senx, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSeny(FlatBufferBuilder $builder, $seny)
    {
        $builder->addDoubleX(48, $seny, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenz(FlatBufferBuilder $builder, $senz)
    {
        $builder->addDoubleX(49, $senz, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenvelx(FlatBufferBuilder $builder, $senvelx)
    {
        $builder->addDoubleX(50, $senvelx, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenvely(FlatBufferBuilder $builder, $senvely)
    {
        $builder->addDoubleX(51, $senvely, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenvelz(FlatBufferBuilder $builder, $senvelz)
    {
        $builder->addDoubleX(52, $senvelz, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSenQuat(FlatBufferBuilder $builder, $senQuat)
    {
        $builder->addOffsetX(53, $senQuat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSenQuatVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSenQuatVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addFovCount(FlatBufferBuilder $builder, $fovCount)
    {
        $builder->addIntX(54, $fovCount, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addExpDuration(FlatBufferBuilder $builder, $expDuration)
    {
        $builder->addDoubleX(55, $expDuration, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZeroptd(FlatBufferBuilder $builder, $zeroptd)
    {
        $builder->addDoubleX(56, $zeroptd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNetObjSig(FlatBufferBuilder $builder, $netObjSig)
    {
        $builder->addDoubleX(57, $netObjSig, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNetObjSigUnc(FlatBufferBuilder $builder, $netObjSigUnc)
    {
        $builder->addDoubleX(58, $netObjSigUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMag(FlatBufferBuilder $builder, $mag)
    {
        $builder->addDoubleX(59, $mag, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMagUnc(FlatBufferBuilder $builder, $magUnc)
    {
        $builder->addDoubleX(60, $magUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMagNormRange(FlatBufferBuilder $builder, $magNormRange)
    {
        $builder->addDoubleX(61, $magNormRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGeolat(FlatBufferBuilder $builder, $geolat)
    {
        $builder->addDoubleX(62, $geolat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGeolon(FlatBufferBuilder $builder, $geolon)
    {
        $builder->addDoubleX(63, $geolon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGeoalt(FlatBufferBuilder $builder, $geoalt)
    {
        $builder->addDoubleX(64, $geoalt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGeorange(FlatBufferBuilder $builder, $georange)
    {
        $builder->addDoubleX(65, $georange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSkyBkgrnd(FlatBufferBuilder $builder, $skyBkgrnd)
    {
        $builder->addDoubleX(66, $skyBkgrnd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPrimaryExtinction(FlatBufferBuilder $builder, $primaryExtinction)
    {
        $builder->addDoubleX(67, $primaryExtinction, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPrimaryExtinctionUnc(FlatBufferBuilder $builder, $primaryExtinctionUnc)
    {
        $builder->addDoubleX(68, $primaryExtinctionUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSolarPhaseAngle(FlatBufferBuilder $builder, $solarPhaseAngle)
    {
        $builder->addDoubleX(69, $solarPhaseAngle, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSolarEqPhaseAngle(FlatBufferBuilder $builder, $solarEqPhaseAngle)
    {
        $builder->addDoubleX(70, $solarEqPhaseAngle, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSolarDecAngle(FlatBufferBuilder $builder, $solarDecAngle)
    {
        $builder->addDoubleX(71, $solarDecAngle, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addShutterDelay(FlatBufferBuilder $builder, $shutterDelay)
    {
        $builder->addDoubleX(72, $shutterDelay, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTimingBias(FlatBufferBuilder $builder, $timingBias)
    {
        $builder->addDoubleX(73, $timingBias, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRawFileURI(FlatBufferBuilder $builder, $rawFileURI)
    {
        $builder->addOffsetX(74, $rawFileURI, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addIntensity(FlatBufferBuilder $builder, $intensity)
    {
        $builder->addDoubleX(75, $intensity, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBgIntensity(FlatBufferBuilder $builder, $bgIntensity)
    {
        $builder->addDoubleX(76, $bgIntensity, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescriptor(FlatBufferBuilder $builder, $descriptor)
    {
        $builder->addOffsetX(77, $descriptor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(78, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(79, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(80, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTags(FlatBufferBuilder $builder, $tags)
    {
        $builder->addOffsetX(81, $tags, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTagsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTagsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(82, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(83, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZeroPtdUnc(FlatBufferBuilder $builder, $zeroPtdUnc)
    {
        $builder->addDoubleX(84, $zeroPtdUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEoobservationDetails(FlatBufferBuilder $builder, $eoobservationDetails)
    {
        $builder->addOffsetX(85, $eoobservationDetails, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOnOrbit(FlatBufferBuilder $builder, $onOrbit)
    {
        $builder->addOffsetX(86, $onOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addReferenceFrame(FlatBufferBuilder $builder, $referenceFrame)
    {
        $builder->addSbyteX(87, $referenceFrame, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addSenReferenceFrame(FlatBufferBuilder $builder, $senReferenceFrame)
    {
        $builder->addSbyteX(88, $senReferenceFrame, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addUmbra(FlatBufferBuilder $builder, $umbra)
    {
        $builder->addBoolX(89, $umbra, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addPenumbra(FlatBufferBuilder $builder, $penumbra)
    {
        $builder->addBoolX(90, $penumbra, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(91, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(92, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(93, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEOObservation_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEOObservation_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "EOOB");
    }
}
