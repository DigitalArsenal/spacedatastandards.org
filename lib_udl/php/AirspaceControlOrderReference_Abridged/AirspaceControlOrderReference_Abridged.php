<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// The airspaceControlReferences set provides both USMTF and non-USMTF references for this airspace control order.
class AirspaceControlOrderReference_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AirspaceControlOrderReference_Abridged
     */
    public static function getRootAsAirspaceControlOrderReference_Abridged(ByteBuffer $bb)
    {
        $obj = new AirspaceControlOrderReference_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AirspaceControlOrderReference_AbridgedIdentifier()
    {
        return "AIRS";
    }

    public static function AirspaceControlOrderReference_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AirspaceControlOrderReference_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AirspaceControlOrderReference_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Specifies an alphabetic serial number identifying a reference pertaining to this message.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getRefSId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies the type for this reference.
    /// Example: /// Example: NBC1
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getRefType()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originator of this reference.
    /// Example: /// Example: SHAPE
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getRefOriginator()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Timestamp of the referenced message, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T13:55:43.123Z
    /// Constraints: No constraints specified.
    public function getRefTs()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reference serial number.
    /// Example: /// Example: 100
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getRefSerialNum()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates any special actions, restrictions, guidance, or information relating to this reference.
    /// Example: /// Example: NOTAL
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getRefSpecialNotation()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document being referenced.
    /// Example: /// Example: ['RCA', 'FN:4503B']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRefSICs($j)
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRefSICsLength()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAirspaceControlOrderReference_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(7);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AirspaceControlOrderReference_Abridged
     */
    public static function createAirspaceControlOrderReference_Abridged(FlatBufferBuilder $builder, $refSId, $refType, $refOriginator, $refTs, $refSerialNum, $refSpecialNotation, $refSICs)
    {
        $builder->startObject(7);
        self::addRefSId($builder, $refSId);
        self::addRefType($builder, $refType);
        self::addRefOriginator($builder, $refOriginator);
        self::addRefTs($builder, $refTs);
        self::addRefSerialNum($builder, $refSerialNum);
        self::addRefSpecialNotation($builder, $refSpecialNotation);
        self::addRefSICs($builder, $refSICs);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRefSId(FlatBufferBuilder $builder, $refSId)
    {
        $builder->addOffsetX(0, $refSId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRefType(FlatBufferBuilder $builder, $refType)
    {
        $builder->addOffsetX(1, $refType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRefOriginator(FlatBufferBuilder $builder, $refOriginator)
    {
        $builder->addOffsetX(2, $refOriginator, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRefTs(FlatBufferBuilder $builder, $refTs)
    {
        $builder->addOffsetX(3, $refTs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRefSerialNum(FlatBufferBuilder $builder, $refSerialNum)
    {
        $builder->addOffsetX(4, $refSerialNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRefSpecialNotation(FlatBufferBuilder $builder, $refSpecialNotation)
    {
        $builder->addOffsetX(5, $refSpecialNotation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRefSICs(FlatBufferBuilder $builder, $refSICs)
    {
        $builder->addOffsetX(6, $refSICs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRefSICsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRefSICsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAirspaceControlOrderReference_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAirspaceControlOrderReference_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRS");
    }
}
