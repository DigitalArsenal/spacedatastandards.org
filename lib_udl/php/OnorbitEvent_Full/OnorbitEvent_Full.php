<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// No description available.
class OnorbitEvent_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return OnorbitEvent_Full
     */
    public static function getRootAsOnorbitEvent_Full(ByteBuffer $bb)
    {
        $obj = new OnorbitEvent_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function OnorbitEvent_FullIdentifier()
    {
        return "ONOR";
    }

    public static function OnorbitEvent_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::OnorbitEvent_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return OnorbitEvent_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ONORBITEVENT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The sources or SCG references from which the classification of this data is derived.
    /// Example: /// Example: DERIVED_SOURCE
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getDerivedFrom()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The declassification date of this data, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:02:02.123Z
    /// Constraints: No constraints specified.
    public function getDeclassificationDate()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Declassification string of this data.
    /// Example: /// Example: DECLASS_STRING
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getDeclassificationString()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the on-orbit object for this event.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigObjectId()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getEventTime()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Notes/remarks on the validity/accuracy of the eventTime.
    /// Example: /// Example: Notes on validity
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getEventTimeNotes()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Organization ID of the operator of the on-orbit spacecraft at the time of the event.
    /// Example: /// Example: OPERATORORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOperatorOrgId()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Organization ID of the owner of the on-orbit spacecraft at the time of the event.
    /// Example: /// Example: OWNERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOwnerOrgId()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the organization which leases this on-orbit spacecraft.
    /// Example: /// Example: LESSEEORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getLesseeOrgId()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.
    /// Example: /// Example: OPERATEDONBEHALFOFORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOperatedOnBehalfOfOrgId()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// GEO position longitude at event time if applicable. Negative values are west.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGeoPosition()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// GEO plane slot of the spacecraft at event time.
    /// Example: /// Example: example_slot
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getPlaneSlot()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// GEO slot plane number/designator of the spacecraft at event time.
    /// Example: /// Example: PL_1
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getPlaneNumber()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).
    /// Example: /// Example: Stable
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getPositionStatus()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Maximum validity time of the event.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getUntilTime()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Date time of official loss of the spacecraft.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getOfficialLossDate()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Net amount of the insurance claim for the event, in USD.
    /// Example: /// Example: 10000.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNetAmount()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Underlying cause of the event.
    /// Example: /// Example: CAUSE_EXAMPLE
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getUnderlyingCause()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft capability loss incurred, as a fraction of 1.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCapabilityLoss()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spacecraft capacity loss incurred, as a fraction of 1.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCapacityLoss()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Insurance loss incurred, as a fraction of 1.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getInsuranceLoss()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Insurance loss incurred by 3rd party insurance, in USD.
    /// Example: /// Example: 10000.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getThirdPartyInsuranceLoss()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Number of humans injured in the event.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getInjured()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of humans killed in the event.
    /// Example: /// Example: 23
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getKilled()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Spacecraft life lost due to the event as a percent/fraction of 1.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLifeLost()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spacecraft age at the event in years.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAgeAtEvent()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Achieved phase of flight prior to the event.
    /// Example: /// Example: Phase 2
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getAchievedFlightPhase()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Phase of flight during which the event occurred.
    /// Example: /// Example: Phase 2
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOccurrenceFlightPhase()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Faulty stage of flight for the event.
    /// Example: /// Example: Phase 2
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getStageAtFault()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Equipment on the spacecraft which caused the event.
    /// Example: /// Example: Example Equipment
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getEquipmentAtFault()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of the equipment on the spacecraft which caused the event.
    /// Example: /// Example: Example Equipment
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getEquipmentTypeAtFault()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specific part of the equipment on the spacecraft which caused the event.
    /// Example: /// Example: Example Equipment
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getEquipmentPartAtFault()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.
    /// Example: /// Example: Example Equipment
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getConsequentialEquipmentFailure()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating if the spacecraft is inclined.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getInclined()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Notes/description of the event.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getDescription()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional remarks on the event description.
    /// Example: /// Example: Example remarks
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getRemarks()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional insurance notes if the event is an official loss.
    /// Example: /// Example: Insurance notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getInsuranceLossNotes()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Notes on capability loss at the time of event.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getCapabilityLossNotes()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional insurance notes on coverages at the time of event.
    /// Example: /// Example: Insurance notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getInsuranceCarriedNotes()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional notes on the equipment causing the event/loss.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getEquipmentCausingLossNotes()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of on-orbit event being reported.
    /// Example: /// Example: Type1
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getEventType()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The result of the reported event.
    /// Example: /// Example: Example results
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getEventResult()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The status of the on-orbit object.
    /// Example: /// Example: Status1
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getObjectStatus()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of the satellite orbital position or regime.
    /// Example: /// Example: Example description
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getSatellitePosition()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \OnorbitEvent_Full_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getOnOrbit()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startOnorbitEvent_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(57);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return OnorbitEvent_Full
     */
    public static function createOnorbitEvent_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $derivedFrom, $declassificationDate, $declassificationString, $idOnOrbit, $satNo, $origObjectId, $eventTime, $eventTimeNotes, $operatorOrgId, $ownerOrgId, $lesseeOrgId, $operatedOnBehalfOfOrgId, $geoPosition, $planeSlot, $planeNumber, $positionStatus, $untilTime, $officialLossDate, $netAmount, $underlyingCause, $capabilityLoss, $capacityLoss, $insuranceLoss, $thirdPartyInsuranceLoss, $injured, $killed, $lifeLost, $ageAtEvent, $achievedFlightPhase, $occurrenceFlightPhase, $stageAtFault, $equipmentAtFault, $equipmentTypeAtFault, $equipmentPartAtFault, $consequentialEquipmentFailure, $inclined, $description, $remarks, $insuranceLossNotes, $capabilityLossNotes, $insuranceCarriedNotes, $equipmentCausingLossNotes, $eventType, $eventResult, $objectStatus, $satellitePosition, $source, $origin, $dataMode, $createdAt, $createdBy, $updatedAt, $updatedBy, $onOrbit, $origNetwork)
    {
        $builder->startObject(57);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addDerivedFrom($builder, $derivedFrom);
        self::addDeclassificationDate($builder, $declassificationDate);
        self::addDeclassificationString($builder, $declassificationString);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addSatNo($builder, $satNo);
        self::addOrigObjectId($builder, $origObjectId);
        self::addEventTime($builder, $eventTime);
        self::addEventTimeNotes($builder, $eventTimeNotes);
        self::addOperatorOrgId($builder, $operatorOrgId);
        self::addOwnerOrgId($builder, $ownerOrgId);
        self::addLesseeOrgId($builder, $lesseeOrgId);
        self::addOperatedOnBehalfOfOrgId($builder, $operatedOnBehalfOfOrgId);
        self::addGeoPosition($builder, $geoPosition);
        self::addPlaneSlot($builder, $planeSlot);
        self::addPlaneNumber($builder, $planeNumber);
        self::addPositionStatus($builder, $positionStatus);
        self::addUntilTime($builder, $untilTime);
        self::addOfficialLossDate($builder, $officialLossDate);
        self::addNetAmount($builder, $netAmount);
        self::addUnderlyingCause($builder, $underlyingCause);
        self::addCapabilityLoss($builder, $capabilityLoss);
        self::addCapacityLoss($builder, $capacityLoss);
        self::addInsuranceLoss($builder, $insuranceLoss);
        self::addThirdPartyInsuranceLoss($builder, $thirdPartyInsuranceLoss);
        self::addInjured($builder, $injured);
        self::addKilled($builder, $killed);
        self::addLifeLost($builder, $lifeLost);
        self::addAgeAtEvent($builder, $ageAtEvent);
        self::addAchievedFlightPhase($builder, $achievedFlightPhase);
        self::addOccurrenceFlightPhase($builder, $occurrenceFlightPhase);
        self::addStageAtFault($builder, $stageAtFault);
        self::addEquipmentAtFault($builder, $equipmentAtFault);
        self::addEquipmentTypeAtFault($builder, $equipmentTypeAtFault);
        self::addEquipmentPartAtFault($builder, $equipmentPartAtFault);
        self::addConsequentialEquipmentFailure($builder, $consequentialEquipmentFailure);
        self::addInclined($builder, $inclined);
        self::addDescription($builder, $description);
        self::addRemarks($builder, $remarks);
        self::addInsuranceLossNotes($builder, $insuranceLossNotes);
        self::addCapabilityLossNotes($builder, $capabilityLossNotes);
        self::addInsuranceCarriedNotes($builder, $insuranceCarriedNotes);
        self::addEquipmentCausingLossNotes($builder, $equipmentCausingLossNotes);
        self::addEventType($builder, $eventType);
        self::addEventResult($builder, $eventResult);
        self::addObjectStatus($builder, $objectStatus);
        self::addSatellitePosition($builder, $satellitePosition);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addOnOrbit($builder, $onOrbit);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDerivedFrom(FlatBufferBuilder $builder, $derivedFrom)
    {
        $builder->addOffsetX(2, $derivedFrom, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDeclassificationDate(FlatBufferBuilder $builder, $declassificationDate)
    {
        $builder->addOffsetX(3, $declassificationDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDeclassificationString(FlatBufferBuilder $builder, $declassificationString)
    {
        $builder->addOffsetX(4, $declassificationString, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(5, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(6, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(7, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEventTime(FlatBufferBuilder $builder, $eventTime)
    {
        $builder->addOffsetX(8, $eventTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEventTimeNotes(FlatBufferBuilder $builder, $eventTimeNotes)
    {
        $builder->addOffsetX(9, $eventTimeNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOperatorOrgId(FlatBufferBuilder $builder, $operatorOrgId)
    {
        $builder->addOffsetX(10, $operatorOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOwnerOrgId(FlatBufferBuilder $builder, $ownerOrgId)
    {
        $builder->addOffsetX(11, $ownerOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLesseeOrgId(FlatBufferBuilder $builder, $lesseeOrgId)
    {
        $builder->addOffsetX(12, $lesseeOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOperatedOnBehalfOfOrgId(FlatBufferBuilder $builder, $operatedOnBehalfOfOrgId)
    {
        $builder->addOffsetX(13, $operatedOnBehalfOfOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGeoPosition(FlatBufferBuilder $builder, $geoPosition)
    {
        $builder->addDoubleX(14, $geoPosition, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlaneSlot(FlatBufferBuilder $builder, $planeSlot)
    {
        $builder->addOffsetX(15, $planeSlot, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlaneNumber(FlatBufferBuilder $builder, $planeNumber)
    {
        $builder->addOffsetX(16, $planeNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPositionStatus(FlatBufferBuilder $builder, $positionStatus)
    {
        $builder->addOffsetX(17, $positionStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUntilTime(FlatBufferBuilder $builder, $untilTime)
    {
        $builder->addOffsetX(18, $untilTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOfficialLossDate(FlatBufferBuilder $builder, $officialLossDate)
    {
        $builder->addOffsetX(19, $officialLossDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNetAmount(FlatBufferBuilder $builder, $netAmount)
    {
        $builder->addDoubleX(20, $netAmount, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUnderlyingCause(FlatBufferBuilder $builder, $underlyingCause)
    {
        $builder->addOffsetX(21, $underlyingCause, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCapabilityLoss(FlatBufferBuilder $builder, $capabilityLoss)
    {
        $builder->addDoubleX(22, $capabilityLoss, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCapacityLoss(FlatBufferBuilder $builder, $capacityLoss)
    {
        $builder->addDoubleX(23, $capacityLoss, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addInsuranceLoss(FlatBufferBuilder $builder, $insuranceLoss)
    {
        $builder->addDoubleX(24, $insuranceLoss, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addThirdPartyInsuranceLoss(FlatBufferBuilder $builder, $thirdPartyInsuranceLoss)
    {
        $builder->addDoubleX(25, $thirdPartyInsuranceLoss, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addInjured(FlatBufferBuilder $builder, $injured)
    {
        $builder->addIntX(26, $injured, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addKilled(FlatBufferBuilder $builder, $killed)
    {
        $builder->addIntX(27, $killed, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLifeLost(FlatBufferBuilder $builder, $lifeLost)
    {
        $builder->addDoubleX(28, $lifeLost, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAgeAtEvent(FlatBufferBuilder $builder, $ageAtEvent)
    {
        $builder->addDoubleX(29, $ageAtEvent, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAchievedFlightPhase(FlatBufferBuilder $builder, $achievedFlightPhase)
    {
        $builder->addOffsetX(30, $achievedFlightPhase, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOccurrenceFlightPhase(FlatBufferBuilder $builder, $occurrenceFlightPhase)
    {
        $builder->addOffsetX(31, $occurrenceFlightPhase, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStageAtFault(FlatBufferBuilder $builder, $stageAtFault)
    {
        $builder->addOffsetX(32, $stageAtFault, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEquipmentAtFault(FlatBufferBuilder $builder, $equipmentAtFault)
    {
        $builder->addOffsetX(33, $equipmentAtFault, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEquipmentTypeAtFault(FlatBufferBuilder $builder, $equipmentTypeAtFault)
    {
        $builder->addOffsetX(34, $equipmentTypeAtFault, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEquipmentPartAtFault(FlatBufferBuilder $builder, $equipmentPartAtFault)
    {
        $builder->addOffsetX(35, $equipmentPartAtFault, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addConsequentialEquipmentFailure(FlatBufferBuilder $builder, $consequentialEquipmentFailure)
    {
        $builder->addOffsetX(36, $consequentialEquipmentFailure, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addInclined(FlatBufferBuilder $builder, $inclined)
    {
        $builder->addBoolX(37, $inclined, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(38, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRemarks(FlatBufferBuilder $builder, $remarks)
    {
        $builder->addOffsetX(39, $remarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addInsuranceLossNotes(FlatBufferBuilder $builder, $insuranceLossNotes)
    {
        $builder->addOffsetX(40, $insuranceLossNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCapabilityLossNotes(FlatBufferBuilder $builder, $capabilityLossNotes)
    {
        $builder->addOffsetX(41, $capabilityLossNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addInsuranceCarriedNotes(FlatBufferBuilder $builder, $insuranceCarriedNotes)
    {
        $builder->addOffsetX(42, $insuranceCarriedNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEquipmentCausingLossNotes(FlatBufferBuilder $builder, $equipmentCausingLossNotes)
    {
        $builder->addOffsetX(43, $equipmentCausingLossNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEventType(FlatBufferBuilder $builder, $eventType)
    {
        $builder->addOffsetX(44, $eventType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEventResult(FlatBufferBuilder $builder, $eventResult)
    {
        $builder->addOffsetX(45, $eventResult, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjectStatus(FlatBufferBuilder $builder, $objectStatus)
    {
        $builder->addOffsetX(46, $objectStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSatellitePosition(FlatBufferBuilder $builder, $satellitePosition)
    {
        $builder->addOffsetX(47, $satellitePosition, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(48, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(49, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(50, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(51, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(52, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(53, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(54, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOnOrbit(FlatBufferBuilder $builder, $onOrbit)
    {
        $builder->addOffsetX(55, $onOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(56, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endOnorbitEvent_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishOnorbitEvent_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ONOR");
    }
}
