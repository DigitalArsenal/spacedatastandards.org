<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Points identified within the route.
class RoutePoints_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RoutePoints_Full
     */
    public static function getRootAsRoutePoints_Full(ByteBuffer $bb)
    {
        $obj = new RoutePoints_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function RoutePoints_FullIdentifier()
    {
        return "ROUT";
    }

    public static function RoutePoints_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::RoutePoints_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RoutePoints_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Sequencing field for the track route. This is the identifier representing the sequence of waypoints associated to the track route.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPtSequenceId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Code representation of the point within the track route (ex. EP, EX, CP, IP, etc.).
    /// Example: /// Example: EP
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getPtTypeCode()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name that represents the point within the track route (ex. ENTRY POINT, EXIT POINT, CONTROL POINT, INITIAL POINT, etc.).
    /// Example: /// Example: ENTRY POINT
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPtTypeName()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of a waypoint which identifies the location of the point.
    /// Example: /// Example: KCHS
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getWaypointName()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating this is a Digital Aeronautical Flight Information File (DAFIF) point.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getDafifPt()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPtLat()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPtLon()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The magnetic declination/variation of the route point location from true north, in degrees. Positive values east of true north and negative values west of true north.
    /// Example: /// Example: 7.35
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMagDec()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The length of the course from the Navigational Aid (NAVAID) in nautical miles.
    /// Example: /// Example: 100.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNavaidLength()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Navigational Aid (NAVAID) identification code.
    /// Example: /// Example: HTO
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getNavaid()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The DoD Standard Country Code designator for the country where the route point resides. This field should be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: NL
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getCountryCode()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies an alternate country code if the data provider code is not part of an official NAVAID Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
    /// Example: /// Example: IZ
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getAltCountryCode()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The NAVAID type of this route point (ex. VOR, VORTAC, TACAN, etc.).
    /// Example: /// Example: VORTAC
    /// Constraints: Minimum length = 0, Maximum length = 12
    public function getNavaidType()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRoutePoints_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(13);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RoutePoints_Full
     */
    public static function createRoutePoints_Full(FlatBufferBuilder $builder, $ptSequenceId, $ptTypeCode, $ptTypeName, $waypointName, $dafifPt, $ptLat, $ptLon, $magDec, $navaidLength, $navaid, $countryCode, $altCountryCode, $navaidType)
    {
        $builder->startObject(13);
        self::addPtSequenceId($builder, $ptSequenceId);
        self::addPtTypeCode($builder, $ptTypeCode);
        self::addPtTypeName($builder, $ptTypeName);
        self::addWaypointName($builder, $waypointName);
        self::addDafifPt($builder, $dafifPt);
        self::addPtLat($builder, $ptLat);
        self::addPtLon($builder, $ptLon);
        self::addMagDec($builder, $magDec);
        self::addNavaidLength($builder, $navaidLength);
        self::addNavaid($builder, $navaid);
        self::addCountryCode($builder, $countryCode);
        self::addAltCountryCode($builder, $altCountryCode);
        self::addNavaidType($builder, $navaidType);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPtSequenceId(FlatBufferBuilder $builder, $ptSequenceId)
    {
        $builder->addIntX(0, $ptSequenceId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPtTypeCode(FlatBufferBuilder $builder, $ptTypeCode)
    {
        $builder->addOffsetX(1, $ptTypeCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPtTypeName(FlatBufferBuilder $builder, $ptTypeName)
    {
        $builder->addOffsetX(2, $ptTypeName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWaypointName(FlatBufferBuilder $builder, $waypointName)
    {
        $builder->addOffsetX(3, $waypointName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addDafifPt(FlatBufferBuilder $builder, $dafifPt)
    {
        $builder->addBoolX(4, $dafifPt, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPtLat(FlatBufferBuilder $builder, $ptLat)
    {
        $builder->addDoubleX(5, $ptLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPtLon(FlatBufferBuilder $builder, $ptLon)
    {
        $builder->addDoubleX(6, $ptLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMagDec(FlatBufferBuilder $builder, $magDec)
    {
        $builder->addDoubleX(7, $magDec, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNavaidLength(FlatBufferBuilder $builder, $navaidLength)
    {
        $builder->addDoubleX(8, $navaidLength, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNavaid(FlatBufferBuilder $builder, $navaid)
    {
        $builder->addOffsetX(9, $navaid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountryCode(FlatBufferBuilder $builder, $countryCode)
    {
        $builder->addOffsetX(10, $countryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltCountryCode(FlatBufferBuilder $builder, $altCountryCode)
    {
        $builder->addOffsetX(11, $altCountryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNavaidType(FlatBufferBuilder $builder, $navaidType)
    {
        $builder->addOffsetX(12, $navaidType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRoutePoints_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishRoutePoints_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ROUT");
    }
}
