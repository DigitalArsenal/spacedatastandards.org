<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Coefficients, using ‘shiftedChebyshev’ sub-field, to describe E, F1, and bottomside F2 profile shapes, or height uncertainty boundaries (upper and lower).
class IonoObservationProfileDensityShiftedChebyshevEntry_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return IonoObservationProfileDensityShiftedChebyshevEntry_Ingest
     */
    public static function getRootAsIonoObservationProfileDensityShiftedChebyshevEntry_Ingest(ByteBuffer $bb)
    {
        $obj = new IonoObservationProfileDensityShiftedChebyshevEntry_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function IonoObservationProfileDensityShiftedChebyshevEntry_IngestIdentifier()
    {
        return "IONO";
    }

    public static function IonoObservationProfileDensityShiftedChebyshevEntry_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::IonoObservationProfileDensityShiftedChebyshevEntry_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return IonoObservationProfileDensityShiftedChebyshevEntry_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The ionospheric plasma layer.
    /// Example: /// Example: F2
    /// Constraints: No constraints specified.
    public function getLayer()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Start frequency of the layer, in MHz.
    /// Example: /// Example: 0.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFstart()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Stop frequency of the layer, in MHz.
    /// Example: /// Example: 1.39
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFstop()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peak height of the layer, in kilometers.
    /// Example: /// Example: 110.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPeakheight()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Height at which density is half of the peak Nm, in kilometers.
    /// Example: /// Example: 210.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZhalfNm()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Number of coefficients in the expansion.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getN()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Array of coefficients.
    /// Example: /// Example: [-11.2, -10.536, 3.357, -0.888, 0.155]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCoeffs($j)
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCoeffsLength()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Best fit error.
    /// Example: /// Example: 0.02
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getError()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startIonoObservationProfileDensityShiftedChebyshevEntry_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return IonoObservationProfileDensityShiftedChebyshevEntry_Ingest
     */
    public static function createIonoObservationProfileDensityShiftedChebyshevEntry_Ingest(FlatBufferBuilder $builder, $layer, $fstart, $fstop, $peakheight, $zhalfNm, $n, $coeffs, $error)
    {
        $builder->startObject(8);
        self::addLayer($builder, $layer);
        self::addFstart($builder, $fstart);
        self::addFstop($builder, $fstop);
        self::addPeakheight($builder, $peakheight);
        self::addZhalfNm($builder, $zhalfNm);
        self::addN($builder, $n);
        self::addCoeffs($builder, $coeffs);
        self::addError($builder, $error);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLayer(FlatBufferBuilder $builder, $layer)
    {
        $builder->addOffsetX(0, $layer, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFstart(FlatBufferBuilder $builder, $fstart)
    {
        $builder->addDoubleX(1, $fstart, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFstop(FlatBufferBuilder $builder, $fstop)
    {
        $builder->addDoubleX(2, $fstop, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPeakheight(FlatBufferBuilder $builder, $peakheight)
    {
        $builder->addDoubleX(3, $peakheight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZhalfNm(FlatBufferBuilder $builder, $zhalfNm)
    {
        $builder->addDoubleX(4, $zhalfNm, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addN(FlatBufferBuilder $builder, $n)
    {
        $builder->addIntX(5, $n, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCoeffs(FlatBufferBuilder $builder, $coeffs)
    {
        $builder->addOffsetX(6, $coeffs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCoeffsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCoeffsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addError(FlatBufferBuilder $builder, $error)
    {
        $builder->addDoubleX(7, $error, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endIonoObservationProfileDensityShiftedChebyshevEntry_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishIonoObservationProfileDensityShiftedChebyshevEntry_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "IONO");
    }
}
