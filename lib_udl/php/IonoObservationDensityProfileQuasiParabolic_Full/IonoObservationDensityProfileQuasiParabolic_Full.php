<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Coefficients to describe profile shape as quasi-parabolic segments.
class IonoObservationDensityProfileQuasiParabolic_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return IonoObservationDensityProfileQuasiParabolic_Full
     */
    public static function getRootAsIonoObservationDensityProfileQuasiParabolic_Full(ByteBuffer $bb)
    {
        $obj = new IonoObservationDensityProfileQuasiParabolic_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function IonoObservationDensityProfileQuasiParabolic_FullIdentifier()
    {
        return "IONO";
    }

    public static function IonoObservationDensityProfileQuasiParabolic_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::IonoObservationDensityProfileQuasiParabolic_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return IonoObservationDensityProfileQuasiParabolic_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// General description of the quasi-parabolic computation algorithm.
    /// Example: /// Example: Array of the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C
    /// Constraints: No constraints specified.
    public function getDescription()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Value of the Earth's radius, in kilometers, used for computations.
    /// Example: /// Example: 6370.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEarthRadius()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Array of quasi-parabolic segments. Each segment is the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C”. Usually 3 groups for E, F1, and F2 layers, but additional segments may be used to improve accuracy.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getQuasiParabolicSegments($j)
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getQuasiParabolicSegmentsLength()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startIonoObservationDensityProfileQuasiParabolic_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(3);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return IonoObservationDensityProfileQuasiParabolic_Full
     */
    public static function createIonoObservationDensityProfileQuasiParabolic_Full(FlatBufferBuilder $builder, $description, $earthRadius, $quasiParabolicSegments)
    {
        $builder->startObject(3);
        self::addDescription($builder, $description);
        self::addEarthRadius($builder, $earthRadius);
        self::addQuasiParabolicSegments($builder, $quasiParabolicSegments);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(0, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEarthRadius(FlatBufferBuilder $builder, $earthRadius)
    {
        $builder->addDoubleX(1, $earthRadius, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addQuasiParabolicSegments(FlatBufferBuilder $builder, $quasiParabolicSegments)
    {
        $builder->addOffsetX(2, $quasiParabolicSegments, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createQuasiParabolicSegmentsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startQuasiParabolicSegmentsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endIonoObservationDensityProfileQuasiParabolic_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishIonoObservationDensityProfileQuasiParabolic_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "IONO");
    }
}
