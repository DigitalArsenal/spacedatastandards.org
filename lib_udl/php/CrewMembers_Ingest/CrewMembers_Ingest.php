<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Schema for Crew Member data.
class CrewMembers_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return CrewMembers_Ingest
     */
    public static function getRootAsCrewMembers_Ingest(ByteBuffer $bb)
    {
        $obj = new CrewMembers_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function CrewMembers_IngestIdentifier()
    {
        return "CREW";
    }

    public static function CrewMembers_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::CrewMembers_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return CrewMembers_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The last name of the crew member.
    /// Example: /// Example: Smith
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getLastName()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The first name of the crew member.
    /// Example: /// Example: Freddie
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getFirstName()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The middle initial of the crew member.
    /// Example: /// Example: G
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getMiddleInitial()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the crew member assigned by the originating source.
    /// Example: /// Example: 12345678abc
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMemberId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating this crew member is a civilian or non-military person.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getCivilian()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating this person is the aircraft commander.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getCommander()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Last four digits of the crew member's social security number.
    /// Example: /// Example: 1234
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getLast4SSN()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The crew member's 10-digit DoD ID number.
    /// Example: /// Example: 0123456789
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getDodID()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The duty position of the crew member.
    /// Example: /// Example: IP
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getDutyPosition()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The crew position of the crew member.
    /// Example: /// Example: EP A
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCrewPosition()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Amplifying details about the crew member type (e.g. RAVEN, FCC, COMCAM, AIRCREW, MEP, OTHER, etc.).
    /// Example: /// Example: AIRCREW
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMemberType()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The military branch assignment of the crew member.
    /// Example: /// Example: Air Force
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getBranch()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The rank of the crew member.
    /// Example: /// Example: Capt
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getRank()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The wing the crew member serves.
    /// Example: /// Example: 60AMW
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getWing()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The squadron the crew member serves.
    /// Example: /// Example: 21AS
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getSquadron()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Remarks concerning the crew member.
    /// Example: /// Example: Crew member remark
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getMemberRemarks()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Mattermost username of this crew member.
    /// Example: /// Example: fgsmith
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUsername()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startCrewMembers_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(17);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return CrewMembers_Ingest
     */
    public static function createCrewMembers_Ingest(FlatBufferBuilder $builder, $lastName, $firstName, $middleInitial, $memberId, $civilian, $commander, $last4SSN, $dodID, $dutyPosition, $crewPosition, $memberType, $branch, $rank, $wing, $squadron, $memberRemarks, $username)
    {
        $builder->startObject(17);
        self::addLastName($builder, $lastName);
        self::addFirstName($builder, $firstName);
        self::addMiddleInitial($builder, $middleInitial);
        self::addMemberId($builder, $memberId);
        self::addCivilian($builder, $civilian);
        self::addCommander($builder, $commander);
        self::addLast4SSN($builder, $last4SSN);
        self::addDodID($builder, $dodID);
        self::addDutyPosition($builder, $dutyPosition);
        self::addCrewPosition($builder, $crewPosition);
        self::addMemberType($builder, $memberType);
        self::addBranch($builder, $branch);
        self::addRank($builder, $rank);
        self::addWing($builder, $wing);
        self::addSquadron($builder, $squadron);
        self::addMemberRemarks($builder, $memberRemarks);
        self::addUsername($builder, $username);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastName(FlatBufferBuilder $builder, $lastName)
    {
        $builder->addOffsetX(0, $lastName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFirstName(FlatBufferBuilder $builder, $firstName)
    {
        $builder->addOffsetX(1, $firstName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMiddleInitial(FlatBufferBuilder $builder, $middleInitial)
    {
        $builder->addOffsetX(2, $middleInitial, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMemberId(FlatBufferBuilder $builder, $memberId)
    {
        $builder->addOffsetX(3, $memberId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addCivilian(FlatBufferBuilder $builder, $civilian)
    {
        $builder->addBoolX(4, $civilian, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addCommander(FlatBufferBuilder $builder, $commander)
    {
        $builder->addBoolX(5, $commander, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLast4SSN(FlatBufferBuilder $builder, $last4SSN)
    {
        $builder->addOffsetX(6, $last4SSN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDodID(FlatBufferBuilder $builder, $dodID)
    {
        $builder->addOffsetX(7, $dodID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDutyPosition(FlatBufferBuilder $builder, $dutyPosition)
    {
        $builder->addOffsetX(8, $dutyPosition, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCrewPosition(FlatBufferBuilder $builder, $crewPosition)
    {
        $builder->addOffsetX(9, $crewPosition, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMemberType(FlatBufferBuilder $builder, $memberType)
    {
        $builder->addOffsetX(10, $memberType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBranch(FlatBufferBuilder $builder, $branch)
    {
        $builder->addOffsetX(11, $branch, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRank(FlatBufferBuilder $builder, $rank)
    {
        $builder->addOffsetX(12, $rank, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWing(FlatBufferBuilder $builder, $wing)
    {
        $builder->addOffsetX(13, $wing, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSquadron(FlatBufferBuilder $builder, $squadron)
    {
        $builder->addOffsetX(14, $squadron, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMemberRemarks(FlatBufferBuilder $builder, $memberRemarks)
    {
        $builder->addOffsetX(15, $memberRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUsername(FlatBufferBuilder $builder, $username)
    {
        $builder->addOffsetX(16, $username, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endCrewMembers_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishCrewMembers_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "CREW");
    }
}
