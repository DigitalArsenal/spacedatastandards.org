<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Individual taskings to complete the mission.
class ISRCollectionTaskings_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return ISRCollectionTaskings_Abridged
     */
    public static function getRootAsISRCollectionTaskings_Abridged(ByteBuffer $bb)
    {
        $obj = new ISRCollectionTaskings_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function ISRCollectionTaskings_AbridgedIdentifier()
    {
        return "ISRC";
    }

    public static function ISRCollectionTaskings_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ISRCollectionTaskings_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return ISRCollectionTaskings_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Tasking Unique Identifier.
    /// Example: /// Example: ISRCOLLECTIONTASKINGS-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of tasking.
    /// Example: /// Example: Deliberate
    /// Constraints: Minimum length = 1, Maximum length = 16
    /**
     * @return sbyte
     */
    public function getType()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \ISRCollectionTaskings_Abridged_type_Enum::DELIBERATE;
    }

    /// Type of collection tasked.
    /// Example: /// Example: Simultaneous
    /// Constraints: Minimum length = 1, Maximum length = 16
    /**
     * @return sbyte
     */
    public function getCollectionType()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \ISRCollectionTaskings_Abridged_collectionType_Enum::SIMULTANEOUS;
    }

    /// Human readable definition of this taskings Area Of Responsibility.
    /// Example: /// Example: Kandahar
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTaskingAOR()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Eight line.
    /// Example: /// Example: No example provided.
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getEightLine()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Primary type of intelligence to be collected during the mission.
    /// Example: /// Example: Sig
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTaskingPrimaryIntelDiscipline()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Sub category of primary intelligence to be collected.
    /// Example: /// Example: FMV
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTaskingPrimarySubCategory()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of tasking intelligence to be collected second.
    /// Example: /// Example: Intelligence_2
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTaskingSecondaryIntelDiscipline()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mission sub category for secondary intelligence discipline to be collected.
    /// Example: /// Example: Convoy
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTaskingSecondarySubCategory()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// What is the primary objective(Role) of this task.
    /// Example: /// Example: Provide Targeting of Lead Vehicle
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTaskingRole()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Tasking operation name.
    /// Example: /// Example: OP-HONEY-BADGER
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTaskingOperation()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Tasking Priority (1-n).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTaskingPriority()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Military Base to transmit the dissemination of this data.
    /// Example: /// Example: ENVOYS
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTaskingSupportedUnit()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Tasking emphasis.
    /// Example: /// Example: EMPHASIS
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTaskingEmphasis()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time of retasking, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-19T01:01:15.001Z
    /// Constraints: No constraints specified.
    public function getTaskingRetaskTime()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTaskingStartPointLat()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTaskingStartPointLong()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Tasking geographical collection area.
    /// Example: /// Example: AREA
    /// Constraints: No constraints specified.
    public function getTaskingCollectionArea()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Joint Operations Area.
    /// Example: /// Example: AREA
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTaskingJoa()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A synchronization matrix is used to organize the logistics synchronization process during a mission.
    /// Example: /// Example: MATRIX
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTaskingSyncMatrixBin()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Country code of the tasking.  A Country may represent countries, multi-national consortiums, and international organizations.
    /// Example: /// Example: CODE
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getTaskingCountry()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Region of the tasking.
    /// Example: /// Example: REGION
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTaskingRegion()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Subregion of the tasking.
    /// Example: /// Example: SUBREGION
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTaskingSubRegion()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Value of the Sensitive Reconnaissance Operations Track.
    /// Example: /// Example: SRO
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getSroTrack()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Free text field for the user to specify special instructions needed for this collection.
    /// Example: /// Example: TEXT
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getSpecialComGuidance()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getCollectionPeriods()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Tasking desired collection requirements.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTaskingCollectionRequirements($j)
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTaskingCollectionRequirementsLength()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startISRCollectionTaskings_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(27);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return ISRCollectionTaskings_Abridged
     */
    public static function createISRCollectionTaskings_Abridged(FlatBufferBuilder $builder, $id, $type, $collectionType, $taskingAOR, $eightLine, $taskingPrimaryIntelDiscipline, $taskingPrimarySubCategory, $taskingSecondaryIntelDiscipline, $taskingSecondarySubCategory, $taskingRole, $taskingOperation, $taskingPriority, $taskingSupportedUnit, $taskingEmphasis, $taskingRetaskTime, $taskingStartPointLat, $taskingStartPointLong, $taskingCollectionArea, $taskingJoa, $taskingSyncMatrixBin, $taskingCountry, $taskingRegion, $taskingSubRegion, $sroTrack, $specialComGuidance, $collectionPeriods, $taskingCollectionRequirements)
    {
        $builder->startObject(27);
        self::addId($builder, $id);
        self::addType($builder, $type);
        self::addCollectionType($builder, $collectionType);
        self::addTaskingAOR($builder, $taskingAOR);
        self::addEightLine($builder, $eightLine);
        self::addTaskingPrimaryIntelDiscipline($builder, $taskingPrimaryIntelDiscipline);
        self::addTaskingPrimarySubCategory($builder, $taskingPrimarySubCategory);
        self::addTaskingSecondaryIntelDiscipline($builder, $taskingSecondaryIntelDiscipline);
        self::addTaskingSecondarySubCategory($builder, $taskingSecondarySubCategory);
        self::addTaskingRole($builder, $taskingRole);
        self::addTaskingOperation($builder, $taskingOperation);
        self::addTaskingPriority($builder, $taskingPriority);
        self::addTaskingSupportedUnit($builder, $taskingSupportedUnit);
        self::addTaskingEmphasis($builder, $taskingEmphasis);
        self::addTaskingRetaskTime($builder, $taskingRetaskTime);
        self::addTaskingStartPointLat($builder, $taskingStartPointLat);
        self::addTaskingStartPointLong($builder, $taskingStartPointLong);
        self::addTaskingCollectionArea($builder, $taskingCollectionArea);
        self::addTaskingJoa($builder, $taskingJoa);
        self::addTaskingSyncMatrixBin($builder, $taskingSyncMatrixBin);
        self::addTaskingCountry($builder, $taskingCountry);
        self::addTaskingRegion($builder, $taskingRegion);
        self::addTaskingSubRegion($builder, $taskingSubRegion);
        self::addSroTrack($builder, $sroTrack);
        self::addSpecialComGuidance($builder, $specialComGuidance);
        self::addCollectionPeriods($builder, $collectionPeriods);
        self::addTaskingCollectionRequirements($builder, $taskingCollectionRequirements);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addSbyteX(1, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addCollectionType(FlatBufferBuilder $builder, $collectionType)
    {
        $builder->addSbyteX(2, $collectionType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskingAOR(FlatBufferBuilder $builder, $taskingAOR)
    {
        $builder->addOffsetX(3, $taskingAOR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEightLine(FlatBufferBuilder $builder, $eightLine)
    {
        $builder->addOffsetX(4, $eightLine, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskingPrimaryIntelDiscipline(FlatBufferBuilder $builder, $taskingPrimaryIntelDiscipline)
    {
        $builder->addOffsetX(5, $taskingPrimaryIntelDiscipline, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskingPrimarySubCategory(FlatBufferBuilder $builder, $taskingPrimarySubCategory)
    {
        $builder->addOffsetX(6, $taskingPrimarySubCategory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskingSecondaryIntelDiscipline(FlatBufferBuilder $builder, $taskingSecondaryIntelDiscipline)
    {
        $builder->addOffsetX(7, $taskingSecondaryIntelDiscipline, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskingSecondarySubCategory(FlatBufferBuilder $builder, $taskingSecondarySubCategory)
    {
        $builder->addOffsetX(8, $taskingSecondarySubCategory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskingRole(FlatBufferBuilder $builder, $taskingRole)
    {
        $builder->addOffsetX(9, $taskingRole, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskingOperation(FlatBufferBuilder $builder, $taskingOperation)
    {
        $builder->addOffsetX(10, $taskingOperation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTaskingPriority(FlatBufferBuilder $builder, $taskingPriority)
    {
        $builder->addDoubleX(11, $taskingPriority, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskingSupportedUnit(FlatBufferBuilder $builder, $taskingSupportedUnit)
    {
        $builder->addOffsetX(12, $taskingSupportedUnit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskingEmphasis(FlatBufferBuilder $builder, $taskingEmphasis)
    {
        $builder->addOffsetX(13, $taskingEmphasis, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskingRetaskTime(FlatBufferBuilder $builder, $taskingRetaskTime)
    {
        $builder->addOffsetX(14, $taskingRetaskTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTaskingStartPointLat(FlatBufferBuilder $builder, $taskingStartPointLat)
    {
        $builder->addDoubleX(15, $taskingStartPointLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTaskingStartPointLong(FlatBufferBuilder $builder, $taskingStartPointLong)
    {
        $builder->addDoubleX(16, $taskingStartPointLong, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskingCollectionArea(FlatBufferBuilder $builder, $taskingCollectionArea)
    {
        $builder->addOffsetX(17, $taskingCollectionArea, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskingJoa(FlatBufferBuilder $builder, $taskingJoa)
    {
        $builder->addOffsetX(18, $taskingJoa, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskingSyncMatrixBin(FlatBufferBuilder $builder, $taskingSyncMatrixBin)
    {
        $builder->addOffsetX(19, $taskingSyncMatrixBin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskingCountry(FlatBufferBuilder $builder, $taskingCountry)
    {
        $builder->addOffsetX(20, $taskingCountry, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskingRegion(FlatBufferBuilder $builder, $taskingRegion)
    {
        $builder->addOffsetX(21, $taskingRegion, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskingSubRegion(FlatBufferBuilder $builder, $taskingSubRegion)
    {
        $builder->addOffsetX(22, $taskingSubRegion, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSroTrack(FlatBufferBuilder $builder, $sroTrack)
    {
        $builder->addOffsetX(23, $sroTrack, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSpecialComGuidance(FlatBufferBuilder $builder, $specialComGuidance)
    {
        $builder->addOffsetX(24, $specialComGuidance, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCollectionPeriods(FlatBufferBuilder $builder, $collectionPeriods)
    {
        $builder->addOffsetX(25, $collectionPeriods, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTaskingCollectionRequirements(FlatBufferBuilder $builder, $taskingCollectionRequirements)
    {
        $builder->addOffsetX(26, $taskingCollectionRequirements, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTaskingCollectionRequirementsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTaskingCollectionRequirementsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endISRCollectionTaskings_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishISRCollectionTaskings_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ISRC");
    }
}
