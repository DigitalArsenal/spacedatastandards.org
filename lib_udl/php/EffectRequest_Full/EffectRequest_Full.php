<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// A request for various effects on a target.
class EffectRequest_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EffectRequest_Full
     */
    public static function getRootAsEffectRequest_Full(ByteBuffer $bb)
    {
        $obj = new EffectRequest_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EffectRequest_FullIdentifier()
    {
        return "EFFE";
    }

    public static function EffectRequest_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EffectRequest_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EffectRequest_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: EFFECTREQUEST-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The extenal system identifier of this request. A human readable unique id.
    /// Example: /// Example: EXTERNALREQUEST-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getExternalRequestId()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).  The effects included in this list are connected by implied AND.
    /// Example: /// Example: ['COVER', 'DECEIVE']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getEffectList($j)
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEffectListLength()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).
    /// Example: /// Example: CREATED
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getState()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specific descriptive instantiation of the effect, e.g., playbook to be used.
    /// Example: /// Example: Example Notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getContext()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time the effect should start, in ISO8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getStartTime()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time the effect should end, in ISO8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getEndTime()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.):
    /// BETWEEN:&nbsp;Produce effect any time between the given start and end times, equal penalty for being early or late
    /// IMMEDIATE:&nbsp;Start as soon as possible, earlier is always better
    /// NOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for being earlier, no reward for being later
    /// NOLATERTHAN:&nbsp;Produce effect no later than the given startTime. Large penalty for being later, no reward for being even earlier as long as the effect starts by the given time.
    /// Example: /// Example: NoLaterThan
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getDeadlineType()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source type of the targetId identifier (POI, TRACK).
    /// Example: /// Example: POI
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getTargetSrcType()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The record ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
    /// Example: /// Example: TARGETSRC-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTargetSrcId()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The priority (LOW, MEDIUM, HIGH) of this request.
    /// Example: /// Example: LOW
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getPriority()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type or class of the preference model used to evaluate this offer.
    /// Example: /// Example: Preference model
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getModelClass()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).  See the associated 'metricWeights' array for the weighting values, positionally corresponding to these types.  The 'metricTypes' and 'metricWeights' arrays must match in size.
    /// Example: /// Example: ['COST', 'RISK']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getMetricTypes($j)
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMetricTypesLength()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the weights for the metric in the final evaluation score. Normalized (0 to 1).  See the associated 'metricTypes' array for the metric classes, positionally corresponding to these values.  The 'metricTypes' and 'metricWeights' arrays must match in size.
    /// Example: /// Example: [0.5, 0.6]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getMetricWeights($j)
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMetricWeightsLength()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \EffectRequest_Full_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEffectRequest_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(21);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EffectRequest_Full
     */
    public static function createEffectRequest_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $externalRequestId, $effectList, $state, $context, $startTime, $endTime, $deadlineType, $targetSrcType, $targetSrcId, $priority, $modelClass, $metricTypes, $metricWeights, $createdAt, $createdBy, $source, $origin, $dataMode, $origNetwork)
    {
        $builder->startObject(21);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addExternalRequestId($builder, $externalRequestId);
        self::addEffectList($builder, $effectList);
        self::addState($builder, $state);
        self::addContext($builder, $context);
        self::addStartTime($builder, $startTime);
        self::addEndTime($builder, $endTime);
        self::addDeadlineType($builder, $deadlineType);
        self::addTargetSrcType($builder, $targetSrcType);
        self::addTargetSrcId($builder, $targetSrcId);
        self::addPriority($builder, $priority);
        self::addModelClass($builder, $modelClass);
        self::addMetricTypes($builder, $metricTypes);
        self::addMetricWeights($builder, $metricWeights);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalRequestId(FlatBufferBuilder $builder, $externalRequestId)
    {
        $builder->addOffsetX(2, $externalRequestId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEffectList(FlatBufferBuilder $builder, $effectList)
    {
        $builder->addOffsetX(3, $effectList, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEffectListVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEffectListVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addState(FlatBufferBuilder $builder, $state)
    {
        $builder->addOffsetX(4, $state, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addContext(FlatBufferBuilder $builder, $context)
    {
        $builder->addOffsetX(5, $context, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStartTime(FlatBufferBuilder $builder, $startTime)
    {
        $builder->addOffsetX(6, $startTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEndTime(FlatBufferBuilder $builder, $endTime)
    {
        $builder->addOffsetX(7, $endTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDeadlineType(FlatBufferBuilder $builder, $deadlineType)
    {
        $builder->addOffsetX(8, $deadlineType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTargetSrcType(FlatBufferBuilder $builder, $targetSrcType)
    {
        $builder->addOffsetX(9, $targetSrcType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTargetSrcId(FlatBufferBuilder $builder, $targetSrcId)
    {
        $builder->addOffsetX(10, $targetSrcId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPriority(FlatBufferBuilder $builder, $priority)
    {
        $builder->addOffsetX(11, $priority, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addModelClass(FlatBufferBuilder $builder, $modelClass)
    {
        $builder->addOffsetX(12, $modelClass, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMetricTypes(FlatBufferBuilder $builder, $metricTypes)
    {
        $builder->addOffsetX(13, $metricTypes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMetricTypesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMetricTypesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMetricWeights(FlatBufferBuilder $builder, $metricWeights)
    {
        $builder->addOffsetX(14, $metricWeights, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMetricWeightsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMetricWeightsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(15, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(16, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(17, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(18, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(19, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(20, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEffectRequest_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEffectRequest_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "EFFE");
    }
}
