<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection of waypoints associated with this flight plan.
class FlightPlanWaypoints_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return FlightPlanWaypoints_Full
     */
    public static function getRootAsFlightPlanWaypoints_Full(ByteBuffer $bb)
    {
        $obj = new FlightPlanWaypoints_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function FlightPlanWaypoints_FullIdentifier()
    {
        return "FLIG";
    }

    public static function FlightPlanWaypoints_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::FlightPlanWaypoints_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return FlightPlanWaypoints_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Points are designated by type as either a comment point or a waypoint. A comment point conveys important information about the point for pilots but is not entered into a flight management system. A waypoint is a point that is entered into a flight management system and/or filed with Air Traffic Control.
    /// Example: /// Example: COMMENT
    /// Constraints: Minimum length = 1, Maximum length = 16
    public function getType()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the point. The name of a comment point identifies important information about that point, e.g. Top of Climb. The name of a waypoint identifies the location of that point.
    /// Example: /// Example: KCHS
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getWaypointName()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The waypoint number on the route. Comment points do not get a waypoint number.
    /// Example: /// Example: 20
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getWaypointNum()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The flight path flown for this leg.
    /// Example: /// Example: W15
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getAirway()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Point identifying an air refueling track/anchor or fixed track.
    /// Example: /// Example: ARIP
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getArpt()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLat()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLon()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The ID of the air refueling track/anchor or fixed track.
    /// Example: /// Example: AR202
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getArId()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Navigational Aid (NAVAID) identification code.
    /// Example: /// Example: HTO
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getNavaid()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
    /// Example: /// Example: 83X
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getTacanChannel()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in megahertz.
    /// Example: /// Example: 113.6
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVorFreq()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
    /// Example: /// Example: EXTREME
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getTurbCat()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The icing intensity classification for this flight (LIGHT, MODERATE, etc).
    /// Example: /// Example: MODERATE
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getIceCat()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The thunderstorm intensity classification for this flight (LIGHT, MODERATE, etc).
    /// Example: /// Example: MODERATE
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getThunderCat()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Altitude of a level, point, or object measured in feet above mean sea level.
    /// Example: /// Example: 27000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAlt()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average temperature deviation from standard day profile for this leg in degrees Celsius.
    /// Example: /// Example: 12.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTempDev()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The fuel degrade percentage used for this leg.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLegFuelDegrade()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The average Mach speed for this leg.
    /// Example: /// Example: 0.74
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLegMach()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The mission index value for this leg. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
    /// Example: /// Example: 65
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLegMsnIndex()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The percent degrade due to drag for this aircraft for this leg.
    /// Example: /// Example: 1.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLegDragIndex()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The average calibrated airspeed (CAS) for this leg in knots.
    /// Example: /// Example: 200.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgCalAirspeed()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The average true airspeed (TAS) for this leg in knots.
    /// Example: /// Example: 210.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgTrueAirspeed()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The average ground speed for this leg in knots.
    /// Example: /// Example: 300.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgGroundSpeed()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The primary UHF radio frequency used for the air refueling track or anchor in megahertz.
    /// Example: /// Example: 357.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPriFreq()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The wind direction at this specific point in degrees from true north.
    /// Example: /// Example: 165.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPointWindDir()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The wind velocity at this specific point in knots.
    /// Example: /// Example: 14.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPointWindSpeed()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The average wind direction for this leg in degrees from true north.
    /// Example: /// Example: 165.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgWindDir()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The average wind speed for this leg in knots.
    /// Example: /// Example: 14.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgWindSpeed()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The wind factor for this leg in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
    /// Example: /// Example: -32.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLegWindFac()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The average drift angle for this leg in degrees from true north.
    /// Example: /// Example: -3.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgDriftAng()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The secondary UHF radio frequency used for the air refueling track or anchor in megahertz.
    /// Example: /// Example: 357.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSecFreq()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The magnetic course at leg midpoint in degrees from true north.
    /// Example: /// Example: 338.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMagCourse()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The true course at leg midpoint in degrees from true north.
    /// Example: /// Example: 328.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTrueCourse()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The magnetic heading at leg midpoint in degrees from true north.
    /// Example: /// Example: 212.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMagHeading()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The air-to-air Tactical Air Navigation (TACAN) channels used by the receiver/tanker during air refueling.
    /// Example: /// Example: 31/94
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getAaTacanChannel()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The zone/leg distance flown in nautical miles.
    /// Example: /// Example: 212.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZoneDistance()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The total distance flown to this waypoint calculated from point of departure in nautical miles.
    /// Example: /// Example: 688.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTotalFlownDistance()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The total distance remaining from this waypoint to the point of arrival in nautical miles.
    /// Example: /// Example: 1288.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTotalRemDistance()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The time to fly this zone/leg in minutes.
    /// Example: /// Example: 36.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZoneTime()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The total time accumulated from takeoff to this waypoint expressed as HH:MM.
    /// Example: /// Example: 08:45
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getTotalTime()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The total time remaining from this waypoint to the point of arrival expressed as HH:MM.
    /// Example: /// Example: 01:43
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getTotalTimeRem()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The amount of fuel used on this zone/leg in pounds.
    /// Example: /// Example: 1120.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZoneFuel()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The total fuel used to this waypoint from point of departure in pounds.
    /// Example: /// Example: 70431.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTotalUsedFuel()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The total fuel remaining at this waypoint in pounds.
    /// Example: /// Example: 30453.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTotalRemFuel()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The amount of fuel onloaded or offloaded at this waypoint in pounds (negative value for offload).
    /// Example: /// Example: -30400.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getExchangedFuel()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The air distance of this leg in nautical miles.
    /// Example: /// Example: 321.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAirDistance()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The total air distance to this waypoint in nautical miles.
    /// Example: /// Example: 3251.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTotalAirDistance()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The total weight of the aircraft at this waypoint in pounds.
    /// Example: /// Example: 207123.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTotalWeight()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2023-09-09T01:00:00.123Z
    /// Constraints: No constraints specified.
    public function getEta()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2023-09-09T01:00:00.123Z
    /// Constraints: No constraints specified.
    public function getAta()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The leg fuel flow in pounds per hour.
    /// Example: /// Example: 17654.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFuelFlow()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The planned alternate leg based on user-defined constraints, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: /// Example: KCHS
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getLegAlternate()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The magnetic variation for this leg in degrees.
    /// Example: /// Example: -13.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMagVar()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The day low level altitude in feet above sea level for the leg ending at this waypoint.
    /// Example: /// Example: 1500.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDayLowAlt()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The night low level altitude in feet above sea level for the leg ending at this waypoint.
    /// Example: /// Example: 2300.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNightLowAlt()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The night vision goggle low level altitude in feet above sea level for the leg ending at this waypoint.
    /// Example: /// Example: 2450.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNvgLowAlt()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startFlightPlanWaypoints_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(56);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return FlightPlanWaypoints_Full
     */
    public static function createFlightPlanWaypoints_Full(FlatBufferBuilder $builder, $type, $waypointName, $waypointNum, $airway, $arpt, $lat, $lon, $arId, $navaid, $tacanChannel, $vorFreq, $turbCat, $iceCat, $thunderCat, $alt, $tempDev, $legFuelDegrade, $legMach, $legMsnIndex, $legDragIndex, $avgCalAirspeed, $avgTrueAirspeed, $avgGroundSpeed, $priFreq, $pointWindDir, $pointWindSpeed, $avgWindDir, $avgWindSpeed, $legWindFac, $avgDriftAng, $secFreq, $magCourse, $trueCourse, $magHeading, $aaTacanChannel, $zoneDistance, $totalFlownDistance, $totalRemDistance, $zoneTime, $totalTime, $totalTimeRem, $zoneFuel, $totalUsedFuel, $totalRemFuel, $exchangedFuel, $airDistance, $totalAirDistance, $totalWeight, $eta, $ata, $fuelFlow, $legAlternate, $magVar, $dayLowAlt, $nightLowAlt, $nvgLowAlt)
    {
        $builder->startObject(56);
        self::addType($builder, $type);
        self::addWaypointName($builder, $waypointName);
        self::addWaypointNum($builder, $waypointNum);
        self::addAirway($builder, $airway);
        self::addArpt($builder, $arpt);
        self::addLat($builder, $lat);
        self::addLon($builder, $lon);
        self::addArId($builder, $arId);
        self::addNavaid($builder, $navaid);
        self::addTacanChannel($builder, $tacanChannel);
        self::addVorFreq($builder, $vorFreq);
        self::addTurbCat($builder, $turbCat);
        self::addIceCat($builder, $iceCat);
        self::addThunderCat($builder, $thunderCat);
        self::addAlt($builder, $alt);
        self::addTempDev($builder, $tempDev);
        self::addLegFuelDegrade($builder, $legFuelDegrade);
        self::addLegMach($builder, $legMach);
        self::addLegMsnIndex($builder, $legMsnIndex);
        self::addLegDragIndex($builder, $legDragIndex);
        self::addAvgCalAirspeed($builder, $avgCalAirspeed);
        self::addAvgTrueAirspeed($builder, $avgTrueAirspeed);
        self::addAvgGroundSpeed($builder, $avgGroundSpeed);
        self::addPriFreq($builder, $priFreq);
        self::addPointWindDir($builder, $pointWindDir);
        self::addPointWindSpeed($builder, $pointWindSpeed);
        self::addAvgWindDir($builder, $avgWindDir);
        self::addAvgWindSpeed($builder, $avgWindSpeed);
        self::addLegWindFac($builder, $legWindFac);
        self::addAvgDriftAng($builder, $avgDriftAng);
        self::addSecFreq($builder, $secFreq);
        self::addMagCourse($builder, $magCourse);
        self::addTrueCourse($builder, $trueCourse);
        self::addMagHeading($builder, $magHeading);
        self::addAaTacanChannel($builder, $aaTacanChannel);
        self::addZoneDistance($builder, $zoneDistance);
        self::addTotalFlownDistance($builder, $totalFlownDistance);
        self::addTotalRemDistance($builder, $totalRemDistance);
        self::addZoneTime($builder, $zoneTime);
        self::addTotalTime($builder, $totalTime);
        self::addTotalTimeRem($builder, $totalTimeRem);
        self::addZoneFuel($builder, $zoneFuel);
        self::addTotalUsedFuel($builder, $totalUsedFuel);
        self::addTotalRemFuel($builder, $totalRemFuel);
        self::addExchangedFuel($builder, $exchangedFuel);
        self::addAirDistance($builder, $airDistance);
        self::addTotalAirDistance($builder, $totalAirDistance);
        self::addTotalWeight($builder, $totalWeight);
        self::addEta($builder, $eta);
        self::addAta($builder, $ata);
        self::addFuelFlow($builder, $fuelFlow);
        self::addLegAlternate($builder, $legAlternate);
        self::addMagVar($builder, $magVar);
        self::addDayLowAlt($builder, $dayLowAlt);
        self::addNightLowAlt($builder, $nightLowAlt);
        self::addNvgLowAlt($builder, $nvgLowAlt);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(0, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWaypointName(FlatBufferBuilder $builder, $waypointName)
    {
        $builder->addOffsetX(1, $waypointName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addWaypointNum(FlatBufferBuilder $builder, $waypointNum)
    {
        $builder->addIntX(2, $waypointNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAirway(FlatBufferBuilder $builder, $airway)
    {
        $builder->addOffsetX(3, $airway, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArpt(FlatBufferBuilder $builder, $arpt)
    {
        $builder->addOffsetX(4, $arpt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLat(FlatBufferBuilder $builder, $lat)
    {
        $builder->addDoubleX(5, $lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLon(FlatBufferBuilder $builder, $lon)
    {
        $builder->addDoubleX(6, $lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArId(FlatBufferBuilder $builder, $arId)
    {
        $builder->addOffsetX(7, $arId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNavaid(FlatBufferBuilder $builder, $navaid)
    {
        $builder->addOffsetX(8, $navaid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTacanChannel(FlatBufferBuilder $builder, $tacanChannel)
    {
        $builder->addOffsetX(9, $tacanChannel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVorFreq(FlatBufferBuilder $builder, $vorFreq)
    {
        $builder->addDoubleX(10, $vorFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTurbCat(FlatBufferBuilder $builder, $turbCat)
    {
        $builder->addOffsetX(11, $turbCat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIceCat(FlatBufferBuilder $builder, $iceCat)
    {
        $builder->addOffsetX(12, $iceCat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addThunderCat(FlatBufferBuilder $builder, $thunderCat)
    {
        $builder->addOffsetX(13, $thunderCat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAlt(FlatBufferBuilder $builder, $alt)
    {
        $builder->addDoubleX(14, $alt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTempDev(FlatBufferBuilder $builder, $tempDev)
    {
        $builder->addDoubleX(15, $tempDev, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLegFuelDegrade(FlatBufferBuilder $builder, $legFuelDegrade)
    {
        $builder->addDoubleX(16, $legFuelDegrade, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLegMach(FlatBufferBuilder $builder, $legMach)
    {
        $builder->addDoubleX(17, $legMach, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLegMsnIndex(FlatBufferBuilder $builder, $legMsnIndex)
    {
        $builder->addDoubleX(18, $legMsnIndex, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLegDragIndex(FlatBufferBuilder $builder, $legDragIndex)
    {
        $builder->addDoubleX(19, $legDragIndex, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgCalAirspeed(FlatBufferBuilder $builder, $avgCalAirspeed)
    {
        $builder->addDoubleX(20, $avgCalAirspeed, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgTrueAirspeed(FlatBufferBuilder $builder, $avgTrueAirspeed)
    {
        $builder->addDoubleX(21, $avgTrueAirspeed, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgGroundSpeed(FlatBufferBuilder $builder, $avgGroundSpeed)
    {
        $builder->addDoubleX(22, $avgGroundSpeed, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPriFreq(FlatBufferBuilder $builder, $priFreq)
    {
        $builder->addDoubleX(23, $priFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPointWindDir(FlatBufferBuilder $builder, $pointWindDir)
    {
        $builder->addDoubleX(24, $pointWindDir, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPointWindSpeed(FlatBufferBuilder $builder, $pointWindSpeed)
    {
        $builder->addDoubleX(25, $pointWindSpeed, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgWindDir(FlatBufferBuilder $builder, $avgWindDir)
    {
        $builder->addDoubleX(26, $avgWindDir, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgWindSpeed(FlatBufferBuilder $builder, $avgWindSpeed)
    {
        $builder->addDoubleX(27, $avgWindSpeed, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLegWindFac(FlatBufferBuilder $builder, $legWindFac)
    {
        $builder->addDoubleX(28, $legWindFac, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgDriftAng(FlatBufferBuilder $builder, $avgDriftAng)
    {
        $builder->addDoubleX(29, $avgDriftAng, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSecFreq(FlatBufferBuilder $builder, $secFreq)
    {
        $builder->addDoubleX(30, $secFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMagCourse(FlatBufferBuilder $builder, $magCourse)
    {
        $builder->addDoubleX(31, $magCourse, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTrueCourse(FlatBufferBuilder $builder, $trueCourse)
    {
        $builder->addDoubleX(32, $trueCourse, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMagHeading(FlatBufferBuilder $builder, $magHeading)
    {
        $builder->addDoubleX(33, $magHeading, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAaTacanChannel(FlatBufferBuilder $builder, $aaTacanChannel)
    {
        $builder->addOffsetX(34, $aaTacanChannel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZoneDistance(FlatBufferBuilder $builder, $zoneDistance)
    {
        $builder->addDoubleX(35, $zoneDistance, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTotalFlownDistance(FlatBufferBuilder $builder, $totalFlownDistance)
    {
        $builder->addDoubleX(36, $totalFlownDistance, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTotalRemDistance(FlatBufferBuilder $builder, $totalRemDistance)
    {
        $builder->addDoubleX(37, $totalRemDistance, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZoneTime(FlatBufferBuilder $builder, $zoneTime)
    {
        $builder->addDoubleX(38, $zoneTime, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTotalTime(FlatBufferBuilder $builder, $totalTime)
    {
        $builder->addOffsetX(39, $totalTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTotalTimeRem(FlatBufferBuilder $builder, $totalTimeRem)
    {
        $builder->addOffsetX(40, $totalTimeRem, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZoneFuel(FlatBufferBuilder $builder, $zoneFuel)
    {
        $builder->addDoubleX(41, $zoneFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTotalUsedFuel(FlatBufferBuilder $builder, $totalUsedFuel)
    {
        $builder->addDoubleX(42, $totalUsedFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTotalRemFuel(FlatBufferBuilder $builder, $totalRemFuel)
    {
        $builder->addDoubleX(43, $totalRemFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addExchangedFuel(FlatBufferBuilder $builder, $exchangedFuel)
    {
        $builder->addDoubleX(44, $exchangedFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAirDistance(FlatBufferBuilder $builder, $airDistance)
    {
        $builder->addDoubleX(45, $airDistance, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTotalAirDistance(FlatBufferBuilder $builder, $totalAirDistance)
    {
        $builder->addDoubleX(46, $totalAirDistance, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTotalWeight(FlatBufferBuilder $builder, $totalWeight)
    {
        $builder->addDoubleX(47, $totalWeight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEta(FlatBufferBuilder $builder, $eta)
    {
        $builder->addOffsetX(48, $eta, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAta(FlatBufferBuilder $builder, $ata)
    {
        $builder->addOffsetX(49, $ata, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFuelFlow(FlatBufferBuilder $builder, $fuelFlow)
    {
        $builder->addDoubleX(50, $fuelFlow, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLegAlternate(FlatBufferBuilder $builder, $legAlternate)
    {
        $builder->addOffsetX(51, $legAlternate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMagVar(FlatBufferBuilder $builder, $magVar)
    {
        $builder->addDoubleX(52, $magVar, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDayLowAlt(FlatBufferBuilder $builder, $dayLowAlt)
    {
        $builder->addDoubleX(53, $dayLowAlt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNightLowAlt(FlatBufferBuilder $builder, $nightLowAlt)
    {
        $builder->addDoubleX(54, $nightLowAlt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNvgLowAlt(FlatBufferBuilder $builder, $nvgLowAlt)
    {
        $builder->addDoubleX(55, $nvgLowAlt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endFlightPlanWaypoints_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishFlightPlanWaypoints_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "FLIG");
    }
}
