<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// A diplomatic clearance is an authorization for an aircraft to traverse or land within a specified country.
class DiplomaticClearance_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return DiplomaticClearance_Full
     */
    public static function getRootAsDiplomaticClearance_Full(ByteBuffer $bb)
    {
        $obj = new DiplomaticClearance_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function DiplomaticClearance_FullIdentifier()
    {
        return "DIPL";
    }

    public static function DiplomaticClearance_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::DiplomaticClearance_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return DiplomaticClearance_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: 25059135-4afc-45c2-b78b-d6e843dbd96d
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the Mission associated with this diplomatic clearance record.
    /// Example: /// Example: 0dba1363-2d09-49fa-a784-4bb4cbb1674a
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdMission()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional diplomatic clearance worksheet ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: 990ae849089e3d6cad69655324176bb6
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getExternalWorksheetId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
    /// Example: /// Example: G2-939911-AC
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getDipWorksheetName()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The First Departure Date (FDD) the mission is scheduled for departure, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getFirstDepDate()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Suspense date for the diplomatic clearance worksheet to be worked, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getDocDeadline()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve this clearance request.
    /// Example: /// Example: 1083034
    /// Constraints: Minimum length = 0, Maximum length = 40
    public function getApacsId()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Collection of diplomatic clearance details.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDiplomaticClearanceDetails($j)
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDiplomaticClearanceDetailsLength()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Collection of diplomatic clearance remarks.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDiplomaticClearanceRemarks($j)
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDiplomaticClearanceRemarksLength()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \DiplomaticClearance_Full_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startDiplomaticClearance_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(19);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return DiplomaticClearance_Full
     */
    public static function createDiplomaticClearance_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $idMission, $externalWorksheetId, $dipWorksheetName, $firstDepDate, $docDeadline, $apacsId, $diplomaticClearanceDetails, $diplomaticClearanceRemarks, $createdAt, $createdBy, $updatedAt, $updatedBy, $sourceDL, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(19);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdMission($builder, $idMission);
        self::addExternalWorksheetId($builder, $externalWorksheetId);
        self::addDipWorksheetName($builder, $dipWorksheetName);
        self::addFirstDepDate($builder, $firstDepDate);
        self::addDocDeadline($builder, $docDeadline);
        self::addApacsId($builder, $apacsId);
        self::addDiplomaticClearanceDetails($builder, $diplomaticClearanceDetails);
        self::addDiplomaticClearanceRemarks($builder, $diplomaticClearanceRemarks);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdMission(FlatBufferBuilder $builder, $idMission)
    {
        $builder->addOffsetX(2, $idMission, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalWorksheetId(FlatBufferBuilder $builder, $externalWorksheetId)
    {
        $builder->addOffsetX(3, $externalWorksheetId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDipWorksheetName(FlatBufferBuilder $builder, $dipWorksheetName)
    {
        $builder->addOffsetX(4, $dipWorksheetName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFirstDepDate(FlatBufferBuilder $builder, $firstDepDate)
    {
        $builder->addOffsetX(5, $firstDepDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDocDeadline(FlatBufferBuilder $builder, $docDeadline)
    {
        $builder->addOffsetX(6, $docDeadline, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addApacsId(FlatBufferBuilder $builder, $apacsId)
    {
        $builder->addOffsetX(7, $apacsId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDiplomaticClearanceDetails(FlatBufferBuilder $builder, $diplomaticClearanceDetails)
    {
        $builder->addOffsetX(8, $diplomaticClearanceDetails, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDiplomaticClearanceDetailsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDiplomaticClearanceDetailsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDiplomaticClearanceRemarks(FlatBufferBuilder $builder, $diplomaticClearanceRemarks)
    {
        $builder->addOffsetX(9, $diplomaticClearanceRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDiplomaticClearanceRemarksVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDiplomaticClearanceRemarksVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(10, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(11, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(12, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(13, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(14, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(15, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(16, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(17, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(18, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endDiplomaticClearance_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishDiplomaticClearance_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "DIPL");
    }
}
