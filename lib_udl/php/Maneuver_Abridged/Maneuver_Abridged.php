<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of on-orbit object maneuver information for detected, possible, and confirmed maneuvers.
class Maneuver_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Maneuver_Abridged
     */
    public static function getRootAsManeuver_Abridged(ByteBuffer $bb)
    {
        $obj = new Maneuver_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Maneuver_AbridgedIdentifier()
    {
        return "MANE";
    }

    public static function Maneuver_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Maneuver_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Maneuver_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: MANEUVER-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The time that the report or alert of this maneuver was generated, in ISO 8601 UTC format.
    /// Example: /// Example: 2023-11-16T04:15:00.0001Z
    /// Constraints: No constraints specified.
    public function getReportTime()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Maneuver event start time in ISO 8601 UTC with microsecond precision. For maneuvers without start and end times, the start time is considered to be the maneuver event time.
    /// Example: /// Example: 2023-11-16T01:05:16.835689Z
    /// Constraints: No constraints specified.
    public function getEventStartTime()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Maneuver event end time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2023-11-16T01:09:01.350012Z
    /// Constraints: No constraints specified.
    public function getEventEndTime()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The estimated total active burn time of a maneuver, in seconds. This includes the sum of all burns in numAccelPoints. Not to be confused with the total duration of the maneuver.
    /// Example: /// Example: 600.72
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTotalBurnTime()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maneuver orbit determination fit data end time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2023-11-16T03:55:51Z
    /// Constraints: No constraints specified.
    public function getOdFitEndTime()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Target maneuvering on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
    /// Example: /// Example: 12
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional ID of the sensor that detected this maneuver (for example, if detected by passive RF anomalies).
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating this maneuver was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getUct()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Uncertainty in the occurrence of this maneuver (0 - 1).
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getManeuverUnc()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional purpose of the maneuver if known (e.g. North-South Station Keeping, East-West Station Keeping, Longitude Shift, Unknown).
    /// Example: /// Example: North-South Station Keeping
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getCharacterization()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Uncertainty in the characterization or purpose assessment of this maneuver (0 - 1).
    /// Example: /// Example: 0.15
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCharacterizationUnc()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional source-provided identifier for this maneuver event. In the case where multiple maneuver records are submitted for the same event, this field can be used to tie them together to the same event.
    /// Example: /// Example: EVENT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getEventId()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier provided by source to indicate the target on-orbit object performing this maneuver. This may be an internal identifier and not necessarily a valid satellite number/ID.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigObjectId()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigSensorId()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Status of this maneuver (CANCELLED, PLANNED, POSSIBLE, REDACTED, VERIFIED).
    /// CANCELLED:  A previously planned maneuver whose execution was cancelled.
    /// PLANNED:  A maneuver planned to take place at the eventStartTime.
    /// POSSIBLE:  A possible maneuver detected by observation of the spacecraft or by evaluation of the spacecraft orbit.
    /// REDACTED:  A redaction of a reported possible maneuver that has been determined to have not taken place after further observation/evaluation.
    /// VERIFIED:  A maneuver whose execution has been verified, either by the owner/operator or observation/evaluation.
    /// Example: /// Example: POSSIBLE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getStatus()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors at the maneuver event time.
    /// Example: /// Example: 0.715998327
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeltaPos()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
    /// Example: /// Example: -0.022172844
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeltaPosU()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
    /// Example: /// Example: -0.033700154
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeltaPosV()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
    /// Example: /// Example: -0.714861014
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeltaPosW()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors at the maneuver event time.
    /// Example: /// Example: 0.000631505
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeltaVel()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
    /// Example: /// Example: 3.50165629389647e-05
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeltaVelU()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
    /// Example: /// Example: 0.000544413
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeltaVelV()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
    /// Example: /// Example: -0.000318099
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeltaVelW()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Difference in mass before and after the maneuver, in kg.
    /// Example: /// Example: 0.15
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeltaMass()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional identifier of the element set for the pre-maneuver orbit.
    /// Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPreEventIdElset()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getPreEventElset()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier of the state vector for the pre-maneuver trajectory of the spacecraft.
    /// Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPreEventIdStateVector()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getPreEventStateVector()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Pre-event X component of position in ECI space, in km.
    /// Example: /// Example: 3584.432545
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPrePosX()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event Y component of position in ECI space, in km.
    /// Example: /// Example: 42028.43245
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPrePosY()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event Z component of position in ECI space, in km.
    /// Example: /// Example: -1.97765
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPrePosZ()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event X component of velocity in ECI space, in km/sec.
    /// Example: /// Example: -2.543266
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPreVelX()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event Y component of velocity in ECI space, in km/sec.
    /// Example: /// Example: 0.24876
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPreVelY()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event Z component of velocity in ECI space, in km/sec.
    /// Example: /// Example: 0.0067352
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPreVelZ()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
    /// Example: /// Example: 4.51e-07
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPreRadiationPressCoeff()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
    /// Example: /// Example: 0.000437116
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPreBallisticCoeff()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event spacecraft apogee (measured from Earth center), in kilometers.
    /// Example: /// Example: 35802
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPreApogee()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event spacecraft perigee (measured from Earth center), in kilometers.
    /// Example: /// Example: 35786.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPrePerigee()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event spacecraft orbital inclination, in degrees. 0-180.
    /// Example: /// Example: 0.0336
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPreInclination()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event spacecraft eccentricity.
    /// Example: /// Example: 0.00017
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPreEccentricity()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event spacecraft orbital period, in minutes.
    /// Example: /// Example: 1436.12
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPrePeriod()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
    /// Example: /// Example: 98.3336
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPreRAAN()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event spacecraft orbital Semi-Major Axis (SMA), in kilometers.
    /// Example: /// Example: 42165.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPreSMA()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -93.12
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPreGeoLongitude()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
    /// Example: /// Example: -0.0125
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPreDriftRate()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
    /// Example: /// Example: 0.215
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPreSigmaU()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
    /// Example: /// Example: 1.97
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPreSigmaV()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pre-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
    /// Example: /// Example: 0.208
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPreSigmaW()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional identifier of the element set for the post-maneuver orbit.
    /// Example: /// Example: 225adf4c-8606-40a8-929e-63e22cffe220
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPostEventIdElset()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getPostEventElset()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier of the state vector for the post-maneuver trajectory of the spacecraft.
    /// Example: /// Example: d83a23f8-1496-485a-bd88-ec5808c73299
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPostEventIdStateVector()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getPostEventStateVector()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Post-event X component of position in ECI space, in km.
    /// Example: /// Example: 3589.351957
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostPosX()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event Y component of position in ECI space, in km.
    /// Example: /// Example: 42017.26823
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostPosY()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event Z component of position in ECI space, in km.
    /// Example: /// Example: -1.27161796
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostPosZ()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event X component of velocity in ECI space, in km/sec.
    /// Example: /// Example: -3.063152826
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostVelX()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event Y component of velocity in ECI space, in km/sec.
    /// Example: /// Example: 0.261586769
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostVelY()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event Z component of velocity in ECI space, in km/sec.
    /// Example: /// Example: 0.006842148
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostVelZ()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
    /// Example: /// Example: 4.51e-07
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostRadiationPressCoeff()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
    /// Example: /// Example: 0.000433209
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostBallisticCoeff()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event spacecraft apogee (measured from Earth center), in kilometers.
    /// Example: /// Example: 35800.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostApogee()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event spacecraft perigee (measured from Earth center), in kilometers.
    /// Example: /// Example: 35787.9
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostPerigee()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event spacecraft orbital inclination, in degrees. 0-180.
    /// Example: /// Example: 0.0327
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostInclination()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event spacecraft eccentricity.
    /// Example: /// Example: 0.000164
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostEccentricity()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event spacecraft orbital period, in minutes.
    /// Example: /// Example: 1436.01
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostPeriod()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
    /// Example: /// Example: 98.3335
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostRAAN()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event spacecraft Semi-Major Axis (SMA), in kilometers.
    /// Example: /// Example: 42164.87
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostSMA()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -93.15
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostGeoLongitude()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
    /// Example: /// Example: -0.0125
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostDriftRate()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
    /// Example: /// Example: 12.285
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostSigmaU()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
    /// Example: /// Example: 71.339
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostSigmaV()
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Post-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
    /// Example: /// Example: 12.77
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostSigmaW()
    {
        $o = $this->__offset(152);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional maneuver cross-track/radial/in-track covariance array, in meter and second based units, in the following order: CR_R, CI_R, CI_I, CC_R, CC_I, CC_C, CT_R, CT_I, CT_C, CT_T.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCov($j)
    {
        $o = $this->__offset(154);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCovLength()
    {
        $o = $this->__offset(154);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    ///  Estimated mass of the object following the maneuver, in kg.
    /// Example: /// Example: 1844.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostMass()
    {
        $o = $this->__offset(156);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Estimated area of the object following the maneuver, in meters squared.
    /// Example: /// Example: 35.77
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPostArea()
    {
        $o = $this->__offset(158);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Number of observations used to generate the maneuver data.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumObs()
    {
        $o = $this->__offset(160);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Description and notes of the maneuver.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getDescription()
    {
        $o = $this->__offset(162);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: Example descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getDescriptor()
    {
        $o = $this->__offset(164);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the state model used to generate the maneuver data.
    /// Example: /// Example: Example name
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getStateModel()
    {
        $o = $this->__offset(166);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Version of the state model used to generate the maneuver data.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getStateModelVersion()
    {
        $o = $this->__offset(168);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The total number of estimated acceleration points during the maneuver.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumAccelPoints()
    {
        $o = $this->__offset(170);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Array of elapsed times, in seconds from maneuver start time, at which each acceleration point is estimated. Number of elements must match the numAccelPoints.
    /// Example: /// Example: [10.25, 50.56, 150.78]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getMnvrAccelTimes($j)
    {
        $o = $this->__offset(172);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMnvrAccelTimesLength()
    {
        $o = $this->__offset(172);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of estimated acceleration values, in meters per second squared. Number of elements must match the numAccelPoints.
    /// Example: /// Example: [0.05, 0.1, 0.05]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getMnvrAccels($j)
    {
        $o = $this->__offset(174);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMnvrAccelsLength()
    {
        $o = $this->__offset(174);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the 1-sigma uncertainties in estimated accelerations, in meters per second squared. Number of elements must match the numAccelPoints.
    /// Example: /// Example: [0.0005, 0.001, 0.0005]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getMnvrAccelUncs($j)
    {
        $o = $this->__offset(176);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMnvrAccelUncsLength()
    {
        $o = $this->__offset(176);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(178);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(180);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(182);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Maneuver_Abridged_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(184);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(186);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional algorithm used to produce this record.
    /// Example: /// Example: Example algorithm
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getAlgorithm()
    {
        $o = $this->__offset(188);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTransactionId()
    {
        $o = $this->__offset(190);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(192);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startManeuver_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(95);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Maneuver_Abridged
     */
    public static function createManeuver_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $satNo, $reportTime, $eventStartTime, $eventEndTime, $totalBurnTime, $odFitEndTime, $idOnOrbit, $idSensor, $uct, $maneuverUnc, $characterization, $characterizationUnc, $eventId, $origObjectId, $origSensorId, $status, $deltaPos, $deltaPosU, $deltaPosV, $deltaPosW, $deltaVel, $deltaVelU, $deltaVelV, $deltaVelW, $deltaMass, $preEventIdElset, $preEventElset, $preEventIdStateVector, $preEventStateVector, $prePosX, $prePosY, $prePosZ, $preVelX, $preVelY, $preVelZ, $preRadiationPressCoeff, $preBallisticCoeff, $preApogee, $prePerigee, $preInclination, $preEccentricity, $prePeriod, $preRAAN, $preSMA, $preGeoLongitude, $preDriftRate, $preSigmaU, $preSigmaV, $preSigmaW, $postEventIdElset, $postEventElset, $postEventIdStateVector, $postEventStateVector, $postPosX, $postPosY, $postPosZ, $postVelX, $postVelY, $postVelZ, $postRadiationPressCoeff, $postBallisticCoeff, $postApogee, $postPerigee, $postInclination, $postEccentricity, $postPeriod, $postRAAN, $postSMA, $postGeoLongitude, $postDriftRate, $postSigmaU, $postSigmaV, $postSigmaW, $cov, $postMass, $postArea, $numObs, $description, $descriptor, $stateModel, $stateModelVersion, $numAccelPoints, $mnvrAccelTimes, $mnvrAccels, $mnvrAccelUncs, $source, $origin, $dataMode, $createdAt, $createdBy, $algorithm, $transactionId, $origNetwork)
    {
        $builder->startObject(95);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addSatNo($builder, $satNo);
        self::addReportTime($builder, $reportTime);
        self::addEventStartTime($builder, $eventStartTime);
        self::addEventEndTime($builder, $eventEndTime);
        self::addTotalBurnTime($builder, $totalBurnTime);
        self::addOdFitEndTime($builder, $odFitEndTime);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addIdSensor($builder, $idSensor);
        self::addUct($builder, $uct);
        self::addManeuverUnc($builder, $maneuverUnc);
        self::addCharacterization($builder, $characterization);
        self::addCharacterizationUnc($builder, $characterizationUnc);
        self::addEventId($builder, $eventId);
        self::addOrigObjectId($builder, $origObjectId);
        self::addOrigSensorId($builder, $origSensorId);
        self::addStatus($builder, $status);
        self::addDeltaPos($builder, $deltaPos);
        self::addDeltaPosU($builder, $deltaPosU);
        self::addDeltaPosV($builder, $deltaPosV);
        self::addDeltaPosW($builder, $deltaPosW);
        self::addDeltaVel($builder, $deltaVel);
        self::addDeltaVelU($builder, $deltaVelU);
        self::addDeltaVelV($builder, $deltaVelV);
        self::addDeltaVelW($builder, $deltaVelW);
        self::addDeltaMass($builder, $deltaMass);
        self::addPreEventIdElset($builder, $preEventIdElset);
        self::addPreEventElset($builder, $preEventElset);
        self::addPreEventIdStateVector($builder, $preEventIdStateVector);
        self::addPreEventStateVector($builder, $preEventStateVector);
        self::addPrePosX($builder, $prePosX);
        self::addPrePosY($builder, $prePosY);
        self::addPrePosZ($builder, $prePosZ);
        self::addPreVelX($builder, $preVelX);
        self::addPreVelY($builder, $preVelY);
        self::addPreVelZ($builder, $preVelZ);
        self::addPreRadiationPressCoeff($builder, $preRadiationPressCoeff);
        self::addPreBallisticCoeff($builder, $preBallisticCoeff);
        self::addPreApogee($builder, $preApogee);
        self::addPrePerigee($builder, $prePerigee);
        self::addPreInclination($builder, $preInclination);
        self::addPreEccentricity($builder, $preEccentricity);
        self::addPrePeriod($builder, $prePeriod);
        self::addPreRAAN($builder, $preRAAN);
        self::addPreSMA($builder, $preSMA);
        self::addPreGeoLongitude($builder, $preGeoLongitude);
        self::addPreDriftRate($builder, $preDriftRate);
        self::addPreSigmaU($builder, $preSigmaU);
        self::addPreSigmaV($builder, $preSigmaV);
        self::addPreSigmaW($builder, $preSigmaW);
        self::addPostEventIdElset($builder, $postEventIdElset);
        self::addPostEventElset($builder, $postEventElset);
        self::addPostEventIdStateVector($builder, $postEventIdStateVector);
        self::addPostEventStateVector($builder, $postEventStateVector);
        self::addPostPosX($builder, $postPosX);
        self::addPostPosY($builder, $postPosY);
        self::addPostPosZ($builder, $postPosZ);
        self::addPostVelX($builder, $postVelX);
        self::addPostVelY($builder, $postVelY);
        self::addPostVelZ($builder, $postVelZ);
        self::addPostRadiationPressCoeff($builder, $postRadiationPressCoeff);
        self::addPostBallisticCoeff($builder, $postBallisticCoeff);
        self::addPostApogee($builder, $postApogee);
        self::addPostPerigee($builder, $postPerigee);
        self::addPostInclination($builder, $postInclination);
        self::addPostEccentricity($builder, $postEccentricity);
        self::addPostPeriod($builder, $postPeriod);
        self::addPostRAAN($builder, $postRAAN);
        self::addPostSMA($builder, $postSMA);
        self::addPostGeoLongitude($builder, $postGeoLongitude);
        self::addPostDriftRate($builder, $postDriftRate);
        self::addPostSigmaU($builder, $postSigmaU);
        self::addPostSigmaV($builder, $postSigmaV);
        self::addPostSigmaW($builder, $postSigmaW);
        self::addCov($builder, $cov);
        self::addPostMass($builder, $postMass);
        self::addPostArea($builder, $postArea);
        self::addNumObs($builder, $numObs);
        self::addDescription($builder, $description);
        self::addDescriptor($builder, $descriptor);
        self::addStateModel($builder, $stateModel);
        self::addStateModelVersion($builder, $stateModelVersion);
        self::addNumAccelPoints($builder, $numAccelPoints);
        self::addMnvrAccelTimes($builder, $mnvrAccelTimes);
        self::addMnvrAccels($builder, $mnvrAccels);
        self::addMnvrAccelUncs($builder, $mnvrAccelUncs);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addAlgorithm($builder, $algorithm);
        self::addTransactionId($builder, $transactionId);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(2, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReportTime(FlatBufferBuilder $builder, $reportTime)
    {
        $builder->addOffsetX(3, $reportTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEventStartTime(FlatBufferBuilder $builder, $eventStartTime)
    {
        $builder->addOffsetX(4, $eventStartTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEventEndTime(FlatBufferBuilder $builder, $eventEndTime)
    {
        $builder->addOffsetX(5, $eventEndTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTotalBurnTime(FlatBufferBuilder $builder, $totalBurnTime)
    {
        $builder->addDoubleX(6, $totalBurnTime, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOdFitEndTime(FlatBufferBuilder $builder, $odFitEndTime)
    {
        $builder->addOffsetX(7, $odFitEndTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(8, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(9, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addUct(FlatBufferBuilder $builder, $uct)
    {
        $builder->addBoolX(10, $uct, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addManeuverUnc(FlatBufferBuilder $builder, $maneuverUnc)
    {
        $builder->addDoubleX(11, $maneuverUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCharacterization(FlatBufferBuilder $builder, $characterization)
    {
        $builder->addOffsetX(12, $characterization, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCharacterizationUnc(FlatBufferBuilder $builder, $characterizationUnc)
    {
        $builder->addDoubleX(13, $characterizationUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEventId(FlatBufferBuilder $builder, $eventId)
    {
        $builder->addOffsetX(14, $eventId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(15, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSensorId(FlatBufferBuilder $builder, $origSensorId)
    {
        $builder->addOffsetX(16, $origSensorId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStatus(FlatBufferBuilder $builder, $status)
    {
        $builder->addOffsetX(17, $status, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeltaPos(FlatBufferBuilder $builder, $deltaPos)
    {
        $builder->addDoubleX(18, $deltaPos, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeltaPosU(FlatBufferBuilder $builder, $deltaPosU)
    {
        $builder->addDoubleX(19, $deltaPosU, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeltaPosV(FlatBufferBuilder $builder, $deltaPosV)
    {
        $builder->addDoubleX(20, $deltaPosV, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeltaPosW(FlatBufferBuilder $builder, $deltaPosW)
    {
        $builder->addDoubleX(21, $deltaPosW, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeltaVel(FlatBufferBuilder $builder, $deltaVel)
    {
        $builder->addDoubleX(22, $deltaVel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeltaVelU(FlatBufferBuilder $builder, $deltaVelU)
    {
        $builder->addDoubleX(23, $deltaVelU, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeltaVelV(FlatBufferBuilder $builder, $deltaVelV)
    {
        $builder->addDoubleX(24, $deltaVelV, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeltaVelW(FlatBufferBuilder $builder, $deltaVelW)
    {
        $builder->addDoubleX(25, $deltaVelW, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeltaMass(FlatBufferBuilder $builder, $deltaMass)
    {
        $builder->addDoubleX(26, $deltaMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPreEventIdElset(FlatBufferBuilder $builder, $preEventIdElset)
    {
        $builder->addOffsetX(27, $preEventIdElset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPreEventElset(FlatBufferBuilder $builder, $preEventElset)
    {
        $builder->addOffsetX(28, $preEventElset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPreEventIdStateVector(FlatBufferBuilder $builder, $preEventIdStateVector)
    {
        $builder->addOffsetX(29, $preEventIdStateVector, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPreEventStateVector(FlatBufferBuilder $builder, $preEventStateVector)
    {
        $builder->addOffsetX(30, $preEventStateVector, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPrePosX(FlatBufferBuilder $builder, $prePosX)
    {
        $builder->addDoubleX(31, $prePosX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPrePosY(FlatBufferBuilder $builder, $prePosY)
    {
        $builder->addDoubleX(32, $prePosY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPrePosZ(FlatBufferBuilder $builder, $prePosZ)
    {
        $builder->addDoubleX(33, $prePosZ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPreVelX(FlatBufferBuilder $builder, $preVelX)
    {
        $builder->addDoubleX(34, $preVelX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPreVelY(FlatBufferBuilder $builder, $preVelY)
    {
        $builder->addDoubleX(35, $preVelY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPreVelZ(FlatBufferBuilder $builder, $preVelZ)
    {
        $builder->addDoubleX(36, $preVelZ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPreRadiationPressCoeff(FlatBufferBuilder $builder, $preRadiationPressCoeff)
    {
        $builder->addDoubleX(37, $preRadiationPressCoeff, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPreBallisticCoeff(FlatBufferBuilder $builder, $preBallisticCoeff)
    {
        $builder->addDoubleX(38, $preBallisticCoeff, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPreApogee(FlatBufferBuilder $builder, $preApogee)
    {
        $builder->addDoubleX(39, $preApogee, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPrePerigee(FlatBufferBuilder $builder, $prePerigee)
    {
        $builder->addDoubleX(40, $prePerigee, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPreInclination(FlatBufferBuilder $builder, $preInclination)
    {
        $builder->addDoubleX(41, $preInclination, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPreEccentricity(FlatBufferBuilder $builder, $preEccentricity)
    {
        $builder->addDoubleX(42, $preEccentricity, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPrePeriod(FlatBufferBuilder $builder, $prePeriod)
    {
        $builder->addDoubleX(43, $prePeriod, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPreRAAN(FlatBufferBuilder $builder, $preRAAN)
    {
        $builder->addDoubleX(44, $preRAAN, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPreSMA(FlatBufferBuilder $builder, $preSMA)
    {
        $builder->addDoubleX(45, $preSMA, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPreGeoLongitude(FlatBufferBuilder $builder, $preGeoLongitude)
    {
        $builder->addDoubleX(46, $preGeoLongitude, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPreDriftRate(FlatBufferBuilder $builder, $preDriftRate)
    {
        $builder->addDoubleX(47, $preDriftRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPreSigmaU(FlatBufferBuilder $builder, $preSigmaU)
    {
        $builder->addDoubleX(48, $preSigmaU, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPreSigmaV(FlatBufferBuilder $builder, $preSigmaV)
    {
        $builder->addDoubleX(49, $preSigmaV, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPreSigmaW(FlatBufferBuilder $builder, $preSigmaW)
    {
        $builder->addDoubleX(50, $preSigmaW, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPostEventIdElset(FlatBufferBuilder $builder, $postEventIdElset)
    {
        $builder->addOffsetX(51, $postEventIdElset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPostEventElset(FlatBufferBuilder $builder, $postEventElset)
    {
        $builder->addOffsetX(52, $postEventElset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPostEventIdStateVector(FlatBufferBuilder $builder, $postEventIdStateVector)
    {
        $builder->addOffsetX(53, $postEventIdStateVector, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPostEventStateVector(FlatBufferBuilder $builder, $postEventStateVector)
    {
        $builder->addOffsetX(54, $postEventStateVector, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostPosX(FlatBufferBuilder $builder, $postPosX)
    {
        $builder->addDoubleX(55, $postPosX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostPosY(FlatBufferBuilder $builder, $postPosY)
    {
        $builder->addDoubleX(56, $postPosY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostPosZ(FlatBufferBuilder $builder, $postPosZ)
    {
        $builder->addDoubleX(57, $postPosZ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostVelX(FlatBufferBuilder $builder, $postVelX)
    {
        $builder->addDoubleX(58, $postVelX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostVelY(FlatBufferBuilder $builder, $postVelY)
    {
        $builder->addDoubleX(59, $postVelY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostVelZ(FlatBufferBuilder $builder, $postVelZ)
    {
        $builder->addDoubleX(60, $postVelZ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostRadiationPressCoeff(FlatBufferBuilder $builder, $postRadiationPressCoeff)
    {
        $builder->addDoubleX(61, $postRadiationPressCoeff, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostBallisticCoeff(FlatBufferBuilder $builder, $postBallisticCoeff)
    {
        $builder->addDoubleX(62, $postBallisticCoeff, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostApogee(FlatBufferBuilder $builder, $postApogee)
    {
        $builder->addDoubleX(63, $postApogee, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostPerigee(FlatBufferBuilder $builder, $postPerigee)
    {
        $builder->addDoubleX(64, $postPerigee, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostInclination(FlatBufferBuilder $builder, $postInclination)
    {
        $builder->addDoubleX(65, $postInclination, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostEccentricity(FlatBufferBuilder $builder, $postEccentricity)
    {
        $builder->addDoubleX(66, $postEccentricity, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostPeriod(FlatBufferBuilder $builder, $postPeriod)
    {
        $builder->addDoubleX(67, $postPeriod, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostRAAN(FlatBufferBuilder $builder, $postRAAN)
    {
        $builder->addDoubleX(68, $postRAAN, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostSMA(FlatBufferBuilder $builder, $postSMA)
    {
        $builder->addDoubleX(69, $postSMA, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostGeoLongitude(FlatBufferBuilder $builder, $postGeoLongitude)
    {
        $builder->addDoubleX(70, $postGeoLongitude, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostDriftRate(FlatBufferBuilder $builder, $postDriftRate)
    {
        $builder->addDoubleX(71, $postDriftRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostSigmaU(FlatBufferBuilder $builder, $postSigmaU)
    {
        $builder->addDoubleX(72, $postSigmaU, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostSigmaV(FlatBufferBuilder $builder, $postSigmaV)
    {
        $builder->addDoubleX(73, $postSigmaV, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostSigmaW(FlatBufferBuilder $builder, $postSigmaW)
    {
        $builder->addDoubleX(74, $postSigmaW, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCov(FlatBufferBuilder $builder, $cov)
    {
        $builder->addOffsetX(75, $cov, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCovVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCovVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostMass(FlatBufferBuilder $builder, $postMass)
    {
        $builder->addDoubleX(76, $postMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPostArea(FlatBufferBuilder $builder, $postArea)
    {
        $builder->addDoubleX(77, $postArea, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumObs(FlatBufferBuilder $builder, $numObs)
    {
        $builder->addIntX(78, $numObs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(79, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescriptor(FlatBufferBuilder $builder, $descriptor)
    {
        $builder->addOffsetX(80, $descriptor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStateModel(FlatBufferBuilder $builder, $stateModel)
    {
        $builder->addOffsetX(81, $stateModel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addStateModelVersion(FlatBufferBuilder $builder, $stateModelVersion)
    {
        $builder->addDoubleX(82, $stateModelVersion, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumAccelPoints(FlatBufferBuilder $builder, $numAccelPoints)
    {
        $builder->addIntX(83, $numAccelPoints, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMnvrAccelTimes(FlatBufferBuilder $builder, $mnvrAccelTimes)
    {
        $builder->addOffsetX(84, $mnvrAccelTimes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMnvrAccelTimesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMnvrAccelTimesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMnvrAccels(FlatBufferBuilder $builder, $mnvrAccels)
    {
        $builder->addOffsetX(85, $mnvrAccels, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMnvrAccelsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMnvrAccelsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMnvrAccelUncs(FlatBufferBuilder $builder, $mnvrAccelUncs)
    {
        $builder->addOffsetX(86, $mnvrAccelUncs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMnvrAccelUncsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMnvrAccelUncsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(87, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(88, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(89, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(90, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(91, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAlgorithm(FlatBufferBuilder $builder, $algorithm)
    {
        $builder->addOffsetX(92, $algorithm, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransactionId(FlatBufferBuilder $builder, $transactionId)
    {
        $builder->addOffsetX(93, $transactionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(94, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endManeuver_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishManeuver_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "MANE");
    }
}
