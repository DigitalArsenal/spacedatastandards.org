<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Surface information contains properties related to an airfield's runway, taxiway, and parking. The surface types and characteristics can dictate the airfield's capability of hosting a specific aircraft.
class Surface_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Surface_Abridged
     */
    public static function getRootAsSurface_Abridged(ByteBuffer $bb)
    {
        $obj = new Surface_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Surface_AbridgedIdentifier()
    {
        return "SURF";
    }

    public static function Surface_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Surface_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Surface_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The surface name or identifier.
    /// Example: /// Example: West lot
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getName()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The surface type of this record (e.g. RUNWAY, TAXIWAY, PARKING).
    /// Example: /// Example: PARKING
    /// Constraints: Minimum length = 1, Maximum length = 7
    public function getType()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The ID of the site where this surface is located.
    /// Example: /// Example: SITE-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSite()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Alternate site identifier provided by the source.
    /// Example: /// Example: ORIG-SITE-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAltSiteId()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating this is the primary runway.  Applicable for runway surface types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getPrimary()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The length of the surface type, in feet.  Applicable for runway and parking surface types.
    /// Example: /// Example: 1500
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getLengthFt()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The landing distance available for the runway, in feet.  Applicable for runway surface types only.
    /// Example: /// Example: 475
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getLdaFt()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The width of the surface type, in feet.
    /// Example: /// Example: 220
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getWidthFt()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The length of the surface type, in meters.  Applicable for runway and parking surface types.
    /// Example: /// Example: 457
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getLengthM()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The landing distance available for the runway, in meters.  Applicable for runway surface types only.
    /// Example: /// Example: 145
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getLdaM()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The width of the surface type, in meters.
    /// Example: /// Example: 67
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getWidthM()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The surface material (e.g. Asphalt, Concrete, Dirt).
    /// Example: /// Example: Concrete
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getMaterial()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The surface condition (e.g. GOOD, FAIR, POOR, SERIOUS, FAILED, CLOSED, UNKNOWN).
    /// Example: /// Example: GOOD
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getCondition()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Raw weight bearing capacity value or pavement strength.
    /// Example: /// Example: LCN 42
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getRawWBC()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Pavement classification number (PCN) and tire pressure code.
    /// Example: /// Example: 73RBWT
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getPcn()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Load classification number or pavement rating which ranks aircraft on a scale of 1 to 120.
    /// Example: /// Example: 50
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getLcn()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilopounds (kip). Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 143
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSWtKip()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 188
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTWtKip()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 195
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getStWtKip()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 414
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTtWtKip()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 416
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getDdWtKip()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 603
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSbttWtKip()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 870
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTdtWtkip()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 622
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTrtWtKip()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 833
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getDdtWtKip()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 636
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSWtKN()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 836
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTWtKN()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 867
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getStWtKN()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 1842
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTtWtKN()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 1850
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getDdWtKN()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 2682
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSbttWtKN()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 3870
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTdtWtKN()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 2767
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTrtWtKN()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 3705
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getDdtWtKN()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Flag indicating the surface has lighting.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLighting()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating the runway lighting is unknown. Applicable for runway surface types only.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLightsUNKN()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating the runway has approach lights. Applicable for runway surface types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLightsAPRCH()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating the runway has Visual Approach Slope Indicator (VASI) lights. Applicable for runway surface types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLightsVASI()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating the runway has Precision Approach Path Indicator (PAPI) lights. Applicable for runway surface types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLightsPAPI()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating the runway has Optical Landing System (OLS) lights. Applicable for runway surface types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLightsOLS()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating the runway has Runway End Identifier Lights (REIL). Applicable for runway surface types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLightsREIL()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating the runway has Touchdown Zone lights. Applicable for runway surface types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLightsTDZL()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating the runway has centerline lights. Applicable for runway surface types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLightsCL()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating the surface type has an obstacle. Applicable for taxiway and parking surface types.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getObstacle()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Surface_Abridged_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSurface_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(52);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Surface_Abridged
     */
    public static function createSurface_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $name, $type, $idSite, $altSiteId, $primary, $lengthFt, $ldaFt, $widthFt, $lengthM, $ldaM, $widthM, $material, $condition, $rawWBC, $pcn, $lcn, $sWtKip, $tWtKip, $stWtKip, $ttWtKip, $ddWtKip, $sbttWtKip, $tdtWtkip, $trtWtKip, $ddtWtKip, $sWtKN, $tWtKN, $stWtKN, $ttWtKN, $ddWtKN, $sbttWtKN, $tdtWtKN, $trtWtKN, $ddtWtKN, $lighting, $lightsUNKN, $lightsAPRCH, $lightsVASI, $lightsPAPI, $lightsOLS, $lightsREIL, $lightsTDZL, $lightsCL, $obstacle, $createdAt, $createdBy, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(52);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addName($builder, $name);
        self::addType($builder, $type);
        self::addIdSite($builder, $idSite);
        self::addAltSiteId($builder, $altSiteId);
        self::addPrimary($builder, $primary);
        self::addLengthFt($builder, $lengthFt);
        self::addLdaFt($builder, $ldaFt);
        self::addWidthFt($builder, $widthFt);
        self::addLengthM($builder, $lengthM);
        self::addLdaM($builder, $ldaM);
        self::addWidthM($builder, $widthM);
        self::addMaterial($builder, $material);
        self::addCondition($builder, $condition);
        self::addRawWBC($builder, $rawWBC);
        self::addPcn($builder, $pcn);
        self::addLcn($builder, $lcn);
        self::addSWtKip($builder, $sWtKip);
        self::addTWtKip($builder, $tWtKip);
        self::addStWtKip($builder, $stWtKip);
        self::addTtWtKip($builder, $ttWtKip);
        self::addDdWtKip($builder, $ddWtKip);
        self::addSbttWtKip($builder, $sbttWtKip);
        self::addTdtWtkip($builder, $tdtWtkip);
        self::addTrtWtKip($builder, $trtWtKip);
        self::addDdtWtKip($builder, $ddtWtKip);
        self::addSWtKN($builder, $sWtKN);
        self::addTWtKN($builder, $tWtKN);
        self::addStWtKN($builder, $stWtKN);
        self::addTtWtKN($builder, $ttWtKN);
        self::addDdWtKN($builder, $ddWtKN);
        self::addSbttWtKN($builder, $sbttWtKN);
        self::addTdtWtKN($builder, $tdtWtKN);
        self::addTrtWtKN($builder, $trtWtKN);
        self::addDdtWtKN($builder, $ddtWtKN);
        self::addLighting($builder, $lighting);
        self::addLightsUNKN($builder, $lightsUNKN);
        self::addLightsAPRCH($builder, $lightsAPRCH);
        self::addLightsVASI($builder, $lightsVASI);
        self::addLightsPAPI($builder, $lightsPAPI);
        self::addLightsOLS($builder, $lightsOLS);
        self::addLightsREIL($builder, $lightsREIL);
        self::addLightsTDZL($builder, $lightsTDZL);
        self::addLightsCL($builder, $lightsCL);
        self::addObstacle($builder, $obstacle);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(2, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(3, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSite(FlatBufferBuilder $builder, $idSite)
    {
        $builder->addOffsetX(4, $idSite, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltSiteId(FlatBufferBuilder $builder, $altSiteId)
    {
        $builder->addOffsetX(5, $altSiteId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addPrimary(FlatBufferBuilder $builder, $primary)
    {
        $builder->addBoolX(6, $primary, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addLengthFt(FlatBufferBuilder $builder, $lengthFt)
    {
        $builder->addIntX(7, $lengthFt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addLdaFt(FlatBufferBuilder $builder, $ldaFt)
    {
        $builder->addIntX(8, $ldaFt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addWidthFt(FlatBufferBuilder $builder, $widthFt)
    {
        $builder->addIntX(9, $widthFt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addLengthM(FlatBufferBuilder $builder, $lengthM)
    {
        $builder->addIntX(10, $lengthM, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addLdaM(FlatBufferBuilder $builder, $ldaM)
    {
        $builder->addIntX(11, $ldaM, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addWidthM(FlatBufferBuilder $builder, $widthM)
    {
        $builder->addIntX(12, $widthM, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMaterial(FlatBufferBuilder $builder, $material)
    {
        $builder->addOffsetX(13, $material, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCondition(FlatBufferBuilder $builder, $condition)
    {
        $builder->addOffsetX(14, $condition, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRawWBC(FlatBufferBuilder $builder, $rawWBC)
    {
        $builder->addOffsetX(15, $rawWBC, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPcn(FlatBufferBuilder $builder, $pcn)
    {
        $builder->addOffsetX(16, $pcn, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addLcn(FlatBufferBuilder $builder, $lcn)
    {
        $builder->addIntX(17, $lcn, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSWtKip(FlatBufferBuilder $builder, $sWtKip)
    {
        $builder->addIntX(18, $sWtKip, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTWtKip(FlatBufferBuilder $builder, $tWtKip)
    {
        $builder->addIntX(19, $tWtKip, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addStWtKip(FlatBufferBuilder $builder, $stWtKip)
    {
        $builder->addIntX(20, $stWtKip, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTtWtKip(FlatBufferBuilder $builder, $ttWtKip)
    {
        $builder->addIntX(21, $ttWtKip, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDdWtKip(FlatBufferBuilder $builder, $ddWtKip)
    {
        $builder->addIntX(22, $ddWtKip, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSbttWtKip(FlatBufferBuilder $builder, $sbttWtKip)
    {
        $builder->addIntX(23, $sbttWtKip, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTdtWtkip(FlatBufferBuilder $builder, $tdtWtkip)
    {
        $builder->addIntX(24, $tdtWtkip, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTrtWtKip(FlatBufferBuilder $builder, $trtWtKip)
    {
        $builder->addIntX(25, $trtWtKip, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDdtWtKip(FlatBufferBuilder $builder, $ddtWtKip)
    {
        $builder->addIntX(26, $ddtWtKip, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSWtKN(FlatBufferBuilder $builder, $sWtKN)
    {
        $builder->addIntX(27, $sWtKN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTWtKN(FlatBufferBuilder $builder, $tWtKN)
    {
        $builder->addIntX(28, $tWtKN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addStWtKN(FlatBufferBuilder $builder, $stWtKN)
    {
        $builder->addIntX(29, $stWtKN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTtWtKN(FlatBufferBuilder $builder, $ttWtKN)
    {
        $builder->addIntX(30, $ttWtKN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDdWtKN(FlatBufferBuilder $builder, $ddWtKN)
    {
        $builder->addIntX(31, $ddWtKN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSbttWtKN(FlatBufferBuilder $builder, $sbttWtKN)
    {
        $builder->addIntX(32, $sbttWtKN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTdtWtKN(FlatBufferBuilder $builder, $tdtWtKN)
    {
        $builder->addIntX(33, $tdtWtKN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTrtWtKN(FlatBufferBuilder $builder, $trtWtKN)
    {
        $builder->addIntX(34, $trtWtKN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDdtWtKN(FlatBufferBuilder $builder, $ddtWtKN)
    {
        $builder->addIntX(35, $ddtWtKN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLighting(FlatBufferBuilder $builder, $lighting)
    {
        $builder->addBoolX(36, $lighting, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLightsUNKN(FlatBufferBuilder $builder, $lightsUNKN)
    {
        $builder->addBoolX(37, $lightsUNKN, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLightsAPRCH(FlatBufferBuilder $builder, $lightsAPRCH)
    {
        $builder->addBoolX(38, $lightsAPRCH, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLightsVASI(FlatBufferBuilder $builder, $lightsVASI)
    {
        $builder->addBoolX(39, $lightsVASI, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLightsPAPI(FlatBufferBuilder $builder, $lightsPAPI)
    {
        $builder->addBoolX(40, $lightsPAPI, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLightsOLS(FlatBufferBuilder $builder, $lightsOLS)
    {
        $builder->addBoolX(41, $lightsOLS, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLightsREIL(FlatBufferBuilder $builder, $lightsREIL)
    {
        $builder->addBoolX(42, $lightsREIL, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLightsTDZL(FlatBufferBuilder $builder, $lightsTDZL)
    {
        $builder->addBoolX(43, $lightsTDZL, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLightsCL(FlatBufferBuilder $builder, $lightsCL)
    {
        $builder->addBoolX(44, $lightsCL, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addObstacle(FlatBufferBuilder $builder, $obstacle)
    {
        $builder->addBoolX(45, $obstacle, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(46, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(47, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(48, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(49, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(50, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(51, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSurface_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSurface_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "SURF");
    }
}
