<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
class DataLinkVoiceCoord_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return DataLinkVoiceCoord_Full
     */
    public static function getRootAsDataLinkVoiceCoord_Full(ByteBuffer $bb)
    {
        $obj = new DataLinkVoiceCoord_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function DataLinkVoiceCoord_FullIdentifier()
    {
        return "DATA";
    }

    public static function DataLinkVoiceCoord_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::DataLinkVoiceCoord_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return DataLinkVoiceCoord_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Designator assigned to a voice interface control and coordination net for this data link message (e.g. ADCCN, DCN, VPN, etc.).
    /// Example: /// Example: VPN
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getVoiceNetDes()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Designator used in nonsecure communications to refer to a radio frequency for this data link message.
    /// Example: /// Example: ST300A
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getFreqDes()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Priority of a communication circuit, channel or frequency for this data link message such as P (Primary), M (Monitor), etc.
    /// Example: /// Example: P
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getCommPri()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of telephone numbers or contact frequencies used for interface control for this data link message.
    /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTeleFreqNums($j)
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTeleFreqNumsLength()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startDataLinkVoiceCoord_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return DataLinkVoiceCoord_Full
     */
    public static function createDataLinkVoiceCoord_Full(FlatBufferBuilder $builder, $voiceNetDes, $freqDes, $commPri, $teleFreqNums)
    {
        $builder->startObject(4);
        self::addVoiceNetDes($builder, $voiceNetDes);
        self::addFreqDes($builder, $freqDes);
        self::addCommPri($builder, $commPri);
        self::addTeleFreqNums($builder, $teleFreqNums);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVoiceNetDes(FlatBufferBuilder $builder, $voiceNetDes)
    {
        $builder->addOffsetX(0, $voiceNetDes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFreqDes(FlatBufferBuilder $builder, $freqDes)
    {
        $builder->addOffsetX(1, $freqDes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCommPri(FlatBufferBuilder $builder, $commPri)
    {
        $builder->addOffsetX(2, $commPri, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTeleFreqNums(FlatBufferBuilder $builder, $teleFreqNums)
    {
        $builder->addOffsetX(3, $teleFreqNums, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTeleFreqNumsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTeleFreqNumsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endDataLinkVoiceCoord_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishDataLinkVoiceCoord_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "DATA");
    }
}
