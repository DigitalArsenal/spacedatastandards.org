<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
class AircraftMissionTasking_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AircraftMissionTasking_Abridged
     */
    public static function getRootAsAircraftMissionTasking_Abridged(ByteBuffer $bb)
    {
        $obj = new AircraftMissionTasking_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AircraftMissionTasking_AbridgedIdentifier()
    {
        return "AIRC";
    }

    public static function AircraftMissionTasking_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AircraftMissionTasking_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AircraftMissionTasking_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The country code responsible for conducting this aircraft mission tasking for the exercise or operation.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 1, Maximum length = 4
    public function getCountryCode()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The service tasked with conducting this aircraft mission tasking for the exercise or operation.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 1, Maximum length = 1
    public function getTaskedService()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The designator of the unit that is tasked to perform this aircraft mission tasking.
    /// Example: /// Example: AMPHIB5DIV
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getUnitDesignator()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The tasked units location expressed as an ICAO or a place name.
    /// Example: /// Example: ICAO:KXXQ
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getUnitLocName()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// An indicator of whether a mission is or will be a residual mission.
    /// Example: /// Example: N
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getResMsnInd()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The AMC number assigned to identify one aircraft from another.
    /// Example: /// Example: AMC:JJXD123HA045
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getAmcMsnNum()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The identifier for the composite set of missions for this operation/exercise.
    /// Example: /// Example: ZZ
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getPkgId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The commander responsible for the planning and execution of the forces necessary to achieve desired objectives.
    /// Example: /// Example: MC
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getMsnCommander()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The mission number assigned to this mission.
    /// Example: /// Example: D123HA
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getMsnNum()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The code for the preferred type or designator for a tasked air mission.
    /// Example: /// Example: CAS
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getPriMsnType()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The code for the alternative type of a tasked air mission.
    /// Example: /// Example: SEAD
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getSecMsnType()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The readiness status expressed in time (minutes) for an aircraft to be airborne after the launch order is received or the time required for a missile unit to assume battle stations.
    /// Example: /// Example: 30
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAlertStatus()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The location or name specified for the departure of the tasked air mission.
    /// Example: /// Example: ICAO:KBIF
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getDepLocName()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The departure location specified in UTM (100 meter) coordinates for the tasked air mission.
    /// Example: /// Example: 32WDL123123
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getDepLocUTM()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS-84 latitude of the departure location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
    /// Example: /// Example: 35.123
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDepLocLat()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the departure location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
    /// Example: /// Example: 79.2354
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDepLocLon()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The time of departure for the tasked air mission in ISO8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-10-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    public function getDepTime()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// An array of locations specified for the recovery of the tasked air mission represented by varying formats.
    /// Example: /// Example: ['ARRLOC:KBIF', 'ARRLOC:KDZ7']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRcvyLocName($j)
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRcvyLocNameLength()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// An array of recovery locations specified in UTM (100 meter) coordinates for the tasked air mission.
    /// Example: /// Example: ['ARRUTMO:32WDL123123', 'ARRUTMO:32WDL321321']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRcvyLocUTM($j)
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRcvyLocUTMLength()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// An array of WGS-84 latitude of the recovery locations, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
    /// Example: /// Example: [48.8584, 40.7554]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRcvyLocLat($j)
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRcvyLocLatLength()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// An array of WGS-84 longitude of the recovery locations, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
    /// Example: /// Example: [2.2945, -73.9866]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRcvyLocLon($j)
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRcvyLocLonLength()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// An array of recovery times for the tasked air mission in ISO8601 UTC format with millisecond precision.
    /// Example: /// Example: ['2021-10-25T16:00:00.234Z', '2021-10-26T16:00:00.234Z']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRcvyTime($j)
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRcvyTimeLength()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// A collection of the individual aircraft assigned to this aircraft mission tasking.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getIndACTasking($j)
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getIndACTaskingLength()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// A collection of aircraft mission location information for this aircraft mission tasking.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAcMsnLocSeg($j)
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAcMsnLocSegLength()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAircraftMissionTasking_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(24);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AircraftMissionTasking_Abridged
     */
    public static function createAircraftMissionTasking_Abridged(FlatBufferBuilder $builder, $countryCode, $taskedService, $unitDesignator, $unitLocName, $resMsnInd, $amcMsnNum, $pkgId, $msnCommander, $msnNum, $priMsnType, $secMsnType, $alertStatus, $depLocName, $depLocUTM, $depLocLat, $depLocLon, $depTime, $rcvyLocName, $rcvyLocUTM, $rcvyLocLat, $rcvyLocLon, $rcvyTime, $indACTasking, $acMsnLocSeg)
    {
        $builder->startObject(24);
        self::addCountryCode($builder, $countryCode);
        self::addTaskedService($builder, $taskedService);
        self::addUnitDesignator($builder, $unitDesignator);
        self::addUnitLocName($builder, $unitLocName);
        self::addResMsnInd($builder, $resMsnInd);
        self::addAmcMsnNum($builder, $amcMsnNum);
        self::addPkgId($builder, $pkgId);
        self::addMsnCommander($builder, $msnCommander);
        self::addMsnNum($builder, $msnNum);
        self::addPriMsnType($builder, $priMsnType);
        self::addSecMsnType($builder, $secMsnType);
        self::addAlertStatus($builder, $alertStatus);
        self::addDepLocName($builder, $depLocName);
        self::addDepLocUTM($builder, $depLocUTM);
        self::addDepLocLat($builder, $depLocLat);
        self::addDepLocLon($builder, $depLocLon);
        self::addDepTime($builder, $depTime);
        self::addRcvyLocName($builder, $rcvyLocName);
        self::addRcvyLocUTM($builder, $rcvyLocUTM);
        self::addRcvyLocLat($builder, $rcvyLocLat);
        self::addRcvyLocLon($builder, $rcvyLocLon);
        self::addRcvyTime($builder, $rcvyTime);
        self::addIndACTasking($builder, $indACTasking);
        self::addAcMsnLocSeg($builder, $acMsnLocSeg);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountryCode(FlatBufferBuilder $builder, $countryCode)
    {
        $builder->addOffsetX(0, $countryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskedService(FlatBufferBuilder $builder, $taskedService)
    {
        $builder->addOffsetX(1, $taskedService, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUnitDesignator(FlatBufferBuilder $builder, $unitDesignator)
    {
        $builder->addOffsetX(2, $unitDesignator, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUnitLocName(FlatBufferBuilder $builder, $unitLocName)
    {
        $builder->addOffsetX(3, $unitLocName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addResMsnInd(FlatBufferBuilder $builder, $resMsnInd)
    {
        $builder->addOffsetX(4, $resMsnInd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAmcMsnNum(FlatBufferBuilder $builder, $amcMsnNum)
    {
        $builder->addOffsetX(5, $amcMsnNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPkgId(FlatBufferBuilder $builder, $pkgId)
    {
        $builder->addOffsetX(6, $pkgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsnCommander(FlatBufferBuilder $builder, $msnCommander)
    {
        $builder->addOffsetX(7, $msnCommander, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsnNum(FlatBufferBuilder $builder, $msnNum)
    {
        $builder->addOffsetX(8, $msnNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPriMsnType(FlatBufferBuilder $builder, $priMsnType)
    {
        $builder->addOffsetX(9, $priMsnType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSecMsnType(FlatBufferBuilder $builder, $secMsnType)
    {
        $builder->addOffsetX(10, $secMsnType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAlertStatus(FlatBufferBuilder $builder, $alertStatus)
    {
        $builder->addIntX(11, $alertStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepLocName(FlatBufferBuilder $builder, $depLocName)
    {
        $builder->addOffsetX(12, $depLocName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepLocUTM(FlatBufferBuilder $builder, $depLocUTM)
    {
        $builder->addOffsetX(13, $depLocUTM, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDepLocLat(FlatBufferBuilder $builder, $depLocLat)
    {
        $builder->addDoubleX(14, $depLocLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDepLocLon(FlatBufferBuilder $builder, $depLocLon)
    {
        $builder->addDoubleX(15, $depLocLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepTime(FlatBufferBuilder $builder, $depTime)
    {
        $builder->addOffsetX(16, $depTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRcvyLocName(FlatBufferBuilder $builder, $rcvyLocName)
    {
        $builder->addOffsetX(17, $rcvyLocName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRcvyLocNameVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRcvyLocNameVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRcvyLocUTM(FlatBufferBuilder $builder, $rcvyLocUTM)
    {
        $builder->addOffsetX(18, $rcvyLocUTM, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRcvyLocUTMVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRcvyLocUTMVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRcvyLocLat(FlatBufferBuilder $builder, $rcvyLocLat)
    {
        $builder->addOffsetX(19, $rcvyLocLat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRcvyLocLatVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRcvyLocLatVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRcvyLocLon(FlatBufferBuilder $builder, $rcvyLocLon)
    {
        $builder->addOffsetX(20, $rcvyLocLon, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRcvyLocLonVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRcvyLocLonVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRcvyTime(FlatBufferBuilder $builder, $rcvyTime)
    {
        $builder->addOffsetX(21, $rcvyTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRcvyTimeVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRcvyTimeVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addIndACTasking(FlatBufferBuilder $builder, $indACTasking)
    {
        $builder->addOffsetX(22, $indACTasking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createIndACTaskingVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startIndACTaskingVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAcMsnLocSeg(FlatBufferBuilder $builder, $acMsnLocSeg)
    {
        $builder->addOffsetX(23, $acMsnLocSeg, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAcMsnLocSegVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAcMsnLocSegVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAircraftMissionTasking_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAircraftMissionTasking_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRC");
    }
}
