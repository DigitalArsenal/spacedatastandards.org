<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Platform mission assignment data.
class MissionAssignment_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return MissionAssignment_Full
     */
    public static function getRootAsMissionAssignment_Full(ByteBuffer $bb)
    {
        $obj = new MissionAssignment_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function MissionAssignment_FullIdentifier()
    {
        return "MISS";
    }

    public static function MissionAssignment_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::MissionAssignment_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return MissionAssignment_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: MISSIONASSIGNMENT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The track ID that the status is referencing, addressee.
    /// Example: /// Example: TRK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTrkId()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The timestamp of the mission data, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getTs()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The mission assignment discrete value.
    /// Example: /// Example: MAD
    /// Constraints: Minimum length = 1, Maximum length = 16
    public function getMad()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Receipt/Compliance, values from TABLE B-9.
    /// Example: /// Example: RC-123
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getRc()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Recurrence rate, receipt/compliance.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getRr()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Track number objective.
    /// Example: /// Example: TRACK_NUMBER
    /// Constraints: No constraints specified.
    public function getTno()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Threat warning environment.
    /// Example: /// Example: THREAT_WARNING
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getTwenv()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLat()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLon()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Origin of index number.
    /// Example: /// Example: ORIGIN
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getOrginx()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Environment.
    /// Example: /// Example: ENV
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getEnv()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Strength.
    /// Example: /// Example: STRENGTH
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getSz()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Index number.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getIndex()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// TARGET POSITION CONTINUATION WORD - number of associated dmpis.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC1associateddmpis()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.
    /// Example: /// Example: C2SPC
    /// Constraints: No constraints specified.
    public function getC2spc()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.
    /// Example: /// Example: C2AIR
    /// Constraints: No constraints specified.
    public function getC2air()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.
    /// Example: /// Example: C2SUR
    /// Constraints: No constraints specified.
    public function getC2sur()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.
    /// Example: /// Example: C2LND
    /// Constraints: No constraints specified.
    public function getC2lnd()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// TARGET DATA CONTINUATION WORD - identity.
    /// Example: /// Example: C2ID
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getC2id()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// TARGET DATA CONTINUATION WORD - identity amplifying descriptor.
    /// Example: /// Example: C2IDAMP
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getC2idamplifyingdescriptor()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC2alt()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// TARGET DATA CONTINUATION WORD - course in increments of 1 degree.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC2crs()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC2spd()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// TARGET DATA CONTINUATION WORD - special interest indicator.
    /// Example: /// Example: C2SPECIAL
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getC2specialinterestindicator()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// TARGET DATA CONTINUATION WORD - exercise indicator.
    /// Example: /// Example: C2EXERCISE
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getC2exerciseindicator()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// TARGET DATA CONTINUATION WORD - method of fire.
    /// Example: /// Example: MOF
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getC2exercisemof()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getC3lat()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getC3lon()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getC3elv()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// TARGET DATA CONTINUATION WORD - point type 1.
    /// Example: /// Example: C3PTL
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getC3ptl()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// TARGET DATA CONTINUATION WORD - point number.
    /// Example: /// Example: C3PTNUM
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getC3ptnum()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.
    /// Example: /// Example: C4TGT
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getC4tgt()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// SURFACE ATTACK CONTINUATION WORD - target defenses.
    /// Example: /// Example: C4DEF
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getC4def()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC4runin()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC4egress()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC4numberofstores()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// SURFACE ATTACK CONTINUATION WORD - type of stores.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC4typeofstores()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// SURFACE ATTACK CONTINUATION WORD - time discrete.
    /// Example: /// Example: C4TIMED
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getC4timediscrete()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// SURFACE ATTACK CONTINUATION WORD - hour.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC4tm()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// SURFACE ATTACK CONTINUATION WORD - minute.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC4colon()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// SURFACE ATTACK CONTINUATION WORD - mode of delivery.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC4mod()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// CONTINUATION WORD - hae adjustment, measured in 3.125 FT.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC5haeadj()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// CONTINUATION WORD - time window.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC5tw()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// CONTINUATION WORD - target bearing.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC5tgtbrng()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC5latlsb()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC5lonlsb()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC5elevationlsbs()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC5colon()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// TARGETING CONTINUATION WORD - laser illuminator code.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC6laser()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// TARGETING CONTINUATION WORD - index number, related, 0=NS.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC6intel()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// TARGETING CONTINUATION WORD - track number, related to 3.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC6tnr3()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// TARGETING CONTINUATION WORD - designator/seeker pulse code type.
    /// Example: /// Example: C6DSPCT
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getC6dspct()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// TARGETING CONTINUATION WORD - designator/seeker pulse code.
    /// Example: /// Example: C6DSPC
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getC6dspc()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// TARGETING CONTINUATION WORD - first pulse/last pulse mode.
    /// Example: /// Example: C6FPLPM
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getC6fplpm()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// TARGETING CONTINUATION WORD - long pulse mode.
    /// Example: /// Example: C6LONGPM
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getC6longpm()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// THIRD PARTY CONTINUATION WORD  - track number, index originator.
    /// Example: /// Example: C7TNOR
    /// Constraints: No constraints specified.
    public function getC7tnor()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// THIRD PARTY CONTINUATION WORD  - index number, third party.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getC7in3p()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// THIRD PARTY CONTINUATION WORD  - elevation angle, 2.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getC7elang2()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \MissionAssignment_Full_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startMissionAssignment_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(68);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return MissionAssignment_Full
     */
    public static function createMissionAssignment_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $trkId, $ts, $mad, $rc, $rr, $tno, $twenv, $lat, $lon, $orginx, $env, $sz, $index, $c1associateddmpis, $c2spc, $c2air, $c2sur, $c2lnd, $c2id, $c2idamplifyingdescriptor, $c2alt, $c2crs, $c2spd, $c2specialinterestindicator, $c2exerciseindicator, $c2exercisemof, $c3lat, $c3lon, $c3elv, $c3ptl, $c3ptnum, $c4tgt, $c4def, $c4runin, $c4egress, $c4numberofstores, $c4typeofstores, $c4timediscrete, $c4tm, $c4colon, $c4mod, $c5haeadj, $c5tw, $c5tgtbrng, $c5latlsb, $c5lonlsb, $c5elevationlsbs, $c5colon, $c6laser, $c6intel, $c6tnr3, $c6dspct, $c6dspc, $c6fplpm, $c6longpm, $c7tnor, $c7in3p, $c7elang2, $createdAt, $createdBy, $updatedAt, $updatedBy, $source, $origin, $dataMode, $origNetwork)
    {
        $builder->startObject(68);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addTrkId($builder, $trkId);
        self::addTs($builder, $ts);
        self::addMad($builder, $mad);
        self::addRc($builder, $rc);
        self::addRr($builder, $rr);
        self::addTno($builder, $tno);
        self::addTwenv($builder, $twenv);
        self::addLat($builder, $lat);
        self::addLon($builder, $lon);
        self::addOrginx($builder, $orginx);
        self::addEnv($builder, $env);
        self::addSz($builder, $sz);
        self::addIndex($builder, $index);
        self::addC1associateddmpis($builder, $c1associateddmpis);
        self::addC2spc($builder, $c2spc);
        self::addC2air($builder, $c2air);
        self::addC2sur($builder, $c2sur);
        self::addC2lnd($builder, $c2lnd);
        self::addC2id($builder, $c2id);
        self::addC2idamplifyingdescriptor($builder, $c2idamplifyingdescriptor);
        self::addC2alt($builder, $c2alt);
        self::addC2crs($builder, $c2crs);
        self::addC2spd($builder, $c2spd);
        self::addC2specialinterestindicator($builder, $c2specialinterestindicator);
        self::addC2exerciseindicator($builder, $c2exerciseindicator);
        self::addC2exercisemof($builder, $c2exercisemof);
        self::addC3lat($builder, $c3lat);
        self::addC3lon($builder, $c3lon);
        self::addC3elv($builder, $c3elv);
        self::addC3ptl($builder, $c3ptl);
        self::addC3ptnum($builder, $c3ptnum);
        self::addC4tgt($builder, $c4tgt);
        self::addC4def($builder, $c4def);
        self::addC4runin($builder, $c4runin);
        self::addC4egress($builder, $c4egress);
        self::addC4numberofstores($builder, $c4numberofstores);
        self::addC4typeofstores($builder, $c4typeofstores);
        self::addC4timediscrete($builder, $c4timediscrete);
        self::addC4tm($builder, $c4tm);
        self::addC4colon($builder, $c4colon);
        self::addC4mod($builder, $c4mod);
        self::addC5haeadj($builder, $c5haeadj);
        self::addC5tw($builder, $c5tw);
        self::addC5tgtbrng($builder, $c5tgtbrng);
        self::addC5latlsb($builder, $c5latlsb);
        self::addC5lonlsb($builder, $c5lonlsb);
        self::addC5elevationlsbs($builder, $c5elevationlsbs);
        self::addC5colon($builder, $c5colon);
        self::addC6laser($builder, $c6laser);
        self::addC6intel($builder, $c6intel);
        self::addC6tnr3($builder, $c6tnr3);
        self::addC6dspct($builder, $c6dspct);
        self::addC6dspc($builder, $c6dspc);
        self::addC6fplpm($builder, $c6fplpm);
        self::addC6longpm($builder, $c6longpm);
        self::addC7tnor($builder, $c7tnor);
        self::addC7in3p($builder, $c7in3p);
        self::addC7elang2($builder, $c7elang2);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrkId(FlatBufferBuilder $builder, $trkId)
    {
        $builder->addOffsetX(2, $trkId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTs(FlatBufferBuilder $builder, $ts)
    {
        $builder->addOffsetX(3, $ts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMad(FlatBufferBuilder $builder, $mad)
    {
        $builder->addOffsetX(4, $mad, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRc(FlatBufferBuilder $builder, $rc)
    {
        $builder->addOffsetX(5, $rc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addRr(FlatBufferBuilder $builder, $rr)
    {
        $builder->addIntX(6, $rr, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTno(FlatBufferBuilder $builder, $tno)
    {
        $builder->addOffsetX(7, $tno, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTwenv(FlatBufferBuilder $builder, $twenv)
    {
        $builder->addOffsetX(8, $twenv, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLat(FlatBufferBuilder $builder, $lat)
    {
        $builder->addDoubleX(9, $lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLon(FlatBufferBuilder $builder, $lon)
    {
        $builder->addDoubleX(10, $lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrginx(FlatBufferBuilder $builder, $orginx)
    {
        $builder->addOffsetX(11, $orginx, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEnv(FlatBufferBuilder $builder, $env)
    {
        $builder->addOffsetX(12, $env, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSz(FlatBufferBuilder $builder, $sz)
    {
        $builder->addOffsetX(13, $sz, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addIndex(FlatBufferBuilder $builder, $index)
    {
        $builder->addIntX(14, $index, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC1associateddmpis(FlatBufferBuilder $builder, $c1associateddmpis)
    {
        $builder->addIntX(15, $c1associateddmpis, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC2spc(FlatBufferBuilder $builder, $c2spc)
    {
        $builder->addOffsetX(16, $c2spc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC2air(FlatBufferBuilder $builder, $c2air)
    {
        $builder->addOffsetX(17, $c2air, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC2sur(FlatBufferBuilder $builder, $c2sur)
    {
        $builder->addOffsetX(18, $c2sur, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC2lnd(FlatBufferBuilder $builder, $c2lnd)
    {
        $builder->addOffsetX(19, $c2lnd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC2id(FlatBufferBuilder $builder, $c2id)
    {
        $builder->addOffsetX(20, $c2id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC2idamplifyingdescriptor(FlatBufferBuilder $builder, $c2idamplifyingdescriptor)
    {
        $builder->addOffsetX(21, $c2idamplifyingdescriptor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC2alt(FlatBufferBuilder $builder, $c2alt)
    {
        $builder->addIntX(22, $c2alt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC2crs(FlatBufferBuilder $builder, $c2crs)
    {
        $builder->addIntX(23, $c2crs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC2spd(FlatBufferBuilder $builder, $c2spd)
    {
        $builder->addIntX(24, $c2spd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC2specialinterestindicator(FlatBufferBuilder $builder, $c2specialinterestindicator)
    {
        $builder->addOffsetX(25, $c2specialinterestindicator, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC2exerciseindicator(FlatBufferBuilder $builder, $c2exerciseindicator)
    {
        $builder->addOffsetX(26, $c2exerciseindicator, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC2exercisemof(FlatBufferBuilder $builder, $c2exercisemof)
    {
        $builder->addOffsetX(27, $c2exercisemof, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addC3lat(FlatBufferBuilder $builder, $c3lat)
    {
        $builder->addDoubleX(28, $c3lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addC3lon(FlatBufferBuilder $builder, $c3lon)
    {
        $builder->addDoubleX(29, $c3lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addC3elv(FlatBufferBuilder $builder, $c3elv)
    {
        $builder->addDoubleX(30, $c3elv, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC3ptl(FlatBufferBuilder $builder, $c3ptl)
    {
        $builder->addOffsetX(31, $c3ptl, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC3ptnum(FlatBufferBuilder $builder, $c3ptnum)
    {
        $builder->addOffsetX(32, $c3ptnum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC4tgt(FlatBufferBuilder $builder, $c4tgt)
    {
        $builder->addOffsetX(33, $c4tgt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC4def(FlatBufferBuilder $builder, $c4def)
    {
        $builder->addOffsetX(34, $c4def, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC4runin(FlatBufferBuilder $builder, $c4runin)
    {
        $builder->addIntX(35, $c4runin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC4egress(FlatBufferBuilder $builder, $c4egress)
    {
        $builder->addIntX(36, $c4egress, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC4numberofstores(FlatBufferBuilder $builder, $c4numberofstores)
    {
        $builder->addIntX(37, $c4numberofstores, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC4typeofstores(FlatBufferBuilder $builder, $c4typeofstores)
    {
        $builder->addIntX(38, $c4typeofstores, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC4timediscrete(FlatBufferBuilder $builder, $c4timediscrete)
    {
        $builder->addOffsetX(39, $c4timediscrete, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC4tm(FlatBufferBuilder $builder, $c4tm)
    {
        $builder->addIntX(40, $c4tm, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC4colon(FlatBufferBuilder $builder, $c4colon)
    {
        $builder->addIntX(41, $c4colon, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC4mod(FlatBufferBuilder $builder, $c4mod)
    {
        $builder->addIntX(42, $c4mod, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC5haeadj(FlatBufferBuilder $builder, $c5haeadj)
    {
        $builder->addIntX(43, $c5haeadj, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC5tw(FlatBufferBuilder $builder, $c5tw)
    {
        $builder->addIntX(44, $c5tw, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC5tgtbrng(FlatBufferBuilder $builder, $c5tgtbrng)
    {
        $builder->addIntX(45, $c5tgtbrng, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC5latlsb(FlatBufferBuilder $builder, $c5latlsb)
    {
        $builder->addIntX(46, $c5latlsb, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC5lonlsb(FlatBufferBuilder $builder, $c5lonlsb)
    {
        $builder->addIntX(47, $c5lonlsb, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC5elevationlsbs(FlatBufferBuilder $builder, $c5elevationlsbs)
    {
        $builder->addIntX(48, $c5elevationlsbs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC5colon(FlatBufferBuilder $builder, $c5colon)
    {
        $builder->addIntX(49, $c5colon, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC6laser(FlatBufferBuilder $builder, $c6laser)
    {
        $builder->addIntX(50, $c6laser, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC6intel(FlatBufferBuilder $builder, $c6intel)
    {
        $builder->addIntX(51, $c6intel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC6tnr3(FlatBufferBuilder $builder, $c6tnr3)
    {
        $builder->addIntX(52, $c6tnr3, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC6dspct(FlatBufferBuilder $builder, $c6dspct)
    {
        $builder->addOffsetX(53, $c6dspct, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC6dspc(FlatBufferBuilder $builder, $c6dspc)
    {
        $builder->addOffsetX(54, $c6dspc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC6fplpm(FlatBufferBuilder $builder, $c6fplpm)
    {
        $builder->addOffsetX(55, $c6fplpm, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC6longpm(FlatBufferBuilder $builder, $c6longpm)
    {
        $builder->addOffsetX(56, $c6longpm, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addC7tnor(FlatBufferBuilder $builder, $c7tnor)
    {
        $builder->addOffsetX(57, $c7tnor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC7in3p(FlatBufferBuilder $builder, $c7in3p)
    {
        $builder->addIntX(58, $c7in3p, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addC7elang2(FlatBufferBuilder $builder, $c7elang2)
    {
        $builder->addDoubleX(59, $c7elang2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(60, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(61, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(62, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(63, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(64, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(65, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(66, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(67, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endMissionAssignment_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishMissionAssignment_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "MISS");
    }
}
