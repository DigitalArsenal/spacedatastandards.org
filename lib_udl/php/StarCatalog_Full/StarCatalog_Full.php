<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// The star catalog provides the position, proper motion, parallax, and photometric magnitudes at various bandpasses of a star.
class StarCatalog_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return StarCatalog_Full
     */
    public static function getRootAsStarCatalog_Full(ByteBuffer $bb)
    {
        $obj = new StarCatalog_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function StarCatalog_FullIdentifier()
    {
        return "STAR";
    }

    public static function StarCatalog_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::StarCatalog_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return StarCatalog_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: STAR-CAT-DATASET-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The ID of this object in the specific catalog associated with this record.
    /// Example: /// Example: 12345
    /// Constraints: No constraints specified.
    /**
     * @return long
     */
    public function getCsId()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /// The ID of this object in the Guidance and Navagation Control (GNC) Catalog.
    /// Example: /// Example: 12345
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getGncCatId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The ID of this object in the Gaia DR3 Catalog.
    /// Example: /// Example: 89012345678901
    /// Constraints: No constraints specified.
    /**
     * @return long
     */
    public function getGaiadr3CatId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /// The ID of this object in the Hipparcos Catalog.
    /// Example: /// Example: 12345
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getHipCatId()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The version of the catalog associated with this object.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    public function getCatVersion()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Barycentric right ascension of the source in the International Celestial Reference System (ICRS) frame at the reference epoch, in degrees.
    /// Example: /// Example: 14.43
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRa()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty of the right ascension of the source, in milliarcseconds, at the reference epoch.
    /// Example: /// Example: 509.466
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRaUnc()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Barycentric declination of the source in International Celestial Reference System (ICRS) at the reference epoch, in degrees.
    /// Example: /// Example: 21.8
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDec()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty of the declination of the source, in milliarcseconds, at the reference epoch.
    /// Example: /// Example: 40.996
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDecUnc()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Flag indicating that the position uncertainty in either ra or dec is greater than 100 milliarcseconds.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getPosUncFlag()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Absolute stellar parallax of the source, in milliarcseconds.
    /// Example: /// Example: -6.8
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getParallax()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty of the stellar parallax, in milliarcseconds.
    /// Example: /// Example: 82.35
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getParallaxUnc()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Proper motion in right ascension of the source, in milliarcseconds/year, at the reference epoch.
    /// Example: /// Example: 1000.45
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPmra()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty of proper motion in right ascension, in milliarcseconds/year.
    /// Example: /// Example: 5.6
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPmraUnc()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Proper motion in declination of the source, in milliarcseconds/year, at the reference epoch.
    /// Example: /// Example: -970.1003
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPmdec()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty of proper motion in declination, in milliarcseconds/year.
    /// Example: /// Example: 1.22
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPmdecUnc()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Flag indicating that the proper motion uncertainty in either ra or dec is greater than 10 milliarcseconds/year.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getPmUncFlag()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Originating astrometric catalog for this object. Enum: [GAIADR3, HIPPARCOS, USNOBSC].
    /// Example: /// Example: GAIADR3
    /// Constraints: Minimum length = 1, Maximum length = 16
    /**
     * @return sbyte
     */
    public function getAstrometryOrigin()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \StarCatalog_Full_astrometryOrigin_Enum::GAIADR3;
    }

    /// Reference epoch to which the astrometric source parameters are referred, expressed as Julian Year in Barycentric Coordinate Time (TCB).
    /// Example: /// Example: 2016
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getStarEpoch()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Gaia DR3 optical photometric G-band magnitude in the Vega scale.
    /// Example: /// Example: 0.0046
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGmag()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Gaia DR3 optical photometric G-band magnitude uncertainty in the Vega scale.
    /// Example: /// Example: 0.00292
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGmagUnc()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Gaia DR3 optical photometric Bp-band magnitude in the Vega scale.
    /// Example: /// Example: 0.04559
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBpmag()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Gaia DR3 optical Bp-band magnitude uncertainty in the Vega scale.
    /// Example: /// Example: 0.2227
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBpmagUnc()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Gaia DR3 optical Rp-band magnitude in the Vega scale.
    /// Example: /// Example: 8.0047
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRpmag()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Gaia DR3 optical photometric Rp-band magnitude uncertainty in the Vega scale.
    /// Example: /// Example: 1.233
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRpmagUnc()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude in the Vega scale.
    /// Example: /// Example: 9.515
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getJmag()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude uncertainty in the Vega scale.
    /// Example: /// Example: 7.559
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getJmagUnc()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude in the Vega scale.
    /// Example: /// Example: 13.545
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getKmag()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude uncertainty in the Vega scale.
    /// Example: /// Example: 0.052
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getKmagUnc()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude in the Vega scale.
    /// Example: /// Example: 12.126
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHmag()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude uncertainty in the Vega scale.
    /// Example: /// Example: 5.722
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHmagUnc()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Flag indicating that the source exhibits variable magnitude.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getVarFlag()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that this is a multiple object source.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getMultFlag()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The catalog ID of the nearest neighbor to this source.
    /// Example: /// Example: 2456
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNeighborId()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Flag indicating that the nearest catalog neighbor is closer than 4.6 arcseconds.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getNeighborFlag()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Distance between source and nearest neighbor, in arcseconds.
    /// Example: /// Example: 201.406
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNeighborDistance()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Flag indicating that the photocentric shift is greater than 50 milliarcseconds.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getShiftFlag()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Photocentric shift caused by neighbors, in arcseconds.
    /// Example: /// Example: 4.548
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getShift()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was updated in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSource()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getOrigNetwork()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \StarCatalog_Full_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startStarCatalog_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(48);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return StarCatalog_Full
     */
    public static function createStarCatalog_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $csId, $gncCatId, $gaiadr3CatId, $hipCatId, $catVersion, $ra, $raUnc, $dec, $decUnc, $posUncFlag, $parallax, $parallaxUnc, $pmra, $pmraUnc, $pmdec, $pmdecUnc, $pmUncFlag, $astrometryOrigin, $starEpoch, $gmag, $gmagUnc, $bpmag, $bpmagUnc, $rpmag, $rpmagUnc, $jmag, $jmagUnc, $kmag, $kmagUnc, $hmag, $hmagUnc, $varFlag, $multFlag, $neighborId, $neighborFlag, $neighborDistance, $shiftFlag, $shift, $createdAt, $createdBy, $updatedAt, $updatedBy, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(48);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addCsId($builder, $csId);
        self::addGncCatId($builder, $gncCatId);
        self::addGaiadr3CatId($builder, $gaiadr3CatId);
        self::addHipCatId($builder, $hipCatId);
        self::addCatVersion($builder, $catVersion);
        self::addRa($builder, $ra);
        self::addRaUnc($builder, $raUnc);
        self::addDec($builder, $dec);
        self::addDecUnc($builder, $decUnc);
        self::addPosUncFlag($builder, $posUncFlag);
        self::addParallax($builder, $parallax);
        self::addParallaxUnc($builder, $parallaxUnc);
        self::addPmra($builder, $pmra);
        self::addPmraUnc($builder, $pmraUnc);
        self::addPmdec($builder, $pmdec);
        self::addPmdecUnc($builder, $pmdecUnc);
        self::addPmUncFlag($builder, $pmUncFlag);
        self::addAstrometryOrigin($builder, $astrometryOrigin);
        self::addStarEpoch($builder, $starEpoch);
        self::addGmag($builder, $gmag);
        self::addGmagUnc($builder, $gmagUnc);
        self::addBpmag($builder, $bpmag);
        self::addBpmagUnc($builder, $bpmagUnc);
        self::addRpmag($builder, $rpmag);
        self::addRpmagUnc($builder, $rpmagUnc);
        self::addJmag($builder, $jmag);
        self::addJmagUnc($builder, $jmagUnc);
        self::addKmag($builder, $kmag);
        self::addKmagUnc($builder, $kmagUnc);
        self::addHmag($builder, $hmag);
        self::addHmagUnc($builder, $hmagUnc);
        self::addVarFlag($builder, $varFlag);
        self::addMultFlag($builder, $multFlag);
        self::addNeighborId($builder, $neighborId);
        self::addNeighborFlag($builder, $neighborFlag);
        self::addNeighborDistance($builder, $neighborDistance);
        self::addShiftFlag($builder, $shiftFlag);
        self::addShift($builder, $shift);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addCsId(FlatBufferBuilder $builder, $csId)
    {
        $builder->addLongX(2, $csId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addGncCatId(FlatBufferBuilder $builder, $gncCatId)
    {
        $builder->addIntX(3, $gncCatId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addGaiadr3CatId(FlatBufferBuilder $builder, $gaiadr3CatId)
    {
        $builder->addLongX(4, $gaiadr3CatId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addHipCatId(FlatBufferBuilder $builder, $hipCatId)
    {
        $builder->addIntX(5, $hipCatId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCatVersion(FlatBufferBuilder $builder, $catVersion)
    {
        $builder->addOffsetX(6, $catVersion, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRa(FlatBufferBuilder $builder, $ra)
    {
        $builder->addDoubleX(7, $ra, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRaUnc(FlatBufferBuilder $builder, $raUnc)
    {
        $builder->addDoubleX(8, $raUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDec(FlatBufferBuilder $builder, $dec)
    {
        $builder->addDoubleX(9, $dec, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDecUnc(FlatBufferBuilder $builder, $decUnc)
    {
        $builder->addDoubleX(10, $decUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addPosUncFlag(FlatBufferBuilder $builder, $posUncFlag)
    {
        $builder->addBoolX(11, $posUncFlag, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addParallax(FlatBufferBuilder $builder, $parallax)
    {
        $builder->addDoubleX(12, $parallax, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addParallaxUnc(FlatBufferBuilder $builder, $parallaxUnc)
    {
        $builder->addDoubleX(13, $parallaxUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPmra(FlatBufferBuilder $builder, $pmra)
    {
        $builder->addDoubleX(14, $pmra, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPmraUnc(FlatBufferBuilder $builder, $pmraUnc)
    {
        $builder->addDoubleX(15, $pmraUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPmdec(FlatBufferBuilder $builder, $pmdec)
    {
        $builder->addDoubleX(16, $pmdec, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPmdecUnc(FlatBufferBuilder $builder, $pmdecUnc)
    {
        $builder->addDoubleX(17, $pmdecUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addPmUncFlag(FlatBufferBuilder $builder, $pmUncFlag)
    {
        $builder->addBoolX(18, $pmUncFlag, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addAstrometryOrigin(FlatBufferBuilder $builder, $astrometryOrigin)
    {
        $builder->addSbyteX(19, $astrometryOrigin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addStarEpoch(FlatBufferBuilder $builder, $starEpoch)
    {
        $builder->addDoubleX(20, $starEpoch, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGmag(FlatBufferBuilder $builder, $gmag)
    {
        $builder->addDoubleX(21, $gmag, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGmagUnc(FlatBufferBuilder $builder, $gmagUnc)
    {
        $builder->addDoubleX(22, $gmagUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBpmag(FlatBufferBuilder $builder, $bpmag)
    {
        $builder->addDoubleX(23, $bpmag, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBpmagUnc(FlatBufferBuilder $builder, $bpmagUnc)
    {
        $builder->addDoubleX(24, $bpmagUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRpmag(FlatBufferBuilder $builder, $rpmag)
    {
        $builder->addDoubleX(25, $rpmag, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRpmagUnc(FlatBufferBuilder $builder, $rpmagUnc)
    {
        $builder->addDoubleX(26, $rpmagUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addJmag(FlatBufferBuilder $builder, $jmag)
    {
        $builder->addDoubleX(27, $jmag, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addJmagUnc(FlatBufferBuilder $builder, $jmagUnc)
    {
        $builder->addDoubleX(28, $jmagUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addKmag(FlatBufferBuilder $builder, $kmag)
    {
        $builder->addDoubleX(29, $kmag, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addKmagUnc(FlatBufferBuilder $builder, $kmagUnc)
    {
        $builder->addDoubleX(30, $kmagUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHmag(FlatBufferBuilder $builder, $hmag)
    {
        $builder->addDoubleX(31, $hmag, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHmagUnc(FlatBufferBuilder $builder, $hmagUnc)
    {
        $builder->addDoubleX(32, $hmagUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addVarFlag(FlatBufferBuilder $builder, $varFlag)
    {
        $builder->addBoolX(33, $varFlag, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addMultFlag(FlatBufferBuilder $builder, $multFlag)
    {
        $builder->addBoolX(34, $multFlag, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNeighborId(FlatBufferBuilder $builder, $neighborId)
    {
        $builder->addIntX(35, $neighborId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addNeighborFlag(FlatBufferBuilder $builder, $neighborFlag)
    {
        $builder->addBoolX(36, $neighborFlag, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNeighborDistance(FlatBufferBuilder $builder, $neighborDistance)
    {
        $builder->addDoubleX(37, $neighborDistance, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addShiftFlag(FlatBufferBuilder $builder, $shiftFlag)
    {
        $builder->addBoolX(38, $shiftFlag, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addShift(FlatBufferBuilder $builder, $shift)
    {
        $builder->addDoubleX(39, $shift, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(40, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(41, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(42, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(43, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(44, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(45, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(46, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(47, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endStarCatalog_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishStarCatalog_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "STAR");
    }
}
