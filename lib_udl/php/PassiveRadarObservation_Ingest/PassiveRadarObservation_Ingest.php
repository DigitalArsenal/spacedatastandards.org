<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of observation data for passive radar based sensor phenomenologies. Passive radar is a form of radar that instead of using a dedicated transmitter, as is the case for traditional radar, utilizes radio frequency (RF) energy already in the environment. With an abundance of existing energy available from geographically diverse sources, passive radar offers wide field of view coverage and long observation times. A passive radar system is comprised of separately located transmitter (for example, FM radio stations), a reference receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over a broad angular extent as well as providing a signal at the reference site. The reflected energy is received at the surveillance site for processing with the reference signal. The long observation durations that are possible with this technology enables an accurate orbit to be determined within a single pass.
class PassiveRadarObservation_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return PassiveRadarObservation_Ingest
     */
    public static function getRootAsPassiveRadarObservation_Ingest(ByteBuffer $bb)
    {
        $obj = new PassiveRadarObservation_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function PassiveRadarObservation_IngestIdentifier()
    {
        return "PASS";
    }

    public static function PassiveRadarObservation_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::PassiveRadarObservation_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return PassiveRadarObservation_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Ob detection time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2023-01-24T23:35:26.518152Z
    /// Constraints: No constraints specified.
    public function getObTime()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
    /// Example: /// Example: 40699
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 40699
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigObjectId()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
    /// Example: /// Example: OCULUSA
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigSensorId()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
    /// Example: /// Example: RED_CLIFFS_3ABCRN
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdRFEmitter()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
    /// Example: /// Example: OculusRef1
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensorRefReceiver()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional external observation identifier provided by the source.
    /// Example: /// Example: 26892
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getExtObservationId()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier to indicate the specific tasking which produced this observation.
    /// Example: /// Example: TASK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTaskId()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of a track that represents a tracklet for this observation.
    /// Example: /// Example: 12212
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTrackId()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
    /// Example: /// Example: FIRST
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getObPosition()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getUct()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Line of sight azimuth angle in degrees and topocentric frame.
    /// Example: /// Example: 134.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzimuth()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzimuthUnc()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor azimuth angle bias in degrees.
    /// Example: /// Example: 0.123
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzimuthBias()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change of the line of sight azimuth in degrees per second.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzimuthRate()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line of sight elevation in degrees and topocentric frame.
    /// Example: /// Example: 76.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevation()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevationUnc()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor elevation bias in degrees.
    /// Example: /// Example: 0.123
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevationBias()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change of the line of sight elevation in degrees per second.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevationRate()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).
    /// Example: /// Example: 0.00505820232809312
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDelay()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the delay measurement, in seconds.
    /// Example: /// Example: 3.1e-06
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDelayUnc()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Delay bias in seconds.
    /// Example: /// Example: 1.23e-06
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDelayBias()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.
    /// Example: /// Example: 754.8212
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBistaticRange()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in bistatic range in kilometers.
    /// Example: /// Example: 5.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBistaticRangeUnc()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor bistatic range bias in kilometers.
    /// Example: /// Example: 2.34
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBistaticRangeBias()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change of the bistatic path in kilometers/sec.
    /// Example: /// Example: -0.30222
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBistaticRangeRate()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.
    /// Example: /// Example: 0.123
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBistaticRangeRateUnc()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Bistatic range acceleration in kilometers/sec^2.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBistaticRangeAccel()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBistaticRangeAccelUnc()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Doppler measurement in hertz.
    /// Example: /// Example: -101.781641000597
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDoppler()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the Doppler measurement in hertz.
    /// Example: /// Example: 0.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDopplerUnc()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Coning angle in degrees.
    /// Example: /// Example: 60.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getConing()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the coning angle measurement, in degrees.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getConingUnc()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.
    /// Example: /// Example: 0.00592856674135648
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTof()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in time of flight in seconds.
    /// Example: /// Example: 3.1e-06
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTofUnc()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Time of Flight (TOF) bias in seconds.
    /// Example: /// Example: 1.23e-06
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTofBias()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The target Acceleration measurement in kilometers/sec^2 for this observation.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAccel()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAccelUnc()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line of sight right ascension in degrees and J2000 coordinate frame.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRa()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line of sight declination angle in degrees and J2000 coordinate frame.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeclination()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: -35.1181763996856
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLat()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 139.613567052763
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLon()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
    /// Example: /// Example: 478.056378
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAlt()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// X velocity of target in kilometers/sec in J2000 coordinate frame.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getXvel()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Y velocity of target in kilometers/sec in J2000 coordinate frame.
    /// Example: /// Example: 3.21
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getYvel()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Z velocity of target in kilometers/sec in J2000 coordinate frame.
    /// Example: /// Example: 3.12
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZvel()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Radar cross section in meters squared for polarization principal.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRcs()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRcsUnc()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Radar cross section in meters squared for orthogonal polarization.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOrthogonalRcs()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOrthogonalRcsUnc()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Signal to noise ratio, in dB.
    /// Example: /// Example: 17.292053
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSnr()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor timing bias in seconds.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTimingBias()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTags($j)
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTagsLength()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTransactionId()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: Descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getDescriptor()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \PassiveRadarObservation_Ingest_dataMode_Enum::REAL;
    }

    /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
    /// Example: /// Example: RADAR
    /// Constraints: No constraints specified.
    public function getType()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startPassiveRadarObservation_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(67);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return PassiveRadarObservation_Ingest
     */
    public static function createPassiveRadarObservation_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $obTime, $idOnOrbit, $satNo, $origObjectId, $idSensor, $origSensorId, $idRFEmitter, $idSensorRefReceiver, $extObservationId, $taskId, $trackId, $obPosition, $uct, $azimuth, $azimuthUnc, $azimuthBias, $azimuthRate, $elevation, $elevationUnc, $elevationBias, $elevationRate, $delay, $delayUnc, $delayBias, $bistaticRange, $bistaticRangeUnc, $bistaticRangeBias, $bistaticRangeRate, $bistaticRangeRateUnc, $bistaticRangeAccel, $bistaticRangeAccelUnc, $doppler, $dopplerUnc, $coning, $coningUnc, $tof, $tofUnc, $tofBias, $accel, $accelUnc, $ra, $declination, $lat, $lon, $alt, $xvel, $yvel, $zvel, $rcs, $rcsUnc, $orthogonalRcs, $orthogonalRcsUnc, $snr, $timingBias, $tags, $transactionId, $descriptor, $createdAt, $createdBy, $source, $origin, $origNetwork, $sourceDL, $dataMode, $type)
    {
        $builder->startObject(67);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addObTime($builder, $obTime);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addSatNo($builder, $satNo);
        self::addOrigObjectId($builder, $origObjectId);
        self::addIdSensor($builder, $idSensor);
        self::addOrigSensorId($builder, $origSensorId);
        self::addIdRFEmitter($builder, $idRFEmitter);
        self::addIdSensorRefReceiver($builder, $idSensorRefReceiver);
        self::addExtObservationId($builder, $extObservationId);
        self::addTaskId($builder, $taskId);
        self::addTrackId($builder, $trackId);
        self::addObPosition($builder, $obPosition);
        self::addUct($builder, $uct);
        self::addAzimuth($builder, $azimuth);
        self::addAzimuthUnc($builder, $azimuthUnc);
        self::addAzimuthBias($builder, $azimuthBias);
        self::addAzimuthRate($builder, $azimuthRate);
        self::addElevation($builder, $elevation);
        self::addElevationUnc($builder, $elevationUnc);
        self::addElevationBias($builder, $elevationBias);
        self::addElevationRate($builder, $elevationRate);
        self::addDelay($builder, $delay);
        self::addDelayUnc($builder, $delayUnc);
        self::addDelayBias($builder, $delayBias);
        self::addBistaticRange($builder, $bistaticRange);
        self::addBistaticRangeUnc($builder, $bistaticRangeUnc);
        self::addBistaticRangeBias($builder, $bistaticRangeBias);
        self::addBistaticRangeRate($builder, $bistaticRangeRate);
        self::addBistaticRangeRateUnc($builder, $bistaticRangeRateUnc);
        self::addBistaticRangeAccel($builder, $bistaticRangeAccel);
        self::addBistaticRangeAccelUnc($builder, $bistaticRangeAccelUnc);
        self::addDoppler($builder, $doppler);
        self::addDopplerUnc($builder, $dopplerUnc);
        self::addConing($builder, $coning);
        self::addConingUnc($builder, $coningUnc);
        self::addTof($builder, $tof);
        self::addTofUnc($builder, $tofUnc);
        self::addTofBias($builder, $tofBias);
        self::addAccel($builder, $accel);
        self::addAccelUnc($builder, $accelUnc);
        self::addRa($builder, $ra);
        self::addDeclination($builder, $declination);
        self::addLat($builder, $lat);
        self::addLon($builder, $lon);
        self::addAlt($builder, $alt);
        self::addXvel($builder, $xvel);
        self::addYvel($builder, $yvel);
        self::addZvel($builder, $zvel);
        self::addRcs($builder, $rcs);
        self::addRcsUnc($builder, $rcsUnc);
        self::addOrthogonalRcs($builder, $orthogonalRcs);
        self::addOrthogonalRcsUnc($builder, $orthogonalRcsUnc);
        self::addSnr($builder, $snr);
        self::addTimingBias($builder, $timingBias);
        self::addTags($builder, $tags);
        self::addTransactionId($builder, $transactionId);
        self::addDescriptor($builder, $descriptor);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addSourceDL($builder, $sourceDL);
        self::addDataMode($builder, $dataMode);
        self::addType($builder, $type);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObTime(FlatBufferBuilder $builder, $obTime)
    {
        $builder->addOffsetX(2, $obTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(3, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(4, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(5, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(6, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSensorId(FlatBufferBuilder $builder, $origSensorId)
    {
        $builder->addOffsetX(7, $origSensorId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdRFEmitter(FlatBufferBuilder $builder, $idRFEmitter)
    {
        $builder->addOffsetX(8, $idRFEmitter, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensorRefReceiver(FlatBufferBuilder $builder, $idSensorRefReceiver)
    {
        $builder->addOffsetX(9, $idSensorRefReceiver, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExtObservationId(FlatBufferBuilder $builder, $extObservationId)
    {
        $builder->addOffsetX(10, $extObservationId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskId(FlatBufferBuilder $builder, $taskId)
    {
        $builder->addOffsetX(11, $taskId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrackId(FlatBufferBuilder $builder, $trackId)
    {
        $builder->addOffsetX(12, $trackId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObPosition(FlatBufferBuilder $builder, $obPosition)
    {
        $builder->addOffsetX(13, $obPosition, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addUct(FlatBufferBuilder $builder, $uct)
    {
        $builder->addBoolX(14, $uct, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzimuth(FlatBufferBuilder $builder, $azimuth)
    {
        $builder->addDoubleX(15, $azimuth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzimuthUnc(FlatBufferBuilder $builder, $azimuthUnc)
    {
        $builder->addDoubleX(16, $azimuthUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzimuthBias(FlatBufferBuilder $builder, $azimuthBias)
    {
        $builder->addDoubleX(17, $azimuthBias, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzimuthRate(FlatBufferBuilder $builder, $azimuthRate)
    {
        $builder->addDoubleX(18, $azimuthRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevation(FlatBufferBuilder $builder, $elevation)
    {
        $builder->addDoubleX(19, $elevation, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevationUnc(FlatBufferBuilder $builder, $elevationUnc)
    {
        $builder->addDoubleX(20, $elevationUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevationBias(FlatBufferBuilder $builder, $elevationBias)
    {
        $builder->addDoubleX(21, $elevationBias, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevationRate(FlatBufferBuilder $builder, $elevationRate)
    {
        $builder->addDoubleX(22, $elevationRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDelay(FlatBufferBuilder $builder, $delay)
    {
        $builder->addDoubleX(23, $delay, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDelayUnc(FlatBufferBuilder $builder, $delayUnc)
    {
        $builder->addDoubleX(24, $delayUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDelayBias(FlatBufferBuilder $builder, $delayBias)
    {
        $builder->addDoubleX(25, $delayBias, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBistaticRange(FlatBufferBuilder $builder, $bistaticRange)
    {
        $builder->addDoubleX(26, $bistaticRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBistaticRangeUnc(FlatBufferBuilder $builder, $bistaticRangeUnc)
    {
        $builder->addDoubleX(27, $bistaticRangeUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBistaticRangeBias(FlatBufferBuilder $builder, $bistaticRangeBias)
    {
        $builder->addDoubleX(28, $bistaticRangeBias, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBistaticRangeRate(FlatBufferBuilder $builder, $bistaticRangeRate)
    {
        $builder->addDoubleX(29, $bistaticRangeRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBistaticRangeRateUnc(FlatBufferBuilder $builder, $bistaticRangeRateUnc)
    {
        $builder->addDoubleX(30, $bistaticRangeRateUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBistaticRangeAccel(FlatBufferBuilder $builder, $bistaticRangeAccel)
    {
        $builder->addDoubleX(31, $bistaticRangeAccel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBistaticRangeAccelUnc(FlatBufferBuilder $builder, $bistaticRangeAccelUnc)
    {
        $builder->addDoubleX(32, $bistaticRangeAccelUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDoppler(FlatBufferBuilder $builder, $doppler)
    {
        $builder->addDoubleX(33, $doppler, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDopplerUnc(FlatBufferBuilder $builder, $dopplerUnc)
    {
        $builder->addDoubleX(34, $dopplerUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addConing(FlatBufferBuilder $builder, $coning)
    {
        $builder->addDoubleX(35, $coning, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addConingUnc(FlatBufferBuilder $builder, $coningUnc)
    {
        $builder->addDoubleX(36, $coningUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTof(FlatBufferBuilder $builder, $tof)
    {
        $builder->addDoubleX(37, $tof, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTofUnc(FlatBufferBuilder $builder, $tofUnc)
    {
        $builder->addDoubleX(38, $tofUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTofBias(FlatBufferBuilder $builder, $tofBias)
    {
        $builder->addDoubleX(39, $tofBias, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAccel(FlatBufferBuilder $builder, $accel)
    {
        $builder->addDoubleX(40, $accel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAccelUnc(FlatBufferBuilder $builder, $accelUnc)
    {
        $builder->addDoubleX(41, $accelUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRa(FlatBufferBuilder $builder, $ra)
    {
        $builder->addDoubleX(42, $ra, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeclination(FlatBufferBuilder $builder, $declination)
    {
        $builder->addDoubleX(43, $declination, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLat(FlatBufferBuilder $builder, $lat)
    {
        $builder->addDoubleX(44, $lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLon(FlatBufferBuilder $builder, $lon)
    {
        $builder->addDoubleX(45, $lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAlt(FlatBufferBuilder $builder, $alt)
    {
        $builder->addDoubleX(46, $alt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addXvel(FlatBufferBuilder $builder, $xvel)
    {
        $builder->addDoubleX(47, $xvel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addYvel(FlatBufferBuilder $builder, $yvel)
    {
        $builder->addDoubleX(48, $yvel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZvel(FlatBufferBuilder $builder, $zvel)
    {
        $builder->addDoubleX(49, $zvel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRcs(FlatBufferBuilder $builder, $rcs)
    {
        $builder->addDoubleX(50, $rcs, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRcsUnc(FlatBufferBuilder $builder, $rcsUnc)
    {
        $builder->addDoubleX(51, $rcsUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOrthogonalRcs(FlatBufferBuilder $builder, $orthogonalRcs)
    {
        $builder->addDoubleX(52, $orthogonalRcs, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOrthogonalRcsUnc(FlatBufferBuilder $builder, $orthogonalRcsUnc)
    {
        $builder->addDoubleX(53, $orthogonalRcsUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSnr(FlatBufferBuilder $builder, $snr)
    {
        $builder->addDoubleX(54, $snr, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTimingBias(FlatBufferBuilder $builder, $timingBias)
    {
        $builder->addDoubleX(55, $timingBias, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTags(FlatBufferBuilder $builder, $tags)
    {
        $builder->addOffsetX(56, $tags, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTagsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTagsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransactionId(FlatBufferBuilder $builder, $transactionId)
    {
        $builder->addOffsetX(57, $transactionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescriptor(FlatBufferBuilder $builder, $descriptor)
    {
        $builder->addOffsetX(58, $descriptor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(59, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(60, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(61, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(62, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(63, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(64, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(65, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(66, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endPassiveRadarObservation_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishPassiveRadarObservation_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "PASS");
    }
}
