<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Airfield slot use data. Contains the dynamic data associated with the status and use of specific airfield slots.
class AirfieldSlotConsumption_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AirfieldSlotConsumption_Ingest
     */
    public static function getRootAsAirfieldSlotConsumption_Ingest(ByteBuffer $bb)
    {
        $obj = new AirfieldSlotConsumption_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AirfieldSlotConsumption_IngestIdentifier()
    {
        return "AIRF";
    }

    public static function AirfieldSlotConsumption_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AirfieldSlotConsumption_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AirfieldSlotConsumption_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the airfield slot for which this slot consumption record is referencing.
    /// Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdAirfieldSlot()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).
    /// Example: /// Example: APPROVED
    /// Constraints: Minimum length = 0, Maximum length = 9
    /**
     * @return sbyte
     */
    public function getStatus()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AirfieldSlotConsumption_Ingest_status_Enum::REQUESTED;
    }

    /// Flag indicating if the slot is occupied.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getOccupied()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Identifying name of the aircraft using this slot. Names are often Prior Permission Required (PPR) numbers or other similar human-readable identifiers.
    /// Example: /// Example: APRON1-230401001
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getConsumer()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The aircraft Model Design Series designation of the aircraft occupying this slot.
    /// Example: /// Example: C017A
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOccAircraftMDS()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The tail number of the aircraft occupying this slot.
    /// Example: /// Example: N702JG
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getOccTailNumber()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of call signs of the aircraft using this slot.
    /// Example: /// Example: ['RCH123', 'ABC123', 'LLS442']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCallSigns($j)
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCallSignsLength()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Mission identifier using this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
    /// Example: /// Example: AJM123456123
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getMissionId()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of aircraft using this slot for this time.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumAircraft()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Time the aircraft began occupying this slot, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-01-01T01:01:03.123Z
    /// Constraints: No constraints specified.
    public function getOccStartTime()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The aircraft Model Design Series designation of the aircraft this slot is reserved for.
    /// Example: /// Example: C017A
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getResAircraftMDS()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The tail number of the aircraft this slot is reserved for.
    /// Example: /// Example: N702JG
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getResTailNumber()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the type of reservation (e.g. M for Mission, A for Aircraft, O for Other).
    /// Example: /// Example: M
    /// Constraints: Minimum length = 0, Maximum length = 2
    public function getResType()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reason the slot reservation was made.
    /// Example: /// Example: Maintenance needed
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getResReason()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mission identifier reserving this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
    /// Example: /// Example: AJM123456123
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getResMissionId()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The start of the slot window, in ISO 8601 UTC format.
    /// Example: /// Example: 2023-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getStartTime()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The end of the slot window, in ISO 8601 UTC format.
    /// Example: /// Example: 2023-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getEndTime()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The desired time for aircraft action such as landing, take off, parking, etc., in ISO 8601 UTC format.
    /// Example: /// Example: 2023-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getTargetTime()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the sortie arriving at the slot start time.
    /// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdArrSortie()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the sortie departing at the slot end time.
    /// Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdDepSortie()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Alternate identifier of the sortie arriving at the slot start time provided by the source.
    /// Example: /// Example: ALT-SORTIE-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAltArrSortieId()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Alternate identifier of the sortie departing at the slot end time provided by the source.
    /// Example: /// Example: ALT-SORTIE-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAltDepSortieId()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Comments from the requester.
    /// Example: /// Example: Sorry for the late notice.
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getReqComment()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Comments from the approver.
    /// Example: /// Example: The request was denied due to inoperable fuel pumps.
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getAppComment()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Short name of the organization requesting use of this slot.
    /// Example: /// Example: TACC
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getReqOrg()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Initials of the person requesting the use of this slot. Use SYSTEM if this request is auto-generated by an auto-planning system.
    /// Example: /// Example: CB
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getReqInitials()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Short name of the organization approving the use of this slot.
    /// Example: /// Example: KCHS/BOPS
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getAppOrg()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Initials of the person approving the use of this slot. Use SYSTEM if auto-approved without human involvement.
    /// Example: /// Example: CB
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getAppInitials()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AirfieldSlotConsumption_Ingest_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAirfieldSlotConsumption_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(37);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AirfieldSlotConsumption_Ingest
     */
    public static function createAirfieldSlotConsumption_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $idAirfieldSlot, $status, $occupied, $consumer, $occAircraftMDS, $occTailNumber, $callSigns, $missionId, $numAircraft, $occStartTime, $resAircraftMDS, $resTailNumber, $resType, $resReason, $resMissionId, $startTime, $endTime, $targetTime, $idArrSortie, $idDepSortie, $altArrSortieId, $altDepSortieId, $reqComment, $appComment, $reqOrg, $reqInitials, $appOrg, $appInitials, $createdAt, $createdBy, $sourceDL, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(37);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdAirfieldSlot($builder, $idAirfieldSlot);
        self::addStatus($builder, $status);
        self::addOccupied($builder, $occupied);
        self::addConsumer($builder, $consumer);
        self::addOccAircraftMDS($builder, $occAircraftMDS);
        self::addOccTailNumber($builder, $occTailNumber);
        self::addCallSigns($builder, $callSigns);
        self::addMissionId($builder, $missionId);
        self::addNumAircraft($builder, $numAircraft);
        self::addOccStartTime($builder, $occStartTime);
        self::addResAircraftMDS($builder, $resAircraftMDS);
        self::addResTailNumber($builder, $resTailNumber);
        self::addResType($builder, $resType);
        self::addResReason($builder, $resReason);
        self::addResMissionId($builder, $resMissionId);
        self::addStartTime($builder, $startTime);
        self::addEndTime($builder, $endTime);
        self::addTargetTime($builder, $targetTime);
        self::addIdArrSortie($builder, $idArrSortie);
        self::addIdDepSortie($builder, $idDepSortie);
        self::addAltArrSortieId($builder, $altArrSortieId);
        self::addAltDepSortieId($builder, $altDepSortieId);
        self::addReqComment($builder, $reqComment);
        self::addAppComment($builder, $appComment);
        self::addReqOrg($builder, $reqOrg);
        self::addReqInitials($builder, $reqInitials);
        self::addAppOrg($builder, $appOrg);
        self::addAppInitials($builder, $appInitials);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdAirfieldSlot(FlatBufferBuilder $builder, $idAirfieldSlot)
    {
        $builder->addOffsetX(2, $idAirfieldSlot, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addStatus(FlatBufferBuilder $builder, $status)
    {
        $builder->addSbyteX(3, $status, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addOccupied(FlatBufferBuilder $builder, $occupied)
    {
        $builder->addBoolX(4, $occupied, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addConsumer(FlatBufferBuilder $builder, $consumer)
    {
        $builder->addOffsetX(5, $consumer, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOccAircraftMDS(FlatBufferBuilder $builder, $occAircraftMDS)
    {
        $builder->addOffsetX(6, $occAircraftMDS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOccTailNumber(FlatBufferBuilder $builder, $occTailNumber)
    {
        $builder->addOffsetX(7, $occTailNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCallSigns(FlatBufferBuilder $builder, $callSigns)
    {
        $builder->addOffsetX(8, $callSigns, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCallSignsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCallSignsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionId(FlatBufferBuilder $builder, $missionId)
    {
        $builder->addOffsetX(9, $missionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumAircraft(FlatBufferBuilder $builder, $numAircraft)
    {
        $builder->addIntX(10, $numAircraft, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOccStartTime(FlatBufferBuilder $builder, $occStartTime)
    {
        $builder->addOffsetX(11, $occStartTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addResAircraftMDS(FlatBufferBuilder $builder, $resAircraftMDS)
    {
        $builder->addOffsetX(12, $resAircraftMDS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addResTailNumber(FlatBufferBuilder $builder, $resTailNumber)
    {
        $builder->addOffsetX(13, $resTailNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addResType(FlatBufferBuilder $builder, $resType)
    {
        $builder->addOffsetX(14, $resType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addResReason(FlatBufferBuilder $builder, $resReason)
    {
        $builder->addOffsetX(15, $resReason, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addResMissionId(FlatBufferBuilder $builder, $resMissionId)
    {
        $builder->addOffsetX(16, $resMissionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStartTime(FlatBufferBuilder $builder, $startTime)
    {
        $builder->addOffsetX(17, $startTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEndTime(FlatBufferBuilder $builder, $endTime)
    {
        $builder->addOffsetX(18, $endTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTargetTime(FlatBufferBuilder $builder, $targetTime)
    {
        $builder->addOffsetX(19, $targetTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdArrSortie(FlatBufferBuilder $builder, $idArrSortie)
    {
        $builder->addOffsetX(20, $idArrSortie, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdDepSortie(FlatBufferBuilder $builder, $idDepSortie)
    {
        $builder->addOffsetX(21, $idDepSortie, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltArrSortieId(FlatBufferBuilder $builder, $altArrSortieId)
    {
        $builder->addOffsetX(22, $altArrSortieId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltDepSortieId(FlatBufferBuilder $builder, $altDepSortieId)
    {
        $builder->addOffsetX(23, $altDepSortieId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReqComment(FlatBufferBuilder $builder, $reqComment)
    {
        $builder->addOffsetX(24, $reqComment, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAppComment(FlatBufferBuilder $builder, $appComment)
    {
        $builder->addOffsetX(25, $appComment, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReqOrg(FlatBufferBuilder $builder, $reqOrg)
    {
        $builder->addOffsetX(26, $reqOrg, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReqInitials(FlatBufferBuilder $builder, $reqInitials)
    {
        $builder->addOffsetX(27, $reqInitials, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAppOrg(FlatBufferBuilder $builder, $appOrg)
    {
        $builder->addOffsetX(28, $appOrg, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAppInitials(FlatBufferBuilder $builder, $appInitials)
    {
        $builder->addOffsetX(29, $appInitials, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(30, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(31, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(32, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(33, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(34, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(35, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(36, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAirfieldSlotConsumption_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAirfieldSlotConsumption_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRF");
    }
}
