<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Information obtained for vital signs.
class EvacVitalSignData_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EvacVitalSignData_Full
     */
    public static function getRootAsEvacVitalSignData_Full(ByteBuffer $bb)
    {
        $obj = new EvacVitalSignData_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EvacVitalSignData_FullIdentifier()
    {
        return "EVAC";
    }

    public static function EvacVitalSignData_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EvacVitalSignData_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EvacVitalSignData_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE, TEMPERATURE CORE, etc.).
    /// Example: /// Example: HEART RATE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getVitalSign()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Vital sign value 1.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
    /// Example: /// Example: 120
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVitalSign1()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Vital sign value 2.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
    /// Example: /// Example: 80
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVitalSign2()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Medical confidence factor.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMedConfFactor()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
    /// Example: /// Example: 2021-10-15T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getTime()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEvacVitalSignData_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(5);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EvacVitalSignData_Full
     */
    public static function createEvacVitalSignData_Full(FlatBufferBuilder $builder, $vitalSign, $vitalSign1, $vitalSign2, $medConfFactor, $time)
    {
        $builder->startObject(5);
        self::addVitalSign($builder, $vitalSign);
        self::addVitalSign1($builder, $vitalSign1);
        self::addVitalSign2($builder, $vitalSign2);
        self::addMedConfFactor($builder, $medConfFactor);
        self::addTime($builder, $time);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVitalSign(FlatBufferBuilder $builder, $vitalSign)
    {
        $builder->addOffsetX(0, $vitalSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVitalSign1(FlatBufferBuilder $builder, $vitalSign1)
    {
        $builder->addDoubleX(1, $vitalSign1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVitalSign2(FlatBufferBuilder $builder, $vitalSign2)
    {
        $builder->addDoubleX(2, $vitalSign2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMedConfFactor(FlatBufferBuilder $builder, $medConfFactor)
    {
        $builder->addIntX(3, $medConfFactor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTime(FlatBufferBuilder $builder, $time)
    {
        $builder->addOffsetX(4, $time, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEvacVitalSignData_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEvacVitalSignData_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "EVAC");
    }
}
