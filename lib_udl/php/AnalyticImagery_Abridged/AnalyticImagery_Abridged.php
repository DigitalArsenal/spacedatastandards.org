<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// The analytic imagery schema supports data plots and graphics of various types. The records contain general file information, allows for annotations to user-defined areas of interest on the graphics, and supports keyword searching.
class AnalyticImagery_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AnalyticImagery_Abridged
     */
    public static function getRootAsAnalyticImagery_Abridged(ByteBuffer $bb)
    {
        $obj = new AnalyticImagery_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AnalyticImagery_AbridgedIdentifier()
    {
        return "ANAL";
    }

    public static function AnalyticImagery_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AnalyticImagery_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AnalyticImagery_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ANALYTIC-IMAGERY-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// General type of content of this image (CONTOUR, DIAGRAM, HEATMAP, HISTOGRAM, PLOT, SCREENSHOT).
    /// Example: /// Example: CONTOUR
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getContent()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The message time of this image record, in ISO8601 UTC format with millisecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getMsgTime()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of image associated with this record (GIF, JPG, PNG, TIF).
    /// Example: /// Example: JPG
    /// Constraints: Minimum length = 1, Maximum length = 16
    public function getImageType()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The image file name.
    /// Example: /// Example: IMAGE-NAME
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getFilename()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The image file size, in bytes.  The maximum file size for this service is 40,000,000 bytes (40MB). Files exceeding the maximum size will be rejected.
    /// Example: /// Example: 7654321
    /// Constraints: No constraints specified.
    /**
     * @return long
     */
    public function getFilesize()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /// The image width (horizontal), in pixels.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getImgWidth()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The image height (vertical), in pixels.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getImgHeight()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional field indicating the units that apply to the x-axis of the attached image, when applicable.
    /// Example: /// Example: pixels
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getXUnits()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional field indicating the units that apply to the y-axis of the attached image, when applicable.
    /// Example: /// Example: pixels
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getYUnits()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional field indicating the units that apply to the z-axis of the attached image, when applicable.
    /// Example: /// Example: pixels
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getZUnits()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// User-defined set ID of a sequence of images.  Used to associate related analytic image records.
    /// Example: /// Example: IMAGE-IDS
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getImageSetId()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The number of images in an image set.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getImageSetLength()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The sequence number of an image within an image set.  If null, then it is assumed that the order of images in an imageSet is not relevant.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSequenceId()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Description of the image content and utility.
    /// Example: /// Example: Image description
    /// Constraints: Minimum length = 1, Maximum length = 512
    public function getDescription()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The start time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getDataStart()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The stop time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getDataStop()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Rectangular annotation limits, specified in pixels, as an array of arrays of the coordinates [ [UL1x, UL1y], [UR1x, UR1y], [LR1x, LR1y], [LL1x, LL1y] ], indicating the corners of a rectangle beginning with the Upper Left (UL) and moving clockwise. Allows the image provider to highlight one or more rectangular area(s) of interest. The array must contain Nx4 two-element arrays, where N is the number of rectangles of interest.  The associated annotation(s) should be included in the annText array.
    /// Example: /// Example: [[1, 1], [1, 2], [1, 3], [1, 4]]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAnnLims($j)
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAnnLimsLength()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Annotation text, a string array of annotation(s) corresponding to the rectangular areas specified in annLims.  This array contains the annotation text associated with the areas of interest indicated in annLims, in order.  This array should contain one annotation per four values of the area (annLims) array.
    /// Example: /// Example: ['rec1', 'rec2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAnnText($j)
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAnnTextLength()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of searchable keywords for this analytic imagery record.
    /// Example: /// Example: ['Key1', 'Key2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getKeywords($j)
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getKeywordsLength()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    public function getAtext()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    /// Constraints: No constraints specified.
    public function getAgjson()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of region as projected on the ground.
    /// Example: /// Example: POLYGON
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getAtype()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of dimensions of the geometry depicted by region.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAndims()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Geographical spatial_ref_sys for region.
    /// Example: /// Example: 4326
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAsrid()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Assessed satellite ID (NORAD RSO object number).  The 'satId' and 'satIdConf' arrays must match in size.
    /// Example: /// Example: [12004, 12005]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSatId($j)
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSatIdLength()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Assessed satellite confidence corresponding to an assessment ID.  Values are between 0.0 and 1.0.  The 'satId' and 'satIdConf' arrays must match in size.
    /// Example: /// Example: [0.98, 0.22]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSatIdConf($j)
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSatIdConfLength()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this image. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: /// Example: ['MTI', 'POI']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSrcTyps($j)
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSrcTypsLength()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of UUIDs of the UDL data records that are related to this image. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
    /// Example: /// Example: ['DOA_ID', 'DWELL_ID']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSrcIds($j)
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSrcIdsLength()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTags($j)
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTagsLength()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// MD5 checksum value of the file. The ingest/create operation will automatically generate the value.
    /// Example: /// Example: 123
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getChecksumValue()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTransactionId()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSource()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: ORIGIN
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: TST1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AnalyticImagery_Abridged_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAnalyticImagery_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(40);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AnalyticImagery_Abridged
     */
    public static function createAnalyticImagery_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $content, $msgTime, $imageType, $filename, $filesize, $imgWidth, $imgHeight, $xUnits, $yUnits, $zUnits, $imageSetId, $imageSetLength, $sequenceId, $description, $dataStart, $dataStop, $annLims, $annText, $keywords, $atext, $agjson, $atype, $andims, $asrid, $satId, $satIdConf, $srcTyps, $srcIds, $tags, $checksumValue, $transactionId, $createdAt, $createdBy, $source, $origin, $origNetwork, $sourceDL, $dataMode)
    {
        $builder->startObject(40);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addContent($builder, $content);
        self::addMsgTime($builder, $msgTime);
        self::addImageType($builder, $imageType);
        self::addFilename($builder, $filename);
        self::addFilesize($builder, $filesize);
        self::addImgWidth($builder, $imgWidth);
        self::addImgHeight($builder, $imgHeight);
        self::addXUnits($builder, $xUnits);
        self::addYUnits($builder, $yUnits);
        self::addZUnits($builder, $zUnits);
        self::addImageSetId($builder, $imageSetId);
        self::addImageSetLength($builder, $imageSetLength);
        self::addSequenceId($builder, $sequenceId);
        self::addDescription($builder, $description);
        self::addDataStart($builder, $dataStart);
        self::addDataStop($builder, $dataStop);
        self::addAnnLims($builder, $annLims);
        self::addAnnText($builder, $annText);
        self::addKeywords($builder, $keywords);
        self::addAtext($builder, $atext);
        self::addAgjson($builder, $agjson);
        self::addAtype($builder, $atype);
        self::addAndims($builder, $andims);
        self::addAsrid($builder, $asrid);
        self::addSatId($builder, $satId);
        self::addSatIdConf($builder, $satIdConf);
        self::addSrcTyps($builder, $srcTyps);
        self::addSrcIds($builder, $srcIds);
        self::addTags($builder, $tags);
        self::addChecksumValue($builder, $checksumValue);
        self::addTransactionId($builder, $transactionId);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addSourceDL($builder, $sourceDL);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addContent(FlatBufferBuilder $builder, $content)
    {
        $builder->addOffsetX(2, $content, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsgTime(FlatBufferBuilder $builder, $msgTime)
    {
        $builder->addOffsetX(3, $msgTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addImageType(FlatBufferBuilder $builder, $imageType)
    {
        $builder->addOffsetX(4, $imageType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFilename(FlatBufferBuilder $builder, $filename)
    {
        $builder->addOffsetX(5, $filename, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addFilesize(FlatBufferBuilder $builder, $filesize)
    {
        $builder->addLongX(6, $filesize, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addImgWidth(FlatBufferBuilder $builder, $imgWidth)
    {
        $builder->addIntX(7, $imgWidth, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addImgHeight(FlatBufferBuilder $builder, $imgHeight)
    {
        $builder->addIntX(8, $imgHeight, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addXUnits(FlatBufferBuilder $builder, $xUnits)
    {
        $builder->addOffsetX(9, $xUnits, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addYUnits(FlatBufferBuilder $builder, $yUnits)
    {
        $builder->addOffsetX(10, $yUnits, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addZUnits(FlatBufferBuilder $builder, $zUnits)
    {
        $builder->addOffsetX(11, $zUnits, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addImageSetId(FlatBufferBuilder $builder, $imageSetId)
    {
        $builder->addOffsetX(12, $imageSetId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addImageSetLength(FlatBufferBuilder $builder, $imageSetLength)
    {
        $builder->addIntX(13, $imageSetLength, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSequenceId(FlatBufferBuilder $builder, $sequenceId)
    {
        $builder->addIntX(14, $sequenceId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(15, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDataStart(FlatBufferBuilder $builder, $dataStart)
    {
        $builder->addOffsetX(16, $dataStart, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDataStop(FlatBufferBuilder $builder, $dataStop)
    {
        $builder->addOffsetX(17, $dataStop, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAnnLims(FlatBufferBuilder $builder, $annLims)
    {
        $builder->addOffsetX(18, $annLims, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAnnLimsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAnnLimsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAnnText(FlatBufferBuilder $builder, $annText)
    {
        $builder->addOffsetX(19, $annText, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAnnTextVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAnnTextVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addKeywords(FlatBufferBuilder $builder, $keywords)
    {
        $builder->addOffsetX(20, $keywords, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createKeywordsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startKeywordsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAtext(FlatBufferBuilder $builder, $atext)
    {
        $builder->addOffsetX(21, $atext, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAgjson(FlatBufferBuilder $builder, $agjson)
    {
        $builder->addOffsetX(22, $agjson, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAtype(FlatBufferBuilder $builder, $atype)
    {
        $builder->addOffsetX(23, $atype, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAndims(FlatBufferBuilder $builder, $andims)
    {
        $builder->addIntX(24, $andims, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAsrid(FlatBufferBuilder $builder, $asrid)
    {
        $builder->addIntX(25, $asrid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSatId(FlatBufferBuilder $builder, $satId)
    {
        $builder->addOffsetX(26, $satId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSatIdVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSatIdVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSatIdConf(FlatBufferBuilder $builder, $satIdConf)
    {
        $builder->addOffsetX(27, $satIdConf, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSatIdConfVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSatIdConfVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSrcTyps(FlatBufferBuilder $builder, $srcTyps)
    {
        $builder->addOffsetX(28, $srcTyps, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSrcTypsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSrcTypsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSrcIds(FlatBufferBuilder $builder, $srcIds)
    {
        $builder->addOffsetX(29, $srcIds, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSrcIdsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSrcIdsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTags(FlatBufferBuilder $builder, $tags)
    {
        $builder->addOffsetX(30, $tags, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTagsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTagsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addChecksumValue(FlatBufferBuilder $builder, $checksumValue)
    {
        $builder->addOffsetX(31, $checksumValue, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransactionId(FlatBufferBuilder $builder, $transactionId)
    {
        $builder->addOffsetX(32, $transactionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(33, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(34, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(35, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(36, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(37, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(38, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(39, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAnalyticImagery_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAnalyticImagery_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ANAL");
    }
}
