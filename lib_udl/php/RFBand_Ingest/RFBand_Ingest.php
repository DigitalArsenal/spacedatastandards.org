<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.
class RFBand_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RFBand_Ingest
     */
    public static function getRootAsRFBand_Ingest(ByteBuffer $bb)
    {
        $obj = new RFBand_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function RFBand_IngestIdentifier()
    {
        return "RFBA";
    }

    public static function RFBand_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::RFBand_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RFBand_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: RFBAND-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the parent Entity which uses this band.
    /// Example: /// Example: ENTITY-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdEntity()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// RF Band name.
    /// Example: /// Example: BAND_NAME
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getName()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
    /// Example: /// Example: Ku
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getBand()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// RF Band mode (e.g. TX, RX).
    /// Example: /// Example: TX
    /// Constraints: Minimum length = 0, Maximum length = 4
    /**
     * @return sbyte
     */
    public function getMode()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \RFBand_Ingest_mode_Enum::TX;
    }

    /// Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).
    /// Example: /// Example: TTC
    /// Constraints: Minimum length = 0, Maximum length = 16
    /**
     * @return sbyte
     */
    public function getPurpose()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \RFBand_Ingest_purpose_Enum::COMM;
    }

    /// Start/minimum of transmit RF frequency range, if applicable, in Mhz.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFreqMin()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// End/maximum of transmit RF frequency range, if applicable, in Mhz.
    /// Example: /// Example: 2000.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFreqMax()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Center frequency of RF frequency range, if applicable, in Mhz.
    /// Example: /// Example: 1000.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCenterFreq()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// RF Range maximum gain, in dBi.
    /// Example: /// Example: 120.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPeakGain()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// RF Range edge gain, in dBi.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEdgeGain()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// RF Band frequency range bandwidth in Mhz.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBandwidth()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBeamwidth()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.
    /// Example: /// Example: H
    /// Constraints: Minimum length = 0, Maximum length = 4
    /**
     * @return sbyte
     */
    public function getPolarization()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \RFBand_Ingest_polarization_Enum::H;
    }

    /// Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
    /// Example: /// Example: 2.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getErp()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
    /// Example: /// Example: 2.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEirp()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \RFBand_Ingest_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRFBand_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(23);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RFBand_Ingest
     */
    public static function createRFBand_Ingest(FlatBufferBuilder $builder, $id, $idEntity, $classificationMarking, $name, $band, $mode, $purpose, $freqMin, $freqMax, $centerFreq, $peakGain, $edgeGain, $bandwidth, $beamwidth, $polarization, $erp, $eirp, $source, $origin, $dataMode, $createdAt, $createdBy, $origNetwork)
    {
        $builder->startObject(23);
        self::addId($builder, $id);
        self::addIdEntity($builder, $idEntity);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addName($builder, $name);
        self::addBand($builder, $band);
        self::addMode($builder, $mode);
        self::addPurpose($builder, $purpose);
        self::addFreqMin($builder, $freqMin);
        self::addFreqMax($builder, $freqMax);
        self::addCenterFreq($builder, $centerFreq);
        self::addPeakGain($builder, $peakGain);
        self::addEdgeGain($builder, $edgeGain);
        self::addBandwidth($builder, $bandwidth);
        self::addBeamwidth($builder, $beamwidth);
        self::addPolarization($builder, $polarization);
        self::addErp($builder, $erp);
        self::addEirp($builder, $eirp);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdEntity(FlatBufferBuilder $builder, $idEntity)
    {
        $builder->addOffsetX(1, $idEntity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(2, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(3, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBand(FlatBufferBuilder $builder, $band)
    {
        $builder->addOffsetX(4, $band, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addMode(FlatBufferBuilder $builder, $mode)
    {
        $builder->addSbyteX(5, $mode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addPurpose(FlatBufferBuilder $builder, $purpose)
    {
        $builder->addSbyteX(6, $purpose, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFreqMin(FlatBufferBuilder $builder, $freqMin)
    {
        $builder->addDoubleX(7, $freqMin, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFreqMax(FlatBufferBuilder $builder, $freqMax)
    {
        $builder->addDoubleX(8, $freqMax, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCenterFreq(FlatBufferBuilder $builder, $centerFreq)
    {
        $builder->addDoubleX(9, $centerFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPeakGain(FlatBufferBuilder $builder, $peakGain)
    {
        $builder->addDoubleX(10, $peakGain, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEdgeGain(FlatBufferBuilder $builder, $edgeGain)
    {
        $builder->addDoubleX(11, $edgeGain, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBandwidth(FlatBufferBuilder $builder, $bandwidth)
    {
        $builder->addDoubleX(12, $bandwidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBeamwidth(FlatBufferBuilder $builder, $beamwidth)
    {
        $builder->addDoubleX(13, $beamwidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addPolarization(FlatBufferBuilder $builder, $polarization)
    {
        $builder->addSbyteX(14, $polarization, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addErp(FlatBufferBuilder $builder, $erp)
    {
        $builder->addDoubleX(15, $erp, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEirp(FlatBufferBuilder $builder, $eirp)
    {
        $builder->addDoubleX(16, $eirp, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(17, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(18, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(19, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(20, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(21, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(22, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRFBand_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishRFBand_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "RFBA");
    }
}
