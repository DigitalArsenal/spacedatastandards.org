<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Aircraft readiness and status data. Contains the dynamic data associated with the specific aircraft status, either in-flight or on-ground, including remaining fuel, mission readiness, and inventory, etc.
class AircraftStatus_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AircraftStatus_Abridged
     */
    public static function getRootAsAircraftStatus_Abridged(ByteBuffer $bb)
    {
        $obj = new AircraftStatus_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AircraftStatus_AbridgedIdentifier()
    {
        return "AIRC";
    }

    public static function AircraftStatus_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AircraftStatus_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AircraftStatus_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the aircraft.
    /// Example: /// Example: 29232269-e4c2-45c9-aa21-039a33209340
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdAircraft()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Alternate Aircraft Identifier provided by source.
    /// Example: /// Example: ORIG-AIRCRAFT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAltAircraftId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED, AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).
    /// Example: /// Example: AVAILABLE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCurrentState()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// If not airborne, the unique identifier of the installation currently hosting the aircraft.
    /// Example: /// Example: b89430e3-97d9-408c-9c89-fd3840c4b84d
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdAirfield()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// US Air Force geographic location code of the airfield where the aircraft is located.
    /// Example: /// Example: AJJY
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getGeoLoc()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The International Civil Aviation Organization (ICAO) code at which this aircraft was previously located.
    /// Example: /// Example: EGLL
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getPreviousICAO()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The International Civil Aviation Organization (ICAO) code at which this aircraft is currently located or has most recently departed, if airborne.
    /// Example: /// Example: KCHS
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getCurrentICAO()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The International Civil Aviation Organization (ICAO) code of the next destination of this aircraft.
    /// Example: /// Example: PHNL
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getNextICAO()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the aircraft.
    /// Example: /// Example: Landing
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getFlightPhase()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The turnaround start time, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getTaStartTime()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getEarliestTAEndTime()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
    /// Example: /// Example: ABLE
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getMissionReadiness()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The mass of fuel remaining on the aircraft, in kilograms.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getFuel()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Used in conjunction with the fuel field to indicate either burnable or offload fuel.
    /// Example: /// Example: Burn
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getFuelFunction()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating that the aircraft is capable of making at least one gun pass.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getGunCapable()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
    /// Example: /// Example: 7.62 MM
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getGunRdsType()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The lower bound of the estimated number of gun rounds available.
    /// Example: /// Example: 150
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getGunRdsMin()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The upper bound of the estimated number of gun rounds available.
    /// Example: /// Example: 550
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getGunRdsMax()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
    /// Example: /// Example: OPERATIONAL
    /// Constraints: Minimum length = 0, Maximum length = 16
    /**
     * @return sbyte
     */
    public function getAirToAirStatus()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AircraftStatus_Abridged_airToAirStatus_Enum::OPERATIONAL;
    }

    /// The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
    /// Example: /// Example: OPERATIONAL
    /// Constraints: Minimum length = 0, Maximum length = 16
    /**
     * @return sbyte
     */
    public function getAirToGroundStatus()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AircraftStatus_Abridged_airToGroundStatus_Enum::OPERATIONAL;
    }

    /// Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9 SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific/store type designations.  This array must be the same length as inventoryMin and inventoryMax.
    /// Example: /// Example: ['AIM-9 SIDEWINDER', 'AIM-120 AMRAAM']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getInventory($j)
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getInventoryLength()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the lower bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMax.
    /// Example: /// Example: [1, 2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getInventoryMin($j)
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getInventoryMinLength()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the upper bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMin.
    /// Example: /// Example: [2, 2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getInventoryMax($j)
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getInventoryMaxLength()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// List of unavailable systems that would normally be on this aircraft.
    /// Example: /// Example: ['CMDS', 'AOC']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getUnavailableSys($j)
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getUnavailableSysLength()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// List of additional operational systems on this aircraft beyond what is normally available.
    /// Example: /// Example: ['ATOMS', 'TUDL', 'BLOS1']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAdditionalSys($j)
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAdditionalSysLength()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Optional notes/comments concerning this aircraft status.
    /// Example: /// Example: Some notes for aircraft A
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getNotes()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Maintenance pacing remarks assocociated with this aircraft.
    /// Example: /// Example: COM2 INOP
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getMxRemark()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The maintenance status of the aircraft.
    /// Example: /// Example: maintenance status
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getMaintStatus()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the maintenance discrepancy that drives the current maintenance status.
    /// Example: /// Example: SCREW STUCK IN LEFT NLG TIRE
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getMaintStatusDriver()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the priority of the maintenance effort.
    /// Example: /// Example: 1
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getMaintPriority()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Aircraft alpha status code that indicates the aircraft maintenance status estimated by the pilot.
    /// Example: /// Example: A2
    /// Constraints: Minimum length = 0, Maximum length = 2
    public function getAlphaStatusCode()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time of the last maintenance status update, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getMaintStatusUpdate()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Date when the military aircraft inspection was last performed, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-09-09T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getLastInspectionDate()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Military aircraft maintenance point of contact for this aircraft.
    /// Example: /// Example: PSUP NIGHT SHIFT 800-555-4412
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMaintPoc()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR, etc.).
    /// Example: /// Example: ALERT
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getGroundStatus()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED, DECONTAMINATED, UNKNOWN, etc.).
    /// Example: /// Example: CLEAR
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getContaminationStatus()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL, OTHER, REQUESTED, etc.).
    /// Example: /// Example: DELIVERED
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getFuelStatus()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name or ID of the external user that updated this status.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getLastUpdatedBy()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the course of action to resolve the issue will be determined.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getTroubleshootEtic()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the issue will be resolved.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getEtic()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The parking location of this aircraft.
    /// Example: /// Example: B1
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getParkLocation()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
    /// Example: /// Example: GDSS
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getParkLocationSystem()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the Point of Interest (POI) record related to this aircraft status. This will generally represent the location of an aircraft on the ground.
    /// Example: /// Example: 0e52f081-a2e3-4b73-b822-88b882232691
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdPOI()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AircraftStatus_Abridged_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAircraftStatus_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(52);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AircraftStatus_Abridged
     */
    public static function createAircraftStatus_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $idAircraft, $altAircraftId, $currentState, $idAirfield, $geoLoc, $previousICAO, $currentICAO, $nextICAO, $flightPhase, $taStartTime, $earliestTAEndTime, $missionReadiness, $fuel, $fuelFunction, $gunCapable, $gunRdsType, $gunRdsMin, $gunRdsMax, $airToAirStatus, $airToGroundStatus, $inventory, $inventoryMin, $inventoryMax, $unavailableSys, $additionalSys, $notes, $mxRemark, $maintStatus, $maintStatusDriver, $maintPriority, $alphaStatusCode, $maintStatusUpdate, $lastInspectionDate, $maintPoc, $groundStatus, $contaminationStatus, $fuelStatus, $lastUpdatedBy, $troubleshootEtic, $etic, $parkLocation, $parkLocationSystem, $idPOI, $createdAt, $createdBy, $sourceDL, $source, $origin, $dataMode, $origNetwork)
    {
        $builder->startObject(52);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdAircraft($builder, $idAircraft);
        self::addAltAircraftId($builder, $altAircraftId);
        self::addCurrentState($builder, $currentState);
        self::addIdAirfield($builder, $idAirfield);
        self::addGeoLoc($builder, $geoLoc);
        self::addPreviousICAO($builder, $previousICAO);
        self::addCurrentICAO($builder, $currentICAO);
        self::addNextICAO($builder, $nextICAO);
        self::addFlightPhase($builder, $flightPhase);
        self::addTaStartTime($builder, $taStartTime);
        self::addEarliestTAEndTime($builder, $earliestTAEndTime);
        self::addMissionReadiness($builder, $missionReadiness);
        self::addFuel($builder, $fuel);
        self::addFuelFunction($builder, $fuelFunction);
        self::addGunCapable($builder, $gunCapable);
        self::addGunRdsType($builder, $gunRdsType);
        self::addGunRdsMin($builder, $gunRdsMin);
        self::addGunRdsMax($builder, $gunRdsMax);
        self::addAirToAirStatus($builder, $airToAirStatus);
        self::addAirToGroundStatus($builder, $airToGroundStatus);
        self::addInventory($builder, $inventory);
        self::addInventoryMin($builder, $inventoryMin);
        self::addInventoryMax($builder, $inventoryMax);
        self::addUnavailableSys($builder, $unavailableSys);
        self::addAdditionalSys($builder, $additionalSys);
        self::addNotes($builder, $notes);
        self::addMxRemark($builder, $mxRemark);
        self::addMaintStatus($builder, $maintStatus);
        self::addMaintStatusDriver($builder, $maintStatusDriver);
        self::addMaintPriority($builder, $maintPriority);
        self::addAlphaStatusCode($builder, $alphaStatusCode);
        self::addMaintStatusUpdate($builder, $maintStatusUpdate);
        self::addLastInspectionDate($builder, $lastInspectionDate);
        self::addMaintPoc($builder, $maintPoc);
        self::addGroundStatus($builder, $groundStatus);
        self::addContaminationStatus($builder, $contaminationStatus);
        self::addFuelStatus($builder, $fuelStatus);
        self::addLastUpdatedBy($builder, $lastUpdatedBy);
        self::addTroubleshootEtic($builder, $troubleshootEtic);
        self::addEtic($builder, $etic);
        self::addParkLocation($builder, $parkLocation);
        self::addParkLocationSystem($builder, $parkLocationSystem);
        self::addIdPOI($builder, $idPOI);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdAircraft(FlatBufferBuilder $builder, $idAircraft)
    {
        $builder->addOffsetX(2, $idAircraft, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltAircraftId(FlatBufferBuilder $builder, $altAircraftId)
    {
        $builder->addOffsetX(3, $altAircraftId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCurrentState(FlatBufferBuilder $builder, $currentState)
    {
        $builder->addOffsetX(4, $currentState, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdAirfield(FlatBufferBuilder $builder, $idAirfield)
    {
        $builder->addOffsetX(5, $idAirfield, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGeoLoc(FlatBufferBuilder $builder, $geoLoc)
    {
        $builder->addOffsetX(6, $geoLoc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPreviousICAO(FlatBufferBuilder $builder, $previousICAO)
    {
        $builder->addOffsetX(7, $previousICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCurrentICAO(FlatBufferBuilder $builder, $currentICAO)
    {
        $builder->addOffsetX(8, $currentICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNextICAO(FlatBufferBuilder $builder, $nextICAO)
    {
        $builder->addOffsetX(9, $nextICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFlightPhase(FlatBufferBuilder $builder, $flightPhase)
    {
        $builder->addOffsetX(10, $flightPhase, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaStartTime(FlatBufferBuilder $builder, $taStartTime)
    {
        $builder->addOffsetX(11, $taStartTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEarliestTAEndTime(FlatBufferBuilder $builder, $earliestTAEndTime)
    {
        $builder->addOffsetX(12, $earliestTAEndTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionReadiness(FlatBufferBuilder $builder, $missionReadiness)
    {
        $builder->addOffsetX(13, $missionReadiness, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addFuel(FlatBufferBuilder $builder, $fuel)
    {
        $builder->addIntX(14, $fuel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFuelFunction(FlatBufferBuilder $builder, $fuelFunction)
    {
        $builder->addOffsetX(15, $fuelFunction, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addGunCapable(FlatBufferBuilder $builder, $gunCapable)
    {
        $builder->addBoolX(16, $gunCapable, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGunRdsType(FlatBufferBuilder $builder, $gunRdsType)
    {
        $builder->addOffsetX(17, $gunRdsType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addGunRdsMin(FlatBufferBuilder $builder, $gunRdsMin)
    {
        $builder->addIntX(18, $gunRdsMin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addGunRdsMax(FlatBufferBuilder $builder, $gunRdsMax)
    {
        $builder->addIntX(19, $gunRdsMax, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addAirToAirStatus(FlatBufferBuilder $builder, $airToAirStatus)
    {
        $builder->addSbyteX(20, $airToAirStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addAirToGroundStatus(FlatBufferBuilder $builder, $airToGroundStatus)
    {
        $builder->addSbyteX(21, $airToGroundStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addInventory(FlatBufferBuilder $builder, $inventory)
    {
        $builder->addOffsetX(22, $inventory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createInventoryVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startInventoryVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addInventoryMin(FlatBufferBuilder $builder, $inventoryMin)
    {
        $builder->addOffsetX(23, $inventoryMin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createInventoryMinVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startInventoryMinVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addInventoryMax(FlatBufferBuilder $builder, $inventoryMax)
    {
        $builder->addOffsetX(24, $inventoryMax, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createInventoryMaxVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startInventoryMaxVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addUnavailableSys(FlatBufferBuilder $builder, $unavailableSys)
    {
        $builder->addOffsetX(25, $unavailableSys, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createUnavailableSysVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startUnavailableSysVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAdditionalSys(FlatBufferBuilder $builder, $additionalSys)
    {
        $builder->addOffsetX(26, $additionalSys, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAdditionalSysVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAdditionalSysVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNotes(FlatBufferBuilder $builder, $notes)
    {
        $builder->addOffsetX(27, $notes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMxRemark(FlatBufferBuilder $builder, $mxRemark)
    {
        $builder->addOffsetX(28, $mxRemark, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMaintStatus(FlatBufferBuilder $builder, $maintStatus)
    {
        $builder->addOffsetX(29, $maintStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMaintStatusDriver(FlatBufferBuilder $builder, $maintStatusDriver)
    {
        $builder->addOffsetX(30, $maintStatusDriver, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMaintPriority(FlatBufferBuilder $builder, $maintPriority)
    {
        $builder->addOffsetX(31, $maintPriority, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAlphaStatusCode(FlatBufferBuilder $builder, $alphaStatusCode)
    {
        $builder->addOffsetX(32, $alphaStatusCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMaintStatusUpdate(FlatBufferBuilder $builder, $maintStatusUpdate)
    {
        $builder->addOffsetX(33, $maintStatusUpdate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastInspectionDate(FlatBufferBuilder $builder, $lastInspectionDate)
    {
        $builder->addOffsetX(34, $lastInspectionDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMaintPoc(FlatBufferBuilder $builder, $maintPoc)
    {
        $builder->addOffsetX(35, $maintPoc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGroundStatus(FlatBufferBuilder $builder, $groundStatus)
    {
        $builder->addOffsetX(36, $groundStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addContaminationStatus(FlatBufferBuilder $builder, $contaminationStatus)
    {
        $builder->addOffsetX(37, $contaminationStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFuelStatus(FlatBufferBuilder $builder, $fuelStatus)
    {
        $builder->addOffsetX(38, $fuelStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastUpdatedBy(FlatBufferBuilder $builder, $lastUpdatedBy)
    {
        $builder->addOffsetX(39, $lastUpdatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTroubleshootEtic(FlatBufferBuilder $builder, $troubleshootEtic)
    {
        $builder->addOffsetX(40, $troubleshootEtic, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEtic(FlatBufferBuilder $builder, $etic)
    {
        $builder->addOffsetX(41, $etic, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addParkLocation(FlatBufferBuilder $builder, $parkLocation)
    {
        $builder->addOffsetX(42, $parkLocation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addParkLocationSystem(FlatBufferBuilder $builder, $parkLocationSystem)
    {
        $builder->addOffsetX(43, $parkLocationSystem, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdPOI(FlatBufferBuilder $builder, $idPOI)
    {
        $builder->addOffsetX(44, $idPOI, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(45, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(46, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(47, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(48, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(49, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(50, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(51, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAircraftStatus_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAircraftStatus_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRC");
    }
}
