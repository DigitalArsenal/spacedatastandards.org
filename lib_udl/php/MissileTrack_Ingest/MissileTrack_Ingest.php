<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// These services provide operations for querying of all available missile track details and amplifying missile data. A missile track is a position and optionally a heading/velocity of an object across all environments at a particular timestamp. It also includes optional information regarding the identity/type of missile, impact location, launch location and other amplifying object data, if known.
class MissileTrack_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return MissileTrack_Ingest
     */
    public static function getRootAsMissileTrack_Ingest(ByteBuffer $bb)
    {
        $obj = new MissileTrack_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function MissileTrack_IngestIdentifier()
    {
        return "MISS";
    }

    public static function MissileTrack_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::MissileTrack_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return MissileTrack_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: MissileTrack_ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of external message from which this request originated.
    /// Example: /// Example: MSG-TYPE
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getMsgType()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The message subtype is a finer grain categorization of message types as many messages can contain a variety of data content within the same structure.  Examples include but are not limited to Initial, Final, Launch, Update, etc.  Users should consult the appropriate documentation, based on the message type, for the definitions of the subtypes that apply to that message.
    /// Example: /// Example: Update
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMsgSubType()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-04-25T08:17:01.346Z
    /// Constraints: No constraints specified.
    public function getMsgCreateDate()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
    ///  AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
    ///  LAND: On the surface of dry land.
    ///  SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
    ///  SURFACE: On the surface of a body of water.
    ///  SUBSURFACE: Below the surface of a body of water.
    ///  UNKNOWN: Environment is not known.
    /// Example: /// Example: AIR
    /// Constraints: Minimum length = 0, Maximum length = 16
    /**
     * @return sbyte
     */
    public function getEnv()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \MissileTrack_Ingest_env_Enum::AIR;
    }

    /// The type of object to which this record refers. The object type may be updated in later records based on assessment of additional data.
    /// Example: /// Example: Ballistic
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getObjType()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Confidence of the object type, 0-100.
    /// Example: /// Example: 90
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getObjTypeConf()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Space Platform field along with the Space Activity field further defines the identity of a Space track (examples: SATELLITE, WEAPON, PATROL). The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
    /// Example: /// Example: WEAPON
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getObjPlat()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
    ///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    ///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    ///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    ///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    ///  PENDING: Track object which has not been evaluated.
    ///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    ///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    /// Example: /// Example: FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getObjIdent()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \MissileTrack_Ingest_objIdent_Enum::ASSUMED_FRIEND;
    }

    /// Space amplification indicates additional information on the space environment being reported (examples: NUCLEAR WARHEAD, FUEL-AIR EXPLOSIVE WARHEAD, DEBRIS).
    /// Example: /// Example: NUCLEAR WARHEAD
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getSpaceAmp()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Space activity (examples: RECONNAISSANCE, ANTISPACE WARFARE, TELEVISION). The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
    /// Example: /// Example: HOLDING
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getObjAct()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specific type of point or track with an environment of space.
    /// Example: /// Example: SS-21_MOD_2_CRBM
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getSpaceSpecType()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Subtype is a finer grain categorization of missile types. Examples include but are not limited to SRBM, MRBM, IRBM, LRBM, ICBM, SLBM. 
    /// &nbsp;SRBM - Short-Range Ballistic Missile
    /// &nbsp;MRBM - Medium-Range Ballistic Missile
    /// &nbsp;IRBM - Intermediate-Range Ballistic Missile
    /// &nbsp;LRBM - Long-Range Ballistic Missile
    /// &nbsp;ICBM - Intercontinental Ballistic Missile
    /// &nbsp;SLBM - Submarine-Launched Ballistic Missile.
    /// Example: /// Example: SLBM
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getAcftSubType()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Track name.
    /// Example: /// Example: TRACK-NAME
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getName()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The call sign currently assigned to the track object.
    /// Example: /// Example: Charlie
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getCallSign()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates whether or not the missile is considered lost.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLostTrkInd()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Track ID within the originating system.
    /// Example: /// Example: 102288
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTrackId()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Track ID of the parent track, within the originating system, from which the track was developed.
    /// Example: /// Example: 102288
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getParentTrackId()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Track ID for the source of the missile-unique identifier.
    /// Example: /// Example: MUID-SRC-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getMuidSrcTrk()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the missile-unique identifier (MUID).
    /// Example: /// Example: MUID-SRC
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getMuidSrc()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A track may be designated as a non-alert track or an alert track.
    /// Examples include but are not limited to:
    /// &nbsp;Non-alert tracks – choose None (Blank).
    /// &nbsp;Alert tracks – enter the proper alert classification:
    /// &nbsp;HIT - High Interest Track
    /// &nbsp;TGT - Target
    /// &nbsp;SUS - Suspect Carrier
    /// &nbsp;NSP - Cleared Suspect.
    /// Example: /// Example: HIT
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getAlert()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Missile status enumeration examples include but are not limited to:
    /// &nbsp;AT LAUNCH 
    /// &nbsp;AT OBSERVATION 
    /// &nbsp;FLYING 
    /// &nbsp;IMPACTED 
    /// &nbsp;LOST 
    /// &nbsp;STALE
    /// &nbsp;DEBRIS.
    /// Example: /// Example: AT LAUNCH
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMslStatus()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The receipt time of the data by the processing system, in ISO8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getTs()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
    /// Example: /// Example: ELLIPSE
    /// Constraints: Minimum length = 0, Maximum length = 40
    public function getAouRptType()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
    /// &nbsp;ELLIPSE:
    /// &nbsp;&nbsp;brg - orientation in degrees of the ellipse
    /// &nbsp;&nbsp;a1 - semi-major axis in kilometers
    /// &nbsp;&nbsp;a2 - semi-minor axis in kilometers
    /// &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
    /// &nbsp;&nbsp;brg - orientation in degrees of the bearing box
    /// &nbsp;&nbsp;a1 - length of bearing box in kilometers
    /// &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
    /// &nbsp;OTHER (All other type values):
    /// &nbsp;&nbsp;brg - line of bearing in degrees true
    /// &nbsp;&nbsp;a1 - bearing error in degrees
    /// &nbsp;&nbsp;a2 - estimated range in kilometers.
    /// Example: /// Example: [34.3, 26.5, 1.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAouRptData($j)
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAouRptDataLength()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The percentage of time that the estimated AoU will "cover" the true position of the track.
    /// Example: /// Example: 90.64
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getContainment()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
    /// Example: /// Example: 0.95
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTrkConf()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Track Quality is reported as an integer from 0-15. Track Quality specifies the reliability of the positional information of a reported track, with higher values indicating higher track quality; i.e., lower errors in reported position.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTrkQual()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Angle of elevation/depression between observer and missile in degrees.
    /// Example: /// Example: 15.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAngElev()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last report type received from the sensor (for example, OBSBO = observation burnout).
    /// Example: /// Example: OBSBO
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSenMode()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source code for source of information used to detect track.
    /// Example: /// Example: S1
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getInfoSource()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates whether or not the missile is currently in a state of boosting.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getBoosting()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Azimuth corridor reference point latitude.
    /// Example: /// Example: 19.88550102
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPolarSingLocLat()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Azimuth corridor reference point longitude.
    /// Example: /// Example: 46.74596844
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPolarSingLocLon()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Indicates whether or not a track has an emergency.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getEmgInd()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The drop-point indicator setting.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getDropPtInd()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Confidence level of the amplifying characteristics. Values range from 0 to 6.
    /// Example: /// Example: 6
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSpaceAmpConf()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Missile launch timestamp in ISO8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getLaunchTime()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS-84 latitude of the missile launch point, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 19.88550102
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLaunchLat()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the missile launch point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 46.74596844
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLaunchLon()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Missile azimuth corridor data.
    /// Example: /// Example: 12.876
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzCorr()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Track point burnout altitude relative to WGS-84 ellipsoid, in kilometers.
    /// Example: /// Example: 30567.452
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBurnoutAlt()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
    /// Example: /// Example: ELLIPSE
    /// Constraints: Minimum length = 0, Maximum length = 40
    public function getLaunchAouType()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
    /// &nbsp;ELLIPSE:
    /// &nbsp;&nbsp;brg - orientation in degrees of the ellipse
    /// &nbsp;&nbsp;a1 - semi-major axis in kilometers
    /// &nbsp;&nbsp;a2 - semi-minor axis in kilometers
    /// &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
    /// &nbsp;&nbsp;brg - orientation in degrees of the bearing box
    /// &nbsp;&nbsp;a1 - length of bearing box in kilometers
    /// &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
    /// &nbsp;OTHER (All other type values):
    /// &nbsp;&nbsp;brg - line of bearing in degrees true
    /// &nbsp;&nbsp;a1 - bearing error in degrees
    /// &nbsp;&nbsp;a2 - estimated range in kilometers.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLaunchAouData($j)
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLaunchAouDataLength()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Estimated time of impact timestamp in ISO8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getImpactTime()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS-84 latitude of the missile object impact point, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 19.88550102
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getImpactLat()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the missile object impact point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 46.74596844
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getImpactLon()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
    /// Example: /// Example: ELLIPSE
    /// Constraints: Minimum length = 0, Maximum length = 40
    public function getImpactAouType()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
    /// &nbsp;ELLIPSE:
    /// &nbsp;&nbsp;brg - orientation in degrees of the ellipse
    /// &nbsp;&nbsp;a1 - semi-major axis in kilometers
    /// &nbsp;&nbsp;a2 - semi-minor axis in kilometers
    /// &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
    /// &nbsp;&nbsp;brg - orientation in degrees of the bearing box
    /// &nbsp;&nbsp;a1 - length of bearing box in kilometers
    /// &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
    /// &nbsp;OTHER (All other type values):
    /// &nbsp;&nbsp;brg - line of bearing in degrees true
    /// &nbsp;&nbsp;a1 - bearing error in degrees
    /// &nbsp;&nbsp;a2 - estimated range in kilometers.
    /// Example: /// Example: [34.3, 26.5, 1.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getImpactAouData($j)
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getImpactAouDataLength()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of MissileTrackVector objects. Missile track vectors are cartesian vectors of position, velocity, and acceleration that, together with their time, 'epoch', uniquely determine the trajectory of the missile. ECEF is the preferred coordinate frame but in some cases data may be in another frame as specified by 'referenceFrame', depending on the provider.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getVectors($j)
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getVectorsLength()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database.
    /// Example: /// Example: 2021-02-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \MissileTrack_Ingest_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startMissileTrack_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(57);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return MissileTrack_Ingest
     */
    public static function createMissileTrack_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $msgType, $msgSubType, $msgCreateDate, $env, $objType, $objTypeConf, $objPlat, $objIdent, $spaceAmp, $objAct, $spaceSpecType, $acftSubType, $name, $callSign, $lostTrkInd, $trackId, $parentTrackId, $muidSrcTrk, $muidSrc, $alert, $mslStatus, $ts, $aouRptType, $aouRptData, $containment, $trkConf, $trkQual, $angElev, $senMode, $infoSource, $boosting, $polarSingLocLat, $polarSingLocLon, $emgInd, $dropPtInd, $spaceAmpConf, $launchTime, $launchLat, $launchLon, $azCorr, $burnoutAlt, $launchAouType, $launchAouData, $impactTime, $impactLat, $impactLon, $impactAouType, $impactAouData, $vectors, $origNetwork, $createdAt, $createdBy, $source, $origin, $dataMode)
    {
        $builder->startObject(57);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addMsgType($builder, $msgType);
        self::addMsgSubType($builder, $msgSubType);
        self::addMsgCreateDate($builder, $msgCreateDate);
        self::addEnv($builder, $env);
        self::addObjType($builder, $objType);
        self::addObjTypeConf($builder, $objTypeConf);
        self::addObjPlat($builder, $objPlat);
        self::addObjIdent($builder, $objIdent);
        self::addSpaceAmp($builder, $spaceAmp);
        self::addObjAct($builder, $objAct);
        self::addSpaceSpecType($builder, $spaceSpecType);
        self::addAcftSubType($builder, $acftSubType);
        self::addName($builder, $name);
        self::addCallSign($builder, $callSign);
        self::addLostTrkInd($builder, $lostTrkInd);
        self::addTrackId($builder, $trackId);
        self::addParentTrackId($builder, $parentTrackId);
        self::addMuidSrcTrk($builder, $muidSrcTrk);
        self::addMuidSrc($builder, $muidSrc);
        self::addAlert($builder, $alert);
        self::addMslStatus($builder, $mslStatus);
        self::addTs($builder, $ts);
        self::addAouRptType($builder, $aouRptType);
        self::addAouRptData($builder, $aouRptData);
        self::addContainment($builder, $containment);
        self::addTrkConf($builder, $trkConf);
        self::addTrkQual($builder, $trkQual);
        self::addAngElev($builder, $angElev);
        self::addSenMode($builder, $senMode);
        self::addInfoSource($builder, $infoSource);
        self::addBoosting($builder, $boosting);
        self::addPolarSingLocLat($builder, $polarSingLocLat);
        self::addPolarSingLocLon($builder, $polarSingLocLon);
        self::addEmgInd($builder, $emgInd);
        self::addDropPtInd($builder, $dropPtInd);
        self::addSpaceAmpConf($builder, $spaceAmpConf);
        self::addLaunchTime($builder, $launchTime);
        self::addLaunchLat($builder, $launchLat);
        self::addLaunchLon($builder, $launchLon);
        self::addAzCorr($builder, $azCorr);
        self::addBurnoutAlt($builder, $burnoutAlt);
        self::addLaunchAouType($builder, $launchAouType);
        self::addLaunchAouData($builder, $launchAouData);
        self::addImpactTime($builder, $impactTime);
        self::addImpactLat($builder, $impactLat);
        self::addImpactLon($builder, $impactLon);
        self::addImpactAouType($builder, $impactAouType);
        self::addImpactAouData($builder, $impactAouData);
        self::addVectors($builder, $vectors);
        self::addOrigNetwork($builder, $origNetwork);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsgType(FlatBufferBuilder $builder, $msgType)
    {
        $builder->addOffsetX(2, $msgType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsgSubType(FlatBufferBuilder $builder, $msgSubType)
    {
        $builder->addOffsetX(3, $msgSubType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsgCreateDate(FlatBufferBuilder $builder, $msgCreateDate)
    {
        $builder->addOffsetX(4, $msgCreateDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addEnv(FlatBufferBuilder $builder, $env)
    {
        $builder->addSbyteX(5, $env, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjType(FlatBufferBuilder $builder, $objType)
    {
        $builder->addOffsetX(6, $objType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addObjTypeConf(FlatBufferBuilder $builder, $objTypeConf)
    {
        $builder->addIntX(7, $objTypeConf, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjPlat(FlatBufferBuilder $builder, $objPlat)
    {
        $builder->addOffsetX(8, $objPlat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addObjIdent(FlatBufferBuilder $builder, $objIdent)
    {
        $builder->addSbyteX(9, $objIdent, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSpaceAmp(FlatBufferBuilder $builder, $spaceAmp)
    {
        $builder->addOffsetX(10, $spaceAmp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjAct(FlatBufferBuilder $builder, $objAct)
    {
        $builder->addOffsetX(11, $objAct, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSpaceSpecType(FlatBufferBuilder $builder, $spaceSpecType)
    {
        $builder->addOffsetX(12, $spaceSpecType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAcftSubType(FlatBufferBuilder $builder, $acftSubType)
    {
        $builder->addOffsetX(13, $acftSubType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(14, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCallSign(FlatBufferBuilder $builder, $callSign)
    {
        $builder->addOffsetX(15, $callSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLostTrkInd(FlatBufferBuilder $builder, $lostTrkInd)
    {
        $builder->addBoolX(16, $lostTrkInd, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrackId(FlatBufferBuilder $builder, $trackId)
    {
        $builder->addOffsetX(17, $trackId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addParentTrackId(FlatBufferBuilder $builder, $parentTrackId)
    {
        $builder->addOffsetX(18, $parentTrackId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMuidSrcTrk(FlatBufferBuilder $builder, $muidSrcTrk)
    {
        $builder->addOffsetX(19, $muidSrcTrk, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMuidSrc(FlatBufferBuilder $builder, $muidSrc)
    {
        $builder->addOffsetX(20, $muidSrc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAlert(FlatBufferBuilder $builder, $alert)
    {
        $builder->addOffsetX(21, $alert, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMslStatus(FlatBufferBuilder $builder, $mslStatus)
    {
        $builder->addOffsetX(22, $mslStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTs(FlatBufferBuilder $builder, $ts)
    {
        $builder->addOffsetX(23, $ts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAouRptType(FlatBufferBuilder $builder, $aouRptType)
    {
        $builder->addOffsetX(24, $aouRptType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAouRptData(FlatBufferBuilder $builder, $aouRptData)
    {
        $builder->addOffsetX(25, $aouRptData, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAouRptDataVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAouRptDataVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addContainment(FlatBufferBuilder $builder, $containment)
    {
        $builder->addDoubleX(26, $containment, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTrkConf(FlatBufferBuilder $builder, $trkConf)
    {
        $builder->addDoubleX(27, $trkConf, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTrkQual(FlatBufferBuilder $builder, $trkQual)
    {
        $builder->addIntX(28, $trkQual, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAngElev(FlatBufferBuilder $builder, $angElev)
    {
        $builder->addDoubleX(29, $angElev, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSenMode(FlatBufferBuilder $builder, $senMode)
    {
        $builder->addOffsetX(30, $senMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addInfoSource(FlatBufferBuilder $builder, $infoSource)
    {
        $builder->addOffsetX(31, $infoSource, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addBoosting(FlatBufferBuilder $builder, $boosting)
    {
        $builder->addBoolX(32, $boosting, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPolarSingLocLat(FlatBufferBuilder $builder, $polarSingLocLat)
    {
        $builder->addDoubleX(33, $polarSingLocLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPolarSingLocLon(FlatBufferBuilder $builder, $polarSingLocLon)
    {
        $builder->addDoubleX(34, $polarSingLocLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addEmgInd(FlatBufferBuilder $builder, $emgInd)
    {
        $builder->addBoolX(35, $emgInd, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addDropPtInd(FlatBufferBuilder $builder, $dropPtInd)
    {
        $builder->addBoolX(36, $dropPtInd, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSpaceAmpConf(FlatBufferBuilder $builder, $spaceAmpConf)
    {
        $builder->addIntX(37, $spaceAmpConf, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchTime(FlatBufferBuilder $builder, $launchTime)
    {
        $builder->addOffsetX(38, $launchTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLaunchLat(FlatBufferBuilder $builder, $launchLat)
    {
        $builder->addDoubleX(39, $launchLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLaunchLon(FlatBufferBuilder $builder, $launchLon)
    {
        $builder->addDoubleX(40, $launchLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzCorr(FlatBufferBuilder $builder, $azCorr)
    {
        $builder->addDoubleX(41, $azCorr, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBurnoutAlt(FlatBufferBuilder $builder, $burnoutAlt)
    {
        $builder->addDoubleX(42, $burnoutAlt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchAouType(FlatBufferBuilder $builder, $launchAouType)
    {
        $builder->addOffsetX(43, $launchAouType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLaunchAouData(FlatBufferBuilder $builder, $launchAouData)
    {
        $builder->addOffsetX(44, $launchAouData, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLaunchAouDataVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLaunchAouDataVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addImpactTime(FlatBufferBuilder $builder, $impactTime)
    {
        $builder->addOffsetX(45, $impactTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addImpactLat(FlatBufferBuilder $builder, $impactLat)
    {
        $builder->addDoubleX(46, $impactLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addImpactLon(FlatBufferBuilder $builder, $impactLon)
    {
        $builder->addDoubleX(47, $impactLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addImpactAouType(FlatBufferBuilder $builder, $impactAouType)
    {
        $builder->addOffsetX(48, $impactAouType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addImpactAouData(FlatBufferBuilder $builder, $impactAouData)
    {
        $builder->addOffsetX(49, $impactAouData, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createImpactAouDataVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startImpactAouDataVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addVectors(FlatBufferBuilder $builder, $vectors)
    {
        $builder->addOffsetX(50, $vectors, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createVectorsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startVectorsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(51, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(52, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(53, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(54, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(55, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(56, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endMissileTrack_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishMissileTrack_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "MISS");
    }
}
