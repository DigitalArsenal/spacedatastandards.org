<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Information detailing knowledge of enemies in the area.
class PersonnelRecoveryEnemyData_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return PersonnelRecoveryEnemyData_Full
     */
    public static function getRootAsPersonnelRecoveryEnemyData_Full(ByteBuffer $bb)
    {
        $obj = new PersonnelRecoveryEnemyData_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function PersonnelRecoveryEnemyData_FullIdentifier()
    {
        return "PERS";
    }

    public static function PersonnelRecoveryEnemyData_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::PersonnelRecoveryEnemyData_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return PersonnelRecoveryEnemyData_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
    /// Example: /// Example: NORTHWEST
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getDirToEnemy()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
    /// Example: /// Example: SMALL ARMS
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getHostileFireType()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Comments provided by friendlies about the evac zone.
    /// Example: /// Example: Comments from friendlies.
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getFriendliesRemarks()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Hot Landing Zone remarks.
    /// Example: /// Example: Hot Landing Zone remarks.
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getHlzRemarks()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startPersonnelRecoveryEnemyData_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return PersonnelRecoveryEnemyData_Full
     */
    public static function createPersonnelRecoveryEnemyData_Full(FlatBufferBuilder $builder, $dirToEnemy, $hostileFireType, $friendliesRemarks, $hlzRemarks)
    {
        $builder->startObject(4);
        self::addDirToEnemy($builder, $dirToEnemy);
        self::addHostileFireType($builder, $hostileFireType);
        self::addFriendliesRemarks($builder, $friendliesRemarks);
        self::addHlzRemarks($builder, $hlzRemarks);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDirToEnemy(FlatBufferBuilder $builder, $dirToEnemy)
    {
        $builder->addOffsetX(0, $dirToEnemy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHostileFireType(FlatBufferBuilder $builder, $hostileFireType)
    {
        $builder->addOffsetX(1, $hostileFireType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFriendliesRemarks(FlatBufferBuilder $builder, $friendliesRemarks)
    {
        $builder->addOffsetX(2, $friendliesRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHlzRemarks(FlatBufferBuilder $builder, $hlzRemarks)
    {
        $builder->addOffsetX(3, $hlzRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endPersonnelRecoveryEnemyData_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishPersonnelRecoveryEnemyData_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "PERS");
    }
}
