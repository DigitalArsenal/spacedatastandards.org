<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
class GenText_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return GenText_Ingest
     */
    public static function getRootAsGenText_Ingest(ByteBuffer $bb)
    {
        $obj = new GenText_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function GenText_IngestIdentifier()
    {
        return "GENT";
    }

    public static function GenText_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::GenText_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return GenText_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The indicator for the general text block. Examples include "OPENING REMARKS" and "GENERAL SPINS INFORMATION".
    /// Example: /// Example: OPENING REMARKS
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTextInd()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The free text that describes the information specific to the text indicator.
    /// Example: /// Example: FREE-TEXT
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getText()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startGenText_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return GenText_Ingest
     */
    public static function createGenText_Ingest(FlatBufferBuilder $builder, $textInd, $text)
    {
        $builder->startObject(2);
        self::addTextInd($builder, $textInd);
        self::addText($builder, $text);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTextInd(FlatBufferBuilder $builder, $textInd)
    {
        $builder->addOffsetX(0, $textInd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addText(FlatBufferBuilder $builder, $text)
    {
        $builder->addOffsetX(1, $text, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endGenText_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishGenText_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "GENT");
    }
}
