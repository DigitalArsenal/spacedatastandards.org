<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Provides information on the dates, actors, locations, fatalities, and types of all reported political violence and protest events across the world.
class SigAct_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return SigAct_Abridged
     */
    public static function getRootAsSigAct_Abridged(ByteBuffer $bb)
    {
        $obj = new SigAct_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function SigAct_AbridgedIdentifier()
    {
        return "SIGA";
    }

    public static function SigAct_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::SigAct_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return SigAct_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SIGACT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source language of the significant event using the ISO 639-3, 3 character code definition.
    /// Example: /// Example: eng
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getSourceLanguage()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getCountryCode()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The city in or near which this event occurred.
    /// Example: /// Example: Austin
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getCity()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The district in which this event occurred.
    /// Example: /// Example: district 12
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getDistrict()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The province in which this event occurred.
    /// Example: /// Example: Province_Example
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getProvince()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS-84 centroid latitude of the event location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.31
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLat()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 centroid longitude of the event location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 90.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLon()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
    /// &nbsp;&nbsp;4Q (grid zone designator, GZD)
    /// &nbsp;&nbsp;FJ (the 100,000-meter square identifier)
    /// &nbsp;&nbsp;12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
    /// Example: /// Example: 4QFJ12345678
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getMilgrid()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Area in which important military events occur or are progressing.  A theater can include the entirety of the airspace, land and sea area that is or that may potentially become involved in war operations.
    /// Example: /// Example: Kabul
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getTheater()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getAtext()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getAgjson()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of region as projected on the ground.
    /// Example: /// Example: Type1
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getAtype()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of dimensions of the geometry depicted by region.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAndims()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Geographical spatial_ref_sys for region.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAsrid()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The approximate start time of the event, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:02:03.123Z
    /// Constraints: No constraints specified.
    public function getEventStart()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The approximate end time of the event, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:02:03.123Z
    /// Constraints: No constraints specified.
    public function getEventEnd()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Date of the report or filing.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getReportDate()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A list of one or more actors involved in the event.
    /// Example: /// Example: ['US', 'CAN']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getActors($j)
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getActorsLength()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Number of civilians abducted in the activity.
    /// Example: /// Example: 423
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCivAbd()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of civilians detained in the activity.
    /// Example: /// Example: 234
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCivDet()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of civilians killed in the activity.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCivKIA()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of civilians wounded in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCivWound()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of coalition members abducted in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCoalAbd()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of coalition members detained in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCoalDet()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of coalition members killed in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCoalKIA()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of coalition members wounded in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCoalWound()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of enemy combatants abducted in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getEnemyAbd()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of enemy combatants detained in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getEnemyDet()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of enemy combatants killed in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getEnemyKIA()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of friendlies abducted in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getFriendlyAbd()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of friendlies in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getFriendlyDet()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of friendlies killed in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getFriendlyKIA()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of friendlies wounded in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getFriendlyWound()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of Host Nation members abducted in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getHostNatAbd()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of Host Nation members detained in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getHostNatDet()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of Host Nation members killed in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getHostNatKIA()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of Host Nation members wounded in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getHostNatWound()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of side A members abducted in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSideAAbd()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of side A members detained in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSideADet()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of side A members killed in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSideAKIA()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of side A members wounded in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSideAWound()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of side B members abducted in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSideBAbd()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of side B members detained in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSideBDet()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of side B members killed in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSideBKIA()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of side B members wounded in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSideBWound()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The name of the target.  The target may be an individual, an entity, or a country/region.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTarget()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A description of the event.
    /// Example: /// Example: Example_Description
    /// Constraints: Minimum length = 0, Maximum length = 4096
    public function getEventDescription()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of event (e.g.  Military, Natural, Political, Social, etc.).
    /// Example: /// Example: Military
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getEventType()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The mode of this attack or event (e.g. Direct Fire, IED Explosion, etc.).
    /// Example: /// Example: IED Explosion
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTypeOfAttack()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating that this attack was of a complex or coordinated nature.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getComplexAttack()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Unique identifier assigned to each event record that uniquely identifies it in the master dataset.  This ID is provided for convenience of mapping to external systems.
    /// Example: /// Example: NUMBER-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getIdNumber()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Estimate of the confidence that this event occurred.
    /// Example: /// Example: 13
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getConfidence()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Estimate of the accuracy that this event occurred as described/reported.
    /// Example: /// Example: 13
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAccuracy()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// 1 (high) for events where the reporting allows the coder to identify the event in full. That is, events where the individual happening is described by the original source in a sufficiently detailed way as to identify individual incidents, i.e. separate activities of fighting in a single location:
    /// 2 (lower) for events where an aggregation of information was already made by the source material that is impossible to undo in the coding process. Such events are described by the original source only as aggregates (totals) of multiple separate activities of fighting spanning over a longer period than a single, clearly defined day.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getClarity()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// This is the raw CAMEO action code describing the action that Actor1 performed upon Actor2.  Additional information about Cameo Codes can be obtained from the GDELT project documentation here: https://www.gdeltproject.org/data.html#documentation.
    /// Example: /// Example: CAMEO_CODE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCameoCode()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// CAMEO event codes are defined in a three-level taxonomy. For events at level three in the taxonomy, this yields its level two leaf root node. For example, code 0251 (Appeal for easing of administrative sanctions) would yield an EventBaseCode of 025 (Appeal to yield). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
    /// Example: /// Example: Example_cameoBaseCode
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCameoBaseCode()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Similar to EventBaseCode, this defines the root-level category the event code falls under. For example, code 0251 (Appeal for easing of administrative sanctions) has a root code of 02 (Appeal). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
    /// Example: /// Example: Example_cameoRootCode
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCameoRootCode()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Each CAMEO event code is assigned a numeric score from -10 to +10, capturing the theoretical potential impact that type of event will have on the stability of a country. This is known as the Goldstein Scale. NOTE: this score is based on the type of event, not the specifics of the actual event record being recorded  thus two riots, one with 10 people and one with 10,000, will both receive the same Goldstein score. This can be aggregated to various levels of time resolution to yield an approximation of the stability of a location over time.
    /// Example: /// Example: 9.32
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGoldstein()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The source of the document or report.
    /// Example: /// Example: Example_documentSource
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getDocumentSource()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The filename of the document or report.
    /// Example: /// Example: Example_documentFilename
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getDocumentFilename()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating this SigAct record has an associated txt file stored in the UDL. Retrieve the txt file by using the GET/udl/sigact/getFile/{id} where id is the same as the SigAct record id. The maximum file size for this service is 10,000,000 bytes (10MB). Files exceeding the maximum size will be rejected.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getHasAttachment()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Size of the associated text file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    /**
     * @return long
     */
    public function getFilesize()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /// MD5 value of the file. The ingest/create operation will automatically generate the value.
    /// Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getChecksumValue()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reporting unit.
    /// Example: /// Example: Unit_1
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getRepUnit()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reporting unit type.
    /// Example: /// Example: Example_repUnitType
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getRepUnitType()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The activity the unit was engaged in.
    /// Example: /// Example: Example_Activity
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getRepUnitActivity()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// This is the total number of mentions of this event across all source documents during the 15 minute update in which it was first seen. Multiple references to an event within a single document also contribute to this count. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
    /// Example: /// Example: 8
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumMentions()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// This is the total number of information sources containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
    /// Example: /// Example: 8
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumSources()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// This is the total number of source documents containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
    /// Example: /// Example: 8
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumArticles()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// This is the average tone of all documents containing one or more mentions of this event during the 15 minute update in which it was first seen. The score ranges from -100 (extremely negative) to +100 (extremely positive). Common values range between -10 and +10, with 0 indicating neutral.
    /// Example: /// Example: 8.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgTone()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// This field records the URL or citation of the first news report it found this event in. In most cases this is the first report it saw the article in, but due to the timing and flow of news reports through the processing pipeline, this may not always be the very first report, but is at least in the first few reports.
    /// Example: /// Example: Example_URL
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getSourceUrl()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Related document ids.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRelatedDocs($j)
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRelatedDocsLength()
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// A summary of the event.
    /// Example: /// Example: Example_Summary
    /// Constraints: Minimum length = 0, Maximum length = 4096
    public function getSummary()
    {
        $o = $this->__offset(152);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Notes related to the documents or event.
    /// Example: /// Example: Example_Notes
    /// Constraints: Minimum length = 0, Maximum length = 4096
    public function getNotes()
    {
        $o = $this->__offset(154);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(156);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: No constraints specified.
    public function getCreatedBy()
    {
        $o = $this->__offset(158);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(160);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(162);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(164);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SigAct_Abridged_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(166);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSigAct_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(82);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return SigAct_Abridged
     */
    public static function createSigAct_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $sourceLanguage, $countryCode, $city, $district, $province, $lat, $lon, $milgrid, $theater, $atext, $agjson, $atype, $andims, $asrid, $eventStart, $eventEnd, $reportDate, $actors, $civAbd, $civDet, $civKIA, $civWound, $coalAbd, $coalDet, $coalKIA, $coalWound, $enemyAbd, $enemyDet, $enemyKIA, $friendlyAbd, $friendlyDet, $friendlyKIA, $friendlyWound, $hostNatAbd, $hostNatDet, $hostNatKIA, $hostNatWound, $sideAAbd, $sideADet, $sideAKIA, $sideAWound, $sideBAbd, $sideBDet, $sideBKIA, $sideBWound, $target, $eventDescription, $eventType, $typeOfAttack, $complexAttack, $idNumber, $confidence, $accuracy, $clarity, $cameoCode, $cameoBaseCode, $cameoRootCode, $goldstein, $documentSource, $documentFilename, $hasAttachment, $filesize, $checksumValue, $repUnit, $repUnitType, $repUnitActivity, $numMentions, $numSources, $numArticles, $avgTone, $sourceUrl, $relatedDocs, $summary, $notes, $createdAt, $createdBy, $source, $origin, $dataMode, $origNetwork)
    {
        $builder->startObject(82);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addSourceLanguage($builder, $sourceLanguage);
        self::addCountryCode($builder, $countryCode);
        self::addCity($builder, $city);
        self::addDistrict($builder, $district);
        self::addProvince($builder, $province);
        self::addLat($builder, $lat);
        self::addLon($builder, $lon);
        self::addMilgrid($builder, $milgrid);
        self::addTheater($builder, $theater);
        self::addAtext($builder, $atext);
        self::addAgjson($builder, $agjson);
        self::addAtype($builder, $atype);
        self::addAndims($builder, $andims);
        self::addAsrid($builder, $asrid);
        self::addEventStart($builder, $eventStart);
        self::addEventEnd($builder, $eventEnd);
        self::addReportDate($builder, $reportDate);
        self::addActors($builder, $actors);
        self::addCivAbd($builder, $civAbd);
        self::addCivDet($builder, $civDet);
        self::addCivKIA($builder, $civKIA);
        self::addCivWound($builder, $civWound);
        self::addCoalAbd($builder, $coalAbd);
        self::addCoalDet($builder, $coalDet);
        self::addCoalKIA($builder, $coalKIA);
        self::addCoalWound($builder, $coalWound);
        self::addEnemyAbd($builder, $enemyAbd);
        self::addEnemyDet($builder, $enemyDet);
        self::addEnemyKIA($builder, $enemyKIA);
        self::addFriendlyAbd($builder, $friendlyAbd);
        self::addFriendlyDet($builder, $friendlyDet);
        self::addFriendlyKIA($builder, $friendlyKIA);
        self::addFriendlyWound($builder, $friendlyWound);
        self::addHostNatAbd($builder, $hostNatAbd);
        self::addHostNatDet($builder, $hostNatDet);
        self::addHostNatKIA($builder, $hostNatKIA);
        self::addHostNatWound($builder, $hostNatWound);
        self::addSideAAbd($builder, $sideAAbd);
        self::addSideADet($builder, $sideADet);
        self::addSideAKIA($builder, $sideAKIA);
        self::addSideAWound($builder, $sideAWound);
        self::addSideBAbd($builder, $sideBAbd);
        self::addSideBDet($builder, $sideBDet);
        self::addSideBKIA($builder, $sideBKIA);
        self::addSideBWound($builder, $sideBWound);
        self::addTarget($builder, $target);
        self::addEventDescription($builder, $eventDescription);
        self::addEventType($builder, $eventType);
        self::addTypeOfAttack($builder, $typeOfAttack);
        self::addComplexAttack($builder, $complexAttack);
        self::addIdNumber($builder, $idNumber);
        self::addConfidence($builder, $confidence);
        self::addAccuracy($builder, $accuracy);
        self::addClarity($builder, $clarity);
        self::addCameoCode($builder, $cameoCode);
        self::addCameoBaseCode($builder, $cameoBaseCode);
        self::addCameoRootCode($builder, $cameoRootCode);
        self::addGoldstein($builder, $goldstein);
        self::addDocumentSource($builder, $documentSource);
        self::addDocumentFilename($builder, $documentFilename);
        self::addHasAttachment($builder, $hasAttachment);
        self::addFilesize($builder, $filesize);
        self::addChecksumValue($builder, $checksumValue);
        self::addRepUnit($builder, $repUnit);
        self::addRepUnitType($builder, $repUnitType);
        self::addRepUnitActivity($builder, $repUnitActivity);
        self::addNumMentions($builder, $numMentions);
        self::addNumSources($builder, $numSources);
        self::addNumArticles($builder, $numArticles);
        self::addAvgTone($builder, $avgTone);
        self::addSourceUrl($builder, $sourceUrl);
        self::addRelatedDocs($builder, $relatedDocs);
        self::addSummary($builder, $summary);
        self::addNotes($builder, $notes);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceLanguage(FlatBufferBuilder $builder, $sourceLanguage)
    {
        $builder->addOffsetX(2, $sourceLanguage, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountryCode(FlatBufferBuilder $builder, $countryCode)
    {
        $builder->addOffsetX(3, $countryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCity(FlatBufferBuilder $builder, $city)
    {
        $builder->addOffsetX(4, $city, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDistrict(FlatBufferBuilder $builder, $district)
    {
        $builder->addOffsetX(5, $district, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addProvince(FlatBufferBuilder $builder, $province)
    {
        $builder->addOffsetX(6, $province, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLat(FlatBufferBuilder $builder, $lat)
    {
        $builder->addDoubleX(7, $lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLon(FlatBufferBuilder $builder, $lon)
    {
        $builder->addDoubleX(8, $lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMilgrid(FlatBufferBuilder $builder, $milgrid)
    {
        $builder->addOffsetX(9, $milgrid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTheater(FlatBufferBuilder $builder, $theater)
    {
        $builder->addOffsetX(10, $theater, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAtext(FlatBufferBuilder $builder, $atext)
    {
        $builder->addOffsetX(11, $atext, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAgjson(FlatBufferBuilder $builder, $agjson)
    {
        $builder->addOffsetX(12, $agjson, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAtype(FlatBufferBuilder $builder, $atype)
    {
        $builder->addOffsetX(13, $atype, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAndims(FlatBufferBuilder $builder, $andims)
    {
        $builder->addIntX(14, $andims, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAsrid(FlatBufferBuilder $builder, $asrid)
    {
        $builder->addIntX(15, $asrid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEventStart(FlatBufferBuilder $builder, $eventStart)
    {
        $builder->addOffsetX(16, $eventStart, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEventEnd(FlatBufferBuilder $builder, $eventEnd)
    {
        $builder->addOffsetX(17, $eventEnd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReportDate(FlatBufferBuilder $builder, $reportDate)
    {
        $builder->addOffsetX(18, $reportDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addActors(FlatBufferBuilder $builder, $actors)
    {
        $builder->addOffsetX(19, $actors, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createActorsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startActorsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCivAbd(FlatBufferBuilder $builder, $civAbd)
    {
        $builder->addIntX(20, $civAbd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCivDet(FlatBufferBuilder $builder, $civDet)
    {
        $builder->addIntX(21, $civDet, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCivKIA(FlatBufferBuilder $builder, $civKIA)
    {
        $builder->addIntX(22, $civKIA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCivWound(FlatBufferBuilder $builder, $civWound)
    {
        $builder->addIntX(23, $civWound, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCoalAbd(FlatBufferBuilder $builder, $coalAbd)
    {
        $builder->addIntX(24, $coalAbd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCoalDet(FlatBufferBuilder $builder, $coalDet)
    {
        $builder->addIntX(25, $coalDet, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCoalKIA(FlatBufferBuilder $builder, $coalKIA)
    {
        $builder->addIntX(26, $coalKIA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCoalWound(FlatBufferBuilder $builder, $coalWound)
    {
        $builder->addIntX(27, $coalWound, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addEnemyAbd(FlatBufferBuilder $builder, $enemyAbd)
    {
        $builder->addIntX(28, $enemyAbd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addEnemyDet(FlatBufferBuilder $builder, $enemyDet)
    {
        $builder->addIntX(29, $enemyDet, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addEnemyKIA(FlatBufferBuilder $builder, $enemyKIA)
    {
        $builder->addIntX(30, $enemyKIA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addFriendlyAbd(FlatBufferBuilder $builder, $friendlyAbd)
    {
        $builder->addIntX(31, $friendlyAbd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addFriendlyDet(FlatBufferBuilder $builder, $friendlyDet)
    {
        $builder->addIntX(32, $friendlyDet, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addFriendlyKIA(FlatBufferBuilder $builder, $friendlyKIA)
    {
        $builder->addIntX(33, $friendlyKIA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addFriendlyWound(FlatBufferBuilder $builder, $friendlyWound)
    {
        $builder->addIntX(34, $friendlyWound, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addHostNatAbd(FlatBufferBuilder $builder, $hostNatAbd)
    {
        $builder->addIntX(35, $hostNatAbd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addHostNatDet(FlatBufferBuilder $builder, $hostNatDet)
    {
        $builder->addIntX(36, $hostNatDet, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addHostNatKIA(FlatBufferBuilder $builder, $hostNatKIA)
    {
        $builder->addIntX(37, $hostNatKIA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addHostNatWound(FlatBufferBuilder $builder, $hostNatWound)
    {
        $builder->addIntX(38, $hostNatWound, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSideAAbd(FlatBufferBuilder $builder, $sideAAbd)
    {
        $builder->addIntX(39, $sideAAbd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSideADet(FlatBufferBuilder $builder, $sideADet)
    {
        $builder->addIntX(40, $sideADet, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSideAKIA(FlatBufferBuilder $builder, $sideAKIA)
    {
        $builder->addIntX(41, $sideAKIA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSideAWound(FlatBufferBuilder $builder, $sideAWound)
    {
        $builder->addIntX(42, $sideAWound, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSideBAbd(FlatBufferBuilder $builder, $sideBAbd)
    {
        $builder->addIntX(43, $sideBAbd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSideBDet(FlatBufferBuilder $builder, $sideBDet)
    {
        $builder->addIntX(44, $sideBDet, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSideBKIA(FlatBufferBuilder $builder, $sideBKIA)
    {
        $builder->addIntX(45, $sideBKIA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSideBWound(FlatBufferBuilder $builder, $sideBWound)
    {
        $builder->addIntX(46, $sideBWound, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTarget(FlatBufferBuilder $builder, $target)
    {
        $builder->addOffsetX(47, $target, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEventDescription(FlatBufferBuilder $builder, $eventDescription)
    {
        $builder->addOffsetX(48, $eventDescription, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEventType(FlatBufferBuilder $builder, $eventType)
    {
        $builder->addOffsetX(49, $eventType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTypeOfAttack(FlatBufferBuilder $builder, $typeOfAttack)
    {
        $builder->addOffsetX(50, $typeOfAttack, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addComplexAttack(FlatBufferBuilder $builder, $complexAttack)
    {
        $builder->addBoolX(51, $complexAttack, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdNumber(FlatBufferBuilder $builder, $idNumber)
    {
        $builder->addOffsetX(52, $idNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addConfidence(FlatBufferBuilder $builder, $confidence)
    {
        $builder->addIntX(53, $confidence, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAccuracy(FlatBufferBuilder $builder, $accuracy)
    {
        $builder->addIntX(54, $accuracy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addClarity(FlatBufferBuilder $builder, $clarity)
    {
        $builder->addIntX(55, $clarity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCameoCode(FlatBufferBuilder $builder, $cameoCode)
    {
        $builder->addOffsetX(56, $cameoCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCameoBaseCode(FlatBufferBuilder $builder, $cameoBaseCode)
    {
        $builder->addOffsetX(57, $cameoBaseCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCameoRootCode(FlatBufferBuilder $builder, $cameoRootCode)
    {
        $builder->addOffsetX(58, $cameoRootCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGoldstein(FlatBufferBuilder $builder, $goldstein)
    {
        $builder->addDoubleX(59, $goldstein, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDocumentSource(FlatBufferBuilder $builder, $documentSource)
    {
        $builder->addOffsetX(60, $documentSource, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDocumentFilename(FlatBufferBuilder $builder, $documentFilename)
    {
        $builder->addOffsetX(61, $documentFilename, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addHasAttachment(FlatBufferBuilder $builder, $hasAttachment)
    {
        $builder->addBoolX(62, $hasAttachment, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addFilesize(FlatBufferBuilder $builder, $filesize)
    {
        $builder->addLongX(63, $filesize, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addChecksumValue(FlatBufferBuilder $builder, $checksumValue)
    {
        $builder->addOffsetX(64, $checksumValue, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRepUnit(FlatBufferBuilder $builder, $repUnit)
    {
        $builder->addOffsetX(65, $repUnit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRepUnitType(FlatBufferBuilder $builder, $repUnitType)
    {
        $builder->addOffsetX(66, $repUnitType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRepUnitActivity(FlatBufferBuilder $builder, $repUnitActivity)
    {
        $builder->addOffsetX(67, $repUnitActivity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumMentions(FlatBufferBuilder $builder, $numMentions)
    {
        $builder->addIntX(68, $numMentions, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumSources(FlatBufferBuilder $builder, $numSources)
    {
        $builder->addIntX(69, $numSources, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumArticles(FlatBufferBuilder $builder, $numArticles)
    {
        $builder->addIntX(70, $numArticles, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgTone(FlatBufferBuilder $builder, $avgTone)
    {
        $builder->addDoubleX(71, $avgTone, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceUrl(FlatBufferBuilder $builder, $sourceUrl)
    {
        $builder->addOffsetX(72, $sourceUrl, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRelatedDocs(FlatBufferBuilder $builder, $relatedDocs)
    {
        $builder->addOffsetX(73, $relatedDocs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRelatedDocsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRelatedDocsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSummary(FlatBufferBuilder $builder, $summary)
    {
        $builder->addOffsetX(74, $summary, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNotes(FlatBufferBuilder $builder, $notes)
    {
        $builder->addOffsetX(75, $notes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(76, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(77, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(78, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(79, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(80, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(81, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSigAct_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSigAct_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "SIGA");
    }
}
