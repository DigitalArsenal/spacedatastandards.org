<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Properties and characteristics of a site entity, such as an airbase, airfield, naval station, etc.
class Site_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Site_Full
     */
    public static function getRootAsSite_Full(ByteBuffer $bb)
    {
        $obj = new Site_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Site_FullIdentifier()
    {
        return "SITE";
    }

    public static function Site_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Site_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Site_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SITE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getEntity()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the parent entity. idEntity is required for Put.
    /// Example: /// Example: ENTITY-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdEntity()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the Parent Site record associated with this Site record.
    /// Example: /// Example: ID-Parent-Site
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdParentSite()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the Site record from the originating system.
    /// Example: /// Example: ORIG-SITE-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOrigSiteID()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the LZ record from the originating system.
    /// Example: /// Example: ORIG-LZ-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOrigLzId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Site number of a specific electronic site or its associated equipment.
    /// Example: /// Example: 25200
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getPin()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of this site (AIRBASE, AIRFIELD, AIRPORT, NAVAL STATION, etc.).
    /// Example: /// Example: AIRBASE
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getType()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The use authorization type of this site (e.g MILITARY, CIVIL, JOINT-USE, etc.).
    /// Example: /// Example: MILITARY
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getUsage()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the normal usage of the Landing Zone (LZ).  Intended as, but not constrained to MIDB Helocopter Landing Area usage value definitions:
    /// AF - Airfield
    /// FD - Field
    /// HC - High Crop.  1 meter and over.
    /// HY - Highway
    /// LB - Lake Bed
    /// LC - Low Crop.  0-1 meters
    /// O - Other. Explain In Remarks.
    /// PD - Paddy
    /// PK - Park
    /// PS - Pasture
    /// RB - Riverbed
    /// SP - Sport Field
    /// U - Unknown
    /// Z - Inconclusive Analysis.
    /// Example: /// Example: AF
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getLzUsage()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of this site.
    /// Example: /// Example: Site Name
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getName()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A mathematical model of the earth used to calculate coordinates on a map. US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums. The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: WGS
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getCoordDatum()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
    /// Pos. 1-2.  Latitude Degrees     [00-90]
    /// Pos. 3-4.  Latitude Minutes     [00-59]
    /// Pos. 5-6.  Latitude Seconds     [00-59]
    /// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
    /// Pos. 10. Latitude Hemisphere       [NS] 
    /// Pos. 11-13. Longitude Degrees     [00-180] 
    /// Pos. 14-15. Longitude Minutes     [00-59] 
    /// Pos. 16-17. Longitude Seconds     [00-59] 
    /// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
    /// Pos. 21. Longitude Hemisphere     [EW]
    /// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U].
    /// Example: /// Example: 340000000N0430000000E
    /// Constraints: Minimum length = 0, Maximum length = 21
    public function getCoord()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the plus or minus error assessed against the method used to derive the coordinate.
    /// Example: /// Example: 12.345
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCoordDerivAcc()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The O-suffix associated with this site. The O-suffix is a five-character alpha/numeric system used to identify a site, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the Site. The Installation beNumber and oSuffix are also used in conjunction with the catCode to classify the function or purpose of the facility.
    /// Example: /// Example: BB002
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getOsuffix()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The International Air Transport Association (IATA) code of this site, if applicable.
    /// Example: /// Example: AAA
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getIata()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The International Civil Aviation Organization (ICAO) code of this site, if applicable.
    /// Example: /// Example: ICA1
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getIcao()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Federal Aviation Administration (FAA) Location ID of this site, if applicable.
    /// Example: /// Example: FAA1
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getFaa()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
    /// Example: /// Example: AL006
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getAirDefArea()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Universal Transverse Mercator (UTM) grid coordinates.
    /// Pos. 1-2, UTM Zone Column   [01-60
    /// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
    /// Pos. 4, UTM False Easting   [0-9]
    /// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
    /// Pos. 10-11, UTM False Northing    [0-9][0-9]
    /// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
    /// Example: /// Example: 19P4390691376966
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getUtm()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the grid system used in the development of the milGrid coordinates. Values are:
    /// UPS - Universal Polar System
    /// UTM - Universal Transverse Mercator.
    /// Example: /// Example: UTM
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getMilGridSys()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
    /// 4Q (grid zone designator, GZD)
    /// FJ (the 100,000-meter square identifier)
    /// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
    /// Example: /// Example: 4QFJ12345678
    /// Constraints: Minimum length = 0, Maximum length = 15
    public function getMilGrid()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The category code that represents the associated site purpose within the target system.
    /// Example: /// Example: 20345
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getCatCode()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Textual Description of Site catCode.
    /// Example: /// Example: Radar Facility, General
    /// Constraints: Minimum length = 0, Maximum length = 148
    public function getCatText()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// World Aeronautical Chart identifier for the area in which a designated place is located.
    /// Example: /// Example: 0427
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getWac()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: IZO7
    /// Constraints: Minimum length = 0, Maximum length = 7
    public function getPolSubdiv()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Geographical region code used by the Requirements Management System (RMS) as specified by National Geospatial Agency (NGA) in Flight Information Publications (FIPS) 10-4, Appendix 3 - Country Code and Geographic Region Codes. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: E2
    /// Constraints: Minimum length = 0, Maximum length = 2
    public function getGeoArea()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The distance between Mean Sea Level and a referenced ellipsoid, in meters.
    /// Example: /// Example: 12.34
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGeoidalMslSep()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The DoD Standard Country Code designator for the country or political entity to which the site owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: OTHR
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getAllegiance()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
    /// Example: /// Example: HL
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getAltAllegiance()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the importance of the entity to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
    /// 0 - Does not meet criteria above
    /// 1 - Primary importance to system
    /// 2 - Secondary importance to system
    /// 3 - Tertiary importance to system
    /// O - Other. Explain in Remarks.
    /// Example: /// Example: 1
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getClassRating()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: EOB
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getFpa()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Basic Encyclopedia Number associated with the Site. Uniquely identifies the installation of a site. The beNumber is generated based on the value input for the COORD to determine the appropriate World Aeronautical Chart (WAC) location identifier, the system assigned record originator and a one-up-number.
    /// Example: /// Example: 0427RT1030
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getBeNumber()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The number of runways at the site, if applicable.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getRunways()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The length of the longest runway at this site, if applicable, in meters.
    /// Example: /// Example: 1000
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMaxRunwayLength()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The physical manner of being or state of existence of the entity. A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: RDY
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getCondition()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Availability of the entity relative to its condition. Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getConditionAvail()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: OPR
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getOperStatus()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the amount or degree of deviation from the horizontal represented as a percent.  Grade is determined by the formula: vertical distance (VD) divided by horizontal distance (HD) times 100. VD is the difference between the highest and  lowest elevation within the entity. HD is the linear distance between the highest and lowest elevation.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getGrade()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Indicates the function or mission of an entity, which that entity may or may not be engaged in at any particular time. Typically refers to a unit, organization, or installation/site performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: OCC
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getActivity()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Principal operational function being performed. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: JG
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getFunctPrimary()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the principal type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: AA
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getMsnPrimary()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the principal specialty type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: AB
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getMsnPrimarySpec()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A sites ability to conduct nuclear warfare. Valid Values are:
    /// A - Nuclear Ammo Or Warheads Available
    /// N - No Nuclear Offense
    /// O - Other. Explain in Remarks
    /// U - Unknown
    /// W - Nuclear Weapons Available
    /// Y - Nuclear Warfare Offensive Capability
    /// Z - Inconclusive Analysis.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getNucCap()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
    /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
    /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
    /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    /// PENDING: Track object which has not been evaluated.
    /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    /// Example: /// Example: FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getIdent()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum, in meters.
    /// Example: /// Example: 123.45
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevMsl()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
    /// Example: /// Example: 50
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getElevMslConfLvl()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Indicates the plus or minus error assessed against the method used to derive the elevation.
    /// Example: /// Example: 12.34
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevMslDerivAcc()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum expected height of the vegetation in the Landing Zone (LZ), in meters.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVegHt()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The predominant vegetation found in the Landing Zone (LZ). The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: FR
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getVegType()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates whether the facility is in or outside of a populated area. True, the facility is in or within 5 NM of a populated area. False, the facility is outside a populated area.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getPopArea()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Indicates the distance to nearest populated area (over 1,000 people) in nautical miles.
    /// Example: /// Example: 12.345
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPopAreaProx()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional notes/comments for the site.
    /// Example: /// Example: Example Notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getNotes()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Responsible Producer - Organization that is responsible for the maintenance of the record.
    /// Example: /// Example: RT
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getResProd()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
    /// Example: /// Example: 7
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getEval()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency, in ISO8601 UTC format. This date cannot be greater than the current date.
    /// Example: /// Example: 2008-06-10
    /// Constraints: No constraints specified.
    public function getReviewDate()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs.
    /// A - Active
    /// I - Inactive
    /// K - Acknowledged
    /// L - Local
    /// Q - A nominated (NOM) or Data Change Request (DCR) record
    /// R - Production reduced by CMD decision
    /// W - Working Record.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getRecStatus()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element ident.
    /// Example: /// Example: SOGPU----------
    /// Constraints: Minimum length = 0, Maximum length = 15
    public function getSymCode()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reference documentation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: Provider Reference Documentation
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getReferenceDoc()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSiteRemarks($j)
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSiteRemarksLength()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Site_Full_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSite_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(69);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Site_Full
     */
    public static function createSite_Full(FlatBufferBuilder $builder, $id, $entity, $idEntity, $idParentSite, $classificationMarking, $origSiteID, $origLzId, $pin, $type, $usage, $lzUsage, $name, $coordDatum, $coord, $coordDerivAcc, $osuffix, $iata, $icao, $faa, $airDefArea, $utm, $milGridSys, $milGrid, $catCode, $catText, $wac, $polSubdiv, $geoArea, $geoidalMslSep, $allegiance, $altAllegiance, $classRating, $fpa, $beNumber, $runways, $maxRunwayLength, $condition, $conditionAvail, $operStatus, $grade, $activity, $functPrimary, $msnPrimary, $msnPrimarySpec, $nucCap, $ident, $elevMsl, $elevMslConfLvl, $elevMslDerivAcc, $vegHt, $vegType, $popArea, $popAreaProx, $notes, $resProd, $eval, $reviewDate, $recStatus, $symCode, $referenceDoc, $siteRemarks, $createdAt, $createdBy, $updatedAt, $updatedBy, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(69);
        self::addId($builder, $id);
        self::addEntity($builder, $entity);
        self::addIdEntity($builder, $idEntity);
        self::addIdParentSite($builder, $idParentSite);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addOrigSiteID($builder, $origSiteID);
        self::addOrigLzId($builder, $origLzId);
        self::addPin($builder, $pin);
        self::addType($builder, $type);
        self::addUsage($builder, $usage);
        self::addLzUsage($builder, $lzUsage);
        self::addName($builder, $name);
        self::addCoordDatum($builder, $coordDatum);
        self::addCoord($builder, $coord);
        self::addCoordDerivAcc($builder, $coordDerivAcc);
        self::addOsuffix($builder, $osuffix);
        self::addIata($builder, $iata);
        self::addIcao($builder, $icao);
        self::addFaa($builder, $faa);
        self::addAirDefArea($builder, $airDefArea);
        self::addUtm($builder, $utm);
        self::addMilGridSys($builder, $milGridSys);
        self::addMilGrid($builder, $milGrid);
        self::addCatCode($builder, $catCode);
        self::addCatText($builder, $catText);
        self::addWac($builder, $wac);
        self::addPolSubdiv($builder, $polSubdiv);
        self::addGeoArea($builder, $geoArea);
        self::addGeoidalMslSep($builder, $geoidalMslSep);
        self::addAllegiance($builder, $allegiance);
        self::addAltAllegiance($builder, $altAllegiance);
        self::addClassRating($builder, $classRating);
        self::addFpa($builder, $fpa);
        self::addBeNumber($builder, $beNumber);
        self::addRunways($builder, $runways);
        self::addMaxRunwayLength($builder, $maxRunwayLength);
        self::addCondition($builder, $condition);
        self::addConditionAvail($builder, $conditionAvail);
        self::addOperStatus($builder, $operStatus);
        self::addGrade($builder, $grade);
        self::addActivity($builder, $activity);
        self::addFunctPrimary($builder, $functPrimary);
        self::addMsnPrimary($builder, $msnPrimary);
        self::addMsnPrimarySpec($builder, $msnPrimarySpec);
        self::addNucCap($builder, $nucCap);
        self::addIdent($builder, $ident);
        self::addElevMsl($builder, $elevMsl);
        self::addElevMslConfLvl($builder, $elevMslConfLvl);
        self::addElevMslDerivAcc($builder, $elevMslDerivAcc);
        self::addVegHt($builder, $vegHt);
        self::addVegType($builder, $vegType);
        self::addPopArea($builder, $popArea);
        self::addPopAreaProx($builder, $popAreaProx);
        self::addNotes($builder, $notes);
        self::addResProd($builder, $resProd);
        self::addEval($builder, $eval);
        self::addReviewDate($builder, $reviewDate);
        self::addRecStatus($builder, $recStatus);
        self::addSymCode($builder, $symCode);
        self::addReferenceDoc($builder, $referenceDoc);
        self::addSiteRemarks($builder, $siteRemarks);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEntity(FlatBufferBuilder $builder, $entity)
    {
        $builder->addOffsetX(1, $entity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdEntity(FlatBufferBuilder $builder, $idEntity)
    {
        $builder->addOffsetX(2, $idEntity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdParentSite(FlatBufferBuilder $builder, $idParentSite)
    {
        $builder->addOffsetX(3, $idParentSite, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(4, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSiteID(FlatBufferBuilder $builder, $origSiteID)
    {
        $builder->addOffsetX(5, $origSiteID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigLzId(FlatBufferBuilder $builder, $origLzId)
    {
        $builder->addOffsetX(6, $origLzId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPin(FlatBufferBuilder $builder, $pin)
    {
        $builder->addOffsetX(7, $pin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(8, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUsage(FlatBufferBuilder $builder, $usage)
    {
        $builder->addOffsetX(9, $usage, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLzUsage(FlatBufferBuilder $builder, $lzUsage)
    {
        $builder->addOffsetX(10, $lzUsage, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(11, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCoordDatum(FlatBufferBuilder $builder, $coordDatum)
    {
        $builder->addOffsetX(12, $coordDatum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCoord(FlatBufferBuilder $builder, $coord)
    {
        $builder->addOffsetX(13, $coord, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCoordDerivAcc(FlatBufferBuilder $builder, $coordDerivAcc)
    {
        $builder->addDoubleX(14, $coordDerivAcc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOsuffix(FlatBufferBuilder $builder, $osuffix)
    {
        $builder->addOffsetX(15, $osuffix, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIata(FlatBufferBuilder $builder, $iata)
    {
        $builder->addOffsetX(16, $iata, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIcao(FlatBufferBuilder $builder, $icao)
    {
        $builder->addOffsetX(17, $icao, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFaa(FlatBufferBuilder $builder, $faa)
    {
        $builder->addOffsetX(18, $faa, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAirDefArea(FlatBufferBuilder $builder, $airDefArea)
    {
        $builder->addOffsetX(19, $airDefArea, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUtm(FlatBufferBuilder $builder, $utm)
    {
        $builder->addOffsetX(20, $utm, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMilGridSys(FlatBufferBuilder $builder, $milGridSys)
    {
        $builder->addOffsetX(21, $milGridSys, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMilGrid(FlatBufferBuilder $builder, $milGrid)
    {
        $builder->addOffsetX(22, $milGrid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCatCode(FlatBufferBuilder $builder, $catCode)
    {
        $builder->addOffsetX(23, $catCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCatText(FlatBufferBuilder $builder, $catText)
    {
        $builder->addOffsetX(24, $catText, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWac(FlatBufferBuilder $builder, $wac)
    {
        $builder->addOffsetX(25, $wac, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPolSubdiv(FlatBufferBuilder $builder, $polSubdiv)
    {
        $builder->addOffsetX(26, $polSubdiv, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGeoArea(FlatBufferBuilder $builder, $geoArea)
    {
        $builder->addOffsetX(27, $geoArea, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGeoidalMslSep(FlatBufferBuilder $builder, $geoidalMslSep)
    {
        $builder->addDoubleX(28, $geoidalMslSep, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAllegiance(FlatBufferBuilder $builder, $allegiance)
    {
        $builder->addOffsetX(29, $allegiance, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltAllegiance(FlatBufferBuilder $builder, $altAllegiance)
    {
        $builder->addOffsetX(30, $altAllegiance, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassRating(FlatBufferBuilder $builder, $classRating)
    {
        $builder->addOffsetX(31, $classRating, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFpa(FlatBufferBuilder $builder, $fpa)
    {
        $builder->addOffsetX(32, $fpa, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBeNumber(FlatBufferBuilder $builder, $beNumber)
    {
        $builder->addOffsetX(33, $beNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addRunways(FlatBufferBuilder $builder, $runways)
    {
        $builder->addIntX(34, $runways, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMaxRunwayLength(FlatBufferBuilder $builder, $maxRunwayLength)
    {
        $builder->addIntX(35, $maxRunwayLength, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCondition(FlatBufferBuilder $builder, $condition)
    {
        $builder->addOffsetX(36, $condition, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addConditionAvail(FlatBufferBuilder $builder, $conditionAvail)
    {
        $builder->addOffsetX(37, $conditionAvail, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOperStatus(FlatBufferBuilder $builder, $operStatus)
    {
        $builder->addOffsetX(38, $operStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addGrade(FlatBufferBuilder $builder, $grade)
    {
        $builder->addIntX(39, $grade, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActivity(FlatBufferBuilder $builder, $activity)
    {
        $builder->addOffsetX(40, $activity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFunctPrimary(FlatBufferBuilder $builder, $functPrimary)
    {
        $builder->addOffsetX(41, $functPrimary, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsnPrimary(FlatBufferBuilder $builder, $msnPrimary)
    {
        $builder->addOffsetX(42, $msnPrimary, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsnPrimarySpec(FlatBufferBuilder $builder, $msnPrimarySpec)
    {
        $builder->addOffsetX(43, $msnPrimarySpec, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNucCap(FlatBufferBuilder $builder, $nucCap)
    {
        $builder->addOffsetX(44, $nucCap, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdent(FlatBufferBuilder $builder, $ident)
    {
        $builder->addOffsetX(45, $ident, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevMsl(FlatBufferBuilder $builder, $elevMsl)
    {
        $builder->addDoubleX(46, $elevMsl, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addElevMslConfLvl(FlatBufferBuilder $builder, $elevMslConfLvl)
    {
        $builder->addIntX(47, $elevMslConfLvl, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevMslDerivAcc(FlatBufferBuilder $builder, $elevMslDerivAcc)
    {
        $builder->addDoubleX(48, $elevMslDerivAcc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVegHt(FlatBufferBuilder $builder, $vegHt)
    {
        $builder->addDoubleX(49, $vegHt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVegType(FlatBufferBuilder $builder, $vegType)
    {
        $builder->addOffsetX(50, $vegType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addPopArea(FlatBufferBuilder $builder, $popArea)
    {
        $builder->addBoolX(51, $popArea, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPopAreaProx(FlatBufferBuilder $builder, $popAreaProx)
    {
        $builder->addDoubleX(52, $popAreaProx, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNotes(FlatBufferBuilder $builder, $notes)
    {
        $builder->addOffsetX(53, $notes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addResProd(FlatBufferBuilder $builder, $resProd)
    {
        $builder->addOffsetX(54, $resProd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addEval(FlatBufferBuilder $builder, $eval)
    {
        $builder->addIntX(55, $eval, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReviewDate(FlatBufferBuilder $builder, $reviewDate)
    {
        $builder->addOffsetX(56, $reviewDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRecStatus(FlatBufferBuilder $builder, $recStatus)
    {
        $builder->addOffsetX(57, $recStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSymCode(FlatBufferBuilder $builder, $symCode)
    {
        $builder->addOffsetX(58, $symCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReferenceDoc(FlatBufferBuilder $builder, $referenceDoc)
    {
        $builder->addOffsetX(59, $referenceDoc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSiteRemarks(FlatBufferBuilder $builder, $siteRemarks)
    {
        $builder->addOffsetX(60, $siteRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSiteRemarksVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSiteRemarksVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(61, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(62, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(63, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(64, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(65, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(66, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(67, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(68, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSite_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSite_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "SITE");
    }
}
