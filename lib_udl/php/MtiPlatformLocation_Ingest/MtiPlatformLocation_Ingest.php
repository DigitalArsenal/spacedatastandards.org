<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Provides information pertaining to the location of the sensor platform during periods when the sensor is not collecting data. It shall be sent as required during periods in which the sensor is not collecting data, such as enroute to an orbit location, during a turn, or any other time at which platform location is required.
class MtiPlatformLocation_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return MtiPlatformLocation_Ingest
     */
    public static function getRootAsMtiPlatformLocation_Ingest(ByteBuffer $bb)
    {
        $obj = new MtiPlatformLocation_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function MtiPlatformLocation_IngestIdentifier()
    {
        return "MTIP";
    }

    public static function MtiPlatformLocation_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::MtiPlatformLocation_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return MtiPlatformLocation_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields of the Mission Segment to the time the report is prepared.
    /// Example: /// Example: 1234567890
    /// Constraints: No constraints specified.
    /**
     * @return long
     */
    public function getL1()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /// North-South position of the platform at the time the report is prepared, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getL2()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// East-West position of the platform at the time the report is prepared, expressed as degrees East (positive) from the Prime Meridian.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getL3()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Altitude of the platform at the time the report is prepared, referenced to its position above the WGS-84 ellipsoid, in centimeters.
    /// Example: /// Example: 45
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getL4()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Ground track of the platform at the time the report is prepared, expressed as the angle in degrees (clockwise) from True North.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getL5()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Ground speed of the platform at the time the report is prepared, expressed as millimeters per second.
    /// Example: /// Example: 50
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getL6()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Velocity of the platform in the vertical direction, expressed as decimeters per second.
    /// Example: /// Example: 82
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getL7()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Platform location timestamp in ISO8601 UTC format.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getPlatlocts()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startMtiPlatformLocation_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return MtiPlatformLocation_Ingest
     */
    public static function createMtiPlatformLocation_Ingest(FlatBufferBuilder $builder, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $platlocts)
    {
        $builder->startObject(8);
        self::addL1($builder, $l1);
        self::addL2($builder, $l2);
        self::addL3($builder, $l3);
        self::addL4($builder, $l4);
        self::addL5($builder, $l5);
        self::addL6($builder, $l6);
        self::addL7($builder, $l7);
        self::addPlatlocts($builder, $platlocts);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addL1(FlatBufferBuilder $builder, $l1)
    {
        $builder->addLongX(0, $l1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addL2(FlatBufferBuilder $builder, $l2)
    {
        $builder->addDoubleX(1, $l2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addL3(FlatBufferBuilder $builder, $l3)
    {
        $builder->addDoubleX(2, $l3, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addL4(FlatBufferBuilder $builder, $l4)
    {
        $builder->addIntX(3, $l4, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addL5(FlatBufferBuilder $builder, $l5)
    {
        $builder->addDoubleX(4, $l5, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addL6(FlatBufferBuilder $builder, $l6)
    {
        $builder->addIntX(5, $l6, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addL7(FlatBufferBuilder $builder, $l7)
    {
        $builder->addIntX(6, $l7, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlatlocts(FlatBufferBuilder $builder, $platlocts)
    {
        $builder->addOffsetX(7, $platlocts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endMtiPlatformLocation_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishMtiPlatformLocation_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "MTIP");
    }
}
