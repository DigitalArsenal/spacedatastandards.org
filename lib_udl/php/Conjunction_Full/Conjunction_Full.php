<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Stores the results of a particular Conjunction Assessment (CA) run.
class Conjunction_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Conjunction_Full
     */
    public static function getRootAsConjunction_Full(ByteBuffer $bb)
    {
        $obj = new Conjunction_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Conjunction_FullIdentifier()
    {
        return "CONJ";
    }

    public static function Conjunction_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Conjunction_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Conjunction_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: CONJUNCTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the primary satellite on-orbit object, if correlated.
    /// Example: /// Example: ONORBIT1-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit1()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the secondary satellite on-orbit object, if correlated.
    /// Example: /// Example: ONORBIT2-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit2()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of data represented in this conjunction record (e.g. CONJUNCTION, CARA-WORKLIST, etc.).  If type is null the record is assumed to be a Conjunction.
    /// Example: /// Example: CONJUNCTION
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getType()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time of closest approach (TCA) in UTC.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getTca()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Distance between objects at Time of Closest Approach (TCA) in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMissDistance()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Probability of Collision is the probability (denoted p, where 0.0<=p<=1.0), that Object1 and Object2 will collide.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCollisionProb()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The method that was used to calculate the collision probability, ex. FOSTER-1992.
    /// Example: /// Example: FOSTER-1992
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCollisionProbMethod()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The filename of the primary (object1) ephemeris used in the screening, if applicable.
    /// Example: /// Example: MEME_SPCFT_ABC_2180000_ops_nomnvr_unclassified.oem
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getEphemName1()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the parent Ephemeris Set of the primary (object1) ephemeris used in the screening, if applicable.
    /// Example: /// Example: a2ae2356-6d83-4e4b-896d-ddd1958800fa
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getEsId1()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The filename of the secondary (object2) ephemeris used in the screening, if applicable.
    /// Example: /// Example: MEME_SPCFT_DEF_2170000_ops_nomnvr_unclassified.txt
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getEphemName2()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the parent Ephemeris Set of the secondary (object2) ephemeris used in the screening, if applicable.
    /// Example: /// Example: 6fa31433-8beb-4b9b-8bf9-326dbd041c3f
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getEsId2()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Distance between objects along Radial Vector at Time of Closest Approach in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRelPosR()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Distance between objects along Tangential Vector in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRelPosT()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Distance between objects along Normal vector in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRelPosN()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Closing velocity magnitude (relative speed) at Time of Closest Approach in meters/sec.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRelVelMag()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Closing velocity between objects along Radial Vector at Time of Closest Approach in meters/sec.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRelVelR()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Closing velocity between objects along Tangential Vector in meters/sec.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRelVelT()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Closing velocity between objects along Normal Vector in meters/sec.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRelVelN()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The start time in UTC of the screening period for the conjunction assessment.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getScreenEntryTime()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The stop time in UTC of the screening period for the conjunction assessment.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getScreenExitTime()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Component size of screen in X component of  RTN (Radial, Transverse and Normal) frame in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getScreenVolumeX()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Component size of screen in Y component of  RTN (Radial, Transverse and Normal) frame in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getScreenVolumeY()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Component size of screen in Z component of  RTN (Radial, Transverse and Normal) frame in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getScreenVolumeZ()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The shape (BOX, ELLIPSOID) of the screening volume.
    /// Example: /// Example: ELLIPSOID
    /// Constraints: Minimum length = 0, Maximum length = 12
    public function getVolShape()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time at which the secondary (object2) enters the screening volume, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:02:01.123456Z
    /// Constraints: No constraints specified.
    public function getVolEntryTime()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time at which the secondary (object2) exits the screening volume, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:02:28.123456Z
    /// Constraints: No constraints specified.
    public function getVolExitTime()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Penetration Level Sigma.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPenetrationLevelSigma()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional ID of the UDL State Vector at TCA of the primary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector1.
    /// Example: /// Example: REF-STATEVECTOR1-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdStateVector1()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time of last positive metric observation of the primary satellite.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getLastObTime1()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The value of the primary (object1) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
    /// Example: /// Example: 0.016386
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCdAoM1()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The value of the primary (object1) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
    /// Example: /// Example: 0.013814
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCrAoM1()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The primary (object1) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
    /// Example: /// Example: 0.033814
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getThrustAccel1()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional ID of the UDL State Vector at TCA of the secondary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector2.
    /// Example: /// Example: REF-STATEVECTOR2-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdStateVector2()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time of last positive metric observation of the secondary satellite.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getLastObTime2()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The value of the secondary (object2) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
    /// Example: /// Example: 0.016386
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCdAoM2()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The value of the secondary (object2) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
    /// Example: /// Example: 0.013814
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCrAoM2()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The secondary (object2) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
    /// Example: /// Example: 0.033814
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getThrustAccel2()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Additional notes from data providers.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getComments()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Commander's critical information requirements notes.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getCcir()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Emergency comments.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getConcernNotes()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating if State department was notified.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getStateDeptNotified()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating if owner was contacted.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getOwnerContacted()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Link to filename associated with JMS record.
    /// Example: /// Example: Example link
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getRawFileURI()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft name(s) for which the Collision message is provided.
    /// Example: /// Example: Message for space craft A
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getMessageFor()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// JMS provided message ID link.
    /// Example: /// Example: MESSAGE-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getMessageId()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getUvwWarn()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getSmallRelVelWarning()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLargeRelPosWarning()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getSmallCovWarning()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLargeCovWarning()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTransactionId()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Creating agency or owner/operator (may be different than provider who submitted the conjunction message).
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOriginator()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional source-provided identifier for this conjunction event. In the case where multiple conjunction records are submitted for the same event, this field can be used to tie them together to the same event.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getEventId()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: sample_descriptor here
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getDescriptor()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG1']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTags($j)
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTagsLength()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Conjunction_Full_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getStateVector1()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getStateVector2()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/catalog number of the target on-orbit primary object.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo1()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Satellite/catalog number of the target on-orbit secondary object.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo2()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getOnOrbit1()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getOnOrbit2()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional place holder for an OnOrbit ID that does not exist in UDL.
    /// Example: /// Example: ORIGONORBIT1-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOrigIdOnOrbit1()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional place holder for an OnOrbit ID that does not exist in UDL.
    /// Example: /// Example: ORIGONORBIT2-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOrigIdOnOrbit2()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startConjunction_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(71);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Conjunction_Full
     */
    public static function createConjunction_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $idOnOrbit1, $idOnOrbit2, $type, $tca, $missDistance, $collisionProb, $collisionProbMethod, $ephemName1, $esId1, $ephemName2, $esId2, $relPosR, $relPosT, $relPosN, $relVelMag, $relVelR, $relVelT, $relVelN, $screenEntryTime, $screenExitTime, $screenVolumeX, $screenVolumeY, $screenVolumeZ, $volShape, $volEntryTime, $volExitTime, $penetrationLevelSigma, $idStateVector1, $lastObTime1, $cdAoM1, $crAoM1, $thrustAccel1, $idStateVector2, $lastObTime2, $cdAoM2, $crAoM2, $thrustAccel2, $comments, $ccir, $concernNotes, $stateDeptNotified, $ownerContacted, $rawFileURI, $messageFor, $messageId, $uvwWarn, $smallRelVelWarning, $largeRelPosWarning, $smallCovWarning, $largeCovWarning, $transactionId, $source, $origin, $originator, $eventId, $descriptor, $tags, $dataMode, $createdAt, $createdBy, $stateVector1, $stateVector2, $satNo1, $satNo2, $onOrbit1, $onOrbit2, $origIdOnOrbit1, $origIdOnOrbit2, $origNetwork)
    {
        $builder->startObject(71);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdOnOrbit1($builder, $idOnOrbit1);
        self::addIdOnOrbit2($builder, $idOnOrbit2);
        self::addType($builder, $type);
        self::addTca($builder, $tca);
        self::addMissDistance($builder, $missDistance);
        self::addCollisionProb($builder, $collisionProb);
        self::addCollisionProbMethod($builder, $collisionProbMethod);
        self::addEphemName1($builder, $ephemName1);
        self::addEsId1($builder, $esId1);
        self::addEphemName2($builder, $ephemName2);
        self::addEsId2($builder, $esId2);
        self::addRelPosR($builder, $relPosR);
        self::addRelPosT($builder, $relPosT);
        self::addRelPosN($builder, $relPosN);
        self::addRelVelMag($builder, $relVelMag);
        self::addRelVelR($builder, $relVelR);
        self::addRelVelT($builder, $relVelT);
        self::addRelVelN($builder, $relVelN);
        self::addScreenEntryTime($builder, $screenEntryTime);
        self::addScreenExitTime($builder, $screenExitTime);
        self::addScreenVolumeX($builder, $screenVolumeX);
        self::addScreenVolumeY($builder, $screenVolumeY);
        self::addScreenVolumeZ($builder, $screenVolumeZ);
        self::addVolShape($builder, $volShape);
        self::addVolEntryTime($builder, $volEntryTime);
        self::addVolExitTime($builder, $volExitTime);
        self::addPenetrationLevelSigma($builder, $penetrationLevelSigma);
        self::addIdStateVector1($builder, $idStateVector1);
        self::addLastObTime1($builder, $lastObTime1);
        self::addCdAoM1($builder, $cdAoM1);
        self::addCrAoM1($builder, $crAoM1);
        self::addThrustAccel1($builder, $thrustAccel1);
        self::addIdStateVector2($builder, $idStateVector2);
        self::addLastObTime2($builder, $lastObTime2);
        self::addCdAoM2($builder, $cdAoM2);
        self::addCrAoM2($builder, $crAoM2);
        self::addThrustAccel2($builder, $thrustAccel2);
        self::addComments($builder, $comments);
        self::addCcir($builder, $ccir);
        self::addConcernNotes($builder, $concernNotes);
        self::addStateDeptNotified($builder, $stateDeptNotified);
        self::addOwnerContacted($builder, $ownerContacted);
        self::addRawFileURI($builder, $rawFileURI);
        self::addMessageFor($builder, $messageFor);
        self::addMessageId($builder, $messageId);
        self::addUvwWarn($builder, $uvwWarn);
        self::addSmallRelVelWarning($builder, $smallRelVelWarning);
        self::addLargeRelPosWarning($builder, $largeRelPosWarning);
        self::addSmallCovWarning($builder, $smallCovWarning);
        self::addLargeCovWarning($builder, $largeCovWarning);
        self::addTransactionId($builder, $transactionId);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOriginator($builder, $originator);
        self::addEventId($builder, $eventId);
        self::addDescriptor($builder, $descriptor);
        self::addTags($builder, $tags);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addStateVector1($builder, $stateVector1);
        self::addStateVector2($builder, $stateVector2);
        self::addSatNo1($builder, $satNo1);
        self::addSatNo2($builder, $satNo2);
        self::addOnOrbit1($builder, $onOrbit1);
        self::addOnOrbit2($builder, $onOrbit2);
        self::addOrigIdOnOrbit1($builder, $origIdOnOrbit1);
        self::addOrigIdOnOrbit2($builder, $origIdOnOrbit2);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit1(FlatBufferBuilder $builder, $idOnOrbit1)
    {
        $builder->addOffsetX(2, $idOnOrbit1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit2(FlatBufferBuilder $builder, $idOnOrbit2)
    {
        $builder->addOffsetX(3, $idOnOrbit2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(4, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTca(FlatBufferBuilder $builder, $tca)
    {
        $builder->addOffsetX(5, $tca, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMissDistance(FlatBufferBuilder $builder, $missDistance)
    {
        $builder->addDoubleX(6, $missDistance, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCollisionProb(FlatBufferBuilder $builder, $collisionProb)
    {
        $builder->addDoubleX(7, $collisionProb, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCollisionProbMethod(FlatBufferBuilder $builder, $collisionProbMethod)
    {
        $builder->addOffsetX(8, $collisionProbMethod, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEphemName1(FlatBufferBuilder $builder, $ephemName1)
    {
        $builder->addOffsetX(9, $ephemName1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEsId1(FlatBufferBuilder $builder, $esId1)
    {
        $builder->addOffsetX(10, $esId1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEphemName2(FlatBufferBuilder $builder, $ephemName2)
    {
        $builder->addOffsetX(11, $ephemName2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEsId2(FlatBufferBuilder $builder, $esId2)
    {
        $builder->addOffsetX(12, $esId2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRelPosR(FlatBufferBuilder $builder, $relPosR)
    {
        $builder->addDoubleX(13, $relPosR, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRelPosT(FlatBufferBuilder $builder, $relPosT)
    {
        $builder->addDoubleX(14, $relPosT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRelPosN(FlatBufferBuilder $builder, $relPosN)
    {
        $builder->addDoubleX(15, $relPosN, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRelVelMag(FlatBufferBuilder $builder, $relVelMag)
    {
        $builder->addDoubleX(16, $relVelMag, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRelVelR(FlatBufferBuilder $builder, $relVelR)
    {
        $builder->addDoubleX(17, $relVelR, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRelVelT(FlatBufferBuilder $builder, $relVelT)
    {
        $builder->addDoubleX(18, $relVelT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRelVelN(FlatBufferBuilder $builder, $relVelN)
    {
        $builder->addDoubleX(19, $relVelN, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addScreenEntryTime(FlatBufferBuilder $builder, $screenEntryTime)
    {
        $builder->addOffsetX(20, $screenEntryTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addScreenExitTime(FlatBufferBuilder $builder, $screenExitTime)
    {
        $builder->addOffsetX(21, $screenExitTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addScreenVolumeX(FlatBufferBuilder $builder, $screenVolumeX)
    {
        $builder->addDoubleX(22, $screenVolumeX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addScreenVolumeY(FlatBufferBuilder $builder, $screenVolumeY)
    {
        $builder->addDoubleX(23, $screenVolumeY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addScreenVolumeZ(FlatBufferBuilder $builder, $screenVolumeZ)
    {
        $builder->addDoubleX(24, $screenVolumeZ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVolShape(FlatBufferBuilder $builder, $volShape)
    {
        $builder->addOffsetX(25, $volShape, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVolEntryTime(FlatBufferBuilder $builder, $volEntryTime)
    {
        $builder->addOffsetX(26, $volEntryTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVolExitTime(FlatBufferBuilder $builder, $volExitTime)
    {
        $builder->addOffsetX(27, $volExitTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPenetrationLevelSigma(FlatBufferBuilder $builder, $penetrationLevelSigma)
    {
        $builder->addDoubleX(28, $penetrationLevelSigma, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdStateVector1(FlatBufferBuilder $builder, $idStateVector1)
    {
        $builder->addOffsetX(29, $idStateVector1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastObTime1(FlatBufferBuilder $builder, $lastObTime1)
    {
        $builder->addOffsetX(30, $lastObTime1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCdAoM1(FlatBufferBuilder $builder, $cdAoM1)
    {
        $builder->addDoubleX(31, $cdAoM1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCrAoM1(FlatBufferBuilder $builder, $crAoM1)
    {
        $builder->addDoubleX(32, $crAoM1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addThrustAccel1(FlatBufferBuilder $builder, $thrustAccel1)
    {
        $builder->addDoubleX(33, $thrustAccel1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdStateVector2(FlatBufferBuilder $builder, $idStateVector2)
    {
        $builder->addOffsetX(34, $idStateVector2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastObTime2(FlatBufferBuilder $builder, $lastObTime2)
    {
        $builder->addOffsetX(35, $lastObTime2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCdAoM2(FlatBufferBuilder $builder, $cdAoM2)
    {
        $builder->addDoubleX(36, $cdAoM2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCrAoM2(FlatBufferBuilder $builder, $crAoM2)
    {
        $builder->addDoubleX(37, $crAoM2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addThrustAccel2(FlatBufferBuilder $builder, $thrustAccel2)
    {
        $builder->addDoubleX(38, $thrustAccel2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addComments(FlatBufferBuilder $builder, $comments)
    {
        $builder->addOffsetX(39, $comments, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCcir(FlatBufferBuilder $builder, $ccir)
    {
        $builder->addOffsetX(40, $ccir, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addConcernNotes(FlatBufferBuilder $builder, $concernNotes)
    {
        $builder->addOffsetX(41, $concernNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addStateDeptNotified(FlatBufferBuilder $builder, $stateDeptNotified)
    {
        $builder->addBoolX(42, $stateDeptNotified, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addOwnerContacted(FlatBufferBuilder $builder, $ownerContacted)
    {
        $builder->addBoolX(43, $ownerContacted, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRawFileURI(FlatBufferBuilder $builder, $rawFileURI)
    {
        $builder->addOffsetX(44, $rawFileURI, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMessageFor(FlatBufferBuilder $builder, $messageFor)
    {
        $builder->addOffsetX(45, $messageFor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMessageId(FlatBufferBuilder $builder, $messageId)
    {
        $builder->addOffsetX(46, $messageId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addUvwWarn(FlatBufferBuilder $builder, $uvwWarn)
    {
        $builder->addBoolX(47, $uvwWarn, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addSmallRelVelWarning(FlatBufferBuilder $builder, $smallRelVelWarning)
    {
        $builder->addBoolX(48, $smallRelVelWarning, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLargeRelPosWarning(FlatBufferBuilder $builder, $largeRelPosWarning)
    {
        $builder->addBoolX(49, $largeRelPosWarning, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addSmallCovWarning(FlatBufferBuilder $builder, $smallCovWarning)
    {
        $builder->addBoolX(50, $smallCovWarning, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLargeCovWarning(FlatBufferBuilder $builder, $largeCovWarning)
    {
        $builder->addBoolX(51, $largeCovWarning, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransactionId(FlatBufferBuilder $builder, $transactionId)
    {
        $builder->addOffsetX(52, $transactionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(53, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(54, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOriginator(FlatBufferBuilder $builder, $originator)
    {
        $builder->addOffsetX(55, $originator, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEventId(FlatBufferBuilder $builder, $eventId)
    {
        $builder->addOffsetX(56, $eventId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescriptor(FlatBufferBuilder $builder, $descriptor)
    {
        $builder->addOffsetX(57, $descriptor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTags(FlatBufferBuilder $builder, $tags)
    {
        $builder->addOffsetX(58, $tags, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTagsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTagsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(59, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(60, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(61, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStateVector1(FlatBufferBuilder $builder, $stateVector1)
    {
        $builder->addOffsetX(62, $stateVector1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStateVector2(FlatBufferBuilder $builder, $stateVector2)
    {
        $builder->addOffsetX(63, $stateVector2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo1(FlatBufferBuilder $builder, $satNo1)
    {
        $builder->addIntX(64, $satNo1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo2(FlatBufferBuilder $builder, $satNo2)
    {
        $builder->addIntX(65, $satNo2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOnOrbit1(FlatBufferBuilder $builder, $onOrbit1)
    {
        $builder->addOffsetX(66, $onOrbit1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOnOrbit2(FlatBufferBuilder $builder, $onOrbit2)
    {
        $builder->addOffsetX(67, $onOrbit2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigIdOnOrbit1(FlatBufferBuilder $builder, $origIdOnOrbit1)
    {
        $builder->addOffsetX(68, $origIdOnOrbit1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigIdOnOrbit2(FlatBufferBuilder $builder, $origIdOnOrbit2)
    {
        $builder->addOffsetX(69, $origIdOnOrbit2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(70, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endConjunction_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishConjunction_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "CONJ");
    }
}
