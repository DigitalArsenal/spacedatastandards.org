<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// The airfield status contains dynamic data of an airfield's capabilities.
class AirfieldStatus_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AirfieldStatus_Full
     */
    public static function getRootAsAirfieldStatus_Full(ByteBuffer $bb)
    {
        $obj = new AirfieldStatus_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AirfieldStatus_FullIdentifier()
    {
        return "AIRF";
    }

    public static function AirfieldStatus_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AirfieldStatus_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AirfieldStatus_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the Airfield for which this status is referencing.
    /// Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdAirfield()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Alternate airfield identifier provided by the source.
    /// Example: /// Example: AIRFIELD-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getAltAirfieldId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Maximum on ground (MOG) number of high-reach/wide-body passenger aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPassengerServiceMOG()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Maximum on ground (MOG) number of fleet aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getFleetServiceMOG()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Maximum on ground (MOG) number of high-reach/wide-body cargo aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
    /// Example: /// Example: 8
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCargoMOG()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Maximum on ground (MOG) number of aircraft that can be simultaneously refueled based on spacing and manpower at the time of status.
    /// Example: /// Example: 9
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getFuelMOG()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Array of fuel types available at the airfield. This array must be the same length as fuelQtys.
    /// Example: /// Example: ['JP-8', 'Jet A', 'AVGAS']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getFuelTypes($j)
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getFuelTypesLength()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of quantities for each fuel type at the airfield, in kilograms. The values in this array must correspond to the position index in fuelTypes. This array must be the same length as fuelTypes.
    /// Example: /// Example: [263083.6, 286674.9, 18143.69]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getFuelQtys($j)
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getFuelQtysLength()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Maximum on ground (MOG) number of aircraft that can be simultaneously ground handled for standard maintenance based on spacing and manpower at the time of status.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMxMOG()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Maximum on ground (MOG) number of aircraft due to items not directly related to the airfield infrastructure or aircraft servicing capability based on spacing and manpower at the time of status.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getOperatingMOG()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The number of aircraft that are currently on ground (COG) at the airfield.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumCOG()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Maximum on ground (MOG) number of working wide-body aircraft based on spacing and manpower at the time of status.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getWideWorkingMOG()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Maximum on ground (MOG) number of parking wide-body aircraft based on spacing and manpower at the time of status.
    /// Example: /// Example: 7
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getWideParkingMOG()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Maximum on ground (MOG) number of working narrow-body aircraft based on spacing and manpower at the time of status.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNarrowWorkingMOG()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Maximum on ground (MOG) number of parking narrow-body aircraft based on spacing and manpower at the time of status.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNarrowParkingMOG()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Array of material handling equipment types at the airfield. This array must be the same length as mheQtys.
    /// Example: /// Example: ['30k', 'AT', '60k']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getMheTypes($j)
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMheTypesLength()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of quantities for each material handling equipment types at the airfield. The values in this array must correspond to the position index in mheTypes. This array must be the same length as mheTypes.
    /// Example: /// Example: [1, 3, 1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getMheQtys($j)
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMheQtysLength()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The level of medical support and capabilities available at the airfield.
    /// Example: /// Example: Large Field Hospital
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getMedCap()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The category of aircraft rescue and fire fighting (ARFF) services that are currently available at the airfield. Entries should include  the code (FAA or ICAO) and the category.
    /// Example: /// Example: FAA-A
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getArffCat()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The expected time to receive ground support equipment (e.g. power units, air units, cables, hoses, etc.), in minutes.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getGseTime()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The number or ID of primary runway at the airfield.
    /// Example: /// Example: 35R
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getPriRwyNum()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The primary runway condition reading value used for determining runway braking action, from 0 to 26. A value of 0 indicates braking action is poor or non-existent, where a value of 26 indicates braking action is good.
    /// Example: /// Example: 23
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getRwyCondReading()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The primary runway friction factor which is dependent on the surface friction between the tires of the aircraft and the runway surface, from 0 to 100. A lower number indicates less friction and less braking response.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getRwyFrictionFactor()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Array of markings currently on the primary runway.
    /// Example: /// Example: ['Aiming Point', 'Threshold']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRwyMarkings($j)
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRwyMarkingsLength()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Description of the current status of the airfield.
    /// Example: /// Example: Status message about the airfield.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getMessage()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The primary frequency which the airfield is currently operating, in megahertz.
    /// Example: /// Example: 123.45
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPriFreq()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Array of slot types that an airfield requires a particular aircraft provide in order to consume a slot at this location.
    /// Example: /// Example: ['PARKING', 'WORKING', 'LANDING']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSlotTypesReq($j)
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSlotTypesReqLength()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AirfieldStatus_Full_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAirfieldStatus_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(38);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AirfieldStatus_Full
     */
    public static function createAirfieldStatus_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $idAirfield, $altAirfieldId, $passengerServiceMOG, $fleetServiceMOG, $cargoMOG, $fuelMOG, $fuelTypes, $fuelQtys, $mxMOG, $operatingMOG, $numCOG, $wideWorkingMOG, $wideParkingMOG, $narrowWorkingMOG, $narrowParkingMOG, $mheTypes, $mheQtys, $medCap, $arffCat, $gseTime, $priRwyNum, $rwyCondReading, $rwyFrictionFactor, $rwyMarkings, $message, $priFreq, $slotTypesReq, $createdAt, $createdBy, $updatedAt, $updatedBy, $sourceDL, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(38);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdAirfield($builder, $idAirfield);
        self::addAltAirfieldId($builder, $altAirfieldId);
        self::addPassengerServiceMOG($builder, $passengerServiceMOG);
        self::addFleetServiceMOG($builder, $fleetServiceMOG);
        self::addCargoMOG($builder, $cargoMOG);
        self::addFuelMOG($builder, $fuelMOG);
        self::addFuelTypes($builder, $fuelTypes);
        self::addFuelQtys($builder, $fuelQtys);
        self::addMxMOG($builder, $mxMOG);
        self::addOperatingMOG($builder, $operatingMOG);
        self::addNumCOG($builder, $numCOG);
        self::addWideWorkingMOG($builder, $wideWorkingMOG);
        self::addWideParkingMOG($builder, $wideParkingMOG);
        self::addNarrowWorkingMOG($builder, $narrowWorkingMOG);
        self::addNarrowParkingMOG($builder, $narrowParkingMOG);
        self::addMheTypes($builder, $mheTypes);
        self::addMheQtys($builder, $mheQtys);
        self::addMedCap($builder, $medCap);
        self::addArffCat($builder, $arffCat);
        self::addGseTime($builder, $gseTime);
        self::addPriRwyNum($builder, $priRwyNum);
        self::addRwyCondReading($builder, $rwyCondReading);
        self::addRwyFrictionFactor($builder, $rwyFrictionFactor);
        self::addRwyMarkings($builder, $rwyMarkings);
        self::addMessage($builder, $message);
        self::addPriFreq($builder, $priFreq);
        self::addSlotTypesReq($builder, $slotTypesReq);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdAirfield(FlatBufferBuilder $builder, $idAirfield)
    {
        $builder->addOffsetX(2, $idAirfield, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltAirfieldId(FlatBufferBuilder $builder, $altAirfieldId)
    {
        $builder->addOffsetX(3, $altAirfieldId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPassengerServiceMOG(FlatBufferBuilder $builder, $passengerServiceMOG)
    {
        $builder->addIntX(4, $passengerServiceMOG, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addFleetServiceMOG(FlatBufferBuilder $builder, $fleetServiceMOG)
    {
        $builder->addIntX(5, $fleetServiceMOG, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCargoMOG(FlatBufferBuilder $builder, $cargoMOG)
    {
        $builder->addIntX(6, $cargoMOG, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addFuelMOG(FlatBufferBuilder $builder, $fuelMOG)
    {
        $builder->addIntX(7, $fuelMOG, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addFuelTypes(FlatBufferBuilder $builder, $fuelTypes)
    {
        $builder->addOffsetX(8, $fuelTypes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createFuelTypesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startFuelTypesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addFuelQtys(FlatBufferBuilder $builder, $fuelQtys)
    {
        $builder->addOffsetX(9, $fuelQtys, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createFuelQtysVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startFuelQtysVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMxMOG(FlatBufferBuilder $builder, $mxMOG)
    {
        $builder->addIntX(10, $mxMOG, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addOperatingMOG(FlatBufferBuilder $builder, $operatingMOG)
    {
        $builder->addIntX(11, $operatingMOG, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumCOG(FlatBufferBuilder $builder, $numCOG)
    {
        $builder->addIntX(12, $numCOG, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addWideWorkingMOG(FlatBufferBuilder $builder, $wideWorkingMOG)
    {
        $builder->addIntX(13, $wideWorkingMOG, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addWideParkingMOG(FlatBufferBuilder $builder, $wideParkingMOG)
    {
        $builder->addIntX(14, $wideParkingMOG, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNarrowWorkingMOG(FlatBufferBuilder $builder, $narrowWorkingMOG)
    {
        $builder->addIntX(15, $narrowWorkingMOG, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNarrowParkingMOG(FlatBufferBuilder $builder, $narrowParkingMOG)
    {
        $builder->addIntX(16, $narrowParkingMOG, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMheTypes(FlatBufferBuilder $builder, $mheTypes)
    {
        $builder->addOffsetX(17, $mheTypes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMheTypesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMheTypesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMheQtys(FlatBufferBuilder $builder, $mheQtys)
    {
        $builder->addOffsetX(18, $mheQtys, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMheQtysVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMheQtysVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMedCap(FlatBufferBuilder $builder, $medCap)
    {
        $builder->addOffsetX(19, $medCap, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArffCat(FlatBufferBuilder $builder, $arffCat)
    {
        $builder->addOffsetX(20, $arffCat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addGseTime(FlatBufferBuilder $builder, $gseTime)
    {
        $builder->addIntX(21, $gseTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPriRwyNum(FlatBufferBuilder $builder, $priRwyNum)
    {
        $builder->addOffsetX(22, $priRwyNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addRwyCondReading(FlatBufferBuilder $builder, $rwyCondReading)
    {
        $builder->addIntX(23, $rwyCondReading, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addRwyFrictionFactor(FlatBufferBuilder $builder, $rwyFrictionFactor)
    {
        $builder->addIntX(24, $rwyFrictionFactor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRwyMarkings(FlatBufferBuilder $builder, $rwyMarkings)
    {
        $builder->addOffsetX(25, $rwyMarkings, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRwyMarkingsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRwyMarkingsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMessage(FlatBufferBuilder $builder, $message)
    {
        $builder->addOffsetX(26, $message, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPriFreq(FlatBufferBuilder $builder, $priFreq)
    {
        $builder->addDoubleX(27, $priFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSlotTypesReq(FlatBufferBuilder $builder, $slotTypesReq)
    {
        $builder->addOffsetX(28, $slotTypesReq, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSlotTypesReqVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSlotTypesReqVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(29, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(30, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(31, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(32, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(33, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(34, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(35, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(36, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(37, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAirfieldStatus_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAirfieldStatus_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRF");
    }
}
