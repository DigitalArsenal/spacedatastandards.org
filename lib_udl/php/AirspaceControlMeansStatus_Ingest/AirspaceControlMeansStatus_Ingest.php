<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
class AirspaceControlMeansStatus_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AirspaceControlMeansStatus_Ingest
     */
    public static function getRootAsAirspaceControlMeansStatus_Ingest(ByteBuffer $bb)
    {
        $obj = new AirspaceControlMeansStatus_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AirspaceControlMeansStatus_IngestIdentifier()
    {
        return "AIRS";
    }

    public static function AirspaceControlMeansStatus_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AirspaceControlMeansStatus_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AirspaceControlMeansStatus_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Status of Airspace Control Means. Must be ADD, CHANGE, or DELETE.
    /// Example: /// Example: ADD
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getCmStat()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Airspace control means name or designator. Mandatory if acmStat equals "DELETE," otherwise this field is prohibited.
    /// Example: /// Example: ['DESIGN:B35', 'NAME:ERMA', 'RANG:C21-C25']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCmStatId($j)
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCmStatIdLength()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// A conditional nested segment to report multiple airspace control means within a particular airspace control means status.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAirspaceControlMeans($j)
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAirspaceControlMeansLength()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAirspaceControlMeansStatus_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(3);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AirspaceControlMeansStatus_Ingest
     */
    public static function createAirspaceControlMeansStatus_Ingest(FlatBufferBuilder $builder, $cmStat, $cmStatId, $airspaceControlMeans)
    {
        $builder->startObject(3);
        self::addCmStat($builder, $cmStat);
        self::addCmStatId($builder, $cmStatId);
        self::addAirspaceControlMeans($builder, $airspaceControlMeans);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCmStat(FlatBufferBuilder $builder, $cmStat)
    {
        $builder->addOffsetX(0, $cmStat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCmStatId(FlatBufferBuilder $builder, $cmStatId)
    {
        $builder->addOffsetX(1, $cmStatId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCmStatIdVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCmStatIdVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAirspaceControlMeans(FlatBufferBuilder $builder, $airspaceControlMeans)
    {
        $builder->addOffsetX(2, $airspaceControlMeans, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAirspaceControlMeansVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAirspaceControlMeansVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAirspaceControlMeansStatus_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAirspaceControlMeansStatus_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRS");
    }
}
