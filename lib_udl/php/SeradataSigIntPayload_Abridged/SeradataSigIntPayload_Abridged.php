<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Details for an sigint payload from  Seradata.
class SeradataSigIntPayload_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return SeradataSigIntPayload_Abridged
     */
    public static function getRootAsSeradataSigIntPayload_Abridged(ByteBuffer $bb)
    {
        $obj = new SeradataSigIntPayload_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function SeradataSigIntPayload_AbridgedIdentifier()
    {
        return "SERA";
    }

    public static function SeradataSigIntPayload_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::SeradataSigIntPayload_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return SeradataSigIntPayload_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SERADATASIGINTPAYLOAD-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    /// Example: /// Example: spacecraftId
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSpacecraftId()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// UUID of the Sensor record.
    /// Example: /// Example: 0c5ec9c0-10cd-1d35-c46b-3764c4d76e13
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Hosted for company/Organization Id.
    /// Example: /// Example: hostedForCompanyOrgId
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getHostedForCompanyOrgId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Manufacturer Organization Id.
    /// Example: /// Example: manufacturerOrgId
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getManufacturerOrgId()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// SIGINT Payload type, e.g. Comint, Elint, etc.
    /// Example: /// Example: Comint
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getType()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Swath Width in kilometers.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSwathWidth()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Ground Station info for this payload.
    /// Example: /// Example: groundStations
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getGroundStations()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Ground Station Locations for this payload.
    /// Example: /// Example: groundStationLocations
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getGroundStationLocations()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Frequency coverage for this payload.
    /// Example: /// Example: 1.1 to 3.3
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getFrequencyCoverage()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Positional Accuracy for this payload.
    /// Example: /// Example: positionalAccuracy
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getPositionalAccuracy()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Intercept parameters.
    /// Example: /// Example: interceptParameters
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getInterceptParameters()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Sensor name from Seradata.
    /// Example: /// Example: Sensor Name
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getName()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Payload notes.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    public function getNotes()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SeradataSigIntPayload_Abridged_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSeradataSigIntPayload_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(21);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return SeradataSigIntPayload_Abridged
     */
    public static function createSeradataSigIntPayload_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $spacecraftId, $idSensor, $hostedForCompanyOrgId, $manufacturerOrgId, $type, $swathWidth, $groundStations, $groundStationLocations, $frequencyCoverage, $positionalAccuracy, $interceptParameters, $name, $notes, $createdAt, $createdBy, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(21);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addSpacecraftId($builder, $spacecraftId);
        self::addIdSensor($builder, $idSensor);
        self::addHostedForCompanyOrgId($builder, $hostedForCompanyOrgId);
        self::addManufacturerOrgId($builder, $manufacturerOrgId);
        self::addType($builder, $type);
        self::addSwathWidth($builder, $swathWidth);
        self::addGroundStations($builder, $groundStations);
        self::addGroundStationLocations($builder, $groundStationLocations);
        self::addFrequencyCoverage($builder, $frequencyCoverage);
        self::addPositionalAccuracy($builder, $positionalAccuracy);
        self::addInterceptParameters($builder, $interceptParameters);
        self::addName($builder, $name);
        self::addNotes($builder, $notes);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSpacecraftId(FlatBufferBuilder $builder, $spacecraftId)
    {
        $builder->addOffsetX(2, $spacecraftId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(3, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHostedForCompanyOrgId(FlatBufferBuilder $builder, $hostedForCompanyOrgId)
    {
        $builder->addOffsetX(4, $hostedForCompanyOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addManufacturerOrgId(FlatBufferBuilder $builder, $manufacturerOrgId)
    {
        $builder->addOffsetX(5, $manufacturerOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(6, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSwathWidth(FlatBufferBuilder $builder, $swathWidth)
    {
        $builder->addDoubleX(7, $swathWidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGroundStations(FlatBufferBuilder $builder, $groundStations)
    {
        $builder->addOffsetX(8, $groundStations, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGroundStationLocations(FlatBufferBuilder $builder, $groundStationLocations)
    {
        $builder->addOffsetX(9, $groundStationLocations, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFrequencyCoverage(FlatBufferBuilder $builder, $frequencyCoverage)
    {
        $builder->addOffsetX(10, $frequencyCoverage, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPositionalAccuracy(FlatBufferBuilder $builder, $positionalAccuracy)
    {
        $builder->addOffsetX(11, $positionalAccuracy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addInterceptParameters(FlatBufferBuilder $builder, $interceptParameters)
    {
        $builder->addOffsetX(12, $interceptParameters, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(13, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNotes(FlatBufferBuilder $builder, $notes)
    {
        $builder->addOffsetX(14, $notes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(15, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(16, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(17, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(18, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(19, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(20, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSeradataSigIntPayload_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSeradataSigIntPayload_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "SERA");
    }
}
