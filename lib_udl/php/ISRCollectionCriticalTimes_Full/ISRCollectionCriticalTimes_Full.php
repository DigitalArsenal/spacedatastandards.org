<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// High priority time windows.
class ISRCollectionCriticalTimes_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return ISRCollectionCriticalTimes_Full
     */
    public static function getRootAsISRCollectionCriticalTimes_Full(ByteBuffer $bb)
    {
        $obj = new ISRCollectionCriticalTimes_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function ISRCollectionCriticalTimes_FullIdentifier()
    {
        return "ISRC";
    }

    public static function ISRCollectionCriticalTimes_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ISRCollectionCriticalTimes_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return ISRCollectionCriticalTimes_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Critical start time to collect an image for this requirement.
    /// Example: /// Example: 2021-01-19T01:01:15.001Z
    /// Constraints: No constraints specified.
    public function getEarliestImagingTime()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Critical stop time to collect an image for this requirement.
    /// Example: /// Example: 2021-01-19T01:11:15.001Z
    /// Constraints: No constraints specified.
    public function getLatestImagingTime()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startISRCollectionCriticalTimes_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return ISRCollectionCriticalTimes_Full
     */
    public static function createISRCollectionCriticalTimes_Full(FlatBufferBuilder $builder, $earliestImagingTime, $latestImagingTime)
    {
        $builder->startObject(2);
        self::addEarliestImagingTime($builder, $earliestImagingTime);
        self::addLatestImagingTime($builder, $latestImagingTime);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEarliestImagingTime(FlatBufferBuilder $builder, $earliestImagingTime)
    {
        $builder->addOffsetX(0, $earliestImagingTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLatestImagingTime(FlatBufferBuilder $builder, $latestImagingTime)
    {
        $builder->addOffsetX(1, $latestImagingTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endISRCollectionCriticalTimes_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishISRCollectionCriticalTimes_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ISRC");
    }
}
