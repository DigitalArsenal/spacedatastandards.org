<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Information pertaining to UDL data owners.
class DataOwner_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return DataOwner_Abridged
     */
    public static function getRootAsDataOwner_Abridged(ByteBuffer $bb)
    {
        $obj = new DataOwner_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function DataOwner_AbridgedIdentifier()
    {
        return "DATA";
    }

    public static function DataOwner_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::DataOwner_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return DataOwner_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The name of the data owner.
    /// Example: /// Example: Data owner name
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getDoName()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of organization which this data owner belongs to (e.g. Commercial, Government, Academic, Consortium, etc.).
    /// Example: /// Example: Commercial
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOwnerType()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of data this data owner owns (e.g. EPHEMERIS, IMAGERY, MANEUVER, etc.).
    /// Example: /// Example: ELSET
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getDataType()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Organization name for the data provider.
    /// Example: /// Example: ACME
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getProvider()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 1, Maximum length = 4
    public function getCountryCode()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the contact for this data owner.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdContact()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of this data owner.
    /// Example: /// Example: Description of this data owner.
    /// Constraints: No constraints specified.
    public function getDescription()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional control required to access this data type from this owner.
    /// Example: /// Example: PR-ACME-ELSETS
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getControl()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating if the data owner is enabled (if not enabled, they should not appear on the data products screen on the storefront).
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getEnabled()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Boolean indicating if the data owner is coming soon or not yet available.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getComingSoon()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Source of the data.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startDataOwner_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(12);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return DataOwner_Abridged
     */
    public static function createDataOwner_Abridged(FlatBufferBuilder $builder, $doName, $classificationMarking, $ownerType, $dataType, $provider, $countryCode, $idContact, $description, $control, $enabled, $comingSoon, $source)
    {
        $builder->startObject(12);
        self::addDoName($builder, $doName);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addOwnerType($builder, $ownerType);
        self::addDataType($builder, $dataType);
        self::addProvider($builder, $provider);
        self::addCountryCode($builder, $countryCode);
        self::addIdContact($builder, $idContact);
        self::addDescription($builder, $description);
        self::addControl($builder, $control);
        self::addEnabled($builder, $enabled);
        self::addComingSoon($builder, $comingSoon);
        self::addSource($builder, $source);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDoName(FlatBufferBuilder $builder, $doName)
    {
        $builder->addOffsetX(0, $doName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOwnerType(FlatBufferBuilder $builder, $ownerType)
    {
        $builder->addOffsetX(2, $ownerType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDataType(FlatBufferBuilder $builder, $dataType)
    {
        $builder->addOffsetX(3, $dataType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addProvider(FlatBufferBuilder $builder, $provider)
    {
        $builder->addOffsetX(4, $provider, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountryCode(FlatBufferBuilder $builder, $countryCode)
    {
        $builder->addOffsetX(5, $countryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdContact(FlatBufferBuilder $builder, $idContact)
    {
        $builder->addOffsetX(6, $idContact, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(7, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addControl(FlatBufferBuilder $builder, $control)
    {
        $builder->addOffsetX(8, $control, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addEnabled(FlatBufferBuilder $builder, $enabled)
    {
        $builder->addBoolX(9, $enabled, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addComingSoon(FlatBufferBuilder $builder, $comingSoon)
    {
        $builder->addBoolX(10, $comingSoon, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(11, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endDataOwner_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishDataOwner_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "DATA");
    }
}
