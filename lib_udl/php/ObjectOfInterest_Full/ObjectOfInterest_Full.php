<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// OnOrbit objects of interest, which include information about the last known state of the object.
class ObjectOfInterest_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return ObjectOfInterest_Full
     */
    public static function getRootAsObjectOfInterest_Full(ByteBuffer $bb)
    {
        $obj = new ObjectOfInterest_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function ObjectOfInterest_FullIdentifier()
    {
        return "OBJE";
    }

    public static function ObjectOfInterest_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ObjectOfInterest_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return ObjectOfInterest_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: OBJECTOFINTEREST-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// UUID of the parent Onorbit record.
    /// Example: /// Example: REF-ONORBIT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Unique name of the object of interest event.
    /// Example: /// Example: Example_name
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getName()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Sensor tasking start time for object of interest.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getSensorTaskingStartTime()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Sensor tasking stop time for object of interest.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getSensorTaskingStopTime()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Priority of the object of interest as an integer (1=highest priority).
    /// Example: /// Example: 7
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPriority()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).
    /// Example: /// Example: OPEN
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getStatus()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time of last status change of the object of interest event.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getStatusDate()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of the object of interest event.
    /// Example: /// Example: Example description
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getDescription()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Last reported observation time in ISO 8601 UTC time, with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getLastObTime()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getMissedObTime()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Possible delta V applications for the object of interest, in km/sec.
    /// Example: /// Example: [1.1, 2.2, 3.3]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDeltaVs($j)
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDeltaVsLength()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Possible delta time applications for the object of interest, in seconds.
    /// Example: /// Example: [1.1, 2.2, 3.3]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDeltaTs($j)
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDeltaTsLength()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getSvEpoch()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Last reported x position of the object in km, in J2000 coordinates.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getX()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported y position of the object in km, in J2000 coordinates.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getY()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported z position of the object in km, in J2000 coordinates.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZ()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported x velocity of the object in km/sec, in J2000 coordinates.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getXvel()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported y velocity of the object in km/sec, in J2000 coordinates.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getYvel()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported z velocity of the object in km/sec, in J2000 coordinates.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZvel()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getElsetEpoch()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMeanMotion()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEccentricity()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getInclination()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRaan()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getArgOfPerigee()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMeanAnomaly()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getRevNo()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBStar()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMeanMotionDot()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMeanMotionDDot()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSemiMajorAxis()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported orbit period. Period of the orbit is equal to inverse of mean motion.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPeriod()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getApogee()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Last reported perigee. The orbit point nearest to the center of the earth in kilometers.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPerigee()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional array of Onorbit IDs (idOnOrbit) representing satellites potentially affected by this object of interest.
    /// Example: /// Example: ['AFFECTEDOBJECT1-ID', 'AFFECTEDOBJECT2-ID']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAffectedObjects($j)
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAffectedObjectsLength()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \ObjectOfInterest_Full_dataMode_Enum::REAL;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getOnOrbit()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Manifolds associated with this object of interest.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getManifolds($j)
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getManifoldsLength()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startObjectOfInterest_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(48);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return ObjectOfInterest_Full
     */
    public static function createObjectOfInterest_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $idOnOrbit, $satNo, $name, $sensorTaskingStartTime, $sensorTaskingStopTime, $priority, $status, $statusDate, $description, $lastObTime, $missedObTime, $deltaVs, $deltaTs, $svEpoch, $x, $y, $z, $xvel, $yvel, $zvel, $elsetEpoch, $meanMotion, $eccentricity, $inclination, $raan, $argOfPerigee, $meanAnomaly, $revNo, $bStar, $meanMotionDot, $meanMotionDDot, $semiMajorAxis, $period, $apogee, $perigee, $affectedObjects, $createdAt, $createdBy, $updatedAt, $updatedBy, $source, $origin, $origNetwork, $dataMode, $onOrbit, $manifolds)
    {
        $builder->startObject(48);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addSatNo($builder, $satNo);
        self::addName($builder, $name);
        self::addSensorTaskingStartTime($builder, $sensorTaskingStartTime);
        self::addSensorTaskingStopTime($builder, $sensorTaskingStopTime);
        self::addPriority($builder, $priority);
        self::addStatus($builder, $status);
        self::addStatusDate($builder, $statusDate);
        self::addDescription($builder, $description);
        self::addLastObTime($builder, $lastObTime);
        self::addMissedObTime($builder, $missedObTime);
        self::addDeltaVs($builder, $deltaVs);
        self::addDeltaTs($builder, $deltaTs);
        self::addSvEpoch($builder, $svEpoch);
        self::addX($builder, $x);
        self::addY($builder, $y);
        self::addZ($builder, $z);
        self::addXvel($builder, $xvel);
        self::addYvel($builder, $yvel);
        self::addZvel($builder, $zvel);
        self::addElsetEpoch($builder, $elsetEpoch);
        self::addMeanMotion($builder, $meanMotion);
        self::addEccentricity($builder, $eccentricity);
        self::addInclination($builder, $inclination);
        self::addRaan($builder, $raan);
        self::addArgOfPerigee($builder, $argOfPerigee);
        self::addMeanAnomaly($builder, $meanAnomaly);
        self::addRevNo($builder, $revNo);
        self::addBStar($builder, $bStar);
        self::addMeanMotionDot($builder, $meanMotionDot);
        self::addMeanMotionDDot($builder, $meanMotionDDot);
        self::addSemiMajorAxis($builder, $semiMajorAxis);
        self::addPeriod($builder, $period);
        self::addApogee($builder, $apogee);
        self::addPerigee($builder, $perigee);
        self::addAffectedObjects($builder, $affectedObjects);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        self::addOnOrbit($builder, $onOrbit);
        self::addManifolds($builder, $manifolds);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(2, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(3, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(4, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSensorTaskingStartTime(FlatBufferBuilder $builder, $sensorTaskingStartTime)
    {
        $builder->addOffsetX(5, $sensorTaskingStartTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSensorTaskingStopTime(FlatBufferBuilder $builder, $sensorTaskingStopTime)
    {
        $builder->addOffsetX(6, $sensorTaskingStopTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPriority(FlatBufferBuilder $builder, $priority)
    {
        $builder->addIntX(7, $priority, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStatus(FlatBufferBuilder $builder, $status)
    {
        $builder->addOffsetX(8, $status, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStatusDate(FlatBufferBuilder $builder, $statusDate)
    {
        $builder->addOffsetX(9, $statusDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(10, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastObTime(FlatBufferBuilder $builder, $lastObTime)
    {
        $builder->addOffsetX(11, $lastObTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissedObTime(FlatBufferBuilder $builder, $missedObTime)
    {
        $builder->addOffsetX(12, $missedObTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDeltaVs(FlatBufferBuilder $builder, $deltaVs)
    {
        $builder->addOffsetX(13, $deltaVs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDeltaVsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDeltaVsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDeltaTs(FlatBufferBuilder $builder, $deltaTs)
    {
        $builder->addOffsetX(14, $deltaTs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDeltaTsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDeltaTsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSvEpoch(FlatBufferBuilder $builder, $svEpoch)
    {
        $builder->addOffsetX(15, $svEpoch, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addX(FlatBufferBuilder $builder, $x)
    {
        $builder->addDoubleX(16, $x, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addY(FlatBufferBuilder $builder, $y)
    {
        $builder->addDoubleX(17, $y, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZ(FlatBufferBuilder $builder, $z)
    {
        $builder->addDoubleX(18, $z, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addXvel(FlatBufferBuilder $builder, $xvel)
    {
        $builder->addDoubleX(19, $xvel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addYvel(FlatBufferBuilder $builder, $yvel)
    {
        $builder->addDoubleX(20, $yvel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZvel(FlatBufferBuilder $builder, $zvel)
    {
        $builder->addDoubleX(21, $zvel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addElsetEpoch(FlatBufferBuilder $builder, $elsetEpoch)
    {
        $builder->addOffsetX(22, $elsetEpoch, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMeanMotion(FlatBufferBuilder $builder, $meanMotion)
    {
        $builder->addDoubleX(23, $meanMotion, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEccentricity(FlatBufferBuilder $builder, $eccentricity)
    {
        $builder->addDoubleX(24, $eccentricity, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addInclination(FlatBufferBuilder $builder, $inclination)
    {
        $builder->addDoubleX(25, $inclination, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRaan(FlatBufferBuilder $builder, $raan)
    {
        $builder->addDoubleX(26, $raan, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addArgOfPerigee(FlatBufferBuilder $builder, $argOfPerigee)
    {
        $builder->addDoubleX(27, $argOfPerigee, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMeanAnomaly(FlatBufferBuilder $builder, $meanAnomaly)
    {
        $builder->addDoubleX(28, $meanAnomaly, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addRevNo(FlatBufferBuilder $builder, $revNo)
    {
        $builder->addIntX(29, $revNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBStar(FlatBufferBuilder $builder, $bStar)
    {
        $builder->addDoubleX(30, $bStar, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMeanMotionDot(FlatBufferBuilder $builder, $meanMotionDot)
    {
        $builder->addDoubleX(31, $meanMotionDot, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMeanMotionDDot(FlatBufferBuilder $builder, $meanMotionDDot)
    {
        $builder->addDoubleX(32, $meanMotionDDot, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSemiMajorAxis(FlatBufferBuilder $builder, $semiMajorAxis)
    {
        $builder->addDoubleX(33, $semiMajorAxis, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPeriod(FlatBufferBuilder $builder, $period)
    {
        $builder->addDoubleX(34, $period, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addApogee(FlatBufferBuilder $builder, $apogee)
    {
        $builder->addDoubleX(35, $apogee, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPerigee(FlatBufferBuilder $builder, $perigee)
    {
        $builder->addDoubleX(36, $perigee, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAffectedObjects(FlatBufferBuilder $builder, $affectedObjects)
    {
        $builder->addOffsetX(37, $affectedObjects, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAffectedObjectsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAffectedObjectsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(38, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(39, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(40, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(41, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(42, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(43, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(44, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(45, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOnOrbit(FlatBufferBuilder $builder, $onOrbit)
    {
        $builder->addOffsetX(46, $onOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addManifolds(FlatBufferBuilder $builder, $manifolds)
    {
        $builder->addOffsetX(47, $manifolds, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createManifoldsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startManifoldsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endObjectOfInterest_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishObjectOfInterest_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "OBJE");
    }
}
