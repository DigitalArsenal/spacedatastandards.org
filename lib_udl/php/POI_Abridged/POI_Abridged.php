<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// A Point of Interest is loosely based on the MITRE CoT (Cursor on Target) schema (https://www.mitre.org/publications/technical-papers/cursorontarget-message-router-users-guide) and provides a simple way to specify a point on the earth for a variety of purposes (tasking, targeting, etc).
class POI_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return POI_Abridged
     */
    public static function getRootAsPOI_Abridged(ByteBuffer $bb)
    {
        $obj = new POI_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function POI_AbridgedIdentifier()
    {
        return "POIA";
    }

    public static function POI_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::POI_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return POI_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: POI-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The purpose of this Point of Interest record (e.g., BDA, EQPT, EVENT, GEOL, HZRD, PPLI, SHOTBOX, SURVL, TGT, TSK, WTHR).
    /// Example: /// Example: BDA
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPps()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional mission ID related to the POI.
    /// Example: /// Example: MSN-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getMsnid()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Priority of the  POI target object.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPri()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional ID of an associated track related to the POI object, if applicable. This track ID should correlate the Point of Interest to a track from the Track service.
    /// Example: /// Example: TRK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTrkid()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of one or more unique identifiers of weather records associated with this POI. Each element in array must be 36 characters or less in length.
    /// Example: /// Example: ['WEATHER-EVENT-ID1', 'WEATHER-EVENT-ID2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getIdWeatherReport($j)
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getIdWeatherReportLength()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Identifier of the actual Point of Interest or target object, which should remain the same on subsequent POI records of the same Point of Interest.
    /// Example: /// Example: POI-ID
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getPoiid()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the POI target object.
    /// Example: /// Example: POI_NAME
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getName()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of the POI target object.
    /// Example: /// Example: Description of the object
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getDesc()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specific point/object type (e.g., 82/GROUND, LIGHT_TANK, etc.).
    /// Example: /// Example: LIGHT_TANK
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getSpec()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Estimated identity of the point/object (e.g., FRIEND, HOSTILE, SUSPECT, ASSUMED_FRIEND, UNKNOWN, etc.).
    /// Example: /// Example: FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getIdent()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// POI environment type (e.g., LAND, SURFACE, SUBSURFACE, UNKNOWN, etc.).
    /// Example: /// Example: SURFACE
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getEnv()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// POI/object platform type (e.g., 14/GROUND, COMBAT_VEHICLE, etc.).
    /// Example: /// Example: COMBAT_VEHICLE
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPlat()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The activity in which the POI subject is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 30/LAND) or as the descriptive enumeration (e.g. TRAINING), which are equivalent.
    /// Example: /// Example: TRAINING
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getActivity()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Activity/POI timestamp in ISO8601 UTC format.
    /// Example: /// Example: 2020-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getTs()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Start time of event validity (optional), in ISO8601 UTC format.
    /// Example: /// Example: 2020-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getStart()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Stale timestamp (optional), in ISO8601 UTC format.
    /// Example: /// Example: 2020-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getStale()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// How the event point was generated, in CoT object heirarchy notation (optional, CoT).
    /// Example: /// Example: h-g-i-g-o
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getHow()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Event type, in CoT object heirarchy notation (optional, CoT).
    /// Example: /// Example: a-h-G
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getType()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLat()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLon()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Point height above ellipsoid (WGS-84), in meters.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAlt()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Target object pointing azimuth angle, in degrees (for target with sensing or emitting capability).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAz()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Target object pointing elevation angle, in degrees (for target with sensing or emitting capability).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEl()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Height above lat/lon point, in meters (1-sigma, if representing linear error).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLe()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCe()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Elliptical area about the lat/lon point, specified as [semi-major axis (m), semi-minor axis (m), orientation (deg) off true North at POI].
    /// Example: /// Example: [125.5, 85.1, 125.75]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getElle($j)
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getElleLength()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
    /// Example: /// Example: Contact Info
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCntct()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// POI confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getConf()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// List of URLs to before/after images of this Point of Interest entity.
    /// Example: /// Example: ['URL1', 'URL2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getUrls($j)
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getUrlsLength()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    public function getAtext()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    /// Constraints: No constraints specified.
    public function getAgjson()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of region as projected on the ground.
    /// Example: /// Example: Type1
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getAtype()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of dimensions of the geometry depicted by region.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAndims()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Geographical spatial_ref_sys for region.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAsrid()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Time the row was created in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSource()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \POI_Abridged_dataMode_Enum::REAL;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional array of groups used when a POI msg originates from a TAK server. Each group must be no longer than 256 characters. Groups identify a set of users targeted by the cot/poi msg.
    /// Example: /// Example: ['GROUP1', 'GROUP2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getGroups($j)
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getGroupsLength()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// ID/name of the platform or entity providing the POI data.
    /// Example: /// Example: PLATFORM_NAME
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getAsset()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Basic Encyclopedia Number associated with the POI, if applicable.
    /// Example: /// Example: 0427RT1030
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getBeNumber()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The orientation of a vehicle, platform or other entity described by the POI. The orientation is defined as the pointing direction of the front/nose of the object in degrees clockwise from true North at the object point.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOrientation()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTransactionId()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startPOI_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(48);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return POI_Abridged
     */
    public static function createPOI_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $pps, $msnid, $pri, $trkid, $idWeatherReport, $poiid, $name, $desc, $spec, $ident, $env, $plat, $activity, $ts, $start, $stale, $how, $type, $lat, $lon, $alt, $az, $el, $le, $ce, $elle, $cntct, $conf, $urls, $atext, $agjson, $atype, $andims, $asrid, $createdAt, $createdBy, $sourceDL, $source, $dataMode, $origin, $groups, $asset, $beNumber, $orientation, $origNetwork, $transactionId)
    {
        $builder->startObject(48);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addPps($builder, $pps);
        self::addMsnid($builder, $msnid);
        self::addPri($builder, $pri);
        self::addTrkid($builder, $trkid);
        self::addIdWeatherReport($builder, $idWeatherReport);
        self::addPoiid($builder, $poiid);
        self::addName($builder, $name);
        self::addDesc($builder, $desc);
        self::addSpec($builder, $spec);
        self::addIdent($builder, $ident);
        self::addEnv($builder, $env);
        self::addPlat($builder, $plat);
        self::addActivity($builder, $activity);
        self::addTs($builder, $ts);
        self::addStart($builder, $start);
        self::addStale($builder, $stale);
        self::addHow($builder, $how);
        self::addType($builder, $type);
        self::addLat($builder, $lat);
        self::addLon($builder, $lon);
        self::addAlt($builder, $alt);
        self::addAz($builder, $az);
        self::addEl($builder, $el);
        self::addLe($builder, $le);
        self::addCe($builder, $ce);
        self::addElle($builder, $elle);
        self::addCntct($builder, $cntct);
        self::addConf($builder, $conf);
        self::addUrls($builder, $urls);
        self::addAtext($builder, $atext);
        self::addAgjson($builder, $agjson);
        self::addAtype($builder, $atype);
        self::addAndims($builder, $andims);
        self::addAsrid($builder, $asrid);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addDataMode($builder, $dataMode);
        self::addOrigin($builder, $origin);
        self::addGroups($builder, $groups);
        self::addAsset($builder, $asset);
        self::addBeNumber($builder, $beNumber);
        self::addOrientation($builder, $orientation);
        self::addOrigNetwork($builder, $origNetwork);
        self::addTransactionId($builder, $transactionId);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPps(FlatBufferBuilder $builder, $pps)
    {
        $builder->addOffsetX(2, $pps, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsnid(FlatBufferBuilder $builder, $msnid)
    {
        $builder->addOffsetX(3, $msnid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPri(FlatBufferBuilder $builder, $pri)
    {
        $builder->addIntX(4, $pri, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrkid(FlatBufferBuilder $builder, $trkid)
    {
        $builder->addOffsetX(5, $trkid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addIdWeatherReport(FlatBufferBuilder $builder, $idWeatherReport)
    {
        $builder->addOffsetX(6, $idWeatherReport, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createIdWeatherReportVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startIdWeatherReportVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPoiid(FlatBufferBuilder $builder, $poiid)
    {
        $builder->addOffsetX(7, $poiid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(8, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDesc(FlatBufferBuilder $builder, $desc)
    {
        $builder->addOffsetX(9, $desc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSpec(FlatBufferBuilder $builder, $spec)
    {
        $builder->addOffsetX(10, $spec, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdent(FlatBufferBuilder $builder, $ident)
    {
        $builder->addOffsetX(11, $ident, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEnv(FlatBufferBuilder $builder, $env)
    {
        $builder->addOffsetX(12, $env, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlat(FlatBufferBuilder $builder, $plat)
    {
        $builder->addOffsetX(13, $plat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActivity(FlatBufferBuilder $builder, $activity)
    {
        $builder->addOffsetX(14, $activity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTs(FlatBufferBuilder $builder, $ts)
    {
        $builder->addOffsetX(15, $ts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStart(FlatBufferBuilder $builder, $start)
    {
        $builder->addOffsetX(16, $start, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStale(FlatBufferBuilder $builder, $stale)
    {
        $builder->addOffsetX(17, $stale, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHow(FlatBufferBuilder $builder, $how)
    {
        $builder->addOffsetX(18, $how, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(19, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLat(FlatBufferBuilder $builder, $lat)
    {
        $builder->addDoubleX(20, $lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLon(FlatBufferBuilder $builder, $lon)
    {
        $builder->addDoubleX(21, $lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAlt(FlatBufferBuilder $builder, $alt)
    {
        $builder->addDoubleX(22, $alt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAz(FlatBufferBuilder $builder, $az)
    {
        $builder->addDoubleX(23, $az, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEl(FlatBufferBuilder $builder, $el)
    {
        $builder->addDoubleX(24, $el, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLe(FlatBufferBuilder $builder, $le)
    {
        $builder->addDoubleX(25, $le, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCe(FlatBufferBuilder $builder, $ce)
    {
        $builder->addDoubleX(26, $ce, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addElle(FlatBufferBuilder $builder, $elle)
    {
        $builder->addOffsetX(27, $elle, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createElleVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startElleVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCntct(FlatBufferBuilder $builder, $cntct)
    {
        $builder->addOffsetX(28, $cntct, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addConf(FlatBufferBuilder $builder, $conf)
    {
        $builder->addDoubleX(29, $conf, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addUrls(FlatBufferBuilder $builder, $urls)
    {
        $builder->addOffsetX(30, $urls, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createUrlsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startUrlsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAtext(FlatBufferBuilder $builder, $atext)
    {
        $builder->addOffsetX(31, $atext, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAgjson(FlatBufferBuilder $builder, $agjson)
    {
        $builder->addOffsetX(32, $agjson, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAtype(FlatBufferBuilder $builder, $atype)
    {
        $builder->addOffsetX(33, $atype, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAndims(FlatBufferBuilder $builder, $andims)
    {
        $builder->addIntX(34, $andims, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAsrid(FlatBufferBuilder $builder, $asrid)
    {
        $builder->addIntX(35, $asrid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(36, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(37, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(38, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(39, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(40, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(41, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addGroups(FlatBufferBuilder $builder, $groups)
    {
        $builder->addOffsetX(42, $groups, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createGroupsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startGroupsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAsset(FlatBufferBuilder $builder, $asset)
    {
        $builder->addOffsetX(43, $asset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBeNumber(FlatBufferBuilder $builder, $beNumber)
    {
        $builder->addOffsetX(44, $beNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOrientation(FlatBufferBuilder $builder, $orientation)
    {
        $builder->addDoubleX(45, $orientation, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(46, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransactionId(FlatBufferBuilder $builder, $transactionId)
    {
        $builder->addOffsetX(47, $transactionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endPOI_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishPOI_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "POIA");
    }
}
