<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
class DataLinkMultiDutyVoiceCoord_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return DataLinkMultiDutyVoiceCoord_Full
     */
    public static function getRootAsDataLinkMultiDutyVoiceCoord_Full(ByteBuffer $bb)
    {
        $obj = new DataLinkMultiDutyVoiceCoord_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function DataLinkMultiDutyVoiceCoord_FullIdentifier()
    {
        return "DATA";
    }

    public static function DataLinkMultiDutyVoiceCoord_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::DataLinkMultiDutyVoiceCoord_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return DataLinkMultiDutyVoiceCoord_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Designator assigned to a voice interface control and coordination net for multilink coordination (e.g. ADCCN, DCN, VPN, etc.).
    /// Example: /// Example: VPN
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getMultiVoiceNetDes()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Designator used in nonsecure communications to refer to a radio frequency for multilink coordination.
    /// Example: /// Example: ST300A
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getMultiFreqDes()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Priority of a communication circuit, channel or frequency for multilink coordination (e.g. P - Primary, M - Monitor).
    /// Example: /// Example: P
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getMultiCommPri()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of telephone numbers or contact frequencies used for interface control for multilink coordination.
    /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getMultiTeleFreqNums($j)
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMultiTeleFreqNumsLength()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startDataLinkMultiDutyVoiceCoord_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return DataLinkMultiDutyVoiceCoord_Full
     */
    public static function createDataLinkMultiDutyVoiceCoord_Full(FlatBufferBuilder $builder, $multiVoiceNetDes, $multiFreqDes, $multiCommPri, $multiTeleFreqNums)
    {
        $builder->startObject(4);
        self::addMultiVoiceNetDes($builder, $multiVoiceNetDes);
        self::addMultiFreqDes($builder, $multiFreqDes);
        self::addMultiCommPri($builder, $multiCommPri);
        self::addMultiTeleFreqNums($builder, $multiTeleFreqNums);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMultiVoiceNetDes(FlatBufferBuilder $builder, $multiVoiceNetDes)
    {
        $builder->addOffsetX(0, $multiVoiceNetDes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMultiFreqDes(FlatBufferBuilder $builder, $multiFreqDes)
    {
        $builder->addOffsetX(1, $multiFreqDes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMultiCommPri(FlatBufferBuilder $builder, $multiCommPri)
    {
        $builder->addOffsetX(2, $multiCommPri, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMultiTeleFreqNums(FlatBufferBuilder $builder, $multiTeleFreqNums)
    {
        $builder->addOffsetX(3, $multiTeleFreqNums, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMultiTeleFreqNumsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMultiTeleFreqNumsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endDataLinkMultiDutyVoiceCoord_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishDataLinkMultiDutyVoiceCoord_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "DATA");
    }
}
