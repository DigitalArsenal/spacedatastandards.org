<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection of diplomatic clearance details.
class DiplomaticClearanceDetails_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return DiplomaticClearanceDetails_Full
     */
    public static function getRootAsDiplomaticClearanceDetails_Full(ByteBuffer $bb)
    {
        $obj = new DiplomaticClearanceDetails_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function DiplomaticClearanceDetails_FullIdentifier()
    {
        return "DIPL";
    }

    public static function DiplomaticClearanceDetails_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::DiplomaticClearanceDetails_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return DiplomaticClearanceDetails_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the Aircraft Sortie associated with this diplomatic clearance record.
    /// Example: /// Example: 207010e0-f97d-431c-8c00-7e46acfef0f5
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSortie()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifies the Itinerary point of a sortie where an air event occurs.
    /// Example: /// Example: 825
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getLegNum()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The 1801 fileable route of flight string associated with this diplomatic clearance. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
    /// Example: /// Example: DCT DOH P430 BAYAN/M062F150 P430 RAMKI
    /// Constraints: Minimum length = 0, Maximum length = 4000
    public function getRouteString()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The start time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getValidStartTime()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The end time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getValidEndTime()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of this diplomatic clearance issued by the host country.
    /// Example: /// Example: MFMW225662GHQ
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getClearanceId()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional clearance ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getExternalClearanceId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The call sign of the sortie cleared with this diplomatic clearance.
    /// Example: /// Example: FALCN09
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getClearedCallSign()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The placement of this diplomatic clearance within a sequence of clearances used on a sortie. For example, a sequence value of 3 means that it is the third diplomatic clearance the aircraft will use.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSequenceNum()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: NL
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getCountryCode()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
    /// Example: /// Example: IZ
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getAltCountryCode()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the country issuing this diplomatic clearance.
    /// Example: /// Example: NETHERLANDS
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getCountryName()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of when this diplomatic clearance is valid.
    /// Example: /// Example: CY2023
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getValidDesc()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Remarks concerning the valid diplomatic clearance window.
    /// Example: /// Example: Period remarks
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getWindowRemark()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The navigation point name where the aircraft must enter the country.
    /// Example: /// Example: LOMOS
    /// Constraints: Minimum length = 0, Maximum length = 38
    public function getEntryPoint()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Earliest time the aircraft may enter the country, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getEntryNET()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The navigation point name where the aircraft must exit the country.
    /// Example: /// Example: BUDOP
    /// Constraints: Minimum length = 0, Maximum length = 38
    public function getExitPoint()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Latest time the aircraft may exit the country, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getExitNLT()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating whether the clearance request requires ICAO specific information.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getReqICAO()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The type of action the aircraft can take with this diplomatic clearance (e.g. O for Overfly, L for Land, etc.).
    /// Example: /// Example: O
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getAction()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the current status of the diplomatic clearance request.
    /// Example: /// Example: IN WORK
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getStatus()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The diplomatic clearance profile name used within clearance management systems.
    /// Example: /// Example: T LAND/OFLY IATA COMPLIANT CARGO 23
    /// Constraints: Minimum length = 0, Maximum length = 100
    public function getProfile()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating whether entry/exit points are required for clearances.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getReqPoint()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Remarks concerning this diplomatic clearance.
    /// Example: /// Example: Clearance remarks
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getClearanceRemark()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startDiplomaticClearanceDetails_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(24);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return DiplomaticClearanceDetails_Full
     */
    public static function createDiplomaticClearanceDetails_Full(FlatBufferBuilder $builder, $idSortie, $legNum, $routeString, $validStartTime, $validEndTime, $clearanceId, $externalClearanceId, $clearedCallSign, $sequenceNum, $countryCode, $altCountryCode, $countryName, $validDesc, $windowRemark, $entryPoint, $entryNET, $exitPoint, $exitNLT, $reqICAO, $action, $status, $profile, $reqPoint, $clearanceRemark)
    {
        $builder->startObject(24);
        self::addIdSortie($builder, $idSortie);
        self::addLegNum($builder, $legNum);
        self::addRouteString($builder, $routeString);
        self::addValidStartTime($builder, $validStartTime);
        self::addValidEndTime($builder, $validEndTime);
        self::addClearanceId($builder, $clearanceId);
        self::addExternalClearanceId($builder, $externalClearanceId);
        self::addClearedCallSign($builder, $clearedCallSign);
        self::addSequenceNum($builder, $sequenceNum);
        self::addCountryCode($builder, $countryCode);
        self::addAltCountryCode($builder, $altCountryCode);
        self::addCountryName($builder, $countryName);
        self::addValidDesc($builder, $validDesc);
        self::addWindowRemark($builder, $windowRemark);
        self::addEntryPoint($builder, $entryPoint);
        self::addEntryNET($builder, $entryNET);
        self::addExitPoint($builder, $exitPoint);
        self::addExitNLT($builder, $exitNLT);
        self::addReqICAO($builder, $reqICAO);
        self::addAction($builder, $action);
        self::addStatus($builder, $status);
        self::addProfile($builder, $profile);
        self::addReqPoint($builder, $reqPoint);
        self::addClearanceRemark($builder, $clearanceRemark);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSortie(FlatBufferBuilder $builder, $idSortie)
    {
        $builder->addOffsetX(0, $idSortie, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addLegNum(FlatBufferBuilder $builder, $legNum)
    {
        $builder->addIntX(1, $legNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRouteString(FlatBufferBuilder $builder, $routeString)
    {
        $builder->addOffsetX(2, $routeString, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addValidStartTime(FlatBufferBuilder $builder, $validStartTime)
    {
        $builder->addOffsetX(3, $validStartTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addValidEndTime(FlatBufferBuilder $builder, $validEndTime)
    {
        $builder->addOffsetX(4, $validEndTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClearanceId(FlatBufferBuilder $builder, $clearanceId)
    {
        $builder->addOffsetX(5, $clearanceId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalClearanceId(FlatBufferBuilder $builder, $externalClearanceId)
    {
        $builder->addOffsetX(6, $externalClearanceId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClearedCallSign(FlatBufferBuilder $builder, $clearedCallSign)
    {
        $builder->addOffsetX(7, $clearedCallSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSequenceNum(FlatBufferBuilder $builder, $sequenceNum)
    {
        $builder->addIntX(8, $sequenceNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountryCode(FlatBufferBuilder $builder, $countryCode)
    {
        $builder->addOffsetX(9, $countryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltCountryCode(FlatBufferBuilder $builder, $altCountryCode)
    {
        $builder->addOffsetX(10, $altCountryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountryName(FlatBufferBuilder $builder, $countryName)
    {
        $builder->addOffsetX(11, $countryName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addValidDesc(FlatBufferBuilder $builder, $validDesc)
    {
        $builder->addOffsetX(12, $validDesc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWindowRemark(FlatBufferBuilder $builder, $windowRemark)
    {
        $builder->addOffsetX(13, $windowRemark, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEntryPoint(FlatBufferBuilder $builder, $entryPoint)
    {
        $builder->addOffsetX(14, $entryPoint, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEntryNET(FlatBufferBuilder $builder, $entryNET)
    {
        $builder->addOffsetX(15, $entryNET, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExitPoint(FlatBufferBuilder $builder, $exitPoint)
    {
        $builder->addOffsetX(16, $exitPoint, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExitNLT(FlatBufferBuilder $builder, $exitNLT)
    {
        $builder->addOffsetX(17, $exitNLT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addReqICAO(FlatBufferBuilder $builder, $reqICAO)
    {
        $builder->addBoolX(18, $reqICAO, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAction(FlatBufferBuilder $builder, $action)
    {
        $builder->addOffsetX(19, $action, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStatus(FlatBufferBuilder $builder, $status)
    {
        $builder->addOffsetX(20, $status, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addProfile(FlatBufferBuilder $builder, $profile)
    {
        $builder->addOffsetX(21, $profile, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addReqPoint(FlatBufferBuilder $builder, $reqPoint)
    {
        $builder->addBoolX(22, $reqPoint, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClearanceRemark(FlatBufferBuilder $builder, $clearanceRemark)
    {
        $builder->addOffsetX(23, $clearanceRemark, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endDiplomaticClearanceDetails_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishDiplomaticClearanceDetails_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "DIPL");
    }
}
