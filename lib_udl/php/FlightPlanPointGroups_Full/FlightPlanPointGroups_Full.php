<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
class FlightPlanPointGroups_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return FlightPlanPointGroups_Full
     */
    public static function getRootAsFlightPlanPointGroups_Full(ByteBuffer $bb)
    {
        $obj = new FlightPlanPointGroups_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function FlightPlanPointGroups_FullIdentifier()
    {
        return "FLIG";
    }

    public static function FlightPlanPointGroups_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::FlightPlanPointGroups_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return FlightPlanPointGroups_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Name of the point group, usually Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP) sections.
    /// Example: /// Example: ETOPS_CF_POINT_1
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPointGroupName()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies which Point Group case requires the most fuel.
    /// Example: /// Example: DEPRESSURIZED ENGINE OUT ETP
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getWorstFuelCase()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the last suitable airfield, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: /// Example: LPPD
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getLsafName()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Distance from the Equal Time Point (ETP) to the last suitable airfield in nautical miles.
    /// Example: /// Example: 684.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLsafDistance()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Distance from the Equal Time Point (ETP) to the first suitable airfield in nautical miles.
    /// Example: /// Example: 684.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFsafDistance()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Distance from the Extended Operations (ETOPS) point to the recovery airfield in nautical miles.
    /// Example: /// Example: 684.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEtopsDistance()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Time to fly from the Equal Time Point (ETP) to the last suitable airfield expressed in HH:MM format.
    /// Example: /// Example: 01:23
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getLsafTime()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time to fly from the Equal Time Point (ETP) to the first suitable airfield expressed in HH:MM format.
    /// Example: /// Example: 01:23
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getFsafTime()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time to fly from the Extended Operations (ETOPS) point to the recovery airfield expressed in HH:MM format.
    /// Example: /// Example: 01:23
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getEtopsTime()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Average wind factor from the Equal Time Point (ETP) to the last suitable airfield in knots.
    /// Example: /// Example: 13.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLsafAvgWindFactor()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average wind factor from the Equal Time Point (ETP) to the first suitable airfield in knots.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFsafAvgWindFactor()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average wind factor from the Extended Operations (ETOPS) point to the recovery airfield in knots.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEtopsAvgWindFactor()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Temperature deviation from the Equal Time Point (ETP) to the last suitable airfield in degrees Celsius.
    /// Example: /// Example: 9.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLsafTempDev()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Temperature deviation from the Equal Time Point (ETP) to the first suitable airfield in degrees Celsius.
    /// Example: /// Example: 9.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFsafTempDev()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Temperature deviation from the Extended Operations (ETOPS) point to the recovery airfield in degrees Celsius.
    /// Example: /// Example: 9.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEtopsTempDev()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fuel required to fly from the Equal Time Point (ETP) to the last suitable airfield in pounds.
    /// Example: /// Example: 50787.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLsafReqFuel()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fuel required to fly from the Equal Time Point (ETP) to the first suitable airfield in pounds.
    /// Example: /// Example: 50380.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFsafReqFuel()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fuel required to fly from the Extended Operations (ETOPS) point to the recovery airfield in pounds.
    /// Example: /// Example: 4412.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEtopsReqFuel()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total time from takeoff when the point is reached expressed in HH:MM format.
    /// Example: /// Example: 07:29
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getFromTakeoffTime()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Amount of planned fuel on board when the point is reached in pounds.
    /// Example: /// Example: 190319.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPlannedFuel()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Flight level of the point at which the fuel was calculated in feet.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFuelCalcAlt()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// True airspeed at which the fuel was calculated in knots.
    /// Example: /// Example: 365.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFuelCalcSpd()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average fuel flow at which the fuel was calculated in pounds per hour.
    /// Example: /// Example: 19693.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgFuelFlow()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Array of point data for this Point Group.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getFlightPlanPoints($j)
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getFlightPlanPointsLength()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startFlightPlanPointGroups_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(24);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return FlightPlanPointGroups_Full
     */
    public static function createFlightPlanPointGroups_Full(FlatBufferBuilder $builder, $pointGroupName, $worstFuelCase, $lsafName, $lsafDistance, $fsafDistance, $etopsDistance, $lsafTime, $fsafTime, $etopsTime, $lsafAvgWindFactor, $fsafAvgWindFactor, $etopsAvgWindFactor, $lsafTempDev, $fsafTempDev, $etopsTempDev, $lsafReqFuel, $fsafReqFuel, $etopsReqFuel, $fromTakeoffTime, $plannedFuel, $fuelCalcAlt, $fuelCalcSpd, $avgFuelFlow, $flightPlanPoints)
    {
        $builder->startObject(24);
        self::addPointGroupName($builder, $pointGroupName);
        self::addWorstFuelCase($builder, $worstFuelCase);
        self::addLsafName($builder, $lsafName);
        self::addLsafDistance($builder, $lsafDistance);
        self::addFsafDistance($builder, $fsafDistance);
        self::addEtopsDistance($builder, $etopsDistance);
        self::addLsafTime($builder, $lsafTime);
        self::addFsafTime($builder, $fsafTime);
        self::addEtopsTime($builder, $etopsTime);
        self::addLsafAvgWindFactor($builder, $lsafAvgWindFactor);
        self::addFsafAvgWindFactor($builder, $fsafAvgWindFactor);
        self::addEtopsAvgWindFactor($builder, $etopsAvgWindFactor);
        self::addLsafTempDev($builder, $lsafTempDev);
        self::addFsafTempDev($builder, $fsafTempDev);
        self::addEtopsTempDev($builder, $etopsTempDev);
        self::addLsafReqFuel($builder, $lsafReqFuel);
        self::addFsafReqFuel($builder, $fsafReqFuel);
        self::addEtopsReqFuel($builder, $etopsReqFuel);
        self::addFromTakeoffTime($builder, $fromTakeoffTime);
        self::addPlannedFuel($builder, $plannedFuel);
        self::addFuelCalcAlt($builder, $fuelCalcAlt);
        self::addFuelCalcSpd($builder, $fuelCalcSpd);
        self::addAvgFuelFlow($builder, $avgFuelFlow);
        self::addFlightPlanPoints($builder, $flightPlanPoints);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPointGroupName(FlatBufferBuilder $builder, $pointGroupName)
    {
        $builder->addOffsetX(0, $pointGroupName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWorstFuelCase(FlatBufferBuilder $builder, $worstFuelCase)
    {
        $builder->addOffsetX(1, $worstFuelCase, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLsafName(FlatBufferBuilder $builder, $lsafName)
    {
        $builder->addOffsetX(2, $lsafName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLsafDistance(FlatBufferBuilder $builder, $lsafDistance)
    {
        $builder->addDoubleX(3, $lsafDistance, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFsafDistance(FlatBufferBuilder $builder, $fsafDistance)
    {
        $builder->addDoubleX(4, $fsafDistance, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEtopsDistance(FlatBufferBuilder $builder, $etopsDistance)
    {
        $builder->addDoubleX(5, $etopsDistance, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLsafTime(FlatBufferBuilder $builder, $lsafTime)
    {
        $builder->addOffsetX(6, $lsafTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFsafTime(FlatBufferBuilder $builder, $fsafTime)
    {
        $builder->addOffsetX(7, $fsafTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEtopsTime(FlatBufferBuilder $builder, $etopsTime)
    {
        $builder->addOffsetX(8, $etopsTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLsafAvgWindFactor(FlatBufferBuilder $builder, $lsafAvgWindFactor)
    {
        $builder->addDoubleX(9, $lsafAvgWindFactor, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFsafAvgWindFactor(FlatBufferBuilder $builder, $fsafAvgWindFactor)
    {
        $builder->addDoubleX(10, $fsafAvgWindFactor, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEtopsAvgWindFactor(FlatBufferBuilder $builder, $etopsAvgWindFactor)
    {
        $builder->addDoubleX(11, $etopsAvgWindFactor, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLsafTempDev(FlatBufferBuilder $builder, $lsafTempDev)
    {
        $builder->addDoubleX(12, $lsafTempDev, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFsafTempDev(FlatBufferBuilder $builder, $fsafTempDev)
    {
        $builder->addDoubleX(13, $fsafTempDev, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEtopsTempDev(FlatBufferBuilder $builder, $etopsTempDev)
    {
        $builder->addDoubleX(14, $etopsTempDev, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLsafReqFuel(FlatBufferBuilder $builder, $lsafReqFuel)
    {
        $builder->addDoubleX(15, $lsafReqFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFsafReqFuel(FlatBufferBuilder $builder, $fsafReqFuel)
    {
        $builder->addDoubleX(16, $fsafReqFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEtopsReqFuel(FlatBufferBuilder $builder, $etopsReqFuel)
    {
        $builder->addDoubleX(17, $etopsReqFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFromTakeoffTime(FlatBufferBuilder $builder, $fromTakeoffTime)
    {
        $builder->addOffsetX(18, $fromTakeoffTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPlannedFuel(FlatBufferBuilder $builder, $plannedFuel)
    {
        $builder->addDoubleX(19, $plannedFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFuelCalcAlt(FlatBufferBuilder $builder, $fuelCalcAlt)
    {
        $builder->addDoubleX(20, $fuelCalcAlt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFuelCalcSpd(FlatBufferBuilder $builder, $fuelCalcSpd)
    {
        $builder->addDoubleX(21, $fuelCalcSpd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgFuelFlow(FlatBufferBuilder $builder, $avgFuelFlow)
    {
        $builder->addDoubleX(22, $avgFuelFlow, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addFlightPlanPoints(FlatBufferBuilder $builder, $flightPlanPoints)
    {
        $builder->addOffsetX(23, $flightPlanPoints, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createFlightPlanPointsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startFlightPlanPointsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endFlightPlanPointGroups_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishFlightPlanPointGroups_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "FLIG");
    }
}
