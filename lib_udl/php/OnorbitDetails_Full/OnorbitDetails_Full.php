<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Contains details of the OnOrbit object.
class OnorbitDetails_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return OnorbitDetails_Full
     */
    public static function getRootAsOnorbitDetails_Full(ByteBuffer $bb)
    {
        $obj = new OnorbitDetails_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function OnorbitDetails_FullIdentifier()
    {
        return "ONOR";
    }

    public static function OnorbitDetails_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::OnorbitDetails_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return OnorbitDetails_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ONORBITDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// UUID of the parent Onorbit record.
    /// Example: /// Example: REF-ONORBIT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getLastObTime()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Current/latest visual magnitude in M.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVismag()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Minimum visual magnitude in M.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVismagMin()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum visual magnitude in M.
    /// Example: /// Example: 15.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVismagMax()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Mean visual magnitude in M.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVismagMean()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Current/latest radar cross section in meters squared.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRcs()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Minimum radar cross section in meters squared.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRcsMin()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum radar cross section in meters squared.
    /// Example: /// Example: 15.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRcsMax()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Mean radar cross section in meters squared.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRcsMean()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The total beginning of life delta V of the spacecraft, in meters per second.
    /// Example: /// Example: 1000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBolDeltaV()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum delta V available for this on-orbit spacecraft, in meters per second.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxDeltaV()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
    /// Example: /// Example: 50.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeltaVUnc()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Estimated maximum burn duration for the object, in seconds.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEstDeltaVDuration()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The number of distinct missions the spacecraft performs.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumMission()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.
    /// Example: /// Example: ['Weather', 'Space Weather']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getMissionTypes($j)
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMissionTypesLength()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Type of the bus on the spacecraft.
    /// Example: /// Example: A2100
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getBusType()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.
    /// Example: /// Example: 90.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGeoSlot()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// GEO drift rate, if applicable in degrees per day.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDriftRate()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spacecraft dry mass (without fuel or disposables) in kilograms.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDryMass()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Mass of fuel and disposables at launch time in kilograms.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAdditionalMass()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLaunchMassMin()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Nominal mass of spacecraft and fuel at launch time, in kilograms.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLaunchMass()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
    /// Example: /// Example: 15.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLaunchMassMax()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spacecraft beginning of life fuel mass, in orbit, in kilograms.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBolFuelMass()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The estimated total current mass of the spacecraft, in kilograms.
    /// Example: /// Example: 500
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCurrentMass()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
    /// Example: /// Example: 50.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTotalMassUnc()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spacecraft deployed area of solar array in meters squared.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSolarArrayArea()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getManeuverable()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Estimated remaining fuel for the object in kilograms.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFuelRemaining()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average cross sectional area in meters squared.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCrossSection()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average cross sectional area of the bus in meters squared.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBusCrossSection()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxRadius()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getColaRadius()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAdeptRadius()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The number of sub-satellites or deployable objects on the spacecraft.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumDeployable()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.
    /// Example: /// Example: ['GOES-18A', 'GOES-18B']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDepNames($j)
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDepNamesLength()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
    /// Example: /// Example: [20, 21]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDepEstMasses($j)
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDepEstMassesLength()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
    /// Example: /// Example: [10, 5]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDepMassUncs($j)
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDepMassUncsLength()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the source who last provided an observation for this idOnOrbit.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getLastObSource()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \OnorbitDetails_Full_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startOnorbitDetails_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(50);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return OnorbitDetails_Full
     */
    public static function createOnorbitDetails_Full(FlatBufferBuilder $builder, $id, $idOnOrbit, $classificationMarking, $lastObTime, $vismag, $vismagMin, $vismagMax, $vismagMean, $rcs, $rcsMin, $rcsMax, $rcsMean, $bolDeltaV, $maxDeltaV, $deltaVUnc, $estDeltaVDuration, $numMission, $missionTypes, $busType, $geoSlot, $driftRate, $dryMass, $additionalMass, $launchMassMin, $launchMass, $launchMassMax, $bolFuelMass, $currentMass, $totalMassUnc, $solarArrayArea, $maneuverable, $fuelRemaining, $crossSection, $busCrossSection, $maxRadius, $colaRadius, $adeptRadius, $numDeployable, $depNames, $depEstMasses, $depMassUncs, $source, $origin, $lastObSource, $dataMode, $createdAt, $createdBy, $updatedAt, $updatedBy, $origNetwork)
    {
        $builder->startObject(50);
        self::addId($builder, $id);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addLastObTime($builder, $lastObTime);
        self::addVismag($builder, $vismag);
        self::addVismagMin($builder, $vismagMin);
        self::addVismagMax($builder, $vismagMax);
        self::addVismagMean($builder, $vismagMean);
        self::addRcs($builder, $rcs);
        self::addRcsMin($builder, $rcsMin);
        self::addRcsMax($builder, $rcsMax);
        self::addRcsMean($builder, $rcsMean);
        self::addBolDeltaV($builder, $bolDeltaV);
        self::addMaxDeltaV($builder, $maxDeltaV);
        self::addDeltaVUnc($builder, $deltaVUnc);
        self::addEstDeltaVDuration($builder, $estDeltaVDuration);
        self::addNumMission($builder, $numMission);
        self::addMissionTypes($builder, $missionTypes);
        self::addBusType($builder, $busType);
        self::addGeoSlot($builder, $geoSlot);
        self::addDriftRate($builder, $driftRate);
        self::addDryMass($builder, $dryMass);
        self::addAdditionalMass($builder, $additionalMass);
        self::addLaunchMassMin($builder, $launchMassMin);
        self::addLaunchMass($builder, $launchMass);
        self::addLaunchMassMax($builder, $launchMassMax);
        self::addBolFuelMass($builder, $bolFuelMass);
        self::addCurrentMass($builder, $currentMass);
        self::addTotalMassUnc($builder, $totalMassUnc);
        self::addSolarArrayArea($builder, $solarArrayArea);
        self::addManeuverable($builder, $maneuverable);
        self::addFuelRemaining($builder, $fuelRemaining);
        self::addCrossSection($builder, $crossSection);
        self::addBusCrossSection($builder, $busCrossSection);
        self::addMaxRadius($builder, $maxRadius);
        self::addColaRadius($builder, $colaRadius);
        self::addAdeptRadius($builder, $adeptRadius);
        self::addNumDeployable($builder, $numDeployable);
        self::addDepNames($builder, $depNames);
        self::addDepEstMasses($builder, $depEstMasses);
        self::addDepMassUncs($builder, $depMassUncs);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addLastObSource($builder, $lastObSource);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(1, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(2, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastObTime(FlatBufferBuilder $builder, $lastObTime)
    {
        $builder->addOffsetX(3, $lastObTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVismag(FlatBufferBuilder $builder, $vismag)
    {
        $builder->addDoubleX(4, $vismag, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVismagMin(FlatBufferBuilder $builder, $vismagMin)
    {
        $builder->addDoubleX(5, $vismagMin, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVismagMax(FlatBufferBuilder $builder, $vismagMax)
    {
        $builder->addDoubleX(6, $vismagMax, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVismagMean(FlatBufferBuilder $builder, $vismagMean)
    {
        $builder->addDoubleX(7, $vismagMean, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRcs(FlatBufferBuilder $builder, $rcs)
    {
        $builder->addDoubleX(8, $rcs, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRcsMin(FlatBufferBuilder $builder, $rcsMin)
    {
        $builder->addDoubleX(9, $rcsMin, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRcsMax(FlatBufferBuilder $builder, $rcsMax)
    {
        $builder->addDoubleX(10, $rcsMax, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRcsMean(FlatBufferBuilder $builder, $rcsMean)
    {
        $builder->addDoubleX(11, $rcsMean, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBolDeltaV(FlatBufferBuilder $builder, $bolDeltaV)
    {
        $builder->addDoubleX(12, $bolDeltaV, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxDeltaV(FlatBufferBuilder $builder, $maxDeltaV)
    {
        $builder->addDoubleX(13, $maxDeltaV, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeltaVUnc(FlatBufferBuilder $builder, $deltaVUnc)
    {
        $builder->addDoubleX(14, $deltaVUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEstDeltaVDuration(FlatBufferBuilder $builder, $estDeltaVDuration)
    {
        $builder->addDoubleX(15, $estDeltaVDuration, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumMission(FlatBufferBuilder $builder, $numMission)
    {
        $builder->addIntX(16, $numMission, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMissionTypes(FlatBufferBuilder $builder, $missionTypes)
    {
        $builder->addOffsetX(17, $missionTypes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMissionTypesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMissionTypesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBusType(FlatBufferBuilder $builder, $busType)
    {
        $builder->addOffsetX(18, $busType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGeoSlot(FlatBufferBuilder $builder, $geoSlot)
    {
        $builder->addDoubleX(19, $geoSlot, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDriftRate(FlatBufferBuilder $builder, $driftRate)
    {
        $builder->addDoubleX(20, $driftRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDryMass(FlatBufferBuilder $builder, $dryMass)
    {
        $builder->addDoubleX(21, $dryMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAdditionalMass(FlatBufferBuilder $builder, $additionalMass)
    {
        $builder->addDoubleX(22, $additionalMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLaunchMassMin(FlatBufferBuilder $builder, $launchMassMin)
    {
        $builder->addDoubleX(23, $launchMassMin, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLaunchMass(FlatBufferBuilder $builder, $launchMass)
    {
        $builder->addDoubleX(24, $launchMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLaunchMassMax(FlatBufferBuilder $builder, $launchMassMax)
    {
        $builder->addDoubleX(25, $launchMassMax, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBolFuelMass(FlatBufferBuilder $builder, $bolFuelMass)
    {
        $builder->addDoubleX(26, $bolFuelMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCurrentMass(FlatBufferBuilder $builder, $currentMass)
    {
        $builder->addDoubleX(27, $currentMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTotalMassUnc(FlatBufferBuilder $builder, $totalMassUnc)
    {
        $builder->addDoubleX(28, $totalMassUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSolarArrayArea(FlatBufferBuilder $builder, $solarArrayArea)
    {
        $builder->addDoubleX(29, $solarArrayArea, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addManeuverable(FlatBufferBuilder $builder, $maneuverable)
    {
        $builder->addBoolX(30, $maneuverable, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFuelRemaining(FlatBufferBuilder $builder, $fuelRemaining)
    {
        $builder->addDoubleX(31, $fuelRemaining, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCrossSection(FlatBufferBuilder $builder, $crossSection)
    {
        $builder->addDoubleX(32, $crossSection, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBusCrossSection(FlatBufferBuilder $builder, $busCrossSection)
    {
        $builder->addDoubleX(33, $busCrossSection, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxRadius(FlatBufferBuilder $builder, $maxRadius)
    {
        $builder->addDoubleX(34, $maxRadius, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addColaRadius(FlatBufferBuilder $builder, $colaRadius)
    {
        $builder->addDoubleX(35, $colaRadius, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAdeptRadius(FlatBufferBuilder $builder, $adeptRadius)
    {
        $builder->addDoubleX(36, $adeptRadius, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumDeployable(FlatBufferBuilder $builder, $numDeployable)
    {
        $builder->addIntX(37, $numDeployable, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDepNames(FlatBufferBuilder $builder, $depNames)
    {
        $builder->addOffsetX(38, $depNames, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDepNamesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDepNamesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDepEstMasses(FlatBufferBuilder $builder, $depEstMasses)
    {
        $builder->addOffsetX(39, $depEstMasses, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDepEstMassesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDepEstMassesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDepMassUncs(FlatBufferBuilder $builder, $depMassUncs)
    {
        $builder->addOffsetX(40, $depMassUncs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDepMassUncsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDepMassUncsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(41, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(42, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastObSource(FlatBufferBuilder $builder, $lastObSource)
    {
        $builder->addOffsetX(43, $lastObSource, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(44, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(45, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(46, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(47, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(48, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(49, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endOnorbitDetails_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishOnorbitDetails_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ONOR");
    }
}
