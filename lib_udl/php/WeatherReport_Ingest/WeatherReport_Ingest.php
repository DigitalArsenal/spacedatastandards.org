<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// These services provide for posting and querying Weather Over Target information. The information contained within describes the current weather conditions over a target area or region to include navigational considerations such as altimeter settings, visibility, cloud heights etc.
class WeatherReport_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return WeatherReport_Ingest
     */
    public static function getRootAsWeatherReport_Ingest(ByteBuffer $bb)
    {
        $obj = new WeatherReport_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function WeatherReport_IngestIdentifier()
    {
        return "WEAT";
    }

    public static function WeatherReport_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::WeatherReport_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return WeatherReport_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: WEATHER-REPORT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the sensor making the weather measurement.
    /// Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigSensorId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the weather over target, which should remain the same on subsequent Weather Over Target records.
    /// Example: /// Example: WEATHER-ID
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getWeatherId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the ground imagery associated for this weather over target report.
    /// Example: /// Example: GROUND-IMAGERY-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdGroundImagery()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the Site that is associated with this weather report.
    /// Example: /// Example: AIRFIELD-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSite()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the Airfield associated with this weather report.
    /// Example: /// Example: 8fb38d6d-a3de-45dd-8974-4e3ed73e9449
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdAirfield()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The International Civil Aviation Organization (ICAO) code of the airfield associated with this weather report.
    /// Example: /// Example: KAFF
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getIcao()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional observation or forecast ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: GDSSMB022408301601304517
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getExternalId()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional location ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: TMDS060AD4OG03CC
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getExternalLocationId()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifies the type of weather report (e.g. OBSERVATION, FORECAST, etc.).
    /// Example: /// Example: FORECAST
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getReportType()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getObTime()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Valid start time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
    /// Example: /// Example: 2024-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getForecastStartTime()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Valid end time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
    /// Example: /// Example: 2024-01-01T18:00:00.123Z
    /// Constraints: No constraints specified.
    public function getForecastEndTime()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The central WGS-84 latitude of the weather report, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 56.12
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLat()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The central WGS-84 longitude of the weather report, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -156.6
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLon()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Point height above ellipsoid (WGS-84), in meters.
    /// Example: /// Example: 123.12
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAlt()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Altitude of a pressure surface in the atmosphere above mean sea level, in meters.
    /// Example: /// Example: 1000.0
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGeoPotentialAlt()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Specific pressures or heights where measurements are taken, labeled as either MANDATORY or SIGNIFICANT levels. Mandatory levels are at particular pressures at geopotential heights. Significant levels are at particular geometric heights.
    /// Example: /// Example: MANDATORY
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getDataLevel()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    public function getArea()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    public function getAtext()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    /// Constraints: No constraints specified.
    public function getAgjson()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of region as projected on the ground.
    /// Example: /// Example: ST_Polygon
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getAtype()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of dimensions of the geometry depicted by region.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAndims()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Geographical spatial_ref_sys for region.
    /// Example: /// Example: 4326
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAsrid()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Expresses the speed of the wind in meters/second.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWindSpd()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average wind speed over a 1 minute period, in meters/second.
    /// Example: /// Example: 12.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWindSpdAvg()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Expresses the max gust speed of the wind, in meters/second.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWindGust()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Expresses the max gust speed of the wind recorded in a 10 minute period, in meters/second.
    /// Example: /// Example: 13.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWindGust10()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The change in wind speed between two different altitudes divided by the vertical distance between them, in units of 1/sec.
    /// Example: /// Example: 3.8
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVshear()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The change in wind speed between two different lateral positions at a given altitude divided by the horizontal distance between them, in units of 1/sec.
    /// Example: /// Example: 3.8
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHshear()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average radial velocity of wind as measured by radar with multi-beam configurations. Radial velocity is the component of wind velocity moving directly toward or away from a sensor's radar beam, in meters per second. Values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar).
    /// Example: /// Example: -0.04
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRadVel()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Component of wind velocity moving directly toward or away from radar beam 1, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    /// Example: /// Example: 4.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRadVelBeam1()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Component of wind velocity moving directly toward or away from radar beam 2, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    /// Example: /// Example: -0.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRadVelBeam2()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Component of wind velocity moving directly toward or away from radar beam 3, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    /// Example: /// Example: -0.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRadVelBeam3()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Component of wind velocity moving directly toward or away from radar beam 4, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    /// Example: /// Example: 11.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRadVelBeam4()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Component of wind velocity moving directly toward or away from radar beam 5, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    /// Example: /// Example: 4.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRadVelBeam5()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Direction the wind is blowing, in degrees clockwise from true north.
    /// Example: /// Example: 75.1234
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWindDir()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average wind direction over a 1 minute period, in degrees clockwise from true north.
    /// Example: /// Example: 57.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWindDirAvg()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Wind direction corresponding to the peak wind speed during a 1 minute period, in degrees clockwise from true north.
    /// Example: /// Example: 78.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWindDirPeak()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Wind direction corresponding to the peak wind speed during a 10 minute period, in degrees clockwise from true north.
    /// Example: /// Example: 44.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWindDirPeak10()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The perceived temperature in degrees C.
    /// Example: /// Example: 15.6
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWindChill()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The difference in wind direction recorded over a period of time, in degrees.
    /// Example: /// Example: 9.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDirDev()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Boolean describing whether or not the wind direction and/or speed is variable.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getWindVar()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Covariance matrix, in knots and second based units.  The array values represent the lower triangular half of the covariance matrix. The size of the covariance matrix is 2x2.  The covariance elements are position dependent within the array with values ordered as follows:
    /// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y
    /// x&nbsp;&nbsp;&nbsp;&nbsp;1
    /// y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
    /// The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getWindCov($j)
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getWindCovLength()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of cloud cover descriptions - each element can be maximum of 16 characters long. Intended as, but not constrained to, MIL-STD-6016 cloud cover designations (e.g. SKY CLEAR, SCATTERED, BROKEN, OVERCAST, SKY OBSCURED). Each element of the array corresponds to the elements in the cloudHght array specified respectively.
    /// Example: /// Example: ['OVERCAST', 'BROKEN']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCloudCover($j)
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCloudCoverLength()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of cloud base heights in meters described by the cloudHght array. Each element of the array corresponds to the elements in the cloudCover array specified respectively.
    /// Example: /// Example: [1.2, 2.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCloudHght($j)
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCloudHghtLength()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Describes the actual weather at position. Intended as, but not constrained to, MIL-STD-6016 actual weather (e.g. NO STATEMENT, NO SIGNIFICANT WEATHER, DRIZZLE, RAIN, SNOW, SNOW GRAINS, DIAMOND DUST, ICE PELLETS, HAIL, SMALL HAIL, MIST, FOG, SMOKE, VOLCANIC ASH, WIDESPREAD DUST, SAND, HAZE, WELL DEVELOPED DUST, SQUALLS, FUNNEL CLOUDS, SANDSTORM, DUSTSTORM, LOW CLOUDS, CLOUDY, GROUND FOG, DUST, HEAVY RAIN, THUNDERSTORMS AWT, HEAVY THUNDERSTORMS, HURRICANE TYPHOON CYCLONE, TROPICAL STORM, TORNADO, HIGH WINDS, LIGHTNING, FREEZING DRIZZLE, FREEZING RAIN, HEAVY SNOW, ICING, SNOW OR RAIN AND SNOW MIXED, SHOWERS, CLEAR).
    /// Example: /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getActWeather()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Used in conjunction with actWeather and weatherInt. Intended as, but not constrained to, MIL-STD-6016 actual weather descriptor (e.g. NO STATEMENT, SHALLOW, PATCHES, LOW DRIFTING, BLOWING, SHOWERS, THUNDERSTORMS, SUPERCOOLED).
    /// Example: /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getWeatherDesc()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Weather Intensity. Used in conjunction with actWeather and weatherDesc. Intended as, but not constrained to, MIL-STD-6016 weather intensity (e.g. NO STATEMENT, LIGHT, MODERATE, HEAVY, IN VICINITY).
    /// Example: /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getWeatherInt()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Raw Meteorological Aerodrome Report (METAR) string.
    /// Example: /// Example: KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getRawMETAR()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Terminal Aerodrome Forecast (TAF) containing detailed weather predictions for a specific airport or aerodrome.
    /// Example: /// Example: KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z=
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getRawTAF()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Altimeter set to read zero at mean sea level in kilopascals.
    /// Example: /// Example: 1234.456
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getQnh()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Visual distance in meters.
    /// Example: /// Example: 1234.456
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVisibility()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The measurement of air temperature in degrees C.
    /// Example: /// Example: 23.45
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTemperature()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The measurement of soil temperature in degrees C.
    /// Example: /// Example: 22.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSoilTemp()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The measurement of air pressure in the atmosphere in kilopascals.
    /// Example: /// Example: 101.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBarPress()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The speed at which water is being applied to a specific area in millimeters per hour.
    /// Example: /// Example: 3.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPrecipRate()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The amount of rain that has fallen in the past hour, in centimeters.
    /// Example: /// Example: 1.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRainHour()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The power per unit area received from the Sun in the form of electromagnetic radiation as measured in the wavelength range of the measuring instrument. The solar irradiance is measured in watt per square meter (W/m2).
    /// Example: /// Example: 1234.456
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSolarRad()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The amount of radiation that reaches earth's surface after being scattered by the atmosphere, in Watts per square meter.
    /// Example: /// Example: 234.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDifRad()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The amount of radiation that changes direction as a function of atmospheric density, in Watts per square meter.
    /// Example: /// Example: 56.7
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRefRad()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor WGS84 latitude at obTime in degrees. -90 to 90 degrees (negative values south of equator). This includes pilot reports or other means of weather observation.
    /// Example: /// Example: 12.456
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlat()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor WGS84 longitude at obTime in degrees. -180 to 180 degrees (negative values west of Prime Meridian). This includes pilot reports or other means of weather observation.
    /// Example: /// Example: 123.456
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlon()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor altitude at obTime in km. This includes pilot reports or other means of weather observation.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenalt()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The temperature at which air is saturated with water vapor, in degrees C.
    /// Example: /// Example: 15.6
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDewPoint()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The percentage of water vapor in the atmosphere.
    /// Example: /// Example: 34.456
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRelHumidity()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// An indication of how much the atmosphere refracts light.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getIndexRefraction()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The volumetric percentage of soil water contained in a given volume of soil.
    /// Example: /// Example: 3.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSoilMoisture()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Describes in which direction (if any) that better weather conditions exist. Intended as, but not constrained to, MIL-STD-6016 surrounding weather designations (e.g. NO STATEMENT, BETTER TO NORTH, BETTER TO EAST, BETTER TO SOUTH, BETTER TO WEST).
    /// Example: /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getSurroundingWeather()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Amplifies the actual weather being reported. Intended as, but not constrained to, MIL-STD-6016 weather amplification designations (e.g. NO STATEMENT, NO SCATTERED BROKEN MEDIUM CLOUD, SCATTERED BROKEN MEDIUM CLOUDS, GUSTY WINDS AT SERVICE, FOG IN VALLEYS, HIGHER TERRAIN OBSCURED, SURFACE CONDITIONS VARIABLE, SURFACE WIND NE, SURFACE WIND SE, SURFACE WIND SW, SURFACE WIND NW, PRESENCE OF CUMULONIMBUS).
    /// Example: /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getWeatherAmp()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Reports the lowest altitude at which contrails are occurring, in meters.
    /// Example: /// Example: 123.123
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getContrailHghtLower()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Reports the highest altitude at which contrails are occurring, in meters.
    /// Example: /// Example: 123.123
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getContrailHghtUpper()
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Reports the highest altitude at which icing or freezing rain is occurring, in meters.
    /// Example: /// Example: 123.123
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getIcingUpperLimit()
    {
        $o = $this->__offset(152);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Reports the lowest altitude at which icing or freezing rain is occurring, in meters.
    /// Example: /// Example: 123.123
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getIcingLowerLimit()
    {
        $o = $this->__offset(154);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Describes the flight conditions in route to the target  (NO STATEMENT, MAINLY IFR, MAINLY VFR, THUNDERSTORMS).
    /// MAINLY IFR:&nbsp;&nbsp;Predominantly Instrument Flight Rules.
    /// MAINLY VFR:&nbsp;&nbsp;Predominantly Visual Flight Rules.
    /// THUNDERSTORMS:&nbsp;&nbsp;Thunderstorms expected in route.
    /// Example: /// Example: THUNDERSTORMS
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getEnRouteWeather()
    {
        $o = $this->__offset(156);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating detection of a cloud-to-cloud lightning event.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getCcEvent()
    {
        $o = $this->__offset(158);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Array of UDL record types (SENSOR, WEATHERDATA) that are related to this WeatherReport record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: /// Example: ['SENSOR', 'WEATHERDATA']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSrcTyps($j)
    {
        $o = $this->__offset(160);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSrcTypsLength()
    {
        $o = $this->__offset(160);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of UUID(s) of the UDL data record(s) that are related to this WeatherReport record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
    /// Example: /// Example: ['e609a90d-4059-4043-9f1a-fd7b49a3e1d0', 'c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSrcIds($j)
    {
        $o = $this->__offset(162);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSrcIdsLength()
    {
        $o = $this->__offset(162);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(164);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(166);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(168);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSource()
    {
        $o = $this->__offset(170);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(172);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(174);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \WeatherReport_Ingest_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startWeatherReport_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(86);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return WeatherReport_Ingest
     */
    public static function createWeatherReport_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $idSensor, $origSensorId, $weatherId, $idGroundImagery, $idSite, $idAirfield, $icao, $externalId, $externalLocationId, $reportType, $obTime, $forecastStartTime, $forecastEndTime, $lat, $lon, $alt, $geoPotentialAlt, $dataLevel, $area, $atext, $agjson, $atype, $andims, $asrid, $windSpd, $windSpdAvg, $windGust, $windGust10, $vshear, $hshear, $radVel, $radVelBeam1, $radVelBeam2, $radVelBeam3, $radVelBeam4, $radVelBeam5, $windDir, $windDirAvg, $windDirPeak, $windDirPeak10, $windChill, $dirDev, $windVar, $windCov, $cloudCover, $cloudHght, $actWeather, $weatherDesc, $weatherInt, $rawMETAR, $rawTAF, $qnh, $visibility, $temperature, $soilTemp, $barPress, $precipRate, $rainHour, $solarRad, $difRad, $refRad, $senlat, $senlon, $senalt, $dewPoint, $relHumidity, $indexRefraction, $soilMoisture, $surroundingWeather, $weatherAmp, $contrailHghtLower, $contrailHghtUpper, $icingUpperLimit, $icingLowerLimit, $enRouteWeather, $ccEvent, $srcTyps, $srcIds, $origNetwork, $createdAt, $createdBy, $source, $origin, $dataMode)
    {
        $builder->startObject(86);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdSensor($builder, $idSensor);
        self::addOrigSensorId($builder, $origSensorId);
        self::addWeatherId($builder, $weatherId);
        self::addIdGroundImagery($builder, $idGroundImagery);
        self::addIdSite($builder, $idSite);
        self::addIdAirfield($builder, $idAirfield);
        self::addIcao($builder, $icao);
        self::addExternalId($builder, $externalId);
        self::addExternalLocationId($builder, $externalLocationId);
        self::addReportType($builder, $reportType);
        self::addObTime($builder, $obTime);
        self::addForecastStartTime($builder, $forecastStartTime);
        self::addForecastEndTime($builder, $forecastEndTime);
        self::addLat($builder, $lat);
        self::addLon($builder, $lon);
        self::addAlt($builder, $alt);
        self::addGeoPotentialAlt($builder, $geoPotentialAlt);
        self::addDataLevel($builder, $dataLevel);
        self::addArea($builder, $area);
        self::addAtext($builder, $atext);
        self::addAgjson($builder, $agjson);
        self::addAtype($builder, $atype);
        self::addAndims($builder, $andims);
        self::addAsrid($builder, $asrid);
        self::addWindSpd($builder, $windSpd);
        self::addWindSpdAvg($builder, $windSpdAvg);
        self::addWindGust($builder, $windGust);
        self::addWindGust10($builder, $windGust10);
        self::addVshear($builder, $vshear);
        self::addHshear($builder, $hshear);
        self::addRadVel($builder, $radVel);
        self::addRadVelBeam1($builder, $radVelBeam1);
        self::addRadVelBeam2($builder, $radVelBeam2);
        self::addRadVelBeam3($builder, $radVelBeam3);
        self::addRadVelBeam4($builder, $radVelBeam4);
        self::addRadVelBeam5($builder, $radVelBeam5);
        self::addWindDir($builder, $windDir);
        self::addWindDirAvg($builder, $windDirAvg);
        self::addWindDirPeak($builder, $windDirPeak);
        self::addWindDirPeak10($builder, $windDirPeak10);
        self::addWindChill($builder, $windChill);
        self::addDirDev($builder, $dirDev);
        self::addWindVar($builder, $windVar);
        self::addWindCov($builder, $windCov);
        self::addCloudCover($builder, $cloudCover);
        self::addCloudHght($builder, $cloudHght);
        self::addActWeather($builder, $actWeather);
        self::addWeatherDesc($builder, $weatherDesc);
        self::addWeatherInt($builder, $weatherInt);
        self::addRawMETAR($builder, $rawMETAR);
        self::addRawTAF($builder, $rawTAF);
        self::addQnh($builder, $qnh);
        self::addVisibility($builder, $visibility);
        self::addTemperature($builder, $temperature);
        self::addSoilTemp($builder, $soilTemp);
        self::addBarPress($builder, $barPress);
        self::addPrecipRate($builder, $precipRate);
        self::addRainHour($builder, $rainHour);
        self::addSolarRad($builder, $solarRad);
        self::addDifRad($builder, $difRad);
        self::addRefRad($builder, $refRad);
        self::addSenlat($builder, $senlat);
        self::addSenlon($builder, $senlon);
        self::addSenalt($builder, $senalt);
        self::addDewPoint($builder, $dewPoint);
        self::addRelHumidity($builder, $relHumidity);
        self::addIndexRefraction($builder, $indexRefraction);
        self::addSoilMoisture($builder, $soilMoisture);
        self::addSurroundingWeather($builder, $surroundingWeather);
        self::addWeatherAmp($builder, $weatherAmp);
        self::addContrailHghtLower($builder, $contrailHghtLower);
        self::addContrailHghtUpper($builder, $contrailHghtUpper);
        self::addIcingUpperLimit($builder, $icingUpperLimit);
        self::addIcingLowerLimit($builder, $icingLowerLimit);
        self::addEnRouteWeather($builder, $enRouteWeather);
        self::addCcEvent($builder, $ccEvent);
        self::addSrcTyps($builder, $srcTyps);
        self::addSrcIds($builder, $srcIds);
        self::addOrigNetwork($builder, $origNetwork);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(2, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSensorId(FlatBufferBuilder $builder, $origSensorId)
    {
        $builder->addOffsetX(3, $origSensorId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWeatherId(FlatBufferBuilder $builder, $weatherId)
    {
        $builder->addOffsetX(4, $weatherId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdGroundImagery(FlatBufferBuilder $builder, $idGroundImagery)
    {
        $builder->addOffsetX(5, $idGroundImagery, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSite(FlatBufferBuilder $builder, $idSite)
    {
        $builder->addOffsetX(6, $idSite, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdAirfield(FlatBufferBuilder $builder, $idAirfield)
    {
        $builder->addOffsetX(7, $idAirfield, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIcao(FlatBufferBuilder $builder, $icao)
    {
        $builder->addOffsetX(8, $icao, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalId(FlatBufferBuilder $builder, $externalId)
    {
        $builder->addOffsetX(9, $externalId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalLocationId(FlatBufferBuilder $builder, $externalLocationId)
    {
        $builder->addOffsetX(10, $externalLocationId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReportType(FlatBufferBuilder $builder, $reportType)
    {
        $builder->addOffsetX(11, $reportType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObTime(FlatBufferBuilder $builder, $obTime)
    {
        $builder->addOffsetX(12, $obTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addForecastStartTime(FlatBufferBuilder $builder, $forecastStartTime)
    {
        $builder->addOffsetX(13, $forecastStartTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addForecastEndTime(FlatBufferBuilder $builder, $forecastEndTime)
    {
        $builder->addOffsetX(14, $forecastEndTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLat(FlatBufferBuilder $builder, $lat)
    {
        $builder->addDoubleX(15, $lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLon(FlatBufferBuilder $builder, $lon)
    {
        $builder->addDoubleX(16, $lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAlt(FlatBufferBuilder $builder, $alt)
    {
        $builder->addDoubleX(17, $alt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGeoPotentialAlt(FlatBufferBuilder $builder, $geoPotentialAlt)
    {
        $builder->addDoubleX(18, $geoPotentialAlt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDataLevel(FlatBufferBuilder $builder, $dataLevel)
    {
        $builder->addOffsetX(19, $dataLevel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArea(FlatBufferBuilder $builder, $area)
    {
        $builder->addOffsetX(20, $area, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAtext(FlatBufferBuilder $builder, $atext)
    {
        $builder->addOffsetX(21, $atext, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAgjson(FlatBufferBuilder $builder, $agjson)
    {
        $builder->addOffsetX(22, $agjson, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAtype(FlatBufferBuilder $builder, $atype)
    {
        $builder->addOffsetX(23, $atype, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAndims(FlatBufferBuilder $builder, $andims)
    {
        $builder->addIntX(24, $andims, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAsrid(FlatBufferBuilder $builder, $asrid)
    {
        $builder->addIntX(25, $asrid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWindSpd(FlatBufferBuilder $builder, $windSpd)
    {
        $builder->addDoubleX(26, $windSpd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWindSpdAvg(FlatBufferBuilder $builder, $windSpdAvg)
    {
        $builder->addDoubleX(27, $windSpdAvg, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWindGust(FlatBufferBuilder $builder, $windGust)
    {
        $builder->addDoubleX(28, $windGust, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWindGust10(FlatBufferBuilder $builder, $windGust10)
    {
        $builder->addDoubleX(29, $windGust10, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVshear(FlatBufferBuilder $builder, $vshear)
    {
        $builder->addDoubleX(30, $vshear, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHshear(FlatBufferBuilder $builder, $hshear)
    {
        $builder->addDoubleX(31, $hshear, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRadVel(FlatBufferBuilder $builder, $radVel)
    {
        $builder->addDoubleX(32, $radVel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRadVelBeam1(FlatBufferBuilder $builder, $radVelBeam1)
    {
        $builder->addDoubleX(33, $radVelBeam1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRadVelBeam2(FlatBufferBuilder $builder, $radVelBeam2)
    {
        $builder->addDoubleX(34, $radVelBeam2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRadVelBeam3(FlatBufferBuilder $builder, $radVelBeam3)
    {
        $builder->addDoubleX(35, $radVelBeam3, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRadVelBeam4(FlatBufferBuilder $builder, $radVelBeam4)
    {
        $builder->addDoubleX(36, $radVelBeam4, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRadVelBeam5(FlatBufferBuilder $builder, $radVelBeam5)
    {
        $builder->addDoubleX(37, $radVelBeam5, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWindDir(FlatBufferBuilder $builder, $windDir)
    {
        $builder->addDoubleX(38, $windDir, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWindDirAvg(FlatBufferBuilder $builder, $windDirAvg)
    {
        $builder->addDoubleX(39, $windDirAvg, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWindDirPeak(FlatBufferBuilder $builder, $windDirPeak)
    {
        $builder->addDoubleX(40, $windDirPeak, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWindDirPeak10(FlatBufferBuilder $builder, $windDirPeak10)
    {
        $builder->addDoubleX(41, $windDirPeak10, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWindChill(FlatBufferBuilder $builder, $windChill)
    {
        $builder->addDoubleX(42, $windChill, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDirDev(FlatBufferBuilder $builder, $dirDev)
    {
        $builder->addDoubleX(43, $dirDev, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addWindVar(FlatBufferBuilder $builder, $windVar)
    {
        $builder->addBoolX(44, $windVar, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addWindCov(FlatBufferBuilder $builder, $windCov)
    {
        $builder->addOffsetX(45, $windCov, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createWindCovVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startWindCovVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCloudCover(FlatBufferBuilder $builder, $cloudCover)
    {
        $builder->addOffsetX(46, $cloudCover, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCloudCoverVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCloudCoverVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCloudHght(FlatBufferBuilder $builder, $cloudHght)
    {
        $builder->addOffsetX(47, $cloudHght, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCloudHghtVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCloudHghtVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActWeather(FlatBufferBuilder $builder, $actWeather)
    {
        $builder->addOffsetX(48, $actWeather, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWeatherDesc(FlatBufferBuilder $builder, $weatherDesc)
    {
        $builder->addOffsetX(49, $weatherDesc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWeatherInt(FlatBufferBuilder $builder, $weatherInt)
    {
        $builder->addOffsetX(50, $weatherInt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRawMETAR(FlatBufferBuilder $builder, $rawMETAR)
    {
        $builder->addOffsetX(51, $rawMETAR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRawTAF(FlatBufferBuilder $builder, $rawTAF)
    {
        $builder->addOffsetX(52, $rawTAF, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addQnh(FlatBufferBuilder $builder, $qnh)
    {
        $builder->addDoubleX(53, $qnh, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVisibility(FlatBufferBuilder $builder, $visibility)
    {
        $builder->addDoubleX(54, $visibility, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTemperature(FlatBufferBuilder $builder, $temperature)
    {
        $builder->addDoubleX(55, $temperature, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSoilTemp(FlatBufferBuilder $builder, $soilTemp)
    {
        $builder->addDoubleX(56, $soilTemp, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBarPress(FlatBufferBuilder $builder, $barPress)
    {
        $builder->addDoubleX(57, $barPress, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPrecipRate(FlatBufferBuilder $builder, $precipRate)
    {
        $builder->addDoubleX(58, $precipRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRainHour(FlatBufferBuilder $builder, $rainHour)
    {
        $builder->addDoubleX(59, $rainHour, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSolarRad(FlatBufferBuilder $builder, $solarRad)
    {
        $builder->addDoubleX(60, $solarRad, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDifRad(FlatBufferBuilder $builder, $difRad)
    {
        $builder->addDoubleX(61, $difRad, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRefRad(FlatBufferBuilder $builder, $refRad)
    {
        $builder->addDoubleX(62, $refRad, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlat(FlatBufferBuilder $builder, $senlat)
    {
        $builder->addDoubleX(63, $senlat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlon(FlatBufferBuilder $builder, $senlon)
    {
        $builder->addDoubleX(64, $senlon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenalt(FlatBufferBuilder $builder, $senalt)
    {
        $builder->addDoubleX(65, $senalt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDewPoint(FlatBufferBuilder $builder, $dewPoint)
    {
        $builder->addDoubleX(66, $dewPoint, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRelHumidity(FlatBufferBuilder $builder, $relHumidity)
    {
        $builder->addDoubleX(67, $relHumidity, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addIndexRefraction(FlatBufferBuilder $builder, $indexRefraction)
    {
        $builder->addDoubleX(68, $indexRefraction, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSoilMoisture(FlatBufferBuilder $builder, $soilMoisture)
    {
        $builder->addDoubleX(69, $soilMoisture, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSurroundingWeather(FlatBufferBuilder $builder, $surroundingWeather)
    {
        $builder->addOffsetX(70, $surroundingWeather, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWeatherAmp(FlatBufferBuilder $builder, $weatherAmp)
    {
        $builder->addOffsetX(71, $weatherAmp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addContrailHghtLower(FlatBufferBuilder $builder, $contrailHghtLower)
    {
        $builder->addDoubleX(72, $contrailHghtLower, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addContrailHghtUpper(FlatBufferBuilder $builder, $contrailHghtUpper)
    {
        $builder->addDoubleX(73, $contrailHghtUpper, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addIcingUpperLimit(FlatBufferBuilder $builder, $icingUpperLimit)
    {
        $builder->addDoubleX(74, $icingUpperLimit, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addIcingLowerLimit(FlatBufferBuilder $builder, $icingLowerLimit)
    {
        $builder->addDoubleX(75, $icingLowerLimit, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEnRouteWeather(FlatBufferBuilder $builder, $enRouteWeather)
    {
        $builder->addOffsetX(76, $enRouteWeather, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addCcEvent(FlatBufferBuilder $builder, $ccEvent)
    {
        $builder->addBoolX(77, $ccEvent, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSrcTyps(FlatBufferBuilder $builder, $srcTyps)
    {
        $builder->addOffsetX(78, $srcTyps, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSrcTypsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSrcTypsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSrcIds(FlatBufferBuilder $builder, $srcIds)
    {
        $builder->addOffsetX(79, $srcIds, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSrcIdsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSrcIdsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(80, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(81, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(82, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(83, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(84, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(85, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endWeatherReport_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishWeatherReport_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "WEAT");
    }
}
