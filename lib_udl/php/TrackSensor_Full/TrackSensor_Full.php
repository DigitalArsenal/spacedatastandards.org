<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Schema for Track Sensor data.
class TrackSensor_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return TrackSensor_Full
     */
    public static function getRootAsTrackSensor_Full(ByteBuffer $bb)
    {
        $obj = new TrackSensor_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function TrackSensor_FullIdentifier()
    {
        return "TRAC";
    }

    public static function TrackSensor_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::TrackSensor_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return TrackSensor_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The track object range from the observing sensor, in kilometers.
    /// Example: /// Example: 4023.95
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRange()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The observing sensor azimuth angle, in degrees and topocentric frame.
    /// Example: /// Example: 90
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAz()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
    /// Example: /// Example: 1234
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSensorNumber()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Unique name of this sensor.
    /// Example: /// Example: SENSOR_NAME
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getSensorName()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The mission number which produced this track observation.
    /// Example: /// Example: Example Mission
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getMissionNumber()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Minimum range measurement capability of the sensor, in kilometers.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMinRangeLimit()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The field of view (FOV) type (Butterfly, Cone Angular, Cone Distance, Horizon to Horizon, Unknown) employed by the sensor observing this object.
    /// Example: /// Example: UNKNOWN
    /// Constraints: Minimum length = 0, Maximum length = 24
    /**
     * @return sbyte
     */
    public function getSensorFOVType()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \TrackSensor_Full_sensorFOVType_Enum::BUTTERFLY;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startTrackSensor_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(7);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return TrackSensor_Full
     */
    public static function createTrackSensor_Full(FlatBufferBuilder $builder, $range, $az, $sensorNumber, $sensorName, $missionNumber, $minRangeLimit, $sensorFOVType)
    {
        $builder->startObject(7);
        self::addRange($builder, $range);
        self::addAz($builder, $az);
        self::addSensorNumber($builder, $sensorNumber);
        self::addSensorName($builder, $sensorName);
        self::addMissionNumber($builder, $missionNumber);
        self::addMinRangeLimit($builder, $minRangeLimit);
        self::addSensorFOVType($builder, $sensorFOVType);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRange(FlatBufferBuilder $builder, $range)
    {
        $builder->addDoubleX(0, $range, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAz(FlatBufferBuilder $builder, $az)
    {
        $builder->addDoubleX(1, $az, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSensorNumber(FlatBufferBuilder $builder, $sensorNumber)
    {
        $builder->addIntX(2, $sensorNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSensorName(FlatBufferBuilder $builder, $sensorName)
    {
        $builder->addOffsetX(3, $sensorName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionNumber(FlatBufferBuilder $builder, $missionNumber)
    {
        $builder->addOffsetX(4, $missionNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMinRangeLimit(FlatBufferBuilder $builder, $minRangeLimit)
    {
        $builder->addDoubleX(5, $minRangeLimit, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addSensorFOVType(FlatBufferBuilder $builder, $sensorFOVType)
    {
        $builder->addSbyteX(6, $sensorFOVType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endTrackSensor_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishTrackSensor_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "TRAC");
    }
}
