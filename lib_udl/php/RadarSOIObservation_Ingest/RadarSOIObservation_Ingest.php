<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// A Radar SOI record contains observation information taken from a sensor about a Space Object.
class RadarSOIObservation_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RadarSOIObservation_Ingest
     */
    public static function getRootAsRadarSOIObservation_Ingest(ByteBuffer $bb)
    {
        $obj = new RadarSOIObservation_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function RadarSOIObservation_IngestIdentifier()
    {
        return "RADA";
    }

    public static function RadarSOIObservation_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::RadarSOIObservation_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RadarSOIObservation_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Observation detection start time in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.888456Z
    /// Constraints: No constraints specified.
    public function getObStartTime()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of the times of validity in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTovs($j)
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTovsLength()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of range sample spacing in meters. The 'tov' and 'rspace' arrays must match in size.
    /// Example: /// Example: [0.006, 0.006, 0.006]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRspaces($j)
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRspacesLength()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of cross-range sample spacing in meters. The 'tov' and 'xspace' arrays must match in size.
    /// Example: /// Example: [0.006, 0.006, 0.006]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getXspaces($j)
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getXspacesLength()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of conversion factors between Doppler in hertz and cross-range in meters. The 'tov' and 'doppler2XR' arrays must match in size.
    /// Example: /// Example: [5644.27, 5644.27, 5644.27]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDoppler2XRs($j)
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDoppler2XRsLength()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of average Interpulse spacing in seconds. The 'tov' and 'deltaTime' arrays must match in size.
    /// Example: /// Example: [0.005, 0.005, 0.005]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDeltaTimes($j)
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDeltaTimesLength()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the aspect angle at the center of the image in degrees.  The 'tov' and 'aspectAngle' arrays must match in size.
    /// Example: /// Example: [4.278, 4.278, 4.278]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAspectAngles($j)
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAspectAnglesLength()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the component of target angular velocity observable by radar in radians per second.  The 'tov' and 'projAngVel' arrays must match in size.
    /// Example: /// Example: [0.166, 0.166, 0.166]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getProjAngVels($j)
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getProjAngVelsLength()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Optional id of assumed StateVector of object being observed.
    /// Example: /// Example: 99a0de63-b38f-4d81-b057
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdStateVector()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional id of assumed AttitudeSet of object being observed.
    /// Example: /// Example: 99a0de63-b38f-4d81-b057
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdAttitudeSet()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of the range to target at image center in kilometers. The 'tov' and 'range' arrays must match in size.
    /// Example: /// Example: [877.938, 877.938, 877.938]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRanges($j)
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRangesLength()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the azimuth angle to target at image center in degrees. The 'tov' and 'azimuth' arrays must match in size.
    /// Example: /// Example: [278.27, 278.27, 278.27]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAzimuths($j)
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAzimuthsLength()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the elevation angle to target at image center in degrees. The 'tov' and 'elevation' arrays must match in size.
    /// Example: /// Example: [70.85, 70.85, 70.85]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getElevations($j)
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getElevationsLength()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the range rate of target at image center in kilometers per second. The 'tov' and 'rangeRate' arrays must match in size.
    /// Example: /// Example: [0.317, 0.317, 0.317]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRangeRates($j)
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRangeRatesLength()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the azimuth rate of target at image center in degrees per second. The 'tov' and 'azimuthRate' arrays must match in size.
    /// Example: /// Example: [-1.481, -1.481, -1.481]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAzimuthRates($j)
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAzimuthRatesLength()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the elevation rate of target at image center in degrees per second. The 'tov' and 'elevationRate' arrays must match in size.
    /// Example: /// Example: [-0.074, -0.074, -0.074]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getElevationRates($j)
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getElevationRatesLength()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of  sensor azimuth angle biases in degrees. The 'tov' and 'azimuthBias' arrays must match in size.
    /// Example: /// Example: [45.23, 45.23, 45.23]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAzimuthBiases($j)
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAzimuthBiasesLength()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of sensor elevation biases in degrees. The 'tov' and 'elevationBias' arrays must match in size.
    /// Example: /// Example: [1.23, 1.23, 1.23]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getElevationBiases($j)
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getElevationBiasesLength()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of sensor range biases in kilometers. The 'tov' and 'rangeBias' arrays must match in size.
    /// Example: /// Example: [1.23, 1.23, 1.23]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRangeBiases($j)
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRangeBiasesLength()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of Integration angles in degrees. The 'tov' and 'integrationAngle' arrays must match in size.
    /// Example: /// Example: [8.594, 8.594, 8.594]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getIntegrationAngles($j)
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getIntegrationAnglesLength()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of cross-range resolutions (accounting for weighting function) in kilometers. The 'tov' and 'crossRangeRes' arrays must match in size.
    /// Example: /// Example: [11.301, 11.301, 11.301]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCrossRangeRes($j)
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCrossRangeResLength()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Beta angle (between target and radar-image frame z axis) in degrees.
    /// Example: /// Example: -89.97
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBeta()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Kappa angle (between radar-line-of-sight and target-frame x axis) in degrees.
    /// Example: /// Example: 103.04
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getKappa()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Array of the peak pixel amplitude for each image in decibels. The 'tov' and 'peakAmplitude' arrays must match in size.
    /// Example: /// Example: [33.1, 33.1, 33.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getPeakAmplitudes($j)
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getPeakAmplitudesLength()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Radar center frequency of the radar in hertz.
    /// Example: /// Example: 160047.0625
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCenterFrequency()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Bandwidth of radar pulse in hertz.
    /// Example: /// Example: 24094.12
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPulseBandwidth()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Array of the cartesian X positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xpos' arrays must match in size.
    /// Example: /// Example: [-1118.577381, -1118.577381, -1118.577381]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getXpos($j)
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getXposLength()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the cartesian Y positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'ypos' arrays must match in size.
    /// Example: /// Example: [3026.231084, 3026.231084, 3026.231084]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getYpos($j)
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getYposLength()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the cartesian Z positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'zpos' arrays must match in size.
    /// Example: /// Example: [6167.831808, 6167.831808, 6167.831808]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getZpos($j)
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getZposLength()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the cartesian X velocities of target, in kilometers per second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xvel' arrays must match in size.
    /// Example: /// Example: [-4.25242784, -4.25242784, -4.25242784]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getXvel($j)
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getXvelLength()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the cartesian Y velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'yvel' arrays must match in size.
    /// Example: /// Example: [5.291107434, 5.291107434, 5.291107434]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getYvel($j)
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getYvelLength()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the cartesian Z velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'zvel' arrays must match in size.
    /// Example: /// Example: [-3.356493869, -3.356493869, -3.356493869]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getZvel($j)
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getZvelLength()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRadarSOIObservation_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(32);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RadarSOIObservation_Ingest
     */
    public static function createRadarSOIObservation_Ingest(FlatBufferBuilder $builder, $obStartTime, $tovs, $rspaces, $xspaces, $doppler2XRs, $deltaTimes, $aspectAngles, $projAngVels, $idStateVector, $idAttitudeSet, $ranges, $azimuths, $elevations, $rangeRates, $azimuthRates, $elevationRates, $azimuthBiases, $elevationBiases, $rangeBiases, $integrationAngles, $crossRangeRes, $beta, $kappa, $peakAmplitudes, $centerFrequency, $pulseBandwidth, $xpos, $ypos, $zpos, $xvel, $yvel, $zvel)
    {
        $builder->startObject(32);
        self::addObStartTime($builder, $obStartTime);
        self::addTovs($builder, $tovs);
        self::addRspaces($builder, $rspaces);
        self::addXspaces($builder, $xspaces);
        self::addDoppler2XRs($builder, $doppler2XRs);
        self::addDeltaTimes($builder, $deltaTimes);
        self::addAspectAngles($builder, $aspectAngles);
        self::addProjAngVels($builder, $projAngVels);
        self::addIdStateVector($builder, $idStateVector);
        self::addIdAttitudeSet($builder, $idAttitudeSet);
        self::addRanges($builder, $ranges);
        self::addAzimuths($builder, $azimuths);
        self::addElevations($builder, $elevations);
        self::addRangeRates($builder, $rangeRates);
        self::addAzimuthRates($builder, $azimuthRates);
        self::addElevationRates($builder, $elevationRates);
        self::addAzimuthBiases($builder, $azimuthBiases);
        self::addElevationBiases($builder, $elevationBiases);
        self::addRangeBiases($builder, $rangeBiases);
        self::addIntegrationAngles($builder, $integrationAngles);
        self::addCrossRangeRes($builder, $crossRangeRes);
        self::addBeta($builder, $beta);
        self::addKappa($builder, $kappa);
        self::addPeakAmplitudes($builder, $peakAmplitudes);
        self::addCenterFrequency($builder, $centerFrequency);
        self::addPulseBandwidth($builder, $pulseBandwidth);
        self::addXpos($builder, $xpos);
        self::addYpos($builder, $ypos);
        self::addZpos($builder, $zpos);
        self::addXvel($builder, $xvel);
        self::addYvel($builder, $yvel);
        self::addZvel($builder, $zvel);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObStartTime(FlatBufferBuilder $builder, $obStartTime)
    {
        $builder->addOffsetX(0, $obStartTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTovs(FlatBufferBuilder $builder, $tovs)
    {
        $builder->addOffsetX(1, $tovs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTovsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTovsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRspaces(FlatBufferBuilder $builder, $rspaces)
    {
        $builder->addOffsetX(2, $rspaces, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRspacesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRspacesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addXspaces(FlatBufferBuilder $builder, $xspaces)
    {
        $builder->addOffsetX(3, $xspaces, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createXspacesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startXspacesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDoppler2XRs(FlatBufferBuilder $builder, $doppler2XRs)
    {
        $builder->addOffsetX(4, $doppler2XRs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDoppler2XRsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDoppler2XRsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDeltaTimes(FlatBufferBuilder $builder, $deltaTimes)
    {
        $builder->addOffsetX(5, $deltaTimes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDeltaTimesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDeltaTimesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAspectAngles(FlatBufferBuilder $builder, $aspectAngles)
    {
        $builder->addOffsetX(6, $aspectAngles, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAspectAnglesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAspectAnglesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addProjAngVels(FlatBufferBuilder $builder, $projAngVels)
    {
        $builder->addOffsetX(7, $projAngVels, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createProjAngVelsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startProjAngVelsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdStateVector(FlatBufferBuilder $builder, $idStateVector)
    {
        $builder->addOffsetX(8, $idStateVector, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdAttitudeSet(FlatBufferBuilder $builder, $idAttitudeSet)
    {
        $builder->addOffsetX(9, $idAttitudeSet, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRanges(FlatBufferBuilder $builder, $ranges)
    {
        $builder->addOffsetX(10, $ranges, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRangesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRangesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAzimuths(FlatBufferBuilder $builder, $azimuths)
    {
        $builder->addOffsetX(11, $azimuths, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAzimuthsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAzimuthsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addElevations(FlatBufferBuilder $builder, $elevations)
    {
        $builder->addOffsetX(12, $elevations, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createElevationsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startElevationsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRangeRates(FlatBufferBuilder $builder, $rangeRates)
    {
        $builder->addOffsetX(13, $rangeRates, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRangeRatesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRangeRatesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAzimuthRates(FlatBufferBuilder $builder, $azimuthRates)
    {
        $builder->addOffsetX(14, $azimuthRates, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAzimuthRatesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAzimuthRatesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addElevationRates(FlatBufferBuilder $builder, $elevationRates)
    {
        $builder->addOffsetX(15, $elevationRates, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createElevationRatesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startElevationRatesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAzimuthBiases(FlatBufferBuilder $builder, $azimuthBiases)
    {
        $builder->addOffsetX(16, $azimuthBiases, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAzimuthBiasesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAzimuthBiasesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addElevationBiases(FlatBufferBuilder $builder, $elevationBiases)
    {
        $builder->addOffsetX(17, $elevationBiases, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createElevationBiasesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startElevationBiasesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRangeBiases(FlatBufferBuilder $builder, $rangeBiases)
    {
        $builder->addOffsetX(18, $rangeBiases, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRangeBiasesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRangeBiasesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addIntegrationAngles(FlatBufferBuilder $builder, $integrationAngles)
    {
        $builder->addOffsetX(19, $integrationAngles, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createIntegrationAnglesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startIntegrationAnglesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCrossRangeRes(FlatBufferBuilder $builder, $crossRangeRes)
    {
        $builder->addOffsetX(20, $crossRangeRes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCrossRangeResVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCrossRangeResVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBeta(FlatBufferBuilder $builder, $beta)
    {
        $builder->addDoubleX(21, $beta, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addKappa(FlatBufferBuilder $builder, $kappa)
    {
        $builder->addDoubleX(22, $kappa, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPeakAmplitudes(FlatBufferBuilder $builder, $peakAmplitudes)
    {
        $builder->addOffsetX(23, $peakAmplitudes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createPeakAmplitudesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startPeakAmplitudesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCenterFrequency(FlatBufferBuilder $builder, $centerFrequency)
    {
        $builder->addDoubleX(24, $centerFrequency, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPulseBandwidth(FlatBufferBuilder $builder, $pulseBandwidth)
    {
        $builder->addDoubleX(25, $pulseBandwidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addXpos(FlatBufferBuilder $builder, $xpos)
    {
        $builder->addOffsetX(26, $xpos, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createXposVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startXposVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addYpos(FlatBufferBuilder $builder, $ypos)
    {
        $builder->addOffsetX(27, $ypos, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createYposVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startYposVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addZpos(FlatBufferBuilder $builder, $zpos)
    {
        $builder->addOffsetX(28, $zpos, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createZposVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startZposVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addXvel(FlatBufferBuilder $builder, $xvel)
    {
        $builder->addOffsetX(29, $xvel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createXvelVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startXvelVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addYvel(FlatBufferBuilder $builder, $yvel)
    {
        $builder->addOffsetX(30, $yvel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createYvelVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startYvelVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addZvel(FlatBufferBuilder $builder, $zvel)
    {
        $builder->addOffsetX(31, $zvel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createZvelVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startZvelVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRadarSOIObservation_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishRadarSOIObservation_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "RADA");
    }
}
