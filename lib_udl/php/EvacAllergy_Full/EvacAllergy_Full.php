<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Allergy information.
class EvacAllergy_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EvacAllergy_Full
     */
    public static function getRootAsEvacAllergy_Full(ByteBuffer $bb)
    {
        $obj = new EvacAllergy_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EvacAllergy_FullIdentifier()
    {
        return "EVAC";
    }

    public static function EvacAllergy_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EvacAllergy_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EvacAllergy_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Type of patient allergy (e.g.  PENICILLIN, SULFA, OTHER).
    /// Example: /// Example: PENICILLIN
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getType()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional comments on the  patient's allergy information.
    /// Example: /// Example: Comments on the patient's allergies.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getComments()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEvacAllergy_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EvacAllergy_Full
     */
    public static function createEvacAllergy_Full(FlatBufferBuilder $builder, $type, $comments)
    {
        $builder->startObject(2);
        self::addType($builder, $type);
        self::addComments($builder, $comments);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(0, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addComments(FlatBufferBuilder $builder, $comments)
    {
        $builder->addOffsetX(1, $comments, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEvacAllergy_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEvacAllergy_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "EVAC");
    }
}
