<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Provides a means of sending Basic Character Set alphanumeric text messages.
class MtiFreeText_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return MtiFreeText_Ingest
     */
    public static function getRootAsMtiFreeText_Ingest(ByteBuffer $bb)
    {
        $obj = new MtiFreeText_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function MtiFreeText_IngestIdentifier()
    {
        return "MTIF";
    }

    public static function MtiFreeText_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::MtiFreeText_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return MtiFreeText_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The originator of the Free Text message.
    /// Example: /// Example: ORIGINATOR
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getF1()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The recipient for which the Free Text message is intended.
    /// Example: /// Example: RECIPIENT
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getF2()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Free text data message.
    /// Example: /// Example: TEXT
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getF3()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startMtiFreeText_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(3);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return MtiFreeText_Ingest
     */
    public static function createMtiFreeText_Ingest(FlatBufferBuilder $builder, $f1, $f2, $f3)
    {
        $builder->startObject(3);
        self::addF1($builder, $f1);
        self::addF2($builder, $f2);
        self::addF3($builder, $f3);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addF1(FlatBufferBuilder $builder, $f1)
    {
        $builder->addOffsetX(0, $f1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addF2(FlatBufferBuilder $builder, $f2)
    {
        $builder->addOffsetX(1, $f2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addF3(FlatBufferBuilder $builder, $f3)
    {
        $builder->addOffsetX(2, $f3, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endMtiFreeText_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishMtiFreeText_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "MTIF");
    }
}
