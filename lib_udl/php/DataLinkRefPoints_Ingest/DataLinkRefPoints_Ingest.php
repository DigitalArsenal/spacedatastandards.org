<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
class DataLinkRefPoints_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return DataLinkRefPoints_Ingest
     */
    public static function getRootAsDataLinkRefPoints_Ingest(ByteBuffer $bb)
    {
        $obj = new DataLinkRefPoints_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function DataLinkRefPoints_IngestIdentifier()
    {
        return "DATA";
    }

    public static function DataLinkRefPoints_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::DataLinkRefPoints_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return DataLinkRefPoints_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Type of data link reference point or grid origin.
    /// Example: /// Example: DLRP
    /// Constraints: Minimum length = 0, Maximum length = 7
    public function getRefPointType()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier to designate a reference point.
    /// Example: /// Example: L5
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getRefDes()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The location name of the point of reference for this data link message.
    /// Example: /// Example: FORT BRAGG
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getRefLocName()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS84 latitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRefLat()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS84 longitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRefLon()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Indicates when a particular event or nickname becomes effective or the old event or nickname is deleted, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-08T13:55:43.123Z
    /// Constraints: No constraints specified.
    public function getEffEventTime()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startDataLinkRefPoints_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(6);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return DataLinkRefPoints_Ingest
     */
    public static function createDataLinkRefPoints_Ingest(FlatBufferBuilder $builder, $refPointType, $refDes, $refLocName, $refLat, $refLon, $effEventTime)
    {
        $builder->startObject(6);
        self::addRefPointType($builder, $refPointType);
        self::addRefDes($builder, $refDes);
        self::addRefLocName($builder, $refLocName);
        self::addRefLat($builder, $refLat);
        self::addRefLon($builder, $refLon);
        self::addEffEventTime($builder, $effEventTime);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRefPointType(FlatBufferBuilder $builder, $refPointType)
    {
        $builder->addOffsetX(0, $refPointType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRefDes(FlatBufferBuilder $builder, $refDes)
    {
        $builder->addOffsetX(1, $refDes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRefLocName(FlatBufferBuilder $builder, $refLocName)
    {
        $builder->addOffsetX(2, $refLocName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRefLat(FlatBufferBuilder $builder, $refLat)
    {
        $builder->addDoubleX(3, $refLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRefLon(FlatBufferBuilder $builder, $refLon)
    {
        $builder->addDoubleX(4, $refLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEffEventTime(FlatBufferBuilder $builder, $effEventTime)
    {
        $builder->addOffsetX(5, $effEventTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endDataLinkRefPoints_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishDataLinkRefPoints_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "DATA");
    }
}
