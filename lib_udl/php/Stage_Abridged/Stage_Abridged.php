<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.
class Stage_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Stage_Abridged
     */
    public static function getRootAsStage_Abridged(ByteBuffer $bb)
    {
        $obj = new Stage_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Stage_AbridgedIdentifier()
    {
        return "STAG";
    }

    public static function Stage_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Stage_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Stage_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: STAGE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the launch vehicle record for this stage.
    /// Example: /// Example: LAUNCHVEHICLE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdLaunchVehicle()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the Engine record for this stage.
    /// Example: /// Example: ENGINE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdEngine()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The stage number of this launch stage.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getStageNumber()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
    /// Example: /// Example: Electrostatic Ion
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getType()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID of the organization that manufactures this launch stage.
    /// Example: /// Example: 5feed5d7-d131-57e5-a3fd-acc173bca736
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getManufacturerOrgId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The number of the specified engines on this launch stage.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumEngines()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Stage length in meters.
    /// Example: /// Example: 25.13
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLength()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Stage maximum external diameter in meters.
    /// Example: /// Example: 3.95
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDiameter()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Stage gross mass in kg.
    /// Example: /// Example: 9956.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMass()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Engine vernier or additional engine type.
    /// Example: /// Example: vernier
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getVernier()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of vernier or additional engines.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumVernier()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Thrust of the stage main engine at sea level in kN.
    /// Example: /// Example: 733.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMainEngineThrustSeaLevel()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Thrust of the stage main engine in a vacuum in kN.
    /// Example: /// Example: 733.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMainEngineThrustVacuum()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total thrust of the stage at sea level in kN.
    /// Example: /// Example: 733.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getThrustSeaLevel()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total thrust of the stage in a vacuum in kN.
    /// Example: /// Example: 733.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getThrustVacuum()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total burn time of the stage engines in seconds.
    /// Example: /// Example: 256.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBurnTime()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Number of burns for the stage engines.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumBurns()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Total burn time of the vernier or additional stage engines in seconds.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVernierBurnTime()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total number of burns of the vernier or additional stage engines.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getVernierNumBurns()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Total thrust of one of the vernier or additional engines at sea level in kN.
    /// Example: /// Example: 4.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVernierThrustSeaLevel()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total thrust of one of the vernier or additional engines in a vacuum in kN.
    /// Example: /// Example: 3.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVernierThrustVacuum()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Number of launch stage elements used in this stage.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumStageElements()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Boolean indicating if this launch stage is reusable.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getReusable()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Boolean indicating if this launch stage can be restarted.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getRestartable()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Control thruster 1 type.
    /// Example: /// Example: controlThruster1
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getControlThruster1()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of type control thruster 1.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumControlThruster1()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Control thruster 2 type.
    /// Example: /// Example: controlThruster2
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getControlThruster2()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of type control thruster 2.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumControlThruster2()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Array of URLs of photos of the stage.
    /// Example: /// Example: ['photoURL']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getPhotoURLs($j)
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getPhotoURLsLength()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Description/notes of the stage.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getNotes()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description/notes of the stage avionics.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getAvionicsNotes()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Stage_Abridged_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startStage_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(39);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Stage_Abridged
     */
    public static function createStage_Abridged(FlatBufferBuilder $builder, $id, $idLaunchVehicle, $idEngine, $classificationMarking, $stageNumber, $type, $manufacturerOrgId, $numEngines, $length, $diameter, $mass, $vernier, $numVernier, $mainEngineThrustSeaLevel, $mainEngineThrustVacuum, $thrustSeaLevel, $thrustVacuum, $burnTime, $numBurns, $vernierBurnTime, $vernierNumBurns, $vernierThrustSeaLevel, $vernierThrustVacuum, $numStageElements, $reusable, $restartable, $controlThruster1, $numControlThruster1, $controlThruster2, $numControlThruster2, $photoURLs, $notes, $avionicsNotes, $createdAt, $createdBy, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(39);
        self::addId($builder, $id);
        self::addIdLaunchVehicle($builder, $idLaunchVehicle);
        self::addIdEngine($builder, $idEngine);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addStageNumber($builder, $stageNumber);
        self::addType($builder, $type);
        self::addManufacturerOrgId($builder, $manufacturerOrgId);
        self::addNumEngines($builder, $numEngines);
        self::addLength($builder, $length);
        self::addDiameter($builder, $diameter);
        self::addMass($builder, $mass);
        self::addVernier($builder, $vernier);
        self::addNumVernier($builder, $numVernier);
        self::addMainEngineThrustSeaLevel($builder, $mainEngineThrustSeaLevel);
        self::addMainEngineThrustVacuum($builder, $mainEngineThrustVacuum);
        self::addThrustSeaLevel($builder, $thrustSeaLevel);
        self::addThrustVacuum($builder, $thrustVacuum);
        self::addBurnTime($builder, $burnTime);
        self::addNumBurns($builder, $numBurns);
        self::addVernierBurnTime($builder, $vernierBurnTime);
        self::addVernierNumBurns($builder, $vernierNumBurns);
        self::addVernierThrustSeaLevel($builder, $vernierThrustSeaLevel);
        self::addVernierThrustVacuum($builder, $vernierThrustVacuum);
        self::addNumStageElements($builder, $numStageElements);
        self::addReusable($builder, $reusable);
        self::addRestartable($builder, $restartable);
        self::addControlThruster1($builder, $controlThruster1);
        self::addNumControlThruster1($builder, $numControlThruster1);
        self::addControlThruster2($builder, $controlThruster2);
        self::addNumControlThruster2($builder, $numControlThruster2);
        self::addPhotoURLs($builder, $photoURLs);
        self::addNotes($builder, $notes);
        self::addAvionicsNotes($builder, $avionicsNotes);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdLaunchVehicle(FlatBufferBuilder $builder, $idLaunchVehicle)
    {
        $builder->addOffsetX(1, $idLaunchVehicle, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdEngine(FlatBufferBuilder $builder, $idEngine)
    {
        $builder->addOffsetX(2, $idEngine, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(3, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addStageNumber(FlatBufferBuilder $builder, $stageNumber)
    {
        $builder->addIntX(4, $stageNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(5, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addManufacturerOrgId(FlatBufferBuilder $builder, $manufacturerOrgId)
    {
        $builder->addOffsetX(6, $manufacturerOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumEngines(FlatBufferBuilder $builder, $numEngines)
    {
        $builder->addIntX(7, $numEngines, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLength(FlatBufferBuilder $builder, $length)
    {
        $builder->addDoubleX(8, $length, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDiameter(FlatBufferBuilder $builder, $diameter)
    {
        $builder->addDoubleX(9, $diameter, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMass(FlatBufferBuilder $builder, $mass)
    {
        $builder->addDoubleX(10, $mass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVernier(FlatBufferBuilder $builder, $vernier)
    {
        $builder->addOffsetX(11, $vernier, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumVernier(FlatBufferBuilder $builder, $numVernier)
    {
        $builder->addIntX(12, $numVernier, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMainEngineThrustSeaLevel(FlatBufferBuilder $builder, $mainEngineThrustSeaLevel)
    {
        $builder->addDoubleX(13, $mainEngineThrustSeaLevel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMainEngineThrustVacuum(FlatBufferBuilder $builder, $mainEngineThrustVacuum)
    {
        $builder->addDoubleX(14, $mainEngineThrustVacuum, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addThrustSeaLevel(FlatBufferBuilder $builder, $thrustSeaLevel)
    {
        $builder->addDoubleX(15, $thrustSeaLevel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addThrustVacuum(FlatBufferBuilder $builder, $thrustVacuum)
    {
        $builder->addDoubleX(16, $thrustVacuum, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBurnTime(FlatBufferBuilder $builder, $burnTime)
    {
        $builder->addDoubleX(17, $burnTime, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumBurns(FlatBufferBuilder $builder, $numBurns)
    {
        $builder->addIntX(18, $numBurns, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVernierBurnTime(FlatBufferBuilder $builder, $vernierBurnTime)
    {
        $builder->addDoubleX(19, $vernierBurnTime, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addVernierNumBurns(FlatBufferBuilder $builder, $vernierNumBurns)
    {
        $builder->addIntX(20, $vernierNumBurns, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVernierThrustSeaLevel(FlatBufferBuilder $builder, $vernierThrustSeaLevel)
    {
        $builder->addDoubleX(21, $vernierThrustSeaLevel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVernierThrustVacuum(FlatBufferBuilder $builder, $vernierThrustVacuum)
    {
        $builder->addDoubleX(22, $vernierThrustVacuum, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumStageElements(FlatBufferBuilder $builder, $numStageElements)
    {
        $builder->addIntX(23, $numStageElements, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addReusable(FlatBufferBuilder $builder, $reusable)
    {
        $builder->addBoolX(24, $reusable, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addRestartable(FlatBufferBuilder $builder, $restartable)
    {
        $builder->addBoolX(25, $restartable, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addControlThruster1(FlatBufferBuilder $builder, $controlThruster1)
    {
        $builder->addOffsetX(26, $controlThruster1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumControlThruster1(FlatBufferBuilder $builder, $numControlThruster1)
    {
        $builder->addIntX(27, $numControlThruster1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addControlThruster2(FlatBufferBuilder $builder, $controlThruster2)
    {
        $builder->addOffsetX(28, $controlThruster2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumControlThruster2(FlatBufferBuilder $builder, $numControlThruster2)
    {
        $builder->addIntX(29, $numControlThruster2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPhotoURLs(FlatBufferBuilder $builder, $photoURLs)
    {
        $builder->addOffsetX(30, $photoURLs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createPhotoURLsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startPhotoURLsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNotes(FlatBufferBuilder $builder, $notes)
    {
        $builder->addOffsetX(31, $notes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAvionicsNotes(FlatBufferBuilder $builder, $avionicsNotes)
    {
        $builder->addOffsetX(32, $avionicsNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(33, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(34, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(35, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(36, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(37, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(38, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endStage_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishStage_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "STAG");
    }
}
