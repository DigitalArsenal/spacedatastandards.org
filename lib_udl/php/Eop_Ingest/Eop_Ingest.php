<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of Earth Orientation Parameters (EOP) produced by the IERS (International Earth Rotation and Reference Systems Service). Earth Orientation Parameters describe the irregularities of the earth's rotation. Technically, they are the parameters which provide the rotation of the ITRS (International Terrestrial Reference System) to the ICRS (International Celestial Reference System) as a function of time.
/// Universal time -- Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
/// Coordinates of the pole -- x and y are the coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS Reference Pole. The CEP differs from the instantaneous rotation axis by quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the direction 90 degrees West longitude.
/// Celestial pole offsets -- Celestial pole offsets are described in the IAU Precession and Nutation models. The observed differences with respect to the conventional celestial pole position defined by the models are monitored and reported by the IERS.
/// IERS Bulletins A and B provide current information on the Earth's orientation in the IERS Reference System.  This includes Universal Time, coordinates of the terrestrial pole, and celestial pole offsets.  Bulletin A gives an advanced solution updated weekly; the standard solution is given monthly in Bulletin B. Fields suffixed with 'B' are Bulletin B values. All solutions are continuous within their respective uncertainties.  Bulletin A is issued by the IERS Rapid Service/Prediction Centre at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports the latest determinations for polar motion, UT1-UTC, and nutation offsets at daily intervals based on a combination of contributed analysis results using data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging (LLR). Predictions for variations a year into the future are also provided. Meteorological predictions of variations in Atmospheric Angular Momentum (AAM) are used to aid in the prediction of near-term UT1-UTC changes. This publication is prepared by the IERS Rapid Service/Prediction Center.
class Eop_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Eop_Ingest
     */
    public static function getRootAsEop_Ingest(ByteBuffer $bb)
    {
        $obj = new Eop_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Eop_IngestIdentifier()
    {
        return "EOPI";
    }

    public static function Eop_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Eop_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Eop_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: EOP-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Effective date/time for the EOP values in ISO8601 UTC format.  The values could be current or predicted.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getEopDate()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating Issued (I), or Predicted (P) for this record's polar motion values.
    /// Example: /// Example: I
    /// Constraints: Minimum length = 0, Maximum length = 1
    /**
     * @return sbyte
     */
    public function getPolarMotionState()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Eop_Ingest_polarMotionState_Enum::I;
    }

    /// The Bulletin A X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
    /// Example: /// Example: 0.182987
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPolarMotionX()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Estimated uncertainty/error in polarMotionX value in arc seconds.
    /// Example: /// Example: 0.000672
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPolarMotionXUnc()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Bulletin A Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
    /// Example: /// Example: 0.168775
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPolarMotionY()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Estimated uncertainty/error in polarMotionY value in arc seconds.
    /// Example: /// Example: 0.000345
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPolarMotionYUnc()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Flag indicating Issued (I), or Predicted (P) for this record''s Bulletin A UT1-UTC values.
    /// Example: /// Example: I
    /// Constraints: Minimum length = 0, Maximum length = 1
    /**
     * @return sbyte
     */
    public function getUt1UTCState()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Eop_Ingest_ut1UTCState_Enum::I;
    }

    /// The difference between the Bulletin A UT1 and UTC time scales as of eopDate in seconds.
    /// Example: /// Example: -0.1251659
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getUt1UTC()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The estimated uncertainty/error in the ut1UTC value in seconds.
    /// Example: /// Example: 2.07e-05
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getUt1UTCUnc()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Bulletin A length of day or LOD in milliseconds. Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
    /// Example: /// Example: 1.8335
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLod()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The estimated uncertainty/error in the lod value in seconds.
    /// Example: /// Example: 0.0201
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLodUnc()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Flag indicating Issued (I), or Predicted (P) for this record's nutation values (dPSI and dEpsilon).
    /// Example: /// Example: I
    /// Constraints: Minimum length = 0, Maximum length = 1
    /**
     * @return sbyte
     */
    public function getNutationState()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Eop_Ingest_nutationState_Enum::I;
    }

    /// The Bulletin A offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSI is not used when this record represents IAU 2000 data.
    /// Example: /// Example: -10.437
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDPSI()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The estimated uncertainty/error in the dPSI value in milliseconds of arc.
    /// Example: /// Example: 0.507
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDPSIUnc()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Bulletin A offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilon is not used when this record represents IAU 2000 data.
    /// Example: /// Example: -0.917
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDEpsilon()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The estimated uncertainty/error in the dEpsilon value in milliseconds of arc.
    /// Example: /// Example: 0.165
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDEpsilonUnc()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Bulletin A celestial pole offset along x-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dX is not used when this record represents IAU 1980 data.
    /// Example: /// Example: -0.086
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDX()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The estimated uncertainty/error in the Bulletin A dX value, in milliseconds of arc.
    /// Example: /// Example: 0.202
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDXUnc()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Bulletin A celestial pole offset along y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dY is not used when this record represents IAU 1980 data.
    /// Example: /// Example: 0.13
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDY()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The estimated uncertainty/error in the Bulletin A dY value, in milliseconds of arc.
    /// Example: /// Example: 0.165
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDYUnc()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Bulletin B X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
    /// Example: /// Example: 0.1824
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPolarMotionXB()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Bulletin B Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
    /// Example: /// Example: 0.1679
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPolarMotionYB()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Bulletin B difference between the UT1 and UTC time scales as of eopDate in seconds.
    /// Example: /// Example: -0.1253
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getUt1UTCB()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Bulletin B offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSIB is not used when this record represents IAU 2000 data.
    /// Example: /// Example: -9.9
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDPSIB()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Bulletin B offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilonB is not used when this record represents IAU 2000 data.
    /// Example: /// Example: -1.7
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDEpsilonB()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Bulletin B celestial pole offset along the X-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dXB is not used when this record represents IAU 1980 data.
    /// Example: /// Example: 0.129
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDXB()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Bulletin B celestial pole offset along the Y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dYB is not used when this record represents IAU 1980 data.
    /// Example: /// Example: -0.653
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDYB()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The IAU Theory of Precession and Theory of Nutation applied to the data in this record. IAU1980 records employ the IAU 1976 Theory of Precession and IAU 1980 Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory of Precession and Nutation.
    /// Example: /// Example: IAU1980
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getPrecessionNutationStd()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: Example URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getRawFileURI()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Eop_Ingest_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEop_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(37);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Eop_Ingest
     */
    public static function createEop_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $eopDate, $polarMotionState, $polarMotionX, $polarMotionXUnc, $polarMotionY, $polarMotionYUnc, $ut1UTCState, $ut1UTC, $ut1UTCUnc, $lod, $lodUnc, $nutationState, $dPSI, $dPSIUnc, $dEpsilon, $dEpsilonUnc, $dX, $dXUnc, $dY, $dYUnc, $polarMotionXB, $polarMotionYB, $ut1UTCB, $dPSIB, $dEpsilonB, $dXB, $dYB, $precessionNutationStd, $rawFileURI, $source, $origin, $dataMode, $createdAt, $createdBy, $origNetwork)
    {
        $builder->startObject(37);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addEopDate($builder, $eopDate);
        self::addPolarMotionState($builder, $polarMotionState);
        self::addPolarMotionX($builder, $polarMotionX);
        self::addPolarMotionXUnc($builder, $polarMotionXUnc);
        self::addPolarMotionY($builder, $polarMotionY);
        self::addPolarMotionYUnc($builder, $polarMotionYUnc);
        self::addUt1UTCState($builder, $ut1UTCState);
        self::addUt1UTC($builder, $ut1UTC);
        self::addUt1UTCUnc($builder, $ut1UTCUnc);
        self::addLod($builder, $lod);
        self::addLodUnc($builder, $lodUnc);
        self::addNutationState($builder, $nutationState);
        self::addDPSI($builder, $dPSI);
        self::addDPSIUnc($builder, $dPSIUnc);
        self::addDEpsilon($builder, $dEpsilon);
        self::addDEpsilonUnc($builder, $dEpsilonUnc);
        self::addDX($builder, $dX);
        self::addDXUnc($builder, $dXUnc);
        self::addDY($builder, $dY);
        self::addDYUnc($builder, $dYUnc);
        self::addPolarMotionXB($builder, $polarMotionXB);
        self::addPolarMotionYB($builder, $polarMotionYB);
        self::addUt1UTCB($builder, $ut1UTCB);
        self::addDPSIB($builder, $dPSIB);
        self::addDEpsilonB($builder, $dEpsilonB);
        self::addDXB($builder, $dXB);
        self::addDYB($builder, $dYB);
        self::addPrecessionNutationStd($builder, $precessionNutationStd);
        self::addRawFileURI($builder, $rawFileURI);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEopDate(FlatBufferBuilder $builder, $eopDate)
    {
        $builder->addOffsetX(2, $eopDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addPolarMotionState(FlatBufferBuilder $builder, $polarMotionState)
    {
        $builder->addSbyteX(3, $polarMotionState, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPolarMotionX(FlatBufferBuilder $builder, $polarMotionX)
    {
        $builder->addDoubleX(4, $polarMotionX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPolarMotionXUnc(FlatBufferBuilder $builder, $polarMotionXUnc)
    {
        $builder->addDoubleX(5, $polarMotionXUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPolarMotionY(FlatBufferBuilder $builder, $polarMotionY)
    {
        $builder->addDoubleX(6, $polarMotionY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPolarMotionYUnc(FlatBufferBuilder $builder, $polarMotionYUnc)
    {
        $builder->addDoubleX(7, $polarMotionYUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addUt1UTCState(FlatBufferBuilder $builder, $ut1UTCState)
    {
        $builder->addSbyteX(8, $ut1UTCState, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUt1UTC(FlatBufferBuilder $builder, $ut1UTC)
    {
        $builder->addDoubleX(9, $ut1UTC, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUt1UTCUnc(FlatBufferBuilder $builder, $ut1UTCUnc)
    {
        $builder->addDoubleX(10, $ut1UTCUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLod(FlatBufferBuilder $builder, $lod)
    {
        $builder->addDoubleX(11, $lod, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLodUnc(FlatBufferBuilder $builder, $lodUnc)
    {
        $builder->addDoubleX(12, $lodUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addNutationState(FlatBufferBuilder $builder, $nutationState)
    {
        $builder->addSbyteX(13, $nutationState, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDPSI(FlatBufferBuilder $builder, $dPSI)
    {
        $builder->addDoubleX(14, $dPSI, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDPSIUnc(FlatBufferBuilder $builder, $dPSIUnc)
    {
        $builder->addDoubleX(15, $dPSIUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDEpsilon(FlatBufferBuilder $builder, $dEpsilon)
    {
        $builder->addDoubleX(16, $dEpsilon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDEpsilonUnc(FlatBufferBuilder $builder, $dEpsilonUnc)
    {
        $builder->addDoubleX(17, $dEpsilonUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDX(FlatBufferBuilder $builder, $dX)
    {
        $builder->addDoubleX(18, $dX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDXUnc(FlatBufferBuilder $builder, $dXUnc)
    {
        $builder->addDoubleX(19, $dXUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDY(FlatBufferBuilder $builder, $dY)
    {
        $builder->addDoubleX(20, $dY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDYUnc(FlatBufferBuilder $builder, $dYUnc)
    {
        $builder->addDoubleX(21, $dYUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPolarMotionXB(FlatBufferBuilder $builder, $polarMotionXB)
    {
        $builder->addDoubleX(22, $polarMotionXB, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPolarMotionYB(FlatBufferBuilder $builder, $polarMotionYB)
    {
        $builder->addDoubleX(23, $polarMotionYB, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUt1UTCB(FlatBufferBuilder $builder, $ut1UTCB)
    {
        $builder->addDoubleX(24, $ut1UTCB, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDPSIB(FlatBufferBuilder $builder, $dPSIB)
    {
        $builder->addDoubleX(25, $dPSIB, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDEpsilonB(FlatBufferBuilder $builder, $dEpsilonB)
    {
        $builder->addDoubleX(26, $dEpsilonB, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDXB(FlatBufferBuilder $builder, $dXB)
    {
        $builder->addDoubleX(27, $dXB, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDYB(FlatBufferBuilder $builder, $dYB)
    {
        $builder->addDoubleX(28, $dYB, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPrecessionNutationStd(FlatBufferBuilder $builder, $precessionNutationStd)
    {
        $builder->addOffsetX(29, $precessionNutationStd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRawFileURI(FlatBufferBuilder $builder, $rawFileURI)
    {
        $builder->addOffsetX(30, $rawFileURI, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(31, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(32, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(33, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(34, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(35, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(36, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEop_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEop_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "EOPI");
    }
}
