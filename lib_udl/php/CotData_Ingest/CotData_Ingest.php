<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Schema for the CotData to post.
class CotData_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return CotData_Ingest
     */
    public static function getRootAsCotData_Ingest(ByteBuffer $bb)
    {
        $obj = new CotData_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function CotData_IngestIdentifier()
    {
        return "COTD";
    }

    public static function CotData_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::CotData_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return CotData_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Identifier of the sender of the cot message which should remain the same on subsequent POI records of the same point of interest.
    /// Example: /// Example: POI-ID
    /// Constraints: No constraints specified.
    public function getSenderUid()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// How the event point was generated, in CoT object heirarchy notation (optional, CoT).
    /// Example: /// Example: h-e
    /// Constraints: No constraints specified.
    public function getHow()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCe()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Height above lat/lon point, in meters (1-sigma, if representing linear error).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLe()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Stale timestamp (optional), in ISO8601 UTC format.
    /// Example: /// Example: 2020-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getStale()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Start time of event validity (optional), in ISO8601 UTC format.
    /// Example: /// Example: 2020-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getStart()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLat()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLon()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Event type, in CoT object heirarchy notation (optional, CoT).
    /// Example: /// Example: a-h-G
    /// Constraints: No constraints specified.
    public function getType()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Point height above ellipsoid (WGS-84), in meters.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAlt()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getCotPositionData()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getCotChatData()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional list of call signs to send message to directly.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCallSigns($j)
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCallSignsLength()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Optional list of TAK user ids to send message to directly.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getUids($j)
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getUidsLength()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Optional set of groups to send message to specifically.  If not specified, the message will be sent to the default _ANON_ group.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getGroups($j)
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getGroupsLength()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startCotData_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(15);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return CotData_Ingest
     */
    public static function createCotData_Ingest(FlatBufferBuilder $builder, $senderUid, $how, $ce, $le, $stale, $start, $lat, $lon, $type, $alt, $cotPositionData, $cotChatData, $callSigns, $uids, $groups)
    {
        $builder->startObject(15);
        self::addSenderUid($builder, $senderUid);
        self::addHow($builder, $how);
        self::addCe($builder, $ce);
        self::addLe($builder, $le);
        self::addStale($builder, $stale);
        self::addStart($builder, $start);
        self::addLat($builder, $lat);
        self::addLon($builder, $lon);
        self::addType($builder, $type);
        self::addAlt($builder, $alt);
        self::addCotPositionData($builder, $cotPositionData);
        self::addCotChatData($builder, $cotChatData);
        self::addCallSigns($builder, $callSigns);
        self::addUids($builder, $uids);
        self::addGroups($builder, $groups);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSenderUid(FlatBufferBuilder $builder, $senderUid)
    {
        $builder->addOffsetX(0, $senderUid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHow(FlatBufferBuilder $builder, $how)
    {
        $builder->addOffsetX(1, $how, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCe(FlatBufferBuilder $builder, $ce)
    {
        $builder->addDoubleX(2, $ce, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLe(FlatBufferBuilder $builder, $le)
    {
        $builder->addDoubleX(3, $le, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStale(FlatBufferBuilder $builder, $stale)
    {
        $builder->addOffsetX(4, $stale, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStart(FlatBufferBuilder $builder, $start)
    {
        $builder->addOffsetX(5, $start, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLat(FlatBufferBuilder $builder, $lat)
    {
        $builder->addDoubleX(6, $lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLon(FlatBufferBuilder $builder, $lon)
    {
        $builder->addDoubleX(7, $lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(8, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAlt(FlatBufferBuilder $builder, $alt)
    {
        $builder->addDoubleX(9, $alt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCotPositionData(FlatBufferBuilder $builder, $cotPositionData)
    {
        $builder->addOffsetX(10, $cotPositionData, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCotChatData(FlatBufferBuilder $builder, $cotChatData)
    {
        $builder->addOffsetX(11, $cotChatData, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCallSigns(FlatBufferBuilder $builder, $callSigns)
    {
        $builder->addOffsetX(12, $callSigns, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCallSignsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCallSignsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addUids(FlatBufferBuilder $builder, $uids)
    {
        $builder->addOffsetX(13, $uids, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createUidsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startUidsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addGroups(FlatBufferBuilder $builder, $groups)
    {
        $builder->addOffsetX(14, $groups, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createGroupsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startGroupsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endCotData_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishCotData_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "COTD");
    }
}
