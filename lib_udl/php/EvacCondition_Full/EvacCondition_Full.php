<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// The group path from transmitter to receiver.
class EvacCondition_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EvacCondition_Full
     */
    public static function getRootAsEvacCondition_Full(ByteBuffer $bb)
    {
        $obj = new EvacCondition_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EvacCondition_FullIdentifier()
    {
        return "EVAC";
    }

    public static function EvacCondition_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EvacCondition_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EvacCondition_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Health condition assessment.  Intended as, but not constrained to, K07.1 Condition Type Enumeration (e.g. ACTIVITY HIGH, ACTIVITY LOW, ACTIVITY MEDIUM, ACTIVITY NONE, AVPU ALERT, AVPU ALTERED MENTAL STATE, AVPU PAIN, AVPU UNRESPONSIVE, etc.).
    /// Example: /// Example: ACTIVITY LOW
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getType()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Body part location or body part referenced in condition.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
    /// Example: /// Example: ANKLE LEFT FRONT
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getBodyPart()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Datetime of the condition diagnosis in ISO 8601 UTC datetime format.
    /// Example: /// Example: 2021-10-15T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getTime()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional comments on the patient's condition.
    /// Example: /// Example: Comments on the patient's condition.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getComments()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEvacCondition_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EvacCondition_Full
     */
    public static function createEvacCondition_Full(FlatBufferBuilder $builder, $type, $bodyPart, $time, $comments)
    {
        $builder->startObject(4);
        self::addType($builder, $type);
        self::addBodyPart($builder, $bodyPart);
        self::addTime($builder, $time);
        self::addComments($builder, $comments);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(0, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBodyPart(FlatBufferBuilder $builder, $bodyPart)
    {
        $builder->addOffsetX(1, $bodyPart, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTime(FlatBufferBuilder $builder, $time)
    {
        $builder->addOffsetX(2, $time, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addComments(FlatBufferBuilder $builder, $comments)
    {
        $builder->addOffsetX(3, $comments, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEvacCondition_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEvacCondition_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "EVAC");
    }
}
