<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace SeradataEarlyWarning_Ingest;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Details for an early warning payload from  Seradata.
class SeradataEarlyWarning_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return SeradataEarlyWarning_Ingest
     */
    public static function getRootAsSeradataEarlyWarning_Ingest(ByteBuffer $bb)
    {
        $obj = new SeradataEarlyWarning_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return SeradataEarlyWarning_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: SERADATAEARLYWARNING-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// UUID of the parent IR record.
    /// Example: idIR
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdIR()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    /// Example: spacecraftId
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSpacecraftId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Hosted for company/Organization Id.
    /// Example: hostedForCompanyOrgId
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getHostedForCompanyOrgId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Manufacturer Organization Id.
    /// Example: manufacturerOrgId
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getManufacturerOrgId()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Sensor name from Seradata, e.g. Infra red telescope, Schmidt Telescope, etc.
    /// Example: Infra red telescope
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getName()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spectral Bands, e.g. Infra-Red.
    /// Example: Infra-Red
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getSpectralBands()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Frequency Limits for this IR.
    /// Example: frequencyLimits
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getFrequencyLimits()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Best resolution for this IR in meters.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBestResolution()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Ground Station info for this IR.
    /// Example: groundStations
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getGroundStations()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Ground Station Locations for this IR.
    /// Example: groundStationLocations
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getGroundStationLocations()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Missile Launch Phase Detection Ability.
    /// Example: missileLaunchPhaseDetectionAbility
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getMissileLaunchPhaseDetectionAbility()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Is the sensor Earth Pointing.
    /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getEarthPointing()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    /// Example: partnerSpacecraftId
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPartnerSpacecraftId()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Payload notes.
    /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    public function getPayloadNotes()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SeradataEarlyWarning_Ingest_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSeradataEarlyWarning_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(22);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return SeradataEarlyWarning_Ingest
     */
    public static function createSeradataEarlyWarning_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $idIR, $spacecraftId, $hostedForCompanyOrgId, $manufacturerOrgId, $name, $spectralBands, $frequencyLimits, $bestResolution, $groundStations, $groundStationLocations, $missileLaunchPhaseDetectionAbility, $earthPointing, $partnerSpacecraftId, $payloadNotes, $createdAt, $createdBy, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(22);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdIR($builder, $idIR);
        self::addSpacecraftId($builder, $spacecraftId);
        self::addHostedForCompanyOrgId($builder, $hostedForCompanyOrgId);
        self::addManufacturerOrgId($builder, $manufacturerOrgId);
        self::addName($builder, $name);
        self::addSpectralBands($builder, $spectralBands);
        self::addFrequencyLimits($builder, $frequencyLimits);
        self::addBestResolution($builder, $bestResolution);
        self::addGroundStations($builder, $groundStations);
        self::addGroundStationLocations($builder, $groundStationLocations);
        self::addMissileLaunchPhaseDetectionAbility($builder, $missileLaunchPhaseDetectionAbility);
        self::addEarthPointing($builder, $earthPointing);
        self::addPartnerSpacecraftId($builder, $partnerSpacecraftId);
        self::addPayloadNotes($builder, $payloadNotes);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdIR(FlatBufferBuilder $builder, $idIR)
    {
        $builder->addOffsetX(2, $idIR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSpacecraftId(FlatBufferBuilder $builder, $spacecraftId)
    {
        $builder->addOffsetX(3, $spacecraftId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHostedForCompanyOrgId(FlatBufferBuilder $builder, $hostedForCompanyOrgId)
    {
        $builder->addOffsetX(4, $hostedForCompanyOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addManufacturerOrgId(FlatBufferBuilder $builder, $manufacturerOrgId)
    {
        $builder->addOffsetX(5, $manufacturerOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(6, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSpectralBands(FlatBufferBuilder $builder, $spectralBands)
    {
        $builder->addOffsetX(7, $spectralBands, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFrequencyLimits(FlatBufferBuilder $builder, $frequencyLimits)
    {
        $builder->addOffsetX(8, $frequencyLimits, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBestResolution(FlatBufferBuilder $builder, $bestResolution)
    {
        $builder->addDoubleX(9, $bestResolution, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGroundStations(FlatBufferBuilder $builder, $groundStations)
    {
        $builder->addOffsetX(10, $groundStations, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGroundStationLocations(FlatBufferBuilder $builder, $groundStationLocations)
    {
        $builder->addOffsetX(11, $groundStationLocations, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissileLaunchPhaseDetectionAbility(FlatBufferBuilder $builder, $missileLaunchPhaseDetectionAbility)
    {
        $builder->addOffsetX(12, $missileLaunchPhaseDetectionAbility, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addEarthPointing(FlatBufferBuilder $builder, $earthPointing)
    {
        $builder->addBoolX(13, $earthPointing, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPartnerSpacecraftId(FlatBufferBuilder $builder, $partnerSpacecraftId)
    {
        $builder->addOffsetX(14, $partnerSpacecraftId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPayloadNotes(FlatBufferBuilder $builder, $payloadNotes)
    {
        $builder->addOffsetX(15, $payloadNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(16, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(17, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(18, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(19, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(20, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(21, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSeradataEarlyWarning_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
