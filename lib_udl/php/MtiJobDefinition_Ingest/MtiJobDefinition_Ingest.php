<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// The means for the platform to pass information pertaining to the sensor job that will be performed and details of the location parameters (terrain elevation model and geoid model) used in the measurement.
class MtiJobDefinition_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return MtiJobDefinition_Ingest
     */
    public static function getRootAsMtiJobDefinition_Ingest(ByteBuffer $bb)
    {
        $obj = new MtiJobDefinition_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function MtiJobDefinition_IngestIdentifier()
    {
        return "MTIJ";
    }

    public static function MtiJobDefinition_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::MtiJobDefinition_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return MtiJobDefinition_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// A platform assigned number identifying the specific request or task to which the specific dwell pertains.
    /// Example: /// Example: 1234567890
    /// Constraints: No constraints specified.
    /**
     * @return long
     */
    public function getJ1()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /// The type of sensor or the platform.
    /// Example: /// Example: TYPE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getJ2()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the particular variant of the sensor type.
    /// Example: /// Example: J3-ID
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getJ3()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag field indicating whether filtering has been applied to the targets detected within the dwell area.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getJ4()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Priority of this tasking request relative to all other active tasking requests scheduled for execution on the specified platform.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getJ5()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// North-South position of the first corner (Point A) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getJ6()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    ///  East-West position of the first corner (Point A) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getJ7()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    ///  North-South position of the second corner (Point B) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getJ8()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// East-West position of the second corner (Point B) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getJ9()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// North-South position of the third corner (Point C) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getJ10()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// East-West position of the third corner (Point C) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getJ11()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// North-South position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getJ12()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// East-West position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getJ13()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Mode in which the radar will operate for the given job ID.
    /// Example: /// Example: MODE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getJ14()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The nominal revisit interval for the job ID, expressed in deciseconds.  Value of zero, indicates that the sensor is not revisiting the previous area.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getJ15()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Nominal estimate of the standard deviation in the estimated horizontal (along track) sensor location, expressed in decimeters.   measured along the sensor track direction defined in the Dwell segment.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getJ16()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Nominal estimate of the standard deviation in the estimated horizontal sensor location, measured orthogonal to the track direction, expressed in decimeters.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getJ17()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Nominal estimate of the standard deviation of the measured sensor altitude, expressed in decimeters.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getJ18()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Standard deviation of the estimate of sensor track heading, expressed in degrees.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getJ19()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Nominal standard deviation of the estimate of sensor speed, expressed in millimeters per second.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getJ20()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Nominal standard deviation of the slant range of the reported detection, expressed in centimeters.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getJ21()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Nominal standard deviation of the measured cross angle to the reported detection, expressed in degrees.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getJ22()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Nominal standard deviation of the velocity line-of-sight component, expressed in centimeters per second.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getJ23()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Nominal minimum velocity component along the line of sight, which can be detected by the sensor, expressed in decimeters per second.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getJ24()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Nominal probability that an unobscured ten square-meter target will be detected within the given area of surveillance.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getJ25()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The expected density of False Alarms (FA), expressed as the negative of the decibel value.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getJ26()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The terrain elevation model used for developing the target reports.
    /// Example: /// Example: MODEL
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getJ27()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The geoid model used for developing the target reports.
    /// Example: /// Example: MODEL
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getJ28()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startMtiJobDefinition_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(28);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return MtiJobDefinition_Ingest
     */
    public static function createMtiJobDefinition_Ingest(FlatBufferBuilder $builder, $j1, $j2, $j3, $j4, $j5, $j6, $j7, $j8, $j9, $j10, $j11, $j12, $j13, $j14, $j15, $j16, $j17, $j18, $j19, $j20, $j21, $j22, $j23, $j24, $j25, $j26, $j27, $j28)
    {
        $builder->startObject(28);
        self::addJ1($builder, $j1);
        self::addJ2($builder, $j2);
        self::addJ3($builder, $j3);
        self::addJ4($builder, $j4);
        self::addJ5($builder, $j5);
        self::addJ6($builder, $j6);
        self::addJ7($builder, $j7);
        self::addJ8($builder, $j8);
        self::addJ9($builder, $j9);
        self::addJ10($builder, $j10);
        self::addJ11($builder, $j11);
        self::addJ12($builder, $j12);
        self::addJ13($builder, $j13);
        self::addJ14($builder, $j14);
        self::addJ15($builder, $j15);
        self::addJ16($builder, $j16);
        self::addJ17($builder, $j17);
        self::addJ18($builder, $j18);
        self::addJ19($builder, $j19);
        self::addJ20($builder, $j20);
        self::addJ21($builder, $j21);
        self::addJ22($builder, $j22);
        self::addJ23($builder, $j23);
        self::addJ24($builder, $j24);
        self::addJ25($builder, $j25);
        self::addJ26($builder, $j26);
        self::addJ27($builder, $j27);
        self::addJ28($builder, $j28);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addJ1(FlatBufferBuilder $builder, $j1)
    {
        $builder->addLongX(0, $j1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJ2(FlatBufferBuilder $builder, $j2)
    {
        $builder->addOffsetX(1, $j2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJ3(FlatBufferBuilder $builder, $j3)
    {
        $builder->addOffsetX(2, $j3, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addJ4(FlatBufferBuilder $builder, $j4)
    {
        $builder->addIntX(3, $j4, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addJ5(FlatBufferBuilder $builder, $j5)
    {
        $builder->addIntX(4, $j5, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addJ6(FlatBufferBuilder $builder, $j6)
    {
        $builder->addDoubleX(5, $j6, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addJ7(FlatBufferBuilder $builder, $j7)
    {
        $builder->addDoubleX(6, $j7, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addJ8(FlatBufferBuilder $builder, $j8)
    {
        $builder->addDoubleX(7, $j8, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addJ9(FlatBufferBuilder $builder, $j9)
    {
        $builder->addDoubleX(8, $j9, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addJ10(FlatBufferBuilder $builder, $j10)
    {
        $builder->addDoubleX(9, $j10, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addJ11(FlatBufferBuilder $builder, $j11)
    {
        $builder->addDoubleX(10, $j11, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addJ12(FlatBufferBuilder $builder, $j12)
    {
        $builder->addDoubleX(11, $j12, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addJ13(FlatBufferBuilder $builder, $j13)
    {
        $builder->addDoubleX(12, $j13, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJ14(FlatBufferBuilder $builder, $j14)
    {
        $builder->addOffsetX(13, $j14, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addJ15(FlatBufferBuilder $builder, $j15)
    {
        $builder->addIntX(14, $j15, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addJ16(FlatBufferBuilder $builder, $j16)
    {
        $builder->addIntX(15, $j16, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addJ17(FlatBufferBuilder $builder, $j17)
    {
        $builder->addIntX(16, $j17, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addJ18(FlatBufferBuilder $builder, $j18)
    {
        $builder->addIntX(17, $j18, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addJ19(FlatBufferBuilder $builder, $j19)
    {
        $builder->addIntX(18, $j19, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addJ20(FlatBufferBuilder $builder, $j20)
    {
        $builder->addIntX(19, $j20, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addJ21(FlatBufferBuilder $builder, $j21)
    {
        $builder->addIntX(20, $j21, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addJ22(FlatBufferBuilder $builder, $j22)
    {
        $builder->addDoubleX(21, $j22, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addJ23(FlatBufferBuilder $builder, $j23)
    {
        $builder->addIntX(22, $j23, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addJ24(FlatBufferBuilder $builder, $j24)
    {
        $builder->addIntX(23, $j24, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addJ25(FlatBufferBuilder $builder, $j25)
    {
        $builder->addIntX(24, $j25, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addJ26(FlatBufferBuilder $builder, $j26)
    {
        $builder->addIntX(25, $j26, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJ27(FlatBufferBuilder $builder, $j27)
    {
        $builder->addOffsetX(26, $j27, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJ28(FlatBufferBuilder $builder, $j28)
    {
        $builder->addOffsetX(27, $j28, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endMtiJobDefinition_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishMtiJobDefinition_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "MTIJ");
    }
}
