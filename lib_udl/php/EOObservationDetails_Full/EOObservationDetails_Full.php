<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of additional detailed observation data for electro-optical based sensor phenomenologies.
class EOObservationDetails_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EOObservationDetails_Full
     */
    public static function getRootAsEOObservationDetails_Full(ByteBuffer $bb)
    {
        $obj = new EOObservationDetails_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EOObservationDetails_FullIdentifier()
    {
        return "EOOB";
    }

    public static function EOObservationDetails_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EOObservationDetails_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EOObservationDetails_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the parent EOObservation.
    /// Example: /// Example: EOOBSERVATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdEOObservation()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format, will be set to EOObservation classificationMarking if blank.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Ob detection time in ISO 8601 UTC with microsecond precision, will be set to EOObservation obTime if blank.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getObTime()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPredictedRa()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPredictedDeclination()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Predicted Azimuth angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPredictedAzimuth()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Predicted elevation angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPredictedElevation()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Azimuth angle of the sun from a ground-based telescope (no atmospheric refraction correction required) the observer with aberration due to the observer velocity and light travel time applied.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSunAzimuth()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Elevation angle of the sun from a ground-based telescope (no atmospheric refraction correction required).
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSunElevation()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The value is the number of spectral filters used.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumSpectralFilters()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
    /// Example: /// Example: ['Keyword1', 'Keyword2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSpectralFilters($j)
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSpectralFiltersLength()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// This is the in-band average irradiance of a 0th mag source. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = W/m2/nm.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSpectralZMFL($j)
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSpectralZMFLLength()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = mag.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSpectralFilterSolarMag($j)
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSpectralFilterSolarMagLength()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// This is the value for the zero-point calculated for each filter denoted in spectralFilters. It is the difference between the catalog mag and instrumental mag for a set of standard stars. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getZeroPoints($j)
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getZeroPointsLength()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// This is the uncertainty in the zero point for the filter denoted in spectralFilters. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getZeroPointsUnc($j)
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getZeroPointsUncLength()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The extinction coefficient computed for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. Units = mag/airmass.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getExtinctionCoeffs($j)
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getExtinctionCoeffsLength()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// This is the uncertainty in the extinction coefficient for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. -9999 for space-based sensors. Units = mag/airmass.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getExtinctionCoeffsUnc($j)
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getExtinctionCoeffsUncLength()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Color coefficient for filter n for a space-based sensor where there is no atmospheric extinction. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getColorCoeffs($j)
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getColorCoeffsLength()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The value is the number of neutral density filters used.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumNeutralDensityFilters()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
    /// Example: /// Example: ['numNeutralDensityFilters1', 'numNeutralDensityFilters2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getNeutralDensityFilterNames($j)
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getNeutralDensityFilterNamesLength()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The transmission of the nth neutral density filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getNeutralDensityFilterTransmissions($j)
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getNeutralDensityFilterTransmissionsLength()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// This is the uncertainty in the transmission for the nth filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getNeutralDensityFilterTransmissionsUnc($j)
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getNeutralDensityFilterTransmissionsUncLength()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Some sensors have gain settings. This value is the gain used during the observation in units e-/ADU. If no gain is used, the value = 1.
    /// Example: /// Example: 234.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGain()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor instantaneous field of view (ratio of pixel pitch to focal length).
    /// Example: /// Example: 0.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getIfov()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pixel array size (width) in pixels.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPixelArrayWidth()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Pixel array size (height) in pixels.
    /// Example: /// Example: 23
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPixelArrayHeight()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Minimum valid pixel value, this is typically 0.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPixelMin()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8 = 256. This can represent the saturation value of the detector, but some sensors will saturate at a value significantly lower than full well depth. This is the analog-to-digital conversion (ADC) saturation value.
    /// Example: /// Example: 256
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPixelMax()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is center of pixels along top of image).
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCentroidRow()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Observed centroid column number on the focal plane in pixels (0 is left edge, 0.5 is center of pixels along left of image).
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCentroidColumn()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spatial variance of image distribution in vertical direction measured in pixels squared.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRowVariance()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spatial variance of image distribution in horizontal direction measured in pixels squared.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getColumnVariance()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spatial covariance of image distribution across horizontal and vertical directions measured in pixels squared.
    /// Example: /// Example: 0.01
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRowColCov()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// An array of measurements that correspond to the distance from the streak center measured from the optical image in pixels that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
    /// Example: /// Example: [-127.153, -126.153, -125.153]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDistFromStreakCenter($j)
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDistFromStreakCenterLength()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// An array of surface brightness measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
    /// Example: /// Example: [21.01, 21.382, 21.725]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSurfBrightness($j)
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSurfBrightnessLength()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// An array of surface brightness uncertainty measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
    /// Example: /// Example: [0.165, 0.165, 0.165]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSurfBrightnessUnc($j)
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSurfBrightnessUncLength()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Uncertainty in the times reported in UTC in seconds.
    /// Example: /// Example: 13.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTimesUnc()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Operating temperature of CCD recorded during exposure or measured during calibrations in K.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCcdTemp()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter given in the corresponding spectralFilterNames.
    /// Example: /// Example: 23
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCurrentSpectralFilterNum()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The reference number n, in neutralDensityFilters for the currently used neutral density filter.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCurrentNeutralDensityFilterNum()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The number of pixels binned horizontally.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getBinningHoriz()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The number of pixels binned vertically.
    /// Example: /// Example: 14
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getBinningVert()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of stars used in photometric fit count.
    /// Example: /// Example: 23
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPcalNumStars()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The x centroid position on the CCD of the target object in pixels.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCcdObjPosX()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The y centroid position on the CCD of the target object in pixels.
    /// Example: /// Example: 321.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCcdObjPosY()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// This is the pixel width of the target. This is either a frame-by-frame measurement or a constant point spread function or synthetic aperture used in the extraction.
    /// Example: /// Example: 133.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCcdObjWidth()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// This is the background signal at or in the vicinity of the radiometric source position. Specifically, this is the average background count level (DN/pixel) divided by the exposure time in seconds of the background pixels used in the photometric extraction. DN/pixel/sec.
    /// Example: /// Example: 4134.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBackgroundSignal()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Estimated 1-sigma uncertainty in the background signal at or in the vicinity of the radiometric source position. DN/pixel/sec.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBackgroundSignalUnc()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic aperture containing the target signal.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPeakApertureCount()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peak Background Raw Counts is the largest pixel value used in background signal.
    /// Example: /// Example: 321
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPeakBackgroundCount()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under some algorithms, this can be a constant per target (not per observation). Note: this SNR applies to the total signal of the radiometric source (i.e., Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in the peak pixel (i.e., DN/pixel/sec).
    /// Example: /// Example: 13.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSnrEst()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Instrumental magnitude of a sensor before corrections are applied for atmosphere or to transform to standard magnitude scale.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMagInstrumental()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty in the instrumental magnitude.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMagInstrumentalUnc()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optical Cross Section computed in units m(2)/ster.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOpticalCrossSection()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty in Optical Cross Section computed in units m(2)/ster.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOpticalCrossSectionUnc()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sun state vector in ECI J2000 coordinate frame in km.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSunStatePosX()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sun state vector in ECI J2000 coordinate frame in km.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSunStatePosY()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sun state vector in ECI J2000 coordinate frame in km.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSunStatePosZ()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sun state vector in ECI J2000 coordinate frame in km/sec.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSunStateVelX()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sun state vector in ECI J2000 coordinate frame in km/sec.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSunStateVelY()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sun state vector in ECI J2000 coordinate frame in km/sec.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSunStateVelZ()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Number of catalog stars in the detector field of view (FOV) with the target object. Can be 0 for narrow FOV sensors.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumCatalogStars()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of detected stars in the FOV with the target object. Helps identify frames with clouds.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumDetectedStars()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of correlated stars in the FOV with the target object. Can be 0 for narrow FOV sensors.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumCorrelatedStars()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Uncertainty of predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPredictedRaUnc()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty of Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPredictedDeclinationUnc()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Covariance (x^2) in measured Right Ascension (X) in deg^2.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRaCov()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Covariance (Y^2) in measured declination (Y) in deg^2.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeclinationCov()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Covariance (XY) in measured ra/declination (XY) in deg^2.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRaDeclinationCov()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// World Coordinate System (WCS) X pixel origin in astrometric fit.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAcalCrPixX()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// World Coordinate System (WCS) Y pixel origin in astrometric fit.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAcalCrPixY()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// World Coordinate System (WCS) equatorial coordinate X origin corresponding to CRPIX in astrometric fit in degrees.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAcalCrValX()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// World Coordinate System (WCS) equatorial coordinate Y origin corresponding to CRPIX in astrometric fit in degrees.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAcalCrValY()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Number of stars used in astrometric fit.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAcalNumStars()
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Distance from the target object to the sun during the observation in meters.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getObjSunRange()
    {
        $o = $this->__offset(152);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Solar phase angle bisector vector. The vector that bisects the solar phase angle. The phase angle bisector is the angle that is << of the value in #48. Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at this angle would intersect.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPhaseAngBisect()
    {
        $o = $this->__offset(154);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fraction of the sun that is illuminating the target object. This indicates if the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra and 1 when object is fully illuminated.).
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSolarDiskFrac()
    {
        $o = $this->__offset(156);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Time off element set.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getToes()
    {
        $o = $this->__offset(158);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Degrees Off Element Set.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDoes()
    {
        $o = $this->__offset(160);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Source of the data, will be set to EOObservation source if blank.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(162);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// , will be set to EOObservation dataMode if blank.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(164);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \EOObservationDetails_Full_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(166);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(168);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEOObservationDetails_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(83);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EOObservationDetails_Full
     */
    public static function createEOObservationDetails_Full(FlatBufferBuilder $builder, $idEOObservation, $classificationMarking, $obTime, $predictedRa, $predictedDeclination, $predictedAzimuth, $predictedElevation, $sunAzimuth, $sunElevation, $numSpectralFilters, $spectralFilters, $spectralZMFL, $spectralFilterSolarMag, $zeroPoints, $zeroPointsUnc, $extinctionCoeffs, $extinctionCoeffsUnc, $colorCoeffs, $numNeutralDensityFilters, $neutralDensityFilterNames, $neutralDensityFilterTransmissions, $neutralDensityFilterTransmissionsUnc, $gain, $ifov, $pixelArrayWidth, $pixelArrayHeight, $pixelMin, $pixelMax, $centroidRow, $centroidColumn, $rowVariance, $columnVariance, $rowColCov, $distFromStreakCenter, $surfBrightness, $surfBrightnessUnc, $timesUnc, $ccdTemp, $currentSpectralFilterNum, $currentNeutralDensityFilterNum, $binningHoriz, $binningVert, $pcalNumStars, $ccdObjPosX, $ccdObjPosY, $ccdObjWidth, $backgroundSignal, $backgroundSignalUnc, $peakApertureCount, $peakBackgroundCount, $snrEst, $magInstrumental, $magInstrumentalUnc, $opticalCrossSection, $opticalCrossSectionUnc, $sunStatePosX, $sunStatePosY, $sunStatePosZ, $sunStateVelX, $sunStateVelY, $sunStateVelZ, $numCatalogStars, $numDetectedStars, $numCorrelatedStars, $predictedRaUnc, $predictedDeclinationUnc, $raCov, $declinationCov, $raDeclinationCov, $acalCrPixX, $acalCrPixY, $acalCrValX, $acalCrValY, $acalNumStars, $objSunRange, $phaseAngBisect, $solarDiskFrac, $toes, $does, $source, $dataMode, $createdAt, $createdBy)
    {
        $builder->startObject(83);
        self::addIdEOObservation($builder, $idEOObservation);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addObTime($builder, $obTime);
        self::addPredictedRa($builder, $predictedRa);
        self::addPredictedDeclination($builder, $predictedDeclination);
        self::addPredictedAzimuth($builder, $predictedAzimuth);
        self::addPredictedElevation($builder, $predictedElevation);
        self::addSunAzimuth($builder, $sunAzimuth);
        self::addSunElevation($builder, $sunElevation);
        self::addNumSpectralFilters($builder, $numSpectralFilters);
        self::addSpectralFilters($builder, $spectralFilters);
        self::addSpectralZMFL($builder, $spectralZMFL);
        self::addSpectralFilterSolarMag($builder, $spectralFilterSolarMag);
        self::addZeroPoints($builder, $zeroPoints);
        self::addZeroPointsUnc($builder, $zeroPointsUnc);
        self::addExtinctionCoeffs($builder, $extinctionCoeffs);
        self::addExtinctionCoeffsUnc($builder, $extinctionCoeffsUnc);
        self::addColorCoeffs($builder, $colorCoeffs);
        self::addNumNeutralDensityFilters($builder, $numNeutralDensityFilters);
        self::addNeutralDensityFilterNames($builder, $neutralDensityFilterNames);
        self::addNeutralDensityFilterTransmissions($builder, $neutralDensityFilterTransmissions);
        self::addNeutralDensityFilterTransmissionsUnc($builder, $neutralDensityFilterTransmissionsUnc);
        self::addGain($builder, $gain);
        self::addIfov($builder, $ifov);
        self::addPixelArrayWidth($builder, $pixelArrayWidth);
        self::addPixelArrayHeight($builder, $pixelArrayHeight);
        self::addPixelMin($builder, $pixelMin);
        self::addPixelMax($builder, $pixelMax);
        self::addCentroidRow($builder, $centroidRow);
        self::addCentroidColumn($builder, $centroidColumn);
        self::addRowVariance($builder, $rowVariance);
        self::addColumnVariance($builder, $columnVariance);
        self::addRowColCov($builder, $rowColCov);
        self::addDistFromStreakCenter($builder, $distFromStreakCenter);
        self::addSurfBrightness($builder, $surfBrightness);
        self::addSurfBrightnessUnc($builder, $surfBrightnessUnc);
        self::addTimesUnc($builder, $timesUnc);
        self::addCcdTemp($builder, $ccdTemp);
        self::addCurrentSpectralFilterNum($builder, $currentSpectralFilterNum);
        self::addCurrentNeutralDensityFilterNum($builder, $currentNeutralDensityFilterNum);
        self::addBinningHoriz($builder, $binningHoriz);
        self::addBinningVert($builder, $binningVert);
        self::addPcalNumStars($builder, $pcalNumStars);
        self::addCcdObjPosX($builder, $ccdObjPosX);
        self::addCcdObjPosY($builder, $ccdObjPosY);
        self::addCcdObjWidth($builder, $ccdObjWidth);
        self::addBackgroundSignal($builder, $backgroundSignal);
        self::addBackgroundSignalUnc($builder, $backgroundSignalUnc);
        self::addPeakApertureCount($builder, $peakApertureCount);
        self::addPeakBackgroundCount($builder, $peakBackgroundCount);
        self::addSnrEst($builder, $snrEst);
        self::addMagInstrumental($builder, $magInstrumental);
        self::addMagInstrumentalUnc($builder, $magInstrumentalUnc);
        self::addOpticalCrossSection($builder, $opticalCrossSection);
        self::addOpticalCrossSectionUnc($builder, $opticalCrossSectionUnc);
        self::addSunStatePosX($builder, $sunStatePosX);
        self::addSunStatePosY($builder, $sunStatePosY);
        self::addSunStatePosZ($builder, $sunStatePosZ);
        self::addSunStateVelX($builder, $sunStateVelX);
        self::addSunStateVelY($builder, $sunStateVelY);
        self::addSunStateVelZ($builder, $sunStateVelZ);
        self::addNumCatalogStars($builder, $numCatalogStars);
        self::addNumDetectedStars($builder, $numDetectedStars);
        self::addNumCorrelatedStars($builder, $numCorrelatedStars);
        self::addPredictedRaUnc($builder, $predictedRaUnc);
        self::addPredictedDeclinationUnc($builder, $predictedDeclinationUnc);
        self::addRaCov($builder, $raCov);
        self::addDeclinationCov($builder, $declinationCov);
        self::addRaDeclinationCov($builder, $raDeclinationCov);
        self::addAcalCrPixX($builder, $acalCrPixX);
        self::addAcalCrPixY($builder, $acalCrPixY);
        self::addAcalCrValX($builder, $acalCrValX);
        self::addAcalCrValY($builder, $acalCrValY);
        self::addAcalNumStars($builder, $acalNumStars);
        self::addObjSunRange($builder, $objSunRange);
        self::addPhaseAngBisect($builder, $phaseAngBisect);
        self::addSolarDiskFrac($builder, $solarDiskFrac);
        self::addToes($builder, $toes);
        self::addDoes($builder, $does);
        self::addSource($builder, $source);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdEOObservation(FlatBufferBuilder $builder, $idEOObservation)
    {
        $builder->addOffsetX(0, $idEOObservation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObTime(FlatBufferBuilder $builder, $obTime)
    {
        $builder->addOffsetX(2, $obTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPredictedRa(FlatBufferBuilder $builder, $predictedRa)
    {
        $builder->addDoubleX(3, $predictedRa, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPredictedDeclination(FlatBufferBuilder $builder, $predictedDeclination)
    {
        $builder->addDoubleX(4, $predictedDeclination, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPredictedAzimuth(FlatBufferBuilder $builder, $predictedAzimuth)
    {
        $builder->addDoubleX(5, $predictedAzimuth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPredictedElevation(FlatBufferBuilder $builder, $predictedElevation)
    {
        $builder->addDoubleX(6, $predictedElevation, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSunAzimuth(FlatBufferBuilder $builder, $sunAzimuth)
    {
        $builder->addDoubleX(7, $sunAzimuth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSunElevation(FlatBufferBuilder $builder, $sunElevation)
    {
        $builder->addDoubleX(8, $sunElevation, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumSpectralFilters(FlatBufferBuilder $builder, $numSpectralFilters)
    {
        $builder->addIntX(9, $numSpectralFilters, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSpectralFilters(FlatBufferBuilder $builder, $spectralFilters)
    {
        $builder->addOffsetX(10, $spectralFilters, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSpectralFiltersVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSpectralFiltersVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSpectralZMFL(FlatBufferBuilder $builder, $spectralZMFL)
    {
        $builder->addOffsetX(11, $spectralZMFL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSpectralZMFLVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSpectralZMFLVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSpectralFilterSolarMag(FlatBufferBuilder $builder, $spectralFilterSolarMag)
    {
        $builder->addOffsetX(12, $spectralFilterSolarMag, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSpectralFilterSolarMagVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSpectralFilterSolarMagVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addZeroPoints(FlatBufferBuilder $builder, $zeroPoints)
    {
        $builder->addOffsetX(13, $zeroPoints, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createZeroPointsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startZeroPointsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addZeroPointsUnc(FlatBufferBuilder $builder, $zeroPointsUnc)
    {
        $builder->addOffsetX(14, $zeroPointsUnc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createZeroPointsUncVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startZeroPointsUncVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addExtinctionCoeffs(FlatBufferBuilder $builder, $extinctionCoeffs)
    {
        $builder->addOffsetX(15, $extinctionCoeffs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createExtinctionCoeffsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startExtinctionCoeffsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addExtinctionCoeffsUnc(FlatBufferBuilder $builder, $extinctionCoeffsUnc)
    {
        $builder->addOffsetX(16, $extinctionCoeffsUnc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createExtinctionCoeffsUncVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startExtinctionCoeffsUncVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addColorCoeffs(FlatBufferBuilder $builder, $colorCoeffs)
    {
        $builder->addOffsetX(17, $colorCoeffs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createColorCoeffsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startColorCoeffsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumNeutralDensityFilters(FlatBufferBuilder $builder, $numNeutralDensityFilters)
    {
        $builder->addIntX(18, $numNeutralDensityFilters, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addNeutralDensityFilterNames(FlatBufferBuilder $builder, $neutralDensityFilterNames)
    {
        $builder->addOffsetX(19, $neutralDensityFilterNames, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createNeutralDensityFilterNamesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startNeutralDensityFilterNamesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addNeutralDensityFilterTransmissions(FlatBufferBuilder $builder, $neutralDensityFilterTransmissions)
    {
        $builder->addOffsetX(20, $neutralDensityFilterTransmissions, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createNeutralDensityFilterTransmissionsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startNeutralDensityFilterTransmissionsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addNeutralDensityFilterTransmissionsUnc(FlatBufferBuilder $builder, $neutralDensityFilterTransmissionsUnc)
    {
        $builder->addOffsetX(21, $neutralDensityFilterTransmissionsUnc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createNeutralDensityFilterTransmissionsUncVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startNeutralDensityFilterTransmissionsUncVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGain(FlatBufferBuilder $builder, $gain)
    {
        $builder->addDoubleX(22, $gain, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addIfov(FlatBufferBuilder $builder, $ifov)
    {
        $builder->addDoubleX(23, $ifov, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPixelArrayWidth(FlatBufferBuilder $builder, $pixelArrayWidth)
    {
        $builder->addIntX(24, $pixelArrayWidth, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPixelArrayHeight(FlatBufferBuilder $builder, $pixelArrayHeight)
    {
        $builder->addIntX(25, $pixelArrayHeight, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPixelMin(FlatBufferBuilder $builder, $pixelMin)
    {
        $builder->addIntX(26, $pixelMin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPixelMax(FlatBufferBuilder $builder, $pixelMax)
    {
        $builder->addIntX(27, $pixelMax, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCentroidRow(FlatBufferBuilder $builder, $centroidRow)
    {
        $builder->addDoubleX(28, $centroidRow, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCentroidColumn(FlatBufferBuilder $builder, $centroidColumn)
    {
        $builder->addDoubleX(29, $centroidColumn, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRowVariance(FlatBufferBuilder $builder, $rowVariance)
    {
        $builder->addDoubleX(30, $rowVariance, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addColumnVariance(FlatBufferBuilder $builder, $columnVariance)
    {
        $builder->addDoubleX(31, $columnVariance, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRowColCov(FlatBufferBuilder $builder, $rowColCov)
    {
        $builder->addDoubleX(32, $rowColCov, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDistFromStreakCenter(FlatBufferBuilder $builder, $distFromStreakCenter)
    {
        $builder->addOffsetX(33, $distFromStreakCenter, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDistFromStreakCenterVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDistFromStreakCenterVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSurfBrightness(FlatBufferBuilder $builder, $surfBrightness)
    {
        $builder->addOffsetX(34, $surfBrightness, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSurfBrightnessVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSurfBrightnessVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSurfBrightnessUnc(FlatBufferBuilder $builder, $surfBrightnessUnc)
    {
        $builder->addOffsetX(35, $surfBrightnessUnc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSurfBrightnessUncVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSurfBrightnessUncVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTimesUnc(FlatBufferBuilder $builder, $timesUnc)
    {
        $builder->addDoubleX(36, $timesUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCcdTemp(FlatBufferBuilder $builder, $ccdTemp)
    {
        $builder->addDoubleX(37, $ccdTemp, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCurrentSpectralFilterNum(FlatBufferBuilder $builder, $currentSpectralFilterNum)
    {
        $builder->addIntX(38, $currentSpectralFilterNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCurrentNeutralDensityFilterNum(FlatBufferBuilder $builder, $currentNeutralDensityFilterNum)
    {
        $builder->addIntX(39, $currentNeutralDensityFilterNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addBinningHoriz(FlatBufferBuilder $builder, $binningHoriz)
    {
        $builder->addIntX(40, $binningHoriz, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addBinningVert(FlatBufferBuilder $builder, $binningVert)
    {
        $builder->addIntX(41, $binningVert, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPcalNumStars(FlatBufferBuilder $builder, $pcalNumStars)
    {
        $builder->addIntX(42, $pcalNumStars, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCcdObjPosX(FlatBufferBuilder $builder, $ccdObjPosX)
    {
        $builder->addDoubleX(43, $ccdObjPosX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCcdObjPosY(FlatBufferBuilder $builder, $ccdObjPosY)
    {
        $builder->addDoubleX(44, $ccdObjPosY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCcdObjWidth(FlatBufferBuilder $builder, $ccdObjWidth)
    {
        $builder->addDoubleX(45, $ccdObjWidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBackgroundSignal(FlatBufferBuilder $builder, $backgroundSignal)
    {
        $builder->addDoubleX(46, $backgroundSignal, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBackgroundSignalUnc(FlatBufferBuilder $builder, $backgroundSignalUnc)
    {
        $builder->addDoubleX(47, $backgroundSignalUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPeakApertureCount(FlatBufferBuilder $builder, $peakApertureCount)
    {
        $builder->addDoubleX(48, $peakApertureCount, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPeakBackgroundCount(FlatBufferBuilder $builder, $peakBackgroundCount)
    {
        $builder->addIntX(49, $peakBackgroundCount, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSnrEst(FlatBufferBuilder $builder, $snrEst)
    {
        $builder->addDoubleX(50, $snrEst, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMagInstrumental(FlatBufferBuilder $builder, $magInstrumental)
    {
        $builder->addDoubleX(51, $magInstrumental, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMagInstrumentalUnc(FlatBufferBuilder $builder, $magInstrumentalUnc)
    {
        $builder->addDoubleX(52, $magInstrumentalUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOpticalCrossSection(FlatBufferBuilder $builder, $opticalCrossSection)
    {
        $builder->addDoubleX(53, $opticalCrossSection, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOpticalCrossSectionUnc(FlatBufferBuilder $builder, $opticalCrossSectionUnc)
    {
        $builder->addDoubleX(54, $opticalCrossSectionUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSunStatePosX(FlatBufferBuilder $builder, $sunStatePosX)
    {
        $builder->addDoubleX(55, $sunStatePosX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSunStatePosY(FlatBufferBuilder $builder, $sunStatePosY)
    {
        $builder->addDoubleX(56, $sunStatePosY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSunStatePosZ(FlatBufferBuilder $builder, $sunStatePosZ)
    {
        $builder->addDoubleX(57, $sunStatePosZ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSunStateVelX(FlatBufferBuilder $builder, $sunStateVelX)
    {
        $builder->addDoubleX(58, $sunStateVelX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSunStateVelY(FlatBufferBuilder $builder, $sunStateVelY)
    {
        $builder->addDoubleX(59, $sunStateVelY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSunStateVelZ(FlatBufferBuilder $builder, $sunStateVelZ)
    {
        $builder->addDoubleX(60, $sunStateVelZ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumCatalogStars(FlatBufferBuilder $builder, $numCatalogStars)
    {
        $builder->addIntX(61, $numCatalogStars, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumDetectedStars(FlatBufferBuilder $builder, $numDetectedStars)
    {
        $builder->addIntX(62, $numDetectedStars, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumCorrelatedStars(FlatBufferBuilder $builder, $numCorrelatedStars)
    {
        $builder->addIntX(63, $numCorrelatedStars, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPredictedRaUnc(FlatBufferBuilder $builder, $predictedRaUnc)
    {
        $builder->addDoubleX(64, $predictedRaUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPredictedDeclinationUnc(FlatBufferBuilder $builder, $predictedDeclinationUnc)
    {
        $builder->addDoubleX(65, $predictedDeclinationUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRaCov(FlatBufferBuilder $builder, $raCov)
    {
        $builder->addDoubleX(66, $raCov, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeclinationCov(FlatBufferBuilder $builder, $declinationCov)
    {
        $builder->addDoubleX(67, $declinationCov, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRaDeclinationCov(FlatBufferBuilder $builder, $raDeclinationCov)
    {
        $builder->addDoubleX(68, $raDeclinationCov, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAcalCrPixX(FlatBufferBuilder $builder, $acalCrPixX)
    {
        $builder->addDoubleX(69, $acalCrPixX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAcalCrPixY(FlatBufferBuilder $builder, $acalCrPixY)
    {
        $builder->addDoubleX(70, $acalCrPixY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAcalCrValX(FlatBufferBuilder $builder, $acalCrValX)
    {
        $builder->addDoubleX(71, $acalCrValX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAcalCrValY(FlatBufferBuilder $builder, $acalCrValY)
    {
        $builder->addDoubleX(72, $acalCrValY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAcalNumStars(FlatBufferBuilder $builder, $acalNumStars)
    {
        $builder->addIntX(73, $acalNumStars, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addObjSunRange(FlatBufferBuilder $builder, $objSunRange)
    {
        $builder->addDoubleX(74, $objSunRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPhaseAngBisect(FlatBufferBuilder $builder, $phaseAngBisect)
    {
        $builder->addDoubleX(75, $phaseAngBisect, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSolarDiskFrac(FlatBufferBuilder $builder, $solarDiskFrac)
    {
        $builder->addDoubleX(76, $solarDiskFrac, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addToes(FlatBufferBuilder $builder, $toes)
    {
        $builder->addDoubleX(77, $toes, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDoes(FlatBufferBuilder $builder, $does)
    {
        $builder->addDoubleX(78, $does, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(79, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(80, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(81, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(82, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEOObservationDetails_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEOObservationDetails_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "EOOB");
    }
}
