<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Data to analyze launch detections.
class LaunchDetection_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return LaunchDetection_Abridged
     */
    public static function getRootAsLaunchDetection_Abridged(ByteBuffer $bb)
    {
        $obj = new LaunchDetection_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function LaunchDetection_AbridgedIdentifier()
    {
        return "LAUN";
    }

    public static function LaunchDetection_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::LaunchDetection_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return LaunchDetection_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: LAUNCHDETECTION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time of Launch.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getLaunchTime()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of message for the data.
    /// Example: /// Example: Example-Msg-Type
    /// Constraints: Minimum length = 1, Maximum length = 16
    public function getMessageType()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLaunchLatitude()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLaunchLongitude()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Angle measured clockwise from North for the launch heading (in Degrees).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLaunchAzimuth()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Orbit Right Ascension of Ascending Node (in Degrees).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRaan()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Orbit Inclination (in Degrees).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getInclination()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Time of observation.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getObservationTime()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getObservationLatitude()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Longitude of launch vehicle at observation time (in Degrees).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getObservationLongitude()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Altitude of launch vehicle at observation time (in KM).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getObservationAltitude()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Flag indicating multiple observers were used.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getStereoFlag()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getHighZenithAzimuth()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Integer indicating how messages should be sequenced for a specific event.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSequenceNumber()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Id to be able to correlate different messages to a specific event.
    /// Example: /// Example: EVENT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getEventId()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: Example descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getDescriptor()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \LaunchDetection_Abridged_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Read-only time the row was updated in the database, set automatically by the system on update.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startLaunchDetection_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(26);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return LaunchDetection_Abridged
     */
    public static function createLaunchDetection_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $launchTime, $messageType, $launchLatitude, $launchLongitude, $launchAzimuth, $raan, $inclination, $observationTime, $observationLatitude, $observationLongitude, $observationAltitude, $stereoFlag, $highZenithAzimuth, $sequenceNumber, $eventId, $source, $origin, $descriptor, $origNetwork, $dataMode, $createdAt, $createdBy, $updatedAt, $updatedBy)
    {
        $builder->startObject(26);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addLaunchTime($builder, $launchTime);
        self::addMessageType($builder, $messageType);
        self::addLaunchLatitude($builder, $launchLatitude);
        self::addLaunchLongitude($builder, $launchLongitude);
        self::addLaunchAzimuth($builder, $launchAzimuth);
        self::addRaan($builder, $raan);
        self::addInclination($builder, $inclination);
        self::addObservationTime($builder, $observationTime);
        self::addObservationLatitude($builder, $observationLatitude);
        self::addObservationLongitude($builder, $observationLongitude);
        self::addObservationAltitude($builder, $observationAltitude);
        self::addStereoFlag($builder, $stereoFlag);
        self::addHighZenithAzimuth($builder, $highZenithAzimuth);
        self::addSequenceNumber($builder, $sequenceNumber);
        self::addEventId($builder, $eventId);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDescriptor($builder, $descriptor);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchTime(FlatBufferBuilder $builder, $launchTime)
    {
        $builder->addOffsetX(2, $launchTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMessageType(FlatBufferBuilder $builder, $messageType)
    {
        $builder->addOffsetX(3, $messageType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLaunchLatitude(FlatBufferBuilder $builder, $launchLatitude)
    {
        $builder->addDoubleX(4, $launchLatitude, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLaunchLongitude(FlatBufferBuilder $builder, $launchLongitude)
    {
        $builder->addDoubleX(5, $launchLongitude, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLaunchAzimuth(FlatBufferBuilder $builder, $launchAzimuth)
    {
        $builder->addDoubleX(6, $launchAzimuth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRaan(FlatBufferBuilder $builder, $raan)
    {
        $builder->addDoubleX(7, $raan, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addInclination(FlatBufferBuilder $builder, $inclination)
    {
        $builder->addDoubleX(8, $inclination, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObservationTime(FlatBufferBuilder $builder, $observationTime)
    {
        $builder->addOffsetX(9, $observationTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addObservationLatitude(FlatBufferBuilder $builder, $observationLatitude)
    {
        $builder->addDoubleX(10, $observationLatitude, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addObservationLongitude(FlatBufferBuilder $builder, $observationLongitude)
    {
        $builder->addDoubleX(11, $observationLongitude, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addObservationAltitude(FlatBufferBuilder $builder, $observationAltitude)
    {
        $builder->addDoubleX(12, $observationAltitude, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addStereoFlag(FlatBufferBuilder $builder, $stereoFlag)
    {
        $builder->addBoolX(13, $stereoFlag, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addHighZenithAzimuth(FlatBufferBuilder $builder, $highZenithAzimuth)
    {
        $builder->addBoolX(14, $highZenithAzimuth, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSequenceNumber(FlatBufferBuilder $builder, $sequenceNumber)
    {
        $builder->addIntX(15, $sequenceNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEventId(FlatBufferBuilder $builder, $eventId)
    {
        $builder->addOffsetX(16, $eventId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(17, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(18, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescriptor(FlatBufferBuilder $builder, $descriptor)
    {
        $builder->addOffsetX(19, $descriptor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(20, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(21, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(22, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(23, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(24, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(25, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endLaunchDetection_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishLaunchDetection_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "LAUN");
    }
}
