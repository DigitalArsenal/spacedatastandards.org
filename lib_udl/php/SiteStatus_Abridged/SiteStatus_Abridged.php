<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// No description available.
class SiteStatus_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return SiteStatus_Abridged
     */
    public static function getRootAsSiteStatus_Abridged(ByteBuffer $bb)
    {
        $obj = new SiteStatus_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function SiteStatus_AbridgedIdentifier()
    {
        return "SITE";
    }

    public static function SiteStatus_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::SiteStatus_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return SiteStatus_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SITESTATUS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The ID of the site, if this status is associated with a fixed site or platform.
    /// Example: /// Example: 41e3e554-9790-40b9-bd7b-f30d864dcad8
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdSite()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional site type or further detail of type.  Intended for, but not limited to, Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).
    /// Example: /// Example: ADOC
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getSiteType()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Alternate Identifier for a mobile or transportable platform provided by source.
    /// Example: /// Example: MOBILEALT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getMobileAltId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The POI (point of interest) ID related to this platform, if available.
    /// Example: /// Example: d4a91864-6140-4b8d-67cd-45421c75f696
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPoiid()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The track ID related to this platform (if mobile or transportable), if available.
    /// Example: /// Example: PCM4923-1656174732-4-1-257
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTrackId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Link-16 specific reference track number.
    /// Example: /// Example: TrkNm
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getTrackRefL16()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The operational status of the platform (e.g. Fully Operational, Partially Operational, Not Operational, etc.).
    /// Example: /// Example: Fully Operational
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getOpsCapability()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The status of the installation.
    /// FMC - Fully Mission Capable
    ///  PMC - Partially Mission Capable
    /// NMC - Non Mission Capable
    /// UNK - Unknown.
    /// Example: /// Example: PMC
    /// Constraints: Minimum length = 0, Maximum length = 3
    /**
     * @return sbyte
     */
    public function getInstStatus()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SiteStatus_Abridged_instStatus_Enum::FMC;
    }

    /// Force Protection Condition (FPCON).
    /// NORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.
    /// ALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.
    /// BRAVO - Applies when an increased or predictable threat of terrorist activity exists.
    /// CHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.
    /// DELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.
    /// Example: /// Example: BRAVO
    /// Constraints: Minimum length = 0, Maximum length = 7
    /**
     * @return sbyte
     */
    public function getFpcon()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SiteStatus_Abridged_fpcon_Enum::NORMAL;
    }

    /// Health Protection Condition (HPCON).
    /// 0 - Routine, no community transmission.
    /// ALPHA - Limited, community transmission beginning.
    /// BRAVO - Moderate, increased community transmission.
    /// CHARLIE - Substantial, sustained community transmission.
    /// DELTA - Severe, widespread community transmission.
    /// Example: /// Example: CHARLIE
    /// Constraints: Minimum length = 0, Maximum length = 7
    /**
     * @return sbyte
     */
    public function getHpcon()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SiteStatus_Abridged_hpcon_Enum::E0;
    }

    /// Cyberspace Protection Condition (CPCON).
    /// 1 - VERY HIGH - Critical functions.
    /// 2 - HIGH - Critical and essential functions.
    /// 3 - MEDIUM - Critical, essential, and support functions.
    /// 4 - LOW - All functions.
    /// 5 - VERY LOW - All functions.
    /// Example: /// Example: 4
    /// Constraints: Minimum length = 0, Maximum length = 1
    /**
     * @return sbyte
     */
    public function getCpcon()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SiteStatus_Abridged_cpcon_Enum::E1;
    }

    /// Time of report, in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getReportTime()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of the time function associated with the reportTime (e.g. Activation, Deactivation, Arrival, Departure, etc.), if applicable.
    /// Example: /// Example: Activation
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getTimeFunction()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of the current weather conditions over a site.
    /// Example: /// Example: Heavy rain
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getWeatherMessage()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Position Engagement Status flag, Indicating whether this platform is initiating multiple simultaneous engagements.  A value of 1/True indicates the platform is initiating multiple simultaneous engagements.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getPes()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Estimated number of hot missiles of all types remaining in weapons system inventory.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getHotInventory()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Estimated number of cold missiles of all types remaining in weapons system inventory.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getColdInventory()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The state of a SAM unit (e.g. Initialization, Standby, Reorientation, etc.).
    /// Example: /// Example: Initialization
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getSamMode()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// SAM sensor radar surveillance mode (Active, Passive, Off).
    /// Example: /// Example: Active
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getRadiateMode()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The primary component degrading the operational capability of the platform or system.
    /// Example: /// Example: opsImpairment
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getOpsImpairment()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The communications component causing the platform or system to be less than fully operational.
    /// Example: /// Example: commImpairment
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getCommImpairment()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Crisis Action Team (CAT).
    /// COLD - Not in use.
    /// WARM - Facility prepped/possible skeleton crew.
    /// HOT - Fully active.
    /// Example: /// Example: COLD
    /// Constraints: Minimum length = 0, Maximum length = 4
    /**
     * @return sbyte
     */
    public function getCat()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SiteStatus_Abridged_cat_Enum::COLD;
    }

    /// Emergency Operations Center (EOC) status.
    /// COLD - Not in use.
    /// WARM - Facility prepped/possible skeleton crew.
    /// HOT - Fully active.
    /// Example: /// Example: WARM
    /// Constraints: Minimum length = 0, Maximum length = 4
    /**
     * @return sbyte
     */
    public function getEoc()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SiteStatus_Abridged_eoc_Enum::COLD;
    }

    /// Array of Link item(s) for which status is available and reported (ATDL, IJMS,  LINK-1, LINK-11, LINK-11B, LINK-16).  This array must be the same length as the linkStatus array.
    /// Example: /// Example: ['ATDL', 'IJMS', 'LINK-1']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLink($j)
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLinkLength()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the status (AVAILABLE, DEGRADED, NOT AVAILABLE, etc.) for each links in the link array. This array must be the same length as the link array, and the status must correspond to the appropriate position index in the link array.
    /// Example: /// Example: ['AVAILABLE', 'DEGRADED', 'NOT AVAILABLE']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLinkStatus($j)
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLinkStatusLength()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of radar system(s) for which status is available and reported (ACQUISITION, IFFSIF, ILLUMINATING, MODE-4, PRIMARY SURVEILLANCE, SECONDARY SURVEILLANCE, TERTIARY SURVEILLANCE). This array must be the same length as the radarStatus array.
    /// Example: /// Example: ['ILLUMINATING', 'MODE-4', 'MODE-3']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRadarSystem($j)
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRadarSystemLength()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the status (NON-OPERATIONAL, OPERATIONAL, OFF) for each radar system in the radarSystem array. This array must be the same length as the radarSystem array, and the status must correspond to the appropriate position index in the radarSystem array.
    /// Example: /// Example: ['OPERATIONAL', 'OFF', 'NON-OPERATIONAL']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRadarStatus($j)
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRadarStatusLength()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of specific missile types for which an estimated inventory count is available (e.g. GMD TYPE A, HARPOON, TOMAHAWK, etc.).  This array must be the same length as the missileInventory array.
    /// Example: /// Example: ['GMD', 'HARPOON', 'JAVELIN']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getMissile($j)
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMissileLength()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the quantity of each of the missile items.  This array must be the same length as the missile array, and the values must correspond to appropriate position index in the missile array.
    /// Example: /// Example: [5, 10, 100]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getMissileInventory($j)
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMissileInventoryLength()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SiteStatus_Abridged_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSiteStatus_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(37);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return SiteStatus_Abridged
     */
    public static function createSiteStatus_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $idSite, $siteType, $mobileAltId, $poiid, $trackId, $trackRefL16, $opsCapability, $instStatus, $fpcon, $hpcon, $cpcon, $reportTime, $timeFunction, $weatherMessage, $pes, $hotInventory, $coldInventory, $samMode, $radiateMode, $opsImpairment, $commImpairment, $cat, $eoc, $link, $linkStatus, $radarSystem, $radarStatus, $missile, $missileInventory, $createdAt, $createdBy, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(37);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdSite($builder, $idSite);
        self::addSiteType($builder, $siteType);
        self::addMobileAltId($builder, $mobileAltId);
        self::addPoiid($builder, $poiid);
        self::addTrackId($builder, $trackId);
        self::addTrackRefL16($builder, $trackRefL16);
        self::addOpsCapability($builder, $opsCapability);
        self::addInstStatus($builder, $instStatus);
        self::addFpcon($builder, $fpcon);
        self::addHpcon($builder, $hpcon);
        self::addCpcon($builder, $cpcon);
        self::addReportTime($builder, $reportTime);
        self::addTimeFunction($builder, $timeFunction);
        self::addWeatherMessage($builder, $weatherMessage);
        self::addPes($builder, $pes);
        self::addHotInventory($builder, $hotInventory);
        self::addColdInventory($builder, $coldInventory);
        self::addSamMode($builder, $samMode);
        self::addRadiateMode($builder, $radiateMode);
        self::addOpsImpairment($builder, $opsImpairment);
        self::addCommImpairment($builder, $commImpairment);
        self::addCat($builder, $cat);
        self::addEoc($builder, $eoc);
        self::addLink($builder, $link);
        self::addLinkStatus($builder, $linkStatus);
        self::addRadarSystem($builder, $radarSystem);
        self::addRadarStatus($builder, $radarStatus);
        self::addMissile($builder, $missile);
        self::addMissileInventory($builder, $missileInventory);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSite(FlatBufferBuilder $builder, $idSite)
    {
        $builder->addOffsetX(2, $idSite, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSiteType(FlatBufferBuilder $builder, $siteType)
    {
        $builder->addOffsetX(3, $siteType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMobileAltId(FlatBufferBuilder $builder, $mobileAltId)
    {
        $builder->addOffsetX(4, $mobileAltId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPoiid(FlatBufferBuilder $builder, $poiid)
    {
        $builder->addOffsetX(5, $poiid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrackId(FlatBufferBuilder $builder, $trackId)
    {
        $builder->addOffsetX(6, $trackId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrackRefL16(FlatBufferBuilder $builder, $trackRefL16)
    {
        $builder->addOffsetX(7, $trackRefL16, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOpsCapability(FlatBufferBuilder $builder, $opsCapability)
    {
        $builder->addOffsetX(8, $opsCapability, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addInstStatus(FlatBufferBuilder $builder, $instStatus)
    {
        $builder->addSbyteX(9, $instStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addFpcon(FlatBufferBuilder $builder, $fpcon)
    {
        $builder->addSbyteX(10, $fpcon, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addHpcon(FlatBufferBuilder $builder, $hpcon)
    {
        $builder->addSbyteX(11, $hpcon, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addCpcon(FlatBufferBuilder $builder, $cpcon)
    {
        $builder->addSbyteX(12, $cpcon, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReportTime(FlatBufferBuilder $builder, $reportTime)
    {
        $builder->addOffsetX(13, $reportTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTimeFunction(FlatBufferBuilder $builder, $timeFunction)
    {
        $builder->addOffsetX(14, $timeFunction, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWeatherMessage(FlatBufferBuilder $builder, $weatherMessage)
    {
        $builder->addOffsetX(15, $weatherMessage, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addPes(FlatBufferBuilder $builder, $pes)
    {
        $builder->addBoolX(16, $pes, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addHotInventory(FlatBufferBuilder $builder, $hotInventory)
    {
        $builder->addIntX(17, $hotInventory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addColdInventory(FlatBufferBuilder $builder, $coldInventory)
    {
        $builder->addIntX(18, $coldInventory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSamMode(FlatBufferBuilder $builder, $samMode)
    {
        $builder->addOffsetX(19, $samMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRadiateMode(FlatBufferBuilder $builder, $radiateMode)
    {
        $builder->addOffsetX(20, $radiateMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOpsImpairment(FlatBufferBuilder $builder, $opsImpairment)
    {
        $builder->addOffsetX(21, $opsImpairment, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCommImpairment(FlatBufferBuilder $builder, $commImpairment)
    {
        $builder->addOffsetX(22, $commImpairment, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addCat(FlatBufferBuilder $builder, $cat)
    {
        $builder->addSbyteX(23, $cat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addEoc(FlatBufferBuilder $builder, $eoc)
    {
        $builder->addSbyteX(24, $eoc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLink(FlatBufferBuilder $builder, $link)
    {
        $builder->addOffsetX(25, $link, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLinkVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLinkVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLinkStatus(FlatBufferBuilder $builder, $linkStatus)
    {
        $builder->addOffsetX(26, $linkStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLinkStatusVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLinkStatusVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRadarSystem(FlatBufferBuilder $builder, $radarSystem)
    {
        $builder->addOffsetX(27, $radarSystem, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRadarSystemVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRadarSystemVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRadarStatus(FlatBufferBuilder $builder, $radarStatus)
    {
        $builder->addOffsetX(28, $radarStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRadarStatusVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRadarStatusVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMissile(FlatBufferBuilder $builder, $missile)
    {
        $builder->addOffsetX(29, $missile, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMissileVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMissileVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMissileInventory(FlatBufferBuilder $builder, $missileInventory)
    {
        $builder->addOffsetX(30, $missileInventory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMissileInventoryVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMissileInventoryVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(31, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(32, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(33, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(34, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(35, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(36, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSiteStatus_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSiteStatus_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "SITE");
    }
}
