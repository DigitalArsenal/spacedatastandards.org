<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Support items associated with this LogisticsSupport record.
class LogisticsSupportItems_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return LogisticsSupportItems_Ingest
     */
    public static function getRootAsLogisticsSupportItems_Ingest(ByteBuffer $bb)
    {
        $obj = new LogisticsSupportItems_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function LogisticsSupportItems_IngestIdentifier()
    {
        return "LOGI";
    }

    public static function LogisticsSupportItems_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::LogisticsSupportItems_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return LogisticsSupportItems_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The type of recovery request needed. Contact the source provider for details.
    /// Example: /// Example: E
    /// Constraints: Minimum length = 1, Maximum length = 1
    public function getRecoveryRequestTypeCode()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The request or record number for this item type (Equipent, Part, or MRT).
    /// Example: /// Example: 89208
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getRequestNumber()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Military aircraft discrepancy logistics requisition ordered quantity. The quantity of equipment ordered that is required to fix the aircraft.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getQuantity()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The technical order name of the part ordered.
    /// Example: /// Example: HOIST ADAPTER KIT
    /// Constraints: Minimum length = 0, Maximum length = 150
    public function getDescription()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Shipment Unit Identifier is the Transportation Control Number (TCN) for shipping that piece of equipment being requested.
    /// Example: /// Example: FB44273196X501XXX
    /// Constraints: Minimum length = 0, Maximum length = 17
    public function getShipmentUnitId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// This is the Redeploy (return) Transportation Control Number/Tracking Reference Number for the selected item.
    /// Example: /// Example: X400LA31949108
    /// Constraints: Minimum length = 0, Maximum length = 17
    public function getRedeployShipmentUnitId()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A number assigned by Job Control to monitor and record maintenance actions required to correct the associated aircraft maintenance discrepancy.  It is seven, nine or twelve characters, depending on the base-specific numbering scheme.  If seven characters: characters 1-3 are Julian date, 4-7 are sequence numbers.  If nine characters: characters 1-2 are last two digits of the year, characters 3-5 are Julian date, 6-9 are sequence numbers.  If twelve characters: characters 1-2 are last two digits of the year, 3-5 are Julian date, 6-9 are sequence numbers, and 10-12 are a three-digit supplemental number.
    /// Example: /// Example: 231942400
    /// Constraints: Minimum length = 0, Maximum length = 12
    public function getJobControlNumber()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The code that represents the International Civil Aviation Organization (ICAO) designations of an airport.
    /// Example: /// Example: PHIK
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getSourceICAO()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
    /// Example: /// Example: T89003
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getDeployPlanNumber()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
    /// Example: /// Example: T89003
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getRedeployPlanNumber()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// This element indicates whether or not the supplied item is contained within another item.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getCannibalized()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The point of contact is a free text field to add information about the individual(s) with knowledge of the referenced requested or supplied item(s). The default value for this field is the last name, first name, and middle initial of the operator who created the records and/or generated the transaction.
    /// Example: /// Example: SMITH, JOHN J
    /// Constraints: Minimum length = 0, Maximum length = 68
    public function getSiPOC()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time the item is ready, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T19:04:00.123Z
    /// Constraints: No constraints specified.
    public function getReadyTime()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time the item is received, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T19:04:00.123Z
    /// Constraints: No constraints specified.
    public function getReceivedTime()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// This element indicates if the supplied item is characterized as additional support.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getResupportFlag()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The last time this supported item was updated, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T19:04:00.123Z
    /// Constraints: No constraints specified.
    public function getItemLastChangedDate()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The parts associated with this support item.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLogisticsParts($j)
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLogisticsPartsLength()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The specialties required to implement this support item.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLogisticsSpecialties($j)
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLogisticsSpecialtiesLength()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Remarks associated with this support item.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLogisticsRemarks($j)
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLogisticsRemarksLength()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startLogisticsSupportItems_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(19);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return LogisticsSupportItems_Ingest
     */
    public static function createLogisticsSupportItems_Ingest(FlatBufferBuilder $builder, $recoveryRequestTypeCode, $requestNumber, $quantity, $description, $shipmentUnitId, $redeployShipmentUnitId, $jobControlNumber, $sourceICAO, $deployPlanNumber, $redeployPlanNumber, $cannibalized, $siPOC, $readyTime, $receivedTime, $resupportFlag, $itemLastChangedDate, $logisticsParts, $logisticsSpecialties, $logisticsRemarks)
    {
        $builder->startObject(19);
        self::addRecoveryRequestTypeCode($builder, $recoveryRequestTypeCode);
        self::addRequestNumber($builder, $requestNumber);
        self::addQuantity($builder, $quantity);
        self::addDescription($builder, $description);
        self::addShipmentUnitId($builder, $shipmentUnitId);
        self::addRedeployShipmentUnitId($builder, $redeployShipmentUnitId);
        self::addJobControlNumber($builder, $jobControlNumber);
        self::addSourceICAO($builder, $sourceICAO);
        self::addDeployPlanNumber($builder, $deployPlanNumber);
        self::addRedeployPlanNumber($builder, $redeployPlanNumber);
        self::addCannibalized($builder, $cannibalized);
        self::addSiPOC($builder, $siPOC);
        self::addReadyTime($builder, $readyTime);
        self::addReceivedTime($builder, $receivedTime);
        self::addResupportFlag($builder, $resupportFlag);
        self::addItemLastChangedDate($builder, $itemLastChangedDate);
        self::addLogisticsParts($builder, $logisticsParts);
        self::addLogisticsSpecialties($builder, $logisticsSpecialties);
        self::addLogisticsRemarks($builder, $logisticsRemarks);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRecoveryRequestTypeCode(FlatBufferBuilder $builder, $recoveryRequestTypeCode)
    {
        $builder->addOffsetX(0, $recoveryRequestTypeCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRequestNumber(FlatBufferBuilder $builder, $requestNumber)
    {
        $builder->addOffsetX(1, $requestNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addQuantity(FlatBufferBuilder $builder, $quantity)
    {
        $builder->addIntX(2, $quantity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(3, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addShipmentUnitId(FlatBufferBuilder $builder, $shipmentUnitId)
    {
        $builder->addOffsetX(4, $shipmentUnitId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRedeployShipmentUnitId(FlatBufferBuilder $builder, $redeployShipmentUnitId)
    {
        $builder->addOffsetX(5, $redeployShipmentUnitId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJobControlNumber(FlatBufferBuilder $builder, $jobControlNumber)
    {
        $builder->addOffsetX(6, $jobControlNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceICAO(FlatBufferBuilder $builder, $sourceICAO)
    {
        $builder->addOffsetX(7, $sourceICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDeployPlanNumber(FlatBufferBuilder $builder, $deployPlanNumber)
    {
        $builder->addOffsetX(8, $deployPlanNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRedeployPlanNumber(FlatBufferBuilder $builder, $redeployPlanNumber)
    {
        $builder->addOffsetX(9, $redeployPlanNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addCannibalized(FlatBufferBuilder $builder, $cannibalized)
    {
        $builder->addBoolX(10, $cannibalized, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSiPOC(FlatBufferBuilder $builder, $siPOC)
    {
        $builder->addOffsetX(11, $siPOC, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReadyTime(FlatBufferBuilder $builder, $readyTime)
    {
        $builder->addOffsetX(12, $readyTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReceivedTime(FlatBufferBuilder $builder, $receivedTime)
    {
        $builder->addOffsetX(13, $receivedTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addResupportFlag(FlatBufferBuilder $builder, $resupportFlag)
    {
        $builder->addBoolX(14, $resupportFlag, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addItemLastChangedDate(FlatBufferBuilder $builder, $itemLastChangedDate)
    {
        $builder->addOffsetX(15, $itemLastChangedDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLogisticsParts(FlatBufferBuilder $builder, $logisticsParts)
    {
        $builder->addOffsetX(16, $logisticsParts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLogisticsPartsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLogisticsPartsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLogisticsSpecialties(FlatBufferBuilder $builder, $logisticsSpecialties)
    {
        $builder->addOffsetX(17, $logisticsSpecialties, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLogisticsSpecialtiesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLogisticsSpecialtiesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLogisticsRemarks(FlatBufferBuilder $builder, $logisticsRemarks)
    {
        $builder->addOffsetX(18, $logisticsRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLogisticsRemarksVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLogisticsRemarksVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endLogisticsSupportItems_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishLogisticsSupportItems_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "LOGI");
    }
}
