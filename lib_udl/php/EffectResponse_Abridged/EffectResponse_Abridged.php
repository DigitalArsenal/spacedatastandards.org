<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// A response for various effects on a target.
class EffectResponse_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EffectResponse_Abridged
     */
    public static function getRootAsEffectResponse_Abridged(ByteBuffer $bb)
    {
        $obj = new EffectResponse_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EffectResponse_AbridgedIdentifier()
    {
        return "EFFE";
    }

    public static function EffectResponse_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EffectResponse_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EffectResponse_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: EFFECTRESPONSE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the EffectRequest associated with this response.
    /// Example: /// Example: EFFECTREQUEST-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdEffectRequest()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The external system identifier of the associated effect request. A human readable unique id.
    /// Example: /// Example: EXTERNALREQUEST-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getExternalRequestId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of response in this record (e.g. COA, SCORECARD, etc.).
    /// Example: /// Example: COA
    /// Constraints: Minimum length = 1, Maximum length = 24
    public function getType()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
    /// Example: /// Example: AIRCRAFT
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getActorSrcType()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The record ID, depending on the type identified in actorSrcType, of the requested asset.
    /// Example: /// Example: RC-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getActorSrcId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of munition being fired.
    /// Example: /// Example: Dummy
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getMunitionType()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the munition.
    /// Example: /// Example: MUNITION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getMunitionId()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The number of shots required to destroy target.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getShotsRequired()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The probability of kill (0-1) of the target being destroyed.
    /// Example: /// Example: 0.7
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getProbabilityOfKill()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The collateral damage estimate (CDE) of the munition being fired.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCollateralDamageEst()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// List of actions associated with this effect response.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getActionsList($j)
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getActionsListLength()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// List of external actions to be executed as part of this task.
    /// Example: /// Example: ['ACTION1', 'ACTION2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getExternalActions($j)
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getExternalActionsLength()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// List of COA metrics associated with this effect response.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCoaMetrics($j)
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCoaMetricsLength()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The time to overhead for the red force to be over their target, in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T00:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getRedTimeToOverhead()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T00:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getDecisionDeadline()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source type of the targetId identifier (POI, SITE, TRACK).
    /// Example: /// Example: POI
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getRedTargetSrcType()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The record ID, depending on the type identified in redTargetSrcType, of the red force target.  If the redTargetSrcType is POI or TRACK, then this identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
    /// Example: /// Example: REDTARGETSRC-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getRedTargetSrcId()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2021-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \EffectResponse_Abridged_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEffectResponse_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(25);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EffectResponse_Abridged
     */
    public static function createEffectResponse_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $idEffectRequest, $externalRequestId, $type, $actorSrcType, $actorSrcId, $munitionType, $munitionId, $shotsRequired, $probabilityOfKill, $collateralDamageEst, $actionsList, $externalActions, $coaMetrics, $redTimeToOverhead, $decisionDeadline, $redTargetSrcType, $redTargetSrcId, $createdAt, $createdBy, $source, $origin, $dataMode, $origNetwork)
    {
        $builder->startObject(25);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdEffectRequest($builder, $idEffectRequest);
        self::addExternalRequestId($builder, $externalRequestId);
        self::addType($builder, $type);
        self::addActorSrcType($builder, $actorSrcType);
        self::addActorSrcId($builder, $actorSrcId);
        self::addMunitionType($builder, $munitionType);
        self::addMunitionId($builder, $munitionId);
        self::addShotsRequired($builder, $shotsRequired);
        self::addProbabilityOfKill($builder, $probabilityOfKill);
        self::addCollateralDamageEst($builder, $collateralDamageEst);
        self::addActionsList($builder, $actionsList);
        self::addExternalActions($builder, $externalActions);
        self::addCoaMetrics($builder, $coaMetrics);
        self::addRedTimeToOverhead($builder, $redTimeToOverhead);
        self::addDecisionDeadline($builder, $decisionDeadline);
        self::addRedTargetSrcType($builder, $redTargetSrcType);
        self::addRedTargetSrcId($builder, $redTargetSrcId);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdEffectRequest(FlatBufferBuilder $builder, $idEffectRequest)
    {
        $builder->addOffsetX(2, $idEffectRequest, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalRequestId(FlatBufferBuilder $builder, $externalRequestId)
    {
        $builder->addOffsetX(3, $externalRequestId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(4, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActorSrcType(FlatBufferBuilder $builder, $actorSrcType)
    {
        $builder->addOffsetX(5, $actorSrcType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActorSrcId(FlatBufferBuilder $builder, $actorSrcId)
    {
        $builder->addOffsetX(6, $actorSrcId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMunitionType(FlatBufferBuilder $builder, $munitionType)
    {
        $builder->addOffsetX(7, $munitionType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMunitionId(FlatBufferBuilder $builder, $munitionId)
    {
        $builder->addOffsetX(8, $munitionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addShotsRequired(FlatBufferBuilder $builder, $shotsRequired)
    {
        $builder->addIntX(9, $shotsRequired, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addProbabilityOfKill(FlatBufferBuilder $builder, $probabilityOfKill)
    {
        $builder->addDoubleX(10, $probabilityOfKill, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCollateralDamageEst(FlatBufferBuilder $builder, $collateralDamageEst)
    {
        $builder->addDoubleX(11, $collateralDamageEst, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addActionsList(FlatBufferBuilder $builder, $actionsList)
    {
        $builder->addOffsetX(12, $actionsList, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createActionsListVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startActionsListVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addExternalActions(FlatBufferBuilder $builder, $externalActions)
    {
        $builder->addOffsetX(13, $externalActions, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createExternalActionsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startExternalActionsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCoaMetrics(FlatBufferBuilder $builder, $coaMetrics)
    {
        $builder->addOffsetX(14, $coaMetrics, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCoaMetricsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCoaMetricsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRedTimeToOverhead(FlatBufferBuilder $builder, $redTimeToOverhead)
    {
        $builder->addOffsetX(15, $redTimeToOverhead, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDecisionDeadline(FlatBufferBuilder $builder, $decisionDeadline)
    {
        $builder->addOffsetX(16, $decisionDeadline, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRedTargetSrcType(FlatBufferBuilder $builder, $redTargetSrcType)
    {
        $builder->addOffsetX(17, $redTargetSrcType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRedTargetSrcId(FlatBufferBuilder $builder, $redTargetSrcId)
    {
        $builder->addOffsetX(18, $redTargetSrcId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(19, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(20, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(21, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(22, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(23, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(24, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEffectResponse_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEffectResponse_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "EFFE");
    }
}
