<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Properties and characteristics of a maritime port, which includes location, port identifiers, and remarks.
class Port_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Port_Abridged
     */
    public static function getRootAsPort_Abridged(ByteBuffer $bb)
    {
        $obj = new Port_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Port_AbridgedIdentifier()
    {
        return "PORT";
    }

    public static function Port_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Port_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Port_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the Site Entity associated with the Port record.
    /// Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSite()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getExternalId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The five-character United Nations Code for Trade and Transport Locations (UN/LOCODE) of this port.  The first two letters of the code contains the ISO 3166-1 alpha-2 country designation of the port country. The three remaining characters identify a location within that country.  Letters are preferred, but if necessary digits 2 through 9 may be used, excluding "0" and "1" to avoid confusion with the letters "O" and "I" respectively.
    /// Example: /// Example: CAVAN
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getLocode()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of this port.
    /// Example: /// Example: Vancouver
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getPortName()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of harbor for this port. The harbor type refers to how a port is physically positioned.
    /// COASTAL BREAKWATER (CB)
    /// COASTAL NATURAL (CN)
    /// COASTAL TIDE GATE  (CT)
    /// LAKE OR CANAL (LC)
    /// OPEN ROADSTEAD (OR)
    /// RIVER BASIN (RB)
    /// RIVER NATURAL (RN)
    /// RIVER TIDE GATE (RT)
    /// TYPHOON HARBOR  (TH).
    /// Example: /// Example: COASTAL NATURAL
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getHarborType()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The size of the harbor for this port measured in square kilometers.
    /// Example: /// Example: 160.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHarborSize()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum allowed vessel draught. Draught is the principal dimensions of any waterborne vessel defined as the distance between the shipâ€™s keel and the waterline of the vessel measured in meters.
    /// Example: /// Example: 18.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxDraught()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average time for a vessel at this port in hours.
    /// Example: /// Example: 41.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgDuration()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The tide range of this port in meters.
    /// Example: /// Example: 4.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTideRange()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The shelter afforded from wind, sea, and swell refers to the area where normal port operations are conducted, usually the wharf area. Shelter afforded by the anchorage area may be given for ports where cargo is handled by lighters. Values given are EXCELLENT, FAIR, GOOD, POOR, or NONE.
    /// Example: /// Example: EXCELLENT
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getShelter()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating whether a pilot is required at this port.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getPilotReqd()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLat()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLon()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The country where this port is located.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getCountryCode()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 64
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Port_Abridged_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startPort_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(22);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Port_Abridged
     */
    public static function createPort_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $idSite, $externalId, $locode, $portName, $harborType, $harborSize, $maxDraught, $avgDuration, $tideRange, $shelter, $pilotReqd, $lat, $lon, $countryCode, $createdAt, $createdBy, $source, $origin, $dataMode, $origNetwork)
    {
        $builder->startObject(22);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdSite($builder, $idSite);
        self::addExternalId($builder, $externalId);
        self::addLocode($builder, $locode);
        self::addPortName($builder, $portName);
        self::addHarborType($builder, $harborType);
        self::addHarborSize($builder, $harborSize);
        self::addMaxDraught($builder, $maxDraught);
        self::addAvgDuration($builder, $avgDuration);
        self::addTideRange($builder, $tideRange);
        self::addShelter($builder, $shelter);
        self::addPilotReqd($builder, $pilotReqd);
        self::addLat($builder, $lat);
        self::addLon($builder, $lon);
        self::addCountryCode($builder, $countryCode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSite(FlatBufferBuilder $builder, $idSite)
    {
        $builder->addOffsetX(2, $idSite, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalId(FlatBufferBuilder $builder, $externalId)
    {
        $builder->addOffsetX(3, $externalId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLocode(FlatBufferBuilder $builder, $locode)
    {
        $builder->addOffsetX(4, $locode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPortName(FlatBufferBuilder $builder, $portName)
    {
        $builder->addOffsetX(5, $portName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHarborType(FlatBufferBuilder $builder, $harborType)
    {
        $builder->addOffsetX(6, $harborType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHarborSize(FlatBufferBuilder $builder, $harborSize)
    {
        $builder->addDoubleX(7, $harborSize, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxDraught(FlatBufferBuilder $builder, $maxDraught)
    {
        $builder->addDoubleX(8, $maxDraught, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgDuration(FlatBufferBuilder $builder, $avgDuration)
    {
        $builder->addDoubleX(9, $avgDuration, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTideRange(FlatBufferBuilder $builder, $tideRange)
    {
        $builder->addDoubleX(10, $tideRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addShelter(FlatBufferBuilder $builder, $shelter)
    {
        $builder->addOffsetX(11, $shelter, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addPilotReqd(FlatBufferBuilder $builder, $pilotReqd)
    {
        $builder->addBoolX(12, $pilotReqd, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLat(FlatBufferBuilder $builder, $lat)
    {
        $builder->addDoubleX(13, $lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLon(FlatBufferBuilder $builder, $lon)
    {
        $builder->addDoubleX(14, $lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountryCode(FlatBufferBuilder $builder, $countryCode)
    {
        $builder->addOffsetX(15, $countryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(16, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(17, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(18, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(19, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(20, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(21, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endPort_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishPort_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "PORT");
    }
}
