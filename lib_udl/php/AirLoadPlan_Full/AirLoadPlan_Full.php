<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Information related to how an aircraft is loaded with cargo, equipment, and passengers.
class AirLoadPlan_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AirLoadPlan_Full
     */
    public static function getRootAsAirLoadPlan_Full(ByteBuffer $bb)
    {
        $obj = new AirLoadPlan_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AirLoadPlan_FullIdentifier()
    {
        return "AIRL";
    }

    public static function AirLoadPlan_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AirLoadPlan_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AirLoadPlan_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 0457f578-e29c-312e-85aa-0a04a430bdd0
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Required ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: dec7a61a-cd97-4af0-b7bc-f4c3bb33341b
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getExternalId()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UDL ID of the mission this record is associated with.
    /// Example: /// Example: 412bebb6-a45e-029c-ca51-e29f8a442b12
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdMission()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The mission number of the mission supporting this load plan.
    /// Example: /// Example: AJM123456123
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getMissionNumber()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UDL ID of the aircraft sortie this record is associated with.
    /// Example: /// Example: 823acfbe6-f36a-157b-ef32-b47c9b589c3
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSortie()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The leg number of the mission supporting this load plan.
    /// Example: /// Example: 200
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getLegNum()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The call sign of the mission supporting this load plan.
    /// Example: /// Example: RCH1234
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getCallSign()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The tail number of the aircraft supporting this load plan.
    /// Example: /// Example: 77187
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getTailNumber()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Model Design Series designation of the aircraft supporting this load plan.
    /// Example: /// Example: C17A
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getAircraftMDS()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The departure International Civil Organization (ICAO) code of the departure airfield.
    /// Example: /// Example: KCHS
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getDepICAO()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier of departure airfield with no International Civil Organization (ICAO) code.
    /// Example: /// Example: W99
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getDepAirfield()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format.
    /// Example: /// Example: 2023-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getEstDepTime()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The arrival International Civil Organization (ICAO) code of the landing airfield.
    /// Example: /// Example: ETAR
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getArrICAO()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier of arrival airfield with no International Civil Organization (ICAO) code.
    /// Example: /// Example: W99
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getArrAirfield()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getEstArrTime()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The number of crew members on the aircraft.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCrewSize()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.). Configuration meanings are determined by the data source.
    /// Example: /// Example: C-1
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getCargoConfig()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat, etc.). Configuration meanings are determined by the data source.
    /// Example: /// Example: Standard
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getEquipConfig()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration meanings are determined by the data source.
    /// Example: /// Example: ER
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getTankConfig()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBasicWeight()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The basic weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
    /// Example: /// Example: 2500.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBasicMoment()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The weight of usable fuel on board the aircraft, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFuelWeight()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The fuel weight on board the aircraft multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
    /// Example: /// Example: 2500.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFuelMoment()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The estimated weight of usable fuel upon landing, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEstLandingFuelWeight()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The estimated weight of usable fuel upon landing multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
    /// Example: /// Example: 2500.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEstLandingFuelMoment()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The basic weight of the aircraft including passengers and equipment, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOperatingWeight()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The operating weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
    /// Example: /// Example: 2500.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOperatingMoment()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The weight of the cargo on board the aircraft, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCargoWeight()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each individual cargo moment is the weight of the cargo multiplied by the distance between the reference datum and the cargo's center of gravity.
    /// Example: /// Example: 2500.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCargoMoment()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The operating weight of the aircraft including cargo but without usable fuel, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZeroFuelWeight()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The zero fuel weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
    /// Example: /// Example: 2500.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZeroFuelMoment()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The center of gravity of the aircraft using the zero fuel weight and zero fuel total moment, as a percentage of the mean aerodynamic chord (%MAC).
    /// Example: /// Example: 39.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZeroFuelCG()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The total weight of the aircraft at takeoff including passengers, cargo, equipment, and usable fuel, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGrossWeight()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The sum of moments of all items making up the gross weight of the aircraft, in Newton-meters.
    /// Example: /// Example: 2500.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGrossMoment()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The center of gravity of the aircraft using the gross weight and gross moment, as a percentage of the mean aerodynamic chord (%MAC).
    /// Example: /// Example: 38.8
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGrossCG()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The gross weight of the aircraft upon landing, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLandingWeight()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The sum of moments of all items making up the gross weight of the aircraft upon landing, in Newton-meters.
    /// Example: /// Example: 2500.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLandingMoment()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The center of gravity of the aircraft using the landing weight and landing moment, as a percentage of the mean aerodynamic chord (%MAC).
    /// Example: /// Example: 38.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLandingCG()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCargoBayFSMin()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
    /// Example: /// Example: 20
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCargoBayFSMax()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Width of the cargo bay, in meters.
    /// Example: /// Example: 3.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCargoBayWidth()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2023-03-21T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: source
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AirLoadPlan_Full_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAirLoadPlan_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(51);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AirLoadPlan_Full
     */
    public static function createAirLoadPlan_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $externalId, $idMission, $missionNumber, $idSortie, $legNum, $callSign, $tailNumber, $aircraftMDS, $depICAO, $depAirfield, $estDepTime, $arrICAO, $arrAirfield, $estArrTime, $crewSize, $cargoConfig, $equipConfig, $tankConfig, $basicWeight, $basicMoment, $fuelWeight, $fuelMoment, $estLandingFuelWeight, $estLandingFuelMoment, $operatingWeight, $operatingMoment, $cargoWeight, $cargoMoment, $zeroFuelWeight, $zeroFuelMoment, $zeroFuelCG, $grossWeight, $grossMoment, $grossCG, $landingWeight, $landingMoment, $landingCG, $cargoBayFSMin, $cargoBayFSMax, $cargoBayWidth, $createdAt, $createdBy, $updatedAt, $updatedBy, $sourceDL, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(51);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addExternalId($builder, $externalId);
        self::addIdMission($builder, $idMission);
        self::addMissionNumber($builder, $missionNumber);
        self::addIdSortie($builder, $idSortie);
        self::addLegNum($builder, $legNum);
        self::addCallSign($builder, $callSign);
        self::addTailNumber($builder, $tailNumber);
        self::addAircraftMDS($builder, $aircraftMDS);
        self::addDepICAO($builder, $depICAO);
        self::addDepAirfield($builder, $depAirfield);
        self::addEstDepTime($builder, $estDepTime);
        self::addArrICAO($builder, $arrICAO);
        self::addArrAirfield($builder, $arrAirfield);
        self::addEstArrTime($builder, $estArrTime);
        self::addCrewSize($builder, $crewSize);
        self::addCargoConfig($builder, $cargoConfig);
        self::addEquipConfig($builder, $equipConfig);
        self::addTankConfig($builder, $tankConfig);
        self::addBasicWeight($builder, $basicWeight);
        self::addBasicMoment($builder, $basicMoment);
        self::addFuelWeight($builder, $fuelWeight);
        self::addFuelMoment($builder, $fuelMoment);
        self::addEstLandingFuelWeight($builder, $estLandingFuelWeight);
        self::addEstLandingFuelMoment($builder, $estLandingFuelMoment);
        self::addOperatingWeight($builder, $operatingWeight);
        self::addOperatingMoment($builder, $operatingMoment);
        self::addCargoWeight($builder, $cargoWeight);
        self::addCargoMoment($builder, $cargoMoment);
        self::addZeroFuelWeight($builder, $zeroFuelWeight);
        self::addZeroFuelMoment($builder, $zeroFuelMoment);
        self::addZeroFuelCG($builder, $zeroFuelCG);
        self::addGrossWeight($builder, $grossWeight);
        self::addGrossMoment($builder, $grossMoment);
        self::addGrossCG($builder, $grossCG);
        self::addLandingWeight($builder, $landingWeight);
        self::addLandingMoment($builder, $landingMoment);
        self::addLandingCG($builder, $landingCG);
        self::addCargoBayFSMin($builder, $cargoBayFSMin);
        self::addCargoBayFSMax($builder, $cargoBayFSMax);
        self::addCargoBayWidth($builder, $cargoBayWidth);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalId(FlatBufferBuilder $builder, $externalId)
    {
        $builder->addOffsetX(2, $externalId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdMission(FlatBufferBuilder $builder, $idMission)
    {
        $builder->addOffsetX(3, $idMission, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionNumber(FlatBufferBuilder $builder, $missionNumber)
    {
        $builder->addOffsetX(4, $missionNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSortie(FlatBufferBuilder $builder, $idSortie)
    {
        $builder->addOffsetX(5, $idSortie, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addLegNum(FlatBufferBuilder $builder, $legNum)
    {
        $builder->addIntX(6, $legNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCallSign(FlatBufferBuilder $builder, $callSign)
    {
        $builder->addOffsetX(7, $callSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTailNumber(FlatBufferBuilder $builder, $tailNumber)
    {
        $builder->addOffsetX(8, $tailNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAircraftMDS(FlatBufferBuilder $builder, $aircraftMDS)
    {
        $builder->addOffsetX(9, $aircraftMDS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepICAO(FlatBufferBuilder $builder, $depICAO)
    {
        $builder->addOffsetX(10, $depICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepAirfield(FlatBufferBuilder $builder, $depAirfield)
    {
        $builder->addOffsetX(11, $depAirfield, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEstDepTime(FlatBufferBuilder $builder, $estDepTime)
    {
        $builder->addOffsetX(12, $estDepTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArrICAO(FlatBufferBuilder $builder, $arrICAO)
    {
        $builder->addOffsetX(13, $arrICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArrAirfield(FlatBufferBuilder $builder, $arrAirfield)
    {
        $builder->addOffsetX(14, $arrAirfield, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEstArrTime(FlatBufferBuilder $builder, $estArrTime)
    {
        $builder->addOffsetX(15, $estArrTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCrewSize(FlatBufferBuilder $builder, $crewSize)
    {
        $builder->addIntX(16, $crewSize, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCargoConfig(FlatBufferBuilder $builder, $cargoConfig)
    {
        $builder->addOffsetX(17, $cargoConfig, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEquipConfig(FlatBufferBuilder $builder, $equipConfig)
    {
        $builder->addOffsetX(18, $equipConfig, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTankConfig(FlatBufferBuilder $builder, $tankConfig)
    {
        $builder->addOffsetX(19, $tankConfig, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBasicWeight(FlatBufferBuilder $builder, $basicWeight)
    {
        $builder->addDoubleX(20, $basicWeight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBasicMoment(FlatBufferBuilder $builder, $basicMoment)
    {
        $builder->addDoubleX(21, $basicMoment, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFuelWeight(FlatBufferBuilder $builder, $fuelWeight)
    {
        $builder->addDoubleX(22, $fuelWeight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFuelMoment(FlatBufferBuilder $builder, $fuelMoment)
    {
        $builder->addDoubleX(23, $fuelMoment, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEstLandingFuelWeight(FlatBufferBuilder $builder, $estLandingFuelWeight)
    {
        $builder->addDoubleX(24, $estLandingFuelWeight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEstLandingFuelMoment(FlatBufferBuilder $builder, $estLandingFuelMoment)
    {
        $builder->addDoubleX(25, $estLandingFuelMoment, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOperatingWeight(FlatBufferBuilder $builder, $operatingWeight)
    {
        $builder->addDoubleX(26, $operatingWeight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOperatingMoment(FlatBufferBuilder $builder, $operatingMoment)
    {
        $builder->addDoubleX(27, $operatingMoment, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCargoWeight(FlatBufferBuilder $builder, $cargoWeight)
    {
        $builder->addDoubleX(28, $cargoWeight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCargoMoment(FlatBufferBuilder $builder, $cargoMoment)
    {
        $builder->addDoubleX(29, $cargoMoment, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZeroFuelWeight(FlatBufferBuilder $builder, $zeroFuelWeight)
    {
        $builder->addDoubleX(30, $zeroFuelWeight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZeroFuelMoment(FlatBufferBuilder $builder, $zeroFuelMoment)
    {
        $builder->addDoubleX(31, $zeroFuelMoment, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZeroFuelCG(FlatBufferBuilder $builder, $zeroFuelCG)
    {
        $builder->addDoubleX(32, $zeroFuelCG, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGrossWeight(FlatBufferBuilder $builder, $grossWeight)
    {
        $builder->addDoubleX(33, $grossWeight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGrossMoment(FlatBufferBuilder $builder, $grossMoment)
    {
        $builder->addDoubleX(34, $grossMoment, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGrossCG(FlatBufferBuilder $builder, $grossCG)
    {
        $builder->addDoubleX(35, $grossCG, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLandingWeight(FlatBufferBuilder $builder, $landingWeight)
    {
        $builder->addDoubleX(36, $landingWeight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLandingMoment(FlatBufferBuilder $builder, $landingMoment)
    {
        $builder->addDoubleX(37, $landingMoment, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLandingCG(FlatBufferBuilder $builder, $landingCG)
    {
        $builder->addDoubleX(38, $landingCG, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCargoBayFSMin(FlatBufferBuilder $builder, $cargoBayFSMin)
    {
        $builder->addIntX(39, $cargoBayFSMin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCargoBayFSMax(FlatBufferBuilder $builder, $cargoBayFSMax)
    {
        $builder->addIntX(40, $cargoBayFSMax, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCargoBayWidth(FlatBufferBuilder $builder, $cargoBayWidth)
    {
        $builder->addDoubleX(41, $cargoBayWidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(42, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(43, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(44, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(45, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(46, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(47, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(48, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(49, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(50, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAirLoadPlan_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAirLoadPlan_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRL");
    }
}
