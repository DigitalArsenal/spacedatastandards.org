<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Provides information concerning search and rescue operations and other situations involving personnel recovery.
class PersonnelRecovery_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return PersonnelRecovery_Abridged
     */
    public static function getRootAsPersonnelRecovery_Abridged(ByteBuffer $bb)
    {
        $obj = new PersonnelRecovery_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function PersonnelRecovery_AbridgedIdentifier()
    {
        return "PERS";
    }

    public static function PersonnelRecovery_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::PersonnelRecovery_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return PersonnelRecovery_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: PERSONNEL_RECOVERY-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies the type of incident resulting in a recovery or evacuation mission.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Emergency Type (e.g. NO STATEMENT, DOWN AIRCRAFT, MAN IN WATER, DITCHING, BAILOUT, DISTRESSED VEHICLE, GROUND INCIDENT, MEDICAL, ISOLATED PERSONS, etc.).
    /// Example: /// Example: MEDICAL
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getType()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time stamp of the original personnel recovery message, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-10-15T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getMsgTime()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// UUID identifying the Personnel Recovery  mission, which should remain the same on subsequent posts related to the same recovery mission.
    /// Example: /// Example: RECOV-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getRecovId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of a weather report associated with this recovery.
    /// Example: /// Example: WEATHER_REPORT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdWeatherReport()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 75.1234
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPickupLat()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 175.1234
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPickupLon()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point eight below ellipsoid.
    /// Example: /// Example: 30.1234
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPickupAlt()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Flag indicating the cancellation of this recovery.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getTermInd()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The confirmation status of the isolated personnel identity. Intended as, but not constrained to, MIL-STD-6016 J6.1 Authentication Status, Isolated Personnel (NO STATEMENT, AUTHENTICATED, NOT AUTHENTICATED, AUTHENTICATED UNDER DURESS, NOT APPLICABLE):
    /// AUTHENTICATED:  Confirmed Friend
    /// NOT AUTHENTICATED: Unconfirmed status
    /// AUTHENTICATED UNDER DURESS:  Authentication comprised by hostiles.
    /// NOT APPLICABLE:  Authentication not required.
    /// Example: /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAuthStatus()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The count of persons requiring recovery.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumPersons()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The military classification of the personnel to be recovered. Intended as, but not constrained to, MIL-STD-6016 J6.1 Isolated Personnel Classification (NO STATEMENT, MILITARY, GOVERNMENT CIVILIAN, GOVERNMENT CONTRACTOR, CIVILIAN, MULTIPLE CLASSIFICATIONS).
    /// Example: /// Example: CIVILIAN
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getMilClass()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The country of origin or political entity of an isolated person subject to rescue or evacuation. If natAlliance is set to 126, then natAlliance1 must be non 0. If natAlliance is any number other than 126, then natAlliance1 will be set to 0 regardless. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s).
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNatAlliance()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Extended country of origin or political entity of an isolated person subject to rescue or evacuation. Specify an entry here only if natAlliance is 126. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s), 1.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNatAlliance1()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The survivor service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVIILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
    /// Example: /// Example: NEUTRAL CIVILIAN
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getIdentity()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
    /// Example: /// Example: LL PHONE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getCommEq1()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
    /// Example: /// Example: LL PHONE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getCommEq2()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
    /// Example: /// Example: LL PHONE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getCommEq3()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Transmit voice frequency in 5Hz increments.
    /// Example: /// Example: 5.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTxFreq()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Receive voice frequency in 5Hz increments. This field will auto populate with the txFreq value if the post element is null.
    /// Example: /// Example: 5.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRxFreq()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Number of littered personnel requiring recovery.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumNonAmbulatory()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of ambulatory personnel requiring recovery.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumAmbulatory()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of injured, but ambulatory, personnel requiring recovery.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumAmbulatoryInjured()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Survivor radio equipment. Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Type (NO STATEMENT, PRQ7SEL, PRC90, PRC112, PRC112B B1, PRC112C, PRC112D, PRC148 MBITR, PRC148 JEM, PRC149, PRC152, ACRPLB, OTHER).
    /// Example: /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getSurvivorRadio()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Preloaded message conveying the situation confronting the isolated person(s). Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Messages (e.g. INJURED CANT MOVE NO KNOWN HOSTILES, INJURED CANT MOVE HOSTILES NEARBY, UNINJURED CANT MOVE HOSTILES NEARBY, UNINJURED NO KNOWN HOSTILES, INJURED LIMITED MOBILITY).
    /// Example: /// Example: UNINJURED CANT MOVE HOSTILES NEARBY
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSurvivorMessages()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating whether a radio identifier is reported.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getBeaconInd()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The call sign of the personnel to be recovered.
    /// Example: /// Example: BADGER
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getCallSign()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional specific messages received from survivor.
    /// Example: /// Example: Additional message from survivor.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getTextMsg()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mechanism used to verify the survivors identity.
    /// Example: /// Example: PASSPORT
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getAuthMethod()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getObjectiveAreaInfo()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getExecutionInfo()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \PersonnelRecovery_Abridged_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startPersonnelRecovery_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(38);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return PersonnelRecovery_Abridged
     */
    public static function createPersonnelRecovery_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $type, $msgTime, $recovId, $idWeatherReport, $pickupLat, $pickupLon, $pickupAlt, $termInd, $authStatus, $numPersons, $milClass, $natAlliance, $natAlliance1, $identity, $commEq1, $commEq2, $commEq3, $txFreq, $rxFreq, $numNonAmbulatory, $numAmbulatory, $numAmbulatoryInjured, $survivorRadio, $survivorMessages, $beaconInd, $callSign, $textMsg, $authMethod, $objectiveAreaInfo, $executionInfo, $origNetwork, $createdAt, $createdBy, $source, $origin, $dataMode)
    {
        $builder->startObject(38);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addType($builder, $type);
        self::addMsgTime($builder, $msgTime);
        self::addRecovId($builder, $recovId);
        self::addIdWeatherReport($builder, $idWeatherReport);
        self::addPickupLat($builder, $pickupLat);
        self::addPickupLon($builder, $pickupLon);
        self::addPickupAlt($builder, $pickupAlt);
        self::addTermInd($builder, $termInd);
        self::addAuthStatus($builder, $authStatus);
        self::addNumPersons($builder, $numPersons);
        self::addMilClass($builder, $milClass);
        self::addNatAlliance($builder, $natAlliance);
        self::addNatAlliance1($builder, $natAlliance1);
        self::addIdentity($builder, $identity);
        self::addCommEq1($builder, $commEq1);
        self::addCommEq2($builder, $commEq2);
        self::addCommEq3($builder, $commEq3);
        self::addTxFreq($builder, $txFreq);
        self::addRxFreq($builder, $rxFreq);
        self::addNumNonAmbulatory($builder, $numNonAmbulatory);
        self::addNumAmbulatory($builder, $numAmbulatory);
        self::addNumAmbulatoryInjured($builder, $numAmbulatoryInjured);
        self::addSurvivorRadio($builder, $survivorRadio);
        self::addSurvivorMessages($builder, $survivorMessages);
        self::addBeaconInd($builder, $beaconInd);
        self::addCallSign($builder, $callSign);
        self::addTextMsg($builder, $textMsg);
        self::addAuthMethod($builder, $authMethod);
        self::addObjectiveAreaInfo($builder, $objectiveAreaInfo);
        self::addExecutionInfo($builder, $executionInfo);
        self::addOrigNetwork($builder, $origNetwork);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(2, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsgTime(FlatBufferBuilder $builder, $msgTime)
    {
        $builder->addOffsetX(3, $msgTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRecovId(FlatBufferBuilder $builder, $recovId)
    {
        $builder->addOffsetX(4, $recovId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdWeatherReport(FlatBufferBuilder $builder, $idWeatherReport)
    {
        $builder->addOffsetX(5, $idWeatherReport, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPickupLat(FlatBufferBuilder $builder, $pickupLat)
    {
        $builder->addDoubleX(6, $pickupLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPickupLon(FlatBufferBuilder $builder, $pickupLon)
    {
        $builder->addDoubleX(7, $pickupLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPickupAlt(FlatBufferBuilder $builder, $pickupAlt)
    {
        $builder->addDoubleX(8, $pickupAlt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addTermInd(FlatBufferBuilder $builder, $termInd)
    {
        $builder->addBoolX(9, $termInd, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAuthStatus(FlatBufferBuilder $builder, $authStatus)
    {
        $builder->addOffsetX(10, $authStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumPersons(FlatBufferBuilder $builder, $numPersons)
    {
        $builder->addIntX(11, $numPersons, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMilClass(FlatBufferBuilder $builder, $milClass)
    {
        $builder->addOffsetX(12, $milClass, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNatAlliance(FlatBufferBuilder $builder, $natAlliance)
    {
        $builder->addIntX(13, $natAlliance, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNatAlliance1(FlatBufferBuilder $builder, $natAlliance1)
    {
        $builder->addIntX(14, $natAlliance1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdentity(FlatBufferBuilder $builder, $identity)
    {
        $builder->addOffsetX(15, $identity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCommEq1(FlatBufferBuilder $builder, $commEq1)
    {
        $builder->addOffsetX(16, $commEq1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCommEq2(FlatBufferBuilder $builder, $commEq2)
    {
        $builder->addOffsetX(17, $commEq2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCommEq3(FlatBufferBuilder $builder, $commEq3)
    {
        $builder->addOffsetX(18, $commEq3, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTxFreq(FlatBufferBuilder $builder, $txFreq)
    {
        $builder->addDoubleX(19, $txFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRxFreq(FlatBufferBuilder $builder, $rxFreq)
    {
        $builder->addDoubleX(20, $rxFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumNonAmbulatory(FlatBufferBuilder $builder, $numNonAmbulatory)
    {
        $builder->addIntX(21, $numNonAmbulatory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumAmbulatory(FlatBufferBuilder $builder, $numAmbulatory)
    {
        $builder->addIntX(22, $numAmbulatory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumAmbulatoryInjured(FlatBufferBuilder $builder, $numAmbulatoryInjured)
    {
        $builder->addIntX(23, $numAmbulatoryInjured, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSurvivorRadio(FlatBufferBuilder $builder, $survivorRadio)
    {
        $builder->addOffsetX(24, $survivorRadio, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSurvivorMessages(FlatBufferBuilder $builder, $survivorMessages)
    {
        $builder->addOffsetX(25, $survivorMessages, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addBeaconInd(FlatBufferBuilder $builder, $beaconInd)
    {
        $builder->addBoolX(26, $beaconInd, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCallSign(FlatBufferBuilder $builder, $callSign)
    {
        $builder->addOffsetX(27, $callSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTextMsg(FlatBufferBuilder $builder, $textMsg)
    {
        $builder->addOffsetX(28, $textMsg, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAuthMethod(FlatBufferBuilder $builder, $authMethod)
    {
        $builder->addOffsetX(29, $authMethod, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjectiveAreaInfo(FlatBufferBuilder $builder, $objectiveAreaInfo)
    {
        $builder->addOffsetX(30, $objectiveAreaInfo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExecutionInfo(FlatBufferBuilder $builder, $executionInfo)
    {
        $builder->addOffsetX(31, $executionInfo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(32, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(33, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(34, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(35, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(36, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(37, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endPersonnelRecovery_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishPersonnelRecovery_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "PERS");
    }
}
