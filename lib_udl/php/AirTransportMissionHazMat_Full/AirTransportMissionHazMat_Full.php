<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection of Hazardous Material information associated with this Air Transport Mission.
class AirTransportMissionHazMat_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AirTransportMissionHazMat_Full
     */
    public static function getRootAsAirTransportMissionHazMat_Full(ByteBuffer $bb)
    {
        $obj = new AirTransportMissionHazMat_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AirTransportMissionHazMat_FullIdentifier()
    {
        return "AIRT";
    }

    public static function AirTransportMissionHazMat_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AirTransportMissionHazMat_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AirTransportMissionHazMat_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The hazMat identifier provided by the originating source.
    /// Example: /// Example: cb6289e0f38534e01291ab6421d42724
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getExtHazMatId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// United Nations proper shipping name of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
    /// Example: /// Example: LITHIUM METAL BATTERIES
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getItemName()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// United Nations number or North America number that identifies hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
    /// Example: /// Example: 0181
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getUnNum()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of pieces of hazardous cargo.
    /// Example: /// Example: 29
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPieces()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Total weight of hazardous cargo, including non-explosive parts, in kilograms.
    /// Example: /// Example: 22.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWeight()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Net explosive weight of the hazardous material, in kilograms.
    /// Example: /// Example: 12.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNetExpWt()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Class and division of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getClassDiv()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Compatibility group code used to specify the controls for the transportation and storage of hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 2
    public function getCgc()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Comma delimited list of Note IDs for compatibility groups, specific to GDSS systems.
    /// Example: /// Example: 4,5,7,8
    /// Constraints: Minimum length = 0, Maximum length = 100
    public function getCgn()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Comma delimited list of Note IDs for Item Class Segregation groups, specific to GDSS systems.
    /// Example: /// Example: 11,12
    /// Constraints: Minimum length = 0, Maximum length = 100
    public function getApplicableNotes()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Itinerary number that identifies where the hazardous material is loaded.
    /// Example: /// Example: 50
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getOnItin()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is loaded.
    /// Example: /// Example: LIRQ
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getOnICAO()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Itinerary number that identifies where the hazardous material is unloaded.
    /// Example: /// Example: 300
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getOffItin()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is unloaded.
    /// Example: /// Example: MBPV
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getOffICAO()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating if hazardous material is associated with this air transport mission. Possible values are P (planned to be associated with the mission) or A (actually associated with the mission). Enum: [P, A].
    /// Example: /// Example: P
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getPlanned()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAirTransportMissionHazMat_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(15);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AirTransportMissionHazMat_Full
     */
    public static function createAirTransportMissionHazMat_Full(FlatBufferBuilder $builder, $extHazMatId, $itemName, $unNum, $pieces, $weight, $netExpWt, $classDiv, $cgc, $cgn, $applicableNotes, $onItin, $onICAO, $offItin, $offICAO, $planned)
    {
        $builder->startObject(15);
        self::addExtHazMatId($builder, $extHazMatId);
        self::addItemName($builder, $itemName);
        self::addUnNum($builder, $unNum);
        self::addPieces($builder, $pieces);
        self::addWeight($builder, $weight);
        self::addNetExpWt($builder, $netExpWt);
        self::addClassDiv($builder, $classDiv);
        self::addCgc($builder, $cgc);
        self::addCgn($builder, $cgn);
        self::addApplicableNotes($builder, $applicableNotes);
        self::addOnItin($builder, $onItin);
        self::addOnICAO($builder, $onICAO);
        self::addOffItin($builder, $offItin);
        self::addOffICAO($builder, $offICAO);
        self::addPlanned($builder, $planned);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExtHazMatId(FlatBufferBuilder $builder, $extHazMatId)
    {
        $builder->addOffsetX(0, $extHazMatId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addItemName(FlatBufferBuilder $builder, $itemName)
    {
        $builder->addOffsetX(1, $itemName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUnNum(FlatBufferBuilder $builder, $unNum)
    {
        $builder->addOffsetX(2, $unNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPieces(FlatBufferBuilder $builder, $pieces)
    {
        $builder->addIntX(3, $pieces, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWeight(FlatBufferBuilder $builder, $weight)
    {
        $builder->addDoubleX(4, $weight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNetExpWt(FlatBufferBuilder $builder, $netExpWt)
    {
        $builder->addDoubleX(5, $netExpWt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addClassDiv(FlatBufferBuilder $builder, $classDiv)
    {
        $builder->addDoubleX(6, $classDiv, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCgc(FlatBufferBuilder $builder, $cgc)
    {
        $builder->addOffsetX(7, $cgc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCgn(FlatBufferBuilder $builder, $cgn)
    {
        $builder->addOffsetX(8, $cgn, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addApplicableNotes(FlatBufferBuilder $builder, $applicableNotes)
    {
        $builder->addOffsetX(9, $applicableNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addOnItin(FlatBufferBuilder $builder, $onItin)
    {
        $builder->addIntX(10, $onItin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOnICAO(FlatBufferBuilder $builder, $onICAO)
    {
        $builder->addOffsetX(11, $onICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addOffItin(FlatBufferBuilder $builder, $offItin)
    {
        $builder->addIntX(12, $offItin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOffICAO(FlatBufferBuilder $builder, $offICAO)
    {
        $builder->addOffsetX(13, $offICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlanned(FlatBufferBuilder $builder, $planned)
    {
        $builder->addOffsetX(14, $planned, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAirTransportMissionHazMat_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAirTransportMissionHazMat_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRT");
    }
}
