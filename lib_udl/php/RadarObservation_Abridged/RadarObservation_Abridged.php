<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
class RadarObservation_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RadarObservation_Abridged
     */
    public static function getRootAsRadarObservation_Abridged(ByteBuffer $bb)
    {
        $obj = new RadarObservation_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function RadarObservation_AbridgedIdentifier()
    {
        return "RADA";
    }

    public static function RadarObservation_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::RadarObservation_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RadarObservation_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: RADAROBSERVATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Ob detection time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getObTime()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional identifier to indicate the specific tasking which produced this observation.
    /// Example: /// Example: TASK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTaskId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTransactionId()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier of the track to which this observation belongs.
    /// Example: /// Example: TRACK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTrackId()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
    /// Example: /// Example: FIRST
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getObPosition()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigObjectId()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigSensorId()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getUct()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// azimuth angle in degrees and topocentric frame.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzimuth()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzimuthUnc()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor azimuth angle bias in degrees.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzimuthBias()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change of the line of sight azimuth in degrees per second.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzimuthRate()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line of sight elevation in degrees and topocentric frame.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevation()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevationUnc()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor elevation bias in degrees.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevationBias()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change of the line of sight elevation in degrees per second.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevationRate()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Target range in km.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRange()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Range accelaration in km/s2.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRangeAccel()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRangeAccelUnc()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the range measurement, in kilometers.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRangeUnc()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor range bias in km.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRangeBias()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change of the line of sight range in km/sec.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRangeRate()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the range rate measurement, in kilometers/second.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRangeRateUnc()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Corrected doppler measurement in meters per second.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDoppler()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the corrected doppler measurement, in meters/second.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDopplerUnc()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line of sight right ascension in degrees and J2000 coordinate frame.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRa()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line of sight declination angle in degrees and J2000 coordinate frame.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeclination()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// X position of target in km in J2000 coordinate frame.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getX()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Y position of target in km in J2000 coordinate frame.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getY()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Z position of target in km in J2000 coordinate frame.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZ()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// X velocity of target in km/sec in J2000 coordinate frame.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getXvel()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Y velocity of target in km/sec in J2000 coordinate frame.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getYvel()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Z velocity of target in km/sec in J2000 coordinate frame.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZvel()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenx()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
    /// Example: /// Example: 40.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSeny()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
    /// Example: /// Example: 35.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenz()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Radar cross section in meters squared for polarization principal.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRcs()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRcsUnc()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Radar cross section in meters squared for orthogonal polarization.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOrthogonalRcs()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOrthogonalRcsUnc()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Signal to noise ratio, in dB.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSnr()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// ID of the beam that produced this observation.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBeam()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor timing bias in seconds.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTimingBias()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: rawFileURI
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getRawFileURI()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \RadarObservation_Abridged_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    /**
     * @return sbyte
     */
    public function getSenReferenceFrame()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \RadarObservation_Abridged_senReferenceFrame_Enum::J2000;
    }

    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getDescriptor()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
    /// Example: /// Example: RADAR
    /// Constraints: No constraints specified.
    public function getType()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRadarObservation_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(59);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RadarObservation_Abridged
     */
    public static function createRadarObservation_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $obTime, $idOnOrbit, $idSensor, $satNo, $taskId, $transactionId, $trackId, $obPosition, $origObjectId, $origSensorId, $uct, $azimuth, $azimuthUnc, $azimuthBias, $azimuthRate, $elevation, $elevationUnc, $elevationBias, $elevationRate, $range, $rangeAccel, $rangeAccelUnc, $rangeUnc, $rangeBias, $rangeRate, $rangeRateUnc, $doppler, $dopplerUnc, $ra, $declination, $x, $y, $z, $xvel, $yvel, $zvel, $senx, $seny, $senz, $rcs, $rcsUnc, $orthogonalRcs, $orthogonalRcsUnc, $snr, $beam, $timingBias, $rawFileURI, $source, $origin, $dataMode, $createdAt, $createdBy, $senReferenceFrame, $descriptor, $origNetwork, $sourceDL, $type)
    {
        $builder->startObject(59);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addObTime($builder, $obTime);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addIdSensor($builder, $idSensor);
        self::addSatNo($builder, $satNo);
        self::addTaskId($builder, $taskId);
        self::addTransactionId($builder, $transactionId);
        self::addTrackId($builder, $trackId);
        self::addObPosition($builder, $obPosition);
        self::addOrigObjectId($builder, $origObjectId);
        self::addOrigSensorId($builder, $origSensorId);
        self::addUct($builder, $uct);
        self::addAzimuth($builder, $azimuth);
        self::addAzimuthUnc($builder, $azimuthUnc);
        self::addAzimuthBias($builder, $azimuthBias);
        self::addAzimuthRate($builder, $azimuthRate);
        self::addElevation($builder, $elevation);
        self::addElevationUnc($builder, $elevationUnc);
        self::addElevationBias($builder, $elevationBias);
        self::addElevationRate($builder, $elevationRate);
        self::addRange($builder, $range);
        self::addRangeAccel($builder, $rangeAccel);
        self::addRangeAccelUnc($builder, $rangeAccelUnc);
        self::addRangeUnc($builder, $rangeUnc);
        self::addRangeBias($builder, $rangeBias);
        self::addRangeRate($builder, $rangeRate);
        self::addRangeRateUnc($builder, $rangeRateUnc);
        self::addDoppler($builder, $doppler);
        self::addDopplerUnc($builder, $dopplerUnc);
        self::addRa($builder, $ra);
        self::addDeclination($builder, $declination);
        self::addX($builder, $x);
        self::addY($builder, $y);
        self::addZ($builder, $z);
        self::addXvel($builder, $xvel);
        self::addYvel($builder, $yvel);
        self::addZvel($builder, $zvel);
        self::addSenx($builder, $senx);
        self::addSeny($builder, $seny);
        self::addSenz($builder, $senz);
        self::addRcs($builder, $rcs);
        self::addRcsUnc($builder, $rcsUnc);
        self::addOrthogonalRcs($builder, $orthogonalRcs);
        self::addOrthogonalRcsUnc($builder, $orthogonalRcsUnc);
        self::addSnr($builder, $snr);
        self::addBeam($builder, $beam);
        self::addTimingBias($builder, $timingBias);
        self::addRawFileURI($builder, $rawFileURI);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSenReferenceFrame($builder, $senReferenceFrame);
        self::addDescriptor($builder, $descriptor);
        self::addOrigNetwork($builder, $origNetwork);
        self::addSourceDL($builder, $sourceDL);
        self::addType($builder, $type);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObTime(FlatBufferBuilder $builder, $obTime)
    {
        $builder->addOffsetX(2, $obTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(3, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(4, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(5, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskId(FlatBufferBuilder $builder, $taskId)
    {
        $builder->addOffsetX(6, $taskId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransactionId(FlatBufferBuilder $builder, $transactionId)
    {
        $builder->addOffsetX(7, $transactionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrackId(FlatBufferBuilder $builder, $trackId)
    {
        $builder->addOffsetX(8, $trackId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObPosition(FlatBufferBuilder $builder, $obPosition)
    {
        $builder->addOffsetX(9, $obPosition, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(10, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSensorId(FlatBufferBuilder $builder, $origSensorId)
    {
        $builder->addOffsetX(11, $origSensorId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addUct(FlatBufferBuilder $builder, $uct)
    {
        $builder->addBoolX(12, $uct, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzimuth(FlatBufferBuilder $builder, $azimuth)
    {
        $builder->addDoubleX(13, $azimuth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzimuthUnc(FlatBufferBuilder $builder, $azimuthUnc)
    {
        $builder->addDoubleX(14, $azimuthUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzimuthBias(FlatBufferBuilder $builder, $azimuthBias)
    {
        $builder->addDoubleX(15, $azimuthBias, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzimuthRate(FlatBufferBuilder $builder, $azimuthRate)
    {
        $builder->addDoubleX(16, $azimuthRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevation(FlatBufferBuilder $builder, $elevation)
    {
        $builder->addDoubleX(17, $elevation, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevationUnc(FlatBufferBuilder $builder, $elevationUnc)
    {
        $builder->addDoubleX(18, $elevationUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevationBias(FlatBufferBuilder $builder, $elevationBias)
    {
        $builder->addDoubleX(19, $elevationBias, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevationRate(FlatBufferBuilder $builder, $elevationRate)
    {
        $builder->addDoubleX(20, $elevationRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRange(FlatBufferBuilder $builder, $range)
    {
        $builder->addDoubleX(21, $range, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRangeAccel(FlatBufferBuilder $builder, $rangeAccel)
    {
        $builder->addDoubleX(22, $rangeAccel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRangeAccelUnc(FlatBufferBuilder $builder, $rangeAccelUnc)
    {
        $builder->addDoubleX(23, $rangeAccelUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRangeUnc(FlatBufferBuilder $builder, $rangeUnc)
    {
        $builder->addDoubleX(24, $rangeUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRangeBias(FlatBufferBuilder $builder, $rangeBias)
    {
        $builder->addDoubleX(25, $rangeBias, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRangeRate(FlatBufferBuilder $builder, $rangeRate)
    {
        $builder->addDoubleX(26, $rangeRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRangeRateUnc(FlatBufferBuilder $builder, $rangeRateUnc)
    {
        $builder->addDoubleX(27, $rangeRateUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDoppler(FlatBufferBuilder $builder, $doppler)
    {
        $builder->addDoubleX(28, $doppler, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDopplerUnc(FlatBufferBuilder $builder, $dopplerUnc)
    {
        $builder->addDoubleX(29, $dopplerUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRa(FlatBufferBuilder $builder, $ra)
    {
        $builder->addDoubleX(30, $ra, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeclination(FlatBufferBuilder $builder, $declination)
    {
        $builder->addDoubleX(31, $declination, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addX(FlatBufferBuilder $builder, $x)
    {
        $builder->addDoubleX(32, $x, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addY(FlatBufferBuilder $builder, $y)
    {
        $builder->addDoubleX(33, $y, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZ(FlatBufferBuilder $builder, $z)
    {
        $builder->addDoubleX(34, $z, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addXvel(FlatBufferBuilder $builder, $xvel)
    {
        $builder->addDoubleX(35, $xvel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addYvel(FlatBufferBuilder $builder, $yvel)
    {
        $builder->addDoubleX(36, $yvel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZvel(FlatBufferBuilder $builder, $zvel)
    {
        $builder->addDoubleX(37, $zvel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenx(FlatBufferBuilder $builder, $senx)
    {
        $builder->addDoubleX(38, $senx, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSeny(FlatBufferBuilder $builder, $seny)
    {
        $builder->addDoubleX(39, $seny, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenz(FlatBufferBuilder $builder, $senz)
    {
        $builder->addDoubleX(40, $senz, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRcs(FlatBufferBuilder $builder, $rcs)
    {
        $builder->addDoubleX(41, $rcs, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRcsUnc(FlatBufferBuilder $builder, $rcsUnc)
    {
        $builder->addDoubleX(42, $rcsUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOrthogonalRcs(FlatBufferBuilder $builder, $orthogonalRcs)
    {
        $builder->addDoubleX(43, $orthogonalRcs, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOrthogonalRcsUnc(FlatBufferBuilder $builder, $orthogonalRcsUnc)
    {
        $builder->addDoubleX(44, $orthogonalRcsUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSnr(FlatBufferBuilder $builder, $snr)
    {
        $builder->addDoubleX(45, $snr, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBeam(FlatBufferBuilder $builder, $beam)
    {
        $builder->addDoubleX(46, $beam, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTimingBias(FlatBufferBuilder $builder, $timingBias)
    {
        $builder->addDoubleX(47, $timingBias, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRawFileURI(FlatBufferBuilder $builder, $rawFileURI)
    {
        $builder->addOffsetX(48, $rawFileURI, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(49, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(50, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(51, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(52, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(53, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addSenReferenceFrame(FlatBufferBuilder $builder, $senReferenceFrame)
    {
        $builder->addSbyteX(54, $senReferenceFrame, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescriptor(FlatBufferBuilder $builder, $descriptor)
    {
        $builder->addOffsetX(55, $descriptor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(56, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(57, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(58, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRadarObservation_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishRadarObservation_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "RADA");
    }
}
