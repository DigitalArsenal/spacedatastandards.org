<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.
class LaunchVehicleDetails_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return LaunchVehicleDetails_Full
     */
    public static function getRootAsLaunchVehicleDetails_Full(ByteBuffer $bb)
    {
        $obj = new LaunchVehicleDetails_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function LaunchVehicleDetails_FullIdentifier()
    {
        return "LAUN";
    }

    public static function LaunchVehicleDetails_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::LaunchVehicleDetails_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return LaunchVehicleDetails_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: LAUNCHVEHICLEDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the parent launch vehicle record.
    /// Example: /// Example: LAUNCHVEHICLE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdLaunchVehicle()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Vehicle variant.
    /// Example: /// Example: Example-variant
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getVariant()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Vehicle minor variant.
    /// Example: /// Example: Example-minor-variant
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getMinorVariant()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Vehicle category.
    /// Example: /// Example: Example-category
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getCategory()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID of the organization that manufactures the launch vehicle.
    /// Example: /// Example: MANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getManufacturerOrgId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Vehicle launch prefix.
    /// Example: /// Example: AX011
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getLaunchPrefix()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Vehicle family.
    /// Example: /// Example: Example-family
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getFamily()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Propellant type.
    /// Example: /// Example: Nitrogen
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getPropellant()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Oxidizer type.
    /// Example: /// Example: Bromine
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOxidizer()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Vehicle length in meters.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLength()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Vehicle diameter in meters.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDiameter()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Vehicle total mass at launch time in kg (including all boosters).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLaunchMass()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum vehicle payload mass to GEO orbit in kg.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGeoPayloadMass()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Max vehicle payload mass to Geo-Transfer Orbit in kg.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGtoPayloadMass()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Max vehicle payload mass to LEO orbit in kg.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLeoPayloadMass()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Max vehicle payload mass to Sun-Synchronous Orbit in kg.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSsoPayloadMass()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Vehicle fairing length in meters.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFairingLength()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Name of the fairing.
    /// Example: /// Example: Example-fairing-name
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getFairingName()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Vehicle fairing maximum external diameter in meters.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFairingExternalDiameter()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Vehicle fairing maximum internal diameter in meters.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFairingInternalDiameter()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Vehicle fairing mass in kg.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFairingMass()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fairing material.
    /// Example: /// Example: Example-fairing-material
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getFairingMaterial()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Vehicle maximum acceleration load in g.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxAccelLoad()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Vehicle maximum payload lateral frequency in Hz.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxPayloadFreqLat()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Vehicle maximum payload longitudinal frequency in Hz.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxPayloadFreqLon()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Vehicle maximum acoustic level in dB.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxAcousticLevel()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Vehicle maximum acoustic level range in Hz.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxAcousticLevelRange()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Vehicle overall sound pressure level in dB.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSoundPressureLevel()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Vehicle maximum flight shock force in g.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxFlightShockForce()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Vehicle maximum flight shock frequency in Hz.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxFlightShockFreq()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Vehicle fairing maximum pressure change in kPa/sec.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxFairingPressureChange()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Launch vehicle estimated launch price in US dollars.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEstLaunchPrice()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Launch vehicle typical estimated launch price in US dollars.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEstLaunchPriceTypical()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGtoInj3SigAccuracyApogeeTarget()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGtoInj3SigAccuracyApogeeMargin()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGtoInj3SigAccuracyPerigeeTarget()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGtoInj3SigAccuracyPerigeeMargin()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGtoInj3SigAccuracyInclinationTarget()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGtoInj3SigAccuracyInclinationMargin()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Launch vehicle attitude accuracy (degrees).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAttitudeAccuracy()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Launch vehicle payload separation rate in m/s.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPayloadSeparationRate()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Launch vehicle deployment rotation rate in RPM.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeploymentRotationRate()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional URL for additional information on the vehicle.
    /// Example: /// Example: Example URL
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getSourceURL()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Notes/Description of the launch vehicle.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getNotes()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Notes/Description of the launch vehicle fairing.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getFairingNotes()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Notes/Description of the launch vehicle payload.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getPayloadNotes()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \LaunchVehicleDetails_Full_dataMode_Enum::REAL;
    }

    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTags($j)
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTagsLength()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getManufacturerOrg()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startLaunchVehicleDetails_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(58);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return LaunchVehicleDetails_Full
     */
    public static function createLaunchVehicleDetails_Full(FlatBufferBuilder $builder, $id, $idLaunchVehicle, $classificationMarking, $variant, $minorVariant, $category, $manufacturerOrgId, $launchPrefix, $family, $propellant, $oxidizer, $length, $diameter, $launchMass, $geoPayloadMass, $gtoPayloadMass, $leoPayloadMass, $ssoPayloadMass, $fairingLength, $fairingName, $fairingExternalDiameter, $fairingInternalDiameter, $fairingMass, $fairingMaterial, $maxAccelLoad, $maxPayloadFreqLat, $maxPayloadFreqLon, $maxAcousticLevel, $maxAcousticLevelRange, $soundPressureLevel, $maxFlightShockForce, $maxFlightShockFreq, $maxFairingPressureChange, $estLaunchPrice, $estLaunchPriceTypical, $gtoInj3SigAccuracyApogeeTarget, $gtoInj3SigAccuracyApogeeMargin, $gtoInj3SigAccuracyPerigeeTarget, $gtoInj3SigAccuracyPerigeeMargin, $gtoInj3SigAccuracyInclinationTarget, $gtoInj3SigAccuracyInclinationMargin, $attitudeAccuracy, $payloadSeparationRate, $deploymentRotationRate, $sourceURL, $notes, $fairingNotes, $payloadNotes, $createdAt, $createdBy, $updatedAt, $updatedBy, $source, $origin, $origNetwork, $dataMode, $tags, $manufacturerOrg)
    {
        $builder->startObject(58);
        self::addId($builder, $id);
        self::addIdLaunchVehicle($builder, $idLaunchVehicle);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addVariant($builder, $variant);
        self::addMinorVariant($builder, $minorVariant);
        self::addCategory($builder, $category);
        self::addManufacturerOrgId($builder, $manufacturerOrgId);
        self::addLaunchPrefix($builder, $launchPrefix);
        self::addFamily($builder, $family);
        self::addPropellant($builder, $propellant);
        self::addOxidizer($builder, $oxidizer);
        self::addLength($builder, $length);
        self::addDiameter($builder, $diameter);
        self::addLaunchMass($builder, $launchMass);
        self::addGeoPayloadMass($builder, $geoPayloadMass);
        self::addGtoPayloadMass($builder, $gtoPayloadMass);
        self::addLeoPayloadMass($builder, $leoPayloadMass);
        self::addSsoPayloadMass($builder, $ssoPayloadMass);
        self::addFairingLength($builder, $fairingLength);
        self::addFairingName($builder, $fairingName);
        self::addFairingExternalDiameter($builder, $fairingExternalDiameter);
        self::addFairingInternalDiameter($builder, $fairingInternalDiameter);
        self::addFairingMass($builder, $fairingMass);
        self::addFairingMaterial($builder, $fairingMaterial);
        self::addMaxAccelLoad($builder, $maxAccelLoad);
        self::addMaxPayloadFreqLat($builder, $maxPayloadFreqLat);
        self::addMaxPayloadFreqLon($builder, $maxPayloadFreqLon);
        self::addMaxAcousticLevel($builder, $maxAcousticLevel);
        self::addMaxAcousticLevelRange($builder, $maxAcousticLevelRange);
        self::addSoundPressureLevel($builder, $soundPressureLevel);
        self::addMaxFlightShockForce($builder, $maxFlightShockForce);
        self::addMaxFlightShockFreq($builder, $maxFlightShockFreq);
        self::addMaxFairingPressureChange($builder, $maxFairingPressureChange);
        self::addEstLaunchPrice($builder, $estLaunchPrice);
        self::addEstLaunchPriceTypical($builder, $estLaunchPriceTypical);
        self::addGtoInj3SigAccuracyApogeeTarget($builder, $gtoInj3SigAccuracyApogeeTarget);
        self::addGtoInj3SigAccuracyApogeeMargin($builder, $gtoInj3SigAccuracyApogeeMargin);
        self::addGtoInj3SigAccuracyPerigeeTarget($builder, $gtoInj3SigAccuracyPerigeeTarget);
        self::addGtoInj3SigAccuracyPerigeeMargin($builder, $gtoInj3SigAccuracyPerigeeMargin);
        self::addGtoInj3SigAccuracyInclinationTarget($builder, $gtoInj3SigAccuracyInclinationTarget);
        self::addGtoInj3SigAccuracyInclinationMargin($builder, $gtoInj3SigAccuracyInclinationMargin);
        self::addAttitudeAccuracy($builder, $attitudeAccuracy);
        self::addPayloadSeparationRate($builder, $payloadSeparationRate);
        self::addDeploymentRotationRate($builder, $deploymentRotationRate);
        self::addSourceURL($builder, $sourceURL);
        self::addNotes($builder, $notes);
        self::addFairingNotes($builder, $fairingNotes);
        self::addPayloadNotes($builder, $payloadNotes);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        self::addTags($builder, $tags);
        self::addManufacturerOrg($builder, $manufacturerOrg);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdLaunchVehicle(FlatBufferBuilder $builder, $idLaunchVehicle)
    {
        $builder->addOffsetX(1, $idLaunchVehicle, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(2, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVariant(FlatBufferBuilder $builder, $variant)
    {
        $builder->addOffsetX(3, $variant, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMinorVariant(FlatBufferBuilder $builder, $minorVariant)
    {
        $builder->addOffsetX(4, $minorVariant, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCategory(FlatBufferBuilder $builder, $category)
    {
        $builder->addOffsetX(5, $category, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addManufacturerOrgId(FlatBufferBuilder $builder, $manufacturerOrgId)
    {
        $builder->addOffsetX(6, $manufacturerOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchPrefix(FlatBufferBuilder $builder, $launchPrefix)
    {
        $builder->addOffsetX(7, $launchPrefix, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFamily(FlatBufferBuilder $builder, $family)
    {
        $builder->addOffsetX(8, $family, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPropellant(FlatBufferBuilder $builder, $propellant)
    {
        $builder->addOffsetX(9, $propellant, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOxidizer(FlatBufferBuilder $builder, $oxidizer)
    {
        $builder->addOffsetX(10, $oxidizer, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLength(FlatBufferBuilder $builder, $length)
    {
        $builder->addDoubleX(11, $length, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDiameter(FlatBufferBuilder $builder, $diameter)
    {
        $builder->addDoubleX(12, $diameter, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLaunchMass(FlatBufferBuilder $builder, $launchMass)
    {
        $builder->addDoubleX(13, $launchMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGeoPayloadMass(FlatBufferBuilder $builder, $geoPayloadMass)
    {
        $builder->addDoubleX(14, $geoPayloadMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGtoPayloadMass(FlatBufferBuilder $builder, $gtoPayloadMass)
    {
        $builder->addDoubleX(15, $gtoPayloadMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLeoPayloadMass(FlatBufferBuilder $builder, $leoPayloadMass)
    {
        $builder->addDoubleX(16, $leoPayloadMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSsoPayloadMass(FlatBufferBuilder $builder, $ssoPayloadMass)
    {
        $builder->addDoubleX(17, $ssoPayloadMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFairingLength(FlatBufferBuilder $builder, $fairingLength)
    {
        $builder->addDoubleX(18, $fairingLength, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFairingName(FlatBufferBuilder $builder, $fairingName)
    {
        $builder->addOffsetX(19, $fairingName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFairingExternalDiameter(FlatBufferBuilder $builder, $fairingExternalDiameter)
    {
        $builder->addDoubleX(20, $fairingExternalDiameter, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFairingInternalDiameter(FlatBufferBuilder $builder, $fairingInternalDiameter)
    {
        $builder->addDoubleX(21, $fairingInternalDiameter, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFairingMass(FlatBufferBuilder $builder, $fairingMass)
    {
        $builder->addDoubleX(22, $fairingMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFairingMaterial(FlatBufferBuilder $builder, $fairingMaterial)
    {
        $builder->addOffsetX(23, $fairingMaterial, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxAccelLoad(FlatBufferBuilder $builder, $maxAccelLoad)
    {
        $builder->addDoubleX(24, $maxAccelLoad, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxPayloadFreqLat(FlatBufferBuilder $builder, $maxPayloadFreqLat)
    {
        $builder->addDoubleX(25, $maxPayloadFreqLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxPayloadFreqLon(FlatBufferBuilder $builder, $maxPayloadFreqLon)
    {
        $builder->addDoubleX(26, $maxPayloadFreqLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxAcousticLevel(FlatBufferBuilder $builder, $maxAcousticLevel)
    {
        $builder->addDoubleX(27, $maxAcousticLevel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxAcousticLevelRange(FlatBufferBuilder $builder, $maxAcousticLevelRange)
    {
        $builder->addDoubleX(28, $maxAcousticLevelRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSoundPressureLevel(FlatBufferBuilder $builder, $soundPressureLevel)
    {
        $builder->addDoubleX(29, $soundPressureLevel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxFlightShockForce(FlatBufferBuilder $builder, $maxFlightShockForce)
    {
        $builder->addDoubleX(30, $maxFlightShockForce, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxFlightShockFreq(FlatBufferBuilder $builder, $maxFlightShockFreq)
    {
        $builder->addDoubleX(31, $maxFlightShockFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxFairingPressureChange(FlatBufferBuilder $builder, $maxFairingPressureChange)
    {
        $builder->addDoubleX(32, $maxFairingPressureChange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEstLaunchPrice(FlatBufferBuilder $builder, $estLaunchPrice)
    {
        $builder->addDoubleX(33, $estLaunchPrice, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEstLaunchPriceTypical(FlatBufferBuilder $builder, $estLaunchPriceTypical)
    {
        $builder->addDoubleX(34, $estLaunchPriceTypical, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGtoInj3SigAccuracyApogeeTarget(FlatBufferBuilder $builder, $gtoInj3SigAccuracyApogeeTarget)
    {
        $builder->addDoubleX(35, $gtoInj3SigAccuracyApogeeTarget, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGtoInj3SigAccuracyApogeeMargin(FlatBufferBuilder $builder, $gtoInj3SigAccuracyApogeeMargin)
    {
        $builder->addDoubleX(36, $gtoInj3SigAccuracyApogeeMargin, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGtoInj3SigAccuracyPerigeeTarget(FlatBufferBuilder $builder, $gtoInj3SigAccuracyPerigeeTarget)
    {
        $builder->addDoubleX(37, $gtoInj3SigAccuracyPerigeeTarget, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGtoInj3SigAccuracyPerigeeMargin(FlatBufferBuilder $builder, $gtoInj3SigAccuracyPerigeeMargin)
    {
        $builder->addDoubleX(38, $gtoInj3SigAccuracyPerigeeMargin, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGtoInj3SigAccuracyInclinationTarget(FlatBufferBuilder $builder, $gtoInj3SigAccuracyInclinationTarget)
    {
        $builder->addDoubleX(39, $gtoInj3SigAccuracyInclinationTarget, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGtoInj3SigAccuracyInclinationMargin(FlatBufferBuilder $builder, $gtoInj3SigAccuracyInclinationMargin)
    {
        $builder->addDoubleX(40, $gtoInj3SigAccuracyInclinationMargin, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAttitudeAccuracy(FlatBufferBuilder $builder, $attitudeAccuracy)
    {
        $builder->addDoubleX(41, $attitudeAccuracy, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPayloadSeparationRate(FlatBufferBuilder $builder, $payloadSeparationRate)
    {
        $builder->addDoubleX(42, $payloadSeparationRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeploymentRotationRate(FlatBufferBuilder $builder, $deploymentRotationRate)
    {
        $builder->addDoubleX(43, $deploymentRotationRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceURL(FlatBufferBuilder $builder, $sourceURL)
    {
        $builder->addOffsetX(44, $sourceURL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNotes(FlatBufferBuilder $builder, $notes)
    {
        $builder->addOffsetX(45, $notes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFairingNotes(FlatBufferBuilder $builder, $fairingNotes)
    {
        $builder->addOffsetX(46, $fairingNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPayloadNotes(FlatBufferBuilder $builder, $payloadNotes)
    {
        $builder->addOffsetX(47, $payloadNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(48, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(49, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(50, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(51, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(52, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(53, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(54, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(55, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTags(FlatBufferBuilder $builder, $tags)
    {
        $builder->addOffsetX(56, $tags, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTagsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTagsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addManufacturerOrg(FlatBufferBuilder $builder, $manufacturerOrg)
    {
        $builder->addOffsetX(57, $manufacturerOrg, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endLaunchVehicleDetails_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishLaunchVehicleDetails_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "LAUN");
    }
}
