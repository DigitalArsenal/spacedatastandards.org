<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle (ECP) Sensors.  SDR contains sensor status telemetry and raw dosimeter measurements of the space environment.
class ECPSDR_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return ECPSDR_Full
     */
    public static function getRootAsECPSDR_Full(ByteBuffer $bb)
    {
        $obj = new ECPSDR_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function ECPSDR_FullIdentifier()
    {
        return "ECPS";
    }

    public static function ECPSDR_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ECPSDR_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return ECPSDR_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ECPSDR-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the on-orbit satellite hosting the sensor.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/catalog number of the on-orbit satellite hosting the sensor.
    /// Example: /// Example: 101
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOrigObjectId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigSensorId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of data associated with this record (STANDARD, TRANSIENT).
    /// Example: /// Example: STANDARD
    /// Constraints: Minimum length = 1, Maximum length = 12
    public function getType()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getMsgTime()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time of the observation, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getObTime()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getRetransmit()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The sensor mode associated with this measurements (NORMAL, TEST).
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 0, Maximum length = 12
    public function getSenMode()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getDosBias()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAsl5VCurrMon()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getDsl5VCurrMon()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Power supply temperature monitor.  This is sensor status telemetry.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPsTempMon()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCdsPlateVMon()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// CDS reference voltage monitor.  See vRef for conversion factor to Volts.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCdsRefVMon()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Unitless sensor mounting plate temperature.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMpTemp()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getVRef()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Photodiode 1 signal level.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPd1SigLev()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Photodiode 2 signal level.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPd2SigLev()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of ESD triggers, low byte of 2-byte counter.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getEsdTrigCountL()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of ESD triggers, high byte of 2-byte counter.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getEsdTrigCountH()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getLowLetL()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getLowLetM()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMedLet1L()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMedLet1M()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMedLet2L()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMedLet2M()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMedLet3L()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMedLet3M()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMedLet4L()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMedLet4M()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getHiLetL()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getHiLetM()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSurfDosL()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSurfDosM()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSurfDosH()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSurfDosChargeL()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSurfDosChargeH()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Surface dosimeter status byte.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSurfDosStat()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// CDS throttle number of seconds between CDS transient capture readouts.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCdsThrottle()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCdsThreshold()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getChecksum()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Array of 144 digitized samples of ESD waveform for transient packets.
    /// Example: /// Example: [1, 2, 3]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTransientData($j)
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTransientDataLength()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \ECPSDR_Full_dataMode_Enum::REAL;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getOnOrbit()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startECPSDR_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(55);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return ECPSDR_Full
     */
    public static function createECPSDR_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $idOnOrbit, $satNo, $origObjectId, $idSensor, $origSensorId, $type, $msgTime, $obTime, $retransmit, $senMode, $dosBias, $asl5VCurrMon, $dsl5VCurrMon, $psTempMon, $cdsPlateVMon, $cdsRefVMon, $mpTemp, $vRef, $pd1SigLev, $pd2SigLev, $esdTrigCountL, $esdTrigCountH, $lowLetL, $lowLetM, $medLet1L, $medLet1M, $medLet2L, $medLet2M, $medLet3L, $medLet3M, $medLet4L, $medLet4M, $hiLetL, $hiLetM, $surfDosL, $surfDosM, $surfDosH, $surfDosChargeL, $surfDosChargeH, $surfDosStat, $cdsThrottle, $cdsThreshold, $checksum, $transientData, $createdAt, $createdBy, $updatedAt, $updatedBy, $source, $origin, $origNetwork, $dataMode, $onOrbit)
    {
        $builder->startObject(55);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addSatNo($builder, $satNo);
        self::addOrigObjectId($builder, $origObjectId);
        self::addIdSensor($builder, $idSensor);
        self::addOrigSensorId($builder, $origSensorId);
        self::addType($builder, $type);
        self::addMsgTime($builder, $msgTime);
        self::addObTime($builder, $obTime);
        self::addRetransmit($builder, $retransmit);
        self::addSenMode($builder, $senMode);
        self::addDosBias($builder, $dosBias);
        self::addAsl5VCurrMon($builder, $asl5VCurrMon);
        self::addDsl5VCurrMon($builder, $dsl5VCurrMon);
        self::addPsTempMon($builder, $psTempMon);
        self::addCdsPlateVMon($builder, $cdsPlateVMon);
        self::addCdsRefVMon($builder, $cdsRefVMon);
        self::addMpTemp($builder, $mpTemp);
        self::addVRef($builder, $vRef);
        self::addPd1SigLev($builder, $pd1SigLev);
        self::addPd2SigLev($builder, $pd2SigLev);
        self::addEsdTrigCountL($builder, $esdTrigCountL);
        self::addEsdTrigCountH($builder, $esdTrigCountH);
        self::addLowLetL($builder, $lowLetL);
        self::addLowLetM($builder, $lowLetM);
        self::addMedLet1L($builder, $medLet1L);
        self::addMedLet1M($builder, $medLet1M);
        self::addMedLet2L($builder, $medLet2L);
        self::addMedLet2M($builder, $medLet2M);
        self::addMedLet3L($builder, $medLet3L);
        self::addMedLet3M($builder, $medLet3M);
        self::addMedLet4L($builder, $medLet4L);
        self::addMedLet4M($builder, $medLet4M);
        self::addHiLetL($builder, $hiLetL);
        self::addHiLetM($builder, $hiLetM);
        self::addSurfDosL($builder, $surfDosL);
        self::addSurfDosM($builder, $surfDosM);
        self::addSurfDosH($builder, $surfDosH);
        self::addSurfDosChargeL($builder, $surfDosChargeL);
        self::addSurfDosChargeH($builder, $surfDosChargeH);
        self::addSurfDosStat($builder, $surfDosStat);
        self::addCdsThrottle($builder, $cdsThrottle);
        self::addCdsThreshold($builder, $cdsThreshold);
        self::addChecksum($builder, $checksum);
        self::addTransientData($builder, $transientData);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        self::addOnOrbit($builder, $onOrbit);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(2, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(3, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(4, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(5, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSensorId(FlatBufferBuilder $builder, $origSensorId)
    {
        $builder->addOffsetX(6, $origSensorId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(7, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsgTime(FlatBufferBuilder $builder, $msgTime)
    {
        $builder->addOffsetX(8, $msgTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObTime(FlatBufferBuilder $builder, $obTime)
    {
        $builder->addOffsetX(9, $obTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addRetransmit(FlatBufferBuilder $builder, $retransmit)
    {
        $builder->addBoolX(10, $retransmit, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSenMode(FlatBufferBuilder $builder, $senMode)
    {
        $builder->addOffsetX(11, $senMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDosBias(FlatBufferBuilder $builder, $dosBias)
    {
        $builder->addIntX(12, $dosBias, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAsl5VCurrMon(FlatBufferBuilder $builder, $asl5VCurrMon)
    {
        $builder->addIntX(13, $asl5VCurrMon, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDsl5VCurrMon(FlatBufferBuilder $builder, $dsl5VCurrMon)
    {
        $builder->addIntX(14, $dsl5VCurrMon, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPsTempMon(FlatBufferBuilder $builder, $psTempMon)
    {
        $builder->addIntX(15, $psTempMon, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCdsPlateVMon(FlatBufferBuilder $builder, $cdsPlateVMon)
    {
        $builder->addIntX(16, $cdsPlateVMon, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCdsRefVMon(FlatBufferBuilder $builder, $cdsRefVMon)
    {
        $builder->addIntX(17, $cdsRefVMon, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMpTemp(FlatBufferBuilder $builder, $mpTemp)
    {
        $builder->addIntX(18, $mpTemp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addVRef(FlatBufferBuilder $builder, $vRef)
    {
        $builder->addIntX(19, $vRef, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPd1SigLev(FlatBufferBuilder $builder, $pd1SigLev)
    {
        $builder->addIntX(20, $pd1SigLev, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPd2SigLev(FlatBufferBuilder $builder, $pd2SigLev)
    {
        $builder->addIntX(21, $pd2SigLev, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addEsdTrigCountL(FlatBufferBuilder $builder, $esdTrigCountL)
    {
        $builder->addIntX(22, $esdTrigCountL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addEsdTrigCountH(FlatBufferBuilder $builder, $esdTrigCountH)
    {
        $builder->addIntX(23, $esdTrigCountH, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addLowLetL(FlatBufferBuilder $builder, $lowLetL)
    {
        $builder->addIntX(24, $lowLetL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addLowLetM(FlatBufferBuilder $builder, $lowLetM)
    {
        $builder->addIntX(25, $lowLetM, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMedLet1L(FlatBufferBuilder $builder, $medLet1L)
    {
        $builder->addIntX(26, $medLet1L, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMedLet1M(FlatBufferBuilder $builder, $medLet1M)
    {
        $builder->addIntX(27, $medLet1M, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMedLet2L(FlatBufferBuilder $builder, $medLet2L)
    {
        $builder->addIntX(28, $medLet2L, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMedLet2M(FlatBufferBuilder $builder, $medLet2M)
    {
        $builder->addIntX(29, $medLet2M, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMedLet3L(FlatBufferBuilder $builder, $medLet3L)
    {
        $builder->addIntX(30, $medLet3L, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMedLet3M(FlatBufferBuilder $builder, $medLet3M)
    {
        $builder->addIntX(31, $medLet3M, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMedLet4L(FlatBufferBuilder $builder, $medLet4L)
    {
        $builder->addIntX(32, $medLet4L, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMedLet4M(FlatBufferBuilder $builder, $medLet4M)
    {
        $builder->addIntX(33, $medLet4M, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addHiLetL(FlatBufferBuilder $builder, $hiLetL)
    {
        $builder->addIntX(34, $hiLetL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addHiLetM(FlatBufferBuilder $builder, $hiLetM)
    {
        $builder->addIntX(35, $hiLetM, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSurfDosL(FlatBufferBuilder $builder, $surfDosL)
    {
        $builder->addIntX(36, $surfDosL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSurfDosM(FlatBufferBuilder $builder, $surfDosM)
    {
        $builder->addIntX(37, $surfDosM, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSurfDosH(FlatBufferBuilder $builder, $surfDosH)
    {
        $builder->addIntX(38, $surfDosH, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSurfDosChargeL(FlatBufferBuilder $builder, $surfDosChargeL)
    {
        $builder->addIntX(39, $surfDosChargeL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSurfDosChargeH(FlatBufferBuilder $builder, $surfDosChargeH)
    {
        $builder->addIntX(40, $surfDosChargeH, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSurfDosStat(FlatBufferBuilder $builder, $surfDosStat)
    {
        $builder->addIntX(41, $surfDosStat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCdsThrottle(FlatBufferBuilder $builder, $cdsThrottle)
    {
        $builder->addIntX(42, $cdsThrottle, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCdsThreshold(FlatBufferBuilder $builder, $cdsThreshold)
    {
        $builder->addIntX(43, $cdsThreshold, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addChecksum(FlatBufferBuilder $builder, $checksum)
    {
        $builder->addIntX(44, $checksum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTransientData(FlatBufferBuilder $builder, $transientData)
    {
        $builder->addOffsetX(45, $transientData, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTransientDataVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTransientDataVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(46, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(47, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(48, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(49, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(50, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(51, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(52, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(53, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOnOrbit(FlatBufferBuilder $builder, $onOrbit)
    {
        $builder->addOffsetX(54, $onOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endECPSDR_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishECPSDR_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ECPS");
    }
}
