<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Beta Version Navigational Obstruction: Information describing navigational obstructions, such as applicable boundaries, locations, heights, data ownership, and currency.
class NavigationalObstruction_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return NavigationalObstruction_Abridged
     */
    public static function getRootAsNavigationalObstruction_Abridged(ByteBuffer $bb)
    {
        $obj = new NavigationalObstruction_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function NavigationalObstruction_AbridgedIdentifier()
    {
        return "NAVI";
    }

    public static function NavigationalObstruction_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::NavigationalObstruction_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return NavigationalObstruction_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Start date of this obstruction data set's currency, in ISO 8601 date-only format.
    /// Example: /// Example: 2024-06-13
    /// Constraints: No constraints specified.
    public function getCycleDate()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of obstacle (e.g. P for point, V for vector, L for line).
    /// Example: /// Example: V
    /// Constraints: Minimum length = 1, Maximum length = 1
    public function getObstacleType()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The ID of this obstacle.
    /// Example: /// Example: 359655
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getObstacleId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional obstacle ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: OU812
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getExternalId()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The original ID for this obstacle.
    /// Example: /// Example: L0000002289
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOrigId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getCountryCode()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Federal Information Processing Standards (FIPS) state/province numeric code of this obstacle's location.
    /// Example: /// Example: 23
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getProvinceCode()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS-84 latitude of this point obstacle, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 46.757211
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPointLat()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of this point obstacle, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -67.759494
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPointLon()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the northeastern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -122.197891
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLineNELon()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 latitude of the northeastern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 49.000584
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLineNELat()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the southwestern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -122.722946
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLineSWLon()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 latitude of the southwestern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 48.507027
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLineSWLat()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// ID of the starting point of a line segment.
    /// Example: /// Example: 359655
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSegStartPoint()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// ID of the end point of a line segment.
    /// Example: /// Example: 359655
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSegEndPoint()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Identifies the sequence number of a line segment.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSegNum()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// FACC (Feature and Attribute Coding Catalog) is a five-character code for encoding real-world entities and objects. The first letter of the code is an alphabetic value from "A" to "Z" which will map to a feature category. The second character will map to a subcategory. Characters three to five are numeric and range from 000 to 999. This value will provide a unit feature type identification within the categories.
    /// Example: /// Example: AT040
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getFacc()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifying code for the type of this point obstacle.
    /// Example: /// Example: 540
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getFeatureCode()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifying code for the type of this point obstacle.
    /// Example: /// Example: 540
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getFeatureType()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type name of point obstacle.
    /// Example: /// Example: PYLON
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getFeatureName()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of this obstacle, corresponding to the FACC (Feature and Attribute Coding Catalog) value.
    /// Example: /// Example: Powerline Pylon, General
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getFeatureDescription()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The World Aeronautical Chart (WAC) identifier for the area in which this obstacle is located.
    /// Example: /// Example: 262
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getWac()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// This obstacle's World Area Code installation number (WAC-INNR).
    /// Example: /// Example: 0409-00039
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getWacINNR()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates if the feature has multiple obstructions (e.g. S = Single, M = Multiple, U = Undetermined).
    /// Example: /// Example: S
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getMultObs()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the number of obstructions associated with a feature.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumObs()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Code representing the mathematical model of Earth used to calculate coordinates for this obstacle (e.g. WGS-84, U for undetermined, etc.).  US Forces use the World Geodetic System 1984 (WGS-84), but also use maps by allied countries with local datums.
    /// Example: /// Example: WGS-84
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getHorizDatumCode()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The height Above Ground Level (AGL) of the point obstacle in feet.
    /// Example: /// Example: 314.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHeightAGL()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The accuracy of the height Above Ground Level (AGL) AGL value for this point obstacle in feet.
    /// Example: /// Example: 30.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHeightAGLAcc()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The height Above Mean Sea Level (AMSL) of the point obstacle in feet.
    /// Example: /// Example: 1154.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHeightMSL()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The accuracy of the height Above Mean Sea Level (AMSL) value for this point obstacle in feet.
    /// Example: /// Example: 34.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHeightMSLAcc()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The elevation at the point obstacle's location in feet.
    /// Example: /// Example: 840.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevation()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The difference between the assigned elevation of this point and its true elevation, in feet.
    /// Example: /// Example: 17.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevationAcc()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The difference between the recorded horizontal coordinates of this point obstacle and its true position, in feet.
    /// Example: /// Example: 8.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHorizAcc()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// When horizontal and/or vertical accuracy requirements cannot be met because of inadequate source material, this code indicates the quality of the data.
    /// Example: /// Example: 0
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getQuality()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Code specifying if this obstacle is lit (e.g. Y = Yes, N = No, U = Unknown).
    /// Example: /// Example: U
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getLightingCode()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The surface material composition code of this point obstacle.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getSurfaceMatCode()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The side or sides of this obstruction feature which produces the greatest reflectivity potential.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getDirectivityCode()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Method used to confirm the existence of this obstacle.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getValidationCode()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The transaction type/code for this obstacle (e.g. "D", "N", "R", "S", "V", "X").
    /// Example: /// Example: V
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getTransactionCode()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Code denoting the action, review, or process that updated this obstacle.
    /// Example: /// Example: OT
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getProcessCode()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates if this obstacle record is Active (A) or Deleted (D).
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getActDelCode()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the agency that produced this obstruction data set.
    /// Example: /// Example: ACME
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getProducer()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The organization that entered obstacle data other than the producer.
    /// Example: /// Example: ACME
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getDerivingOrg()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The organization that deleted this obstacle record.
    /// Example: /// Example: ACME
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getDeletingOrg()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source date of this obstacle data, in ISO 8601 date-only format (ex. YYYY-MM-DD).
    /// Example: /// Example: 2016-04-01
    /// Constraints: No constraints specified.
    public function getSourceDate()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Date this obstacle data was revised, in ISO 8601 date-only format (ex. YYYY-MM-DD).
    /// Example: /// Example: 2020-02-26
    /// Constraints: No constraints specified.
    public function getRevDate()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Date this obstacle was initially added to the data set, in ISO 8601 date-only format (ex. YYYY-MM-DD).
    /// Example: /// Example: 1991-03-28
    /// Constraints: No constraints specified.
    public function getInitRecordDate()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// This field provides an array of keys that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the values array. This array must be the same length as values.
    /// Example: /// Example: ['key1', 'key2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getKeys($j)
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getKeysLength()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// This field provides an array of values that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
    /// Example: /// Example: ['value1', 'value2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getValues($j)
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getValuesLength()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Remarks regarding this obstacle.
    /// Example: /// Example: Obstacle remarks
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getObstacleRemarks()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The date after which this obstruction data set’s currency is stale and should be refreshed, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
    /// Example: /// Example: 2024-07-11
    /// Constraints: No constraints specified.
    public function getNextCycleDate()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Earliest record date possible in this obstruction data set (not the earliest data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD). If null, this data set is assumed to be a full data pull of holdings until the cutoffDate.  If this field is populated, this data set only contains updates since the last baseline data set.
    /// Example: /// Example: 2024-04-23
    /// Constraints: No constraints specified.
    public function getBaselineCutoffDate()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Latest record date possible in this obstruction data set (not the most recent data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD).
    /// Example: /// Example: 2024-05-21
    /// Constraints: No constraints specified.
    public function getCutoffDate()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Aeronautical Information Regulation and Control (AIRAC) cycle of this obstruction data set. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
    /// Example: /// Example: 2406
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAiracCycle()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The baseline Aeronautical Information Regulation and Control (AIRAC) cycle for change sets only. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
    /// Example: /// Example: 2405
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getBaseAiracCycle()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The DoD Standard Country Code designator for the country or political entity that owns the data set associated with this obstruction. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getOwnerCountryCode()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS-84 longitude of the northeastern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 99.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBoundNELon()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 latitude of the northeastern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 29.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBoundNELat()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the southwestern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -144.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBoundSWLon()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 latitude of the southwestern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: -44.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBoundSWLat()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The minimum height Above Ground Level (AGL) of the shortest obstruction contained in this data set, in feet.
    /// Example: /// Example: 20.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMinHeightAGL()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The number of point features associated with this obstruction data set.
    /// Example: /// Example: 21830590
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumPoints()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The number of line features associated with this obstruction data set.
    /// Example: /// Example: 45993
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumLines()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Remarks concerning this obstruction's data set.
    /// Example: /// Example: Data set remarks
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getDataSetRemarks()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the point file associated with this obstruction data set.
    /// Example: /// Example: points.txt
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getPointsFilename()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the line file associated with this obstruction data set.
    /// Example: /// Example: lines.txt
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getLinesFilename()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the vector file associated with this obstruction data set.
    /// Example: /// Example: vectors.txt
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getVectorsFilename()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: Example URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getRawFileURI()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSource()
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(152);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(154);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(156);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \NavigationalObstruction_Abridged_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startNavigationalObstruction_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(77);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return NavigationalObstruction_Abridged
     */
    public static function createNavigationalObstruction_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $cycleDate, $obstacleType, $obstacleId, $externalId, $origId, $countryCode, $provinceCode, $pointLat, $pointLon, $lineNELon, $lineNELat, $lineSWLon, $lineSWLat, $segStartPoint, $segEndPoint, $segNum, $facc, $featureCode, $featureType, $featureName, $featureDescription, $wac, $wacINNR, $multObs, $numObs, $horizDatumCode, $heightAGL, $heightAGLAcc, $heightMSL, $heightMSLAcc, $elevation, $elevationAcc, $horizAcc, $quality, $lightingCode, $surfaceMatCode, $directivityCode, $validationCode, $transactionCode, $processCode, $actDelCode, $producer, $derivingOrg, $deletingOrg, $sourceDate, $revDate, $initRecordDate, $keys, $values, $obstacleRemarks, $nextCycleDate, $baselineCutoffDate, $cutoffDate, $airacCycle, $baseAiracCycle, $ownerCountryCode, $boundNELon, $boundNELat, $boundSWLon, $boundSWLat, $minHeightAGL, $numPoints, $numLines, $dataSetRemarks, $pointsFilename, $linesFilename, $vectorsFilename, $rawFileURI, $createdAt, $createdBy, $sourceDL, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(77);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addCycleDate($builder, $cycleDate);
        self::addObstacleType($builder, $obstacleType);
        self::addObstacleId($builder, $obstacleId);
        self::addExternalId($builder, $externalId);
        self::addOrigId($builder, $origId);
        self::addCountryCode($builder, $countryCode);
        self::addProvinceCode($builder, $provinceCode);
        self::addPointLat($builder, $pointLat);
        self::addPointLon($builder, $pointLon);
        self::addLineNELon($builder, $lineNELon);
        self::addLineNELat($builder, $lineNELat);
        self::addLineSWLon($builder, $lineSWLon);
        self::addLineSWLat($builder, $lineSWLat);
        self::addSegStartPoint($builder, $segStartPoint);
        self::addSegEndPoint($builder, $segEndPoint);
        self::addSegNum($builder, $segNum);
        self::addFacc($builder, $facc);
        self::addFeatureCode($builder, $featureCode);
        self::addFeatureType($builder, $featureType);
        self::addFeatureName($builder, $featureName);
        self::addFeatureDescription($builder, $featureDescription);
        self::addWac($builder, $wac);
        self::addWacINNR($builder, $wacINNR);
        self::addMultObs($builder, $multObs);
        self::addNumObs($builder, $numObs);
        self::addHorizDatumCode($builder, $horizDatumCode);
        self::addHeightAGL($builder, $heightAGL);
        self::addHeightAGLAcc($builder, $heightAGLAcc);
        self::addHeightMSL($builder, $heightMSL);
        self::addHeightMSLAcc($builder, $heightMSLAcc);
        self::addElevation($builder, $elevation);
        self::addElevationAcc($builder, $elevationAcc);
        self::addHorizAcc($builder, $horizAcc);
        self::addQuality($builder, $quality);
        self::addLightingCode($builder, $lightingCode);
        self::addSurfaceMatCode($builder, $surfaceMatCode);
        self::addDirectivityCode($builder, $directivityCode);
        self::addValidationCode($builder, $validationCode);
        self::addTransactionCode($builder, $transactionCode);
        self::addProcessCode($builder, $processCode);
        self::addActDelCode($builder, $actDelCode);
        self::addProducer($builder, $producer);
        self::addDerivingOrg($builder, $derivingOrg);
        self::addDeletingOrg($builder, $deletingOrg);
        self::addSourceDate($builder, $sourceDate);
        self::addRevDate($builder, $revDate);
        self::addInitRecordDate($builder, $initRecordDate);
        self::addKeys($builder, $keys);
        self::addValues($builder, $values);
        self::addObstacleRemarks($builder, $obstacleRemarks);
        self::addNextCycleDate($builder, $nextCycleDate);
        self::addBaselineCutoffDate($builder, $baselineCutoffDate);
        self::addCutoffDate($builder, $cutoffDate);
        self::addAiracCycle($builder, $airacCycle);
        self::addBaseAiracCycle($builder, $baseAiracCycle);
        self::addOwnerCountryCode($builder, $ownerCountryCode);
        self::addBoundNELon($builder, $boundNELon);
        self::addBoundNELat($builder, $boundNELat);
        self::addBoundSWLon($builder, $boundSWLon);
        self::addBoundSWLat($builder, $boundSWLat);
        self::addMinHeightAGL($builder, $minHeightAGL);
        self::addNumPoints($builder, $numPoints);
        self::addNumLines($builder, $numLines);
        self::addDataSetRemarks($builder, $dataSetRemarks);
        self::addPointsFilename($builder, $pointsFilename);
        self::addLinesFilename($builder, $linesFilename);
        self::addVectorsFilename($builder, $vectorsFilename);
        self::addRawFileURI($builder, $rawFileURI);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCycleDate(FlatBufferBuilder $builder, $cycleDate)
    {
        $builder->addOffsetX(2, $cycleDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObstacleType(FlatBufferBuilder $builder, $obstacleType)
    {
        $builder->addOffsetX(3, $obstacleType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObstacleId(FlatBufferBuilder $builder, $obstacleId)
    {
        $builder->addOffsetX(4, $obstacleId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalId(FlatBufferBuilder $builder, $externalId)
    {
        $builder->addOffsetX(5, $externalId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigId(FlatBufferBuilder $builder, $origId)
    {
        $builder->addOffsetX(6, $origId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountryCode(FlatBufferBuilder $builder, $countryCode)
    {
        $builder->addOffsetX(7, $countryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addProvinceCode(FlatBufferBuilder $builder, $provinceCode)
    {
        $builder->addOffsetX(8, $provinceCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPointLat(FlatBufferBuilder $builder, $pointLat)
    {
        $builder->addDoubleX(9, $pointLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPointLon(FlatBufferBuilder $builder, $pointLon)
    {
        $builder->addDoubleX(10, $pointLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLineNELon(FlatBufferBuilder $builder, $lineNELon)
    {
        $builder->addDoubleX(11, $lineNELon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLineNELat(FlatBufferBuilder $builder, $lineNELat)
    {
        $builder->addDoubleX(12, $lineNELat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLineSWLon(FlatBufferBuilder $builder, $lineSWLon)
    {
        $builder->addDoubleX(13, $lineSWLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLineSWLat(FlatBufferBuilder $builder, $lineSWLat)
    {
        $builder->addDoubleX(14, $lineSWLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSegStartPoint(FlatBufferBuilder $builder, $segStartPoint)
    {
        $builder->addIntX(15, $segStartPoint, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSegEndPoint(FlatBufferBuilder $builder, $segEndPoint)
    {
        $builder->addIntX(16, $segEndPoint, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSegNum(FlatBufferBuilder $builder, $segNum)
    {
        $builder->addIntX(17, $segNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFacc(FlatBufferBuilder $builder, $facc)
    {
        $builder->addOffsetX(18, $facc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFeatureCode(FlatBufferBuilder $builder, $featureCode)
    {
        $builder->addOffsetX(19, $featureCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFeatureType(FlatBufferBuilder $builder, $featureType)
    {
        $builder->addOffsetX(20, $featureType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFeatureName(FlatBufferBuilder $builder, $featureName)
    {
        $builder->addOffsetX(21, $featureName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFeatureDescription(FlatBufferBuilder $builder, $featureDescription)
    {
        $builder->addOffsetX(22, $featureDescription, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWac(FlatBufferBuilder $builder, $wac)
    {
        $builder->addOffsetX(23, $wac, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWacINNR(FlatBufferBuilder $builder, $wacINNR)
    {
        $builder->addOffsetX(24, $wacINNR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMultObs(FlatBufferBuilder $builder, $multObs)
    {
        $builder->addOffsetX(25, $multObs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumObs(FlatBufferBuilder $builder, $numObs)
    {
        $builder->addIntX(26, $numObs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHorizDatumCode(FlatBufferBuilder $builder, $horizDatumCode)
    {
        $builder->addOffsetX(27, $horizDatumCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHeightAGL(FlatBufferBuilder $builder, $heightAGL)
    {
        $builder->addDoubleX(28, $heightAGL, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHeightAGLAcc(FlatBufferBuilder $builder, $heightAGLAcc)
    {
        $builder->addDoubleX(29, $heightAGLAcc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHeightMSL(FlatBufferBuilder $builder, $heightMSL)
    {
        $builder->addDoubleX(30, $heightMSL, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHeightMSLAcc(FlatBufferBuilder $builder, $heightMSLAcc)
    {
        $builder->addDoubleX(31, $heightMSLAcc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevation(FlatBufferBuilder $builder, $elevation)
    {
        $builder->addDoubleX(32, $elevation, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevationAcc(FlatBufferBuilder $builder, $elevationAcc)
    {
        $builder->addDoubleX(33, $elevationAcc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHorizAcc(FlatBufferBuilder $builder, $horizAcc)
    {
        $builder->addDoubleX(34, $horizAcc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addQuality(FlatBufferBuilder $builder, $quality)
    {
        $builder->addOffsetX(35, $quality, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLightingCode(FlatBufferBuilder $builder, $lightingCode)
    {
        $builder->addOffsetX(36, $lightingCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSurfaceMatCode(FlatBufferBuilder $builder, $surfaceMatCode)
    {
        $builder->addOffsetX(37, $surfaceMatCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDirectivityCode(FlatBufferBuilder $builder, $directivityCode)
    {
        $builder->addIntX(38, $directivityCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addValidationCode(FlatBufferBuilder $builder, $validationCode)
    {
        $builder->addIntX(39, $validationCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransactionCode(FlatBufferBuilder $builder, $transactionCode)
    {
        $builder->addOffsetX(40, $transactionCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addProcessCode(FlatBufferBuilder $builder, $processCode)
    {
        $builder->addOffsetX(41, $processCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActDelCode(FlatBufferBuilder $builder, $actDelCode)
    {
        $builder->addOffsetX(42, $actDelCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addProducer(FlatBufferBuilder $builder, $producer)
    {
        $builder->addOffsetX(43, $producer, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDerivingOrg(FlatBufferBuilder $builder, $derivingOrg)
    {
        $builder->addOffsetX(44, $derivingOrg, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDeletingOrg(FlatBufferBuilder $builder, $deletingOrg)
    {
        $builder->addOffsetX(45, $deletingOrg, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDate(FlatBufferBuilder $builder, $sourceDate)
    {
        $builder->addOffsetX(46, $sourceDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRevDate(FlatBufferBuilder $builder, $revDate)
    {
        $builder->addOffsetX(47, $revDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addInitRecordDate(FlatBufferBuilder $builder, $initRecordDate)
    {
        $builder->addOffsetX(48, $initRecordDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addKeys(FlatBufferBuilder $builder, $keys)
    {
        $builder->addOffsetX(49, $keys, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createKeysVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startKeysVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addValues(FlatBufferBuilder $builder, $values)
    {
        $builder->addOffsetX(50, $values, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createValuesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startValuesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObstacleRemarks(FlatBufferBuilder $builder, $obstacleRemarks)
    {
        $builder->addOffsetX(51, $obstacleRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNextCycleDate(FlatBufferBuilder $builder, $nextCycleDate)
    {
        $builder->addOffsetX(52, $nextCycleDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBaselineCutoffDate(FlatBufferBuilder $builder, $baselineCutoffDate)
    {
        $builder->addOffsetX(53, $baselineCutoffDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCutoffDate(FlatBufferBuilder $builder, $cutoffDate)
    {
        $builder->addOffsetX(54, $cutoffDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAiracCycle(FlatBufferBuilder $builder, $airacCycle)
    {
        $builder->addIntX(55, $airacCycle, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addBaseAiracCycle(FlatBufferBuilder $builder, $baseAiracCycle)
    {
        $builder->addIntX(56, $baseAiracCycle, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOwnerCountryCode(FlatBufferBuilder $builder, $ownerCountryCode)
    {
        $builder->addOffsetX(57, $ownerCountryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBoundNELon(FlatBufferBuilder $builder, $boundNELon)
    {
        $builder->addDoubleX(58, $boundNELon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBoundNELat(FlatBufferBuilder $builder, $boundNELat)
    {
        $builder->addDoubleX(59, $boundNELat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBoundSWLon(FlatBufferBuilder $builder, $boundSWLon)
    {
        $builder->addDoubleX(60, $boundSWLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBoundSWLat(FlatBufferBuilder $builder, $boundSWLat)
    {
        $builder->addDoubleX(61, $boundSWLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMinHeightAGL(FlatBufferBuilder $builder, $minHeightAGL)
    {
        $builder->addDoubleX(62, $minHeightAGL, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumPoints(FlatBufferBuilder $builder, $numPoints)
    {
        $builder->addIntX(63, $numPoints, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumLines(FlatBufferBuilder $builder, $numLines)
    {
        $builder->addIntX(64, $numLines, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDataSetRemarks(FlatBufferBuilder $builder, $dataSetRemarks)
    {
        $builder->addOffsetX(65, $dataSetRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPointsFilename(FlatBufferBuilder $builder, $pointsFilename)
    {
        $builder->addOffsetX(66, $pointsFilename, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLinesFilename(FlatBufferBuilder $builder, $linesFilename)
    {
        $builder->addOffsetX(67, $linesFilename, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVectorsFilename(FlatBufferBuilder $builder, $vectorsFilename)
    {
        $builder->addOffsetX(68, $vectorsFilename, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRawFileURI(FlatBufferBuilder $builder, $rawFileURI)
    {
        $builder->addOffsetX(69, $rawFileURI, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(70, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(71, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(72, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(73, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(74, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(75, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(76, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endNavigationalObstruction_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishNavigationalObstruction_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "NAVI");
    }
}
