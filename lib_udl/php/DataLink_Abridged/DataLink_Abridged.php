<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Beta Version DataLink: Detailed instructions regarding the operations of data links.
class DataLink_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return DataLink_Abridged
     */
    public static function getRootAsDataLink_Abridged(ByteBuffer $bb)
    {
        $obj = new DataLink_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function DataLink_AbridgedIdentifier()
    {
        return "DATA";
    }

    public static function DataLink_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::DataLink_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return DataLink_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
    /// Example: /// Example: DESERT WIND
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getOpExName()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The identifier of the originator of this message.
    /// Example: /// Example: USCENTCOM
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getOriginator()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The start of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T13:55:43.123Z
    /// Constraints: No constraints specified.
    public function getStartTime()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The end of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision. This may be a relative stop time if used with stopTimeMod.
    /// Example: /// Example: 2024-01-08T13:55:43.123Z
    /// Constraints: No constraints specified.
    public function getStopTime()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A qualifier for the end of the effective time period of this data link message, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
    /// Example: /// Example: AFTER
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getStopTimeMod()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
    /// Example: /// Example: SACEUR 106
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPlanOrigNum()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Provides an additional caveat further identifying the exercise or modifies the exercise nickname.
    /// Example: /// Example: CONTROL
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOpExInfo()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The secondary nickname of the option or the alternative of the operational plan or order.
    /// Example: /// Example: ORANGE
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getOpExInfoAlt()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The unique message identifier assigned by the originator.
    /// Example: /// Example: 1201003
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getSerialNum()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The month in which this message originated.
    /// Example: /// Example: OCT
    /// Constraints: Minimum length = 0, Maximum length = 12
    public function getMonth()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The qualifier which caveats the message status such as AMP (Amplification), CHG (Change), etc.
    /// Example: /// Example: CHG
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getQualifier()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The serial number associated with the message qualifier.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getQualSN()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getReferences($j)
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getReferencesLength()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The identifier for this data link message cancellation.
    /// Example: /// Example: ABSTAT
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getCanxId()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originator of this data link message cancellation.
    /// Example: /// Example: 505 AOC
    /// Constraints: Minimum length = 0, Maximum length = 30
    public function getCanxOriginator()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Timestamp of the data link message cancellation, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T13:55:43.123Z
    /// Constraints: No constraints specified.
    public function getCanxTs()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Serial number assigned to this data link message cancellation.
    /// Example: /// Example: ABC1234567
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getCanxSerialNum()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates any special actions, restrictions, guidance, or information relating to this data link message cancellation.
    /// Example: /// Example: PASEP
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getCanxSpecialNotation()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of NATO Subject Indicator Codes (SIC) or filing numbers of this data link message or document being cancelled.
    /// Example: /// Example: ['RDU', 'X234BS']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCanxSICs($j)
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCanxSICsLength()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The name of the point of contact for this data link message.
    /// Example: /// Example: F. BURNS
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getPocName()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The rank or position of the point of contact for this data link message in a military or civilian organization.
    /// Example: /// Example: MAJ
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getPocRank()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The unit identifier or call sign of the point of contact for this data link message.
    /// Example: /// Example: 4077 MASH
    /// Constraints: Minimum length = 0, Maximum length = 38
    public function getPocCallSign()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The location name of the point of contact for this data link message.
    /// Example: /// Example: CAMP SWAMPY
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getPocLocName()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS84 latitude of the point of contact for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPocLat()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS84 longitude of the point of contact for this data link message, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPocLon()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Array of telephone numbers, radio frequency values, or email addresses of the point of contact for this data link message.
    /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getPocNums($j)
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getPocNumsLength()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The code for the point of reference from which the coordinates and networks are computed.
    /// Example: /// Example: EUR-T
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getGeoDatum()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRefPoints($j)
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRefPointsLength()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getVoiceCoord($j)
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getVoiceCoordLength()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Indicates the data terminal settings the system defaults to, either automatic correlation/decorrelation (AUTO) or manual (MAN).
    /// Example: /// Example: MAN
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getSysDefaultCode()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The correlation window size multiplier to stretch or reduce the window size. Required if sysDefaultCode field is "MAN". Allowable entries are 0.5 to 3.0 in increments of 0.1.
    /// Example: /// Example: 2.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWinSizeMult()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Number added to the basic window calculated from track qualities to ensure that windows still allow valid correlations. Required if sysDefaultCode field is "MAN". Allowable entries are 0.0 to 2.0 in increments of 0.25.
    /// Example: /// Example: 1.25
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWinSizeMin()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Track quality to prevent correlation windows from being unrealistically large. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 3 to 7.
    /// Example: /// Example: 6
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMinTrackQual()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Track quality to prevent correlation windows from being unrealistically small. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 8 to 15.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMaxTrackQual()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Track quality to enter if too many duals involving low track quality tracks are occurring. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 2 to 6.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getResTrackQual()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Maximum difference between the reported course of the remote track and the calculated course of the local track. Required if sysDefaultCode field is "MAN". Allowable entries are 15 to 90 in increments of 15 degrees.
    /// Example: /// Example: 60
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCourseDiff()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Maximum percentage the faster track speed may differ from the slower track speed. Required if sysDefaultCode field is "MAN". Allowable entries are 10 to 100 in increments of 10.
    /// Example: /// Example: 50
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSpeedDiff()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Maximum altitude difference between two air tracks, in thousands of feet. Required if sysDefaultCode field is "MAN". Allowable entires are 5 to 50 in increments of 5000 feet.
    /// Example: /// Example: 20
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAltDiff()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number used for minimum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMinGeoPosQual()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number used for maximum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entires are integers from 1 to 15.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMaxGeoPosQual()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Distance between the common and remote track is to exceed the applicable correlation window for the two tracks in order to be decorrelated. Required if sysDefaultCode field is "MAN". Allowable entries are 1.0 to 2.0 in increments of 0.1.
    /// Example: /// Example: 1.7
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDecorrWinMult()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Number of consecutive remote track reports that must meet the decorrelation criteria before the decorrelation is executed. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getConsecDecorr()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getMultiDuty($j)
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMultiDutyLength()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getOps($j)
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getOpsLength()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Designator of the unit for Joint Range Extension (JRE).
    /// Example: /// Example: CVN-72
    /// Constraints: Minimum length = 0, Maximum length = 30
    public function getJreUnitDes()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Call sign which identifies one or more communications facilities, commands, authorities, or activities for Joint Range Extension (JRE) units.
    /// Example: /// Example: CHARLIE ONE
    /// Constraints: Minimum length = 0, Maximum length = 38
    public function getJreCallSign()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Link-16 octal track number assigned as the primary JTIDS unit address.
    /// Example: /// Example: 71777
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getJrePriAdd()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Link-16 octal track number assigned as the secondary JTIDS unit address.
    /// Example: /// Example: 77771
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getJreSecAdd()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Joint Range Extension (JRE) unit details.
    /// Example: /// Example: JRE details
    /// Constraints: Minimum length = 0, Maximum length = 3000
    public function getJreDetails()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSpecTracks($j)
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSpecTracksLength()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of non-link specific data unit designators.
    /// Example: /// Example: ['CS:GRAY GHOST', 'CS:WHITE WHALE']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getNonLinkUnitDes($j)
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getNonLinkUnitDesLength()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of Link-16 octal track numbers used as the lower limit of a track block.
    /// Example: /// Example: [1234, 2345]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTrackNumBlockLLs($j)
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTrackNumBlockLLsLength()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of defined ranges of Link-11/11B track numbers assigned to a participating unit or reporting unit.
    /// Example: /// Example: ['0200-0300', '0400-4412']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTrackNumBlocks($j)
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTrackNumBlocksLength()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Data link management code word.
    /// Example: /// Example: VICTOR
    /// Constraints: Minimum length = 0, Maximum length = 15
    public function getMgmtCode()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Data link management code word meaning.
    /// Example: /// Example: ORBIT AT POINT BRAVO
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getMgmtCodeMeaning()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag Indicating if formal acknowledgement is required for the particular data link message being sent.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getAckReq()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Array of instructions for acknowledging and the force or units required to acknowledge the data link message being sent.
    /// Example: /// Example: ['AOC EXT 2345', '317 AW']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAckInstUnits($j)
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAckInstUnitsLength()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Markings that define the source material or the original classification authority for this data link message.
    /// Example: /// Example: USJFCOM EXORD SOLID WASTE 98
    /// Constraints: Minimum length = 0, Maximum length = 55
    public function getClassSource()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of codes that indicate the reasons material is classified.
    /// Example: /// Example: ['15C', '15D']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getClassReasons($j)
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getClassReasonsLength()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of markings that provide the literal guidance or dates for the downgrading or declassification of this data link message.
    /// Example: /// Example: ['AT EXERCISE ENDEX', 'DATE:25NOV1997']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDecInstDates($j)
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDecInstDatesLength()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of codes that provide justification for exemption from automatic downgrading or declassification.
    /// Example: /// Example: ['X1', 'X2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDecExemptCodes($j)
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDecExemptCodesLength()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Collection of remarks associated with this data link message.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRemarks($j)
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRemarksLength()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: Example URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getRawFileURI()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \DataLink_Abridged_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startDataLink_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(74);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return DataLink_Abridged
     */
    public static function createDataLink_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $opExName, $originator, $startTime, $stopTime, $stopTimeMod, $planOrigNum, $opExInfo, $opExInfoAlt, $serialNum, $month, $qualifier, $qualSN, $references, $canxId, $canxOriginator, $canxTs, $canxSerialNum, $canxSpecialNotation, $canxSICs, $pocName, $pocRank, $pocCallSign, $pocLocName, $pocLat, $pocLon, $pocNums, $geoDatum, $refPoints, $voiceCoord, $sysDefaultCode, $winSizeMult, $winSizeMin, $minTrackQual, $maxTrackQual, $resTrackQual, $courseDiff, $speedDiff, $altDiff, $minGeoPosQual, $maxGeoPosQual, $decorrWinMult, $consecDecorr, $multiDuty, $ops, $jreUnitDes, $jreCallSign, $jrePriAdd, $jreSecAdd, $jreDetails, $specTracks, $nonLinkUnitDes, $trackNumBlockLLs, $trackNumBlocks, $mgmtCode, $mgmtCodeMeaning, $ackReq, $ackInstUnits, $classSource, $classReasons, $decInstDates, $decExemptCodes, $remarks, $rawFileURI, $createdAt, $createdBy, $updatedAt, $updatedBy, $sourceDL, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(74);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addOpExName($builder, $opExName);
        self::addOriginator($builder, $originator);
        self::addStartTime($builder, $startTime);
        self::addStopTime($builder, $stopTime);
        self::addStopTimeMod($builder, $stopTimeMod);
        self::addPlanOrigNum($builder, $planOrigNum);
        self::addOpExInfo($builder, $opExInfo);
        self::addOpExInfoAlt($builder, $opExInfoAlt);
        self::addSerialNum($builder, $serialNum);
        self::addMonth($builder, $month);
        self::addQualifier($builder, $qualifier);
        self::addQualSN($builder, $qualSN);
        self::addReferences($builder, $references);
        self::addCanxId($builder, $canxId);
        self::addCanxOriginator($builder, $canxOriginator);
        self::addCanxTs($builder, $canxTs);
        self::addCanxSerialNum($builder, $canxSerialNum);
        self::addCanxSpecialNotation($builder, $canxSpecialNotation);
        self::addCanxSICs($builder, $canxSICs);
        self::addPocName($builder, $pocName);
        self::addPocRank($builder, $pocRank);
        self::addPocCallSign($builder, $pocCallSign);
        self::addPocLocName($builder, $pocLocName);
        self::addPocLat($builder, $pocLat);
        self::addPocLon($builder, $pocLon);
        self::addPocNums($builder, $pocNums);
        self::addGeoDatum($builder, $geoDatum);
        self::addRefPoints($builder, $refPoints);
        self::addVoiceCoord($builder, $voiceCoord);
        self::addSysDefaultCode($builder, $sysDefaultCode);
        self::addWinSizeMult($builder, $winSizeMult);
        self::addWinSizeMin($builder, $winSizeMin);
        self::addMinTrackQual($builder, $minTrackQual);
        self::addMaxTrackQual($builder, $maxTrackQual);
        self::addResTrackQual($builder, $resTrackQual);
        self::addCourseDiff($builder, $courseDiff);
        self::addSpeedDiff($builder, $speedDiff);
        self::addAltDiff($builder, $altDiff);
        self::addMinGeoPosQual($builder, $minGeoPosQual);
        self::addMaxGeoPosQual($builder, $maxGeoPosQual);
        self::addDecorrWinMult($builder, $decorrWinMult);
        self::addConsecDecorr($builder, $consecDecorr);
        self::addMultiDuty($builder, $multiDuty);
        self::addOps($builder, $ops);
        self::addJreUnitDes($builder, $jreUnitDes);
        self::addJreCallSign($builder, $jreCallSign);
        self::addJrePriAdd($builder, $jrePriAdd);
        self::addJreSecAdd($builder, $jreSecAdd);
        self::addJreDetails($builder, $jreDetails);
        self::addSpecTracks($builder, $specTracks);
        self::addNonLinkUnitDes($builder, $nonLinkUnitDes);
        self::addTrackNumBlockLLs($builder, $trackNumBlockLLs);
        self::addTrackNumBlocks($builder, $trackNumBlocks);
        self::addMgmtCode($builder, $mgmtCode);
        self::addMgmtCodeMeaning($builder, $mgmtCodeMeaning);
        self::addAckReq($builder, $ackReq);
        self::addAckInstUnits($builder, $ackInstUnits);
        self::addClassSource($builder, $classSource);
        self::addClassReasons($builder, $classReasons);
        self::addDecInstDates($builder, $decInstDates);
        self::addDecExemptCodes($builder, $decExemptCodes);
        self::addRemarks($builder, $remarks);
        self::addRawFileURI($builder, $rawFileURI);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOpExName(FlatBufferBuilder $builder, $opExName)
    {
        $builder->addOffsetX(2, $opExName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOriginator(FlatBufferBuilder $builder, $originator)
    {
        $builder->addOffsetX(3, $originator, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStartTime(FlatBufferBuilder $builder, $startTime)
    {
        $builder->addOffsetX(4, $startTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStopTime(FlatBufferBuilder $builder, $stopTime)
    {
        $builder->addOffsetX(5, $stopTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStopTimeMod(FlatBufferBuilder $builder, $stopTimeMod)
    {
        $builder->addOffsetX(6, $stopTimeMod, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlanOrigNum(FlatBufferBuilder $builder, $planOrigNum)
    {
        $builder->addOffsetX(7, $planOrigNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOpExInfo(FlatBufferBuilder $builder, $opExInfo)
    {
        $builder->addOffsetX(8, $opExInfo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOpExInfoAlt(FlatBufferBuilder $builder, $opExInfoAlt)
    {
        $builder->addOffsetX(9, $opExInfoAlt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSerialNum(FlatBufferBuilder $builder, $serialNum)
    {
        $builder->addOffsetX(10, $serialNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMonth(FlatBufferBuilder $builder, $month)
    {
        $builder->addOffsetX(11, $month, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addQualifier(FlatBufferBuilder $builder, $qualifier)
    {
        $builder->addOffsetX(12, $qualifier, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addQualSN(FlatBufferBuilder $builder, $qualSN)
    {
        $builder->addIntX(13, $qualSN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addReferences(FlatBufferBuilder $builder, $references)
    {
        $builder->addOffsetX(14, $references, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createReferencesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startReferencesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCanxId(FlatBufferBuilder $builder, $canxId)
    {
        $builder->addOffsetX(15, $canxId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCanxOriginator(FlatBufferBuilder $builder, $canxOriginator)
    {
        $builder->addOffsetX(16, $canxOriginator, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCanxTs(FlatBufferBuilder $builder, $canxTs)
    {
        $builder->addOffsetX(17, $canxTs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCanxSerialNum(FlatBufferBuilder $builder, $canxSerialNum)
    {
        $builder->addOffsetX(18, $canxSerialNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCanxSpecialNotation(FlatBufferBuilder $builder, $canxSpecialNotation)
    {
        $builder->addOffsetX(19, $canxSpecialNotation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCanxSICs(FlatBufferBuilder $builder, $canxSICs)
    {
        $builder->addOffsetX(20, $canxSICs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCanxSICsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCanxSICsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPocName(FlatBufferBuilder $builder, $pocName)
    {
        $builder->addOffsetX(21, $pocName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPocRank(FlatBufferBuilder $builder, $pocRank)
    {
        $builder->addOffsetX(22, $pocRank, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPocCallSign(FlatBufferBuilder $builder, $pocCallSign)
    {
        $builder->addOffsetX(23, $pocCallSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPocLocName(FlatBufferBuilder $builder, $pocLocName)
    {
        $builder->addOffsetX(24, $pocLocName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPocLat(FlatBufferBuilder $builder, $pocLat)
    {
        $builder->addDoubleX(25, $pocLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPocLon(FlatBufferBuilder $builder, $pocLon)
    {
        $builder->addDoubleX(26, $pocLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPocNums(FlatBufferBuilder $builder, $pocNums)
    {
        $builder->addOffsetX(27, $pocNums, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createPocNumsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startPocNumsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGeoDatum(FlatBufferBuilder $builder, $geoDatum)
    {
        $builder->addOffsetX(28, $geoDatum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRefPoints(FlatBufferBuilder $builder, $refPoints)
    {
        $builder->addOffsetX(29, $refPoints, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRefPointsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRefPointsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addVoiceCoord(FlatBufferBuilder $builder, $voiceCoord)
    {
        $builder->addOffsetX(30, $voiceCoord, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createVoiceCoordVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startVoiceCoordVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSysDefaultCode(FlatBufferBuilder $builder, $sysDefaultCode)
    {
        $builder->addOffsetX(31, $sysDefaultCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWinSizeMult(FlatBufferBuilder $builder, $winSizeMult)
    {
        $builder->addDoubleX(32, $winSizeMult, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWinSizeMin(FlatBufferBuilder $builder, $winSizeMin)
    {
        $builder->addDoubleX(33, $winSizeMin, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMinTrackQual(FlatBufferBuilder $builder, $minTrackQual)
    {
        $builder->addIntX(34, $minTrackQual, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMaxTrackQual(FlatBufferBuilder $builder, $maxTrackQual)
    {
        $builder->addIntX(35, $maxTrackQual, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addResTrackQual(FlatBufferBuilder $builder, $resTrackQual)
    {
        $builder->addIntX(36, $resTrackQual, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCourseDiff(FlatBufferBuilder $builder, $courseDiff)
    {
        $builder->addIntX(37, $courseDiff, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSpeedDiff(FlatBufferBuilder $builder, $speedDiff)
    {
        $builder->addIntX(38, $speedDiff, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAltDiff(FlatBufferBuilder $builder, $altDiff)
    {
        $builder->addIntX(39, $altDiff, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMinGeoPosQual(FlatBufferBuilder $builder, $minGeoPosQual)
    {
        $builder->addIntX(40, $minGeoPosQual, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMaxGeoPosQual(FlatBufferBuilder $builder, $maxGeoPosQual)
    {
        $builder->addIntX(41, $maxGeoPosQual, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDecorrWinMult(FlatBufferBuilder $builder, $decorrWinMult)
    {
        $builder->addDoubleX(42, $decorrWinMult, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addConsecDecorr(FlatBufferBuilder $builder, $consecDecorr)
    {
        $builder->addIntX(43, $consecDecorr, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMultiDuty(FlatBufferBuilder $builder, $multiDuty)
    {
        $builder->addOffsetX(44, $multiDuty, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMultiDutyVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMultiDutyVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addOps(FlatBufferBuilder $builder, $ops)
    {
        $builder->addOffsetX(45, $ops, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createOpsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startOpsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJreUnitDes(FlatBufferBuilder $builder, $jreUnitDes)
    {
        $builder->addOffsetX(46, $jreUnitDes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJreCallSign(FlatBufferBuilder $builder, $jreCallSign)
    {
        $builder->addOffsetX(47, $jreCallSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addJrePriAdd(FlatBufferBuilder $builder, $jrePriAdd)
    {
        $builder->addIntX(48, $jrePriAdd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addJreSecAdd(FlatBufferBuilder $builder, $jreSecAdd)
    {
        $builder->addIntX(49, $jreSecAdd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJreDetails(FlatBufferBuilder $builder, $jreDetails)
    {
        $builder->addOffsetX(50, $jreDetails, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSpecTracks(FlatBufferBuilder $builder, $specTracks)
    {
        $builder->addOffsetX(51, $specTracks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSpecTracksVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSpecTracksVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addNonLinkUnitDes(FlatBufferBuilder $builder, $nonLinkUnitDes)
    {
        $builder->addOffsetX(52, $nonLinkUnitDes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createNonLinkUnitDesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startNonLinkUnitDesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTrackNumBlockLLs(FlatBufferBuilder $builder, $trackNumBlockLLs)
    {
        $builder->addOffsetX(53, $trackNumBlockLLs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTrackNumBlockLLsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTrackNumBlockLLsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTrackNumBlocks(FlatBufferBuilder $builder, $trackNumBlocks)
    {
        $builder->addOffsetX(54, $trackNumBlocks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTrackNumBlocksVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTrackNumBlocksVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMgmtCode(FlatBufferBuilder $builder, $mgmtCode)
    {
        $builder->addOffsetX(55, $mgmtCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMgmtCodeMeaning(FlatBufferBuilder $builder, $mgmtCodeMeaning)
    {
        $builder->addOffsetX(56, $mgmtCodeMeaning, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addAckReq(FlatBufferBuilder $builder, $ackReq)
    {
        $builder->addBoolX(57, $ackReq, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAckInstUnits(FlatBufferBuilder $builder, $ackInstUnits)
    {
        $builder->addOffsetX(58, $ackInstUnits, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAckInstUnitsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAckInstUnitsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassSource(FlatBufferBuilder $builder, $classSource)
    {
        $builder->addOffsetX(59, $classSource, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addClassReasons(FlatBufferBuilder $builder, $classReasons)
    {
        $builder->addOffsetX(60, $classReasons, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createClassReasonsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startClassReasonsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDecInstDates(FlatBufferBuilder $builder, $decInstDates)
    {
        $builder->addOffsetX(61, $decInstDates, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDecInstDatesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDecInstDatesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDecExemptCodes(FlatBufferBuilder $builder, $decExemptCodes)
    {
        $builder->addOffsetX(62, $decExemptCodes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDecExemptCodesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDecExemptCodesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRemarks(FlatBufferBuilder $builder, $remarks)
    {
        $builder->addOffsetX(63, $remarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRemarksVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRemarksVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRawFileURI(FlatBufferBuilder $builder, $rawFileURI)
    {
        $builder->addOffsetX(64, $rawFileURI, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(65, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(66, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(67, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(68, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(69, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(70, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(71, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(72, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(73, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endDataLink_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishDataLink_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "DATA");
    }
}
