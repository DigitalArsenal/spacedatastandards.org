<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Information pertaining to the details of executing the recovery.
class PersonnelRecoveryExecutionInfo_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return PersonnelRecoveryExecutionInfo_Ingest
     */
    public static function getRootAsPersonnelRecoveryExecutionInfo_Ingest(ByteBuffer $bb)
    {
        $obj = new PersonnelRecoveryExecutionInfo_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function PersonnelRecoveryExecutionInfo_IngestIdentifier()
    {
        return "PERS";
    }

    public static function PersonnelRecoveryExecutionInfo_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::PersonnelRecoveryExecutionInfo_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return PersonnelRecoveryExecutionInfo_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the initial location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
    /// Example: /// Example: [103.23, 30.445]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getInitialPoint($j)
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getInitialPointLength()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The heading, in degrees clockwise from North, of entering the recovery zone.
    /// Example: /// Example: 35.66
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getIngress()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Description of the objective strategy plan.
    /// Example: /// Example: Description of strategy plan.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getObjStrategy()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the egress location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
    /// Example: /// Example: [107.23, 30.455]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getEgressPoint($j)
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEgressPointLength()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The heading, in degrees, of leaving the recovery zone.
    /// Example: /// Example: 66.53
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEgress()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getRecoveryVehicle()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getEscortVehicle()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startPersonnelRecoveryExecutionInfo_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(7);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return PersonnelRecoveryExecutionInfo_Ingest
     */
    public static function createPersonnelRecoveryExecutionInfo_Ingest(FlatBufferBuilder $builder, $initialPoint, $ingress, $objStrategy, $egressPoint, $egress, $recoveryVehicle, $escortVehicle)
    {
        $builder->startObject(7);
        self::addInitialPoint($builder, $initialPoint);
        self::addIngress($builder, $ingress);
        self::addObjStrategy($builder, $objStrategy);
        self::addEgressPoint($builder, $egressPoint);
        self::addEgress($builder, $egress);
        self::addRecoveryVehicle($builder, $recoveryVehicle);
        self::addEscortVehicle($builder, $escortVehicle);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addInitialPoint(FlatBufferBuilder $builder, $initialPoint)
    {
        $builder->addOffsetX(0, $initialPoint, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createInitialPointVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startInitialPointVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addIngress(FlatBufferBuilder $builder, $ingress)
    {
        $builder->addDoubleX(1, $ingress, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjStrategy(FlatBufferBuilder $builder, $objStrategy)
    {
        $builder->addOffsetX(2, $objStrategy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEgressPoint(FlatBufferBuilder $builder, $egressPoint)
    {
        $builder->addOffsetX(3, $egressPoint, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEgressPointVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEgressPointVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEgress(FlatBufferBuilder $builder, $egress)
    {
        $builder->addDoubleX(4, $egress, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRecoveryVehicle(FlatBufferBuilder $builder, $recoveryVehicle)
    {
        $builder->addOffsetX(5, $recoveryVehicle, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEscortVehicle(FlatBufferBuilder $builder, $escortVehicle)
    {
        $builder->addOffsetX(6, $escortVehicle, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endPersonnelRecoveryExecutionInfo_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishPersonnelRecoveryExecutionInfo_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "PERS");
    }
}
