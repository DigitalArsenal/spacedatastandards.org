<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
class DataLinkMultiDuty_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return DataLinkMultiDuty_Abridged
     */
    public static function getRootAsDataLinkMultiDuty_Abridged(ByteBuffer $bb)
    {
        $obj = new DataLinkMultiDuty_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function DataLinkMultiDuty_AbridgedIdentifier()
    {
        return "DATA";
    }

    public static function DataLinkMultiDuty_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::DataLinkMultiDuty_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return DataLinkMultiDuty_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Designated force of unit specified by ship name, unit call sign, or unit designator.
    /// Example: /// Example: SHIP:STENNIS
    /// Constraints: Minimum length = 0, Maximum length = 38
    public function getUnitDes()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the person to be contacted for multilink coordination.
    /// Example: /// Example: POPOVICH
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getName()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The rank or position of the person to be contacted for multilink coordination.
    /// Example: /// Example: LCDR
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getRank()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specific duties assigned for multilink coordination (e.g. ICO, RICO, SICO).
    /// Example: /// Example: SICO
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getDuty()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of telephone numbers or the frequency values for radio transmission of the person to be contacted for multilink coordination.
    /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDutyTeleFreqNums($j)
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDutyTeleFreqNumsLength()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getMultiDutyVoiceCoord($j)
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMultiDutyVoiceCoordLength()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startDataLinkMultiDuty_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(6);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return DataLinkMultiDuty_Abridged
     */
    public static function createDataLinkMultiDuty_Abridged(FlatBufferBuilder $builder, $unitDes, $name, $rank, $duty, $dutyTeleFreqNums, $multiDutyVoiceCoord)
    {
        $builder->startObject(6);
        self::addUnitDes($builder, $unitDes);
        self::addName($builder, $name);
        self::addRank($builder, $rank);
        self::addDuty($builder, $duty);
        self::addDutyTeleFreqNums($builder, $dutyTeleFreqNums);
        self::addMultiDutyVoiceCoord($builder, $multiDutyVoiceCoord);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUnitDes(FlatBufferBuilder $builder, $unitDes)
    {
        $builder->addOffsetX(0, $unitDes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(1, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRank(FlatBufferBuilder $builder, $rank)
    {
        $builder->addOffsetX(2, $rank, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDuty(FlatBufferBuilder $builder, $duty)
    {
        $builder->addOffsetX(3, $duty, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDutyTeleFreqNums(FlatBufferBuilder $builder, $dutyTeleFreqNums)
    {
        $builder->addOffsetX(4, $dutyTeleFreqNums, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDutyTeleFreqNumsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDutyTeleFreqNumsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMultiDutyVoiceCoord(FlatBufferBuilder $builder, $multiDutyVoiceCoord)
    {
        $builder->addOffsetX(5, $multiDutyVoiceCoord, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMultiDutyVoiceCoordVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMultiDutyVoiceCoordVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endDataLinkMultiDuty_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishDataLinkMultiDuty_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "DATA");
    }
}
