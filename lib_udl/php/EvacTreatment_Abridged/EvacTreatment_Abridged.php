<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Treatment information.
class EvacTreatment_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EvacTreatment_Abridged
     */
    public static function getRootAsEvacTreatment_Abridged(ByteBuffer $bb)
    {
        $obj = new EvacTreatment_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EvacTreatment_AbridgedIdentifier()
    {
        return "EVAC";
    }

    public static function EvacTreatment_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EvacTreatment_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EvacTreatment_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Type of treatment administered or to be administered.  Intended as, but not constrained to, K07.1 Treatment Type Enumeration (e.g. AIRWAY ADJUNCT, AIRWAY ASSISTED VENTILATION, AIRWAY COMBI TUBE USED, AIRWAY ET NT, AIRWAY INTUBATED, AIRWAY NPA OPA APPLIED, AIRWAY PATIENT, AIRWAY POSITIONAL, AIRWAY SURGICAL CRIC, BREATHING CHEST SEAL, BREATHING CHEST TUBE, etc.).
    /// Example: /// Example: BREATHING CHEST TUBE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getType()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Body part location or body part treated or to be treated.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
    /// Example: /// Example: CHEST
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getBodyPart()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Datetime of the treatment in ISO 8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getTime()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional comments on the patient's treatment information.
    /// Example: /// Example: Comments on the treatment info.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getComments()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEvacTreatment_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EvacTreatment_Abridged
     */
    public static function createEvacTreatment_Abridged(FlatBufferBuilder $builder, $type, $bodyPart, $time, $comments)
    {
        $builder->startObject(4);
        self::addType($builder, $type);
        self::addBodyPart($builder, $bodyPart);
        self::addTime($builder, $time);
        self::addComments($builder, $comments);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(0, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBodyPart(FlatBufferBuilder $builder, $bodyPart)
    {
        $builder->addOffsetX(1, $bodyPart, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTime(FlatBufferBuilder $builder, $time)
    {
        $builder->addOffsetX(2, $time, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addComments(FlatBufferBuilder $builder, $comments)
    {
        $builder->addOffsetX(3, $comments, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEvacTreatment_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEvacTreatment_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "EVAC");
    }
}
