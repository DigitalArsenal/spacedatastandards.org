<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// List of COA metrics associated with this effect response.
class EffectResponseMetrics_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EffectResponseMetrics_Full
     */
    public static function getRootAsEffectResponseMetrics_Full(ByteBuffer $bb)
    {
        $obj = new EffectResponseMetrics_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EffectResponseMetrics_FullIdentifier()
    {
        return "EFFE";
    }

    public static function EffectResponseMetrics_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EffectResponseMetrics_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EffectResponseMetrics_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost, Timeliness, Unavailable, etc.).
    /// Example: /// Example: GoalAchievement
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getMetricType()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The metric score specific to its domain.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDomainValue()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The metric score adjusted to be relative and comparable to other domains.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRelativeValue()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The metric that was used to score this task.
    /// Example: /// Example: Example metric
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getProvenance()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEffectResponseMetrics_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EffectResponseMetrics_Full
     */
    public static function createEffectResponseMetrics_Full(FlatBufferBuilder $builder, $metricType, $domainValue, $relativeValue, $provenance)
    {
        $builder->startObject(4);
        self::addMetricType($builder, $metricType);
        self::addDomainValue($builder, $domainValue);
        self::addRelativeValue($builder, $relativeValue);
        self::addProvenance($builder, $provenance);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMetricType(FlatBufferBuilder $builder, $metricType)
    {
        $builder->addOffsetX(0, $metricType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDomainValue(FlatBufferBuilder $builder, $domainValue)
    {
        $builder->addDoubleX(1, $domainValue, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRelativeValue(FlatBufferBuilder $builder, $relativeValue)
    {
        $builder->addDoubleX(2, $relativeValue, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addProvenance(FlatBufferBuilder $builder, $provenance)
    {
        $builder->addOffsetX(3, $provenance, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEffectResponseMetrics_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEffectResponseMetrics_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "EFFE");
    }
}
