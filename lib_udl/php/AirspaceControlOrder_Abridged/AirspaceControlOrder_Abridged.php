<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Beta Version Airspace Control Order: Contains airspace coordination information and instructions that have been issued by an airspace control authority.
class AirspaceControlOrder_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AirspaceControlOrder_Abridged
     */
    public static function getRootAsAirspaceControlOrder_Abridged(ByteBuffer $bb)
    {
        $obj = new AirspaceControlOrder_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AirspaceControlOrder_AbridgedIdentifier()
    {
        return "AIRS";
    }

    public static function AirspaceControlOrder_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AirspaceControlOrder_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AirspaceControlOrder_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: EXAMPLE URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getRawFileURI()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies the code name or nickname assigned to a joint exercise or plan to designate message traffic.
    /// Example: /// Example: DESERT WIND
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getOpExName()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originator of this reference.
    /// Example: /// Example: USCENTCOM
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getOriginator()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The start of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T13:55:43.123Z
    /// Constraints: No constraints specified.
    public function getStartTime()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The end of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-08T13:55:43.123Z
    /// Constraints: No constraints specified.
    public function getStopTime()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A qualifier for the end of the effective time period of this airspace control order, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
    /// Example: /// Example: AFTER
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getStopQualifier()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Supplementary name that can be used to further identify exercise nicknames, or to provide the primary nickname of the option or the alternative of an operational plan.
    /// Example: /// Example: CONTROL
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOpExInfo()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The secondary supplementary nickname of the option or the alternative of the operational plan or order.
    /// Example: /// Example: ORANGE
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getOpExInfoAlt()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
    /// Example: /// Example: SACEUR 106
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPlanOrigNum()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The unique message identifier sequentially assigned by the originator.
    /// Example: /// Example: 1201003
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getSerialNum()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The month in which the message originated.
    /// Example: /// Example: OCT
    /// Constraints: Minimum length = 0, Maximum length = 12
    public function getMonth()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The qualifier which caveats the message status.
    /// Example: /// Example: CHG
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getQualifier()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The serial number associated with the message qualifier.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getQualSN()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Name of the area of the command for which the ACO is valid.
    /// Example: /// Example: FORT BRAGG
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getAreaOfValidity()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The serial number of this airspace control order.
    /// Example: /// Example: 27B
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getAcoSerialNum()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies the geodetic datum by which the spatial coordinates of the controlled airspace are calculated.
    /// Example: /// Example: EUR-T
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getGeoDatum()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Free text information expressed in natural language.
    /// Example: /// Example: CHOKE POINTS
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getAcoComments()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The airspaceControlReferences set provides both USMTF and non-USMTF references for this airspace control order.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAirspaceControlOrderReferences($j)
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAirspaceControlOrderReferencesLength()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAirspaceControlMeansStatus($j)
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAirspaceControlMeansStatusLength()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Collection of unique link 16 identifier that will be assigned to a future airspace control means.
    /// Example: /// Example: ['A2467', 'A3466', 'AA232']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getUndLnkTrk($j)
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getUndLnkTrkLength()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Markings defining the source material or the original classification authority for the ACO message.
    /// Example: /// Example: ORIG:USJFCOM
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getClassSource()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mandatory if classSource uses the "IORIG" designator. Must be a REASON FOR CLASSIFICATION code.
    /// Example: /// Example: ['15C', '10C']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getClassReason($j)
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getClassReasonLength()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Markings providing the literal guidance or date for downgrading or declassifying the airspace control order. Manditory if declassExemptionCode is nul.
    /// Example: /// Example: ['NST:AT EXERCISE ENDEX', 'DATE:25NOV1997']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDowngradeInsDate($j)
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDowngradeInsDateLength()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Coded entries that provide justification for exemption from automatic downgrading or declassification of the airspace control order.
    /// Example: /// Example: ['X1', 'X2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDeclassExemptionCode($j)
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDeclassExemptionCodeLength()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AirspaceControlOrder_Abridged_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAirspaceControlOrder_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(33);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AirspaceControlOrder_Abridged
     */
    public static function createAirspaceControlOrder_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $rawFileURI, $opExName, $originator, $startTime, $stopTime, $stopQualifier, $opExInfo, $opExInfoAlt, $planOrigNum, $serialNum, $month, $qualifier, $qualSN, $areaOfValidity, $acoSerialNum, $geoDatum, $acoComments, $airspaceControlOrderReferences, $airspaceControlMeansStatus, $undLnkTrk, $classSource, $classReason, $downgradeInsDate, $declassExemptionCode, $createdAt, $createdBy, $sourceDL, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(33);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addRawFileURI($builder, $rawFileURI);
        self::addOpExName($builder, $opExName);
        self::addOriginator($builder, $originator);
        self::addStartTime($builder, $startTime);
        self::addStopTime($builder, $stopTime);
        self::addStopQualifier($builder, $stopQualifier);
        self::addOpExInfo($builder, $opExInfo);
        self::addOpExInfoAlt($builder, $opExInfoAlt);
        self::addPlanOrigNum($builder, $planOrigNum);
        self::addSerialNum($builder, $serialNum);
        self::addMonth($builder, $month);
        self::addQualifier($builder, $qualifier);
        self::addQualSN($builder, $qualSN);
        self::addAreaOfValidity($builder, $areaOfValidity);
        self::addAcoSerialNum($builder, $acoSerialNum);
        self::addGeoDatum($builder, $geoDatum);
        self::addAcoComments($builder, $acoComments);
        self::addAirspaceControlOrderReferences($builder, $airspaceControlOrderReferences);
        self::addAirspaceControlMeansStatus($builder, $airspaceControlMeansStatus);
        self::addUndLnkTrk($builder, $undLnkTrk);
        self::addClassSource($builder, $classSource);
        self::addClassReason($builder, $classReason);
        self::addDowngradeInsDate($builder, $downgradeInsDate);
        self::addDeclassExemptionCode($builder, $declassExemptionCode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRawFileURI(FlatBufferBuilder $builder, $rawFileURI)
    {
        $builder->addOffsetX(2, $rawFileURI, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOpExName(FlatBufferBuilder $builder, $opExName)
    {
        $builder->addOffsetX(3, $opExName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOriginator(FlatBufferBuilder $builder, $originator)
    {
        $builder->addOffsetX(4, $originator, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStartTime(FlatBufferBuilder $builder, $startTime)
    {
        $builder->addOffsetX(5, $startTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStopTime(FlatBufferBuilder $builder, $stopTime)
    {
        $builder->addOffsetX(6, $stopTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStopQualifier(FlatBufferBuilder $builder, $stopQualifier)
    {
        $builder->addOffsetX(7, $stopQualifier, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOpExInfo(FlatBufferBuilder $builder, $opExInfo)
    {
        $builder->addOffsetX(8, $opExInfo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOpExInfoAlt(FlatBufferBuilder $builder, $opExInfoAlt)
    {
        $builder->addOffsetX(9, $opExInfoAlt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlanOrigNum(FlatBufferBuilder $builder, $planOrigNum)
    {
        $builder->addOffsetX(10, $planOrigNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSerialNum(FlatBufferBuilder $builder, $serialNum)
    {
        $builder->addOffsetX(11, $serialNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMonth(FlatBufferBuilder $builder, $month)
    {
        $builder->addOffsetX(12, $month, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addQualifier(FlatBufferBuilder $builder, $qualifier)
    {
        $builder->addOffsetX(13, $qualifier, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addQualSN(FlatBufferBuilder $builder, $qualSN)
    {
        $builder->addIntX(14, $qualSN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAreaOfValidity(FlatBufferBuilder $builder, $areaOfValidity)
    {
        $builder->addOffsetX(15, $areaOfValidity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAcoSerialNum(FlatBufferBuilder $builder, $acoSerialNum)
    {
        $builder->addOffsetX(16, $acoSerialNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGeoDatum(FlatBufferBuilder $builder, $geoDatum)
    {
        $builder->addOffsetX(17, $geoDatum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAcoComments(FlatBufferBuilder $builder, $acoComments)
    {
        $builder->addOffsetX(18, $acoComments, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAirspaceControlOrderReferences(FlatBufferBuilder $builder, $airspaceControlOrderReferences)
    {
        $builder->addOffsetX(19, $airspaceControlOrderReferences, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAirspaceControlOrderReferencesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAirspaceControlOrderReferencesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAirspaceControlMeansStatus(FlatBufferBuilder $builder, $airspaceControlMeansStatus)
    {
        $builder->addOffsetX(20, $airspaceControlMeansStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAirspaceControlMeansStatusVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAirspaceControlMeansStatusVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addUndLnkTrk(FlatBufferBuilder $builder, $undLnkTrk)
    {
        $builder->addOffsetX(21, $undLnkTrk, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createUndLnkTrkVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startUndLnkTrkVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassSource(FlatBufferBuilder $builder, $classSource)
    {
        $builder->addOffsetX(22, $classSource, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addClassReason(FlatBufferBuilder $builder, $classReason)
    {
        $builder->addOffsetX(23, $classReason, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createClassReasonVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startClassReasonVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDowngradeInsDate(FlatBufferBuilder $builder, $downgradeInsDate)
    {
        $builder->addOffsetX(24, $downgradeInsDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDowngradeInsDateVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDowngradeInsDateVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDeclassExemptionCode(FlatBufferBuilder $builder, $declassExemptionCode)
    {
        $builder->addOffsetX(25, $declassExemptionCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDeclassExemptionCodeVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDeclassExemptionCodeVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(26, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(27, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(28, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(29, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(30, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(31, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(32, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAirspaceControlOrder_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAirspaceControlOrder_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRS");
    }
}
