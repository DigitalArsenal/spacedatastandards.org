<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// These services provide operations for querying of all available track details and amplifying track data. A track is a position and optionally a heading/velocity of an object such as an aircraft, marine vessel, etc at a particular timestamp. It also includes optional information regarding the identity/type of the target object and other amplifying object data, if known.
class TrackDetails_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return TrackDetails_Ingest
     */
    public static function getRootAsTrackDetails_Ingest(ByteBuffer $bb)
    {
        $obj = new TrackDetails_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function TrackDetails_IngestIdentifier()
    {
        return "TRAC";
    }

    public static function TrackDetails_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::TrackDetails_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return TrackDetails_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: TRACK-DETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
    ///  AIR: Between sea level and the K치rm치n line, which has an altitude of 100 kilometers (62 miles).
    ///  LAND: On the surface of dry land.
    ///  SPACE: Above the K치rm치n line, which has an altitude of 100 kilometers (62 miles).
    ///  SURFACE: On the surface of a body of water.
    ///  SUBSURFACE: Below the surface of a body of water.
    ///  UNKNOWN: Environment is not known.
    /// Example: /// Example: LAND
    /// Constraints: Minimum length = 0, Maximum length = 16
    /**
     * @return sbyte
     */
    public function getEnv()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \TrackDetails_Ingest_env_Enum::AIR;
    }

    /// Optional message type designation.
    /// Example: /// Example: PLATFORM
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMsgType()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The vessel hull number designation of this maritime vessel.  The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
    /// Example: /// Example: A30081
    /// Constraints: Minimum length = 0, Maximum length = 7
    public function getHullNum()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Pseudo Identification Feature (PIF) number is a four digit code that provides an exact ID for the ship or aircraft. Friendly military only.
    /// Example: /// Example: 0137
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getPif()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
    /// Example: /// Example: B45524
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getSconum()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Naval Tactical Data System (NTDS) track number assigned to this track.
    /// Example: /// Example: ZZ777
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getNtds()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Intel Discrete Identifier (IDI) code assigned to this track.  The IDI is a four-digit code representing hostile or unknown tracks.
    /// Example: /// Example: 7670
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getDisId()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The category code that represents the associated facility purpose within the target system.  This value is the category code in the MIDB (Modernized Intelligence Database).
    /// Example: /// Example: 20345
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getMidbCat()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Basic Encyclopedia (BE) number associated with this installation or area.
    /// Example: /// Example: ENC-123
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getBeNumber()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The O-suffix associated with this facility.  The O-suffix is a five-character alpha/numeric system used to identify a facility, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the facility within the Modernized Integrated Database (MIDB).  The Installation beNumber and oSuffix are also used in conjunction with the midbCat code to classify the function or purpose of the facility.
    /// Example: /// Example: AA125
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getOSuffix()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// This value represents the site number of a specific electronic site or its associated equipment.
    /// Example: /// Example: E12345012
    /// Constraints: Minimum length = 0, Maximum length = 9
    public function getPin()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating whether the missile is considered lost, if reporting a missile track.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLostTrkInd()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Track ID for the source of the Missile-Unique Identifier (MUID), if reporting a missile track.
    /// Example: /// Example: MUID-SRC-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getMuidSrcTrk()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the Missile-Unique Identifier (MUID), if reporting a missile track.
    /// Example: /// Example: MUID-SRC
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getMuidSrc()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The status of the missile track in this record, if reporting a missile track (e.g. AT LAUNCH, AT OBSERVATION, FLYING, IMPACTED, LOST, STALE, DEBRIS).
    /// Example: /// Example: AT LAUNCH
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMslStatus()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
    /// Example: /// Example: 0.95
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTrkConf()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Track Quality is reported as an integer from 0-15. Track Quality specifies the reliability of the positional information of a reported track; Higher values indicate higher track quality, i.e., lower errors in reported position.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTrkQual()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// A track may be designated as an alert track with the following designations:
    /// HIT - High Interest Track
    /// TGT - Target
    /// SUS - Suspect Carrier
    /// NSP - Cleared Suspect
    /// If alert is null, the track is assumed to be of non-alert status.
    /// Example: /// Example: TGT
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getAlert()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Original source cross-reference code for the Command that originated the report.
    /// Example: /// Example: INT
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getOrigXref()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Primary ELINT Notification (ELNOT), a five character identifier assigned to each non-communication emission for collection and reporting purposes.  This five-digit field begins with an alpha character, followed by three numbers, ending with another alpha character.
    /// Example: /// Example: A123A
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getElnot1()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Secondary ELINT Notification (ELNOT), a five character identifier assigned to each non-communication emission for collection and reporting purposes.  This five-digit field begins with an alpha character, followed by three numbers, ending with another alpha character.
    /// Example: /// Example: A123B
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getElnot2()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
    ///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    ///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    ///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    ///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    ///  PENDING: Track object which has not been evaluated.
    ///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    ///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    /// Example: /// Example: FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getObjIdent()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \TrackDetails_Ingest_objIdent_Enum::ASSUMED_FRIEND;
    }

    /// The generic classification of the track object/group (e.g., BALLISTIC, HELICOPTER, TRACKED, WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676 object type classifications.
    /// Example: /// Example: TRACKED
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getObjType()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The object platform type is intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.  For cases in which no MIl-STD-6016 designation exists, a general description can be used (e.g. SATELLITE).
    /// Example: /// Example: WEAPON
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getObjPlat()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.  For cases in which no MIl-STD-6016 designation exists, a general description can be used (e.g. ANTISPACE WARFARE).
    /// Example: /// Example: HOLDING
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getObjAct()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Nationality of the tracked object.
    /// Example: /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getObjNat()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Track name.
    /// Example: /// Example: TRACK-NAME
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getName()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Abbreviated track name.
    /// Example: /// Example: COMMSCHECK
    /// Constraints: Minimum length = 0, Maximum length = 11
    public function getShortName()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// UUID identifying the track, which should remain the same on subsequent tracks of the same object.
    /// Example: /// Example: trkId
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTrkId()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The track number (TN) of a surveillance entity. Intended as, but not constrained to, the J-series track number encoded as five character alpha-numeric characters. Users should refer to J-series documentation for specific TN definitions.
    /// Example: /// Example: trkNum
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTrkNum()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Value Indicating the scope of this track:
    /// 1 - TERMINAL  (Terminal) - available only on the workstation where they were created.
    /// 2 - LOCAL  (Local) - available only on workstations in the local area network
    /// 3 - OTH  (Over the Horizon) - available to everyone.
    /// Example: /// Example: OTH
    /// Constraints: Minimum length = 0, Maximum length = 12
    public function getTrkScope()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The unique identifier of the source node.
    /// Example: /// Example: MCS
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getSourceUid()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The call sign currently assigned to this track object.
    /// Example: /// Example: Charlie
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getCallSign()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
    ///  FAKER: Friendly track, object, or entity acting as an exercise hostile.
    ///  JOKER: Friendly track, object, or entity acting as an exercise suspect.
    ///  KILO: Friendly high-value object.
    ///  TRAVELLER: Suspect land or surface track following a recognized traffic route.
    ///  ZOMBIE: Suspect track, object, or entity of special interest.
    /// Example: /// Example: JOKER
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getIdentAmp()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Space amplification indicates additional information on the space environment object being reported (e.g. DEBRIS, FUEL-AIR EXPLOSIVE, NUCLEAR WARHEAD).
    /// Example: /// Example: NUCLEAR WARHEAD
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getSpaceAmp()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Confidence level of the amplifying characteristics.  Values range from 0 to 6, with 0 indicating the lowest confidence and 6 indicating the highest.
    /// Example: /// Example: 6
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSpaceAmpConf()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Specific type of point or track with an environment of space.
    /// Example: /// Example: SS-21_MOD_2_CRBM
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getSpaceSpecType()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Subtype is a finer grain categorization of missile types. Examples include but are not limited to SRBM, MRBM, IRBM, LRBM, ICBM, SLBM:
    /// SRBM - Short-Range Ballistic Missile
    /// MRBM - Medium-Range Ballistic Missile
    /// IRBM - Intermediate-Range Ballistic Missile
    /// LRBM - Long-Range Ballistic Missile
    /// ICBM - Intercontinental Ballistic Missile
    /// SLBM - Submarine-Launched Ballistic Missile.
    /// Example: /// Example: SLBM
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getAcftSubType()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Track timestamp in ISO8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getTs()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Missile launch timestamp in ISO8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getLaunchTime()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Missile impact timestamp in ISO8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getImpactTime()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The message timestamp that the ftn track position was recorded, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getFtnMsgTs()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// An ftn used to associate information and directives with the track.
    /// Example: /// Example: FTN
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getFtn()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the Command reporting the Force Over-The-Horizon Track Coordinator (FOTC) track number.
    /// Example: /// Example: TRUETT
    /// Constraints: Minimum length = 0, Maximum length = 18
    public function getFtnCmd()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The message timestamp that the reference track position was recorded, in ISO 8601 UTC format with microsecond precision. The 'rtnMsgTs' and 'rtn' arrays must match in size.
    /// Example: /// Example: ['2021-02-25T12:00:00.123456Z']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRtnMsgTs($j)
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRtnMsgTsLength()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// A Reference Track Number used to associate information and directives with the track.  Referenced, but not constrained to, MIL-STD-6016F Reference Track Number. The 'rtnMsgTs' and 'rtn' arrays must match in size.
    /// Example: /// Example: ['ex-a']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRtn($j)
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRtnLength()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Value representing the state of the Received Track.
    /// Example: /// Example: Local_RTN
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getRtnTrkState()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the Command reporting the Received Track Number (RTN).
    /// Example: /// Example: YORKTOWN
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getRtnCmd()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Id/name of sensor providing the track data.
    /// Example: /// Example: OTH
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getSen()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source cross-reference code for the Command that originated the track report.
    /// Example: /// Example: INT
    /// Constraints: Minimum length = 0, Maximum length = 18
    public function getRptChxref()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating whether this track is archived.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getRptArchived()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that this track is self reported.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getSelfReport()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The MIL-STD-2525B symbology code that applies to the subject of this track.
    /// Example: /// Example: SHP*S----------
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getMil2525Bstr()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Transponder ID for the track.  This does not correspond to the UDL transponder schema.
    /// Example: /// Example: 11
    /// Constraints: Minimum length = 0, Maximum length = 61
    public function getTrnspdrId()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Transponder type for the track.
    /// Example: /// Example: AFTS
    /// Constraints: Minimum length = 0, Maximum length = 51
    public function getTrnspdrType()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Radar name of the sensor tracking this object (e.g., RAY1500, SPN-43, HEADNET).
    /// Example: /// Example: RAY1500
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getEmitterName()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source code for source of information used to detect track.
    /// Example: /// Example: S1
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getInfoSource()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating that the missile is currently in a state of boosting, if reporting a missile track.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getBoosting()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Frequency, in hertz, for the signature report.
    /// Example: /// Example: 63.65
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFreq()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum frequency, in hertz, reported for this acoustic track.
    /// Example: /// Example: 10324.53
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxFreq()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// List of harmonics of the signature report in descending order of predominance using 1-2 digit combinations separated by commas, e.g., 8,12,4. (1-22NS).
    /// Example: /// Example: 8,12,4
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getHarmonics()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Pulse repetition interval of the emitter, measured in microseconds.  The interval between the start of one pulse and the start of another.
    /// Example: /// Example: 56657.2238
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPri()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pulse repetition frequency of the emitter, measured in pulses per second.  PRF is the number of pulses transmitted per second. This is the reciprocal of the pri value.
    /// Example: /// Example: 17.65
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPrf()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pulse width of the emitter, measured in microseconds.  This is the duration of the pulse.
    /// Example: /// Example: 1347.45
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPw()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Type of radar scan.
    /// Example: /// Example: UNK
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getScanType()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Scan rate of the emitter, measured in seconds per rotation (SPR).
    /// Example: /// Example: 12.01
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getScanRate()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Sequential Contact Number (SCN) for this track.
    /// Example: /// Example: 1474305
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getScn()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Correlation Index; reference code for the site that originally reported the track.
    /// Example: /// Example: BB
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getCI()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The angle formed between the line of sight of the observer and the horizon, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
    /// Example: /// Example: 15.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAngElev()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 19.88550102
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLat()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 46.74596844
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLon()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 latitude of the missile launch point, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 19.88550102
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLaunchLat()
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the missile launch point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 46.74550102
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLaunchLon()
    {
        $o = $this->__offset(152);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 latitude of the missile impact point, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 19.88550102
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getImpactLat()
    {
        $o = $this->__offset(154);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the missile impact point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 46.74550102
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getImpactLon()
    {
        $o = $this->__offset(156);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 azimuth corridor reference point latitude, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 19.88550102
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPolarSingLocLat()
    {
        $o = $this->__offset(158);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 azimuth corridor reference point longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 46.74550102
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPolarSingLocLon()
    {
        $o = $this->__offset(160);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The azimuth corridor centerline angle measured in degrees clockwise from true north, of the center line of an azimuth corridor. The center line extends from the referenced corridor origin location.
    /// Example: /// Example: 12.876
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzCorrCenterLine()
    {
        $o = $this->__offset(162);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Azimuth corridor arc distance measured in meters from reference point of azimuth corridor to far edge of bounded azimuth corridor wedge, measured along azimuth corridor center line.
    /// Example: /// Example: 71.76
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzCorrArcWidth()
    {
        $o = $this->__offset(164);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The error in the semi-intermediate axis.  The semi-intermediate axis is intermediate in length between semi-major and semi-minor axes. This field is doubled and centered on intersection of area semi-major axis and area semi-minor axis at 90 degrees to the plane defined by those axes. For these shapes, the volume is defined as having a 50-percent probability of containing the true location of the referenced entity.
    /// Example: /// Example: 7010.882
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getErrSemiIntAxis()
    {
        $o = $this->__offset(166);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The error in the Area Orientation.  Area Orientation is the angle or roll in degrees, between area semi-minor axis and plane defined by local vertical and area semi-major axis. When reported without major and minor axis, it is angle between an axis perpendicular to a 2D true north axis and plane defined by local vertical and a 2D true north axis.
    /// Example: /// Example: 69.6
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getErrAreaOrient()
    {
        $o = $this->__offset(168);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The error in the Semi-major elevation axis. Semi-major elevation axis is the elevation of the cubical, 3D rectangular, cylindrical, 3D ellipsoidal, or spherical semi-major axis, in degrees, measured from local horizontal.
    /// Example: /// Example: 168.8
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getErrSemiMajElev()
    {
        $o = $this->__offset(170);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Geometric area switch identifies the 3D shape of the error volume by providing the 2D shape for the 3D plane. The 3D plane is the plane orthogonal to the area semi-major axis and area semi-minor axis. Depending on whether the 2D plane is reported as an error ellipse 2D or as an error rectangle 2D, this switch reports a complete error volume that is cubical, 3D rectangular, cylindrical, 3D ellipsoidal, or spherical.
    /// 0 - SWITCH_TYPE_UNKNOWN
    /// 1 - SQUARE_RECTANGLE
    /// 2 - CIRCLE_ELLIPSE.
    /// Example: /// Example: CIRCLE_ELLIPSE
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getErrGeoAreaSwitch()
    {
        $o = $this->__offset(172);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Track point burnout altitude relative to WGS-84 ellipsoid, in meters.
    /// Example: /// Example: 30567.452
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBurnoutAlt()
    {
        $o = $this->__offset(174);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Threat Event System Track ID.
    /// Example: /// Example: 6217
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getTesEventId()
    {
        $o = $this->__offset(176);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Track object speed, in meters/sec.
    /// Example: /// Example: 15.03443
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSpd()
    {
        $o = $this->__offset(178);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The average speed, in kilometers/hour, calculated for the subject during the latest voyage/excursion.
    /// Example: /// Example: 18.25
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgSpd()
    {
        $o = $this->__offset(180);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Motion model Time On Leg in hours.
    /// Example: /// Example: 4.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTol()
    {
        $o = $this->__offset(182);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a track object height above ellipsoid, and negative values indicate a track object below ellipsoid, applicable to the depth estimate for a subsurface track.
    /// Example: /// Example: 153.01
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAlt()
    {
        $o = $this->__offset(184);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Track object heading, in degrees clockwise from true north.
    /// Example: /// Example: 19.7
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHdng()
    {
        $o = $this->__offset(186);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The track object course-over-ground, in degrees clockwise from true North at the object location (0-360 degrees).
    /// Example: /// Example: 4.3580153
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCourse()
    {
        $o = $this->__offset(188);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The number of propeller revolutions per minute for a submarine or ship.
    /// Example: /// Example: 8.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPropRPM()
    {
        $o = $this->__offset(190);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The number of turns of the vessel propellers per knot of forward motion.
    /// Example: /// Example: 2.65
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTpk()
    {
        $o = $this->__offset(192);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Cooperative Location Indicator specifies whether the reported entity location was derived using reported locations from sensors on more than one platform.
    /// 0 - COOPERATIVE_LOCATOR_NONE
    /// 1 - SINGLE_PLATFORM
    /// 2 - FRAGMENT
    /// 3 - COOPERATIVE.
    /// Example: /// Example: COOPERATIVE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCoopLocInd()
    {
        $o = $this->__offset(194);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The manuevering indicator specifying the missile boost phase.
    /// 0 - POST_BOOST_NONE
    /// 1 - POST_BOOST_MANUEVER
    /// 2 - POST_BOOST_COMPLETE_MANUEVER.
    /// Example: /// Example: POST_BOOST_NONE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getManeuverInd()
    {
        $o = $this->__offset(196);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The launch location Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the launchAouData array and is required if launchAouData is not null. See the launchAouData field definition for specific information.
    /// Example: /// Example: ELLIPSE
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getLaunchAouType()
    {
        $o = $this->__offset(198);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Three element array representing the launch location Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the launchAouType specified in this record:
    ///  ELLIPSE:
    ///    brg - orientation in degrees of the ellipse
    ///    a1 - semi-major axis in meters
    ///    a2 - semi-minor axis in meters
    ///  BEARING (BEARING BOX or MTST BEARING BOX):
    ///    brg - orientation in degrees of the bearing box
    ///    a1 - length of bearing box in meters
    ///    a2 - half-width of bearing box in meters
    ///  OTHER (All other type values):
    ///    brg - line of bearing in degrees true
    ///    a1 - bearing error in degrees
    ///    a2 - estimated range in meters.
    /// Example: /// Example: [34.3, 26.5, 1.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLaunchAouData($j)
    {
        $o = $this->__offset(200);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLaunchAouDataLength()
    {
        $o = $this->__offset(200);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The impact point Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the impactAouData array and is required if impactAouData is not null. See the impactAouData field definition for specific information.
    /// Example: /// Example: ELLIPSE
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getImpactAouType()
    {
        $o = $this->__offset(202);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Three element array representing the impact point Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the impactAouType specified in this record:
    ///  ELLIPSE:
    ///    brg - orientation in degrees of the ellipse
    ///    a1 - semi-major axis in meters
    ///    a2 - semi-minor axis in meters
    ///  BEARING (BEARING BOX or MTST BEARING BOX):
    ///    brg - orientation in degrees of the bearing box
    ///    a1 - length of bearing box in meters
    ///    a2 - half-width of bearing box in meters
    ///  OTHER (All other type values):
    ///    brg - line of bearing in degrees true
    ///    a1 - bearing error in degrees
    ///    a2 - estimated range in meters.
    /// Example: /// Example: [34.3, 26.5, 1.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getImpactAouData($j)
    {
        $o = $this->__offset(204);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getImpactAouDataLength()
    {
        $o = $this->__offset(204);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The track Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouRptData array and is required if aouRptData is not null. See the aouRptData field definition for specific information.
    /// Example: /// Example: ELLIPSE
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getAouRptType()
    {
        $o = $this->__offset(206);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouRptType specified in this record:
    ///  ELLIPSE:
    ///    brg - orientation in degrees of the ellipse
    ///    a1 - semi-major axis in meters
    ///    a2 - semi-minor axis in meters
    ///  BEARING (BEARING BOX or MTST BEARING BOX):
    ///    brg - orientation in degrees of the bearing box
    ///    a1 - length of bearing box in meters
    ///    a2 - half-width of bearing box in meters
    ///  OTHER (All other type values):
    ///    brg - line of bearing in degrees true
    ///    a1 - bearing error in degrees
    ///    a2 - estimated range in meters.
    /// Example: /// Example: [34.3, 26.5, 1.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAouRptData($j)
    {
        $o = $this->__offset(208);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAouRptDataLength()
    {
        $o = $this->__offset(208);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Track object location in ECEF [x, y, z], meters. When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.35, 3.42]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getEcefPos($j)
    {
        $o = $this->__offset(210);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEcefPosLength()
    {
        $o = $this->__offset(210);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Track object velocity in ECEF [x', y', z'], meters/sec. When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.35, 3.42]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getEcefVel($j)
    {
        $o = $this->__offset(212);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEcefVelLength()
    {
        $o = $this->__offset(212);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
    /// Example: /// Example: 97
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getContainment()
    {
        $o = $this->__offset(214);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The distance, in meters, of the closest point of approach between this track to the master reference track.
    /// Example: /// Example: 500
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCpa()
    {
        $o = $this->__offset(216);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The time, in ISO 8601 UTC format with millisecond precision, of the  closest point of approach between this track and the master reference track.
    /// Example: /// Example: 2021-02-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    public function getTcpa()
    {
        $o = $this->__offset(218);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored, Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation status definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with navigation status. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    /// Example: /// Example: Underway Using Engine
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getNavStatus()
    {
        $o = $this->__offset(220);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of electronic position fixing device (e.g. GPS, GLONASS, etc.). Intended as, but not constrained to, the USCG NAVCEN electronic position fixing device definitions. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    /// Example: /// Example: GPS
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getPosDeviceType()
    {
        $o = $this->__offset(222);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of Aid to Navigation. Intended as, but not constrained to, the USCG NAVCEN  aids to navigation. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    /// Example: /// Example: Cardinal Mark N
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getAton()
    {
        $o = $this->__offset(224);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator position (OFF, ON, UNK) for optional floating navigational aids only.
    /// Example: /// Example: ON
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getOffPosInd()
    {
        $o = $this->__offset(226);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reference dimensions of the vessel, reported as [A, B, C, D], in meters. Where the array values represent the distance fore (A), aft (B), to port (C), and to starboard (D) of the navigation antenna. Array with values A = C = 0 and B, D > 0 indicate the length (B) and width (D) of the vessel without antenna position reference.
    /// Example: /// Example: [50.1, 50.1, 20.1, 20.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAntennaRefDimensions($j)
    {
        $o = $this->__offset(228);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAntennaRefDimensionsLength()
    {
        $o = $this->__offset(228);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The common name for a group of ships with similar design, usually named for the first vessel of the class.
    /// Example: /// Example: Nimitz
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getShipClass()
    {
        $o = $this->__offset(230);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
    /// Example: /// Example: 9015462
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getImon()
    {
        $o = $this->__offset(232);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
    /// Example: /// Example: 304010417
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMmsi()
    {
        $o = $this->__offset(234);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The maximum static draught, in meters, of the vessel according to the AIS transmission.
    /// Example: /// Example: 21.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDraught()
    {
        $o = $this->__offset(236);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
    /// Example: /// Example: 511.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLength()
    {
        $o = $this->__offset(238);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
    /// Example: /// Example: 24.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWidth()
    {
        $o = $this->__offset(240);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    /// Example: /// Example: Freight
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getCargoType()
    {
        $o = $this->__offset(242);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Appearance group code.
    /// GP1 - Superstructure exceeds 1/3 of ship length.
    /// GP2 - Superstructure less than 1/3 of ship length.
    /// GP3 - Stack aft.
    /// Example: /// Example: GP1
    /// Constraints: Minimum length = 0, Maximum length = 7
    public function getAppGrp()
    {
        $o = $this->__offset(244);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Hull profile code. Based on GCCS-J hull profiles.
    /// FLUSH           No breaks in Hull Profile.
    /// RAISED 1        Hull Profile shows distinct raised area at bow. Remainder of deck is flush.
    /// RAISED 2        Hull Profile shows distinct raised area amidships. Bow and stern are flush.
    /// RAISED 3        Hull Profile shows distinct raised area at stern. Remainder of deck is flush.
    /// RAISED 1-2-3    Distinct raised areas at bow, midships, and stern with breaks between each raise.
    /// RAISED 1-2      Raised area at bow and midships with break between.
    /// RAISED 1-3      Raised area at bow and stern with break between.
    /// RAISED 12       Continuous raised area encompassing both bow and midships.
    /// RAISED 23       Continuous raised area encompassing midships and stern.
    /// RAISED 12-3     Raised areas at bow, midships and stern. Bow and midship raises are continuous. Break between midship and stern raises.
    /// RAISED 1-23     Raised areas at bow, midships, and stern. Midship and stern raises are continuous with break between bow and midship raises.
    /// RAISED 1-L2-3   Raised areas at bow, midships, and stern with break between each raise. Midships raise is longer than that associated with raised 1-2-3.
    /// Example: /// Example: Raised 1-23
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getHullProf()
    {
        $o = $this->__offset(246);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of propulsion employed by the track object (Diesel, Nuclear).
    /// Example: /// Example: Diesel
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getPropType()
    {
        $o = $this->__offset(248);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The number of blades per shaft of the track object.  Applicable for maritime vessels.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumBlades()
    {
        $o = $this->__offset(250);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The number of shafts on the track object.  Applicable for maritime vessels.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumShafts()
    {
        $o = $this->__offset(252);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The stern type code (Counter, Cruiser) associated with the track object.
    /// Example: /// Example: Cruiser
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getSternType()
    {
        $o = $this->__offset(254);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The weight, in tons, of the vessel associated with this track.
    /// Example: /// Example: 3423.76
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVslWt()
    {
        $o = $this->__offset(256);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Arrival Time of the vessel at the destination, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getArrTime()
    {
        $o = $this->__offset(258);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The flag of the arrival port.
    /// Example: /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getArrFlag()
    {
        $o = $this->__offset(260);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reported arrival cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    /// Example: /// Example: Freight
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getArrCargo()
    {
        $o = $this->__offset(262);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Arrival Port of the vessel according to the AIS transmission.
    /// Example: /// Example: Lanshan
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getArrPort()
    {
        $o = $this->__offset(264);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Departure Port of the vessel according to the AIS transmission.
    /// Example: /// Example: Lanshan
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getDepPort()
    {
        $o = $this->__offset(266);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The flag of the departure port.
    /// Example: /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getDepFlag()
    {
        $o = $this->__offset(268);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reported departure cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    /// Example: /// Example: Freight
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getDepCargo()
    {
        $o = $this->__offset(270);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The flag of the destination port.
    /// Example: /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getDesFlag()
    {
        $o = $this->__offset(272);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reported destination cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    /// Example: /// Example: Freight
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getDesCargo()
    {
        $o = $this->__offset(274);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The destination of the vessel according to the AIS transmission.
    /// Example: /// Example: USCLE
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getDestination()
    {
        $o = $this->__offset(276);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Estimated Time of Arrival of the vessel at the destination port, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getEta()
    {
        $o = $this->__offset(278);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Estimated Time of Departure of the vessel from the departure port (depPort), according to Marine Traffic calculations, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getEtd()
    {
        $o = $this->__offset(280);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A text amplifier displaying IFF/SIF/AIS Identification modes and codes.
    /// Example: /// Example: ID Mode
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getIff()
    {
        $o = $this->__offset(282);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating that the track object has an emergency.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getEmgInd()
    {
        $o = $this->__offset(284);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The drop-point indicator setting.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getDropPtInd()
    {
        $o = $this->__offset(286);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getReinforced()
    {
        $o = $this->__offset(288);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating for the track represents a reduced force object or group.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getReduced()
    {
        $o = $this->__offset(290);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getHq()
    {
        $o = $this->__offset(292);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment, and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getDummy()
    {
        $o = $this->__offset(294);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getTaskForce()
    {
        $o = $this->__offset(296);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment, and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getFeint()
    {
        $o = $this->__offset(298);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getInstallation()
    {
        $o = $this->__offset(300);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// A text amplifier for units, equipment and installations; content is implementation specific.
    /// Example: /// Example: Staff Comments
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getStaffCmts()
    {
        $o = $this->__offset(302);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A text amplifier for units, equipment and installations; content is implementation specific.
    /// Example: /// Example: Additional information
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getAddInfo()
    {
        $o = $this->__offset(304);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A text amplifier code for units, equipment, and installations that consists of a one-letter reliability rating and a one-number credibility rating based on the following definitions of each:
    ///  Reliability Ratings:
    ///   A-completely reliable
    ///   B-usually reliable
    ///   C-fairly reliable
    ///   D-not usually reliable
    ///   E-unreliable
    ///   F-reliability cannot be judged
    ///  Credibility Ratings:
    ///   1-confirmed by other sources
    ///   2-probably true
    ///   3-possibly true
    ///   4-doubtfully true
    ///   5-improbable
    ///   6-truth cannot be judged.
    /// Example: /// Example: A1
    /// Constraints: Minimum length = 0, Maximum length = 2
    public function getEvalRating()
    {
        $o = $this->__offset(306);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database.
    /// Example: /// Example: 2021-02-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(308);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(310);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSource()
    {
        $o = $this->__offset(312);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(314);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(316);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \TrackDetails_Ingest_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(318);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startTrackDetails_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(158);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return TrackDetails_Ingest
     */
    public static function createTrackDetails_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $env, $msgType, $hullNum, $pif, $sconum, $ntds, $disId, $midbCat, $beNumber, $oSuffix, $pin, $lostTrkInd, $muidSrcTrk, $muidSrc, $mslStatus, $trkConf, $trkQual, $alert, $origXref, $elnot1, $elnot2, $objIdent, $objType, $objPlat, $objAct, $objNat, $name, $shortName, $trkId, $trkNum, $trkScope, $sourceUid, $callSign, $identAmp, $spaceAmp, $spaceAmpConf, $spaceSpecType, $acftSubType, $ts, $launchTime, $impactTime, $ftnMsgTs, $ftn, $ftnCmd, $rtnMsgTs, $rtn, $rtnTrkState, $rtnCmd, $sen, $rptChxref, $rptArchived, $selfReport, $mil2525Bstr, $trnspdrId, $trnspdrType, $emitterName, $infoSource, $boosting, $freq, $maxFreq, $harmonics, $pri, $prf, $pw, $scanType, $scanRate, $scn, $cI, $angElev, $lat, $lon, $launchLat, $launchLon, $impactLat, $impactLon, $polarSingLocLat, $polarSingLocLon, $azCorrCenterLine, $azCorrArcWidth, $errSemiIntAxis, $errAreaOrient, $errSemiMajElev, $errGeoAreaSwitch, $burnoutAlt, $tesEventId, $spd, $avgSpd, $tol, $alt, $hdng, $course, $propRPM, $tpk, $coopLocInd, $maneuverInd, $launchAouType, $launchAouData, $impactAouType, $impactAouData, $aouRptType, $aouRptData, $ecefPos, $ecefVel, $containment, $cpa, $tcpa, $navStatus, $posDeviceType, $aton, $offPosInd, $antennaRefDimensions, $shipClass, $imon, $mmsi, $draught, $length, $width, $cargoType, $appGrp, $hullProf, $propType, $numBlades, $numShafts, $sternType, $vslWt, $arrTime, $arrFlag, $arrCargo, $arrPort, $depPort, $depFlag, $depCargo, $desFlag, $desCargo, $destination, $eta, $etd, $iff, $emgInd, $dropPtInd, $reinforced, $reduced, $hq, $dummy, $taskForce, $feint, $installation, $staffCmts, $addInfo, $evalRating, $createdAt, $createdBy, $source, $origin, $dataMode, $origNetwork)
    {
        $builder->startObject(158);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addEnv($builder, $env);
        self::addMsgType($builder, $msgType);
        self::addHullNum($builder, $hullNum);
        self::addPif($builder, $pif);
        self::addSconum($builder, $sconum);
        self::addNtds($builder, $ntds);
        self::addDisId($builder, $disId);
        self::addMidbCat($builder, $midbCat);
        self::addBeNumber($builder, $beNumber);
        self::addOSuffix($builder, $oSuffix);
        self::addPin($builder, $pin);
        self::addLostTrkInd($builder, $lostTrkInd);
        self::addMuidSrcTrk($builder, $muidSrcTrk);
        self::addMuidSrc($builder, $muidSrc);
        self::addMslStatus($builder, $mslStatus);
        self::addTrkConf($builder, $trkConf);
        self::addTrkQual($builder, $trkQual);
        self::addAlert($builder, $alert);
        self::addOrigXref($builder, $origXref);
        self::addElnot1($builder, $elnot1);
        self::addElnot2($builder, $elnot2);
        self::addObjIdent($builder, $objIdent);
        self::addObjType($builder, $objType);
        self::addObjPlat($builder, $objPlat);
        self::addObjAct($builder, $objAct);
        self::addObjNat($builder, $objNat);
        self::addName($builder, $name);
        self::addShortName($builder, $shortName);
        self::addTrkId($builder, $trkId);
        self::addTrkNum($builder, $trkNum);
        self::addTrkScope($builder, $trkScope);
        self::addSourceUid($builder, $sourceUid);
        self::addCallSign($builder, $callSign);
        self::addIdentAmp($builder, $identAmp);
        self::addSpaceAmp($builder, $spaceAmp);
        self::addSpaceAmpConf($builder, $spaceAmpConf);
        self::addSpaceSpecType($builder, $spaceSpecType);
        self::addAcftSubType($builder, $acftSubType);
        self::addTs($builder, $ts);
        self::addLaunchTime($builder, $launchTime);
        self::addImpactTime($builder, $impactTime);
        self::addFtnMsgTs($builder, $ftnMsgTs);
        self::addFtn($builder, $ftn);
        self::addFtnCmd($builder, $ftnCmd);
        self::addRtnMsgTs($builder, $rtnMsgTs);
        self::addRtn($builder, $rtn);
        self::addRtnTrkState($builder, $rtnTrkState);
        self::addRtnCmd($builder, $rtnCmd);
        self::addSen($builder, $sen);
        self::addRptChxref($builder, $rptChxref);
        self::addRptArchived($builder, $rptArchived);
        self::addSelfReport($builder, $selfReport);
        self::addMil2525Bstr($builder, $mil2525Bstr);
        self::addTrnspdrId($builder, $trnspdrId);
        self::addTrnspdrType($builder, $trnspdrType);
        self::addEmitterName($builder, $emitterName);
        self::addInfoSource($builder, $infoSource);
        self::addBoosting($builder, $boosting);
        self::addFreq($builder, $freq);
        self::addMaxFreq($builder, $maxFreq);
        self::addHarmonics($builder, $harmonics);
        self::addPri($builder, $pri);
        self::addPrf($builder, $prf);
        self::addPw($builder, $pw);
        self::addScanType($builder, $scanType);
        self::addScanRate($builder, $scanRate);
        self::addScn($builder, $scn);
        self::addCI($builder, $cI);
        self::addAngElev($builder, $angElev);
        self::addLat($builder, $lat);
        self::addLon($builder, $lon);
        self::addLaunchLat($builder, $launchLat);
        self::addLaunchLon($builder, $launchLon);
        self::addImpactLat($builder, $impactLat);
        self::addImpactLon($builder, $impactLon);
        self::addPolarSingLocLat($builder, $polarSingLocLat);
        self::addPolarSingLocLon($builder, $polarSingLocLon);
        self::addAzCorrCenterLine($builder, $azCorrCenterLine);
        self::addAzCorrArcWidth($builder, $azCorrArcWidth);
        self::addErrSemiIntAxis($builder, $errSemiIntAxis);
        self::addErrAreaOrient($builder, $errAreaOrient);
        self::addErrSemiMajElev($builder, $errSemiMajElev);
        self::addErrGeoAreaSwitch($builder, $errGeoAreaSwitch);
        self::addBurnoutAlt($builder, $burnoutAlt);
        self::addTesEventId($builder, $tesEventId);
        self::addSpd($builder, $spd);
        self::addAvgSpd($builder, $avgSpd);
        self::addTol($builder, $tol);
        self::addAlt($builder, $alt);
        self::addHdng($builder, $hdng);
        self::addCourse($builder, $course);
        self::addPropRPM($builder, $propRPM);
        self::addTpk($builder, $tpk);
        self::addCoopLocInd($builder, $coopLocInd);
        self::addManeuverInd($builder, $maneuverInd);
        self::addLaunchAouType($builder, $launchAouType);
        self::addLaunchAouData($builder, $launchAouData);
        self::addImpactAouType($builder, $impactAouType);
        self::addImpactAouData($builder, $impactAouData);
        self::addAouRptType($builder, $aouRptType);
        self::addAouRptData($builder, $aouRptData);
        self::addEcefPos($builder, $ecefPos);
        self::addEcefVel($builder, $ecefVel);
        self::addContainment($builder, $containment);
        self::addCpa($builder, $cpa);
        self::addTcpa($builder, $tcpa);
        self::addNavStatus($builder, $navStatus);
        self::addPosDeviceType($builder, $posDeviceType);
        self::addAton($builder, $aton);
        self::addOffPosInd($builder, $offPosInd);
        self::addAntennaRefDimensions($builder, $antennaRefDimensions);
        self::addShipClass($builder, $shipClass);
        self::addImon($builder, $imon);
        self::addMmsi($builder, $mmsi);
        self::addDraught($builder, $draught);
        self::addLength($builder, $length);
        self::addWidth($builder, $width);
        self::addCargoType($builder, $cargoType);
        self::addAppGrp($builder, $appGrp);
        self::addHullProf($builder, $hullProf);
        self::addPropType($builder, $propType);
        self::addNumBlades($builder, $numBlades);
        self::addNumShafts($builder, $numShafts);
        self::addSternType($builder, $sternType);
        self::addVslWt($builder, $vslWt);
        self::addArrTime($builder, $arrTime);
        self::addArrFlag($builder, $arrFlag);
        self::addArrCargo($builder, $arrCargo);
        self::addArrPort($builder, $arrPort);
        self::addDepPort($builder, $depPort);
        self::addDepFlag($builder, $depFlag);
        self::addDepCargo($builder, $depCargo);
        self::addDesFlag($builder, $desFlag);
        self::addDesCargo($builder, $desCargo);
        self::addDestination($builder, $destination);
        self::addEta($builder, $eta);
        self::addEtd($builder, $etd);
        self::addIff($builder, $iff);
        self::addEmgInd($builder, $emgInd);
        self::addDropPtInd($builder, $dropPtInd);
        self::addReinforced($builder, $reinforced);
        self::addReduced($builder, $reduced);
        self::addHq($builder, $hq);
        self::addDummy($builder, $dummy);
        self::addTaskForce($builder, $taskForce);
        self::addFeint($builder, $feint);
        self::addInstallation($builder, $installation);
        self::addStaffCmts($builder, $staffCmts);
        self::addAddInfo($builder, $addInfo);
        self::addEvalRating($builder, $evalRating);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addEnv(FlatBufferBuilder $builder, $env)
    {
        $builder->addSbyteX(2, $env, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsgType(FlatBufferBuilder $builder, $msgType)
    {
        $builder->addOffsetX(3, $msgType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHullNum(FlatBufferBuilder $builder, $hullNum)
    {
        $builder->addOffsetX(4, $hullNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPif(FlatBufferBuilder $builder, $pif)
    {
        $builder->addOffsetX(5, $pif, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSconum(FlatBufferBuilder $builder, $sconum)
    {
        $builder->addOffsetX(6, $sconum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNtds(FlatBufferBuilder $builder, $ntds)
    {
        $builder->addOffsetX(7, $ntds, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDisId(FlatBufferBuilder $builder, $disId)
    {
        $builder->addOffsetX(8, $disId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMidbCat(FlatBufferBuilder $builder, $midbCat)
    {
        $builder->addOffsetX(9, $midbCat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBeNumber(FlatBufferBuilder $builder, $beNumber)
    {
        $builder->addOffsetX(10, $beNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOSuffix(FlatBufferBuilder $builder, $oSuffix)
    {
        $builder->addOffsetX(11, $oSuffix, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPin(FlatBufferBuilder $builder, $pin)
    {
        $builder->addOffsetX(12, $pin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLostTrkInd(FlatBufferBuilder $builder, $lostTrkInd)
    {
        $builder->addBoolX(13, $lostTrkInd, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMuidSrcTrk(FlatBufferBuilder $builder, $muidSrcTrk)
    {
        $builder->addOffsetX(14, $muidSrcTrk, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMuidSrc(FlatBufferBuilder $builder, $muidSrc)
    {
        $builder->addOffsetX(15, $muidSrc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMslStatus(FlatBufferBuilder $builder, $mslStatus)
    {
        $builder->addOffsetX(16, $mslStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTrkConf(FlatBufferBuilder $builder, $trkConf)
    {
        $builder->addDoubleX(17, $trkConf, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTrkQual(FlatBufferBuilder $builder, $trkQual)
    {
        $builder->addIntX(18, $trkQual, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAlert(FlatBufferBuilder $builder, $alert)
    {
        $builder->addOffsetX(19, $alert, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigXref(FlatBufferBuilder $builder, $origXref)
    {
        $builder->addOffsetX(20, $origXref, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addElnot1(FlatBufferBuilder $builder, $elnot1)
    {
        $builder->addOffsetX(21, $elnot1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addElnot2(FlatBufferBuilder $builder, $elnot2)
    {
        $builder->addOffsetX(22, $elnot2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addObjIdent(FlatBufferBuilder $builder, $objIdent)
    {
        $builder->addSbyteX(23, $objIdent, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjType(FlatBufferBuilder $builder, $objType)
    {
        $builder->addOffsetX(24, $objType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjPlat(FlatBufferBuilder $builder, $objPlat)
    {
        $builder->addOffsetX(25, $objPlat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjAct(FlatBufferBuilder $builder, $objAct)
    {
        $builder->addOffsetX(26, $objAct, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjNat(FlatBufferBuilder $builder, $objNat)
    {
        $builder->addOffsetX(27, $objNat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(28, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addShortName(FlatBufferBuilder $builder, $shortName)
    {
        $builder->addOffsetX(29, $shortName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrkId(FlatBufferBuilder $builder, $trkId)
    {
        $builder->addOffsetX(30, $trkId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrkNum(FlatBufferBuilder $builder, $trkNum)
    {
        $builder->addOffsetX(31, $trkNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrkScope(FlatBufferBuilder $builder, $trkScope)
    {
        $builder->addOffsetX(32, $trkScope, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceUid(FlatBufferBuilder $builder, $sourceUid)
    {
        $builder->addOffsetX(33, $sourceUid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCallSign(FlatBufferBuilder $builder, $callSign)
    {
        $builder->addOffsetX(34, $callSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdentAmp(FlatBufferBuilder $builder, $identAmp)
    {
        $builder->addOffsetX(35, $identAmp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSpaceAmp(FlatBufferBuilder $builder, $spaceAmp)
    {
        $builder->addOffsetX(36, $spaceAmp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSpaceAmpConf(FlatBufferBuilder $builder, $spaceAmpConf)
    {
        $builder->addIntX(37, $spaceAmpConf, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSpaceSpecType(FlatBufferBuilder $builder, $spaceSpecType)
    {
        $builder->addOffsetX(38, $spaceSpecType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAcftSubType(FlatBufferBuilder $builder, $acftSubType)
    {
        $builder->addOffsetX(39, $acftSubType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTs(FlatBufferBuilder $builder, $ts)
    {
        $builder->addOffsetX(40, $ts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchTime(FlatBufferBuilder $builder, $launchTime)
    {
        $builder->addOffsetX(41, $launchTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addImpactTime(FlatBufferBuilder $builder, $impactTime)
    {
        $builder->addOffsetX(42, $impactTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFtnMsgTs(FlatBufferBuilder $builder, $ftnMsgTs)
    {
        $builder->addOffsetX(43, $ftnMsgTs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFtn(FlatBufferBuilder $builder, $ftn)
    {
        $builder->addOffsetX(44, $ftn, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFtnCmd(FlatBufferBuilder $builder, $ftnCmd)
    {
        $builder->addOffsetX(45, $ftnCmd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRtnMsgTs(FlatBufferBuilder $builder, $rtnMsgTs)
    {
        $builder->addOffsetX(46, $rtnMsgTs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRtnMsgTsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRtnMsgTsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRtn(FlatBufferBuilder $builder, $rtn)
    {
        $builder->addOffsetX(47, $rtn, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRtnVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRtnVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRtnTrkState(FlatBufferBuilder $builder, $rtnTrkState)
    {
        $builder->addOffsetX(48, $rtnTrkState, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRtnCmd(FlatBufferBuilder $builder, $rtnCmd)
    {
        $builder->addOffsetX(49, $rtnCmd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSen(FlatBufferBuilder $builder, $sen)
    {
        $builder->addOffsetX(50, $sen, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRptChxref(FlatBufferBuilder $builder, $rptChxref)
    {
        $builder->addOffsetX(51, $rptChxref, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addRptArchived(FlatBufferBuilder $builder, $rptArchived)
    {
        $builder->addBoolX(52, $rptArchived, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addSelfReport(FlatBufferBuilder $builder, $selfReport)
    {
        $builder->addBoolX(53, $selfReport, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMil2525Bstr(FlatBufferBuilder $builder, $mil2525Bstr)
    {
        $builder->addOffsetX(54, $mil2525Bstr, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrnspdrId(FlatBufferBuilder $builder, $trnspdrId)
    {
        $builder->addOffsetX(55, $trnspdrId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrnspdrType(FlatBufferBuilder $builder, $trnspdrType)
    {
        $builder->addOffsetX(56, $trnspdrType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEmitterName(FlatBufferBuilder $builder, $emitterName)
    {
        $builder->addOffsetX(57, $emitterName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addInfoSource(FlatBufferBuilder $builder, $infoSource)
    {
        $builder->addOffsetX(58, $infoSource, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addBoosting(FlatBufferBuilder $builder, $boosting)
    {
        $builder->addBoolX(59, $boosting, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFreq(FlatBufferBuilder $builder, $freq)
    {
        $builder->addDoubleX(60, $freq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxFreq(FlatBufferBuilder $builder, $maxFreq)
    {
        $builder->addDoubleX(61, $maxFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHarmonics(FlatBufferBuilder $builder, $harmonics)
    {
        $builder->addOffsetX(62, $harmonics, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPri(FlatBufferBuilder $builder, $pri)
    {
        $builder->addDoubleX(63, $pri, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPrf(FlatBufferBuilder $builder, $prf)
    {
        $builder->addDoubleX(64, $prf, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPw(FlatBufferBuilder $builder, $pw)
    {
        $builder->addDoubleX(65, $pw, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addScanType(FlatBufferBuilder $builder, $scanType)
    {
        $builder->addOffsetX(66, $scanType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addScanRate(FlatBufferBuilder $builder, $scanRate)
    {
        $builder->addDoubleX(67, $scanRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addScn(FlatBufferBuilder $builder, $scn)
    {
        $builder->addIntX(68, $scn, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCI(FlatBufferBuilder $builder, $cI)
    {
        $builder->addOffsetX(69, $cI, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAngElev(FlatBufferBuilder $builder, $angElev)
    {
        $builder->addDoubleX(70, $angElev, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLat(FlatBufferBuilder $builder, $lat)
    {
        $builder->addDoubleX(71, $lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLon(FlatBufferBuilder $builder, $lon)
    {
        $builder->addDoubleX(72, $lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLaunchLat(FlatBufferBuilder $builder, $launchLat)
    {
        $builder->addDoubleX(73, $launchLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLaunchLon(FlatBufferBuilder $builder, $launchLon)
    {
        $builder->addDoubleX(74, $launchLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addImpactLat(FlatBufferBuilder $builder, $impactLat)
    {
        $builder->addDoubleX(75, $impactLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addImpactLon(FlatBufferBuilder $builder, $impactLon)
    {
        $builder->addDoubleX(76, $impactLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPolarSingLocLat(FlatBufferBuilder $builder, $polarSingLocLat)
    {
        $builder->addDoubleX(77, $polarSingLocLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPolarSingLocLon(FlatBufferBuilder $builder, $polarSingLocLon)
    {
        $builder->addDoubleX(78, $polarSingLocLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzCorrCenterLine(FlatBufferBuilder $builder, $azCorrCenterLine)
    {
        $builder->addDoubleX(79, $azCorrCenterLine, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzCorrArcWidth(FlatBufferBuilder $builder, $azCorrArcWidth)
    {
        $builder->addDoubleX(80, $azCorrArcWidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addErrSemiIntAxis(FlatBufferBuilder $builder, $errSemiIntAxis)
    {
        $builder->addDoubleX(81, $errSemiIntAxis, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addErrAreaOrient(FlatBufferBuilder $builder, $errAreaOrient)
    {
        $builder->addDoubleX(82, $errAreaOrient, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addErrSemiMajElev(FlatBufferBuilder $builder, $errSemiMajElev)
    {
        $builder->addDoubleX(83, $errSemiMajElev, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addErrGeoAreaSwitch(FlatBufferBuilder $builder, $errGeoAreaSwitch)
    {
        $builder->addOffsetX(84, $errGeoAreaSwitch, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBurnoutAlt(FlatBufferBuilder $builder, $burnoutAlt)
    {
        $builder->addDoubleX(85, $burnoutAlt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTesEventId(FlatBufferBuilder $builder, $tesEventId)
    {
        $builder->addOffsetX(86, $tesEventId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSpd(FlatBufferBuilder $builder, $spd)
    {
        $builder->addDoubleX(87, $spd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgSpd(FlatBufferBuilder $builder, $avgSpd)
    {
        $builder->addDoubleX(88, $avgSpd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTol(FlatBufferBuilder $builder, $tol)
    {
        $builder->addDoubleX(89, $tol, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAlt(FlatBufferBuilder $builder, $alt)
    {
        $builder->addDoubleX(90, $alt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHdng(FlatBufferBuilder $builder, $hdng)
    {
        $builder->addDoubleX(91, $hdng, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCourse(FlatBufferBuilder $builder, $course)
    {
        $builder->addDoubleX(92, $course, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPropRPM(FlatBufferBuilder $builder, $propRPM)
    {
        $builder->addDoubleX(93, $propRPM, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTpk(FlatBufferBuilder $builder, $tpk)
    {
        $builder->addDoubleX(94, $tpk, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCoopLocInd(FlatBufferBuilder $builder, $coopLocInd)
    {
        $builder->addOffsetX(95, $coopLocInd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addManeuverInd(FlatBufferBuilder $builder, $maneuverInd)
    {
        $builder->addOffsetX(96, $maneuverInd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchAouType(FlatBufferBuilder $builder, $launchAouType)
    {
        $builder->addOffsetX(97, $launchAouType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLaunchAouData(FlatBufferBuilder $builder, $launchAouData)
    {
        $builder->addOffsetX(98, $launchAouData, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLaunchAouDataVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLaunchAouDataVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addImpactAouType(FlatBufferBuilder $builder, $impactAouType)
    {
        $builder->addOffsetX(99, $impactAouType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addImpactAouData(FlatBufferBuilder $builder, $impactAouData)
    {
        $builder->addOffsetX(100, $impactAouData, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createImpactAouDataVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startImpactAouDataVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAouRptType(FlatBufferBuilder $builder, $aouRptType)
    {
        $builder->addOffsetX(101, $aouRptType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAouRptData(FlatBufferBuilder $builder, $aouRptData)
    {
        $builder->addOffsetX(102, $aouRptData, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAouRptDataVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAouRptDataVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEcefPos(FlatBufferBuilder $builder, $ecefPos)
    {
        $builder->addOffsetX(103, $ecefPos, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEcefPosVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEcefPosVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEcefVel(FlatBufferBuilder $builder, $ecefVel)
    {
        $builder->addOffsetX(104, $ecefVel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEcefVelVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEcefVelVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addContainment(FlatBufferBuilder $builder, $containment)
    {
        $builder->addDoubleX(105, $containment, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCpa(FlatBufferBuilder $builder, $cpa)
    {
        $builder->addDoubleX(106, $cpa, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTcpa(FlatBufferBuilder $builder, $tcpa)
    {
        $builder->addOffsetX(107, $tcpa, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNavStatus(FlatBufferBuilder $builder, $navStatus)
    {
        $builder->addOffsetX(108, $navStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPosDeviceType(FlatBufferBuilder $builder, $posDeviceType)
    {
        $builder->addOffsetX(109, $posDeviceType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAton(FlatBufferBuilder $builder, $aton)
    {
        $builder->addOffsetX(110, $aton, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOffPosInd(FlatBufferBuilder $builder, $offPosInd)
    {
        $builder->addOffsetX(111, $offPosInd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAntennaRefDimensions(FlatBufferBuilder $builder, $antennaRefDimensions)
    {
        $builder->addOffsetX(112, $antennaRefDimensions, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAntennaRefDimensionsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAntennaRefDimensionsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addShipClass(FlatBufferBuilder $builder, $shipClass)
    {
        $builder->addOffsetX(113, $shipClass, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addImon(FlatBufferBuilder $builder, $imon)
    {
        $builder->addIntX(114, $imon, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMmsi(FlatBufferBuilder $builder, $mmsi)
    {
        $builder->addIntX(115, $mmsi, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDraught(FlatBufferBuilder $builder, $draught)
    {
        $builder->addDoubleX(116, $draught, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLength(FlatBufferBuilder $builder, $length)
    {
        $builder->addDoubleX(117, $length, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWidth(FlatBufferBuilder $builder, $width)
    {
        $builder->addDoubleX(118, $width, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCargoType(FlatBufferBuilder $builder, $cargoType)
    {
        $builder->addOffsetX(119, $cargoType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAppGrp(FlatBufferBuilder $builder, $appGrp)
    {
        $builder->addOffsetX(120, $appGrp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHullProf(FlatBufferBuilder $builder, $hullProf)
    {
        $builder->addOffsetX(121, $hullProf, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPropType(FlatBufferBuilder $builder, $propType)
    {
        $builder->addOffsetX(122, $propType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumBlades(FlatBufferBuilder $builder, $numBlades)
    {
        $builder->addIntX(123, $numBlades, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumShafts(FlatBufferBuilder $builder, $numShafts)
    {
        $builder->addIntX(124, $numShafts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSternType(FlatBufferBuilder $builder, $sternType)
    {
        $builder->addOffsetX(125, $sternType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVslWt(FlatBufferBuilder $builder, $vslWt)
    {
        $builder->addDoubleX(126, $vslWt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArrTime(FlatBufferBuilder $builder, $arrTime)
    {
        $builder->addOffsetX(127, $arrTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArrFlag(FlatBufferBuilder $builder, $arrFlag)
    {
        $builder->addOffsetX(128, $arrFlag, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArrCargo(FlatBufferBuilder $builder, $arrCargo)
    {
        $builder->addOffsetX(129, $arrCargo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArrPort(FlatBufferBuilder $builder, $arrPort)
    {
        $builder->addOffsetX(130, $arrPort, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepPort(FlatBufferBuilder $builder, $depPort)
    {
        $builder->addOffsetX(131, $depPort, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepFlag(FlatBufferBuilder $builder, $depFlag)
    {
        $builder->addOffsetX(132, $depFlag, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepCargo(FlatBufferBuilder $builder, $depCargo)
    {
        $builder->addOffsetX(133, $depCargo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDesFlag(FlatBufferBuilder $builder, $desFlag)
    {
        $builder->addOffsetX(134, $desFlag, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDesCargo(FlatBufferBuilder $builder, $desCargo)
    {
        $builder->addOffsetX(135, $desCargo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDestination(FlatBufferBuilder $builder, $destination)
    {
        $builder->addOffsetX(136, $destination, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEta(FlatBufferBuilder $builder, $eta)
    {
        $builder->addOffsetX(137, $eta, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEtd(FlatBufferBuilder $builder, $etd)
    {
        $builder->addOffsetX(138, $etd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIff(FlatBufferBuilder $builder, $iff)
    {
        $builder->addOffsetX(139, $iff, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addEmgInd(FlatBufferBuilder $builder, $emgInd)
    {
        $builder->addBoolX(140, $emgInd, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addDropPtInd(FlatBufferBuilder $builder, $dropPtInd)
    {
        $builder->addBoolX(141, $dropPtInd, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addReinforced(FlatBufferBuilder $builder, $reinforced)
    {
        $builder->addBoolX(142, $reinforced, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addReduced(FlatBufferBuilder $builder, $reduced)
    {
        $builder->addBoolX(143, $reduced, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addHq(FlatBufferBuilder $builder, $hq)
    {
        $builder->addBoolX(144, $hq, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addDummy(FlatBufferBuilder $builder, $dummy)
    {
        $builder->addBoolX(145, $dummy, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addTaskForce(FlatBufferBuilder $builder, $taskForce)
    {
        $builder->addBoolX(146, $taskForce, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addFeint(FlatBufferBuilder $builder, $feint)
    {
        $builder->addBoolX(147, $feint, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addInstallation(FlatBufferBuilder $builder, $installation)
    {
        $builder->addBoolX(148, $installation, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStaffCmts(FlatBufferBuilder $builder, $staffCmts)
    {
        $builder->addOffsetX(149, $staffCmts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAddInfo(FlatBufferBuilder $builder, $addInfo)
    {
        $builder->addOffsetX(150, $addInfo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEvalRating(FlatBufferBuilder $builder, $evalRating)
    {
        $builder->addOffsetX(151, $evalRating, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(152, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(153, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(154, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(155, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(156, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(157, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endTrackDetails_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishTrackDetails_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "TRAC");
    }
}
