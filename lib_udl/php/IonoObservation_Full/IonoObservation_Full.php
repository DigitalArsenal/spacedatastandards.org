<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// These services provide operations for posting and querying ionospheric observation data. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
class IonoObservation_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return IonoObservation_Full
     */
    public static function getRootAsIonoObservation_Full(ByteBuffer $bb)
    {
        $obj = new IonoObservation_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function IonoObservation_FullIdentifier()
    {
        return "IONO";
    }

    public static function IonoObservation_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::IonoObservation_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return IonoObservation_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: IONOOBSERVATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigSensorId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Ionosonde hardware type or data collection type together with possible additional descriptors.
    /// Example: /// Example: Example hardware type
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSystem()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the algorithm used for the electron density profile.
    /// Example: /// Example: NH
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getNeProfileName()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Version of the algorithm used for the electron density profile.
    /// Example: /// Example: 4.32
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNeProfileVersion()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getScalerInfo()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getDensityProfile()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// URSI code for station or stations producing the ionosonde.
    /// Example: /// Example: STATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getStationId()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Sounding Start time in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getStartTimeUTC()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Names of settings.
    /// Example: /// Example: Example settings
    /// Constraints: Minimum length = 1, Maximum length = 1024
    public function getSystemInfo()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Details concerning the composition/intention/interpretation/audience/etc. of any data recorded here. This field may contain all of the intended information e.g. info on signal waveforms used, antenna setup, etc. OR may describe the data/settings to be provided in the “data” field.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getSystemNotes()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
    /// Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTransmitCoordinates($j)
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTransmitCoordinatesLength()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Enums: Mobile, Static.
    /// Example: /// Example: Mobile
    /// Constraints: Minimum length = 0, Maximum length = 16
    /**
     * @return sbyte
     */
    public function getTransmitSensorType()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \IonoObservation_Full_transmitSensorType_Enum::MOBILE;
    }

    /// List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
    /// Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getReceiveCoordinates($j)
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getReceiveCoordinatesLength()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Enums: Mobile, Static.
    /// Example: /// Example: Mobile
    /// Constraints: Minimum length = 0, Maximum length = 16
    /**
     * @return sbyte
     */
    public function getReceiveSensorType()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \IonoObservation_Full_receiveSensorType_Enum::MOBILE;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getAntennaElementPosition()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Enums: J2000, ECR/ECEF, TEME, GCRF, WGS84 (GEODetic lat, long, alt), GEOCentric (lat, long, radii).
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getAntennaElementPositionCoordinateSystem()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum::J2000;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getPower()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getRange()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getFrequency()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getPolarization()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getAzimuth()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getElevation()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of restricted frequencies.
    /// Example: /// Example: [12.5, 34.5, 45.3]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRestrictedFrequency($j)
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRestrictedFrequencyLength()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Notes for the restrictedFrequency data.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getRestrictedFrequencyNotes()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getDoppler()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getTime()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getStokes()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getAmplitude()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getPhase()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The ordinary wave critical frequency of the highest stratification in the F region, specified in MHz. URSI ID: 00.
    /// Example: /// Example: 6.75
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFoF2()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The ordinary wave F1 critical frequency, in MHz. URSI ID: 10.
    /// Example: /// Example: 8.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFoF1()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The extraordinary wave F2 critical frequency, in MHz. URSI ID: 01.
    /// Example: /// Example: 4.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFxF2()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The extraordinary wave F1 critical frequency, in MHz. URSI ID: 11.
    /// Example: /// Example: 4.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFxF1()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// MUF(D)/foF2.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMd()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Lowest usable frequency.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLuf()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum Usable Frequency for ground distance D in MHz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMufd()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Lowest frequency at which echo traces are observed on the ionogram, in MHz. URSI ID: 42.
    /// Example: /// Example: 2.025
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFmin()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Highest ordinary wave frequency at which a mainly continuous Es trace is observed, in MHz. URSI ID: 30.
    /// Example: /// Example: 2.35
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFoEs()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Minimum frequency of F layer echoes in MHz. URSI ID: 80.
    /// Example: /// Example: 2.7
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFminF()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Minimum frequency of E layer echoes in MHz. URSI ID: 81.
    /// Example: /// Example: 2.025
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFminE()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The ordinary wave critical frequency of the lowest thick layer which causes a discontinuity, in MHz. URSI ID: 20.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFoE()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The extraordinary wave E critical frequency, in MHz. URSI ID: 21.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFxE()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The highest frequency of F-trace in MHz. Note: fxI is with capital i. URSI ID: 51.
    /// Example: /// Example: 7.525
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFxI()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The minimum virtual height of the ordinary wave trace taken as a whole, in km. URSI ID: 16.
    /// Example: /// Example: 238.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHprimeF()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The minimum virtual height of ordinary wave trace for the highest stable stratification in the F region in km. URSI ID: 4.
    /// Example: /// Example: 238.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHprimeF2()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The minimum virtual height of reflection at a point where the trace is horizontal in the F region in km. URSI ID: 14.
    /// Example: /// Example: 230.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHprimeF1()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The minimum virtual height of the normal E layer trace in km. URSI ID: 24.
    /// Example: /// Example: 98.47
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHprimeE()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The minimum height of the trace used to give foEs in km. URSI ID: 34.
    /// Example: /// Example: 95
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHprimeEs()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peak height of E-layer in km. URSI ID: 90.
    /// Example: /// Example: 91.744
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZmE()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Parabolic E layer semi-thickness in km. URSI ID: 83.
    /// Example: /// Example: 1.722
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getYE()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average range spread of F layer in km. URSI ID: 84.
    /// Example: /// Example: 1.83
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getQf()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average range spread of E layer in km. URSI ID: 85.
    /// Example: /// Example: 0.95
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getQe()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Lowering of F trace to the leading edge in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDownF()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Lowering of E trace to the leading edge in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDownE()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Lowering of Es trace to the leading edge in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDownEs()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Frequency spread between fxF2 and FxI in MHz. URSI ID: 86.
    /// Example: /// Example: 0.075
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFf()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Frequency spread beyond foE in MHz. URSI ID: 87.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFe()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Distance for MUF calculation in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// MUF/OblFactor in MHz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFmuf()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Virtual height at MUF/OblFactor frequency in MHz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHprimefMUF()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Adjustment to the scaled foF2 during profile inversion in MHz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeltafoF2()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Predicted value of foE in MHz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFoEp()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The frequency at which hprimeF is measured in MHz. URSI ID: 61.
    /// Example: /// Example: 2.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFhprimeF()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The frequency at which hprimeF2 is measured in MHz. URSI ID: 60.
    /// Example: /// Example: 2.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFhprimeF2()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Predicted value of foF1 in MHz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFoF1p()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Predicted value of foF2 in MHz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFoF2p()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// True height of the F2 peak in km. URSI ID: AE.
    /// Example: /// Example: 240.498
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHmF2()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// True height of the F1 peak in km. URSI ID: BE.
    /// Example: /// Example: 230.128
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHmF1()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// True height of the E peak in km. URSI ID: CE.
    /// Example: /// Example: 215.643
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHmE()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// True height at half peak electron density in the F2 layer in km. URSI ID: 93.
    /// Example: /// Example: 240.498
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZhalfNm()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Minimum frequency of Es layer in MHz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFminEs()
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Parabolic F2 layer semi-thickness in km. URSI ID: 94.
    /// Example: /// Example: 62.178
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getYF2()
    {
        $o = $this->__offset(152);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Parabolic F1 layer semi-thickness in km. URSI ID: 95.
    /// Example: /// Example: 55.645
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getYF1()
    {
        $o = $this->__offset(154);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total Ionospheric Electron Content *10^16e/m^2. 1 TEC Unit (TECU) = 10^16 electrons/m^2. URSI ID: 72.
    /// Example: /// Example: 24.673
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTec()
    {
        $o = $this->__offset(156);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Effective scale height at hmF2 Titheridge method in km. URSI ID: 69.
    /// Example: /// Example: 35.613
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getScaleHeightF2Peak()
    {
        $o = $this->__offset(158);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// IRI thickness parameter in km. URSI ID: D0.
    /// Example: /// Example: 68.07
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getB0()
    {
        $o = $this->__offset(160);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// IRI profile shape parameter. URSI ID: D1.
    /// Example: /// Example: 1.87
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getB1()
    {
        $o = $this->__offset(162);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// IRI profile shape parameter, F1 layer. URSI ID: D2.
    /// Example: /// Example: 1.94
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD1()
    {
        $o = $this->__offset(164);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Critical frequency of night time auroral E layer in MHz. URSI ID: 23.
    /// Example: /// Example: 45.764
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFoEa()
    {
        $o = $this->__offset(166);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Minimum virtual height of night time auroral E layer trace in km. URSI ID: 27.
    /// Example: /// Example: 102.6
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHprimeEa()
    {
        $o = $this->__offset(168);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Highest ordinary wave critical frequency of F region patch trace in MHz. URSI ID: 55.
    /// Example: /// Example: 87.21
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFoP()
    {
        $o = $this->__offset(170);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Minimum virtual height of the trace used to determine foP in km. URSI ID: 56.
    /// Example: /// Example: 89.45
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHprimeP()
    {
        $o = $this->__offset(172);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The blanketing frequency of layer used to derive foEs in MHz. URSI ID: 32.
    /// Example: /// Example: 34.867
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFbEs()
    {
        $o = $this->__offset(174);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Characterization of the shape of Es trace. URSI ID: 36.
    /// Example: /// Example: Auroral
    /// Constraints: Minimum length = 0, Maximum length = 25
    public function getTypeEs()
    {
        $o = $this->__offset(176);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// List of attributes that are associated with the specified characteristics. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. 
    /// Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCharAtts($j)
    {
        $o = $this->__offset(178);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCharAttsLength()
    {
        $o = $this->__offset(178);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of altitudes above station level for plasma frequency/density arrays in km (must match the size of the plasmaFrequency and electronDensity Arrays).
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getHeight($j)
    {
        $o = $this->__offset(180);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getHeightLength()
    {
        $o = $this->__offset(180);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of plasma frequencies in MHz (must match the size of the height and electronDensity arrays).
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getPlasmaFrequency($j)
    {
        $o = $this->__offset(182);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getPlasmaFrequencyLength()
    {
        $o = $this->__offset(182);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Uncertainty in specifying the electron plasma frequency at each height point of the profile (must match the size of the plasmaFrequency array).
    /// Example: /// Example: [0.8, 0.2, 0.5]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getPlasmaFrequencyUncertainty($j)
    {
        $o = $this->__offset(184);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getPlasmaFrequencyUncertaintyLength()
    {
        $o = $this->__offset(184);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of electron densities in cm^-3 (must match the size of the height and plasmaFrequency arrays).
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getElectronDensity($j)
    {
        $o = $this->__offset(186);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getElectronDensityLength()
    {
        $o = $this->__offset(186);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Uncertainty in specifying the electron density at each height point of the profile (must match the size of the electronDensity array).
    /// Example: /// Example: [0.8, 0.2, 0.5]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getElectronDensityUncertainty($j)
    {
        $o = $this->__offset(188);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getElectronDensityUncertaintyLength()
    {
        $o = $this->__offset(188);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of Legacy Artist Flags.
    /// Example: /// Example: [1, 2, 3]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getArtistFlags($j)
    {
        $o = $this->__offset(190);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getArtistFlagsLength()
    {
        $o = $this->__offset(190);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getTraceGeneric()
    {
        $o = $this->__offset(192);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of speed in m/s at which the disturbance travels through the ionosphere.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTidPhaseSpeeds($j)
    {
        $o = $this->__offset(194);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTidPhaseSpeedsLength()
    {
        $o = $this->__offset(194);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of degrees clockwise from true North of the TID.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTidAzimuth($j)
    {
        $o = $this->__offset(196);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTidAzimuthLength()
    {
        $o = $this->__offset(196);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of 1/frequency of the TID wave.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTidPeriods($j)
    {
        $o = $this->__offset(198);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTidPeriodsLength()
    {
        $o = $this->__offset(198);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getDatum()
    {
        $o = $this->__offset(200);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Equipment location.
    /// Example: /// Example: Millstone Hill
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getPlatformName()
    {
        $o = $this->__offset(202);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(204);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(206);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(208);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(210);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(212);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(214);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(216);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \IonoObservation_Full_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(218);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startIonoObservation_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(108);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return IonoObservation_Full
     */
    public static function createIonoObservation_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $idSensor, $origSensorId, $system, $neProfileName, $neProfileVersion, $scalerInfo, $densityProfile, $stationId, $startTimeUTC, $systemInfo, $systemNotes, $transmitCoordinates, $transmitSensorType, $receiveCoordinates, $receiveSensorType, $antennaElementPosition, $antennaElementPositionCoordinateSystem, $power, $range, $frequency, $polarization, $azimuth, $elevation, $restrictedFrequency, $restrictedFrequencyNotes, $doppler, $time, $stokes, $amplitude, $phase, $foF2, $foF1, $fxF2, $fxF1, $md, $luf, $mufd, $fmin, $foEs, $fminF, $fminE, $foE, $fxE, $fxI, $hprimeF, $hprimeF2, $hprimeF1, $hprimeE, $hprimeEs, $zmE, $yE, $qf, $qe, $downF, $downE, $downEs, $ff, $fe, $d, $fmuf, $hprimefMUF, $deltafoF2, $foEp, $fhprimeF, $fhprimeF2, $foF1p, $foF2p, $hmF2, $hmF1, $hmE, $zhalfNm, $fminEs, $yF2, $yF1, $tec, $scaleHeightF2Peak, $b0, $b1, $d1, $foEa, $hprimeEa, $foP, $hprimeP, $fbEs, $typeEs, $charAtts, $height, $plasmaFrequency, $plasmaFrequencyUncertainty, $electronDensity, $electronDensityUncertainty, $artistFlags, $traceGeneric, $tidPhaseSpeeds, $tidAzimuth, $tidPeriods, $datum, $platformName, $createdAt, $createdBy, $updatedAt, $updatedBy, $source, $origin, $dataMode, $origNetwork)
    {
        $builder->startObject(108);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdSensor($builder, $idSensor);
        self::addOrigSensorId($builder, $origSensorId);
        self::addSystem($builder, $system);
        self::addNeProfileName($builder, $neProfileName);
        self::addNeProfileVersion($builder, $neProfileVersion);
        self::addScalerInfo($builder, $scalerInfo);
        self::addDensityProfile($builder, $densityProfile);
        self::addStationId($builder, $stationId);
        self::addStartTimeUTC($builder, $startTimeUTC);
        self::addSystemInfo($builder, $systemInfo);
        self::addSystemNotes($builder, $systemNotes);
        self::addTransmitCoordinates($builder, $transmitCoordinates);
        self::addTransmitSensorType($builder, $transmitSensorType);
        self::addReceiveCoordinates($builder, $receiveCoordinates);
        self::addReceiveSensorType($builder, $receiveSensorType);
        self::addAntennaElementPosition($builder, $antennaElementPosition);
        self::addAntennaElementPositionCoordinateSystem($builder, $antennaElementPositionCoordinateSystem);
        self::addPower($builder, $power);
        self::addRange($builder, $range);
        self::addFrequency($builder, $frequency);
        self::addPolarization($builder, $polarization);
        self::addAzimuth($builder, $azimuth);
        self::addElevation($builder, $elevation);
        self::addRestrictedFrequency($builder, $restrictedFrequency);
        self::addRestrictedFrequencyNotes($builder, $restrictedFrequencyNotes);
        self::addDoppler($builder, $doppler);
        self::addTime($builder, $time);
        self::addStokes($builder, $stokes);
        self::addAmplitude($builder, $amplitude);
        self::addPhase($builder, $phase);
        self::addFoF2($builder, $foF2);
        self::addFoF1($builder, $foF1);
        self::addFxF2($builder, $fxF2);
        self::addFxF1($builder, $fxF1);
        self::addMd($builder, $md);
        self::addLuf($builder, $luf);
        self::addMufd($builder, $mufd);
        self::addFmin($builder, $fmin);
        self::addFoEs($builder, $foEs);
        self::addFminF($builder, $fminF);
        self::addFminE($builder, $fminE);
        self::addFoE($builder, $foE);
        self::addFxE($builder, $fxE);
        self::addFxI($builder, $fxI);
        self::addHprimeF($builder, $hprimeF);
        self::addHprimeF2($builder, $hprimeF2);
        self::addHprimeF1($builder, $hprimeF1);
        self::addHprimeE($builder, $hprimeE);
        self::addHprimeEs($builder, $hprimeEs);
        self::addZmE($builder, $zmE);
        self::addYE($builder, $yE);
        self::addQf($builder, $qf);
        self::addQe($builder, $qe);
        self::addDownF($builder, $downF);
        self::addDownE($builder, $downE);
        self::addDownEs($builder, $downEs);
        self::addFf($builder, $ff);
        self::addFe($builder, $fe);
        self::addD($builder, $d);
        self::addFmuf($builder, $fmuf);
        self::addHprimefMUF($builder, $hprimefMUF);
        self::addDeltafoF2($builder, $deltafoF2);
        self::addFoEp($builder, $foEp);
        self::addFhprimeF($builder, $fhprimeF);
        self::addFhprimeF2($builder, $fhprimeF2);
        self::addFoF1p($builder, $foF1p);
        self::addFoF2p($builder, $foF2p);
        self::addHmF2($builder, $hmF2);
        self::addHmF1($builder, $hmF1);
        self::addHmE($builder, $hmE);
        self::addZhalfNm($builder, $zhalfNm);
        self::addFminEs($builder, $fminEs);
        self::addYF2($builder, $yF2);
        self::addYF1($builder, $yF1);
        self::addTec($builder, $tec);
        self::addScaleHeightF2Peak($builder, $scaleHeightF2Peak);
        self::addB0($builder, $b0);
        self::addB1($builder, $b1);
        self::addD1($builder, $d1);
        self::addFoEa($builder, $foEa);
        self::addHprimeEa($builder, $hprimeEa);
        self::addFoP($builder, $foP);
        self::addHprimeP($builder, $hprimeP);
        self::addFbEs($builder, $fbEs);
        self::addTypeEs($builder, $typeEs);
        self::addCharAtts($builder, $charAtts);
        self::addHeight($builder, $height);
        self::addPlasmaFrequency($builder, $plasmaFrequency);
        self::addPlasmaFrequencyUncertainty($builder, $plasmaFrequencyUncertainty);
        self::addElectronDensity($builder, $electronDensity);
        self::addElectronDensityUncertainty($builder, $electronDensityUncertainty);
        self::addArtistFlags($builder, $artistFlags);
        self::addTraceGeneric($builder, $traceGeneric);
        self::addTidPhaseSpeeds($builder, $tidPhaseSpeeds);
        self::addTidAzimuth($builder, $tidAzimuth);
        self::addTidPeriods($builder, $tidPeriods);
        self::addDatum($builder, $datum);
        self::addPlatformName($builder, $platformName);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(2, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSensorId(FlatBufferBuilder $builder, $origSensorId)
    {
        $builder->addOffsetX(3, $origSensorId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSystem(FlatBufferBuilder $builder, $system)
    {
        $builder->addOffsetX(4, $system, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNeProfileName(FlatBufferBuilder $builder, $neProfileName)
    {
        $builder->addOffsetX(5, $neProfileName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNeProfileVersion(FlatBufferBuilder $builder, $neProfileVersion)
    {
        $builder->addDoubleX(6, $neProfileVersion, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addScalerInfo(FlatBufferBuilder $builder, $scalerInfo)
    {
        $builder->addOffsetX(7, $scalerInfo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDensityProfile(FlatBufferBuilder $builder, $densityProfile)
    {
        $builder->addOffsetX(8, $densityProfile, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStationId(FlatBufferBuilder $builder, $stationId)
    {
        $builder->addOffsetX(9, $stationId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStartTimeUTC(FlatBufferBuilder $builder, $startTimeUTC)
    {
        $builder->addOffsetX(10, $startTimeUTC, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSystemInfo(FlatBufferBuilder $builder, $systemInfo)
    {
        $builder->addOffsetX(11, $systemInfo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSystemNotes(FlatBufferBuilder $builder, $systemNotes)
    {
        $builder->addOffsetX(12, $systemNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTransmitCoordinates(FlatBufferBuilder $builder, $transmitCoordinates)
    {
        $builder->addOffsetX(13, $transmitCoordinates, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTransmitCoordinatesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTransmitCoordinatesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addTransmitSensorType(FlatBufferBuilder $builder, $transmitSensorType)
    {
        $builder->addSbyteX(14, $transmitSensorType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addReceiveCoordinates(FlatBufferBuilder $builder, $receiveCoordinates)
    {
        $builder->addOffsetX(15, $receiveCoordinates, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createReceiveCoordinatesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startReceiveCoordinatesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addReceiveSensorType(FlatBufferBuilder $builder, $receiveSensorType)
    {
        $builder->addSbyteX(16, $receiveSensorType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAntennaElementPosition(FlatBufferBuilder $builder, $antennaElementPosition)
    {
        $builder->addOffsetX(17, $antennaElementPosition, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addAntennaElementPositionCoordinateSystem(FlatBufferBuilder $builder, $antennaElementPositionCoordinateSystem)
    {
        $builder->addSbyteX(18, $antennaElementPositionCoordinateSystem, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPower(FlatBufferBuilder $builder, $power)
    {
        $builder->addOffsetX(19, $power, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRange(FlatBufferBuilder $builder, $range)
    {
        $builder->addOffsetX(20, $range, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFrequency(FlatBufferBuilder $builder, $frequency)
    {
        $builder->addOffsetX(21, $frequency, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPolarization(FlatBufferBuilder $builder, $polarization)
    {
        $builder->addOffsetX(22, $polarization, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAzimuth(FlatBufferBuilder $builder, $azimuth)
    {
        $builder->addOffsetX(23, $azimuth, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addElevation(FlatBufferBuilder $builder, $elevation)
    {
        $builder->addOffsetX(24, $elevation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRestrictedFrequency(FlatBufferBuilder $builder, $restrictedFrequency)
    {
        $builder->addOffsetX(25, $restrictedFrequency, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRestrictedFrequencyVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRestrictedFrequencyVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRestrictedFrequencyNotes(FlatBufferBuilder $builder, $restrictedFrequencyNotes)
    {
        $builder->addOffsetX(26, $restrictedFrequencyNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDoppler(FlatBufferBuilder $builder, $doppler)
    {
        $builder->addOffsetX(27, $doppler, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTime(FlatBufferBuilder $builder, $time)
    {
        $builder->addOffsetX(28, $time, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStokes(FlatBufferBuilder $builder, $stokes)
    {
        $builder->addOffsetX(29, $stokes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAmplitude(FlatBufferBuilder $builder, $amplitude)
    {
        $builder->addOffsetX(30, $amplitude, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPhase(FlatBufferBuilder $builder, $phase)
    {
        $builder->addOffsetX(31, $phase, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFoF2(FlatBufferBuilder $builder, $foF2)
    {
        $builder->addDoubleX(32, $foF2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFoF1(FlatBufferBuilder $builder, $foF1)
    {
        $builder->addDoubleX(33, $foF1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFxF2(FlatBufferBuilder $builder, $fxF2)
    {
        $builder->addDoubleX(34, $fxF2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFxF1(FlatBufferBuilder $builder, $fxF1)
    {
        $builder->addDoubleX(35, $fxF1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMd(FlatBufferBuilder $builder, $md)
    {
        $builder->addDoubleX(36, $md, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLuf(FlatBufferBuilder $builder, $luf)
    {
        $builder->addDoubleX(37, $luf, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMufd(FlatBufferBuilder $builder, $mufd)
    {
        $builder->addDoubleX(38, $mufd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFmin(FlatBufferBuilder $builder, $fmin)
    {
        $builder->addDoubleX(39, $fmin, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFoEs(FlatBufferBuilder $builder, $foEs)
    {
        $builder->addDoubleX(40, $foEs, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFminF(FlatBufferBuilder $builder, $fminF)
    {
        $builder->addDoubleX(41, $fminF, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFminE(FlatBufferBuilder $builder, $fminE)
    {
        $builder->addDoubleX(42, $fminE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFoE(FlatBufferBuilder $builder, $foE)
    {
        $builder->addDoubleX(43, $foE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFxE(FlatBufferBuilder $builder, $fxE)
    {
        $builder->addDoubleX(44, $fxE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFxI(FlatBufferBuilder $builder, $fxI)
    {
        $builder->addDoubleX(45, $fxI, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHprimeF(FlatBufferBuilder $builder, $hprimeF)
    {
        $builder->addDoubleX(46, $hprimeF, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHprimeF2(FlatBufferBuilder $builder, $hprimeF2)
    {
        $builder->addDoubleX(47, $hprimeF2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHprimeF1(FlatBufferBuilder $builder, $hprimeF1)
    {
        $builder->addDoubleX(48, $hprimeF1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHprimeE(FlatBufferBuilder $builder, $hprimeE)
    {
        $builder->addDoubleX(49, $hprimeE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHprimeEs(FlatBufferBuilder $builder, $hprimeEs)
    {
        $builder->addDoubleX(50, $hprimeEs, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZmE(FlatBufferBuilder $builder, $zmE)
    {
        $builder->addDoubleX(51, $zmE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addYE(FlatBufferBuilder $builder, $yE)
    {
        $builder->addDoubleX(52, $yE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addQf(FlatBufferBuilder $builder, $qf)
    {
        $builder->addDoubleX(53, $qf, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addQe(FlatBufferBuilder $builder, $qe)
    {
        $builder->addDoubleX(54, $qe, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDownF(FlatBufferBuilder $builder, $downF)
    {
        $builder->addDoubleX(55, $downF, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDownE(FlatBufferBuilder $builder, $downE)
    {
        $builder->addDoubleX(56, $downE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDownEs(FlatBufferBuilder $builder, $downEs)
    {
        $builder->addDoubleX(57, $downEs, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFf(FlatBufferBuilder $builder, $ff)
    {
        $builder->addDoubleX(58, $ff, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFe(FlatBufferBuilder $builder, $fe)
    {
        $builder->addDoubleX(59, $fe, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD(FlatBufferBuilder $builder, $d)
    {
        $builder->addDoubleX(60, $d, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFmuf(FlatBufferBuilder $builder, $fmuf)
    {
        $builder->addDoubleX(61, $fmuf, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHprimefMUF(FlatBufferBuilder $builder, $hprimefMUF)
    {
        $builder->addDoubleX(62, $hprimefMUF, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeltafoF2(FlatBufferBuilder $builder, $deltafoF2)
    {
        $builder->addDoubleX(63, $deltafoF2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFoEp(FlatBufferBuilder $builder, $foEp)
    {
        $builder->addDoubleX(64, $foEp, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFhprimeF(FlatBufferBuilder $builder, $fhprimeF)
    {
        $builder->addDoubleX(65, $fhprimeF, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFhprimeF2(FlatBufferBuilder $builder, $fhprimeF2)
    {
        $builder->addDoubleX(66, $fhprimeF2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFoF1p(FlatBufferBuilder $builder, $foF1p)
    {
        $builder->addDoubleX(67, $foF1p, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFoF2p(FlatBufferBuilder $builder, $foF2p)
    {
        $builder->addDoubleX(68, $foF2p, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHmF2(FlatBufferBuilder $builder, $hmF2)
    {
        $builder->addDoubleX(69, $hmF2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHmF1(FlatBufferBuilder $builder, $hmF1)
    {
        $builder->addDoubleX(70, $hmF1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHmE(FlatBufferBuilder $builder, $hmE)
    {
        $builder->addDoubleX(71, $hmE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZhalfNm(FlatBufferBuilder $builder, $zhalfNm)
    {
        $builder->addDoubleX(72, $zhalfNm, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFminEs(FlatBufferBuilder $builder, $fminEs)
    {
        $builder->addDoubleX(73, $fminEs, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addYF2(FlatBufferBuilder $builder, $yF2)
    {
        $builder->addDoubleX(74, $yF2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addYF1(FlatBufferBuilder $builder, $yF1)
    {
        $builder->addDoubleX(75, $yF1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTec(FlatBufferBuilder $builder, $tec)
    {
        $builder->addDoubleX(76, $tec, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addScaleHeightF2Peak(FlatBufferBuilder $builder, $scaleHeightF2Peak)
    {
        $builder->addDoubleX(77, $scaleHeightF2Peak, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addB0(FlatBufferBuilder $builder, $b0)
    {
        $builder->addDoubleX(78, $b0, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addB1(FlatBufferBuilder $builder, $b1)
    {
        $builder->addDoubleX(79, $b1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD1(FlatBufferBuilder $builder, $d1)
    {
        $builder->addDoubleX(80, $d1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFoEa(FlatBufferBuilder $builder, $foEa)
    {
        $builder->addDoubleX(81, $foEa, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHprimeEa(FlatBufferBuilder $builder, $hprimeEa)
    {
        $builder->addDoubleX(82, $hprimeEa, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFoP(FlatBufferBuilder $builder, $foP)
    {
        $builder->addDoubleX(83, $foP, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHprimeP(FlatBufferBuilder $builder, $hprimeP)
    {
        $builder->addDoubleX(84, $hprimeP, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFbEs(FlatBufferBuilder $builder, $fbEs)
    {
        $builder->addDoubleX(85, $fbEs, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTypeEs(FlatBufferBuilder $builder, $typeEs)
    {
        $builder->addOffsetX(86, $typeEs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCharAtts(FlatBufferBuilder $builder, $charAtts)
    {
        $builder->addOffsetX(87, $charAtts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCharAttsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCharAttsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addHeight(FlatBufferBuilder $builder, $height)
    {
        $builder->addOffsetX(88, $height, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createHeightVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startHeightVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPlasmaFrequency(FlatBufferBuilder $builder, $plasmaFrequency)
    {
        $builder->addOffsetX(89, $plasmaFrequency, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createPlasmaFrequencyVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startPlasmaFrequencyVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPlasmaFrequencyUncertainty(FlatBufferBuilder $builder, $plasmaFrequencyUncertainty)
    {
        $builder->addOffsetX(90, $plasmaFrequencyUncertainty, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createPlasmaFrequencyUncertaintyVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startPlasmaFrequencyUncertaintyVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addElectronDensity(FlatBufferBuilder $builder, $electronDensity)
    {
        $builder->addOffsetX(91, $electronDensity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createElectronDensityVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startElectronDensityVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addElectronDensityUncertainty(FlatBufferBuilder $builder, $electronDensityUncertainty)
    {
        $builder->addOffsetX(92, $electronDensityUncertainty, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createElectronDensityUncertaintyVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startElectronDensityUncertaintyVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addArtistFlags(FlatBufferBuilder $builder, $artistFlags)
    {
        $builder->addOffsetX(93, $artistFlags, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createArtistFlagsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startArtistFlagsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTraceGeneric(FlatBufferBuilder $builder, $traceGeneric)
    {
        $builder->addOffsetX(94, $traceGeneric, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTidPhaseSpeeds(FlatBufferBuilder $builder, $tidPhaseSpeeds)
    {
        $builder->addOffsetX(95, $tidPhaseSpeeds, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTidPhaseSpeedsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTidPhaseSpeedsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTidAzimuth(FlatBufferBuilder $builder, $tidAzimuth)
    {
        $builder->addOffsetX(96, $tidAzimuth, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTidAzimuthVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTidAzimuthVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTidPeriods(FlatBufferBuilder $builder, $tidPeriods)
    {
        $builder->addOffsetX(97, $tidPeriods, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTidPeriodsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTidPeriodsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDatum(FlatBufferBuilder $builder, $datum)
    {
        $builder->addOffsetX(98, $datum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlatformName(FlatBufferBuilder $builder, $platformName)
    {
        $builder->addOffsetX(99, $platformName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(100, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(101, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(102, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(103, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(104, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(105, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(106, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(107, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endIonoObservation_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishIonoObservation_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "IONO");
    }
}
