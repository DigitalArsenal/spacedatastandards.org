<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection of air refueling events occurring on this flight.
class FlightPlanAirRefuelEvents_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return FlightPlanAirRefuelEvents_Full
     */
    public static function getRootAsFlightPlanAirRefuelEvents_Full(ByteBuffer $bb)
    {
        $obj = new FlightPlanAirRefuelEvents_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function FlightPlanAirRefuelEvents_FullIdentifier()
    {
        return "FLIG";
    }

    public static function FlightPlanAirRefuelEvents_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::FlightPlanAirRefuelEvents_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return FlightPlanAirRefuelEvents_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Additional degrade for air refueling, cumulative with fuelDegrade field percent.
    /// Example: /// Example: 3.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getArDegrade()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The number of this air refueling event within the flight plan.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getArNum()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Fuel onloaded (use positive numbers) or fuel offloaded (use negative numbers) in pounds.
    /// Example: /// Example: 1500.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getArExchangedFuel()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fuel required to fly from air refueling exit point to air refueling divert alternate airfield in pounds.
    /// Example: /// Example: 143000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDivertFuel()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Fuel remaining at the air refueling exit in pounds.
    /// Example: /// Example: 160000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getExitFuel()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startFlightPlanAirRefuelEvents_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(5);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return FlightPlanAirRefuelEvents_Full
     */
    public static function createFlightPlanAirRefuelEvents_Full(FlatBufferBuilder $builder, $arDegrade, $arNum, $arExchangedFuel, $divertFuel, $exitFuel)
    {
        $builder->startObject(5);
        self::addArDegrade($builder, $arDegrade);
        self::addArNum($builder, $arNum);
        self::addArExchangedFuel($builder, $arExchangedFuel);
        self::addDivertFuel($builder, $divertFuel);
        self::addExitFuel($builder, $exitFuel);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addArDegrade(FlatBufferBuilder $builder, $arDegrade)
    {
        $builder->addDoubleX(0, $arDegrade, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addArNum(FlatBufferBuilder $builder, $arNum)
    {
        $builder->addIntX(1, $arNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addArExchangedFuel(FlatBufferBuilder $builder, $arExchangedFuel)
    {
        $builder->addDoubleX(2, $arExchangedFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDivertFuel(FlatBufferBuilder $builder, $divertFuel)
    {
        $builder->addDoubleX(3, $divertFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addExitFuel(FlatBufferBuilder $builder, $exitFuel)
    {
        $builder->addDoubleX(4, $exitFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endFlightPlanAirRefuelEvents_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishFlightPlanAirRefuelEvents_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "FLIG");
    }
}
