<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of orbit determination algorithm results describing General Perturbations or Special Perturbations orbital updates.
class OrbitDetermination_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return OrbitDetermination_Abridged
     */
    public static function getRootAsOrbitDetermination_Abridged(ByteBuffer $bb)
    {
        $obj = new OrbitDetermination_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function OrbitDetermination_AbridgedIdentifier()
    {
        return "ORBI";
    }

    public static function OrbitDetermination_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::OrbitDetermination_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return OrbitDetermination_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Start time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
    /// Example: /// Example: 2023-08-28T11:20:21.247192Z
    /// Constraints: No constraints specified.
    public function getStartTime()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// End time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
    /// Example: /// Example: 2023-08-28T15:20:21.247192Z
    /// Constraints: No constraints specified.
    public function getEndTime()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
    /// Example: /// Example: 54741
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by the OD source to indicate the target on-orbit object of this OD solution. This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigObjectId()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 54741
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Identifier of the element set used to seed this OD solution. This ID can be used to obtain additional information on an Elset object using the 'get by ID' operation (e.g. /udl/elset/{id}). For example, the Elset with idElset = abc would be queried as /udl/elset/abc.
    /// Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAprioriIdElset()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getAprioriElset()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the state vector used to seed this OD solution. This ID can be used to obtain additional information on a StateVector object using the 'get by ID' operation (e.g. /udl/statevector/{id}). For example, the StateVector with idStateVector = abc would be queried as /udl/statevector/abc.
    /// Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAprioriIdStateVector()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getAprioriStateVector()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating whether this is an initial orbit determination.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getInitialOD()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
    /// Example: /// Example: 2023-08-28T11:20:21.247192Z
    /// Constraints: No constraints specified.
    public function getLastObStart()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
    /// Example: /// Example: 2023-08-28T11:20:21.247192Z
    /// Constraints: No constraints specified.
    public function getLastObEnd()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time span used for the OD of the object, in days.
    /// Example: /// Example: 3.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTimeSpan()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional start time at which this OD solution is accurate, in ISO 8601 UTC datetime format with microsecond precision.
    /// Example: /// Example: 2023-08-28T11:20:21.247192Z
    /// Constraints: No constraints specified.
    public function getEffectiveFrom()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional end time at which this OD solution may no longer be accurate, in ISO 8601 UTC datetime format with microsecond precision.
    /// Example: /// Example: 2023-08-30T08:15:00.123456Z
    /// Constraints: No constraints specified.
    public function getEffectiveUntil()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Weighted Root Mean Squared (RMS) of the differential correction of the target object that produced this OD state. WRMS is a quality indicator of the OD update, with a value of 1.00 being optimal. WRMS applies to batch least squares (BLS) processes.
    /// Example: /// Example: 0.991
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWrms()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Weighted Root Mean Squared (RMS) of the differential correction from the previous overhead pass of the satellite. Provides a point of comparison for assessing changes in the quality of the OD solution between consecutive passes.
    /// Example: /// Example: 1.02
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPreviousWrms()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Weighted Root Mean Squared (RMS) calculated for the first satellite pass in the observation span. Serves as the initial quality metric for the beginning of the observation period.
    /// Example: /// Example: 0.985
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFirstPassWrms()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Lowest Weighted Root Mean Squared (RMS) value achieved for any single satellite pass during the observation span, indicating the pass with the highest quality OD solution.
    /// Example: /// Example: 0.975
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBestPassWrms()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Error growth rate of the OD solution in kilometers per day.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getErrorGrowthRate()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Model parameter value for energy dissipation rate (EDR) in watts per kilogram.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEdr()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Orbit determination method used to produce this record (e.g. BLS, KF, UKF, etc.).
    /// Example: /// Example: BLS
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getMethod()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of orbit determination method used to produce this record (e.g. ASW, ACTRAC, FreeFlyer, GEODYNE, GDTS, etc.).
    /// Example: /// Example: ASW
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getMethodSource()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The fit span, in days, used in a Batch Least Squares (BLS) OD.
    /// Example: /// Example: 0.6
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFitSpan()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Flag indicating whether the ballistic coefficient was estimated during this OD solution.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getBallisticCoeffEst()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Model used to estimate the ballistic coefficient.
    /// Example: /// Example: GaussMarkov
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getBallisticCoeffModel()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating whether the AGOM was estimated during this OD solution.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getAgomEst()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Model used to estimate the AGOM.
    /// Example: /// Example: RandomWalk
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getAgomModel()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// OD parameter value for the Root Mean Square (RMS) convergence criteria to successfully close the OD solution.
    /// Example: /// Example: 0.001
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRmsConvergenceCriteria()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The number of iterations taken for the algorithm to converge on an OD solution.
    /// Example: /// Example: 8
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumIterations()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were accepted in this OD solution. See the associated acceptedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The acceptedObTyps and acceptedObIds arrays must match in size.
    /// Example: /// Example: ['EO', 'RADAR']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAcceptedObTyps($j)
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAcceptedObTypsLength()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of UDL data (observation) UUIDs that were accepted in this OD solution. See the associated acceptedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
    /// Example: /// Example: ['EOOBSERVATION-ID1', 'RADAROBSERVATION-ID1']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAcceptedObIds($j)
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAcceptedObIdsLength()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were rejected in this OD solution. See the associated rejectedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The rejectedObTyps and rejectedObIds arrays must match in size.
    /// Example: /// Example: ['DOA', 'RF']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRejectedObTyps($j)
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRejectedObTypsLength()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of UDL data (observation) UUIDs that were rejected in this OD solution. See the associated rejectedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
    /// Example: /// Example: ['DIFFOFARRIVAL-ID2', 'RFOBSERVATION-ID2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRejectedObIds($j)
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRejectedObIdsLength()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of UDL UUIDs (idSensor) of the sensors that contributed observations in this OD solution.
    /// Example: /// Example: ['SENSOR-ID1', 'SENSOR-ID2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSensorIds($j)
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSensorIdsLength()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSource()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \OrbitDetermination_Abridged_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startOrbitDetermination_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(44);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return OrbitDetermination_Abridged
     */
    public static function createOrbitDetermination_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $startTime, $endTime, $idOnOrbit, $origObjectId, $satNo, $aprioriIdElset, $aprioriElset, $aprioriIdStateVector, $aprioriStateVector, $initialOD, $lastObStart, $lastObEnd, $timeSpan, $effectiveFrom, $effectiveUntil, $wrms, $previousWrms, $firstPassWrms, $bestPassWrms, $errorGrowthRate, $edr, $method, $methodSource, $fitSpan, $ballisticCoeffEst, $ballisticCoeffModel, $agomEst, $agomModel, $rmsConvergenceCriteria, $numIterations, $acceptedObTyps, $acceptedObIds, $rejectedObTyps, $rejectedObIds, $sensorIds, $createdAt, $createdBy, $sourceDL, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(44);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addStartTime($builder, $startTime);
        self::addEndTime($builder, $endTime);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addOrigObjectId($builder, $origObjectId);
        self::addSatNo($builder, $satNo);
        self::addAprioriIdElset($builder, $aprioriIdElset);
        self::addAprioriElset($builder, $aprioriElset);
        self::addAprioriIdStateVector($builder, $aprioriIdStateVector);
        self::addAprioriStateVector($builder, $aprioriStateVector);
        self::addInitialOD($builder, $initialOD);
        self::addLastObStart($builder, $lastObStart);
        self::addLastObEnd($builder, $lastObEnd);
        self::addTimeSpan($builder, $timeSpan);
        self::addEffectiveFrom($builder, $effectiveFrom);
        self::addEffectiveUntil($builder, $effectiveUntil);
        self::addWrms($builder, $wrms);
        self::addPreviousWrms($builder, $previousWrms);
        self::addFirstPassWrms($builder, $firstPassWrms);
        self::addBestPassWrms($builder, $bestPassWrms);
        self::addErrorGrowthRate($builder, $errorGrowthRate);
        self::addEdr($builder, $edr);
        self::addMethod($builder, $method);
        self::addMethodSource($builder, $methodSource);
        self::addFitSpan($builder, $fitSpan);
        self::addBallisticCoeffEst($builder, $ballisticCoeffEst);
        self::addBallisticCoeffModel($builder, $ballisticCoeffModel);
        self::addAgomEst($builder, $agomEst);
        self::addAgomModel($builder, $agomModel);
        self::addRmsConvergenceCriteria($builder, $rmsConvergenceCriteria);
        self::addNumIterations($builder, $numIterations);
        self::addAcceptedObTyps($builder, $acceptedObTyps);
        self::addAcceptedObIds($builder, $acceptedObIds);
        self::addRejectedObTyps($builder, $rejectedObTyps);
        self::addRejectedObIds($builder, $rejectedObIds);
        self::addSensorIds($builder, $sensorIds);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStartTime(FlatBufferBuilder $builder, $startTime)
    {
        $builder->addOffsetX(2, $startTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEndTime(FlatBufferBuilder $builder, $endTime)
    {
        $builder->addOffsetX(3, $endTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(4, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(5, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(6, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAprioriIdElset(FlatBufferBuilder $builder, $aprioriIdElset)
    {
        $builder->addOffsetX(7, $aprioriIdElset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAprioriElset(FlatBufferBuilder $builder, $aprioriElset)
    {
        $builder->addOffsetX(8, $aprioriElset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAprioriIdStateVector(FlatBufferBuilder $builder, $aprioriIdStateVector)
    {
        $builder->addOffsetX(9, $aprioriIdStateVector, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAprioriStateVector(FlatBufferBuilder $builder, $aprioriStateVector)
    {
        $builder->addOffsetX(10, $aprioriStateVector, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addInitialOD(FlatBufferBuilder $builder, $initialOD)
    {
        $builder->addBoolX(11, $initialOD, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastObStart(FlatBufferBuilder $builder, $lastObStart)
    {
        $builder->addOffsetX(12, $lastObStart, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastObEnd(FlatBufferBuilder $builder, $lastObEnd)
    {
        $builder->addOffsetX(13, $lastObEnd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTimeSpan(FlatBufferBuilder $builder, $timeSpan)
    {
        $builder->addDoubleX(14, $timeSpan, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEffectiveFrom(FlatBufferBuilder $builder, $effectiveFrom)
    {
        $builder->addOffsetX(15, $effectiveFrom, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEffectiveUntil(FlatBufferBuilder $builder, $effectiveUntil)
    {
        $builder->addOffsetX(16, $effectiveUntil, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWrms(FlatBufferBuilder $builder, $wrms)
    {
        $builder->addDoubleX(17, $wrms, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPreviousWrms(FlatBufferBuilder $builder, $previousWrms)
    {
        $builder->addDoubleX(18, $previousWrms, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFirstPassWrms(FlatBufferBuilder $builder, $firstPassWrms)
    {
        $builder->addDoubleX(19, $firstPassWrms, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBestPassWrms(FlatBufferBuilder $builder, $bestPassWrms)
    {
        $builder->addDoubleX(20, $bestPassWrms, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addErrorGrowthRate(FlatBufferBuilder $builder, $errorGrowthRate)
    {
        $builder->addDoubleX(21, $errorGrowthRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEdr(FlatBufferBuilder $builder, $edr)
    {
        $builder->addDoubleX(22, $edr, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMethod(FlatBufferBuilder $builder, $method)
    {
        $builder->addOffsetX(23, $method, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMethodSource(FlatBufferBuilder $builder, $methodSource)
    {
        $builder->addOffsetX(24, $methodSource, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFitSpan(FlatBufferBuilder $builder, $fitSpan)
    {
        $builder->addDoubleX(25, $fitSpan, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addBallisticCoeffEst(FlatBufferBuilder $builder, $ballisticCoeffEst)
    {
        $builder->addBoolX(26, $ballisticCoeffEst, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBallisticCoeffModel(FlatBufferBuilder $builder, $ballisticCoeffModel)
    {
        $builder->addOffsetX(27, $ballisticCoeffModel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addAgomEst(FlatBufferBuilder $builder, $agomEst)
    {
        $builder->addBoolX(28, $agomEst, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAgomModel(FlatBufferBuilder $builder, $agomModel)
    {
        $builder->addOffsetX(29, $agomModel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRmsConvergenceCriteria(FlatBufferBuilder $builder, $rmsConvergenceCriteria)
    {
        $builder->addDoubleX(30, $rmsConvergenceCriteria, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumIterations(FlatBufferBuilder $builder, $numIterations)
    {
        $builder->addIntX(31, $numIterations, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAcceptedObTyps(FlatBufferBuilder $builder, $acceptedObTyps)
    {
        $builder->addOffsetX(32, $acceptedObTyps, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAcceptedObTypsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAcceptedObTypsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAcceptedObIds(FlatBufferBuilder $builder, $acceptedObIds)
    {
        $builder->addOffsetX(33, $acceptedObIds, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAcceptedObIdsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAcceptedObIdsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRejectedObTyps(FlatBufferBuilder $builder, $rejectedObTyps)
    {
        $builder->addOffsetX(34, $rejectedObTyps, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRejectedObTypsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRejectedObTypsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRejectedObIds(FlatBufferBuilder $builder, $rejectedObIds)
    {
        $builder->addOffsetX(35, $rejectedObIds, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRejectedObIdsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRejectedObIdsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSensorIds(FlatBufferBuilder $builder, $sensorIds)
    {
        $builder->addOffsetX(36, $sensorIds, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSensorIdsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSensorIdsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(37, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(38, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(39, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(40, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(41, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(42, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(43, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endOrbitDetermination_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishOrbitDetermination_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ORBI");
    }
}
