<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Comprehensive logistical details concerning the planned support of maintenance operations required by an aircraft, including transportation information, supplies coordination, and service personnel.
class LogisticsSupport_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return LogisticsSupport_Ingest
     */
    public static function getRootAsLogisticsSupport_Ingest(ByteBuffer $bb)
    {
        $obj = new LogisticsSupport_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function LogisticsSupport_IngestIdentifier()
    {
        return "LOGI";
    }

    public static function LogisticsSupport_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::LogisticsSupport_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return LogisticsSupport_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: LOGISTICS-SUPPORT-DETAILS UUID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional system identifier from external systs. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: GDSSBL012307131347070165
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getExtSystemId()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The tail number of the aircraft that is the subject of this LogisticsSupportDetails record.
    /// Example: /// Example: 99290
    /// Constraints: Minimum length = 0, Maximum length = 7
    public function getTailNumber()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
    /// Example: /// Example: CO17A
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getAircraftMDS()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The current ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
    /// Example: /// Example: KCOS
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getCurrICAO()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The supplying ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
    /// Example: /// Example: KCOS
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getSuppICAO()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time this report was created, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-13T13:47:00.123Z
    /// Constraints: No constraints specified.
    public function getRptCreatedTime()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time this report was closed, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-13T13:47:00.123Z
    /// Constraints: No constraints specified.
    public function getRptClosedTime()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time indicating when a given aircraft breaks for a mission essential reason. This datetime should be in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-13T13:47:00.123Z
    /// Constraints: No constraints specified.
    public function getMeTime()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time indicating when all mission essential problems with a given aircraft have been fixed and is mission capable. This datetime should be in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-13T13:47:00.123Z
    /// Constraints: No constraints specified.
    public function getMcTime()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// This field identifies the pacing event for bringing the aircraft to Mission Capable status.  It is used in calculating the Estimated Time Mission Capable (ETMC) value.  Acceptable values are WA (Will Advise), INW (In Work), P+hhh.h (where P=parts and hhh.h is the number of hours up to 999 plus tenths of hours), EQ+hhh.h (EQ=equipment), MRT+hhh.h (MRT=maintenance recovery team).
    /// Example: /// Example: WA
    /// Constraints: Minimum length = 0, Maximum length = 9
    public function getLogisticAction()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The identifier that represents a Logistics Master Record.
    /// Example: /// Example: L62017
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getLogisticsRecordId()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The estimated time mission capable for the aircraft, in ISO 8601 UCT format with millisecond precision. This is the estimated time when the aircraft is mission ready.
    /// Example: /// Example: 2023-07-13T13:47:00.123Z
    /// Constraints: No constraints specified.
    public function getEtic()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Logistics estimated time mission capable.
    /// Example: /// Example: 2023-07-13T13:47:00.123Z
    /// Constraints: No constraints specified.
    public function getEtmc()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The maintenance status code of the aircraft which may be based on pilot descriptions or evaluation codes. Contact the source provider for details.
    /// Example: /// Example: NMCMU
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getMaintStatusCode()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// This is used to indicate whether a closed master record has been reopened.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getReopenFlag()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The organization that owns this logistics record.
    /// Example: /// Example: EXAMPLE_OWNER
    /// Constraints: Minimum length = 0, Maximum length = 250
    public function getOwner()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Remarks associated with this LogisticsSupport record.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLogisticsRemarks($j)
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLogisticsRemarksLength()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Discrepancy information associated with this LogisticsSupport record.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLogisticsDiscrepancyInfos($j)
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLogisticsDiscrepancyInfosLength()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLogisticsTransportationPlans($j)
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLogisticsTransportationPlansLength()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Support items associated with this LogisticsSupport record.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLogisticsSupportItems($j)
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLogisticsSupportItemsLength()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSource()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \LogisticsSupport_Ingest_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startLogisticsSupport_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(30);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return LogisticsSupport_Ingest
     */
    public static function createLogisticsSupport_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $extSystemId, $tailNumber, $aircraftMDS, $currICAO, $suppICAO, $rptCreatedTime, $rptClosedTime, $meTime, $mcTime, $logisticAction, $logisticsRecordId, $etic, $etmc, $maintStatusCode, $reopenFlag, $owner, $logisticsRemarks, $logisticsDiscrepancyInfos, $logisticsTransportationPlans, $logisticsSupportItems, $origNetwork, $createdAt, $createdBy, $updatedAt, $updatedBy, $source, $origin, $dataMode)
    {
        $builder->startObject(30);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addExtSystemId($builder, $extSystemId);
        self::addTailNumber($builder, $tailNumber);
        self::addAircraftMDS($builder, $aircraftMDS);
        self::addCurrICAO($builder, $currICAO);
        self::addSuppICAO($builder, $suppICAO);
        self::addRptCreatedTime($builder, $rptCreatedTime);
        self::addRptClosedTime($builder, $rptClosedTime);
        self::addMeTime($builder, $meTime);
        self::addMcTime($builder, $mcTime);
        self::addLogisticAction($builder, $logisticAction);
        self::addLogisticsRecordId($builder, $logisticsRecordId);
        self::addEtic($builder, $etic);
        self::addEtmc($builder, $etmc);
        self::addMaintStatusCode($builder, $maintStatusCode);
        self::addReopenFlag($builder, $reopenFlag);
        self::addOwner($builder, $owner);
        self::addLogisticsRemarks($builder, $logisticsRemarks);
        self::addLogisticsDiscrepancyInfos($builder, $logisticsDiscrepancyInfos);
        self::addLogisticsTransportationPlans($builder, $logisticsTransportationPlans);
        self::addLogisticsSupportItems($builder, $logisticsSupportItems);
        self::addOrigNetwork($builder, $origNetwork);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExtSystemId(FlatBufferBuilder $builder, $extSystemId)
    {
        $builder->addOffsetX(2, $extSystemId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTailNumber(FlatBufferBuilder $builder, $tailNumber)
    {
        $builder->addOffsetX(3, $tailNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAircraftMDS(FlatBufferBuilder $builder, $aircraftMDS)
    {
        $builder->addOffsetX(4, $aircraftMDS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCurrICAO(FlatBufferBuilder $builder, $currICAO)
    {
        $builder->addOffsetX(5, $currICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSuppICAO(FlatBufferBuilder $builder, $suppICAO)
    {
        $builder->addOffsetX(6, $suppICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRptCreatedTime(FlatBufferBuilder $builder, $rptCreatedTime)
    {
        $builder->addOffsetX(7, $rptCreatedTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRptClosedTime(FlatBufferBuilder $builder, $rptClosedTime)
    {
        $builder->addOffsetX(8, $rptClosedTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMeTime(FlatBufferBuilder $builder, $meTime)
    {
        $builder->addOffsetX(9, $meTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMcTime(FlatBufferBuilder $builder, $mcTime)
    {
        $builder->addOffsetX(10, $mcTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLogisticAction(FlatBufferBuilder $builder, $logisticAction)
    {
        $builder->addOffsetX(11, $logisticAction, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLogisticsRecordId(FlatBufferBuilder $builder, $logisticsRecordId)
    {
        $builder->addOffsetX(12, $logisticsRecordId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEtic(FlatBufferBuilder $builder, $etic)
    {
        $builder->addOffsetX(13, $etic, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEtmc(FlatBufferBuilder $builder, $etmc)
    {
        $builder->addOffsetX(14, $etmc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMaintStatusCode(FlatBufferBuilder $builder, $maintStatusCode)
    {
        $builder->addOffsetX(15, $maintStatusCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addReopenFlag(FlatBufferBuilder $builder, $reopenFlag)
    {
        $builder->addBoolX(16, $reopenFlag, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOwner(FlatBufferBuilder $builder, $owner)
    {
        $builder->addOffsetX(17, $owner, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLogisticsRemarks(FlatBufferBuilder $builder, $logisticsRemarks)
    {
        $builder->addOffsetX(18, $logisticsRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLogisticsRemarksVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLogisticsRemarksVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLogisticsDiscrepancyInfos(FlatBufferBuilder $builder, $logisticsDiscrepancyInfos)
    {
        $builder->addOffsetX(19, $logisticsDiscrepancyInfos, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLogisticsDiscrepancyInfosVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLogisticsDiscrepancyInfosVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLogisticsTransportationPlans(FlatBufferBuilder $builder, $logisticsTransportationPlans)
    {
        $builder->addOffsetX(20, $logisticsTransportationPlans, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLogisticsTransportationPlansVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLogisticsTransportationPlansVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLogisticsSupportItems(FlatBufferBuilder $builder, $logisticsSupportItems)
    {
        $builder->addOffsetX(21, $logisticsSupportItems, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLogisticsSupportItemsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLogisticsSupportItemsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(22, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(23, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(24, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(25, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(26, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(27, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(28, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(29, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endLogisticsSupport_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishLogisticsSupport_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "LOGI");
    }
}
