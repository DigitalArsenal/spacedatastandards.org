<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Tasking desired collection requirements.
class ISRCollectionRequirements_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return ISRCollectionRequirements_Ingest
     */
    public static function getRootAsISRCollectionRequirements_Ingest(ByteBuffer $bb)
    {
        $obj = new ISRCollectionRequirements_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function ISRCollectionRequirements_IngestIdentifier()
    {
        return "ISRC";
    }

    public static function ISRCollectionRequirements_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ISRCollectionRequirements_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return ISRCollectionRequirements_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Collection Requirement Unique Identifier.
    /// Example: /// Example: ISCRCOLLECTIONREQUIREMENTS
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Encryption hashing algorithm.
    /// Example: /// Example: HASH
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getHash()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type collection this requirement applies to.
    /// Example: /// Example: COLLECTION_TYPE
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getType()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Collection Requirement Unique Identifier.
    /// Example: /// Example: CRID
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getCridNumbers()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// 1-n priority for this collection requirement.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPriority()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Record id.
    /// Example: /// Example: RECORD-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getRecordId()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Reconnaissance Survey information the operator needs.
    /// Example: /// Example: SURVEY_INFO
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getReconSurvey()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Primary type of intelligence to be collected for this requirement.
    /// Example: /// Example: Sig
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getIntelDiscipline()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Sub category of primary intelligence to be collected for this requirement.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getSecondary()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Is this collection requirement an emphasized/critical requirement.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getEmphasized()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Is this collection request for the Prism system?.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getIsPrismCr()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Start time for this requirement, should be within the mission time window.
    /// Example: /// Example: 2021-01-19T01:01:15.001Z
    /// Constraints: No constraints specified.
    public function getStart()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Stop time for this requirement, should be within the mission time window.
    /// Example: /// Example: 2021-01-19T01:20:01.001Z
    /// Constraints: No constraints specified.
    public function getStop()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Human readable name for this operation.
    /// Example: /// Example: NAME
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOperation()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the military unit that this assigned collection requirement will support.
    /// Example: /// Example: UNIT
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getSupportedUnit()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Country code of the collection requirement. A Country may represent countries, multi-national consortiums, and international organizations.
    /// Example: /// Example: COUNTRY_CODE
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getCountry()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Region of the collection requirement.
    /// Example: /// Example: REGION
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getRegion()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Subregion of the collection requirement.
    /// Example: /// Example: SUBREGION
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getSubregion()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Free text field for the user to specify special instructions needed for this collection.
    /// Example: /// Example: TEXT
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getSpecialComGuidance()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getCriticalTimes()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getExploitationRequirement()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of POI Id's for the targets being tasked.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTargetList($j)
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTargetListLength()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startISRCollectionRequirements_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(22);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return ISRCollectionRequirements_Ingest
     */
    public static function createISRCollectionRequirements_Ingest(FlatBufferBuilder $builder, $id, $hash, $type, $cridNumbers, $priority, $recordId, $reconSurvey, $intelDiscipline, $secondary, $emphasized, $isPrismCr, $start, $stop, $operation, $supportedUnit, $country, $region, $subregion, $specialComGuidance, $criticalTimes, $exploitationRequirement, $targetList)
    {
        $builder->startObject(22);
        self::addId($builder, $id);
        self::addHash($builder, $hash);
        self::addType($builder, $type);
        self::addCridNumbers($builder, $cridNumbers);
        self::addPriority($builder, $priority);
        self::addRecordId($builder, $recordId);
        self::addReconSurvey($builder, $reconSurvey);
        self::addIntelDiscipline($builder, $intelDiscipline);
        self::addSecondary($builder, $secondary);
        self::addEmphasized($builder, $emphasized);
        self::addIsPrismCr($builder, $isPrismCr);
        self::addStart($builder, $start);
        self::addStop($builder, $stop);
        self::addOperation($builder, $operation);
        self::addSupportedUnit($builder, $supportedUnit);
        self::addCountry($builder, $country);
        self::addRegion($builder, $region);
        self::addSubregion($builder, $subregion);
        self::addSpecialComGuidance($builder, $specialComGuidance);
        self::addCriticalTimes($builder, $criticalTimes);
        self::addExploitationRequirement($builder, $exploitationRequirement);
        self::addTargetList($builder, $targetList);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHash(FlatBufferBuilder $builder, $hash)
    {
        $builder->addOffsetX(1, $hash, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(2, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCridNumbers(FlatBufferBuilder $builder, $cridNumbers)
    {
        $builder->addOffsetX(3, $cridNumbers, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPriority(FlatBufferBuilder $builder, $priority)
    {
        $builder->addDoubleX(4, $priority, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRecordId(FlatBufferBuilder $builder, $recordId)
    {
        $builder->addOffsetX(5, $recordId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReconSurvey(FlatBufferBuilder $builder, $reconSurvey)
    {
        $builder->addOffsetX(6, $reconSurvey, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIntelDiscipline(FlatBufferBuilder $builder, $intelDiscipline)
    {
        $builder->addOffsetX(7, $intelDiscipline, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addSecondary(FlatBufferBuilder $builder, $secondary)
    {
        $builder->addBoolX(8, $secondary, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addEmphasized(FlatBufferBuilder $builder, $emphasized)
    {
        $builder->addBoolX(9, $emphasized, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addIsPrismCr(FlatBufferBuilder $builder, $isPrismCr)
    {
        $builder->addBoolX(10, $isPrismCr, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStart(FlatBufferBuilder $builder, $start)
    {
        $builder->addOffsetX(11, $start, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStop(FlatBufferBuilder $builder, $stop)
    {
        $builder->addOffsetX(12, $stop, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOperation(FlatBufferBuilder $builder, $operation)
    {
        $builder->addOffsetX(13, $operation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSupportedUnit(FlatBufferBuilder $builder, $supportedUnit)
    {
        $builder->addOffsetX(14, $supportedUnit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountry(FlatBufferBuilder $builder, $country)
    {
        $builder->addOffsetX(15, $country, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRegion(FlatBufferBuilder $builder, $region)
    {
        $builder->addOffsetX(16, $region, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSubregion(FlatBufferBuilder $builder, $subregion)
    {
        $builder->addOffsetX(17, $subregion, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSpecialComGuidance(FlatBufferBuilder $builder, $specialComGuidance)
    {
        $builder->addOffsetX(18, $specialComGuidance, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCriticalTimes(FlatBufferBuilder $builder, $criticalTimes)
    {
        $builder->addOffsetX(19, $criticalTimes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExploitationRequirement(FlatBufferBuilder $builder, $exploitationRequirement)
    {
        $builder->addOffsetX(20, $exploitationRequirement, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTargetList(FlatBufferBuilder $builder, $targetList)
    {
        $builder->addOffsetX(21, $targetList, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTargetListVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTargetListVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endISRCollectionRequirements_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishISRCollectionRequirements_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ISRC");
    }
}
