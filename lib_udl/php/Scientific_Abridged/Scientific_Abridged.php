<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Scientific or other data from Seradata.
class Scientific_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Scientific_Abridged
     */
    public static function getRootAsScientific_Abridged(ByteBuffer $bb)
    {
        $obj = new Scientific_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Scientific_AbridgedIdentifier()
    {
        return "SCIE";
    }

    public static function Scientific_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Scientific_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Scientific_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SCIENTIFIC-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    /// Example: /// Example: REF-SPACECRAFT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSpacecraftId()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Hosted for company/Organization Id.
    /// Example: /// Example: REF-HOSTEDFORCOMPANYORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getHostedForCompanyOrgId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the organization which manufactures this bus.
    /// Example: /// Example: REF-MANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getManufacturerOrgId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Payload category, e.g. Magnetometer, Radiometer, Sensor, etc.
    /// Example: /// Example: Sensor
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getPayloadCategory()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Sensor name from sera data, e.g. SEM/MAG (SEM / Magnetometer).
    /// Example: /// Example: SEM/MAG
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getName()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Frequency band, e.g. Gamma.
    /// Example: /// Example: Gamma
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getFrequencyBand()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Notes associated with the payload.
    /// Example: /// Example: NOTES
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getNotes()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Scientific_Abridged_dataMode_Enum::REAL;
    }

    /// ID of the parent entity for this Scientific.
    /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdEntity()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startScientific_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(16);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Scientific_Abridged
     */
    public static function createScientific_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $spacecraftId, $hostedForCompanyOrgId, $manufacturerOrgId, $payloadCategory, $name, $frequencyBand, $notes, $createdAt, $createdBy, $source, $origin, $origNetwork, $dataMode, $idEntity)
    {
        $builder->startObject(16);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addSpacecraftId($builder, $spacecraftId);
        self::addHostedForCompanyOrgId($builder, $hostedForCompanyOrgId);
        self::addManufacturerOrgId($builder, $manufacturerOrgId);
        self::addPayloadCategory($builder, $payloadCategory);
        self::addName($builder, $name);
        self::addFrequencyBand($builder, $frequencyBand);
        self::addNotes($builder, $notes);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        self::addIdEntity($builder, $idEntity);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSpacecraftId(FlatBufferBuilder $builder, $spacecraftId)
    {
        $builder->addOffsetX(2, $spacecraftId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHostedForCompanyOrgId(FlatBufferBuilder $builder, $hostedForCompanyOrgId)
    {
        $builder->addOffsetX(3, $hostedForCompanyOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addManufacturerOrgId(FlatBufferBuilder $builder, $manufacturerOrgId)
    {
        $builder->addOffsetX(4, $manufacturerOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPayloadCategory(FlatBufferBuilder $builder, $payloadCategory)
    {
        $builder->addOffsetX(5, $payloadCategory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(6, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFrequencyBand(FlatBufferBuilder $builder, $frequencyBand)
    {
        $builder->addOffsetX(7, $frequencyBand, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNotes(FlatBufferBuilder $builder, $notes)
    {
        $builder->addOffsetX(8, $notes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(9, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(10, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(11, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(12, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(13, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(14, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdEntity(FlatBufferBuilder $builder, $idEntity)
    {
        $builder->addOffsetX(15, $idEntity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endScientific_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishScientific_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "SCIE");
    }
}
