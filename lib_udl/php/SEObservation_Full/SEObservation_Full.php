<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// A single space environment observation.
class SEObservation_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return SEObservation_Full
     */
    public static function getRootAsSEObservation_Full(ByteBuffer $bb)
    {
        $obj = new SEObservation_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function SEObservation_FullIdentifier()
    {
        return "SEOB";
    }

    public static function SEObservation_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::SEObservation_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return SEObservation_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The type of observation associated with this record.
    /// Example: /// Example: INTEGRAL FLUX
    /// Constraints: Minimum length = 1, Maximum length = 24
    public function getObType()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.
    /// Example: /// Example: particles/cm^2/s/sr
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getObUoM()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
    /// Example: /// Example: 0.487687826
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getObValue()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
    /// Example: /// Example: C1.3
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getObString()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
    /// Example: /// Example: [1.7, 35.6, 21.2, 19.01]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getObArray($j)
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getObArrayLength()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getObBool()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.
    /// Example: /// Example: GOOD
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getObQuality()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Descriptive or additional information associated with this individual observation.
    /// Example: /// Example: Observation Description Text
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getObDescription()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSEObservation_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return SEObservation_Full
     */
    public static function createSEObservation_Full(FlatBufferBuilder $builder, $obType, $obUoM, $obValue, $obString, $obArray, $obBool, $obQuality, $obDescription)
    {
        $builder->startObject(8);
        self::addObType($builder, $obType);
        self::addObUoM($builder, $obUoM);
        self::addObValue($builder, $obValue);
        self::addObString($builder, $obString);
        self::addObArray($builder, $obArray);
        self::addObBool($builder, $obBool);
        self::addObQuality($builder, $obQuality);
        self::addObDescription($builder, $obDescription);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObType(FlatBufferBuilder $builder, $obType)
    {
        $builder->addOffsetX(0, $obType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObUoM(FlatBufferBuilder $builder, $obUoM)
    {
        $builder->addOffsetX(1, $obUoM, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addObValue(FlatBufferBuilder $builder, $obValue)
    {
        $builder->addDoubleX(2, $obValue, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObString(FlatBufferBuilder $builder, $obString)
    {
        $builder->addOffsetX(3, $obString, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addObArray(FlatBufferBuilder $builder, $obArray)
    {
        $builder->addOffsetX(4, $obArray, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createObArrayVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startObArrayVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addObBool(FlatBufferBuilder $builder, $obBool)
    {
        $builder->addBoolX(5, $obBool, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObQuality(FlatBufferBuilder $builder, $obQuality)
    {
        $builder->addOffsetX(6, $obQuality, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObDescription(FlatBufferBuilder $builder, $obDescription)
    {
        $builder->addOffsetX(7, $obDescription, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSEObservation_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSEObservation_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "SEOB");
    }
}
