<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// A track is a position and optionally a heading/velocity of an object such as an aircraft at a particular timestamp. It also includes optional information regarding the identity/type of the target object, if known.
class Track_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Track_Full
     */
    public static function getRootAsTrack_Full(ByteBuffer $bb)
    {
        $obj = new Track_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Track_FullIdentifier()
    {
        return "TRAC";
    }

    public static function Track_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Track_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Track_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: TRACK-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
    /// Example: /// Example: Contact Info
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getCntct()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Message Timestamp.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getMsgTs()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mission ID related to the track.
    /// Example: /// Example: msnId
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getMsnId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Nationality or organization of the tracking/reporting system or platform (e.g. FR, NATO, US, etc.).
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getAssetNat()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Id/name of the platform providing the track data (i.e., tail number for air platform, tower ID for tower based sensor, site id for fixed radar).
    /// Example: /// Example: asset
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getAsset()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Id/name of sensor providing the track data.
    /// Example: /// Example: sen
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getSen()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Sensor quality.
    /// Example: /// Example: senQual
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getSenQual()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// UUID identifying the track, which should remain the same on subsequent tracks of the same object.
    /// Example: /// Example: trkId
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTrkId()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The track number (TN) of a surveillance entity. Intended as, but not constrained to, the J-series track number encoded as five character alpha-numeric characters. Users should refer to J-series documentation for specific TN definitions.
    /// Example: /// Example: trkNum
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTrkNum()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Status of the track (e.g., INITIATING, MAINTAINING, DROPPING, TERMINATED, etc.).
    /// Example: /// Example: INITIATING
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTrkStat()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Nationality or organization of the track object (e.g. FR, NATO, US, etc.).
    /// Example: /// Example: NATO
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getObjNat()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UID or designation of the tracked object.
    /// Example: /// Example: objId
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getObjId()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The generic classification of the track object/group (e.g., HELICOPTER, TRACKED, WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676 object type classifications.
    /// Example: /// Example: WATERCRAFT
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getObjType()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The object specific type. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations. The specific type can be reported as either a combination of the code and environment (e.g. 155/SURFACE) or as the descriptive representation (e.g. AUDACE DDG), which are equivalent.
    /// Example: /// Example: LIGHT_TANK
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getObjSpec()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
    /// Example: /// Example: COMBAT_VEHICLE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getObjPlat()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
    /// Example: /// Example: HOLDING
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getObjAct()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of source information from which the track was derived. Intended as, but not constrained to, NATO STANAG 4676 modality types (AIS, BFT, BIOMETRIC, COMINT, DOPPLER, ELINT, HRR, HUMINT, IMAGE, MASINT, MIXED, OSINT, OTHER):
    /// AIS: Derived from an automated identification system source.
    /// BFT: Derived from a blue force tracking source.
    /// BIOMETRICS: Derived from a biometrics source.
    /// COMINT: Derived from a communications intelligence source.
    /// DOPPLER: Derived from a radar doppler source.
    /// ELINT: Derived from an electronics intelligence source.
    /// HRR: Derived from a radar high range resolution source.
    /// HUMINT: Derived from a human intelligence source.
    /// IMAGE: Derived from a still or motion imagery source.
    /// MASINT: Derived from a measurement and signals intelligence source.
    /// MIXED: Derived from a combination of two or more sources.
    /// OSINT: Derived from an open source intelligence source.
    /// OTHER: Derived from other types of unspecified sources.
    /// Example: /// Example: MASINT
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getModType()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// UUID of the track item object, applies to STANAG-4676 messages.
    /// Example: /// Example: trkItmId
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTrkItmId()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Track timestamp in ISO8601 UTC format.
    /// Example: /// Example: 2021-06-07T14:17:39.653Z
    /// Constraints: No constraints specified.
    public function getTs()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Value indicating track quality (not standardized).
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTrkQual()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Means by which the track data was created (e.g., MEASURED, AUTOMATIC PREDICTED, etc.).
    /// Example: /// Example: MEASURED
    /// Constraints: No constraints specified.
    public function getTrkPtType()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
    /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    /// PENDING: Track object which has not been evaluated.
    /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    /// Example: /// Example: FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getObjIdent()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Track object identity credibility.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getIdentCred()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Track object identity reliability.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getIdentRel()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
    /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
    /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
    /// KILO: Friendly high-value object.
    /// TRAVELLER: Suspect land or surface track following a recognized traffic route.
    /// ZOMBIE: Suspect track, object, or entity of special interest.
    /// Example: /// Example: ZOMBIE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getIdentAmp()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
    /// AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
    /// LAND: On the surface of dry land.
    /// SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
    /// SURFACE: On the surface of a body of water.
    /// SUBSURFACE: Below the surface of a body of water.
    /// UNKNOWN: Environment is not known.
    /// Example: /// Example: LAND
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getEnv()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Track environment confidence estimate (not standardized).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEnvConf()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTrkConf()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Track object location in ECEF [x, y, z], meters.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getEcefPos($j)
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEcefPosLength()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Track object velocity in ECEF [x', y', z'], meters/sec.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getEcefVel($j)
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEcefVelLength()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Track object acceleration in ECEF [x'', y'', z''], meters/sec^2.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getEcefAcc($j)
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEcefAccLength()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLat()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLon()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a track object height above ellipsoid, and negative values indicate a track object below ellipsoid, applicable to the depth estimate for a subsurface track.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAlt()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Track object spd, in meters/sec.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSpd()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The track object heading, in degrees clockwise from true North at the object location.
    /// Example: /// Example: 19.7
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHdng()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The track object course-over-ground, in degrees clockwise from true North at the object location (0-360 degrees).
    /// Example: /// Example: 88.37
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCourse()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Origin of a local coordinate system [lat, lon, altitude].  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLco($j)
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLcoLength()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// x, y, and z-axis rotations about ECEF that define a local cartesian system.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLcs($j)
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLcsLength()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Estimate of the position, [x, y, z], of the track object in the defined cartesian system, in meters.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLcPos($j)
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLcPosLength()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Estimate of the velocity, [x', y', z'], of the track object in the defined cartesian system, in meters/sec.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLcVel($j)
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLcVelLength()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Estimate of the acceleration, [x'', y'', z''], of the track object in the defined cartesian system, in meters/sec^2.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLcAcc($j)
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLcAccLength()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// East, North, Up velocity components, in meters/sec.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getENUVel($j)
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getENUVelLength()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// East, North, Up position components, in meters.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getENUPos($j)
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getENUPosLength()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Covariance matrix, in meter and second based units, for the defined cartesian system.
    /// The array values represent the lower triangular half of the position-velocity covariance matrix.  The size of the covariance matrix is dynamic.  The values are output as an array of values corresponding to the position-velocity covariance element positions, ordered as follows:
    /// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
    /// x&nbsp;&nbsp;&nbsp;&nbsp;1
    /// y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
    /// z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
    /// x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
    /// y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
    /// z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
    /// The covariance matrix will be as large as the last element needed, and with unused values zero-filled to maintain proper element positioning in the array.  For example, for a 2D (x, y) position-only covariance, the covariance matrix will be 2x2 and the array would contain the 3 elements corresponding to the x, and y position.  Another example, now for a 2D (x, y) position-velocity covariance, the covariance matrix will be 5x5 and the array would contain the 15 elements corresponding to the relevant x, y, x', and y' values (with the z-row and z-column being all zeros). The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
    /// Example: /// Example: [1.1, 2.2, 3.3]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCov($j)
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCovLength()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Uncertainty ellipsoid [semi-major axis (m), semi-minor axis (m), orientation (deg)].
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getErrEllp($j)
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getErrEllpLength()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of UDL record types (POI, MTI, TRACK, GROUNDIMAGE) that contributed to the generation of this fused track.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array, used in the track fusion. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: /// Example: ['MTI', 'POI']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSrcTyps($j)
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSrcTypsLength()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of UUIDs of the UDL data records that contributed to the generation of this fused track. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array, used in the track fusion.  The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/poi/{uuid}).
    /// Example: /// Example: ['f7c70cc8-f9b7-4467-b4ad-3904e360e842', '1da3fab000014e3133709830937387405']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSrcIds($j)
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSrcIdsLength()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The call sign currently assigned to this track object.
    /// Example: /// Example: callSign
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getCallSign()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating that this track is fused from multiple sensor sources.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getMultiSource()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The J-series message type, if this track is derived from a J-series message.
    /// Example: /// Example: J12.5
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getJSeries()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The number of objects or units moving as a group and represented as a single entity in this track message. If null, the track is assumed to represent a single object. Note that if this track derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
    /// Example: /// Example: 14
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getStrength()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Mode-1 interrogation response (mission code), indicating mission or aircraft type.
    /// Example: /// Example: 1234
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getM1()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Mode-1 validity status.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getM1v()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Mode-2 interrogation response (military identification code).
    /// Example: /// Example: 1234
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getM2()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Mode-2 validity status.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getM2v()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Mode-3/A interrogation response (aircraft identification), provides a 4-digit octal identification code for the aircraft, assigned by the air traffic controller. Mode-3/A is shared military/civilian use.
    /// Example: /// Example: 2636
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getM3a()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Mode-3/A validity status.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getM3av()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTags($j)
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTagsLength()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Track_Full_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startTrack_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(68);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Track_Full
     */
    public static function createTrack_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $cntct, $createdAt, $createdBy, $msgTs, $msnId, $assetNat, $asset, $sen, $senQual, $trkId, $trkNum, $trkStat, $objNat, $objId, $objType, $objSpec, $objPlat, $objAct, $modType, $trkItmId, $ts, $trkQual, $trkPtType, $objIdent, $identCred, $identRel, $identAmp, $env, $envConf, $trkConf, $ecefPos, $ecefVel, $ecefAcc, $lat, $lon, $alt, $spd, $hdng, $course, $lco, $lcs, $lcPos, $lcVel, $lcAcc, $eNUVel, $eNUPos, $cov, $errEllp, $srcTyps, $srcIds, $callSign, $multiSource, $jSeries, $strength, $m1, $m1v, $m2, $m2v, $m3a, $m3av, $tags, $sourceDL, $source, $origin, $dataMode, $origNetwork)
    {
        $builder->startObject(68);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addCntct($builder, $cntct);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addMsgTs($builder, $msgTs);
        self::addMsnId($builder, $msnId);
        self::addAssetNat($builder, $assetNat);
        self::addAsset($builder, $asset);
        self::addSen($builder, $sen);
        self::addSenQual($builder, $senQual);
        self::addTrkId($builder, $trkId);
        self::addTrkNum($builder, $trkNum);
        self::addTrkStat($builder, $trkStat);
        self::addObjNat($builder, $objNat);
        self::addObjId($builder, $objId);
        self::addObjType($builder, $objType);
        self::addObjSpec($builder, $objSpec);
        self::addObjPlat($builder, $objPlat);
        self::addObjAct($builder, $objAct);
        self::addModType($builder, $modType);
        self::addTrkItmId($builder, $trkItmId);
        self::addTs($builder, $ts);
        self::addTrkQual($builder, $trkQual);
        self::addTrkPtType($builder, $trkPtType);
        self::addObjIdent($builder, $objIdent);
        self::addIdentCred($builder, $identCred);
        self::addIdentRel($builder, $identRel);
        self::addIdentAmp($builder, $identAmp);
        self::addEnv($builder, $env);
        self::addEnvConf($builder, $envConf);
        self::addTrkConf($builder, $trkConf);
        self::addEcefPos($builder, $ecefPos);
        self::addEcefVel($builder, $ecefVel);
        self::addEcefAcc($builder, $ecefAcc);
        self::addLat($builder, $lat);
        self::addLon($builder, $lon);
        self::addAlt($builder, $alt);
        self::addSpd($builder, $spd);
        self::addHdng($builder, $hdng);
        self::addCourse($builder, $course);
        self::addLco($builder, $lco);
        self::addLcs($builder, $lcs);
        self::addLcPos($builder, $lcPos);
        self::addLcVel($builder, $lcVel);
        self::addLcAcc($builder, $lcAcc);
        self::addENUVel($builder, $eNUVel);
        self::addENUPos($builder, $eNUPos);
        self::addCov($builder, $cov);
        self::addErrEllp($builder, $errEllp);
        self::addSrcTyps($builder, $srcTyps);
        self::addSrcIds($builder, $srcIds);
        self::addCallSign($builder, $callSign);
        self::addMultiSource($builder, $multiSource);
        self::addJSeries($builder, $jSeries);
        self::addStrength($builder, $strength);
        self::addM1($builder, $m1);
        self::addM1v($builder, $m1v);
        self::addM2($builder, $m2);
        self::addM2v($builder, $m2v);
        self::addM3a($builder, $m3a);
        self::addM3av($builder, $m3av);
        self::addTags($builder, $tags);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCntct(FlatBufferBuilder $builder, $cntct)
    {
        $builder->addOffsetX(2, $cntct, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(3, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(4, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsgTs(FlatBufferBuilder $builder, $msgTs)
    {
        $builder->addOffsetX(5, $msgTs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsnId(FlatBufferBuilder $builder, $msnId)
    {
        $builder->addOffsetX(6, $msnId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAssetNat(FlatBufferBuilder $builder, $assetNat)
    {
        $builder->addOffsetX(7, $assetNat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAsset(FlatBufferBuilder $builder, $asset)
    {
        $builder->addOffsetX(8, $asset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSen(FlatBufferBuilder $builder, $sen)
    {
        $builder->addOffsetX(9, $sen, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSenQual(FlatBufferBuilder $builder, $senQual)
    {
        $builder->addOffsetX(10, $senQual, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrkId(FlatBufferBuilder $builder, $trkId)
    {
        $builder->addOffsetX(11, $trkId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrkNum(FlatBufferBuilder $builder, $trkNum)
    {
        $builder->addOffsetX(12, $trkNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrkStat(FlatBufferBuilder $builder, $trkStat)
    {
        $builder->addOffsetX(13, $trkStat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjNat(FlatBufferBuilder $builder, $objNat)
    {
        $builder->addOffsetX(14, $objNat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjId(FlatBufferBuilder $builder, $objId)
    {
        $builder->addOffsetX(15, $objId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjType(FlatBufferBuilder $builder, $objType)
    {
        $builder->addOffsetX(16, $objType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjSpec(FlatBufferBuilder $builder, $objSpec)
    {
        $builder->addOffsetX(17, $objSpec, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjPlat(FlatBufferBuilder $builder, $objPlat)
    {
        $builder->addOffsetX(18, $objPlat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjAct(FlatBufferBuilder $builder, $objAct)
    {
        $builder->addOffsetX(19, $objAct, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addModType(FlatBufferBuilder $builder, $modType)
    {
        $builder->addOffsetX(20, $modType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrkItmId(FlatBufferBuilder $builder, $trkItmId)
    {
        $builder->addOffsetX(21, $trkItmId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTs(FlatBufferBuilder $builder, $ts)
    {
        $builder->addOffsetX(22, $ts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTrkQual(FlatBufferBuilder $builder, $trkQual)
    {
        $builder->addIntX(23, $trkQual, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrkPtType(FlatBufferBuilder $builder, $trkPtType)
    {
        $builder->addOffsetX(24, $trkPtType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjIdent(FlatBufferBuilder $builder, $objIdent)
    {
        $builder->addOffsetX(25, $objIdent, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addIdentCred(FlatBufferBuilder $builder, $identCred)
    {
        $builder->addIntX(26, $identCred, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addIdentRel(FlatBufferBuilder $builder, $identRel)
    {
        $builder->addIntX(27, $identRel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdentAmp(FlatBufferBuilder $builder, $identAmp)
    {
        $builder->addOffsetX(28, $identAmp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEnv(FlatBufferBuilder $builder, $env)
    {
        $builder->addOffsetX(29, $env, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEnvConf(FlatBufferBuilder $builder, $envConf)
    {
        $builder->addDoubleX(30, $envConf, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTrkConf(FlatBufferBuilder $builder, $trkConf)
    {
        $builder->addDoubleX(31, $trkConf, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEcefPos(FlatBufferBuilder $builder, $ecefPos)
    {
        $builder->addOffsetX(32, $ecefPos, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEcefPosVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEcefPosVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEcefVel(FlatBufferBuilder $builder, $ecefVel)
    {
        $builder->addOffsetX(33, $ecefVel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEcefVelVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEcefVelVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEcefAcc(FlatBufferBuilder $builder, $ecefAcc)
    {
        $builder->addOffsetX(34, $ecefAcc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEcefAccVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEcefAccVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLat(FlatBufferBuilder $builder, $lat)
    {
        $builder->addDoubleX(35, $lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLon(FlatBufferBuilder $builder, $lon)
    {
        $builder->addDoubleX(36, $lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAlt(FlatBufferBuilder $builder, $alt)
    {
        $builder->addDoubleX(37, $alt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSpd(FlatBufferBuilder $builder, $spd)
    {
        $builder->addDoubleX(38, $spd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHdng(FlatBufferBuilder $builder, $hdng)
    {
        $builder->addDoubleX(39, $hdng, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCourse(FlatBufferBuilder $builder, $course)
    {
        $builder->addDoubleX(40, $course, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLco(FlatBufferBuilder $builder, $lco)
    {
        $builder->addOffsetX(41, $lco, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLcoVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLcoVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLcs(FlatBufferBuilder $builder, $lcs)
    {
        $builder->addOffsetX(42, $lcs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLcsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLcsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLcPos(FlatBufferBuilder $builder, $lcPos)
    {
        $builder->addOffsetX(43, $lcPos, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLcPosVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLcPosVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLcVel(FlatBufferBuilder $builder, $lcVel)
    {
        $builder->addOffsetX(44, $lcVel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLcVelVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLcVelVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLcAcc(FlatBufferBuilder $builder, $lcAcc)
    {
        $builder->addOffsetX(45, $lcAcc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLcAccVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLcAccVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addENUVel(FlatBufferBuilder $builder, $eNUVel)
    {
        $builder->addOffsetX(46, $eNUVel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createENUVelVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startENUVelVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addENUPos(FlatBufferBuilder $builder, $eNUPos)
    {
        $builder->addOffsetX(47, $eNUPos, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createENUPosVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startENUPosVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCov(FlatBufferBuilder $builder, $cov)
    {
        $builder->addOffsetX(48, $cov, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCovVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCovVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addErrEllp(FlatBufferBuilder $builder, $errEllp)
    {
        $builder->addOffsetX(49, $errEllp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createErrEllpVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startErrEllpVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSrcTyps(FlatBufferBuilder $builder, $srcTyps)
    {
        $builder->addOffsetX(50, $srcTyps, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSrcTypsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSrcTypsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSrcIds(FlatBufferBuilder $builder, $srcIds)
    {
        $builder->addOffsetX(51, $srcIds, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSrcIdsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSrcIdsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCallSign(FlatBufferBuilder $builder, $callSign)
    {
        $builder->addOffsetX(52, $callSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addMultiSource(FlatBufferBuilder $builder, $multiSource)
    {
        $builder->addBoolX(53, $multiSource, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJSeries(FlatBufferBuilder $builder, $jSeries)
    {
        $builder->addOffsetX(54, $jSeries, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addStrength(FlatBufferBuilder $builder, $strength)
    {
        $builder->addIntX(55, $strength, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addM1(FlatBufferBuilder $builder, $m1)
    {
        $builder->addIntX(56, $m1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addM1v(FlatBufferBuilder $builder, $m1v)
    {
        $builder->addIntX(57, $m1v, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addM2(FlatBufferBuilder $builder, $m2)
    {
        $builder->addIntX(58, $m2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addM2v(FlatBufferBuilder $builder, $m2v)
    {
        $builder->addIntX(59, $m2v, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addM3a(FlatBufferBuilder $builder, $m3a)
    {
        $builder->addIntX(60, $m3a, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addM3av(FlatBufferBuilder $builder, $m3av)
    {
        $builder->addIntX(61, $m3av, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTags(FlatBufferBuilder $builder, $tags)
    {
        $builder->addOffsetX(62, $tags, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTagsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTagsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(63, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(64, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(65, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(66, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(67, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endTrack_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishTrack_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "TRAC");
    }
}
