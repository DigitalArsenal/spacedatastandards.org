<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of sky imagery data.  Sky imagery is ground or space based telescope imagery of RSO's and includes metadata on the image (time, source, etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP) . Binary content must be downloaded individually by ID using the 'getFile' operation.
class SkyImagery_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return SkyImagery_Full
     */
    public static function getRootAsSkyImagery_Full(ByteBuffer $bb)
    {
        $obj = new SkyImagery_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function SkyImagery_FullIdentifier()
    {
        return "SKYI";
    }

    public static function SkyImagery_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::SkyImagery_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return SkyImagery_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SKYIMAGERY-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier of the target on-orbit object, if correlated.
    /// Example: /// Example: 44920
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getOnOrbit()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by the imaging source to indicate the target onorbit object of this image. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: X15-23452
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigObjectId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier of the AttitudeSet data record describing the orientation of an object body.
    /// Example: /// Example: d039ba29-52f4-4839-8a8f-e85fa416aec5
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdAttitudeSet()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: 420
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Catalog number of the target on-orbit object.
    /// Example: /// Example: 25544
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional identifier provided by the imaging source to indicate the sensor identifier which produced this image. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: origSensorId
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigSensorId()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Sensor latitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: -33.283048
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlat()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor longitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 149.372549
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlon()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor altitude at exposure start epoch, in km. If null, can be obtained from sensor info.
    /// Example: /// Example: 14.483619321
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenalt()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
    /// Example: /// Example: 14.52
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenx()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
    /// Example: /// Example: 32.41
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSeny()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
    /// Example: /// Example: 376.12
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenz()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
    /// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSenQuat($j)
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSenQuatLength()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The derivative of the quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
    /// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSenQuatDot($j)
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSenQuatDotLength()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP).
    /// Example: /// Example: imageType
    /// Constraints: Minimum length = 1, Maximum length = 24
    public function getImageType()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Start time of the exposure, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getExpStartTime()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// End time of the exposure, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getExpEndTime()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// String that uniquely identifies the data source.
    /// Example: /// Example: imageSourceInfo
    /// Constraints: Minimum length = 0, Maximum length = 100
    public function getImageSourceInfo()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The telescope pointing azimuth, in degrees, at the exposure start epoch.
    /// Example: /// Example: 146.321
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTopLeftStartAz()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The telescope pointing elevation, in degrees, at the exposure start epoch.
    /// Example: /// Example: 146.321
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTopLeftStartEl()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The telescope pointing azimuth, in degrees, at the exposure stop epoch.
    /// Example: /// Example: 3.7
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTopLeftStopAz()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The telescope pointing elevation, in degrees, at the exposure stop epoch.
    /// Example: /// Example: 34.233
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTopLeftStopEl()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The user-defined set ID of a sequence of images.
    /// Example: /// Example: imageSetId
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getImageSetId()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The number of images in an image set.
    /// Example: /// Example: 9
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getImageSetLength()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The sequence ID of an image within an image set.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSequenceId()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Field Of View frame width, in degrees.
    /// Example: /// Example: 21.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFrameFOVWidth()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Field Of View frame height, in degrees.
    /// Example: /// Example: 21.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFrameFOVHeight()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Field Of View pixel width, in degrees.
    /// Example: /// Example: 321.123
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPixelFOVWidth()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Field Of View pixel height, in degrees.
    /// Example: /// Example: 321.123
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPixelFOVHeight()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Frame width of the image, in number of pixels.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getFrameWidthPixels()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Frame height of the image, in number of pixels.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getFrameHeightPixels()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Bit depth of the image, in number of pixels.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPixelBitDepth()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Reference to an annotation document associated with this image.
    /// Example: /// Example: annotationKey
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getAnnotationKey()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Reference to a calibration document associated with this image.
    /// Example: /// Example: calibrationKey
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getCalibrationKey()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the uploaded image file.
    /// Example: /// Example: filename.jpg
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getFilename()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Size of the image file, in bytes.
    /// Example: /// Example: 371945
    /// Constraints: No constraints specified.
    /**
     * @return long
     */
    public function getFilesize()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /// MD5 value of the file. The ingest/create operation will automatically generate the value.
    /// Example: /// Example: checksumValue
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getChecksumValue()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTransactionId()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTags($j)
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTagsLength()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional name/description associated with this image.
    /// Example: /// Example: description
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    public function getDescription()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SkyImagery_Full_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Collection of linked EOObservations.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getEoObservations($j)
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEoObservationsLength()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSkyImagery_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(51);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return SkyImagery_Full
     */
    public static function createSkyImagery_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $idOnOrbit, $onOrbit, $origObjectId, $idAttitudeSet, $idSensor, $satNo, $origSensorId, $senlat, $senlon, $senalt, $senx, $seny, $senz, $senQuat, $senQuatDot, $imageType, $expStartTime, $expEndTime, $imageSourceInfo, $topLeftStartAz, $topLeftStartEl, $topLeftStopAz, $topLeftStopEl, $imageSetId, $imageSetLength, $sequenceId, $frameFOVWidth, $frameFOVHeight, $pixelFOVWidth, $pixelFOVHeight, $frameWidthPixels, $frameHeightPixels, $pixelBitDepth, $annotationKey, $calibrationKey, $filename, $filesize, $checksumValue, $transactionId, $tags, $source, $origin, $origNetwork, $sourceDL, $description, $dataMode, $createdAt, $createdBy, $eoObservations)
    {
        $builder->startObject(51);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addOnOrbit($builder, $onOrbit);
        self::addOrigObjectId($builder, $origObjectId);
        self::addIdAttitudeSet($builder, $idAttitudeSet);
        self::addIdSensor($builder, $idSensor);
        self::addSatNo($builder, $satNo);
        self::addOrigSensorId($builder, $origSensorId);
        self::addSenlat($builder, $senlat);
        self::addSenlon($builder, $senlon);
        self::addSenalt($builder, $senalt);
        self::addSenx($builder, $senx);
        self::addSeny($builder, $seny);
        self::addSenz($builder, $senz);
        self::addSenQuat($builder, $senQuat);
        self::addSenQuatDot($builder, $senQuatDot);
        self::addImageType($builder, $imageType);
        self::addExpStartTime($builder, $expStartTime);
        self::addExpEndTime($builder, $expEndTime);
        self::addImageSourceInfo($builder, $imageSourceInfo);
        self::addTopLeftStartAz($builder, $topLeftStartAz);
        self::addTopLeftStartEl($builder, $topLeftStartEl);
        self::addTopLeftStopAz($builder, $topLeftStopAz);
        self::addTopLeftStopEl($builder, $topLeftStopEl);
        self::addImageSetId($builder, $imageSetId);
        self::addImageSetLength($builder, $imageSetLength);
        self::addSequenceId($builder, $sequenceId);
        self::addFrameFOVWidth($builder, $frameFOVWidth);
        self::addFrameFOVHeight($builder, $frameFOVHeight);
        self::addPixelFOVWidth($builder, $pixelFOVWidth);
        self::addPixelFOVHeight($builder, $pixelFOVHeight);
        self::addFrameWidthPixels($builder, $frameWidthPixels);
        self::addFrameHeightPixels($builder, $frameHeightPixels);
        self::addPixelBitDepth($builder, $pixelBitDepth);
        self::addAnnotationKey($builder, $annotationKey);
        self::addCalibrationKey($builder, $calibrationKey);
        self::addFilename($builder, $filename);
        self::addFilesize($builder, $filesize);
        self::addChecksumValue($builder, $checksumValue);
        self::addTransactionId($builder, $transactionId);
        self::addTags($builder, $tags);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addSourceDL($builder, $sourceDL);
        self::addDescription($builder, $description);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addEoObservations($builder, $eoObservations);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(2, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOnOrbit(FlatBufferBuilder $builder, $onOrbit)
    {
        $builder->addOffsetX(3, $onOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(4, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdAttitudeSet(FlatBufferBuilder $builder, $idAttitudeSet)
    {
        $builder->addOffsetX(5, $idAttitudeSet, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(6, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(7, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSensorId(FlatBufferBuilder $builder, $origSensorId)
    {
        $builder->addOffsetX(8, $origSensorId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlat(FlatBufferBuilder $builder, $senlat)
    {
        $builder->addDoubleX(9, $senlat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlon(FlatBufferBuilder $builder, $senlon)
    {
        $builder->addDoubleX(10, $senlon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenalt(FlatBufferBuilder $builder, $senalt)
    {
        $builder->addDoubleX(11, $senalt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenx(FlatBufferBuilder $builder, $senx)
    {
        $builder->addDoubleX(12, $senx, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSeny(FlatBufferBuilder $builder, $seny)
    {
        $builder->addDoubleX(13, $seny, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenz(FlatBufferBuilder $builder, $senz)
    {
        $builder->addDoubleX(14, $senz, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSenQuat(FlatBufferBuilder $builder, $senQuat)
    {
        $builder->addOffsetX(15, $senQuat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSenQuatVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSenQuatVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSenQuatDot(FlatBufferBuilder $builder, $senQuatDot)
    {
        $builder->addOffsetX(16, $senQuatDot, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSenQuatDotVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSenQuatDotVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addImageType(FlatBufferBuilder $builder, $imageType)
    {
        $builder->addOffsetX(17, $imageType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExpStartTime(FlatBufferBuilder $builder, $expStartTime)
    {
        $builder->addOffsetX(18, $expStartTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExpEndTime(FlatBufferBuilder $builder, $expEndTime)
    {
        $builder->addOffsetX(19, $expEndTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addImageSourceInfo(FlatBufferBuilder $builder, $imageSourceInfo)
    {
        $builder->addOffsetX(20, $imageSourceInfo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTopLeftStartAz(FlatBufferBuilder $builder, $topLeftStartAz)
    {
        $builder->addDoubleX(21, $topLeftStartAz, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTopLeftStartEl(FlatBufferBuilder $builder, $topLeftStartEl)
    {
        $builder->addDoubleX(22, $topLeftStartEl, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTopLeftStopAz(FlatBufferBuilder $builder, $topLeftStopAz)
    {
        $builder->addDoubleX(23, $topLeftStopAz, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTopLeftStopEl(FlatBufferBuilder $builder, $topLeftStopEl)
    {
        $builder->addDoubleX(24, $topLeftStopEl, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addImageSetId(FlatBufferBuilder $builder, $imageSetId)
    {
        $builder->addOffsetX(25, $imageSetId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addImageSetLength(FlatBufferBuilder $builder, $imageSetLength)
    {
        $builder->addIntX(26, $imageSetLength, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSequenceId(FlatBufferBuilder $builder, $sequenceId)
    {
        $builder->addIntX(27, $sequenceId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFrameFOVWidth(FlatBufferBuilder $builder, $frameFOVWidth)
    {
        $builder->addDoubleX(28, $frameFOVWidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFrameFOVHeight(FlatBufferBuilder $builder, $frameFOVHeight)
    {
        $builder->addDoubleX(29, $frameFOVHeight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPixelFOVWidth(FlatBufferBuilder $builder, $pixelFOVWidth)
    {
        $builder->addDoubleX(30, $pixelFOVWidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPixelFOVHeight(FlatBufferBuilder $builder, $pixelFOVHeight)
    {
        $builder->addDoubleX(31, $pixelFOVHeight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addFrameWidthPixels(FlatBufferBuilder $builder, $frameWidthPixels)
    {
        $builder->addIntX(32, $frameWidthPixels, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addFrameHeightPixels(FlatBufferBuilder $builder, $frameHeightPixels)
    {
        $builder->addIntX(33, $frameHeightPixels, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPixelBitDepth(FlatBufferBuilder $builder, $pixelBitDepth)
    {
        $builder->addIntX(34, $pixelBitDepth, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAnnotationKey(FlatBufferBuilder $builder, $annotationKey)
    {
        $builder->addOffsetX(35, $annotationKey, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCalibrationKey(FlatBufferBuilder $builder, $calibrationKey)
    {
        $builder->addOffsetX(36, $calibrationKey, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFilename(FlatBufferBuilder $builder, $filename)
    {
        $builder->addOffsetX(37, $filename, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addFilesize(FlatBufferBuilder $builder, $filesize)
    {
        $builder->addLongX(38, $filesize, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addChecksumValue(FlatBufferBuilder $builder, $checksumValue)
    {
        $builder->addOffsetX(39, $checksumValue, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransactionId(FlatBufferBuilder $builder, $transactionId)
    {
        $builder->addOffsetX(40, $transactionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTags(FlatBufferBuilder $builder, $tags)
    {
        $builder->addOffsetX(41, $tags, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTagsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTagsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(42, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(43, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(44, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(45, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(46, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(47, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(48, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(49, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEoObservations(FlatBufferBuilder $builder, $eoObservations)
    {
        $builder->addOffsetX(50, $eoObservations, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEoObservationsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEoObservationsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSkyImagery_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSkyImagery_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "SKYI");
    }
}
