<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.
class AntennaDetails extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AntennaDetails
     */
    public static function getRootAsAntennaDetails(ByteBuffer $bb)
    {
        $obj = new AntennaDetails();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AntennaDetailsIdentifier()
    {
        return "ANTE";
    }

    public static function AntennaDetailsBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AntennaDetailsIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AntennaDetails
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ANTENNADETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the parent Antenna.
    /// Example: /// Example: ANTENNA-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdAntenna()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).
    /// Example: /// Example: Reflector
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getType()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Antenna position (e.g. Top, Nadir, Side).
    /// Example: /// Example: Top
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getPosition()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Antenna mode (e.g. TX,RX).
    /// Example: /// Example: TX
    /// Constraints: Minimum length = 0, Maximum length = 4
    /**
     * @return sbyte
     */
    public function getMode()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AntennaDetails_mode_Enum::TX;
    }

    /// Boolean indicating if this antenna is steerable.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getSteerable()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Boolean indicating if this is a beam forming antenna.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getBeamForming()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// ID of the organization that manufactures the antenna.
    /// Example: /// Example: MANUFACTUREORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getManufacturerOrgId()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Antenna diameter in meters.
    /// Example: /// Example: 0.01
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDiameter()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
    /// Example: /// Example: [0.03, 0.05]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSize($j)
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSizeLength()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Antenna start of frequency range in Mhz.
    /// Example: /// Example: 2.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getStartFrequency()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Antenna end of frequency range in Mhz.
    /// Example: /// Example: 3.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEndFrequency()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
    /// Example: /// Example: 14.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBeamwidth()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Antenna maximum gain in dBi.
    /// Example: /// Example: 20.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGain()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Antenna gain tolerance in dB.
    /// Example: /// Example: 5.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGainTolerance()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Antenna polarization in degrees.
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPolarization()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Antenna description.
    /// Example: /// Example: Description of antenna A
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getDescription()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AntennaDetails_dataMode_Enum::REAL;
    }

    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTags($j)
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTagsLength()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getManufacturerOrg()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAntennaDetails(FlatBufferBuilder $builder)
    {
        $builder->StartObject(28);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AntennaDetails
     */
    public static function createAntennaDetails(FlatBufferBuilder $builder, $id, $idAntenna, $classificationMarking, $type, $position, $mode, $steerable, $beamForming, $manufacturerOrgId, $diameter, $size, $startFrequency, $endFrequency, $beamwidth, $gain, $gainTolerance, $polarization, $description, $createdAt, $createdBy, $updatedAt, $updatedBy, $source, $origin, $origNetwork, $dataMode, $tags, $manufacturerOrg)
    {
        $builder->startObject(28);
        self::addId($builder, $id);
        self::addIdAntenna($builder, $idAntenna);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addType($builder, $type);
        self::addPosition($builder, $position);
        self::addMode($builder, $mode);
        self::addSteerable($builder, $steerable);
        self::addBeamForming($builder, $beamForming);
        self::addManufacturerOrgId($builder, $manufacturerOrgId);
        self::addDiameter($builder, $diameter);
        self::addSize($builder, $size);
        self::addStartFrequency($builder, $startFrequency);
        self::addEndFrequency($builder, $endFrequency);
        self::addBeamwidth($builder, $beamwidth);
        self::addGain($builder, $gain);
        self::addGainTolerance($builder, $gainTolerance);
        self::addPolarization($builder, $polarization);
        self::addDescription($builder, $description);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        self::addTags($builder, $tags);
        self::addManufacturerOrg($builder, $manufacturerOrg);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdAntenna(FlatBufferBuilder $builder, $idAntenna)
    {
        $builder->addOffsetX(1, $idAntenna, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(2, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(3, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPosition(FlatBufferBuilder $builder, $position)
    {
        $builder->addOffsetX(4, $position, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addMode(FlatBufferBuilder $builder, $mode)
    {
        $builder->addSbyteX(5, $mode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addSteerable(FlatBufferBuilder $builder, $steerable)
    {
        $builder->addBoolX(6, $steerable, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addBeamForming(FlatBufferBuilder $builder, $beamForming)
    {
        $builder->addBoolX(7, $beamForming, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addManufacturerOrgId(FlatBufferBuilder $builder, $manufacturerOrgId)
    {
        $builder->addOffsetX(8, $manufacturerOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDiameter(FlatBufferBuilder $builder, $diameter)
    {
        $builder->addDoubleX(9, $diameter, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSize(FlatBufferBuilder $builder, $size)
    {
        $builder->addOffsetX(10, $size, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSizeVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSizeVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addStartFrequency(FlatBufferBuilder $builder, $startFrequency)
    {
        $builder->addDoubleX(11, $startFrequency, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEndFrequency(FlatBufferBuilder $builder, $endFrequency)
    {
        $builder->addDoubleX(12, $endFrequency, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBeamwidth(FlatBufferBuilder $builder, $beamwidth)
    {
        $builder->addDoubleX(13, $beamwidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGain(FlatBufferBuilder $builder, $gain)
    {
        $builder->addDoubleX(14, $gain, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGainTolerance(FlatBufferBuilder $builder, $gainTolerance)
    {
        $builder->addDoubleX(15, $gainTolerance, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPolarization(FlatBufferBuilder $builder, $polarization)
    {
        $builder->addDoubleX(16, $polarization, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(17, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(18, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(19, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(20, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(21, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(22, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(23, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(24, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(25, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTags(FlatBufferBuilder $builder, $tags)
    {
        $builder->addOffsetX(26, $tags, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTagsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTagsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addManufacturerOrg(FlatBufferBuilder $builder, $manufacturerOrg)
    {
        $builder->addOffsetX(27, $manufacturerOrg, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAntennaDetails(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAntennaDetailsBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ANTE");
    }
}
