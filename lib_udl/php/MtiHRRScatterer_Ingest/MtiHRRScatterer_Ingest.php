<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// HRR Scatterer record for a target pixel that exceeds the target detection threshold.
class MtiHRRScatterer_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return MtiHRRScatterer_Ingest
     */
    public static function getRootAsMtiHRRScatterer_Ingest(ByteBuffer $bb)
    {
        $obj = new MtiHRRScatterer_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function MtiHRRScatterer_IngestIdentifier()
    {
        return "MTIH";
    }

    public static function MtiHRRScatterer_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::MtiHRRScatterer_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return MtiHRRScatterer_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Scatterer’s power magnitude.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH321()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Scatterer’s complex phase, in degrees.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH322()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Scatterer’s Range index relative to Range-Doppler chip, where increasing index equates to increasing range.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH323()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Scatterer’s Doppler index relative to Range-Doppler chip, where increasing index equates to increasing Doppler.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH324()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startMtiHRRScatterer_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return MtiHRRScatterer_Ingest
     */
    public static function createMtiHRRScatterer_Ingest(FlatBufferBuilder $builder, $h32_1, $h32_2, $h32_3, $h32_4)
    {
        $builder->startObject(4);
        self::addH321($builder, $h32_1);
        self::addH322($builder, $h32_2);
        self::addH323($builder, $h32_3);
        self::addH324($builder, $h32_4);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH321(FlatBufferBuilder $builder, $h321)
    {
        $builder->addIntX(0, $h321, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH322(FlatBufferBuilder $builder, $h322)
    {
        $builder->addIntX(1, $h322, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH323(FlatBufferBuilder $builder, $h323)
    {
        $builder->addIntX(2, $h323, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH324(FlatBufferBuilder $builder, $h324)
    {
        $builder->addIntX(3, $h324, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endMtiHRRScatterer_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishMtiHRRScatterer_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "MTIH");
    }
}
