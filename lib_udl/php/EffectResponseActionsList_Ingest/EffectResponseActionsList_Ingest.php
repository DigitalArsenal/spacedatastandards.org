<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// List of actions associated with this effect response.
class EffectResponseActionsList_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EffectResponseActionsList_Ingest
     */
    public static function getRootAsEffectResponseActionsList_Ingest(ByteBuffer $bb)
    {
        $obj = new EffectResponseActionsList_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EffectResponseActionsList_IngestIdentifier()
    {
        return "EFFE";
    }

    public static function EffectResponseActionsList_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EffectResponseActionsList_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EffectResponseActionsList_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// A summary string describing different aspects of the action.
    /// Example: /// Example: Example summary
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getSummary()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of this action.
    /// Example: /// Example: ACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getActionId()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The desired start time of this task, in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T00:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getActionStartTime()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The desired end time of this task, in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T00:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getActionEndTime()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The start time of the asset TOT (time over target), in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T00:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getTotStartTime()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The end time of the asset TOT (time over target), in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T00:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getTotEndTime()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
    /// Example: /// Example: AIRCRAFT
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getActionActorSrcType()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The record ID, depending on the type identified in actorSrcType, of the requested asset/actor.
    /// Example: /// Example: ACTIONACTORSRC-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getActionActorSrcId()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of munition or sensor used by this asset/actor.
    /// Example: /// Example: SENSOR1
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getEffector()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source type of the targetId identifier (POI, TRACK).
    /// Example: /// Example: POI
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTargetSrcType()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The POI or TRACK ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
    /// Example: /// Example: TARGETSRC-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTargetSrcId()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.  -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getActorInterceptLat()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 180.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getActorInterceptLon()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The WGS-84 altitude of the asset/actor location at weapon launch, in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getActorInterceptAlt()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The WGS-84 latitude of the weapon destination location, in degrees.  -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWeaponInterceptLat()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The WGS-84 longitude of the weapon destination location, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 180.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWeaponInterceptLon()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The WGS-84 altitude of the weapon destination location, in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWeaponInterceptAlt()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// List of metrics associated with this action.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getActionMetrics($j)
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getActionMetricsLength()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEffectResponseActionsList_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(18);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EffectResponseActionsList_Ingest
     */
    public static function createEffectResponseActionsList_Ingest(FlatBufferBuilder $builder, $summary, $actionId, $actionStartTime, $actionEndTime, $totStartTime, $totEndTime, $actionActorSrcType, $actionActorSrcId, $effector, $targetSrcType, $targetSrcId, $actorInterceptLat, $actorInterceptLon, $actorInterceptAlt, $weaponInterceptLat, $weaponInterceptLon, $weaponInterceptAlt, $actionMetrics)
    {
        $builder->startObject(18);
        self::addSummary($builder, $summary);
        self::addActionId($builder, $actionId);
        self::addActionStartTime($builder, $actionStartTime);
        self::addActionEndTime($builder, $actionEndTime);
        self::addTotStartTime($builder, $totStartTime);
        self::addTotEndTime($builder, $totEndTime);
        self::addActionActorSrcType($builder, $actionActorSrcType);
        self::addActionActorSrcId($builder, $actionActorSrcId);
        self::addEffector($builder, $effector);
        self::addTargetSrcType($builder, $targetSrcType);
        self::addTargetSrcId($builder, $targetSrcId);
        self::addActorInterceptLat($builder, $actorInterceptLat);
        self::addActorInterceptLon($builder, $actorInterceptLon);
        self::addActorInterceptAlt($builder, $actorInterceptAlt);
        self::addWeaponInterceptLat($builder, $weaponInterceptLat);
        self::addWeaponInterceptLon($builder, $weaponInterceptLon);
        self::addWeaponInterceptAlt($builder, $weaponInterceptAlt);
        self::addActionMetrics($builder, $actionMetrics);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSummary(FlatBufferBuilder $builder, $summary)
    {
        $builder->addOffsetX(0, $summary, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActionId(FlatBufferBuilder $builder, $actionId)
    {
        $builder->addOffsetX(1, $actionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActionStartTime(FlatBufferBuilder $builder, $actionStartTime)
    {
        $builder->addOffsetX(2, $actionStartTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActionEndTime(FlatBufferBuilder $builder, $actionEndTime)
    {
        $builder->addOffsetX(3, $actionEndTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTotStartTime(FlatBufferBuilder $builder, $totStartTime)
    {
        $builder->addOffsetX(4, $totStartTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTotEndTime(FlatBufferBuilder $builder, $totEndTime)
    {
        $builder->addOffsetX(5, $totEndTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActionActorSrcType(FlatBufferBuilder $builder, $actionActorSrcType)
    {
        $builder->addOffsetX(6, $actionActorSrcType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActionActorSrcId(FlatBufferBuilder $builder, $actionActorSrcId)
    {
        $builder->addOffsetX(7, $actionActorSrcId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEffector(FlatBufferBuilder $builder, $effector)
    {
        $builder->addOffsetX(8, $effector, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTargetSrcType(FlatBufferBuilder $builder, $targetSrcType)
    {
        $builder->addOffsetX(9, $targetSrcType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTargetSrcId(FlatBufferBuilder $builder, $targetSrcId)
    {
        $builder->addOffsetX(10, $targetSrcId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addActorInterceptLat(FlatBufferBuilder $builder, $actorInterceptLat)
    {
        $builder->addDoubleX(11, $actorInterceptLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addActorInterceptLon(FlatBufferBuilder $builder, $actorInterceptLon)
    {
        $builder->addDoubleX(12, $actorInterceptLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addActorInterceptAlt(FlatBufferBuilder $builder, $actorInterceptAlt)
    {
        $builder->addDoubleX(13, $actorInterceptAlt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWeaponInterceptLat(FlatBufferBuilder $builder, $weaponInterceptLat)
    {
        $builder->addDoubleX(14, $weaponInterceptLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWeaponInterceptLon(FlatBufferBuilder $builder, $weaponInterceptLon)
    {
        $builder->addDoubleX(15, $weaponInterceptLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWeaponInterceptAlt(FlatBufferBuilder $builder, $weaponInterceptAlt)
    {
        $builder->addDoubleX(16, $weaponInterceptAlt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addActionMetrics(FlatBufferBuilder $builder, $actionMetrics)
    {
        $builder->addOffsetX(17, $actionMetrics, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createActionMetricsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startActionMetricsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEffectResponseActionsList_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEffectResponseActionsList_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "EFFE");
    }
}
