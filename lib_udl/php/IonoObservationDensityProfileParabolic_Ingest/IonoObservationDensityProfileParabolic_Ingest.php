<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Coefficients to describe the E, F1, and F2 layers as parabolic-shape segments.
class IonoObservationDensityProfileParabolic_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return IonoObservationDensityProfileParabolic_Ingest
     */
    public static function getRootAsIonoObservationDensityProfileParabolic_Ingest(ByteBuffer $bb)
    {
        $obj = new IonoObservationDensityProfileParabolic_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function IonoObservationDensityProfileParabolic_IngestIdentifier()
    {
        return "IONO";
    }

    public static function IonoObservationDensityProfileParabolic_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::IonoObservationDensityProfileParabolic_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return IonoObservationDensityProfileParabolic_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// General description of the QP computation algorithm.
    /// Example: /// Example: Best-fit algorithm in NHPC software.
    /// Constraints: No constraints specified.
    public function getDescription()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Describes the E, F1, and F2 layers as parabolic-shape segments.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getParabolicItems($j)
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getParabolicItemsLength()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startIonoObservationDensityProfileParabolic_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return IonoObservationDensityProfileParabolic_Ingest
     */
    public static function createIonoObservationDensityProfileParabolic_Ingest(FlatBufferBuilder $builder, $description, $parabolicItems)
    {
        $builder->startObject(2);
        self::addDescription($builder, $description);
        self::addParabolicItems($builder, $parabolicItems);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(0, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addParabolicItems(FlatBufferBuilder $builder, $parabolicItems)
    {
        $builder->addOffsetX(1, $parabolicItems, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createParabolicItemsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startParabolicItemsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endIonoObservationDensityProfileParabolic_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishIonoObservationDensityProfileParabolic_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "IONO");
    }
}
