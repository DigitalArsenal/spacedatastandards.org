<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Varying scale height Chapman topside layer.
class IonoObservationDensityProfileTopsideExtensionVaryChap_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return IonoObservationDensityProfileTopsideExtensionVaryChap_Abridged
     */
    public static function getRootAsIonoObservationDensityProfileTopsideExtensionVaryChap_Abridged(ByteBuffer $bb)
    {
        $obj = new IonoObservationDensityProfileTopsideExtensionVaryChap_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function IonoObservationDensityProfileTopsideExtensionVaryChap_AbridgedIdentifier()
    {
        return "IONO";
    }

    public static function IonoObservationDensityProfileTopsideExtensionVaryChap_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::IonoObservationDensityProfileTopsideExtensionVaryChap_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return IonoObservationDensityProfileTopsideExtensionVaryChap_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Description of the Chapman computation technique.
    /// Example: /// Example: Constant scale height Chapman topside layer determined using bottomside peak density parameters and placed chi km above the ionosonde-determined peak height.
    /// Constraints: No constraints specified.
    public function getDescription()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Peak density of F2 layer, in grams per cubic centimeter.
    /// Example: /// Example: 313283.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNmF2()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peak height of F2 layer, in kilometers.
    /// Example: /// Example: 265.42
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHmF2()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Scale height if F2 layer at the peak, in kilometers.
    /// Example: /// Example: 45.191
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getScaleF2()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Alpha parameter of the profile shape.
    /// Example: /// Example: 30.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAlpha()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Beta parameter of the profile shape.
    /// Example: /// Example: 30.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBeta()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Transition height, in  kilometers.
    /// Example: /// Example: 30.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHt()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.
    /// Example: /// Example: 30.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getChi()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startIonoObservationDensityProfileTopsideExtensionVaryChap_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return IonoObservationDensityProfileTopsideExtensionVaryChap_Abridged
     */
    public static function createIonoObservationDensityProfileTopsideExtensionVaryChap_Abridged(FlatBufferBuilder $builder, $description, $nmF2, $hmF2, $scaleF2, $alpha, $beta, $ht, $chi)
    {
        $builder->startObject(8);
        self::addDescription($builder, $description);
        self::addNmF2($builder, $nmF2);
        self::addHmF2($builder, $hmF2);
        self::addScaleF2($builder, $scaleF2);
        self::addAlpha($builder, $alpha);
        self::addBeta($builder, $beta);
        self::addHt($builder, $ht);
        self::addChi($builder, $chi);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(0, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNmF2(FlatBufferBuilder $builder, $nmF2)
    {
        $builder->addDoubleX(1, $nmF2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHmF2(FlatBufferBuilder $builder, $hmF2)
    {
        $builder->addDoubleX(2, $hmF2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addScaleF2(FlatBufferBuilder $builder, $scaleF2)
    {
        $builder->addDoubleX(3, $scaleF2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAlpha(FlatBufferBuilder $builder, $alpha)
    {
        $builder->addDoubleX(4, $alpha, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBeta(FlatBufferBuilder $builder, $beta)
    {
        $builder->addDoubleX(5, $beta, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHt(FlatBufferBuilder $builder, $ht)
    {
        $builder->addDoubleX(6, $ht, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addChi(FlatBufferBuilder $builder, $chi)
    {
        $builder->addDoubleX(7, $chi, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endIonoObservationDensityProfileTopsideExtensionVaryChap_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishIonoObservationDensityProfileTopsideExtensionVaryChap_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "IONO");
    }
}
