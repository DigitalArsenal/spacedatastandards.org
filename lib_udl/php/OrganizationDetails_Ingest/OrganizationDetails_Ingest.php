<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of additional detailed organization data as collected by a particular source.
class OrganizationDetails_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return OrganizationDetails_Ingest
     */
    public static function getRootAsOrganizationDetails_Ingest(ByteBuffer $bb)
    {
        $obj = new OrganizationDetails_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function OrganizationDetails_IngestIdentifier()
    {
        return "ORGA";
    }

    public static function OrganizationDetails_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::OrganizationDetails_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return OrganizationDetails_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ORGANIZATIONDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the parent organization.
    /// Example: /// Example: ORGANIZATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdOrganization()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Organization details name.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getName()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Listed contact email address for the organization.
    /// Example: /// Example: some_organization@organization.com
    /// Constraints: Minimum length = 0, Maximum length = 320
    public function getEmail()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Street number of the organization.
    /// Example: /// Example: 123 Main Street
    /// Constraints: Minimum length = 0, Maximum length = 120
    public function getAddress1()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Field for additional organization address information such as PO Box and unit number.
    /// Example: /// Example: Apt 4B
    /// Constraints: Minimum length = 0, Maximum length = 120
    public function getAddress2()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Contains the third line of address information for an organization.
    /// Example: /// Example: Colorado Springs CO, 80903
    /// Constraints: Minimum length = 0, Maximum length = 120
    public function getAddress3()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.
    /// Example: /// Example: Colorado
    /// Constraints: Minimum length = 0, Maximum length = 120
    public function getGeoAdminLevel1()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.
    /// Example: /// Example: El Paso County
    /// Constraints: Minimum length = 0, Maximum length = 120
    public function getGeoAdminLevel2()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.
    /// Example: /// Example: Colorado Springs
    /// Constraints: Minimum length = 0, Maximum length = 120
    public function getGeoAdminLevel3()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.
    /// Example: /// Example: 80903
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getPostalCode()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Organization description.
    /// Example: /// Example: Example description
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    public function getDescription()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Former organization ID (if this organization previously existed as another organization).
    /// Example: /// Example: FORMERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getFormerOrgId()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Parent organization ID of this organization if it is a child organization.
    /// Example: /// Example: PARENTORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getParentOrgId()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getFinancialYearEndDate()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRevenue()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getProfit()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEbitda()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total number of FTEs in this organization.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getFtes()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Designated broker for this organization.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getBroker()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// For organizations of type CORPORATION, the name of the Chief Executive Officer.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getCeo()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// For organizations of type CORPORATION, the name of the Chief Financial Officer.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getCfo()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// For organizations of type CORPORATION, the name of the Chief Technology Officer.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getCto()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the risk manager for the organization.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getRiskManager()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mass ranking for this organization.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMassRanking()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Revenue ranking for this organization.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getRevenueRanking()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// For organizations of type CORPORATION, notes on company financials.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    public function getFinancialNotes()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Notes on the services provided by the organization.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    public function getServicesNotes()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite fleet planning notes for this organization.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    public function getFleetPlanNotes()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \OrganizationDetails_Ingest_dataMode_Enum::REAL;
    }

    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTags($j)
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTagsLength()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startOrganizationDetails_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(37);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return OrganizationDetails_Ingest
     */
    public static function createOrganizationDetails_Ingest(FlatBufferBuilder $builder, $id, $idOrganization, $classificationMarking, $name, $email, $address1, $address2, $address3, $geoAdminLevel1, $geoAdminLevel2, $geoAdminLevel3, $postalCode, $description, $formerOrgId, $parentOrgId, $financialYearEndDate, $revenue, $profit, $ebitda, $ftes, $broker, $ceo, $cfo, $cto, $riskManager, $massRanking, $revenueRanking, $financialNotes, $servicesNotes, $fleetPlanNotes, $source, $origin, $dataMode, $tags, $createdAt, $createdBy, $origNetwork)
    {
        $builder->startObject(37);
        self::addId($builder, $id);
        self::addIdOrganization($builder, $idOrganization);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addName($builder, $name);
        self::addEmail($builder, $email);
        self::addAddress1($builder, $address1);
        self::addAddress2($builder, $address2);
        self::addAddress3($builder, $address3);
        self::addGeoAdminLevel1($builder, $geoAdminLevel1);
        self::addGeoAdminLevel2($builder, $geoAdminLevel2);
        self::addGeoAdminLevel3($builder, $geoAdminLevel3);
        self::addPostalCode($builder, $postalCode);
        self::addDescription($builder, $description);
        self::addFormerOrgId($builder, $formerOrgId);
        self::addParentOrgId($builder, $parentOrgId);
        self::addFinancialYearEndDate($builder, $financialYearEndDate);
        self::addRevenue($builder, $revenue);
        self::addProfit($builder, $profit);
        self::addEbitda($builder, $ebitda);
        self::addFtes($builder, $ftes);
        self::addBroker($builder, $broker);
        self::addCeo($builder, $ceo);
        self::addCfo($builder, $cfo);
        self::addCto($builder, $cto);
        self::addRiskManager($builder, $riskManager);
        self::addMassRanking($builder, $massRanking);
        self::addRevenueRanking($builder, $revenueRanking);
        self::addFinancialNotes($builder, $financialNotes);
        self::addServicesNotes($builder, $servicesNotes);
        self::addFleetPlanNotes($builder, $fleetPlanNotes);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addTags($builder, $tags);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOrganization(FlatBufferBuilder $builder, $idOrganization)
    {
        $builder->addOffsetX(1, $idOrganization, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(2, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(3, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEmail(FlatBufferBuilder $builder, $email)
    {
        $builder->addOffsetX(4, $email, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAddress1(FlatBufferBuilder $builder, $address1)
    {
        $builder->addOffsetX(5, $address1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAddress2(FlatBufferBuilder $builder, $address2)
    {
        $builder->addOffsetX(6, $address2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAddress3(FlatBufferBuilder $builder, $address3)
    {
        $builder->addOffsetX(7, $address3, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGeoAdminLevel1(FlatBufferBuilder $builder, $geoAdminLevel1)
    {
        $builder->addOffsetX(8, $geoAdminLevel1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGeoAdminLevel2(FlatBufferBuilder $builder, $geoAdminLevel2)
    {
        $builder->addOffsetX(9, $geoAdminLevel2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGeoAdminLevel3(FlatBufferBuilder $builder, $geoAdminLevel3)
    {
        $builder->addOffsetX(10, $geoAdminLevel3, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPostalCode(FlatBufferBuilder $builder, $postalCode)
    {
        $builder->addOffsetX(11, $postalCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(12, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFormerOrgId(FlatBufferBuilder $builder, $formerOrgId)
    {
        $builder->addOffsetX(13, $formerOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addParentOrgId(FlatBufferBuilder $builder, $parentOrgId)
    {
        $builder->addOffsetX(14, $parentOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFinancialYearEndDate(FlatBufferBuilder $builder, $financialYearEndDate)
    {
        $builder->addOffsetX(15, $financialYearEndDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRevenue(FlatBufferBuilder $builder, $revenue)
    {
        $builder->addDoubleX(16, $revenue, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addProfit(FlatBufferBuilder $builder, $profit)
    {
        $builder->addDoubleX(17, $profit, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEbitda(FlatBufferBuilder $builder, $ebitda)
    {
        $builder->addDoubleX(18, $ebitda, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addFtes(FlatBufferBuilder $builder, $ftes)
    {
        $builder->addIntX(19, $ftes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBroker(FlatBufferBuilder $builder, $broker)
    {
        $builder->addOffsetX(20, $broker, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCeo(FlatBufferBuilder $builder, $ceo)
    {
        $builder->addOffsetX(21, $ceo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCfo(FlatBufferBuilder $builder, $cfo)
    {
        $builder->addOffsetX(22, $cfo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCto(FlatBufferBuilder $builder, $cto)
    {
        $builder->addOffsetX(23, $cto, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRiskManager(FlatBufferBuilder $builder, $riskManager)
    {
        $builder->addOffsetX(24, $riskManager, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMassRanking(FlatBufferBuilder $builder, $massRanking)
    {
        $builder->addIntX(25, $massRanking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addRevenueRanking(FlatBufferBuilder $builder, $revenueRanking)
    {
        $builder->addIntX(26, $revenueRanking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFinancialNotes(FlatBufferBuilder $builder, $financialNotes)
    {
        $builder->addOffsetX(27, $financialNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addServicesNotes(FlatBufferBuilder $builder, $servicesNotes)
    {
        $builder->addOffsetX(28, $servicesNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFleetPlanNotes(FlatBufferBuilder $builder, $fleetPlanNotes)
    {
        $builder->addOffsetX(29, $fleetPlanNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(30, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(31, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(32, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTags(FlatBufferBuilder $builder, $tags)
    {
        $builder->addOffsetX(33, $tags, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTagsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTagsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(34, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(35, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(36, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endOrganizationDetails_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishOrganizationDetails_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ORGA");
    }
}
