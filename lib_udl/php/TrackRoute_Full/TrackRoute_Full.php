<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// A track route is a prescribed route for performing training events or operations such as air refueling.
class TrackRoute_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return TrackRoute_Full
     */
    public static function getRootAsTrackRoute_Full(ByteBuffer $bb)
    {
        $obj = new TrackRoute_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function TrackRoute_FullIdentifier()
    {
        return "TRAC";
    }

    public static function TrackRoute_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::TrackRoute_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return TrackRoute_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The track route type represented by this record (ex. AIR REFUELING).
    /// Example: /// Example: AIR REFUELING
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getType()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: GDSSMH121004232315303094
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getExternalId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The principal compass direction (cardinal or ordinal) of the track route.
    /// Example: /// Example: NE
    /// Constraints: Minimum length = 0, Maximum length = 2
    public function getDirection()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the creating organization of the track route.
    /// Example: /// Example: HQPAC
    /// Constraints: Minimum length = 0, Maximum length = 250
    public function getCreatingOrg()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Track location ID.
    /// Example: /// Example: POACHR
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getLocationTrackId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the track.
    /// Example: /// Example: CH61A
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTrackId()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the track.
    /// Example: /// Example: CH61 POST
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getTrackName()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Abbreviated name of the track.
    /// Example: /// Example: CH61
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getShortName()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of process used by AMC to schedule an air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
    /// Example: /// Example: V
    /// Constraints: Minimum length = 0, Maximum length = 2
    public function getTypeCode()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Region code indicating where the track resides as determined by the data source.
    /// Example: /// Example: 5
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getRegionCode()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Region where the track resides.
    /// Example: /// Example: North America
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getRegionName()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The APX radar code sent and received by the aircraft for identification.
    /// Example: /// Example: 5/1
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getApxBeaconCode()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The receiver tanker channel identifer for air refueling tracks.
    /// Example: /// Example: 31/094
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getReceiverTankerCHCode()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The APN radar code sent and received by the aircraft for identification.
    /// Example: /// Example: 1-3-1
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getApnSetting()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Standard Indicator Code of the air refueling track.
    /// Example: /// Example: N
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getSic()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Date the track needs to be reviewed for accuracy or deletion in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-09-16T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getReviewDate()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Used to show last time the track route was added to an itinerary in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-09-17T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getLastUsedDate()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The last updated date of the track route in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-09-17T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getLastUpdateDate()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The primary UHF radio frequency used for the track route in megahertz.
    /// Example: /// Example: 357.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPriFreq()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The secondary UHF radio frequency used for the track route in megahertz.
    /// Example: /// Example: 319.7
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSecFreq()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Air Refueling Track Control Center message.
    /// Example: /// Example: OAKLAND CTR/GUAM CERAP
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getArtccMessage()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Point of contact for the air refueling track route scheduler.
    /// Example: /// Example: 97 OSS/OSOS DSN 866-5555
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getSchedulerOrgName()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The unit responsible for scheduling the track route.
    /// Example: /// Example: 612 AOC
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getSchedulerOrgUnit()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The date which the DAFIF track was last updated/validated in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-09-17T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getEffectiveDate()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Points identified within the route.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRoutePoints($j)
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRoutePointsLength()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Minimum and maximum altitude bounds for the track.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAltitudeBlocks($j)
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAltitudeBlocksLength()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Point of contacts for scheduling or modifying the route.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getPoc($j)
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getPocLength()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSource()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \TrackRoute_Full_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startTrackRoute_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(38);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return TrackRoute_Full
     */
    public static function createTrackRoute_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $type, $externalId, $direction, $creatingOrg, $locationTrackId, $trackId, $trackName, $shortName, $typeCode, $regionCode, $regionName, $apxBeaconCode, $receiverTankerCHCode, $apnSetting, $sic, $reviewDate, $lastUsedDate, $lastUpdateDate, $priFreq, $secFreq, $artccMessage, $schedulerOrgName, $schedulerOrgUnit, $effectiveDate, $routePoints, $altitudeBlocks, $poc, $createdAt, $createdBy, $updatedAt, $updatedBy, $sourceDL, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(38);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addType($builder, $type);
        self::addExternalId($builder, $externalId);
        self::addDirection($builder, $direction);
        self::addCreatingOrg($builder, $creatingOrg);
        self::addLocationTrackId($builder, $locationTrackId);
        self::addTrackId($builder, $trackId);
        self::addTrackName($builder, $trackName);
        self::addShortName($builder, $shortName);
        self::addTypeCode($builder, $typeCode);
        self::addRegionCode($builder, $regionCode);
        self::addRegionName($builder, $regionName);
        self::addApxBeaconCode($builder, $apxBeaconCode);
        self::addReceiverTankerCHCode($builder, $receiverTankerCHCode);
        self::addApnSetting($builder, $apnSetting);
        self::addSic($builder, $sic);
        self::addReviewDate($builder, $reviewDate);
        self::addLastUsedDate($builder, $lastUsedDate);
        self::addLastUpdateDate($builder, $lastUpdateDate);
        self::addPriFreq($builder, $priFreq);
        self::addSecFreq($builder, $secFreq);
        self::addArtccMessage($builder, $artccMessage);
        self::addSchedulerOrgName($builder, $schedulerOrgName);
        self::addSchedulerOrgUnit($builder, $schedulerOrgUnit);
        self::addEffectiveDate($builder, $effectiveDate);
        self::addRoutePoints($builder, $routePoints);
        self::addAltitudeBlocks($builder, $altitudeBlocks);
        self::addPoc($builder, $poc);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(2, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalId(FlatBufferBuilder $builder, $externalId)
    {
        $builder->addOffsetX(3, $externalId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDirection(FlatBufferBuilder $builder, $direction)
    {
        $builder->addOffsetX(4, $direction, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatingOrg(FlatBufferBuilder $builder, $creatingOrg)
    {
        $builder->addOffsetX(5, $creatingOrg, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLocationTrackId(FlatBufferBuilder $builder, $locationTrackId)
    {
        $builder->addOffsetX(6, $locationTrackId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrackId(FlatBufferBuilder $builder, $trackId)
    {
        $builder->addOffsetX(7, $trackId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrackName(FlatBufferBuilder $builder, $trackName)
    {
        $builder->addOffsetX(8, $trackName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addShortName(FlatBufferBuilder $builder, $shortName)
    {
        $builder->addOffsetX(9, $shortName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTypeCode(FlatBufferBuilder $builder, $typeCode)
    {
        $builder->addOffsetX(10, $typeCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRegionCode(FlatBufferBuilder $builder, $regionCode)
    {
        $builder->addOffsetX(11, $regionCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRegionName(FlatBufferBuilder $builder, $regionName)
    {
        $builder->addOffsetX(12, $regionName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addApxBeaconCode(FlatBufferBuilder $builder, $apxBeaconCode)
    {
        $builder->addOffsetX(13, $apxBeaconCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReceiverTankerCHCode(FlatBufferBuilder $builder, $receiverTankerCHCode)
    {
        $builder->addOffsetX(14, $receiverTankerCHCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addApnSetting(FlatBufferBuilder $builder, $apnSetting)
    {
        $builder->addOffsetX(15, $apnSetting, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSic(FlatBufferBuilder $builder, $sic)
    {
        $builder->addOffsetX(16, $sic, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReviewDate(FlatBufferBuilder $builder, $reviewDate)
    {
        $builder->addOffsetX(17, $reviewDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastUsedDate(FlatBufferBuilder $builder, $lastUsedDate)
    {
        $builder->addOffsetX(18, $lastUsedDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastUpdateDate(FlatBufferBuilder $builder, $lastUpdateDate)
    {
        $builder->addOffsetX(19, $lastUpdateDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPriFreq(FlatBufferBuilder $builder, $priFreq)
    {
        $builder->addDoubleX(20, $priFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSecFreq(FlatBufferBuilder $builder, $secFreq)
    {
        $builder->addDoubleX(21, $secFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArtccMessage(FlatBufferBuilder $builder, $artccMessage)
    {
        $builder->addOffsetX(22, $artccMessage, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSchedulerOrgName(FlatBufferBuilder $builder, $schedulerOrgName)
    {
        $builder->addOffsetX(23, $schedulerOrgName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSchedulerOrgUnit(FlatBufferBuilder $builder, $schedulerOrgUnit)
    {
        $builder->addOffsetX(24, $schedulerOrgUnit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEffectiveDate(FlatBufferBuilder $builder, $effectiveDate)
    {
        $builder->addOffsetX(25, $effectiveDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRoutePoints(FlatBufferBuilder $builder, $routePoints)
    {
        $builder->addOffsetX(26, $routePoints, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRoutePointsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRoutePointsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAltitudeBlocks(FlatBufferBuilder $builder, $altitudeBlocks)
    {
        $builder->addOffsetX(27, $altitudeBlocks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAltitudeBlocksVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAltitudeBlocksVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPoc(FlatBufferBuilder $builder, $poc)
    {
        $builder->addOffsetX(28, $poc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createPocVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startPocVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(29, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(30, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(31, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(32, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(33, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(34, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(35, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(36, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(37, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endTrackRoute_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishTrackRoute_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "TRAC");
    }
}
