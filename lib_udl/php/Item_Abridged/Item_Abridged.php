<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// No description available.
class Item_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Item_Abridged
     */
    public static function getRootAsItem_Abridged(ByteBuffer $bb)
    {
        $obj = new Item_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Item_AbridgedIdentifier()
    {
        return "ITEM";
    }

    public static function Item_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Item_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Item_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: 22f1f6da-a568-655a-ea37-76d013d04853
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UDL ID of the air load plan this item is associated with.
    /// Example: /// Example: 1038c389-d38e-270f-51cc-6a12e905abe8
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdAirLoadPlan()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The tracking identifier of an item or person. May be similar in representation of a barcode or UPC. If no scanCode or tracking number equivalent is available, 'NONE' should be used.
    /// Example: /// Example: 12345ABCD
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getScanCode()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
    /// Example: /// Example: bID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getScGenTool()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The item type of this record (e.g. EQUIPMENT, CARGO, PASSENGER).
    /// Example: /// Example: CARGO
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getType()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of cargo (e.g. PALLET, ROLLING STOCK, LOOSE, OTHER). Applicable for cargo item types only.
    /// Example: /// Example: PALLET
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCargoType()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the item. Applicable for equipment and cargo item types only.
    /// Example: /// Example: Product Name
    /// Constraints: Minimum length = 0, Maximum length = 100
    public function getName()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The destination of the item, typically an ICAO or port code. Applicable for cargo and passenger item types only.
    /// Example: /// Example: RMS
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getDestination()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The departure code or location where this item has left or is leaving.
    /// Example: /// Example: CHS
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getDeparture()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the unit receiving this item.
    /// Example: /// Example: 50 SBN
    /// Constraints: Minimum length = 0, Maximum length = 100
    public function getReceivingUnit()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The military branch receiving this item.
    /// Example: /// Example: Air Force
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getReceivingBranch()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The latest acceptable arrival date of the item at the destination, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
    /// Example: /// Example: 2023-03-13
    /// Constraints: No constraints specified.
    public function getLastArrDate()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The unit line number of this item.
    /// Example: /// Example: T01ME01
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getUln()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Weight of the item in kilograms (if item is a passenger, include on-person bags).
    /// Example: /// Example: 5443.335
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWeight()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Timestamp when the weight was taken, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-03-13T16:06:00.123Z
    /// Constraints: No constraints specified.
    public function getWeightTS()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The classification code of the commodity or group of commodities.
    /// Example: /// Example: 2304116
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getCommodityCode()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The classification system denoting the commodity code, commodityCode (e.g. AIR, WATER, NMFC, UFC, STCC, DODUNQ, etc.).
    /// Example: /// Example: STCC
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getCommoditySys()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The code denoting the type of material item.
    /// Example: /// Example: 530500234
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getProductCode()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The assigning system that denotes the type of material item, productCode (e.g. NSN-national stock number, NDC-national drug code, MPN-manufacturer part number, etc.).
    /// Example: /// Example: NSN
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getProductSys()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Width of the cargo in meters. Applicable for cargo item types only.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWidth()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Length of the cargo in meters. Applicable for cargo item types only.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLength()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Height of the cargo in meters. Applicable for cargo item types only.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHeight()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The volume of the item, in cubic meters. Applicable for cargo item types only.
    /// Example: /// Example: 7.8902
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVolume()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Center of gravity position of the item, measured from the item's front datum, in centimeters.
    /// Example: /// Example: 112.014
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCg()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The fuselage station of the item measured from the reference datum, in centimeters. Applicable for cargo and passenger item types only.
    /// Example: /// Example: 412.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFs()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// How far left or right of centerline is the item in meters. Applicable for cargo and passenger item types only.
    /// Example: /// Example: 3.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCenterlineOffset()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Moment of the item in Newton-meters. Applicable for equipment and cargo item types only.
    /// Example: /// Example: 4000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMoment()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Flag indicating this item is planned to be airdropped. Applicable for cargo and passenger item types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getAirdrop()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Transportation Control Number of the cargo. Applicable for cargo item types only.
    /// Example: /// Example: M1358232245912XXX
    /// Constraints: Minimum length = 0, Maximum length = 17
    public function getTcn()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of UN hazard classes or division codes that apply to this item.
    /// Example: /// Example: [1.1, 1.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getHazCodes($j)
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getHazCodesLength()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Net explosive weight of the item, in kilograms.
    /// Example: /// Example: 51.437
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNetExpWt()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Flag indicating this item acts as a container and contains additional items.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getContainer()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Array of tracking identifiers that are contained within this item.
    /// Example: /// Example: ['2UJ8843K', '745YV1T65']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getItemContains($j)
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getItemContainsLength()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Number of pallet positions or equivalent on the aircraft, ship, or conveyance equipment that this item occupies.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumPalletPos()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// United States Distinguished Visitor Code, only applicable to people.
    /// Example: /// Example: DV-2
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getDvCode()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional notes or comments about this item.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getNotes()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of keys that may be associated to this item. The entries in this array must correspond to the position index in the values array. This array must be the same length as values..
    /// Example: /// Example: ['key1', 'key2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getKeys($j)
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getKeysLength()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
    /// Example: /// Example: ['value1', 'value2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getValues($j)
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getValuesLength()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Name of the additional data format so downstream consuming applications can know how to parse it. Typically includes the source system name and the format name.
    /// Example: /// Example: Alt Data Format
    /// Constraints: Minimum length = 0, Maximum length = 100
    public function getAltDataFormat()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the system that accepted this item from a customer. Where a user or application could go look for additional information.
    /// Example: /// Example: Accepting System
    /// Constraints: Minimum length = 0, Maximum length = 100
    public function getAccSystem()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional data required to find this item in the accepting system.
    /// Example: /// Example: Accepting System Notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getAccSysNotes()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysValues array. This array must be the same length as accSysValues.
    /// Example: /// Example: ['System key1', 'System key2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAccSysKeys($j)
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAccSysKeysLength()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of values for the keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysKeys array. This array must be the same length as accSysKeys.
    /// Example: /// Example: ['System value1', 'System value2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAccSysValues($j)
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAccSysValuesLength()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2023-03-21T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSource()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Item_Abridged_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startItem_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(51);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Item_Abridged
     */
    public static function createItem_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $idAirLoadPlan, $scanCode, $scGenTool, $type, $cargoType, $name, $destination, $departure, $receivingUnit, $receivingBranch, $lastArrDate, $uln, $weight, $weightTS, $commodityCode, $commoditySys, $productCode, $productSys, $width, $length, $height, $volume, $cg, $fs, $centerlineOffset, $moment, $airdrop, $tcn, $hazCodes, $netExpWt, $container, $itemContains, $numPalletPos, $dvCode, $notes, $keys, $values, $altDataFormat, $accSystem, $accSysNotes, $accSysKeys, $accSysValues, $createdAt, $createdBy, $sourceDL, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(51);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdAirLoadPlan($builder, $idAirLoadPlan);
        self::addScanCode($builder, $scanCode);
        self::addScGenTool($builder, $scGenTool);
        self::addType($builder, $type);
        self::addCargoType($builder, $cargoType);
        self::addName($builder, $name);
        self::addDestination($builder, $destination);
        self::addDeparture($builder, $departure);
        self::addReceivingUnit($builder, $receivingUnit);
        self::addReceivingBranch($builder, $receivingBranch);
        self::addLastArrDate($builder, $lastArrDate);
        self::addUln($builder, $uln);
        self::addWeight($builder, $weight);
        self::addWeightTS($builder, $weightTS);
        self::addCommodityCode($builder, $commodityCode);
        self::addCommoditySys($builder, $commoditySys);
        self::addProductCode($builder, $productCode);
        self::addProductSys($builder, $productSys);
        self::addWidth($builder, $width);
        self::addLength($builder, $length);
        self::addHeight($builder, $height);
        self::addVolume($builder, $volume);
        self::addCg($builder, $cg);
        self::addFs($builder, $fs);
        self::addCenterlineOffset($builder, $centerlineOffset);
        self::addMoment($builder, $moment);
        self::addAirdrop($builder, $airdrop);
        self::addTcn($builder, $tcn);
        self::addHazCodes($builder, $hazCodes);
        self::addNetExpWt($builder, $netExpWt);
        self::addContainer($builder, $container);
        self::addItemContains($builder, $itemContains);
        self::addNumPalletPos($builder, $numPalletPos);
        self::addDvCode($builder, $dvCode);
        self::addNotes($builder, $notes);
        self::addKeys($builder, $keys);
        self::addValues($builder, $values);
        self::addAltDataFormat($builder, $altDataFormat);
        self::addAccSystem($builder, $accSystem);
        self::addAccSysNotes($builder, $accSysNotes);
        self::addAccSysKeys($builder, $accSysKeys);
        self::addAccSysValues($builder, $accSysValues);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdAirLoadPlan(FlatBufferBuilder $builder, $idAirLoadPlan)
    {
        $builder->addOffsetX(2, $idAirLoadPlan, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addScanCode(FlatBufferBuilder $builder, $scanCode)
    {
        $builder->addOffsetX(3, $scanCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addScGenTool(FlatBufferBuilder $builder, $scGenTool)
    {
        $builder->addOffsetX(4, $scGenTool, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(5, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCargoType(FlatBufferBuilder $builder, $cargoType)
    {
        $builder->addOffsetX(6, $cargoType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(7, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDestination(FlatBufferBuilder $builder, $destination)
    {
        $builder->addOffsetX(8, $destination, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDeparture(FlatBufferBuilder $builder, $departure)
    {
        $builder->addOffsetX(9, $departure, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReceivingUnit(FlatBufferBuilder $builder, $receivingUnit)
    {
        $builder->addOffsetX(10, $receivingUnit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReceivingBranch(FlatBufferBuilder $builder, $receivingBranch)
    {
        $builder->addOffsetX(11, $receivingBranch, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastArrDate(FlatBufferBuilder $builder, $lastArrDate)
    {
        $builder->addOffsetX(12, $lastArrDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUln(FlatBufferBuilder $builder, $uln)
    {
        $builder->addOffsetX(13, $uln, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWeight(FlatBufferBuilder $builder, $weight)
    {
        $builder->addDoubleX(14, $weight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWeightTS(FlatBufferBuilder $builder, $weightTS)
    {
        $builder->addOffsetX(15, $weightTS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCommodityCode(FlatBufferBuilder $builder, $commodityCode)
    {
        $builder->addOffsetX(16, $commodityCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCommoditySys(FlatBufferBuilder $builder, $commoditySys)
    {
        $builder->addOffsetX(17, $commoditySys, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addProductCode(FlatBufferBuilder $builder, $productCode)
    {
        $builder->addOffsetX(18, $productCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addProductSys(FlatBufferBuilder $builder, $productSys)
    {
        $builder->addOffsetX(19, $productSys, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWidth(FlatBufferBuilder $builder, $width)
    {
        $builder->addDoubleX(20, $width, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLength(FlatBufferBuilder $builder, $length)
    {
        $builder->addDoubleX(21, $length, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHeight(FlatBufferBuilder $builder, $height)
    {
        $builder->addDoubleX(22, $height, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVolume(FlatBufferBuilder $builder, $volume)
    {
        $builder->addDoubleX(23, $volume, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCg(FlatBufferBuilder $builder, $cg)
    {
        $builder->addDoubleX(24, $cg, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFs(FlatBufferBuilder $builder, $fs)
    {
        $builder->addDoubleX(25, $fs, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCenterlineOffset(FlatBufferBuilder $builder, $centerlineOffset)
    {
        $builder->addDoubleX(26, $centerlineOffset, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMoment(FlatBufferBuilder $builder, $moment)
    {
        $builder->addDoubleX(27, $moment, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addAirdrop(FlatBufferBuilder $builder, $airdrop)
    {
        $builder->addBoolX(28, $airdrop, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTcn(FlatBufferBuilder $builder, $tcn)
    {
        $builder->addOffsetX(29, $tcn, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addHazCodes(FlatBufferBuilder $builder, $hazCodes)
    {
        $builder->addOffsetX(30, $hazCodes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createHazCodesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startHazCodesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNetExpWt(FlatBufferBuilder $builder, $netExpWt)
    {
        $builder->addDoubleX(31, $netExpWt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addContainer(FlatBufferBuilder $builder, $container)
    {
        $builder->addBoolX(32, $container, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addItemContains(FlatBufferBuilder $builder, $itemContains)
    {
        $builder->addOffsetX(33, $itemContains, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createItemContainsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startItemContainsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumPalletPos(FlatBufferBuilder $builder, $numPalletPos)
    {
        $builder->addIntX(34, $numPalletPos, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDvCode(FlatBufferBuilder $builder, $dvCode)
    {
        $builder->addOffsetX(35, $dvCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNotes(FlatBufferBuilder $builder, $notes)
    {
        $builder->addOffsetX(36, $notes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addKeys(FlatBufferBuilder $builder, $keys)
    {
        $builder->addOffsetX(37, $keys, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createKeysVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startKeysVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addValues(FlatBufferBuilder $builder, $values)
    {
        $builder->addOffsetX(38, $values, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createValuesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startValuesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltDataFormat(FlatBufferBuilder $builder, $altDataFormat)
    {
        $builder->addOffsetX(39, $altDataFormat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAccSystem(FlatBufferBuilder $builder, $accSystem)
    {
        $builder->addOffsetX(40, $accSystem, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAccSysNotes(FlatBufferBuilder $builder, $accSysNotes)
    {
        $builder->addOffsetX(41, $accSysNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAccSysKeys(FlatBufferBuilder $builder, $accSysKeys)
    {
        $builder->addOffsetX(42, $accSysKeys, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAccSysKeysVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAccSysKeysVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAccSysValues(FlatBufferBuilder $builder, $accSysValues)
    {
        $builder->addOffsetX(43, $accSysValues, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAccSysValuesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAccSysValuesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(44, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(45, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(46, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(47, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(48, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(49, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(50, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endItem_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishItem_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ITEM");
    }
}
