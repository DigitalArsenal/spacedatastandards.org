<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Objective Area Information.
class PersonnelRecoveryObjectiveAreaInfo_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return PersonnelRecoveryObjectiveAreaInfo_Full
     */
    public static function getRootAsPersonnelRecoveryObjectiveAreaInfo_Full(ByteBuffer $bb)
    {
        $obj = new PersonnelRecoveryObjectiveAreaInfo_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function PersonnelRecoveryObjectiveAreaInfo_FullIdentifier()
    {
        return "PERS";
    }

    public static function PersonnelRecoveryObjectiveAreaInfo_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::PersonnelRecoveryObjectiveAreaInfo_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return PersonnelRecoveryObjectiveAreaInfo_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the pz location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
    /// Example: /// Example: [103.23, 30.445]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getPzLocation($j)
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getPzLocationLength()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Description of the pickup zone location.
    /// Example: /// Example: Near the lake.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getPzDesc()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The call sign of the on-scene commander.
    /// Example: /// Example: STARFOX
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getOscCallSign()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The radio frequency of the on-scene commander.
    /// Example: /// Example: 12.55
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOscFreq()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Information detailing knowledge of enemies in the area.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getEnemyData($j)
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEnemyDataLength()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startPersonnelRecoveryObjectiveAreaInfo_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(5);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return PersonnelRecoveryObjectiveAreaInfo_Full
     */
    public static function createPersonnelRecoveryObjectiveAreaInfo_Full(FlatBufferBuilder $builder, $pzLocation, $pzDesc, $oscCallSign, $oscFreq, $enemyData)
    {
        $builder->startObject(5);
        self::addPzLocation($builder, $pzLocation);
        self::addPzDesc($builder, $pzDesc);
        self::addOscCallSign($builder, $oscCallSign);
        self::addOscFreq($builder, $oscFreq);
        self::addEnemyData($builder, $enemyData);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPzLocation(FlatBufferBuilder $builder, $pzLocation)
    {
        $builder->addOffsetX(0, $pzLocation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createPzLocationVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startPzLocationVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPzDesc(FlatBufferBuilder $builder, $pzDesc)
    {
        $builder->addOffsetX(1, $pzDesc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOscCallSign(FlatBufferBuilder $builder, $oscCallSign)
    {
        $builder->addOffsetX(2, $oscCallSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOscFreq(FlatBufferBuilder $builder, $oscFreq)
    {
        $builder->addDoubleX(3, $oscFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEnemyData(FlatBufferBuilder $builder, $enemyData)
    {
        $builder->addOffsetX(4, $enemyData, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEnemyDataVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEnemyDataVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endPersonnelRecoveryObjectiveAreaInfo_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishPersonnelRecoveryObjectiveAreaInfo_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "PERS");
    }
}
