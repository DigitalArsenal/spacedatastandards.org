<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// The parts associated with this support item.
class LogisticsParts_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return LogisticsParts_Abridged
     */
    public static function getRootAsLogisticsParts_Abridged(ByteBuffer $bb)
    {
        $obj = new LogisticsParts_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function LogisticsParts_AbridgedIdentifier()
    {
        return "LOGI";
    }

    public static function LogisticsParts_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::LogisticsParts_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return LogisticsParts_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Requested or supplied part number.
    /// Example: /// Example: MS35338-42
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getPartNumber()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The National Stock Number of the part being requested or supplied.
    /// Example: /// Example: 5310-00-045-3299
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getNationalStockNumber()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Code for a unit of measurement.
    /// Example: /// Example: EA
    /// Constraints: Minimum length = 0, Maximum length = 2
    public function getMeasurementUnitCode()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Work Unit Code (WUC), or for some aircraft types, the Reference Designator.
    /// Example: /// Example: 5611UU001
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getWorkUnitCode()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the specified Technical Order manual holding the aircraft information for use in diagnosing a problem or condition.
    /// Example: /// Example: 1C-17A-4
    /// Constraints: Minimum length = 0, Maximum length = 15
    public function getTechnicalOrderText()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Technical order manual figure number for the requested / supplied part.
    /// Example: /// Example: 3
    /// Constraints: Minimum length = 0, Maximum length = 7
    public function getFigureNumber()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Technical order manual index number for the requested part.
    /// Example: /// Example: 4
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getIndexNumber()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The person who validated the request for parts.
    /// Example: /// Example: JOHN SMITH
    /// Constraints: Minimum length = 0, Maximum length = 25
    public function getRequestVerifier()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The person who validated that the sourced location has, and can supply, the requested parts.
    /// Example: /// Example: JANE DOE
    /// Constraints: Minimum length = 0, Maximum length = 25
    public function getLocationVerifier()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The supply document number.
    /// Example: /// Example: J223FU31908300
    /// Constraints: Minimum length = 0, Maximum length = 17
    public function getSupplyDocumentNumber()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The supply stocks for this support item.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLogisticsStocks($j)
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLogisticsStocksLength()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startLogisticsParts_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(11);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return LogisticsParts_Abridged
     */
    public static function createLogisticsParts_Abridged(FlatBufferBuilder $builder, $partNumber, $nationalStockNumber, $measurementUnitCode, $workUnitCode, $technicalOrderText, $figureNumber, $indexNumber, $requestVerifier, $locationVerifier, $supplyDocumentNumber, $logisticsStocks)
    {
        $builder->startObject(11);
        self::addPartNumber($builder, $partNumber);
        self::addNationalStockNumber($builder, $nationalStockNumber);
        self::addMeasurementUnitCode($builder, $measurementUnitCode);
        self::addWorkUnitCode($builder, $workUnitCode);
        self::addTechnicalOrderText($builder, $technicalOrderText);
        self::addFigureNumber($builder, $figureNumber);
        self::addIndexNumber($builder, $indexNumber);
        self::addRequestVerifier($builder, $requestVerifier);
        self::addLocationVerifier($builder, $locationVerifier);
        self::addSupplyDocumentNumber($builder, $supplyDocumentNumber);
        self::addLogisticsStocks($builder, $logisticsStocks);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPartNumber(FlatBufferBuilder $builder, $partNumber)
    {
        $builder->addOffsetX(0, $partNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNationalStockNumber(FlatBufferBuilder $builder, $nationalStockNumber)
    {
        $builder->addOffsetX(1, $nationalStockNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMeasurementUnitCode(FlatBufferBuilder $builder, $measurementUnitCode)
    {
        $builder->addOffsetX(2, $measurementUnitCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWorkUnitCode(FlatBufferBuilder $builder, $workUnitCode)
    {
        $builder->addOffsetX(3, $workUnitCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTechnicalOrderText(FlatBufferBuilder $builder, $technicalOrderText)
    {
        $builder->addOffsetX(4, $technicalOrderText, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFigureNumber(FlatBufferBuilder $builder, $figureNumber)
    {
        $builder->addOffsetX(5, $figureNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIndexNumber(FlatBufferBuilder $builder, $indexNumber)
    {
        $builder->addOffsetX(6, $indexNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRequestVerifier(FlatBufferBuilder $builder, $requestVerifier)
    {
        $builder->addOffsetX(7, $requestVerifier, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLocationVerifier(FlatBufferBuilder $builder, $locationVerifier)
    {
        $builder->addOffsetX(8, $locationVerifier, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSupplyDocumentNumber(FlatBufferBuilder $builder, $supplyDocumentNumber)
    {
        $builder->addOffsetX(9, $supplyDocumentNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLogisticsStocks(FlatBufferBuilder $builder, $logisticsStocks)
    {
        $builder->addOffsetX(10, $logisticsStocks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLogisticsStocksVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLogisticsStocksVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endLogisticsParts_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishLogisticsParts_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "LOGI");
    }
}
