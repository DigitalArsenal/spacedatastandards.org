<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Self-reported information obtained from Automatic Identification System (AIS) equipment. This contains information such as unique identification, status, position, course, and speed. The AIS is an automatic tracking system that uses transceivers on ships and is used by vessel traffic services. Although technically and operationally distinct, the AIS system is analogous to ADS-B that performs a similar function for aircraft. AIS is intended to assist a vessel's watchstanding officers and allow maritime authorities to track and monitor vessel movements. AIS integrates a standardized VHF transceiver with a positioning system such as Global Positioning System receiver, with other electronic navigation sensors, such as gyrocompass or rate of turn indicator. Vessels fitted with AIS transceivers can be tracked by AIS base stations located along coast lines or, when out of range of terrestrial networks, through a growing number of satellites that are fitted with special AIS receivers which are capable of deconflicting a large number of signatures.
class AIS_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AIS_Full
     */
    public static function getRootAsAIS_Full(ByteBuffer $bb)
    {
        $obj = new AIS_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AIS_FullIdentifier()
    {
        return "AISF";
    }

    public static function AIS_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AIS_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AIS_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: AIS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the Track.
    /// Example: /// Example: TRACK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdTrack()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the vessel.
    /// Example: /// Example: VESSEL-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdVessel()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Maritime Mobile Service Identity of the vessel.  MMSI is a nine-digit number that identifies the transmitter station of the vessel.
    /// Example: /// Example: 304010417
    /// Constraints: No constraints specified.
    /**
     * @return long
     */
    public function getMmsi()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /// The International Maritime Organization Number of the vessel.  IMON is a seven-digit number that uniquely identifies the vessel.
    /// Example: /// Example: 9015462
    /// Constraints: No constraints specified.
    /**
     * @return long
     */
    public function getImon()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /// The timestamp that the vessel position was recorded, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getTs()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the vessel.  Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
    /// Example: /// Example: DORNUM
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getShipName()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).  See the engagedIn and specialCraft entries for additional information on certain types of vessels.
    /// Example: /// Example: Passenger
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getShipType()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The activity that the vessel is engaged in.  This entry applies only when the shipType = Other.
    /// Example: /// Example: Cargo
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getEngagedIn()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of special craft designation of the vessel.  This entry applies only when the shipType = Special Craft.
    /// Example: /// Example: Tug
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getSpecialCraft()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    /// Example: /// Example: Freight
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getCargoType()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A uniquely designated identifier for the vessel's transmitter station.
    /// Example: /// Example: V2OZ
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getCallSign()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The flag of the subject vessel according to AIS transmission.
    /// Example: /// Example: United States
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getVesselFlag()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS-84 latitude of the vessel position, in degrees.  -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 47.758499
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLat()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the vessel position, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -5.154223
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLon()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Flag indicating high reported position accuracy (less than or equal to 10 meters).  A value of 0/false indicates low accuracy (greater than 10 meters).
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getPosHiAccuracy()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating high reported position latency (greater than 5 seconds).  A value of 0/false indicates low latency (less than 5 seconds).
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getPosHiLatency()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The speed-over-ground reported by the vessel, in kilometers/hour.
    /// Example: /// Example: 10.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSpeed()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The true heading reported by the vessel, in degrees.
    /// Example: /// Example: 329.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTrueHeading()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The course-over-ground reported by the vessel, in degrees.
    /// Example: /// Example: 157.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCourse()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Rate-of-Turn for the vessel, in degrees/minute.  Positive value indicates that the vessel is turning right.
    /// Example: /// Example: 22.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRateOfTurn()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Flag indicating that the vessel is engaged in a special maneuver (e.g. Waterway Navigation).
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getSpecialManeuver()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored, Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation status definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with navigation status. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    /// Example: /// Example: Underway Using Engine
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getNavStatus()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of electronic position fixing device (e.g. GPS, GLONASS, etc.). Intended as, but not constrained to, the USCG NAVCEN electronic position fixing device definitions. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    /// Example: /// Example: GPS
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getPosDeviceType()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reference dimensions of the vessel, reported as [A, B, C, D], in meters.  Where the array values represent the distance fore (A), aft (B), to port (C), and to starboard (D) of the navigation antenna.  Array with values A = C = 0 and B, D > 0 indicate the length (B) and width (D) of the vessel without antenna position reference.
    /// Example: /// Example: [50.1, 50.1, 20.1, 20.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAntennaRefDimensions($j)
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAntennaRefDimensionsLength()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The overall length of the vessel, in meters.  A value of 511 indicates a vessel length of 511 meters or greater.
    /// Example: /// Example: 511.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLength()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The breadth of the vessel, in meters.  A value of 63 indicates a vessel breadth of 63 meters or greater.
    /// Example: /// Example: 24.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWidth()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The maximum static draught, in meters, of the vessel according to the AIS transmission.
    /// Example: /// Example: 21.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDraught()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Further description or explanation of the vessel or type.
    /// Example: /// Example: Search and rescue vessels
    /// Constraints: Minimum length = 0, Maximum length = 100
    public function getShipDescription()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The destination of the vessel according to the AIS transmission.
    /// Example: /// Example: USCLE
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getDestination()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Estimated Time of Arrival of the vessel at the destination, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getDestinationETA()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The US Geographic Unique Identifier of the current port hosting the vessel.
    /// Example: /// Example: 0ABC
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getCurrentPortGUID()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UN Location Code of the current port hosting the vessel.
    /// Example: /// Example: XF013
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getCurrentPortLOCODE()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The US Geographic Unique Identifier of the last port visited by the vessel.
    /// Example: /// Example: 0VAX
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getLastPortGUID()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UN Location Code of the last port visited by the vessel.
    /// Example: /// Example: USSKY
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getLastPortLOCODE()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The US Geographic Unique Identifier of the next destination port of the vessel.
    /// Example: /// Example: 0Z8Q
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getNextPortGUID()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UN  Location Code of the next destination port of the vessel.
    /// Example: /// Example: USCLE
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getNextPortLOCODE()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Estimated Time of Arrival of the vessel at the destination port, according to MarineTraffic calculations, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getEtaCalculated()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The date and time that the ETA was calculated by MarineTraffic, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getEtaUpdated()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The remaining distance, in kilometers, for the vessel to reach the reported destination.
    /// Example: /// Example: 150.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDistanceToGo()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The distance, in kilometers, that the vessel has travelled since departing the last port.
    /// Example: /// Example: 200.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDistanceTravelled()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The average speed, in kilometers/hour, calculated for the subject vessel during the latest voyage (port to port).
    /// Example: /// Example: 12.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgSpeed()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The maximum speed, in kilometers/hour, reported by the subject vessel during the latest voyage (port to port).
    /// Example: /// Example: 13.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxSpeed()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSource()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AIS_Full_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAIS_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(51);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AIS_Full
     */
    public static function createAIS_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $idTrack, $idVessel, $mmsi, $imon, $ts, $shipName, $shipType, $engagedIn, $specialCraft, $cargoType, $callSign, $vesselFlag, $lat, $lon, $posHiAccuracy, $posHiLatency, $speed, $trueHeading, $course, $rateOfTurn, $specialManeuver, $navStatus, $posDeviceType, $antennaRefDimensions, $length, $width, $draught, $shipDescription, $destination, $destinationETA, $currentPortGUID, $currentPortLOCODE, $lastPortGUID, $lastPortLOCODE, $nextPortGUID, $nextPortLOCODE, $etaCalculated, $etaUpdated, $distanceToGo, $distanceTravelled, $avgSpeed, $maxSpeed, $createdAt, $createdBy, $source, $sourceDL, $origin, $dataMode, $origNetwork)
    {
        $builder->startObject(51);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdTrack($builder, $idTrack);
        self::addIdVessel($builder, $idVessel);
        self::addMmsi($builder, $mmsi);
        self::addImon($builder, $imon);
        self::addTs($builder, $ts);
        self::addShipName($builder, $shipName);
        self::addShipType($builder, $shipType);
        self::addEngagedIn($builder, $engagedIn);
        self::addSpecialCraft($builder, $specialCraft);
        self::addCargoType($builder, $cargoType);
        self::addCallSign($builder, $callSign);
        self::addVesselFlag($builder, $vesselFlag);
        self::addLat($builder, $lat);
        self::addLon($builder, $lon);
        self::addPosHiAccuracy($builder, $posHiAccuracy);
        self::addPosHiLatency($builder, $posHiLatency);
        self::addSpeed($builder, $speed);
        self::addTrueHeading($builder, $trueHeading);
        self::addCourse($builder, $course);
        self::addRateOfTurn($builder, $rateOfTurn);
        self::addSpecialManeuver($builder, $specialManeuver);
        self::addNavStatus($builder, $navStatus);
        self::addPosDeviceType($builder, $posDeviceType);
        self::addAntennaRefDimensions($builder, $antennaRefDimensions);
        self::addLength($builder, $length);
        self::addWidth($builder, $width);
        self::addDraught($builder, $draught);
        self::addShipDescription($builder, $shipDescription);
        self::addDestination($builder, $destination);
        self::addDestinationETA($builder, $destinationETA);
        self::addCurrentPortGUID($builder, $currentPortGUID);
        self::addCurrentPortLOCODE($builder, $currentPortLOCODE);
        self::addLastPortGUID($builder, $lastPortGUID);
        self::addLastPortLOCODE($builder, $lastPortLOCODE);
        self::addNextPortGUID($builder, $nextPortGUID);
        self::addNextPortLOCODE($builder, $nextPortLOCODE);
        self::addEtaCalculated($builder, $etaCalculated);
        self::addEtaUpdated($builder, $etaUpdated);
        self::addDistanceToGo($builder, $distanceToGo);
        self::addDistanceTravelled($builder, $distanceTravelled);
        self::addAvgSpeed($builder, $avgSpeed);
        self::addMaxSpeed($builder, $maxSpeed);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addSourceDL($builder, $sourceDL);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdTrack(FlatBufferBuilder $builder, $idTrack)
    {
        $builder->addOffsetX(2, $idTrack, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdVessel(FlatBufferBuilder $builder, $idVessel)
    {
        $builder->addOffsetX(3, $idVessel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addMmsi(FlatBufferBuilder $builder, $mmsi)
    {
        $builder->addLongX(4, $mmsi, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addImon(FlatBufferBuilder $builder, $imon)
    {
        $builder->addLongX(5, $imon, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTs(FlatBufferBuilder $builder, $ts)
    {
        $builder->addOffsetX(6, $ts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addShipName(FlatBufferBuilder $builder, $shipName)
    {
        $builder->addOffsetX(7, $shipName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addShipType(FlatBufferBuilder $builder, $shipType)
    {
        $builder->addOffsetX(8, $shipType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEngagedIn(FlatBufferBuilder $builder, $engagedIn)
    {
        $builder->addOffsetX(9, $engagedIn, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSpecialCraft(FlatBufferBuilder $builder, $specialCraft)
    {
        $builder->addOffsetX(10, $specialCraft, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCargoType(FlatBufferBuilder $builder, $cargoType)
    {
        $builder->addOffsetX(11, $cargoType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCallSign(FlatBufferBuilder $builder, $callSign)
    {
        $builder->addOffsetX(12, $callSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVesselFlag(FlatBufferBuilder $builder, $vesselFlag)
    {
        $builder->addOffsetX(13, $vesselFlag, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLat(FlatBufferBuilder $builder, $lat)
    {
        $builder->addDoubleX(14, $lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLon(FlatBufferBuilder $builder, $lon)
    {
        $builder->addDoubleX(15, $lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addPosHiAccuracy(FlatBufferBuilder $builder, $posHiAccuracy)
    {
        $builder->addBoolX(16, $posHiAccuracy, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addPosHiLatency(FlatBufferBuilder $builder, $posHiLatency)
    {
        $builder->addBoolX(17, $posHiLatency, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSpeed(FlatBufferBuilder $builder, $speed)
    {
        $builder->addDoubleX(18, $speed, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTrueHeading(FlatBufferBuilder $builder, $trueHeading)
    {
        $builder->addDoubleX(19, $trueHeading, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCourse(FlatBufferBuilder $builder, $course)
    {
        $builder->addDoubleX(20, $course, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRateOfTurn(FlatBufferBuilder $builder, $rateOfTurn)
    {
        $builder->addDoubleX(21, $rateOfTurn, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addSpecialManeuver(FlatBufferBuilder $builder, $specialManeuver)
    {
        $builder->addBoolX(22, $specialManeuver, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNavStatus(FlatBufferBuilder $builder, $navStatus)
    {
        $builder->addOffsetX(23, $navStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPosDeviceType(FlatBufferBuilder $builder, $posDeviceType)
    {
        $builder->addOffsetX(24, $posDeviceType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAntennaRefDimensions(FlatBufferBuilder $builder, $antennaRefDimensions)
    {
        $builder->addOffsetX(25, $antennaRefDimensions, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAntennaRefDimensionsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAntennaRefDimensionsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLength(FlatBufferBuilder $builder, $length)
    {
        $builder->addDoubleX(26, $length, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWidth(FlatBufferBuilder $builder, $width)
    {
        $builder->addDoubleX(27, $width, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDraught(FlatBufferBuilder $builder, $draught)
    {
        $builder->addDoubleX(28, $draught, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addShipDescription(FlatBufferBuilder $builder, $shipDescription)
    {
        $builder->addOffsetX(29, $shipDescription, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDestination(FlatBufferBuilder $builder, $destination)
    {
        $builder->addOffsetX(30, $destination, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDestinationETA(FlatBufferBuilder $builder, $destinationETA)
    {
        $builder->addOffsetX(31, $destinationETA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCurrentPortGUID(FlatBufferBuilder $builder, $currentPortGUID)
    {
        $builder->addOffsetX(32, $currentPortGUID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCurrentPortLOCODE(FlatBufferBuilder $builder, $currentPortLOCODE)
    {
        $builder->addOffsetX(33, $currentPortLOCODE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastPortGUID(FlatBufferBuilder $builder, $lastPortGUID)
    {
        $builder->addOffsetX(34, $lastPortGUID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastPortLOCODE(FlatBufferBuilder $builder, $lastPortLOCODE)
    {
        $builder->addOffsetX(35, $lastPortLOCODE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNextPortGUID(FlatBufferBuilder $builder, $nextPortGUID)
    {
        $builder->addOffsetX(36, $nextPortGUID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNextPortLOCODE(FlatBufferBuilder $builder, $nextPortLOCODE)
    {
        $builder->addOffsetX(37, $nextPortLOCODE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEtaCalculated(FlatBufferBuilder $builder, $etaCalculated)
    {
        $builder->addOffsetX(38, $etaCalculated, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEtaUpdated(FlatBufferBuilder $builder, $etaUpdated)
    {
        $builder->addOffsetX(39, $etaUpdated, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDistanceToGo(FlatBufferBuilder $builder, $distanceToGo)
    {
        $builder->addDoubleX(40, $distanceToGo, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDistanceTravelled(FlatBufferBuilder $builder, $distanceTravelled)
    {
        $builder->addDoubleX(41, $distanceTravelled, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgSpeed(FlatBufferBuilder $builder, $avgSpeed)
    {
        $builder->addDoubleX(42, $avgSpeed, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxSpeed(FlatBufferBuilder $builder, $maxSpeed)
    {
        $builder->addDoubleX(43, $maxSpeed, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(44, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(45, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(46, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(47, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(48, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(49, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(50, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAIS_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAIS_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AISF");
    }
}
