<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection that specifies the naval flight operations for this ATO.
class IndividualAircraftTasking_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return IndividualAircraftTasking_Full
     */
    public static function getRootAsIndividualAircraftTasking_Full(ByteBuffer $bb)
    {
        $obj = new IndividualAircraftTasking_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function IndividualAircraftTasking_FullIdentifier()
    {
        return "INDI";
    }

    public static function IndividualAircraftTasking_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::IndividualAircraftTasking_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return IndividualAircraftTasking_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The number of aircraft participating in this mission.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumAcft()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The type and model number for the aircraft. The field may specify a value of an aircraft not yet assigned an aircraft code contained in the aircraft codes list.
    /// Example: /// Example: F35A
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getAcftType()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The call sign assigned to this mission aircraft.
    /// Example: /// Example: EAGLE47
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getCallSign()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The code that indicates the ordinance mix carried on this mission aircraft.
    /// Example: /// Example: 6A2W3
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getPriConfigCode()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The code for the secondary ordinance mix carried on this mission aircraft.
    /// Example: /// Example: 2S2WG
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getSecConfigCode()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Link 16 abbreviated call sign assigned to the ACA. This is normally the first and last letter and the last two numbers of the call sign.
    /// Example: /// Example: EE47
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getLink16CallSign()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The TACAN channel assigned to this mission aircraft.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTacanChan()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// An optional array of link 16 octal track numbers assigned as the primary JTIDS Unit (JU) address for the mission aircraft.
    /// Example: /// Example: 12345
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getJuAddress($j)
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getJuAddressLength()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The mode 1 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
    /// Example: /// Example: 111
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getIffSifMode1Code()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The mode 2 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
    /// Example: /// Example: 20147
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getIffSifMode2Code()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The mode 3 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
    /// Example: /// Example: 30147
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getIffSifMode3Code()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startIndividualAircraftTasking_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(11);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return IndividualAircraftTasking_Full
     */
    public static function createIndividualAircraftTasking_Full(FlatBufferBuilder $builder, $numAcft, $acftType, $callSign, $priConfigCode, $secConfigCode, $link16CallSign, $tacanChan, $juAddress, $iffSifMode1Code, $iffSifMode2Code, $iffSifMode3Code)
    {
        $builder->startObject(11);
        self::addNumAcft($builder, $numAcft);
        self::addAcftType($builder, $acftType);
        self::addCallSign($builder, $callSign);
        self::addPriConfigCode($builder, $priConfigCode);
        self::addSecConfigCode($builder, $secConfigCode);
        self::addLink16CallSign($builder, $link16CallSign);
        self::addTacanChan($builder, $tacanChan);
        self::addJuAddress($builder, $juAddress);
        self::addIffSifMode1Code($builder, $iffSifMode1Code);
        self::addIffSifMode2Code($builder, $iffSifMode2Code);
        self::addIffSifMode3Code($builder, $iffSifMode3Code);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumAcft(FlatBufferBuilder $builder, $numAcft)
    {
        $builder->addIntX(0, $numAcft, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAcftType(FlatBufferBuilder $builder, $acftType)
    {
        $builder->addOffsetX(1, $acftType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCallSign(FlatBufferBuilder $builder, $callSign)
    {
        $builder->addOffsetX(2, $callSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPriConfigCode(FlatBufferBuilder $builder, $priConfigCode)
    {
        $builder->addOffsetX(3, $priConfigCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSecConfigCode(FlatBufferBuilder $builder, $secConfigCode)
    {
        $builder->addOffsetX(4, $secConfigCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLink16CallSign(FlatBufferBuilder $builder, $link16CallSign)
    {
        $builder->addOffsetX(5, $link16CallSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTacanChan(FlatBufferBuilder $builder, $tacanChan)
    {
        $builder->addIntX(6, $tacanChan, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addJuAddress(FlatBufferBuilder $builder, $juAddress)
    {
        $builder->addOffsetX(7, $juAddress, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createJuAddressVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startJuAddressVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIffSifMode1Code(FlatBufferBuilder $builder, $iffSifMode1Code)
    {
        $builder->addOffsetX(8, $iffSifMode1Code, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIffSifMode2Code(FlatBufferBuilder $builder, $iffSifMode2Code)
    {
        $builder->addOffsetX(9, $iffSifMode2Code, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIffSifMode3Code(FlatBufferBuilder $builder, $iffSifMode3Code)
    {
        $builder->addOffsetX(10, $iffSifMode3Code, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endIndividualAircraftTasking_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishIndividualAircraftTasking_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "INDI");
    }
}
