<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Information regarding the recovery vehicle.
class PersonnelRecoveryVehicle_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return PersonnelRecoveryVehicle_Full
     */
    public static function getRootAsPersonnelRecoveryVehicle_Full(ByteBuffer $bb)
    {
        $obj = new PersonnelRecoveryVehicle_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function PersonnelRecoveryVehicle_FullIdentifier()
    {
        return "PERS";
    }

    public static function PersonnelRecoveryVehicle_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::PersonnelRecoveryVehicle_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return PersonnelRecoveryVehicle_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The call sign of the recovery vehicle.
    /// Example: /// Example: FALCO
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getCallSign()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The particular type of recovery vehicle to be used.
    /// Example: /// Example: C17
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getType()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Primary contact frequency of the recovery vehicle.
    /// Example: /// Example: 34.55
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPrimaryFreq()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The number of objects or units moving as a group and represented as a single entity in this recovery vehicle message. If null, the strength is assumed to represent a single object.  Note that if this recovery derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getStrength()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startPersonnelRecoveryVehicle_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return PersonnelRecoveryVehicle_Full
     */
    public static function createPersonnelRecoveryVehicle_Full(FlatBufferBuilder $builder, $callSign, $type, $primaryFreq, $strength)
    {
        $builder->startObject(4);
        self::addCallSign($builder, $callSign);
        self::addType($builder, $type);
        self::addPrimaryFreq($builder, $primaryFreq);
        self::addStrength($builder, $strength);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCallSign(FlatBufferBuilder $builder, $callSign)
    {
        $builder->addOffsetX(0, $callSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(1, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPrimaryFreq(FlatBufferBuilder $builder, $primaryFreq)
    {
        $builder->addDoubleX(2, $primaryFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addStrength(FlatBufferBuilder $builder, $strength)
    {
        $builder->addIntX(3, $strength, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endPersonnelRecoveryVehicle_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishPersonnelRecoveryVehicle_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "PERS");
    }
}
