<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Tasking collection periods.
class ISRCollectionPeriods_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return ISRCollectionPeriods_Abridged
     */
    public static function getRootAsISRCollectionPeriods_Abridged(ByteBuffer $bb)
    {
        $obj = new ISRCollectionPeriods_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function ISRCollectionPeriods_AbridgedIdentifier()
    {
        return "ISRC";
    }

    public static function ISRCollectionPeriods_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ISRCollectionPeriods_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return ISRCollectionPeriods_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getPlanned()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Actual start and stop for the collection.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getActual($j)
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getActualLength()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startISRCollectionPeriods_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return ISRCollectionPeriods_Abridged
     */
    public static function createISRCollectionPeriods_Abridged(FlatBufferBuilder $builder, $planned, $actual)
    {
        $builder->startObject(2);
        self::addPlanned($builder, $planned);
        self::addActual($builder, $actual);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlanned(FlatBufferBuilder $builder, $planned)
    {
        $builder->addOffsetX(0, $planned, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addActual(FlatBufferBuilder $builder, $actual)
    {
        $builder->addOffsetX(1, $actual, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createActualVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startActualVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endISRCollectionPeriods_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishISRCollectionPeriods_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ISRC");
    }
}
