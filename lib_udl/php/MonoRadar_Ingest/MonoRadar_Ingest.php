<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// A monoradar record contains the raw, and in some cases, processed target reports from primary and secondary air surveillance radars.  All target positions for monoradar reports are recorded as range and azimuth from geographical North relative to the detecting radar site.  In the case of secondary surveillance radars, interrogation response codes are provided as well as quality and validation characteristics, when available in the particular record type used to generate the record.
class MonoRadar_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return MonoRadar_Ingest
     */
    public static function getRootAsMonoRadar_Ingest(ByteBuffer $bb)
    {
        $obj = new MonoRadar_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function MonoRadar_IngestIdentifier()
    {
        return "MONO";
    }

    public static function MonoRadar_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::MonoRadar_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return MonoRadar_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: MONORADAR-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Test target indicator.
    /// Example: /// Example: TTI
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getTti()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID of the radar site or station providing the data.
    /// Example: /// Example: REF-SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlat()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor WGS84 longitude, in degrees, at time of observation (ts).  -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlon()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor altitude, in kilometers, at time of observation (ts).
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenalt()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// System Area Code.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSac()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// System Identification Code.
    /// Example: /// Example: 40
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSic()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Aircraft identification from an aircraft equipped with a Mode S transponder.
    /// Example: /// Example: TGT-ID
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getTgtid()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.
    /// Example: /// Example: ADDR-ID
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getAddr()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).
    /// Example: /// Example: CAT48
    /// Constraints: Minimum length = 1, Maximum length = 16
    public function getMsgfmt()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR', etc..).
    /// Example: /// Example: BCN
    /// Constraints: Minimum length = 1, Maximum length = 16
    public function getMsgtyp()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating military message.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getAf()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating FAA/Civ message.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getFaa()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating whether Special Position Indicator (SPI) present in interrogation response.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getSpi()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating whether AIMS present.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getAims()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that target was detected using data from an MTI receiver.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getMti()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Number of beacon hits received on the target.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getBcnhits()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Target detection time, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getTs()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Message time, in ISO 8601 UTC format with microsecond precision. This is the time that the data message was released from the site.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getMsgts()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Measured slant range to target from the observing site, in km.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRng()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Target azimuth, measured from the observing site, in degrees from true North.  If Azimuth Change Pulse (acp) count is provided, az represents the computed angle.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAz()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Azimuth Change Pulse count at target detection.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAcp()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Measured height of the target, in km. (for 3D radars).
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAlt3d()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Mode-C altitude (uncorrected pressure altitude), in km.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMc()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Status of the mode-C validity bit.
    /// Example: /// Example: MCV
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getMcv()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator that the mode-C response was garbled.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getMcg()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Mode-1 interrogation response (mission code).
    /// Example: /// Example: MISSION_CODE
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getM1()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Status of the mode-1 validity bit.
    /// Example: /// Example: M1V
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getM1v()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator that the mode-1 response was garbled.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getM1g()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Mode-2 interrogation response (military identification code).
    /// Example: /// Example: MILITARY_ID_CODE
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getM2()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Status of the mode-2 validity bit.
    /// Example: /// Example: M2V
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getM2v()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Status of the mode-2 X-Pulse response validation.
    /// Example: /// Example: M2XV
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getM2xv()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator that the mode-2 response was garbled.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getM2g()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Mode-3/A interrogation response (aircraft identification).
    /// Example: /// Example: AIRCRAFT_ID
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getM3a()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Status of the mode-3/A validity bit.
    /// Example: /// Example: M3AV
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getM3av()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator that the mode-3/A response was garbled.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getM3ag()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Status of the mode-3 X-Pulse response validation.
    /// Example: /// Example: M3AXV
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getM3axv()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mode-4 interrogation response (Identification Friend/Foe).
    /// Example: /// Example: ID_FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getM4()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Status of the mode-4 validity bit.
    /// Example: /// Example: M4V
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getM4v()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mode-4 D1 & D2 response status.
    /// Example: /// Example: STATUS
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getM4d1d2()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mode-S Comm B message data.
    /// Example: /// Example: MSCOMMB
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getMscommb()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating military emergency.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getMilemrgcy()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// 7500 squawk present (hijack).
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getCode7500()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// 7600 squawk present (loss of comm).
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getCode7600()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// 7700 squawk present (general emergency).
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getCode7700()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Target ground speed, in meters/second.
    /// Example: /// Example: 30.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGrndspd()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Target heading, in degrees from true North at the target position.
    /// Example: /// Example: 30.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHdng()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Value representing a unique reference to a track record within a particular track file.  Included when the  radar station outputs tracks.
    /// Example: /// Example: 30
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTrknum()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Type of sensor(s) maintaining track.
    /// Example: /// Example: RAD
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getRad()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indication of Horizontal Maneuver detection.
    /// Example: /// Example: MAH
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getMah()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Climbing/Descending mode indicator.
    /// Example: /// Example: CDM
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getCdm()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of local 2d-cartesian [x, y] coordinates of target, in km.
    /// Example: /// Example: [1.2, 2.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCartpos($j)
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCartposLength()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Runlength of the primary surveillance radar track, in degrees.
    /// Example: /// Example: 44.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPsrrl()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Runlength of the secondary surveillance radar track, in degrees.
    /// Example: /// Example: 44.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSsrl()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Target range delta between PSR and SSR (reference PSR-SSR), in km.
    /// Example: /// Example: 44.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRngdelt()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.
    /// Example: /// Example: 44.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzdelt()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Warning/Error Conditions and Target Classification.
    /// Example: /// Example: ['WARNING', 'WARNING']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getWectc($j)
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getWectcLength()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Flag indicating report separated from different responses at same range.  Azimuth may have larger than normal error when present.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getMrgrpt()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// ARTS quality.
    /// Example: /// Example: QUALITY
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getArtsqual()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Track eligibility flag.
    /// Example: /// Example: ELIGIBILITY
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getTrkelig()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Target confidence.
    /// Example: /// Example: CONFIDENCE
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getTgtconf()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Target correlation flag.
    /// Example: /// Example: CORRELATION
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getTgtcorr()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Data time-in-storage, in seconds. This is the amount of time elapsed between target detection and message transmission.
    /// Example: /// Example: 0.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTis()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTags($j)
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTagsLength()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation.This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigSensorId()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \MonoRadar_Ingest_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startMonoRadar_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(73);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return MonoRadar_Ingest
     */
    public static function createMonoRadar_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $tti, $idSensor, $senlat, $senlon, $senalt, $sac, $sic, $tgtid, $addr, $msgfmt, $msgtyp, $af, $faa, $spi, $aims, $mti, $bcnhits, $ts, $msgts, $rng, $az, $acp, $alt3d, $mc, $mcv, $mcg, $m1, $m1v, $m1g, $m2, $m2v, $m2xv, $m2g, $m3a, $m3av, $m3ag, $m3axv, $m4, $m4v, $m4d1d2, $mscommb, $milemrgcy, $code7500, $code7600, $code7700, $grndspd, $hdng, $trknum, $rad, $mah, $cdm, $cartpos, $psrrl, $ssrl, $rngdelt, $azdelt, $wectc, $mrgrpt, $artsqual, $trkelig, $tgtconf, $tgtcorr, $tis, $tags, $origSensorId, $source, $origin, $dataMode, $createdAt, $createdBy, $origNetwork)
    {
        $builder->startObject(73);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addTti($builder, $tti);
        self::addIdSensor($builder, $idSensor);
        self::addSenlat($builder, $senlat);
        self::addSenlon($builder, $senlon);
        self::addSenalt($builder, $senalt);
        self::addSac($builder, $sac);
        self::addSic($builder, $sic);
        self::addTgtid($builder, $tgtid);
        self::addAddr($builder, $addr);
        self::addMsgfmt($builder, $msgfmt);
        self::addMsgtyp($builder, $msgtyp);
        self::addAf($builder, $af);
        self::addFaa($builder, $faa);
        self::addSpi($builder, $spi);
        self::addAims($builder, $aims);
        self::addMti($builder, $mti);
        self::addBcnhits($builder, $bcnhits);
        self::addTs($builder, $ts);
        self::addMsgts($builder, $msgts);
        self::addRng($builder, $rng);
        self::addAz($builder, $az);
        self::addAcp($builder, $acp);
        self::addAlt3d($builder, $alt3d);
        self::addMc($builder, $mc);
        self::addMcv($builder, $mcv);
        self::addMcg($builder, $mcg);
        self::addM1($builder, $m1);
        self::addM1v($builder, $m1v);
        self::addM1g($builder, $m1g);
        self::addM2($builder, $m2);
        self::addM2v($builder, $m2v);
        self::addM2xv($builder, $m2xv);
        self::addM2g($builder, $m2g);
        self::addM3a($builder, $m3a);
        self::addM3av($builder, $m3av);
        self::addM3ag($builder, $m3ag);
        self::addM3axv($builder, $m3axv);
        self::addM4($builder, $m4);
        self::addM4v($builder, $m4v);
        self::addM4d1d2($builder, $m4d1d2);
        self::addMscommb($builder, $mscommb);
        self::addMilemrgcy($builder, $milemrgcy);
        self::addCode7500($builder, $code7500);
        self::addCode7600($builder, $code7600);
        self::addCode7700($builder, $code7700);
        self::addGrndspd($builder, $grndspd);
        self::addHdng($builder, $hdng);
        self::addTrknum($builder, $trknum);
        self::addRad($builder, $rad);
        self::addMah($builder, $mah);
        self::addCdm($builder, $cdm);
        self::addCartpos($builder, $cartpos);
        self::addPsrrl($builder, $psrrl);
        self::addSsrl($builder, $ssrl);
        self::addRngdelt($builder, $rngdelt);
        self::addAzdelt($builder, $azdelt);
        self::addWectc($builder, $wectc);
        self::addMrgrpt($builder, $mrgrpt);
        self::addArtsqual($builder, $artsqual);
        self::addTrkelig($builder, $trkelig);
        self::addTgtconf($builder, $tgtconf);
        self::addTgtcorr($builder, $tgtcorr);
        self::addTis($builder, $tis);
        self::addTags($builder, $tags);
        self::addOrigSensorId($builder, $origSensorId);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTti(FlatBufferBuilder $builder, $tti)
    {
        $builder->addOffsetX(2, $tti, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(3, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlat(FlatBufferBuilder $builder, $senlat)
    {
        $builder->addDoubleX(4, $senlat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlon(FlatBufferBuilder $builder, $senlon)
    {
        $builder->addDoubleX(5, $senlon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenalt(FlatBufferBuilder $builder, $senalt)
    {
        $builder->addDoubleX(6, $senalt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSac(FlatBufferBuilder $builder, $sac)
    {
        $builder->addIntX(7, $sac, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSic(FlatBufferBuilder $builder, $sic)
    {
        $builder->addIntX(8, $sic, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTgtid(FlatBufferBuilder $builder, $tgtid)
    {
        $builder->addOffsetX(9, $tgtid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAddr(FlatBufferBuilder $builder, $addr)
    {
        $builder->addOffsetX(10, $addr, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsgfmt(FlatBufferBuilder $builder, $msgfmt)
    {
        $builder->addOffsetX(11, $msgfmt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsgtyp(FlatBufferBuilder $builder, $msgtyp)
    {
        $builder->addOffsetX(12, $msgtyp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addAf(FlatBufferBuilder $builder, $af)
    {
        $builder->addBoolX(13, $af, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addFaa(FlatBufferBuilder $builder, $faa)
    {
        $builder->addBoolX(14, $faa, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addSpi(FlatBufferBuilder $builder, $spi)
    {
        $builder->addBoolX(15, $spi, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addAims(FlatBufferBuilder $builder, $aims)
    {
        $builder->addBoolX(16, $aims, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addMti(FlatBufferBuilder $builder, $mti)
    {
        $builder->addBoolX(17, $mti, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addBcnhits(FlatBufferBuilder $builder, $bcnhits)
    {
        $builder->addIntX(18, $bcnhits, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTs(FlatBufferBuilder $builder, $ts)
    {
        $builder->addOffsetX(19, $ts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsgts(FlatBufferBuilder $builder, $msgts)
    {
        $builder->addOffsetX(20, $msgts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRng(FlatBufferBuilder $builder, $rng)
    {
        $builder->addDoubleX(21, $rng, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAz(FlatBufferBuilder $builder, $az)
    {
        $builder->addDoubleX(22, $az, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAcp(FlatBufferBuilder $builder, $acp)
    {
        $builder->addIntX(23, $acp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAlt3d(FlatBufferBuilder $builder, $alt3d)
    {
        $builder->addDoubleX(24, $alt3d, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMc(FlatBufferBuilder $builder, $mc)
    {
        $builder->addDoubleX(25, $mc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMcv(FlatBufferBuilder $builder, $mcv)
    {
        $builder->addOffsetX(26, $mcv, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addMcg(FlatBufferBuilder $builder, $mcg)
    {
        $builder->addBoolX(27, $mcg, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addM1(FlatBufferBuilder $builder, $m1)
    {
        $builder->addOffsetX(28, $m1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addM1v(FlatBufferBuilder $builder, $m1v)
    {
        $builder->addOffsetX(29, $m1v, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addM1g(FlatBufferBuilder $builder, $m1g)
    {
        $builder->addBoolX(30, $m1g, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addM2(FlatBufferBuilder $builder, $m2)
    {
        $builder->addOffsetX(31, $m2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addM2v(FlatBufferBuilder $builder, $m2v)
    {
        $builder->addOffsetX(32, $m2v, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addM2xv(FlatBufferBuilder $builder, $m2xv)
    {
        $builder->addOffsetX(33, $m2xv, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addM2g(FlatBufferBuilder $builder, $m2g)
    {
        $builder->addBoolX(34, $m2g, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addM3a(FlatBufferBuilder $builder, $m3a)
    {
        $builder->addOffsetX(35, $m3a, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addM3av(FlatBufferBuilder $builder, $m3av)
    {
        $builder->addOffsetX(36, $m3av, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addM3ag(FlatBufferBuilder $builder, $m3ag)
    {
        $builder->addBoolX(37, $m3ag, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addM3axv(FlatBufferBuilder $builder, $m3axv)
    {
        $builder->addOffsetX(38, $m3axv, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addM4(FlatBufferBuilder $builder, $m4)
    {
        $builder->addOffsetX(39, $m4, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addM4v(FlatBufferBuilder $builder, $m4v)
    {
        $builder->addOffsetX(40, $m4v, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addM4d1d2(FlatBufferBuilder $builder, $m4d1d2)
    {
        $builder->addOffsetX(41, $m4d1d2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMscommb(FlatBufferBuilder $builder, $mscommb)
    {
        $builder->addOffsetX(42, $mscommb, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addMilemrgcy(FlatBufferBuilder $builder, $milemrgcy)
    {
        $builder->addBoolX(43, $milemrgcy, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addCode7500(FlatBufferBuilder $builder, $code7500)
    {
        $builder->addBoolX(44, $code7500, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addCode7600(FlatBufferBuilder $builder, $code7600)
    {
        $builder->addBoolX(45, $code7600, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addCode7700(FlatBufferBuilder $builder, $code7700)
    {
        $builder->addBoolX(46, $code7700, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGrndspd(FlatBufferBuilder $builder, $grndspd)
    {
        $builder->addDoubleX(47, $grndspd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHdng(FlatBufferBuilder $builder, $hdng)
    {
        $builder->addDoubleX(48, $hdng, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTrknum(FlatBufferBuilder $builder, $trknum)
    {
        $builder->addIntX(49, $trknum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRad(FlatBufferBuilder $builder, $rad)
    {
        $builder->addOffsetX(50, $rad, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMah(FlatBufferBuilder $builder, $mah)
    {
        $builder->addOffsetX(51, $mah, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCdm(FlatBufferBuilder $builder, $cdm)
    {
        $builder->addOffsetX(52, $cdm, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCartpos(FlatBufferBuilder $builder, $cartpos)
    {
        $builder->addOffsetX(53, $cartpos, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCartposVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCartposVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPsrrl(FlatBufferBuilder $builder, $psrrl)
    {
        $builder->addDoubleX(54, $psrrl, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSsrl(FlatBufferBuilder $builder, $ssrl)
    {
        $builder->addDoubleX(55, $ssrl, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRngdelt(FlatBufferBuilder $builder, $rngdelt)
    {
        $builder->addDoubleX(56, $rngdelt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzdelt(FlatBufferBuilder $builder, $azdelt)
    {
        $builder->addDoubleX(57, $azdelt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addWectc(FlatBufferBuilder $builder, $wectc)
    {
        $builder->addOffsetX(58, $wectc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createWectcVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startWectcVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addMrgrpt(FlatBufferBuilder $builder, $mrgrpt)
    {
        $builder->addBoolX(59, $mrgrpt, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArtsqual(FlatBufferBuilder $builder, $artsqual)
    {
        $builder->addOffsetX(60, $artsqual, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrkelig(FlatBufferBuilder $builder, $trkelig)
    {
        $builder->addOffsetX(61, $trkelig, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTgtconf(FlatBufferBuilder $builder, $tgtconf)
    {
        $builder->addOffsetX(62, $tgtconf, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTgtcorr(FlatBufferBuilder $builder, $tgtcorr)
    {
        $builder->addOffsetX(63, $tgtcorr, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTis(FlatBufferBuilder $builder, $tis)
    {
        $builder->addDoubleX(64, $tis, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTags(FlatBufferBuilder $builder, $tags)
    {
        $builder->addOffsetX(65, $tags, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTagsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTagsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSensorId(FlatBufferBuilder $builder, $origSensorId)
    {
        $builder->addOffsetX(66, $origSensorId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(67, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(68, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(69, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(70, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(71, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(72, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endMonoRadar_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishMonoRadar_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "MONO");
    }
}
