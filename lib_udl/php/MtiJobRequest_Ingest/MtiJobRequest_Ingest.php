<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
class MtiJobRequest_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return MtiJobRequest_Ingest
     */
    public static function getRootAsMtiJobRequest_Ingest(ByteBuffer $bb)
    {
        $obj = new MtiJobRequest_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function MtiJobRequest_IngestIdentifier()
    {
        return "MTIJ";
    }

    public static function MtiJobRequest_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::MtiJobRequest_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return MtiJobRequest_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The requestor of the sensor service.
    /// Example: /// Example: REQUESTER
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getR1()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier for the tasking message sent by the requesting station.
    /// Example: /// Example: IDENTIFIER
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getR2()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The priority of the request relative to other requests originated by the requesting station.
    /// Example: /// Example: 15
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getR3()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// North-South position of the first corner (Point A) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getR4()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// East-West position of the first corner (Point A) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getR5()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// North-South position of the second corner (Point B) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getR6()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// East-West position of the second corner (Point B) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getR7()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// North-South position of the third corner (Point C) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getR8()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// East-West position of the third corner (Point C) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getR9()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// North-South position of the fourth corner (Point D) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getR10()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// East-West position of the fourth corner (Point D) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getR11()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Identifies the radar mode requested by the requestor.
    /// Example: /// Example: MODE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getR12()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies the radar range resolution requested by the requestor, expressed in centimeters.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getR13()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Specifies the radar cross-range resolution requested by the requestor, expressed in decimeters.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getR14()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Specifies the Earliest Start Time for which the service is requested.  Composite of fields R15-R20.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getJobReqEst()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies the maximum time from the requested start time after which the request is to be abandoned, expressed in seconds.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getR21()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Specifies the time duration for the radar job, measured from the actual start of the job, expressed in seconds.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getR22()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Specifies the revisit interval for the radar job, expressed in deciseconds.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getR23()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// the type of sensor or the platform.
    /// Example: /// Example: TYPE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getR24()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The particular variant of the sensor type.
    /// Example: /// Example: VARIANT
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getR25()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag field indicating that it is an initial request (flag = 0) or the desire of the requestor to cancel (flag = 1) the requested job.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getR26()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startMtiJobRequest_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(21);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return MtiJobRequest_Ingest
     */
    public static function createMtiJobRequest_Ingest(FlatBufferBuilder $builder, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $jobReqEst, $r21, $r22, $r23, $r24, $r25, $r26)
    {
        $builder->startObject(21);
        self::addR1($builder, $r1);
        self::addR2($builder, $r2);
        self::addR3($builder, $r3);
        self::addR4($builder, $r4);
        self::addR5($builder, $r5);
        self::addR6($builder, $r6);
        self::addR7($builder, $r7);
        self::addR8($builder, $r8);
        self::addR9($builder, $r9);
        self::addR10($builder, $r10);
        self::addR11($builder, $r11);
        self::addR12($builder, $r12);
        self::addR13($builder, $r13);
        self::addR14($builder, $r14);
        self::addJobReqEst($builder, $jobReqEst);
        self::addR21($builder, $r21);
        self::addR22($builder, $r22);
        self::addR23($builder, $r23);
        self::addR24($builder, $r24);
        self::addR25($builder, $r25);
        self::addR26($builder, $r26);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addR1(FlatBufferBuilder $builder, $r1)
    {
        $builder->addOffsetX(0, $r1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addR2(FlatBufferBuilder $builder, $r2)
    {
        $builder->addOffsetX(1, $r2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addR3(FlatBufferBuilder $builder, $r3)
    {
        $builder->addIntX(2, $r3, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addR4(FlatBufferBuilder $builder, $r4)
    {
        $builder->addDoubleX(3, $r4, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addR5(FlatBufferBuilder $builder, $r5)
    {
        $builder->addDoubleX(4, $r5, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addR6(FlatBufferBuilder $builder, $r6)
    {
        $builder->addDoubleX(5, $r6, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addR7(FlatBufferBuilder $builder, $r7)
    {
        $builder->addDoubleX(6, $r7, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addR8(FlatBufferBuilder $builder, $r8)
    {
        $builder->addDoubleX(7, $r8, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addR9(FlatBufferBuilder $builder, $r9)
    {
        $builder->addDoubleX(8, $r9, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addR10(FlatBufferBuilder $builder, $r10)
    {
        $builder->addDoubleX(9, $r10, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addR11(FlatBufferBuilder $builder, $r11)
    {
        $builder->addDoubleX(10, $r11, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addR12(FlatBufferBuilder $builder, $r12)
    {
        $builder->addOffsetX(11, $r12, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addR13(FlatBufferBuilder $builder, $r13)
    {
        $builder->addIntX(12, $r13, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addR14(FlatBufferBuilder $builder, $r14)
    {
        $builder->addIntX(13, $r14, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJobReqEst(FlatBufferBuilder $builder, $jobReqEst)
    {
        $builder->addOffsetX(14, $jobReqEst, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addR21(FlatBufferBuilder $builder, $r21)
    {
        $builder->addIntX(15, $r21, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addR22(FlatBufferBuilder $builder, $r22)
    {
        $builder->addIntX(16, $r22, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addR23(FlatBufferBuilder $builder, $r23)
    {
        $builder->addIntX(17, $r23, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addR24(FlatBufferBuilder $builder, $r24)
    {
        $builder->addOffsetX(18, $r24, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addR25(FlatBufferBuilder $builder, $r25)
    {
        $builder->addOffsetX(19, $r25, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addR26(FlatBufferBuilder $builder, $r26)
    {
        $builder->addBoolX(20, $r26, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endMtiJobRequest_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishMtiJobRequest_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "MTIJ");
    }
}
