<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Status information for OnorbitThruster objects.
class OnorbitThrusterStatus_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return OnorbitThrusterStatus_Full
     */
    public static function getRootAsOnorbitThrusterStatus_Full(ByteBuffer $bb)
    {
        $obj = new OnorbitThrusterStatus_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function OnorbitThrusterStatus_FullIdentifier()
    {
        return "ONOR";
    }

    public static function OnorbitThrusterStatus_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::OnorbitThrusterStatus_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return OnorbitThrusterStatus_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: af103c-1f917dc-002c1bd
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
    /// Example: /// Example: ff7dc909-e8b4-4a54-8529-1963d4e9b353
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdOnorbitThruster()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of this thruster.
    /// Example: /// Example: REA1
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getName()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.
    /// Example: /// Example: 2024-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getStatusTime()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Minimum available propellant mass for this thruster's type, in kilograms.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPropMassMin()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average available propellant mass for this thruster's type, in kilograms.
    /// Example: /// Example: 907.6
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPropMassAvg()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Median available propellant mass for this thruster's type, in kilograms.
    /// Example: /// Example: 200.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPropMassMedian()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum available propellant mass for this thruster's type, in kilograms.
    /// Example: /// Example: 2333.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPropMassMax()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total fuel mass available for this thruster's type, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFuelMass()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// 1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFuelMassUnc()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total delta-velocity available for this thruster's type, in meters per second.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTotalDeltaV()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Minimum available delta-velocity for this thruster, in meters per second.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMinDeltaV()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Estimated available delta-velocity for this thruster, in meters per second.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEstDeltaV()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum available delta-velocity for this thruster, in meters per second.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxDeltaV()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum available thrust for this thruster, in newtons.
    /// Example: /// Example: 22.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getThrustMax()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Specific impulse for this thruster, in seconds.
    /// Example: /// Example: 300.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getIsp()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Flag indicating if this thruster is operational.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getOperational()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSource()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \OnorbitThrusterStatus_Full_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startOnorbitThrusterStatus_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(24);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return OnorbitThrusterStatus_Full
     */
    public static function createOnorbitThrusterStatus_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $idOnorbitThruster, $name, $statusTime, $propMassMin, $propMassAvg, $propMassMedian, $propMassMax, $fuelMass, $fuelMassUnc, $totalDeltaV, $minDeltaV, $estDeltaV, $maxDeltaV, $thrustMax, $isp, $operational, $createdAt, $createdBy, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(24);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdOnorbitThruster($builder, $idOnorbitThruster);
        self::addName($builder, $name);
        self::addStatusTime($builder, $statusTime);
        self::addPropMassMin($builder, $propMassMin);
        self::addPropMassAvg($builder, $propMassAvg);
        self::addPropMassMedian($builder, $propMassMedian);
        self::addPropMassMax($builder, $propMassMax);
        self::addFuelMass($builder, $fuelMass);
        self::addFuelMassUnc($builder, $fuelMassUnc);
        self::addTotalDeltaV($builder, $totalDeltaV);
        self::addMinDeltaV($builder, $minDeltaV);
        self::addEstDeltaV($builder, $estDeltaV);
        self::addMaxDeltaV($builder, $maxDeltaV);
        self::addThrustMax($builder, $thrustMax);
        self::addIsp($builder, $isp);
        self::addOperational($builder, $operational);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnorbitThruster(FlatBufferBuilder $builder, $idOnorbitThruster)
    {
        $builder->addOffsetX(2, $idOnorbitThruster, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(3, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStatusTime(FlatBufferBuilder $builder, $statusTime)
    {
        $builder->addOffsetX(4, $statusTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPropMassMin(FlatBufferBuilder $builder, $propMassMin)
    {
        $builder->addDoubleX(5, $propMassMin, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPropMassAvg(FlatBufferBuilder $builder, $propMassAvg)
    {
        $builder->addDoubleX(6, $propMassAvg, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPropMassMedian(FlatBufferBuilder $builder, $propMassMedian)
    {
        $builder->addDoubleX(7, $propMassMedian, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPropMassMax(FlatBufferBuilder $builder, $propMassMax)
    {
        $builder->addDoubleX(8, $propMassMax, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFuelMass(FlatBufferBuilder $builder, $fuelMass)
    {
        $builder->addDoubleX(9, $fuelMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFuelMassUnc(FlatBufferBuilder $builder, $fuelMassUnc)
    {
        $builder->addDoubleX(10, $fuelMassUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTotalDeltaV(FlatBufferBuilder $builder, $totalDeltaV)
    {
        $builder->addDoubleX(11, $totalDeltaV, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMinDeltaV(FlatBufferBuilder $builder, $minDeltaV)
    {
        $builder->addDoubleX(12, $minDeltaV, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEstDeltaV(FlatBufferBuilder $builder, $estDeltaV)
    {
        $builder->addDoubleX(13, $estDeltaV, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxDeltaV(FlatBufferBuilder $builder, $maxDeltaV)
    {
        $builder->addDoubleX(14, $maxDeltaV, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addThrustMax(FlatBufferBuilder $builder, $thrustMax)
    {
        $builder->addDoubleX(15, $thrustMax, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addIsp(FlatBufferBuilder $builder, $isp)
    {
        $builder->addDoubleX(16, $isp, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addOperational(FlatBufferBuilder $builder, $operational)
    {
        $builder->addBoolX(17, $operational, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(18, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(19, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(20, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(21, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(22, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(23, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endOnorbitThrusterStatus_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishOnorbitThrusterStatus_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ONOR");
    }
}
