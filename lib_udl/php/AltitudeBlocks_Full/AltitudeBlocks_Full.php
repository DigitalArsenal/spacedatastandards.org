<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Minimum and maximum altitude bounds for the track.
class AltitudeBlocks_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AltitudeBlocks_Full
     */
    public static function getRootAsAltitudeBlocks_Full(ByteBuffer $bb)
    {
        $obj = new AltitudeBlocks_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AltitudeBlocks_FullIdentifier()
    {
        return "ALTI";
    }

    public static function AltitudeBlocks_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AltitudeBlocks_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AltitudeBlocks_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Sequencing field for the altitude block.
    /// Example: /// Example: A1
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getAltitudeSequenceId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Lowest altitude of the track route altitude block above mean sea level in feet.
    /// Example: /// Example: 27000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLowerAltitude()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Highest altitude of the track route altitude block above mean sea level in feet.
    /// Example: /// Example: 27200.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getUpperAltitude()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAltitudeBlocks_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(3);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AltitudeBlocks_Full
     */
    public static function createAltitudeBlocks_Full(FlatBufferBuilder $builder, $altitudeSequenceId, $lowerAltitude, $upperAltitude)
    {
        $builder->startObject(3);
        self::addAltitudeSequenceId($builder, $altitudeSequenceId);
        self::addLowerAltitude($builder, $lowerAltitude);
        self::addUpperAltitude($builder, $upperAltitude);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltitudeSequenceId(FlatBufferBuilder $builder, $altitudeSequenceId)
    {
        $builder->addOffsetX(0, $altitudeSequenceId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLowerAltitude(FlatBufferBuilder $builder, $lowerAltitude)
    {
        $builder->addDoubleX(1, $lowerAltitude, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUpperAltitude(FlatBufferBuilder $builder, $upperAltitude)
    {
        $builder->addDoubleX(2, $upperAltitude, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAltitudeBlocks_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAltitudeBlocks_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ALTI");
    }
}
