<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
class DataLinkSpecTracks_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return DataLinkSpecTracks_Abridged
     */
    public static function getRootAsDataLinkSpecTracks_Abridged(ByteBuffer $bb)
    {
        $obj = new DataLinkSpecTracks_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function DataLinkSpecTracks_AbridgedIdentifier()
    {
        return "DATA";
    }

    public static function DataLinkSpecTracks_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::DataLinkSpecTracks_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return DataLinkSpecTracks_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The special track number used on the data link entered as an octal reference number. Used to identify a particular type of platform (e.g. MPA, KRESTA) or platform name (e.g. TROMP, MOUNT WHITNEY) which is not included in assigned track blocks.
    /// Example: /// Example: 12345
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getSpecTrackNum()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of the special track number.
    /// Example: /// Example: SAM SITE CHARLIE
    /// Constraints: Minimum length = 0, Maximum length = 40
    public function getSpecTrackNumDesc()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startDataLinkSpecTracks_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return DataLinkSpecTracks_Abridged
     */
    public static function createDataLinkSpecTracks_Abridged(FlatBufferBuilder $builder, $specTrackNum, $specTrackNumDesc)
    {
        $builder->startObject(2);
        self::addSpecTrackNum($builder, $specTrackNum);
        self::addSpecTrackNumDesc($builder, $specTrackNumDesc);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSpecTrackNum(FlatBufferBuilder $builder, $specTrackNum)
    {
        $builder->addOffsetX(0, $specTrackNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSpecTrackNumDesc(FlatBufferBuilder $builder, $specTrackNumDesc)
    {
        $builder->addOffsetX(1, $specTrackNumDesc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endDataLinkSpecTracks_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishDataLinkSpecTracks_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "DATA");
    }
}
