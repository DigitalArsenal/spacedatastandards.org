<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection of Requirements associated with this Air Transport Mission.
class AircraftMissionRequirements_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AircraftMissionRequirements_Full
     */
    public static function getRootAsAircraftMissionRequirements_Full(ByteBuffer $bb)
    {
        $obj = new AircraftMissionRequirements_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AircraftMissionRequirements_FullIdentifier()
    {
        return "AIRC";
    }

    public static function AircraftMissionRequirements_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AircraftMissionRequirements_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AircraftMissionRequirements_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Global Decision Support System (GDSS) mission requirement identifier.
    /// Example: /// Example: 23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getGdssReqId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the onload itinerary location.
    /// Example: /// Example: 200
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getOnloadId()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Onload location code.
    /// Example: /// Example: KCHS
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getOnloadLOCode()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the offload itinerary location.
    /// Example: /// Example: 300
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getOffloadId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Offload location code.
    /// Example: /// Example: KHOP
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getOffloadLOCode()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unit line number.
    /// Example: /// Example: T01ME01
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getUln()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Transportation requirement number.
    /// Example: /// Example: T01ME01
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getTransReqNum()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Project name.
    /// Example: /// Example: CENTINTRA21
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getProjName()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identification number of the Operation Plan (OPLAN) associated with this mission.
    /// Example: /// Example: 5027
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOplan()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of passengers associated with the mission.
    /// Example: /// Example: 44
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumPax()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of litter patients tasked for the mission.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumLitter()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of ambulatory patients tasked for the mission.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumAmbulatory()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of attendants tasked for the mission.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumAttendant()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Total weight of the bulk cargo, in kilograms.
    /// Example: /// Example: 1.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBulkWeight()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total weight of the oversized cargo, in kilograms.
    /// Example: /// Example: 1.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOversizeWeight()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total weight of the outsize cargo, in kilograms.
    /// Example: /// Example: 1.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOutsizeWeight()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Earliest available date the cargo can be picked up.
    /// Example: /// Example: 2024-01-01T16:00:00Z
    /// Constraints: No constraints specified.
    public function getEad()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Latest available date the cargo may be delivered.
    /// Example: /// Example: 2024-01-01T16:00:00Z
    /// Constraints: No constraints specified.
    public function getLad()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAircraftMissionRequirements_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(18);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AircraftMissionRequirements_Full
     */
    public static function createAircraftMissionRequirements_Full(FlatBufferBuilder $builder, $gdssReqId, $onloadId, $onloadLOCode, $offloadId, $offloadLOCode, $uln, $transReqNum, $projName, $oplan, $numPax, $numLitter, $numAmbulatory, $numAttendant, $bulkWeight, $oversizeWeight, $outsizeWeight, $ead, $lad)
    {
        $builder->startObject(18);
        self::addGdssReqId($builder, $gdssReqId);
        self::addOnloadId($builder, $onloadId);
        self::addOnloadLOCode($builder, $onloadLOCode);
        self::addOffloadId($builder, $offloadId);
        self::addOffloadLOCode($builder, $offloadLOCode);
        self::addUln($builder, $uln);
        self::addTransReqNum($builder, $transReqNum);
        self::addProjName($builder, $projName);
        self::addOplan($builder, $oplan);
        self::addNumPax($builder, $numPax);
        self::addNumLitter($builder, $numLitter);
        self::addNumAmbulatory($builder, $numAmbulatory);
        self::addNumAttendant($builder, $numAttendant);
        self::addBulkWeight($builder, $bulkWeight);
        self::addOversizeWeight($builder, $oversizeWeight);
        self::addOutsizeWeight($builder, $outsizeWeight);
        self::addEad($builder, $ead);
        self::addLad($builder, $lad);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGdssReqId(FlatBufferBuilder $builder, $gdssReqId)
    {
        $builder->addOffsetX(0, $gdssReqId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addOnloadId(FlatBufferBuilder $builder, $onloadId)
    {
        $builder->addIntX(1, $onloadId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOnloadLOCode(FlatBufferBuilder $builder, $onloadLOCode)
    {
        $builder->addOffsetX(2, $onloadLOCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addOffloadId(FlatBufferBuilder $builder, $offloadId)
    {
        $builder->addIntX(3, $offloadId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOffloadLOCode(FlatBufferBuilder $builder, $offloadLOCode)
    {
        $builder->addOffsetX(4, $offloadLOCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUln(FlatBufferBuilder $builder, $uln)
    {
        $builder->addOffsetX(5, $uln, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransReqNum(FlatBufferBuilder $builder, $transReqNum)
    {
        $builder->addOffsetX(6, $transReqNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addProjName(FlatBufferBuilder $builder, $projName)
    {
        $builder->addOffsetX(7, $projName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOplan(FlatBufferBuilder $builder, $oplan)
    {
        $builder->addOffsetX(8, $oplan, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumPax(FlatBufferBuilder $builder, $numPax)
    {
        $builder->addIntX(9, $numPax, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumLitter(FlatBufferBuilder $builder, $numLitter)
    {
        $builder->addIntX(10, $numLitter, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumAmbulatory(FlatBufferBuilder $builder, $numAmbulatory)
    {
        $builder->addIntX(11, $numAmbulatory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumAttendant(FlatBufferBuilder $builder, $numAttendant)
    {
        $builder->addIntX(12, $numAttendant, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBulkWeight(FlatBufferBuilder $builder, $bulkWeight)
    {
        $builder->addDoubleX(13, $bulkWeight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOversizeWeight(FlatBufferBuilder $builder, $oversizeWeight)
    {
        $builder->addDoubleX(14, $oversizeWeight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOutsizeWeight(FlatBufferBuilder $builder, $outsizeWeight)
    {
        $builder->addDoubleX(15, $outsizeWeight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEad(FlatBufferBuilder $builder, $ead)
    {
        $builder->addOffsetX(16, $ead, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLad(FlatBufferBuilder $builder, $lad)
    {
        $builder->addOffsetX(17, $lad, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAircraftMissionRequirements_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAircraftMissionRequirements_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRC");
    }
}
