<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Details for a particular RF Emitter, collected by a particular source. An RF Emitter may have multiple details records from various sources.
class RFEmitterDetails_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RFEmitterDetails_Abridged
     */
    public static function getRootAsRFEmitterDetails_Abridged(ByteBuffer $bb)
    {
        $obj = new RFEmitterDetails_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function RFEmitterDetails_AbridgedIdentifier()
    {
        return "RFEM";
    }

    public static function RFEmitterDetails_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::RFEmitterDetails_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RFEmitterDetails_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: RFEMITTERDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the parent RF Emitter.
    /// Example: /// Example: RFEMITTER-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdRFEmitter()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Designator of this RF Emitter.
    /// Example: /// Example: DESIGNATOR
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getDesignator()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional alternate name or alias for this RF Emitter.
    /// Example: /// Example: ALTERNATE_NAME
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getAltName()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Family of this RF Emitter type.
    /// Example: /// Example: FAMILY
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getFamily()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the production facility for this RF Emitter.
    /// Example: /// Example: PRODUCTION_FACILITY
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getProductionFacilityName()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Alternate facility name for this RF Emitter.
    /// Example: /// Example: ALTERNATE_FACILITY_NAME
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getAlternateFacilityName()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the organization which manufactures this RF Emitter.
    /// Example: /// Example: MANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getManufacturerOrgId()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the location of the production facility for this RF Emitter.
    /// Example: /// Example: PRODUCTIONFACILITYLOCATION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getProductionFacilityLocationId()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. Start sensitivity range, in dBm.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSystemSensitivityStart()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. End sensitivity range, in dBm.
    /// Example: /// Example: 150.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSystemSensitivityEnd()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Type or name of receiver.
    /// Example: /// Example: RECEIVER_TYPE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getReceiverType()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Receiver sensitivity in dBm.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getReceiverSensitivity()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Receiver bandwidth in Mhz.
    /// Example: /// Example: 15.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getReceiverBandwidth()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Transmitter frequency in Mhz.
    /// Example: /// Example: 105.9
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTransmitterFrequency()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Transmitter bandwidth in Mhz.
    /// Example: /// Example: 0.125
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTransmitterBandwidth()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Transmit power in Watts.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTransmitPower()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Barrage noise bandwidth in Mhz.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBarrageNoiseBandwidth()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Doppler noise value in Mhz.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDopplerNoise()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Digital Form Radio Memory instantaneous bandwidth in Mhz.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDrfmInstantaneousBandwidth()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Number of channels.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumChannels()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of bits.
    /// Example: /// Example: 256
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumBits()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAntennaSize($j)
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAntennaSizeLength()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// For parabolic/dish antennas, the diameter of the antenna in meters.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAntennaDiameter()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Notes on the RF Emitter.
    /// Example: /// Example: NOTES
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    public function getNotes()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Secondary notes on the RF Emitter.
    /// Example: /// Example: MORE_NOTES
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    public function getSecondaryNotes()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Detailed description of the RF Emitter.
    /// Example: /// Example: DESCRIPTION
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    public function getDescription()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of URLs containing additional information on this RF Emitter.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getUrls($j)
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getUrlsLength()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \RFEmitterDetails_Abridged_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRFEmitterDetails_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(35);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RFEmitterDetails_Abridged
     */
    public static function createRFEmitterDetails_Abridged(FlatBufferBuilder $builder, $id, $idRFEmitter, $classificationMarking, $designator, $altName, $family, $productionFacilityName, $alternateFacilityName, $manufacturerOrgId, $productionFacilityLocationId, $systemSensitivityStart, $systemSensitivityEnd, $receiverType, $receiverSensitivity, $receiverBandwidth, $transmitterFrequency, $transmitterBandwidth, $transmitPower, $barrageNoiseBandwidth, $dopplerNoise, $drfmInstantaneousBandwidth, $numChannels, $numBits, $antennaSize, $antennaDiameter, $notes, $secondaryNotes, $description, $urls, $source, $origin, $origNetwork, $dataMode, $createdAt, $createdBy)
    {
        $builder->startObject(35);
        self::addId($builder, $id);
        self::addIdRFEmitter($builder, $idRFEmitter);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addDesignator($builder, $designator);
        self::addAltName($builder, $altName);
        self::addFamily($builder, $family);
        self::addProductionFacilityName($builder, $productionFacilityName);
        self::addAlternateFacilityName($builder, $alternateFacilityName);
        self::addManufacturerOrgId($builder, $manufacturerOrgId);
        self::addProductionFacilityLocationId($builder, $productionFacilityLocationId);
        self::addSystemSensitivityStart($builder, $systemSensitivityStart);
        self::addSystemSensitivityEnd($builder, $systemSensitivityEnd);
        self::addReceiverType($builder, $receiverType);
        self::addReceiverSensitivity($builder, $receiverSensitivity);
        self::addReceiverBandwidth($builder, $receiverBandwidth);
        self::addTransmitterFrequency($builder, $transmitterFrequency);
        self::addTransmitterBandwidth($builder, $transmitterBandwidth);
        self::addTransmitPower($builder, $transmitPower);
        self::addBarrageNoiseBandwidth($builder, $barrageNoiseBandwidth);
        self::addDopplerNoise($builder, $dopplerNoise);
        self::addDrfmInstantaneousBandwidth($builder, $drfmInstantaneousBandwidth);
        self::addNumChannels($builder, $numChannels);
        self::addNumBits($builder, $numBits);
        self::addAntennaSize($builder, $antennaSize);
        self::addAntennaDiameter($builder, $antennaDiameter);
        self::addNotes($builder, $notes);
        self::addSecondaryNotes($builder, $secondaryNotes);
        self::addDescription($builder, $description);
        self::addUrls($builder, $urls);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdRFEmitter(FlatBufferBuilder $builder, $idRFEmitter)
    {
        $builder->addOffsetX(1, $idRFEmitter, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(2, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDesignator(FlatBufferBuilder $builder, $designator)
    {
        $builder->addOffsetX(3, $designator, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltName(FlatBufferBuilder $builder, $altName)
    {
        $builder->addOffsetX(4, $altName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFamily(FlatBufferBuilder $builder, $family)
    {
        $builder->addOffsetX(5, $family, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addProductionFacilityName(FlatBufferBuilder $builder, $productionFacilityName)
    {
        $builder->addOffsetX(6, $productionFacilityName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAlternateFacilityName(FlatBufferBuilder $builder, $alternateFacilityName)
    {
        $builder->addOffsetX(7, $alternateFacilityName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addManufacturerOrgId(FlatBufferBuilder $builder, $manufacturerOrgId)
    {
        $builder->addOffsetX(8, $manufacturerOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addProductionFacilityLocationId(FlatBufferBuilder $builder, $productionFacilityLocationId)
    {
        $builder->addOffsetX(9, $productionFacilityLocationId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSystemSensitivityStart(FlatBufferBuilder $builder, $systemSensitivityStart)
    {
        $builder->addDoubleX(10, $systemSensitivityStart, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSystemSensitivityEnd(FlatBufferBuilder $builder, $systemSensitivityEnd)
    {
        $builder->addDoubleX(11, $systemSensitivityEnd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReceiverType(FlatBufferBuilder $builder, $receiverType)
    {
        $builder->addOffsetX(12, $receiverType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addReceiverSensitivity(FlatBufferBuilder $builder, $receiverSensitivity)
    {
        $builder->addDoubleX(13, $receiverSensitivity, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addReceiverBandwidth(FlatBufferBuilder $builder, $receiverBandwidth)
    {
        $builder->addDoubleX(14, $receiverBandwidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTransmitterFrequency(FlatBufferBuilder $builder, $transmitterFrequency)
    {
        $builder->addDoubleX(15, $transmitterFrequency, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTransmitterBandwidth(FlatBufferBuilder $builder, $transmitterBandwidth)
    {
        $builder->addDoubleX(16, $transmitterBandwidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTransmitPower(FlatBufferBuilder $builder, $transmitPower)
    {
        $builder->addDoubleX(17, $transmitPower, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBarrageNoiseBandwidth(FlatBufferBuilder $builder, $barrageNoiseBandwidth)
    {
        $builder->addDoubleX(18, $barrageNoiseBandwidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDopplerNoise(FlatBufferBuilder $builder, $dopplerNoise)
    {
        $builder->addDoubleX(19, $dopplerNoise, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDrfmInstantaneousBandwidth(FlatBufferBuilder $builder, $drfmInstantaneousBandwidth)
    {
        $builder->addDoubleX(20, $drfmInstantaneousBandwidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumChannels(FlatBufferBuilder $builder, $numChannels)
    {
        $builder->addIntX(21, $numChannels, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumBits(FlatBufferBuilder $builder, $numBits)
    {
        $builder->addIntX(22, $numBits, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAntennaSize(FlatBufferBuilder $builder, $antennaSize)
    {
        $builder->addOffsetX(23, $antennaSize, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAntennaSizeVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAntennaSizeVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAntennaDiameter(FlatBufferBuilder $builder, $antennaDiameter)
    {
        $builder->addDoubleX(24, $antennaDiameter, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNotes(FlatBufferBuilder $builder, $notes)
    {
        $builder->addOffsetX(25, $notes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSecondaryNotes(FlatBufferBuilder $builder, $secondaryNotes)
    {
        $builder->addOffsetX(26, $secondaryNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(27, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addUrls(FlatBufferBuilder $builder, $urls)
    {
        $builder->addOffsetX(28, $urls, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createUrlsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startUrlsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(29, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(30, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(31, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(32, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(33, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(34, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRFEmitterDetails_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishRFEmitterDetails_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "RFEM");
    }
}
