<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of observation data for electro-optical based sensor phenomenologies.
class Sensor_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Sensor_Full
     */
    public static function getRootAsSensor_Full(ByteBuffer $bb)
    {
        $obj = new Sensor_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Sensor_FullIdentifier()
    {
        return "SENS";
    }

    public static function Sensor_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Sensor_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Sensor_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique name of this sensor.
    /// Example: /// Example: SENSOR_NAME
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getSensorName()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
    /// Example: /// Example: 1234
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSensorNumber()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional short name for the sensor.
    /// Example: /// Example: SNR-1
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getShortName()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional dissemination control required for accessing data (e.g observations) produced by this sensor. This is typically a proprietary data owner control for commercial sensors.
    /// Example: /// Example: observations
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getDataControl()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional US Air Force identifier for the sensor/ASR site, typically for air surveillance radar (ASR) sensors.
    /// Example: /// Example: AF-ID
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getAfId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The sensor type at the site. Optional field, intended primarily for ASRs.
    /// Example: /// Example: SENSOR_TYPE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getAsrType()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Sensor_Full_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional flag indicating if the sensor is active.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getActive()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Collection of Sensorcharacteristics which define characteristics and capabilities of a sensor.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSensorcharacteristics($j)
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSensorcharacteristicsLength()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Collection of SensorStats which contain statistics of a sensor.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSensorStats($j)
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSensorStatsLength()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSensorlimitsCollection($j)
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSensorlimitsCollectionLength()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getEntity()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the parent entity. idEntity is required for Put.
    /// Example: /// Example: ENTITY-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdEntity()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getSensorObservationType()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getSensorType()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSensor_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(24);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Sensor_Full
     */
    public static function createSensor_Full(FlatBufferBuilder $builder, $idSensor, $sensorName, $classificationMarking, $sensorNumber, $shortName, $dataControl, $afId, $asrType, $source, $origin, $origNetwork, $dataMode, $createdAt, $createdBy, $updatedAt, $updatedBy, $active, $sensorcharacteristics, $sensorStats, $sensorlimitsCollection, $entity, $idEntity, $sensorObservationType, $sensorType)
    {
        $builder->startObject(24);
        self::addIdSensor($builder, $idSensor);
        self::addSensorName($builder, $sensorName);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addSensorNumber($builder, $sensorNumber);
        self::addShortName($builder, $shortName);
        self::addDataControl($builder, $dataControl);
        self::addAfId($builder, $afId);
        self::addAsrType($builder, $asrType);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addActive($builder, $active);
        self::addSensorcharacteristics($builder, $sensorcharacteristics);
        self::addSensorStats($builder, $sensorStats);
        self::addSensorlimitsCollection($builder, $sensorlimitsCollection);
        self::addEntity($builder, $entity);
        self::addIdEntity($builder, $idEntity);
        self::addSensorObservationType($builder, $sensorObservationType);
        self::addSensorType($builder, $sensorType);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(0, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSensorName(FlatBufferBuilder $builder, $sensorName)
    {
        $builder->addOffsetX(1, $sensorName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(2, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSensorNumber(FlatBufferBuilder $builder, $sensorNumber)
    {
        $builder->addIntX(3, $sensorNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addShortName(FlatBufferBuilder $builder, $shortName)
    {
        $builder->addOffsetX(4, $shortName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDataControl(FlatBufferBuilder $builder, $dataControl)
    {
        $builder->addOffsetX(5, $dataControl, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAfId(FlatBufferBuilder $builder, $afId)
    {
        $builder->addOffsetX(6, $afId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAsrType(FlatBufferBuilder $builder, $asrType)
    {
        $builder->addOffsetX(7, $asrType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(8, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(9, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(10, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(11, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(12, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(13, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(14, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(15, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addActive(FlatBufferBuilder $builder, $active)
    {
        $builder->addBoolX(16, $active, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSensorcharacteristics(FlatBufferBuilder $builder, $sensorcharacteristics)
    {
        $builder->addOffsetX(17, $sensorcharacteristics, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSensorcharacteristicsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSensorcharacteristicsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSensorStats(FlatBufferBuilder $builder, $sensorStats)
    {
        $builder->addOffsetX(18, $sensorStats, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSensorStatsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSensorStatsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSensorlimitsCollection(FlatBufferBuilder $builder, $sensorlimitsCollection)
    {
        $builder->addOffsetX(19, $sensorlimitsCollection, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSensorlimitsCollectionVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSensorlimitsCollectionVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEntity(FlatBufferBuilder $builder, $entity)
    {
        $builder->addOffsetX(20, $entity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdEntity(FlatBufferBuilder $builder, $idEntity)
    {
        $builder->addOffsetX(21, $idEntity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSensorObservationType(FlatBufferBuilder $builder, $sensorObservationType)
    {
        $builder->addOffsetX(22, $sensorObservationType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSensorType(FlatBufferBuilder $builder, $sensorType)
    {
        $builder->addOffsetX(23, $sensorType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSensor_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSensor_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "SENS");
    }
}
