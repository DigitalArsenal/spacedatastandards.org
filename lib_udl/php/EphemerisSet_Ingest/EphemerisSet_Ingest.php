<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// EphemerisSet represents a wrapper or collection of Ephemeris 'points' and meta data indicating the specifics of the propagation of an on-orbit object. Ephemeris is typically distributed in a flat file containing details of the ephemeris generation as well as a large collection of individual points at varying time steps. EphemerisSet is analogous to this flat file.
class EphemerisSet_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EphemerisSet_Ingest
     */
    public static function getRootAsEphemerisSet_Ingest(ByteBuffer $bb)
    {
        $obj = new EphemerisSet_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EphemerisSet_IngestIdentifier()
    {
        return "EPHE";
    }

    public static function EphemerisSet_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EphemerisSet_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EphemerisSet_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: EPHEMERISSET-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the primary satellite on-orbit object.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOrigObjectId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Start time/first time point of the ephemeris, in ISO 8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getPointStartTime()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional start time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:10:00.123456Z
    /// Constraints: No constraints specified.
    public function getUsableStartTime()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// End time/last time point of the ephemeris, in ISO 8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getPointEndTime()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional end time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2018-01-01T20:50:00.123456Z
    /// Constraints: No constraints specified.
    public function getUsableEndTime()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Ephemeris step size, in seconds.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getStepSize()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of points contained in the ephemeris.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumPoints()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The type/purpose of the ephemeris (e.g., CALIBRATION, LAUNCH, MNVR_PLAN, ROUTINE, SCREENING).
    /// Example: /// Example: LAUNCH
    /// Constraints: Minimum length = 1, Maximum length = 24
    public function getType()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The pedigree of the ephemeris or source data used for ephemeris generation (e.g.  GPS, SLR, RANGING, PROPAGATED, HYBRID).
    /// Example: /// Example: PROPAGATED
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getPedigree()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source category of the ephemeris (e.g. OWNER_OPERATOR, ANALYST, EXTERNAL).
    /// Example: /// Example: ANALYST
    /// Constraints: Minimum length = 1, Maximum length = 24
    public function getCategory()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID of the State Vector used to generate the ephemeris.
    /// Example: /// Example: STATEVECTOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdStateVector()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating whether maneuver(s) are incorporated into the ephemeris.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getHasMnvr()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Array of the maneuver IDs of all maneuvers incorporated in the ephemeris.
    /// Example: /// Example: ['EXAMPLE_ID1', 'EXAMPLE_ID2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getIdManeuvers($j)
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getIdManeuversLength()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Boolean indicating whether covariance data is provided with the ephemeris.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getHasCov()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Boolean indicating whether acceleration data is provided with the ephemeris.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getHasAccel()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The Central Body of the ephemeris.  Assumed to be Earth, unless otherwise indicated.
    /// Example: /// Example: Earth
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCentBody()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Integrator used in ephemeris generation (e.g. RK7(8), RK8(9), COWELL, TWO-BODY).
    /// Example: /// Example: COWELL
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getIntegrator()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Geopotential model used in ephemeris generation (e.g. EGM-96, WGS-84, WGS-72, JGM-2, GEM-T3), including mm degree zonals, nn degree/order tesserals (e.g. EGM-96 24Z,24T).
    /// Example: /// Example: GEM-T3
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getGeopotentialModel()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Drag model used in ephemeris generation (e.g. JAC70, MSIS90, NONE, etc.).
    /// Example: /// Example: JAC70
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getDragModel()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating use of lunar/solar data in ephemeris generation.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLunarSolar()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Boolean indicating use of solid earth tide data in ephemeris generation.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getSolidEarthTides()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// First derivative of ballistic coefficient (m^2/kg-s).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBDot()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Model parameter value for energy dissipation rate (EDR), expressed in w/kg.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEdr()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The recommended interpolation method for the ephemeris data.
    /// Example: /// Example: LINEAR
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getInterpolation()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The recommended interpolation degree for the ephemeris data.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getInterpolationDegree()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Filename of the raw file used to provide the ephemeris data including filetype extension, if applicable. This file may be retrieved using the 'getFile' operation as specified in the 'EphemerisSet' OpenAPI docs.
    /// Example: /// Example: Example file name
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getFilename()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional source provided comments associated with the ephemeris.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getComments()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Notes/description of the provided ephemeris. A value of DSTOP signifies the ephemeris were generated using the last observation available.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getDescription()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: Example descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getDescriptor()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    /**
     * @return sbyte
     */
    public function getReferenceFrame()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \EphemerisSet_Ingest_referenceFrame_Enum::J2000;
    }

    /// The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    /**
     * @return sbyte
     */
    public function getCovReferenceFrame()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \EphemerisSet_Ingest_covReferenceFrame_Enum::J2000;
    }

    /// Time the row was created in the database, in UTC.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \EphemerisSet_Ingest_dataMode_Enum::REAL;
    }

    /// Satellite/catalog number of the target on-orbit object.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The list of ephemeris states belonging to the EphemerisSet. Each ephemeris point is associated with a parent Ephemeris Set via the EphemerisSet ID (esId).
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getEphemerisList($j)
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEphemerisListLength()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTags($j)
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTagsLength()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTransactionId()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEphemerisSet_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(44);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EphemerisSet_Ingest
     */
    public static function createEphemerisSet_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $idOnOrbit, $origObjectId, $pointStartTime, $usableStartTime, $pointEndTime, $usableEndTime, $stepSize, $numPoints, $type, $pedigree, $category, $idStateVector, $hasMnvr, $idManeuvers, $hasCov, $hasAccel, $centBody, $integrator, $geopotentialModel, $dragModel, $lunarSolar, $solidEarthTides, $bDot, $edr, $interpolation, $interpolationDegree, $filename, $comments, $description, $descriptor, $referenceFrame, $covReferenceFrame, $createdAt, $createdBy, $source, $origin, $dataMode, $satNo, $ephemerisList, $tags, $transactionId, $origNetwork)
    {
        $builder->startObject(44);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addOrigObjectId($builder, $origObjectId);
        self::addPointStartTime($builder, $pointStartTime);
        self::addUsableStartTime($builder, $usableStartTime);
        self::addPointEndTime($builder, $pointEndTime);
        self::addUsableEndTime($builder, $usableEndTime);
        self::addStepSize($builder, $stepSize);
        self::addNumPoints($builder, $numPoints);
        self::addType($builder, $type);
        self::addPedigree($builder, $pedigree);
        self::addCategory($builder, $category);
        self::addIdStateVector($builder, $idStateVector);
        self::addHasMnvr($builder, $hasMnvr);
        self::addIdManeuvers($builder, $idManeuvers);
        self::addHasCov($builder, $hasCov);
        self::addHasAccel($builder, $hasAccel);
        self::addCentBody($builder, $centBody);
        self::addIntegrator($builder, $integrator);
        self::addGeopotentialModel($builder, $geopotentialModel);
        self::addDragModel($builder, $dragModel);
        self::addLunarSolar($builder, $lunarSolar);
        self::addSolidEarthTides($builder, $solidEarthTides);
        self::addBDot($builder, $bDot);
        self::addEdr($builder, $edr);
        self::addInterpolation($builder, $interpolation);
        self::addInterpolationDegree($builder, $interpolationDegree);
        self::addFilename($builder, $filename);
        self::addComments($builder, $comments);
        self::addDescription($builder, $description);
        self::addDescriptor($builder, $descriptor);
        self::addReferenceFrame($builder, $referenceFrame);
        self::addCovReferenceFrame($builder, $covReferenceFrame);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addSatNo($builder, $satNo);
        self::addEphemerisList($builder, $ephemerisList);
        self::addTags($builder, $tags);
        self::addTransactionId($builder, $transactionId);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(2, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(3, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPointStartTime(FlatBufferBuilder $builder, $pointStartTime)
    {
        $builder->addOffsetX(4, $pointStartTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUsableStartTime(FlatBufferBuilder $builder, $usableStartTime)
    {
        $builder->addOffsetX(5, $usableStartTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPointEndTime(FlatBufferBuilder $builder, $pointEndTime)
    {
        $builder->addOffsetX(6, $pointEndTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUsableEndTime(FlatBufferBuilder $builder, $usableEndTime)
    {
        $builder->addOffsetX(7, $usableEndTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addStepSize(FlatBufferBuilder $builder, $stepSize)
    {
        $builder->addIntX(8, $stepSize, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumPoints(FlatBufferBuilder $builder, $numPoints)
    {
        $builder->addIntX(9, $numPoints, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(10, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPedigree(FlatBufferBuilder $builder, $pedigree)
    {
        $builder->addOffsetX(11, $pedigree, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCategory(FlatBufferBuilder $builder, $category)
    {
        $builder->addOffsetX(12, $category, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdStateVector(FlatBufferBuilder $builder, $idStateVector)
    {
        $builder->addOffsetX(13, $idStateVector, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addHasMnvr(FlatBufferBuilder $builder, $hasMnvr)
    {
        $builder->addBoolX(14, $hasMnvr, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addIdManeuvers(FlatBufferBuilder $builder, $idManeuvers)
    {
        $builder->addOffsetX(15, $idManeuvers, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createIdManeuversVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startIdManeuversVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addHasCov(FlatBufferBuilder $builder, $hasCov)
    {
        $builder->addBoolX(16, $hasCov, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addHasAccel(FlatBufferBuilder $builder, $hasAccel)
    {
        $builder->addBoolX(17, $hasAccel, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCentBody(FlatBufferBuilder $builder, $centBody)
    {
        $builder->addOffsetX(18, $centBody, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIntegrator(FlatBufferBuilder $builder, $integrator)
    {
        $builder->addOffsetX(19, $integrator, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGeopotentialModel(FlatBufferBuilder $builder, $geopotentialModel)
    {
        $builder->addOffsetX(20, $geopotentialModel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDragModel(FlatBufferBuilder $builder, $dragModel)
    {
        $builder->addOffsetX(21, $dragModel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLunarSolar(FlatBufferBuilder $builder, $lunarSolar)
    {
        $builder->addBoolX(22, $lunarSolar, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addSolidEarthTides(FlatBufferBuilder $builder, $solidEarthTides)
    {
        $builder->addBoolX(23, $solidEarthTides, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBDot(FlatBufferBuilder $builder, $bDot)
    {
        $builder->addDoubleX(24, $bDot, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEdr(FlatBufferBuilder $builder, $edr)
    {
        $builder->addDoubleX(25, $edr, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addInterpolation(FlatBufferBuilder $builder, $interpolation)
    {
        $builder->addOffsetX(26, $interpolation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addInterpolationDegree(FlatBufferBuilder $builder, $interpolationDegree)
    {
        $builder->addIntX(27, $interpolationDegree, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFilename(FlatBufferBuilder $builder, $filename)
    {
        $builder->addOffsetX(28, $filename, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addComments(FlatBufferBuilder $builder, $comments)
    {
        $builder->addOffsetX(29, $comments, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(30, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescriptor(FlatBufferBuilder $builder, $descriptor)
    {
        $builder->addOffsetX(31, $descriptor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addReferenceFrame(FlatBufferBuilder $builder, $referenceFrame)
    {
        $builder->addSbyteX(32, $referenceFrame, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addCovReferenceFrame(FlatBufferBuilder $builder, $covReferenceFrame)
    {
        $builder->addSbyteX(33, $covReferenceFrame, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(34, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(35, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(36, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(37, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(38, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(39, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEphemerisList(FlatBufferBuilder $builder, $ephemerisList)
    {
        $builder->addOffsetX(40, $ephemerisList, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEphemerisListVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEphemerisListVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTags(FlatBufferBuilder $builder, $tags)
    {
        $builder->addOffsetX(41, $tags, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTagsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTagsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransactionId(FlatBufferBuilder $builder, $transactionId)
    {
        $builder->addOffsetX(42, $transactionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(43, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEphemerisSet_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEphemerisSet_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "EPHE");
    }
}
