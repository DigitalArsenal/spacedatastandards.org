<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection of tanker aircraft associated with this Air Event.
class AirEventTankers_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AirEventTankers_Abridged
     */
    public static function getRootAsAirEventTankers_Abridged(ByteBuffer $bb)
    {
        $obj = new AirEventTankers_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AirEventTankers_AbridgedIdentifier()
    {
        return "AIRE";
    }

    public static function AirEventTankers_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AirEventTankers_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AirEventTankers_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The UDL ID of the aircraft sortie this tanker is associated with for this event.
    /// Example: /// Example: d833a4bc-756b-41d5-8845-f146fe563387
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdTankerSortie()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UDL ID of the mission this tanker is associated with for this event.
    /// Example: /// Example: edef700c-9917-4dbf-a153-89ffd4446fe9
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdTankerMission()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UDL ID of the airfield this tanker is associated with for this event.
    /// Example: /// Example: b33955d2-67d3-42be-8316-263e284ce6cc
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdTankerAirfield()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional tanker identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: ca673c580fb949a5b733f0e0b67ffab2
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getExternalTankerId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Coordination record identifier of this tanker.
    /// Example: /// Example: TTC601
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getTankerCoord()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Model Design Series designation of this tanker.
    /// Example: /// Example: KC135R
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getTankerMDS()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Air Mobility Command (AMC) mission identifier of this tanker.
    /// Example: /// Example: 8PH000B1S052
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAmcTankerMissionId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Alternate mission identifier of this tanker provided by source.
    /// Example: /// Example: 1UN05201L121
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getAltTankerMissionId()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The call sign assigned to this tanker.
    /// Example: /// Example: BAKER
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getTankerCallSign()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The wing or unit that owns this tanker.
    /// Example: /// Example: 117ARW
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getTankerOwner()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name and/or number of the point of contact for this tanker.
    /// Example: /// Example: JOHN SMITH (555)555-5555
    /// Constraints: Minimum length = 0, Maximum length = 68
    public function getTankerPOC()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifies the itinerary point of a mission that this tanker is linked to.
    /// Example: /// Example: 825
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTankerLegNum()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Location the tanker has been deployed to in preparation for an air refueling event.
    /// Example: /// Example: KOFF
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getTankerDeployedICAO()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of fuel delivery method used by the tanker during an air refueling event (BOOM, DROGUE, BOTH).
    /// Example: /// Example: DROGUE
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getTankerDeliveryMethod()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Total weight of the fuel transferred from this tanker during an air refueling event, in pounds.
    /// Example: /// Example: 15000000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFuelOff()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Position of this tanker within a group of tankers in an air refueling event.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTankerCellPosition()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Type of fuel being transferred from the tanker in an air refueling event.
    /// Example: /// Example: JP8
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getTankerFuelType()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating that this tanker is flying a dual role mission in an air refueling event.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getDualRole()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAirEventTankers_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(18);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AirEventTankers_Abridged
     */
    public static function createAirEventTankers_Abridged(FlatBufferBuilder $builder, $idTankerSortie, $idTankerMission, $idTankerAirfield, $externalTankerId, $tankerCoord, $tankerMDS, $amcTankerMissionId, $altTankerMissionId, $tankerCallSign, $tankerOwner, $tankerPOC, $tankerLegNum, $tankerDeployedICAO, $tankerDeliveryMethod, $fuelOff, $tankerCellPosition, $tankerFuelType, $dualRole)
    {
        $builder->startObject(18);
        self::addIdTankerSortie($builder, $idTankerSortie);
        self::addIdTankerMission($builder, $idTankerMission);
        self::addIdTankerAirfield($builder, $idTankerAirfield);
        self::addExternalTankerId($builder, $externalTankerId);
        self::addTankerCoord($builder, $tankerCoord);
        self::addTankerMDS($builder, $tankerMDS);
        self::addAmcTankerMissionId($builder, $amcTankerMissionId);
        self::addAltTankerMissionId($builder, $altTankerMissionId);
        self::addTankerCallSign($builder, $tankerCallSign);
        self::addTankerOwner($builder, $tankerOwner);
        self::addTankerPOC($builder, $tankerPOC);
        self::addTankerLegNum($builder, $tankerLegNum);
        self::addTankerDeployedICAO($builder, $tankerDeployedICAO);
        self::addTankerDeliveryMethod($builder, $tankerDeliveryMethod);
        self::addFuelOff($builder, $fuelOff);
        self::addTankerCellPosition($builder, $tankerCellPosition);
        self::addTankerFuelType($builder, $tankerFuelType);
        self::addDualRole($builder, $dualRole);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdTankerSortie(FlatBufferBuilder $builder, $idTankerSortie)
    {
        $builder->addOffsetX(0, $idTankerSortie, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdTankerMission(FlatBufferBuilder $builder, $idTankerMission)
    {
        $builder->addOffsetX(1, $idTankerMission, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdTankerAirfield(FlatBufferBuilder $builder, $idTankerAirfield)
    {
        $builder->addOffsetX(2, $idTankerAirfield, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalTankerId(FlatBufferBuilder $builder, $externalTankerId)
    {
        $builder->addOffsetX(3, $externalTankerId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTankerCoord(FlatBufferBuilder $builder, $tankerCoord)
    {
        $builder->addOffsetX(4, $tankerCoord, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTankerMDS(FlatBufferBuilder $builder, $tankerMDS)
    {
        $builder->addOffsetX(5, $tankerMDS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAmcTankerMissionId(FlatBufferBuilder $builder, $amcTankerMissionId)
    {
        $builder->addOffsetX(6, $amcTankerMissionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltTankerMissionId(FlatBufferBuilder $builder, $altTankerMissionId)
    {
        $builder->addOffsetX(7, $altTankerMissionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTankerCallSign(FlatBufferBuilder $builder, $tankerCallSign)
    {
        $builder->addOffsetX(8, $tankerCallSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTankerOwner(FlatBufferBuilder $builder, $tankerOwner)
    {
        $builder->addOffsetX(9, $tankerOwner, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTankerPOC(FlatBufferBuilder $builder, $tankerPOC)
    {
        $builder->addOffsetX(10, $tankerPOC, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTankerLegNum(FlatBufferBuilder $builder, $tankerLegNum)
    {
        $builder->addIntX(11, $tankerLegNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTankerDeployedICAO(FlatBufferBuilder $builder, $tankerDeployedICAO)
    {
        $builder->addOffsetX(12, $tankerDeployedICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTankerDeliveryMethod(FlatBufferBuilder $builder, $tankerDeliveryMethod)
    {
        $builder->addOffsetX(13, $tankerDeliveryMethod, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFuelOff(FlatBufferBuilder $builder, $fuelOff)
    {
        $builder->addDoubleX(14, $fuelOff, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTankerCellPosition(FlatBufferBuilder $builder, $tankerCellPosition)
    {
        $builder->addIntX(15, $tankerCellPosition, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTankerFuelType(FlatBufferBuilder $builder, $tankerFuelType)
    {
        $builder->addOffsetX(16, $tankerFuelType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addDualRole(FlatBufferBuilder $builder, $dualRole)
    {
        $builder->addBoolX(17, $dualRole, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAirEventTankers_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAirEventTankers_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRE");
    }
}
