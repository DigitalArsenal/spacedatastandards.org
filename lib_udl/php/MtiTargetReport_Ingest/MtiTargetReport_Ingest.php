<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
class MtiTargetReport_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return MtiTargetReport_Ingest
     */
    public static function getRootAsMtiTargetReport_Ingest(ByteBuffer $bb)
    {
        $obj = new MtiTargetReport_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function MtiTargetReport_IngestIdentifier()
    {
        return "MTIT";
    }

    public static function MtiTargetReport_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::MtiTargetReport_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return MtiTargetReport_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Sequential count of this MTI report within the dwell.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD321()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD322()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The East-West position of the reported detection, expressed as degrees East (positive) from the Prime Meridian.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD323()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) from the Dwell Area Center Latitude.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD324()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The East-West position of the reported detection, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian from the Dwell Area Center Longitude.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD325()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Height of the reported detection, referenced to its position above the WGS 84 ellipsoid, in meters.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD326()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The component of velocity for the reported detection, expressed in centimeters per second, corrected for platform motion, along the line of sight between the sensor and the reported detection, where the positive direction is away from the sensor.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD327()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The target wrap velocity permits trackers to un-wrap velocities for targets with line-of-sight components large enough to exceed the first velocity period.  Expressed in centimeters/sec.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD328()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Estimated signal-to-noise ratio (SNR) of the target return, in decibels.
    /// Example: /// Example: 17
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD329()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The classification of the target (i.e. vehicle, aircraft, â€¦).
    /// Example: /// Example: vehicle
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getD3210()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Estimated probability that the target classification field is correctly classified.
    /// Example: /// Example: 90
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD3211()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Standard deviation of the estimated slant range of the reported detection, in centimeters.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD3212()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Standard deviation of the position estimate, in the cross-range direction, of the reported detection, in decimeters.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD3213()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Standard deviation of the estimated geodetic height, in meters.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD3214()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Standard deviation of the measured line-of-sight velocity component, in centimeters per second.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD3215()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The Truth Tag- Application is the Application Field truncated to 8 bits, from the Entity State Protocol Data Unit (PDU) used to generate the MTI Target.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD3216()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The Truth Tag - Entity is the Entity Field from the Entity State PDU used to generate the MTI Target.
    /// Example: /// Example: 1234567890
    /// Constraints: No constraints specified.
    /**
     * @return long
     */
    public function getD3217()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /// Estimated radar cross section of the target return, in half-decibels.
    /// Example: /// Example: 98
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD3218()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startMtiTargetReport_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(18);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return MtiTargetReport_Ingest
     */
    public static function createMtiTargetReport_Ingest(FlatBufferBuilder $builder, $d32_1, $d32_2, $d32_3, $d32_4, $d32_5, $d32_6, $d32_7, $d32_8, $d32_9, $d32_10, $d32_11, $d32_12, $d32_13, $d32_14, $d32_15, $d32_16, $d32_17, $d32_18)
    {
        $builder->startObject(18);
        self::addD321($builder, $d32_1);
        self::addD322($builder, $d32_2);
        self::addD323($builder, $d32_3);
        self::addD324($builder, $d32_4);
        self::addD325($builder, $d32_5);
        self::addD326($builder, $d32_6);
        self::addD327($builder, $d32_7);
        self::addD328($builder, $d32_8);
        self::addD329($builder, $d32_9);
        self::addD3210($builder, $d32_10);
        self::addD3211($builder, $d32_11);
        self::addD3212($builder, $d32_12);
        self::addD3213($builder, $d32_13);
        self::addD3214($builder, $d32_14);
        self::addD3215($builder, $d32_15);
        self::addD3216($builder, $d32_16);
        self::addD3217($builder, $d32_17);
        self::addD3218($builder, $d32_18);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD321(FlatBufferBuilder $builder, $d321)
    {
        $builder->addIntX(0, $d321, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD322(FlatBufferBuilder $builder, $d322)
    {
        $builder->addDoubleX(1, $d322, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD323(FlatBufferBuilder $builder, $d323)
    {
        $builder->addDoubleX(2, $d323, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD324(FlatBufferBuilder $builder, $d324)
    {
        $builder->addIntX(3, $d324, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD325(FlatBufferBuilder $builder, $d325)
    {
        $builder->addIntX(4, $d325, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD326(FlatBufferBuilder $builder, $d326)
    {
        $builder->addIntX(5, $d326, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD327(FlatBufferBuilder $builder, $d327)
    {
        $builder->addIntX(6, $d327, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD328(FlatBufferBuilder $builder, $d328)
    {
        $builder->addIntX(7, $d328, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD329(FlatBufferBuilder $builder, $d329)
    {
        $builder->addIntX(8, $d329, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addD3210(FlatBufferBuilder $builder, $d3210)
    {
        $builder->addOffsetX(9, $d3210, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD3211(FlatBufferBuilder $builder, $d3211)
    {
        $builder->addIntX(10, $d3211, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD3212(FlatBufferBuilder $builder, $d3212)
    {
        $builder->addIntX(11, $d3212, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD3213(FlatBufferBuilder $builder, $d3213)
    {
        $builder->addIntX(12, $d3213, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD3214(FlatBufferBuilder $builder, $d3214)
    {
        $builder->addIntX(13, $d3214, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD3215(FlatBufferBuilder $builder, $d3215)
    {
        $builder->addIntX(14, $d3215, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD3216(FlatBufferBuilder $builder, $d3216)
    {
        $builder->addIntX(15, $d3216, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addD3217(FlatBufferBuilder $builder, $d3217)
    {
        $builder->addLongX(16, $d3217, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD3218(FlatBufferBuilder $builder, $d3218)
    {
        $builder->addIntX(17, $d3218, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endMtiTargetReport_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishMtiTargetReport_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "MTIT");
    }
}
