<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of geolocation data for a radio frequency (RF) signal or emitter.
class RFGeoLocation_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RFGeoLocation_Full
     */
    public static function getRootAsRFGeoLocation_Full(ByteBuffer $bb)
    {
        $obj = new RFGeoLocation_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function RFGeoLocation_FullIdentifier()
    {
        return "RFGE";
    }

    public static function RFGeoLocation_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::RFGeoLocation_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RFGeoLocation_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The order identifier for this RF Geo Location data set.
    /// Example: /// Example: 155240
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getOrderId()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies the creation time associated with the order in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2024-05-31T23:06:18.123456Z
    /// Constraints: No constraints specified.
    public function getCreatedTs()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time representing the mean of the constituent single-burst observations in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2024-05-31T21:16:58.123456Z
    /// Constraints: No constraints specified.
    public function getReceivedTs()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2024-05-31T21:12:12.123456Z
    /// Constraints: No constraints specified.
    public function getStartTime()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The order end time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2024-05-31T21:16:15.123456Z
    /// Constraints: No constraints specified.
    public function getEndTime()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the satellite used to identify and geolocate RF signals of interest. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the onorbit object with idOnOrbit = abc would be queried as /udl/onorbit/abc.
    /// Example: /// Example: HawkEye360-7
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/catalog number of the target on-orbit object.
    /// Example: /// Example: 101
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional identifier of the satellite used to identify and geolocate RF signals of interest of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigObjectId()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the satellite constellation.
    /// Example: /// Example: HawkEye360
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getConstellation()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the signal of interest.
    /// Example: /// Example: GPS
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getSignalOfInterest()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier of the geolocated signal of interest RF Emitter for this observation. This ID can be used to obtain additional information on an RF Emitter object using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the rfemitter object with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
    /// Example: /// Example: RFEMITTER-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdRFEmitter()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier of the emitter of interest for this observation. This may be an internal identifier and not necessarily a valid emitter Id.
    /// Example: /// Example: ORIGRFEMITTER-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOrigRFEmitterId()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The count of single-burst observations used for this geolocation observation.
    /// Example: /// Example: 17
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumBursts()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The minimum detected frequency in megahertz.
    /// Example: /// Example: 1575.42
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMinFreq()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The maximum detected frequency in megahertz.
    /// Example: /// Example: 1575.42
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxFreq()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The detected signal frequency in megahertz.
    /// Example: /// Example: 1575.42
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCenterFreq()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 latitude of the most likely emitter location coordinate point, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 41.172
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDetectLat()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the most likely emitter location coordinate point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 37.019
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDetectLon()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The altitude relative to WGS-84 ellipsoid, in meters.
    /// Example: /// Example: 123.456
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDetectAlt()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Confidence ellipse semi-major axis about the detection location lat/lon point measured in meters.
    /// Example: /// Example: 9435.896
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getConfSemiMajor()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Confidence ellipse semi-minor axis about the detection location lat/lon point measured in meters.
    /// Example: /// Example: 2751.929
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getConfSemiMinor()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Confidence ellipse orientation of semi-major axis about the detection location lat/lon point measured in degrees.
    /// Example: /// Example: 89.852
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getConfOrientation()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The area of the confidence ellipse specified in meters squared to contain the emitter with a 95% probability.
    /// Example: /// Example: 81577480.056
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getConfArea()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Type of region as projected on the ground.
    /// Example: /// Example: MultiPolygon
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getAtype()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    /// Constraints: No constraints specified.
    public function getAgjson()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    public function getAtext()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    public function getArea()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of dimensions of the geometry depicted by region.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAndims()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Geographical spatial_ref_sys for region.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAsrid()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional external identifier referencing the entity used in the calculation of the geolocation.
    /// Example: /// Example: 80fd25a8-8b41-448d-888a-91c9dfcd940b
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPassGroupId()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The RFGeo algorithm type and version used in geolocation calculations.
    /// Example: /// Example: v1.0-3-gps_nb_3ball
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAlgVersion()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: 780180925
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getExternalId()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTags($j)
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTagsLength()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSource()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \RFGeoLocation_Full_dataMode_Enum::REAL;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getOnOrbit()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRFGeoLocation_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(43);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RFGeoLocation_Full
     */
    public static function createRFGeoLocation_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $orderId, $createdTs, $receivedTs, $startTime, $endTime, $idOnOrbit, $satNo, $origObjectId, $constellation, $signalOfInterest, $idRFEmitter, $origRFEmitterId, $numBursts, $minFreq, $maxFreq, $centerFreq, $detectLat, $detectLon, $detectAlt, $confSemiMajor, $confSemiMinor, $confOrientation, $confArea, $atype, $agjson, $atext, $area, $andims, $asrid, $passGroupId, $algVersion, $externalId, $tags, $createdAt, $createdBy, $source, $origin, $origNetwork, $sourceDL, $dataMode, $onOrbit)
    {
        $builder->startObject(43);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addOrderId($builder, $orderId);
        self::addCreatedTs($builder, $createdTs);
        self::addReceivedTs($builder, $receivedTs);
        self::addStartTime($builder, $startTime);
        self::addEndTime($builder, $endTime);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addSatNo($builder, $satNo);
        self::addOrigObjectId($builder, $origObjectId);
        self::addConstellation($builder, $constellation);
        self::addSignalOfInterest($builder, $signalOfInterest);
        self::addIdRFEmitter($builder, $idRFEmitter);
        self::addOrigRFEmitterId($builder, $origRFEmitterId);
        self::addNumBursts($builder, $numBursts);
        self::addMinFreq($builder, $minFreq);
        self::addMaxFreq($builder, $maxFreq);
        self::addCenterFreq($builder, $centerFreq);
        self::addDetectLat($builder, $detectLat);
        self::addDetectLon($builder, $detectLon);
        self::addDetectAlt($builder, $detectAlt);
        self::addConfSemiMajor($builder, $confSemiMajor);
        self::addConfSemiMinor($builder, $confSemiMinor);
        self::addConfOrientation($builder, $confOrientation);
        self::addConfArea($builder, $confArea);
        self::addAtype($builder, $atype);
        self::addAgjson($builder, $agjson);
        self::addAtext($builder, $atext);
        self::addArea($builder, $area);
        self::addAndims($builder, $andims);
        self::addAsrid($builder, $asrid);
        self::addPassGroupId($builder, $passGroupId);
        self::addAlgVersion($builder, $algVersion);
        self::addExternalId($builder, $externalId);
        self::addTags($builder, $tags);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addSourceDL($builder, $sourceDL);
        self::addDataMode($builder, $dataMode);
        self::addOnOrbit($builder, $onOrbit);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrderId(FlatBufferBuilder $builder, $orderId)
    {
        $builder->addOffsetX(2, $orderId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedTs(FlatBufferBuilder $builder, $createdTs)
    {
        $builder->addOffsetX(3, $createdTs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReceivedTs(FlatBufferBuilder $builder, $receivedTs)
    {
        $builder->addOffsetX(4, $receivedTs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStartTime(FlatBufferBuilder $builder, $startTime)
    {
        $builder->addOffsetX(5, $startTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEndTime(FlatBufferBuilder $builder, $endTime)
    {
        $builder->addOffsetX(6, $endTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(7, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(8, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(9, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addConstellation(FlatBufferBuilder $builder, $constellation)
    {
        $builder->addOffsetX(10, $constellation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSignalOfInterest(FlatBufferBuilder $builder, $signalOfInterest)
    {
        $builder->addOffsetX(11, $signalOfInterest, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdRFEmitter(FlatBufferBuilder $builder, $idRFEmitter)
    {
        $builder->addOffsetX(12, $idRFEmitter, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigRFEmitterId(FlatBufferBuilder $builder, $origRFEmitterId)
    {
        $builder->addOffsetX(13, $origRFEmitterId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumBursts(FlatBufferBuilder $builder, $numBursts)
    {
        $builder->addIntX(14, $numBursts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMinFreq(FlatBufferBuilder $builder, $minFreq)
    {
        $builder->addDoubleX(15, $minFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxFreq(FlatBufferBuilder $builder, $maxFreq)
    {
        $builder->addDoubleX(16, $maxFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCenterFreq(FlatBufferBuilder $builder, $centerFreq)
    {
        $builder->addDoubleX(17, $centerFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDetectLat(FlatBufferBuilder $builder, $detectLat)
    {
        $builder->addDoubleX(18, $detectLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDetectLon(FlatBufferBuilder $builder, $detectLon)
    {
        $builder->addDoubleX(19, $detectLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDetectAlt(FlatBufferBuilder $builder, $detectAlt)
    {
        $builder->addDoubleX(20, $detectAlt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addConfSemiMajor(FlatBufferBuilder $builder, $confSemiMajor)
    {
        $builder->addDoubleX(21, $confSemiMajor, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addConfSemiMinor(FlatBufferBuilder $builder, $confSemiMinor)
    {
        $builder->addDoubleX(22, $confSemiMinor, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addConfOrientation(FlatBufferBuilder $builder, $confOrientation)
    {
        $builder->addDoubleX(23, $confOrientation, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addConfArea(FlatBufferBuilder $builder, $confArea)
    {
        $builder->addDoubleX(24, $confArea, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAtype(FlatBufferBuilder $builder, $atype)
    {
        $builder->addOffsetX(25, $atype, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAgjson(FlatBufferBuilder $builder, $agjson)
    {
        $builder->addOffsetX(26, $agjson, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAtext(FlatBufferBuilder $builder, $atext)
    {
        $builder->addOffsetX(27, $atext, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArea(FlatBufferBuilder $builder, $area)
    {
        $builder->addOffsetX(28, $area, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAndims(FlatBufferBuilder $builder, $andims)
    {
        $builder->addIntX(29, $andims, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAsrid(FlatBufferBuilder $builder, $asrid)
    {
        $builder->addIntX(30, $asrid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPassGroupId(FlatBufferBuilder $builder, $passGroupId)
    {
        $builder->addOffsetX(31, $passGroupId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAlgVersion(FlatBufferBuilder $builder, $algVersion)
    {
        $builder->addOffsetX(32, $algVersion, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalId(FlatBufferBuilder $builder, $externalId)
    {
        $builder->addOffsetX(33, $externalId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTags(FlatBufferBuilder $builder, $tags)
    {
        $builder->addOffsetX(34, $tags, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTagsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTagsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(35, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(36, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(37, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(38, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(39, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(40, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(41, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOnOrbit(FlatBufferBuilder $builder, $onOrbit)
    {
        $builder->addOffsetX(42, $onOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRFGeoLocation_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishRFGeoLocation_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "RFGE");
    }
}
