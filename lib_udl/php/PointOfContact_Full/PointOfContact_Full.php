<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Point of contacts for scheduling or modifying the route.
class PointOfContact_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return PointOfContact_Full
     */
    public static function getRootAsPointOfContact_Full(ByteBuffer $bb)
    {
        $obj = new PointOfContact_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function PointOfContact_FullIdentifier()
    {
        return "POIN";
    }

    public static function PointOfContact_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::PointOfContact_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return PointOfContact_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Sequencing field for point of contact.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPocSequenceId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// A code or name that represents the contact's role in association to the track route (ex. Originator, Scheduler, Maintainer, etc.).
    /// Example: /// Example: Originator
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPocTypeName()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the contact.
    /// Example: /// Example: Fred Smith
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPocName()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Office name for which the contact belongs.
    /// Example: /// Example: A34
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOffice()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The username of the contact.
    /// Example: /// Example: fgsmith
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUsername()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The rank of contact.
    /// Example: /// Example: Capt
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getRank()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Organization name for which the contact belongs.
    /// Example: /// Example: HQAF
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPocOrg()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Phone number of the contact.
    /// Example: /// Example: 8675309
    /// Constraints: Minimum length = 0, Maximum length = 45
    public function getPhone()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Text of the remark.
    /// Example: /// Example: POC remark.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getRemark()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startPointOfContact_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(9);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return PointOfContact_Full
     */
    public static function createPointOfContact_Full(FlatBufferBuilder $builder, $pocSequenceId, $pocTypeName, $pocName, $office, $username, $rank, $pocOrg, $phone, $remark)
    {
        $builder->startObject(9);
        self::addPocSequenceId($builder, $pocSequenceId);
        self::addPocTypeName($builder, $pocTypeName);
        self::addPocName($builder, $pocName);
        self::addOffice($builder, $office);
        self::addUsername($builder, $username);
        self::addRank($builder, $rank);
        self::addPocOrg($builder, $pocOrg);
        self::addPhone($builder, $phone);
        self::addRemark($builder, $remark);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPocSequenceId(FlatBufferBuilder $builder, $pocSequenceId)
    {
        $builder->addIntX(0, $pocSequenceId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPocTypeName(FlatBufferBuilder $builder, $pocTypeName)
    {
        $builder->addOffsetX(1, $pocTypeName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPocName(FlatBufferBuilder $builder, $pocName)
    {
        $builder->addOffsetX(2, $pocName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOffice(FlatBufferBuilder $builder, $office)
    {
        $builder->addOffsetX(3, $office, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUsername(FlatBufferBuilder $builder, $username)
    {
        $builder->addOffsetX(4, $username, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRank(FlatBufferBuilder $builder, $rank)
    {
        $builder->addOffsetX(5, $rank, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPocOrg(FlatBufferBuilder $builder, $pocOrg)
    {
        $builder->addOffsetX(6, $pocOrg, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPhone(FlatBufferBuilder $builder, $phone)
    {
        $builder->addOffsetX(7, $phone, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRemark(FlatBufferBuilder $builder, $remark)
    {
        $builder->addOffsetX(8, $remark, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endPointOfContact_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishPointOfContact_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "POIN");
    }
}
