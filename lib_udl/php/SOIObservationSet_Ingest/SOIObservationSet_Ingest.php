<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// These services provide operations for posting space object idenfification observation sets.
class SOIObservationSet_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return SOIObservationSet_Ingest
     */
    public static function getRootAsSOIObservationSet_Ingest(ByteBuffer $bb)
    {
        $obj = new SOIObservationSet_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function SOIObservationSet_IngestIdentifier()
    {
        return "SOIO";
    }

    public static function SOIObservationSet_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::SOIObservationSet_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return SOIObservationSet_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// SOI msgCreateDate time in ISO 8601 UTC time, with millisecond precision.
    /// Example: /// Example: 2022-07-07T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getMsgCreateDate()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID of the observing sensor.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies if this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigSensorId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID of the AttitudeSet record for the observing sensor.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getSensorAsId()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/catalog number of the target on-orbit object.
    /// Example: /// Example: 101
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOrigObjectId()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Sensor WGS84 latitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlat()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor WGS84 longitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values south of equator).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlon()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor altitude at startTime (if mobile/onorbit) in kilometers.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenalt()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian X position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenx()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Y position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSeny()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Z position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenz()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian X velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenvelx()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Y velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenvely()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Z velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenvelz()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// ID of the UDL Elset of the Space Object under observation.
    /// Example: /// Example: REF-ELSET-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdElset()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Observation set detection start time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getStartTime()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Observation set detection end time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getEndTime()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The number of observation records in the set.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumObs()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Observation type (OPTICAL, RADAR).
    /// Example: /// Example: OPTICAL
    /// Constraints: Minimum length = 1, Maximum length = 24
    /**
     * @return sbyte
     */
    public function getType()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SOIObservationSet_Ingest_type_Enum::OPTICAL;
    }

    /// Polar angle of the gimbal/mount at observation set detection start time in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPolarAngleStart()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Polar angle of the gimbal/mount at observation set detection end time in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPolarAngleEnd()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The reference frame of the observation measurements. If the referenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    /**
     * @return sbyte
     */
    public function getReferenceFrame()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SOIObservationSet_Ingest_referenceFrame_Enum::J2000;
    }

    /// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    /**
     * @return sbyte
     */
    public function getSenReferenceFrame()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SOIObservationSet_Ingest_senReferenceFrame_Enum::J2000;
    }

    /// Line of sight declination at observation set detection start time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLosDeclinationStart()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Line of sight declination at observation set detection end time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLosDeclinationEnd()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pointing angle of the Azimuth gimbal/mount at observation set detection start time. Specified in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPointingAngleAzStart()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pointing angle of the Azimuth gimbal/mount at observation set detection end time. Specified in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPointingAngleAzEnd()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pointing angle of the Elevation gimbal/mount at observation set detection start time. Specified in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPointingAngleElStart()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pointing angle of the Elevation gimbal/mount at observation set detection end time. Specified in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPointingAngleElEnd()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pixel array size (width) in pixels.
    /// Example: /// Example: 32
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPixelArrayWidth()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Pixel array size (height) in pixels.
    /// Example: /// Example: 32
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPixelArrayHeight()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The value is the number of spectral filters used.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumSpectralFilters()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
    /// Example: /// Example: ['Keyword1', 'Keyword2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSpectralFilters($j)
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSpectralFiltersLength()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Mode indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
    /// Example: /// Example: RATE TRACK
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCollectionMode()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The gain used during the collection, in units of photoelectrons per analog-to-digital unit (e-/ADU). If no gain is used, the value = 1.
    /// Example: /// Example: 234.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGain()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The number of pixels binned horizontally.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getBinningHoriz()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The number of pixels binned vertically.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getBinningVert()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The in-band solar magnitude at 1 A.U.
    /// Example: /// Example: -26.91
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSolarMag()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The minimum valid pixel value.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPixelMin()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The maximum valid pixel value.
    /// Example: /// Example: 16383
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPixelMax()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Software Version used to Capture, Process, and Deliver the data.
    /// Example: /// Example: GSV99/17-1
    /// Constraints: Minimum length = 0, Maximum length = 70
    public function getSoftwareVersion()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the target satellite.
    /// Example: /// Example: TITAN 3C TRANSTAGE R/B
    /// Constraints: Minimum length = 0, Maximum length = 70
    public function getSatelliteName()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the Star Catalog used for photometry and astrometry.
    /// Example: /// Example: SSTRC5
    /// Constraints: Minimum length = 0, Maximum length = 70
    public function getStarCatName()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Object Correlation Quality value. Measures how close the observed object's orbit is to matching an object in the catalog. The scale of this field may vary depending on provider. Users should consult the data provider to verify the meaning of the value (e.g. A value of 0.0 indicates a high/strong correlation, while a value closer to 1.0 indicates low/weak correlation).
    /// Example: /// Example: 0.327
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCorrQuality()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Boolean indicating whether the target object was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getUct()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Key to indicate which, if any of, the pre/post photometer calibrations are valid for use when generating data for the EOSSA file. If the field is not populated, then the provided calibration data will be used when generating the EOSSA file (e.g. PRE, POST, BOTH, NONE).
    /// Example: /// Example: BOTH
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getValidCalibrations()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of calibration used by the Sensor (e.g. ALL SKY, DIFFERENTIAL, DEFAULT, NONE).
    /// Example: /// Example: ALL SKY
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCalibrationType()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A threshold for percent of pixels that make up object signal that are beyond the saturation point for the sensor that are removed in the EOSSA file, in range of 0 to 1.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPercentSatThreshold()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Boolean indicating if any change event was detected, based on historical collection data for the object.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getChangeDetected()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Boolean indicating if a periodicity change event was detected, based on historical collection data for the object.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getPeriodicityChangeDetected()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Boolean indicating if a brightness variance change event was detected, based on historical collection data for the object.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getBrightnessVarianceChangeDetected()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Boolean indicating if a solar phase angle brightness change event was detected, based on historical collection data for the object.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getSolarPhaseAngleBrightnessChangeDetected()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Overall qualitative confidence assessment of change detection results (e.g. HIGH, MEDIUM, LOW).
    /// Example: /// Example: MEDIUM
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getChangeConf()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Qualitative Collection Density assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
    /// Example: /// Example: MEDIUM
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getCollectionDensityConf()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Qualitative Periodicity Sampling assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
    /// Example: /// Example: MEDIUM
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getPeriodicitySamplingConf()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Qualitative assessment of the periodicity detection results from the Attitude and Shape Retrieval (ASR) Periodicity Assessment (PA) Tool (e.g. HIGH, MEDIUM, LOW).
    /// Example: /// Example: MEDIUM
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getPeriodicityDetectionConf()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Universally Unique collection ID. Mechanism to correlate Single Point Photometry (SPP) JSON files to images.
    /// Example: /// Example: b5133288-ab63-4b15-81f6-c7eec0cdb0c0
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getCollectionId()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of SOI Calibrations associated with this SOIObservationSet.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCalibrations($j)
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCalibrationsLength()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTags($j)
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTagsLength()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTransactionId()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// OpticalSOIObservations associated with this SOIObservationSet.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getOpticalSOIObservationList($j)
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getOpticalSOIObservationListLength()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// RadarSOIObservations associated with this RadarSOIObservationSet.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRadarSOIObservationList($j)
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRadarSOIObservationListLength()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SOIObservationSet_Ingest_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSOIObservationSet_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(73);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return SOIObservationSet_Ingest
     */
    public static function createSOIObservationSet_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $msgCreateDate, $idSensor, $origSensorId, $sensorAsId, $idOnOrbit, $satNo, $origObjectId, $senlat, $senlon, $senalt, $senx, $seny, $senz, $senvelx, $senvely, $senvelz, $idElset, $startTime, $endTime, $numObs, $type, $polarAngleStart, $polarAngleEnd, $referenceFrame, $senReferenceFrame, $losDeclinationStart, $losDeclinationEnd, $pointingAngleAzStart, $pointingAngleAzEnd, $pointingAngleElStart, $pointingAngleElEnd, $pixelArrayWidth, $pixelArrayHeight, $numSpectralFilters, $spectralFilters, $collectionMode, $gain, $binningHoriz, $binningVert, $solarMag, $pixelMin, $pixelMax, $softwareVersion, $satelliteName, $starCatName, $corrQuality, $uct, $validCalibrations, $calibrationType, $percentSatThreshold, $changeDetected, $periodicityChangeDetected, $brightnessVarianceChangeDetected, $solarPhaseAngleBrightnessChangeDetected, $changeConf, $collectionDensityConf, $periodicitySamplingConf, $periodicityDetectionConf, $collectionId, $calibrations, $tags, $transactionId, $opticalSOIObservationList, $radarSOIObservationList, $createdAt, $createdBy, $source, $origin, $origNetwork, $sourceDL, $dataMode)
    {
        $builder->startObject(73);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addMsgCreateDate($builder, $msgCreateDate);
        self::addIdSensor($builder, $idSensor);
        self::addOrigSensorId($builder, $origSensorId);
        self::addSensorAsId($builder, $sensorAsId);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addSatNo($builder, $satNo);
        self::addOrigObjectId($builder, $origObjectId);
        self::addSenlat($builder, $senlat);
        self::addSenlon($builder, $senlon);
        self::addSenalt($builder, $senalt);
        self::addSenx($builder, $senx);
        self::addSeny($builder, $seny);
        self::addSenz($builder, $senz);
        self::addSenvelx($builder, $senvelx);
        self::addSenvely($builder, $senvely);
        self::addSenvelz($builder, $senvelz);
        self::addIdElset($builder, $idElset);
        self::addStartTime($builder, $startTime);
        self::addEndTime($builder, $endTime);
        self::addNumObs($builder, $numObs);
        self::addType($builder, $type);
        self::addPolarAngleStart($builder, $polarAngleStart);
        self::addPolarAngleEnd($builder, $polarAngleEnd);
        self::addReferenceFrame($builder, $referenceFrame);
        self::addSenReferenceFrame($builder, $senReferenceFrame);
        self::addLosDeclinationStart($builder, $losDeclinationStart);
        self::addLosDeclinationEnd($builder, $losDeclinationEnd);
        self::addPointingAngleAzStart($builder, $pointingAngleAzStart);
        self::addPointingAngleAzEnd($builder, $pointingAngleAzEnd);
        self::addPointingAngleElStart($builder, $pointingAngleElStart);
        self::addPointingAngleElEnd($builder, $pointingAngleElEnd);
        self::addPixelArrayWidth($builder, $pixelArrayWidth);
        self::addPixelArrayHeight($builder, $pixelArrayHeight);
        self::addNumSpectralFilters($builder, $numSpectralFilters);
        self::addSpectralFilters($builder, $spectralFilters);
        self::addCollectionMode($builder, $collectionMode);
        self::addGain($builder, $gain);
        self::addBinningHoriz($builder, $binningHoriz);
        self::addBinningVert($builder, $binningVert);
        self::addSolarMag($builder, $solarMag);
        self::addPixelMin($builder, $pixelMin);
        self::addPixelMax($builder, $pixelMax);
        self::addSoftwareVersion($builder, $softwareVersion);
        self::addSatelliteName($builder, $satelliteName);
        self::addStarCatName($builder, $starCatName);
        self::addCorrQuality($builder, $corrQuality);
        self::addUct($builder, $uct);
        self::addValidCalibrations($builder, $validCalibrations);
        self::addCalibrationType($builder, $calibrationType);
        self::addPercentSatThreshold($builder, $percentSatThreshold);
        self::addChangeDetected($builder, $changeDetected);
        self::addPeriodicityChangeDetected($builder, $periodicityChangeDetected);
        self::addBrightnessVarianceChangeDetected($builder, $brightnessVarianceChangeDetected);
        self::addSolarPhaseAngleBrightnessChangeDetected($builder, $solarPhaseAngleBrightnessChangeDetected);
        self::addChangeConf($builder, $changeConf);
        self::addCollectionDensityConf($builder, $collectionDensityConf);
        self::addPeriodicitySamplingConf($builder, $periodicitySamplingConf);
        self::addPeriodicityDetectionConf($builder, $periodicityDetectionConf);
        self::addCollectionId($builder, $collectionId);
        self::addCalibrations($builder, $calibrations);
        self::addTags($builder, $tags);
        self::addTransactionId($builder, $transactionId);
        self::addOpticalSOIObservationList($builder, $opticalSOIObservationList);
        self::addRadarSOIObservationList($builder, $radarSOIObservationList);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addSourceDL($builder, $sourceDL);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsgCreateDate(FlatBufferBuilder $builder, $msgCreateDate)
    {
        $builder->addOffsetX(2, $msgCreateDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(3, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSensorId(FlatBufferBuilder $builder, $origSensorId)
    {
        $builder->addOffsetX(4, $origSensorId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSensorAsId(FlatBufferBuilder $builder, $sensorAsId)
    {
        $builder->addOffsetX(5, $sensorAsId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(6, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(7, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(8, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlat(FlatBufferBuilder $builder, $senlat)
    {
        $builder->addDoubleX(9, $senlat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlon(FlatBufferBuilder $builder, $senlon)
    {
        $builder->addDoubleX(10, $senlon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenalt(FlatBufferBuilder $builder, $senalt)
    {
        $builder->addDoubleX(11, $senalt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenx(FlatBufferBuilder $builder, $senx)
    {
        $builder->addDoubleX(12, $senx, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSeny(FlatBufferBuilder $builder, $seny)
    {
        $builder->addDoubleX(13, $seny, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenz(FlatBufferBuilder $builder, $senz)
    {
        $builder->addDoubleX(14, $senz, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenvelx(FlatBufferBuilder $builder, $senvelx)
    {
        $builder->addDoubleX(15, $senvelx, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenvely(FlatBufferBuilder $builder, $senvely)
    {
        $builder->addDoubleX(16, $senvely, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenvelz(FlatBufferBuilder $builder, $senvelz)
    {
        $builder->addDoubleX(17, $senvelz, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdElset(FlatBufferBuilder $builder, $idElset)
    {
        $builder->addOffsetX(18, $idElset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStartTime(FlatBufferBuilder $builder, $startTime)
    {
        $builder->addOffsetX(19, $startTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEndTime(FlatBufferBuilder $builder, $endTime)
    {
        $builder->addOffsetX(20, $endTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumObs(FlatBufferBuilder $builder, $numObs)
    {
        $builder->addIntX(21, $numObs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addSbyteX(22, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPolarAngleStart(FlatBufferBuilder $builder, $polarAngleStart)
    {
        $builder->addDoubleX(23, $polarAngleStart, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPolarAngleEnd(FlatBufferBuilder $builder, $polarAngleEnd)
    {
        $builder->addDoubleX(24, $polarAngleEnd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addReferenceFrame(FlatBufferBuilder $builder, $referenceFrame)
    {
        $builder->addSbyteX(25, $referenceFrame, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addSenReferenceFrame(FlatBufferBuilder $builder, $senReferenceFrame)
    {
        $builder->addSbyteX(26, $senReferenceFrame, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLosDeclinationStart(FlatBufferBuilder $builder, $losDeclinationStart)
    {
        $builder->addDoubleX(27, $losDeclinationStart, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLosDeclinationEnd(FlatBufferBuilder $builder, $losDeclinationEnd)
    {
        $builder->addDoubleX(28, $losDeclinationEnd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPointingAngleAzStart(FlatBufferBuilder $builder, $pointingAngleAzStart)
    {
        $builder->addDoubleX(29, $pointingAngleAzStart, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPointingAngleAzEnd(FlatBufferBuilder $builder, $pointingAngleAzEnd)
    {
        $builder->addDoubleX(30, $pointingAngleAzEnd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPointingAngleElStart(FlatBufferBuilder $builder, $pointingAngleElStart)
    {
        $builder->addDoubleX(31, $pointingAngleElStart, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPointingAngleElEnd(FlatBufferBuilder $builder, $pointingAngleElEnd)
    {
        $builder->addDoubleX(32, $pointingAngleElEnd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPixelArrayWidth(FlatBufferBuilder $builder, $pixelArrayWidth)
    {
        $builder->addIntX(33, $pixelArrayWidth, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPixelArrayHeight(FlatBufferBuilder $builder, $pixelArrayHeight)
    {
        $builder->addIntX(34, $pixelArrayHeight, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumSpectralFilters(FlatBufferBuilder $builder, $numSpectralFilters)
    {
        $builder->addIntX(35, $numSpectralFilters, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSpectralFilters(FlatBufferBuilder $builder, $spectralFilters)
    {
        $builder->addOffsetX(36, $spectralFilters, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSpectralFiltersVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSpectralFiltersVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCollectionMode(FlatBufferBuilder $builder, $collectionMode)
    {
        $builder->addOffsetX(37, $collectionMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGain(FlatBufferBuilder $builder, $gain)
    {
        $builder->addDoubleX(38, $gain, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addBinningHoriz(FlatBufferBuilder $builder, $binningHoriz)
    {
        $builder->addIntX(39, $binningHoriz, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addBinningVert(FlatBufferBuilder $builder, $binningVert)
    {
        $builder->addIntX(40, $binningVert, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSolarMag(FlatBufferBuilder $builder, $solarMag)
    {
        $builder->addDoubleX(41, $solarMag, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPixelMin(FlatBufferBuilder $builder, $pixelMin)
    {
        $builder->addIntX(42, $pixelMin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPixelMax(FlatBufferBuilder $builder, $pixelMax)
    {
        $builder->addIntX(43, $pixelMax, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSoftwareVersion(FlatBufferBuilder $builder, $softwareVersion)
    {
        $builder->addOffsetX(44, $softwareVersion, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSatelliteName(FlatBufferBuilder $builder, $satelliteName)
    {
        $builder->addOffsetX(45, $satelliteName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStarCatName(FlatBufferBuilder $builder, $starCatName)
    {
        $builder->addOffsetX(46, $starCatName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCorrQuality(FlatBufferBuilder $builder, $corrQuality)
    {
        $builder->addDoubleX(47, $corrQuality, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addUct(FlatBufferBuilder $builder, $uct)
    {
        $builder->addBoolX(48, $uct, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addValidCalibrations(FlatBufferBuilder $builder, $validCalibrations)
    {
        $builder->addOffsetX(49, $validCalibrations, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCalibrationType(FlatBufferBuilder $builder, $calibrationType)
    {
        $builder->addOffsetX(50, $calibrationType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPercentSatThreshold(FlatBufferBuilder $builder, $percentSatThreshold)
    {
        $builder->addDoubleX(51, $percentSatThreshold, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addChangeDetected(FlatBufferBuilder $builder, $changeDetected)
    {
        $builder->addBoolX(52, $changeDetected, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addPeriodicityChangeDetected(FlatBufferBuilder $builder, $periodicityChangeDetected)
    {
        $builder->addBoolX(53, $periodicityChangeDetected, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addBrightnessVarianceChangeDetected(FlatBufferBuilder $builder, $brightnessVarianceChangeDetected)
    {
        $builder->addBoolX(54, $brightnessVarianceChangeDetected, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addSolarPhaseAngleBrightnessChangeDetected(FlatBufferBuilder $builder, $solarPhaseAngleBrightnessChangeDetected)
    {
        $builder->addBoolX(55, $solarPhaseAngleBrightnessChangeDetected, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addChangeConf(FlatBufferBuilder $builder, $changeConf)
    {
        $builder->addOffsetX(56, $changeConf, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCollectionDensityConf(FlatBufferBuilder $builder, $collectionDensityConf)
    {
        $builder->addOffsetX(57, $collectionDensityConf, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPeriodicitySamplingConf(FlatBufferBuilder $builder, $periodicitySamplingConf)
    {
        $builder->addOffsetX(58, $periodicitySamplingConf, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPeriodicityDetectionConf(FlatBufferBuilder $builder, $periodicityDetectionConf)
    {
        $builder->addOffsetX(59, $periodicityDetectionConf, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCollectionId(FlatBufferBuilder $builder, $collectionId)
    {
        $builder->addOffsetX(60, $collectionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCalibrations(FlatBufferBuilder $builder, $calibrations)
    {
        $builder->addOffsetX(61, $calibrations, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCalibrationsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCalibrationsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTags(FlatBufferBuilder $builder, $tags)
    {
        $builder->addOffsetX(62, $tags, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTagsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTagsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransactionId(FlatBufferBuilder $builder, $transactionId)
    {
        $builder->addOffsetX(63, $transactionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addOpticalSOIObservationList(FlatBufferBuilder $builder, $opticalSOIObservationList)
    {
        $builder->addOffsetX(64, $opticalSOIObservationList, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createOpticalSOIObservationListVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startOpticalSOIObservationListVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRadarSOIObservationList(FlatBufferBuilder $builder, $radarSOIObservationList)
    {
        $builder->addOffsetX(65, $radarSOIObservationList, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRadarSOIObservationListVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRadarSOIObservationListVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(66, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(67, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(68, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(69, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(70, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(71, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(72, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSOIObservationSet_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSOIObservationSet_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "SOIO");
    }
}
