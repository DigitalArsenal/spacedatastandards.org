<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Data on High-Range Resolution (HRR) targets or High Range Resolution Range Doppler Maps (RDM) for a specified area.
class MtiHRR_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return MtiHRR_Ingest
     */
    public static function getRootAsMtiHRR_Ingest(ByteBuffer $bb)
    {
        $obj = new MtiHRR_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function MtiHRR_IngestIdentifier()
    {
        return "MTIH";
    }

    public static function MtiHRR_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::MtiHRR_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return MtiHRR_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Sequential count of a revisit of the bounding area for a given job ID.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH2()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH3()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Flag to indicate the last dwell of the revisit.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getH4()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Sequential index of the associated MTI Report.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH5()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of Range Doppler pixels that exceed target scatterer threshold and are reported in this segment.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH6()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of Range Bins/Samples in a Range Doppler Chip.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH7()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of Doppler bins in a Range-Doppler chip.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH8()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The Peak Scatter returns the maximum power level (e.g. in milliwatts, or dBm) registered by the sensor.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH9()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Detection threshold used to isolate significant target scatterer pixels, expressed as power relative to clutter mean in negative quarter-decibels.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH10()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// 3dB range impulse response of the radar, expressed in centimeters.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getH11()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Slant Range pixel spacing after over sampling, expressed in centimeters.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getH12()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// 3dB Doppler resolution of the radar, expressed in Hertz.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getH13()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Doppler pixel spacing after over sampling, expressed in Hertz.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getH14()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Center Frequency of the radar in GHz.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getH15()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Enumeration table denoting the compression technique used.
    /// Example: /// Example: TABLE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getH16()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Enumeration table indicating the spectral weighting used in the range compression process.
    /// Example: /// Example: TABLE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getH17()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Enumeration table indicating the spectral weighting used in the cross-range or Doppler compression process.
    /// Example: /// Example: TABLE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getH18()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Initial power of the peak scatterer, expressed in dB.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getH19()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// RCS of the peak scatterer, expressed in half-decibels (dB/2).
    /// Example: /// Example: 117
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH20()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// When the RDM does not correlate to a single MTI report index or when the center range bin does not correlate to the center of the dwell; provide the range sample offset in meters from Dwell Center (positive is away from the sensor) of the first scatterer record.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH21()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// When the RDM does not correlate to a single MTI report index or the center doppler bin does not correlate to the doppler centroid of the dwell; Doppler sample value in Hz of the first scatterer record.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH22()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Enumeration field which designates the type of data being delivered.
    /// Example: /// Example: FIELD
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getH23()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag field to indicate the additional signal processing techniques applied to the data.
    /// Example: /// Example: FLAG
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getH24()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of pixels in the range dimension of the chip.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH27()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Distance from Range Bin to closest edge in the entire chip, expressed in centimeters.
    /// Example: /// Example: 1234567890
    /// Constraints: No constraints specified.
    /**
     * @return long
     */
    public function getH28()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /// Relative velocity to skin line.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH29()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Computed object length based upon HRR profile, in meters.
    /// Example: /// Example: 22
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH30()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Standard deviation of estimate of the object length, expressed in meters.
    /// Example: /// Example: 55
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getH31()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Standard deviation of estimate of the object length, expressed in meters.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getH32($j)
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getH32Length()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startMtiHRR_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(29);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return MtiHRR_Ingest
     */
    public static function createMtiHRR_Ingest(FlatBufferBuilder $builder, $h2, $h3, $h4, $h5, $h6, $h7, $h8, $h9, $h10, $h11, $h12, $h13, $h14, $h15, $h16, $h17, $h18, $h19, $h20, $h21, $h22, $h23, $h24, $h27, $h28, $h29, $h30, $h31, $h32)
    {
        $builder->startObject(29);
        self::addH2($builder, $h2);
        self::addH3($builder, $h3);
        self::addH4($builder, $h4);
        self::addH5($builder, $h5);
        self::addH6($builder, $h6);
        self::addH7($builder, $h7);
        self::addH8($builder, $h8);
        self::addH9($builder, $h9);
        self::addH10($builder, $h10);
        self::addH11($builder, $h11);
        self::addH12($builder, $h12);
        self::addH13($builder, $h13);
        self::addH14($builder, $h14);
        self::addH15($builder, $h15);
        self::addH16($builder, $h16);
        self::addH17($builder, $h17);
        self::addH18($builder, $h18);
        self::addH19($builder, $h19);
        self::addH20($builder, $h20);
        self::addH21($builder, $h21);
        self::addH22($builder, $h22);
        self::addH23($builder, $h23);
        self::addH24($builder, $h24);
        self::addH27($builder, $h27);
        self::addH28($builder, $h28);
        self::addH29($builder, $h29);
        self::addH30($builder, $h30);
        self::addH31($builder, $h31);
        self::addH32($builder, $h32);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH2(FlatBufferBuilder $builder, $h2)
    {
        $builder->addIntX(0, $h2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH3(FlatBufferBuilder $builder, $h3)
    {
        $builder->addIntX(1, $h3, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addH4(FlatBufferBuilder $builder, $h4)
    {
        $builder->addBoolX(2, $h4, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH5(FlatBufferBuilder $builder, $h5)
    {
        $builder->addIntX(3, $h5, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH6(FlatBufferBuilder $builder, $h6)
    {
        $builder->addIntX(4, $h6, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH7(FlatBufferBuilder $builder, $h7)
    {
        $builder->addIntX(5, $h7, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH8(FlatBufferBuilder $builder, $h8)
    {
        $builder->addIntX(6, $h8, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH9(FlatBufferBuilder $builder, $h9)
    {
        $builder->addIntX(7, $h9, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH10(FlatBufferBuilder $builder, $h10)
    {
        $builder->addIntX(8, $h10, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addH11(FlatBufferBuilder $builder, $h11)
    {
        $builder->addDoubleX(9, $h11, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addH12(FlatBufferBuilder $builder, $h12)
    {
        $builder->addDoubleX(10, $h12, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addH13(FlatBufferBuilder $builder, $h13)
    {
        $builder->addDoubleX(11, $h13, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addH14(FlatBufferBuilder $builder, $h14)
    {
        $builder->addDoubleX(12, $h14, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addH15(FlatBufferBuilder $builder, $h15)
    {
        $builder->addDoubleX(13, $h15, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addH16(FlatBufferBuilder $builder, $h16)
    {
        $builder->addOffsetX(14, $h16, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addH17(FlatBufferBuilder $builder, $h17)
    {
        $builder->addOffsetX(15, $h17, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addH18(FlatBufferBuilder $builder, $h18)
    {
        $builder->addOffsetX(16, $h18, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addH19(FlatBufferBuilder $builder, $h19)
    {
        $builder->addDoubleX(17, $h19, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH20(FlatBufferBuilder $builder, $h20)
    {
        $builder->addIntX(18, $h20, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH21(FlatBufferBuilder $builder, $h21)
    {
        $builder->addIntX(19, $h21, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH22(FlatBufferBuilder $builder, $h22)
    {
        $builder->addIntX(20, $h22, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addH23(FlatBufferBuilder $builder, $h23)
    {
        $builder->addOffsetX(21, $h23, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addH24(FlatBufferBuilder $builder, $h24)
    {
        $builder->addOffsetX(22, $h24, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH27(FlatBufferBuilder $builder, $h27)
    {
        $builder->addIntX(23, $h27, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addH28(FlatBufferBuilder $builder, $h28)
    {
        $builder->addLongX(24, $h28, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH29(FlatBufferBuilder $builder, $h29)
    {
        $builder->addIntX(25, $h29, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH30(FlatBufferBuilder $builder, $h30)
    {
        $builder->addIntX(26, $h30, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addH31(FlatBufferBuilder $builder, $h31)
    {
        $builder->addIntX(27, $h31, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addH32(FlatBufferBuilder $builder, $h32)
    {
        $builder->addOffsetX(28, $h32, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createH32Vector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startH32Vector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endMtiHRR_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishMtiHRR_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "MTIH");
    }
}
