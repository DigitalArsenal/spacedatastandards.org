<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// The controlPoint set describes any reference/controlling/rendevous point for a given airspace control means.
class AirspaceControlPoint_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AirspaceControlPoint_Full
     */
    public static function getRootAsAirspaceControlPoint_Full(ByteBuffer $bb)
    {
        $obj = new AirspaceControlPoint_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AirspaceControlPoint_FullIdentifier()
    {
        return "AIRS";
    }

    public static function AirspaceControlPoint_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AirspaceControlPoint_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AirspaceControlPoint_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// One of possible control point type codes, such as CP, ER, OT, etc.
    /// Example: /// Example: CP
    /// Constraints: Minimum length = 0, Maximum length = 2
    public function getCtrlPtType()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name applied to the control point, used as a reference.
    /// Example: /// Example: APPLE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCtrlPtName()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds) format that represents the location of the control point.
    /// Example: /// Example: 203632N0594256E
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getCtrlPtLocation()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The altitude of the control point.
    /// Example: /// Example: BRFL:MSL-FL230
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCtrlPtAltitude()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAirspaceControlPoint_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AirspaceControlPoint_Full
     */
    public static function createAirspaceControlPoint_Full(FlatBufferBuilder $builder, $ctrlPtType, $ctrlPtName, $ctrlPtLocation, $ctrlPtAltitude)
    {
        $builder->startObject(4);
        self::addCtrlPtType($builder, $ctrlPtType);
        self::addCtrlPtName($builder, $ctrlPtName);
        self::addCtrlPtLocation($builder, $ctrlPtLocation);
        self::addCtrlPtAltitude($builder, $ctrlPtAltitude);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCtrlPtType(FlatBufferBuilder $builder, $ctrlPtType)
    {
        $builder->addOffsetX(0, $ctrlPtType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCtrlPtName(FlatBufferBuilder $builder, $ctrlPtName)
    {
        $builder->addOffsetX(1, $ctrlPtName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCtrlPtLocation(FlatBufferBuilder $builder, $ctrlPtLocation)
    {
        $builder->addOffsetX(2, $ctrlPtLocation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCtrlPtAltitude(FlatBufferBuilder $builder, $ctrlPtAltitude)
    {
        $builder->addOffsetX(3, $ctrlPtAltitude, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAirspaceControlPoint_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAirspaceControlPoint_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRS");
    }
}
