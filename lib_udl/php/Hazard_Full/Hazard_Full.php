<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Hazard contains information concerning the exposure of a geographic area to a Chemical, Biological, Radiological, or Nuclear (CBRN) contaminant. The Hazard schema includes the detection time and type of contamination as well as optional information regarding specific material properties, the extent of contamination, and identification of affected regions.
class Hazard_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Hazard_Full
     */
    public static function getRootAsHazard_Full(ByteBuffer $bb)
    {
        $obj = new Hazard_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Hazard_FullIdentifier()
    {
        return "HAZA";
    }

    public static function Hazard_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Hazard_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Hazard_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: HAZARD-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of hazard (Chemical, Biological, Radiological, Nuclear) detect associated with this record.
    /// Example: /// Example: Chemical
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getDetectType()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The detect time, in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2022-03-07T14:51:39.653Z
    /// Constraints: No constraints specified.
    public function getDetectTime()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating whether this detection is harmful to humans.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getHarmful()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Array of the specific alarms associated with this detection. The alarms and alarmValues arrays must contain the same number of elements.
    /// Example: /// Example: ['Alarm1', 'Alarm2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAlarms($j)
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAlarmsLength()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the values that correspond to each of the alarms contained in alarms. The alarms and alarmValues arrays must contain the same number of elements.
    /// Example: /// Example: [2.7, 2.9]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAlarmValues($j)
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAlarmValuesLength()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the specific readings associated with this detection. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
    /// Example: /// Example: ['Rad1', 'Rad2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getReadings($j)
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getReadingsLength()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the units that correspond to each of the readingValues. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
    /// Example: /// Example: ['Gray', 'Gray']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getReadingUnits($j)
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getReadingUnitsLength()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the values that correspond to each of the readings contained in readings. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
    /// Example: /// Example: [107.2, 124.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getReadingValues($j)
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getReadingValuesLength()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The specific material type (MT) or MT Code involved in this detection, when applicable. The material type is generally associated with radiological and/or nuclear detections. For further information, reference Nuclear Materials Management and Safeguards System (NMMSS) Users Guide Rev. 2.1.
    /// Example: /// Example: 21
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getMatType()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The specific Material Class for the material associated with this detect. The material class is generally associated with chemical and biological detections.
    /// Example: /// Example: Nerve Agent
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getMatClass()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The material common name associated with this detection.
    /// Example: /// Example: VX
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getMatName()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Radiological Category (1 - 5) which applies to the material associated with this detection, according to the following definitions: 
    /// Category 1: If not safely or securely managed, would be likely to cause permanent injury to a person who handled them or was otherwise in contact with them for more than a few minutes. It would probably be fatal to be close to this amount of unshielded material for a period of a few minutes to an hour. 
    /// Category 2: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for a short time (minutes to hours). It could possibly be fatal to be close to this amount of unshielded radioactive material for a period of hours to days. 
    /// Category 3: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for hours. It could possibly - although it is unlikely to be - fatal to be close to this amount of unshielded radioactive material for a period of days to weeks. 
    /// Category 4: If not safely managed or securely protected, could possibly cause temporary injury to someone who handled them or was otherwise in contact with or close to them for a period of many weeks, though this is unlikely. It is very unlikely anyone would be permanently injured by this amount of radioactive material. 
    /// Category 5: Cannot cause permanent injury. This category applies to x-ray fluorescence devices and electron capture devices.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMatCat()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The CAS Registry Number, also referred to as CAS Number or CAS RN, associated with the this detection. The CAS Number is a unique numerical identifier assigned by the Chemical Abstracts Service (CAS), to every chemical substance described in the open scientific literature. It includes organic and inorganic compounds, minerals, isotopes, alloys, mixtures, and nonstructurable materials (UVCBs, substances of unknown or variable composition, complex reaction products, or biological origin). For further information, reference https://www.cas.org/cas-data/cas-registry.
    /// Example: /// Example: 64-17-5
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getCasRN()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Measure of the concentration of the material associated with this detection, in parts per million (units of contaminant mass per million parts of total mass).
    /// Example: /// Example: 27129
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPpm()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Measure of density of the material associated with this detection, in kg/m^3.
    /// Example: /// Example: 18900.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDensity()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Measure of radioactive concentration of the material associated with this detection, in becquerels/m^3. One becquerel (Bq) is equal to one nuclear decay per second.
    /// Example: /// Example: 1.31
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRadCtrn()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Chemical Agent Monitor (CAM) G-type agent measurement, in number of display bars. In G-mode, CAMs monitor for G-series nerve agents.
    /// Example: /// Example: 2.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGBar()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Chemical Agent Monitor (CAM) H-type agent measurement, in number of display bars. In H-mode, CAMs monitor for blister agents.
    /// Example: /// Example: 3.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHBar()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Atomic Number of the material associated with this detection.
    /// Example: /// Example: 92
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getZ()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The (rounded) Mass Number of the material associated with this detection. The rounded value is the mass number of the most abundant isotope of the element.
    /// Example: /// Example: 238
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getA()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The specific bottle ID associated with this detection.
    /// Example: /// Example: 6264
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getBottleId()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The applicable channel involved in this biological material detection (e.g. Digestive, Eyes, Respiratory, Skin, etc.) .
    /// Example: /// Example: Skin
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getChannel()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The known or projected hazard duration, in seconds, associated with this material detection.
    /// Example: /// Example: 14400
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getDuration()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The radioactivity measurement of the material associated with this detection, in becquerels (Bq). One becquerel (Bq) is equal to one nuclear decay per second.
    /// Example: /// Example: 120.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getActivity()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The deposition measurement of the contaminant to surface area, in kg/m^2.
    /// Example: /// Example: 1.084
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDep()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The deposition concentration of the contaminant to surface area, in becquerels/m^2.
    /// Example: /// Example: 86.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDepCtrn()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Ratio of the chemical substance mass to the total mass of the mixture.
    /// Example: /// Example: 0.029
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMassFrac()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The dose associated with this detection, in gray. Dose is the measure of the energy deposited in matter by ionizing radiation per unit mass. One gray is defined as one Joule of energy absorbed per kilogram of matter.
    /// Example: /// Example: 1.12
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDose()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The concentration time, in (kg/sec)/m^3, associated with this material detection.
    /// Example: /// Example: 1.077
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCtrnTime()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The dose rate associated with this detection, in gray/sec. One gray is defined as one Joule of energy absorbed per kilogram of matter.
    /// Example: /// Example: 1.0000001865
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDoseRate()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// ID of the Point of Interest (POI) record related to this hazard record.
    /// Example: /// Example: POI-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdPOI()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID of the Track record related to this hazard record.
    /// Example: /// Example: TRACK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdTrack()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSource()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Hazard_Full_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startHazard_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(40);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Hazard_Full
     */
    public static function createHazard_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $detectType, $detectTime, $harmful, $alarms, $alarmValues, $readings, $readingUnits, $readingValues, $matType, $matClass, $matName, $matCat, $casRN, $ppm, $density, $radCtrn, $gBar, $hBar, $z, $a, $bottleId, $channel, $duration, $activity, $dep, $depCtrn, $massFrac, $dose, $ctrnTime, $doseRate, $idPOI, $idTrack, $createdAt, $createdBy, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(40);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addDetectType($builder, $detectType);
        self::addDetectTime($builder, $detectTime);
        self::addHarmful($builder, $harmful);
        self::addAlarms($builder, $alarms);
        self::addAlarmValues($builder, $alarmValues);
        self::addReadings($builder, $readings);
        self::addReadingUnits($builder, $readingUnits);
        self::addReadingValues($builder, $readingValues);
        self::addMatType($builder, $matType);
        self::addMatClass($builder, $matClass);
        self::addMatName($builder, $matName);
        self::addMatCat($builder, $matCat);
        self::addCasRN($builder, $casRN);
        self::addPpm($builder, $ppm);
        self::addDensity($builder, $density);
        self::addRadCtrn($builder, $radCtrn);
        self::addGBar($builder, $gBar);
        self::addHBar($builder, $hBar);
        self::addZ($builder, $z);
        self::addA($builder, $a);
        self::addBottleId($builder, $bottleId);
        self::addChannel($builder, $channel);
        self::addDuration($builder, $duration);
        self::addActivity($builder, $activity);
        self::addDep($builder, $dep);
        self::addDepCtrn($builder, $depCtrn);
        self::addMassFrac($builder, $massFrac);
        self::addDose($builder, $dose);
        self::addCtrnTime($builder, $ctrnTime);
        self::addDoseRate($builder, $doseRate);
        self::addIdPOI($builder, $idPOI);
        self::addIdTrack($builder, $idTrack);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDetectType(FlatBufferBuilder $builder, $detectType)
    {
        $builder->addOffsetX(2, $detectType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDetectTime(FlatBufferBuilder $builder, $detectTime)
    {
        $builder->addOffsetX(3, $detectTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addHarmful(FlatBufferBuilder $builder, $harmful)
    {
        $builder->addBoolX(4, $harmful, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAlarms(FlatBufferBuilder $builder, $alarms)
    {
        $builder->addOffsetX(5, $alarms, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAlarmsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAlarmsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAlarmValues(FlatBufferBuilder $builder, $alarmValues)
    {
        $builder->addOffsetX(6, $alarmValues, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAlarmValuesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAlarmValuesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addReadings(FlatBufferBuilder $builder, $readings)
    {
        $builder->addOffsetX(7, $readings, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createReadingsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startReadingsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addReadingUnits(FlatBufferBuilder $builder, $readingUnits)
    {
        $builder->addOffsetX(8, $readingUnits, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createReadingUnitsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startReadingUnitsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addReadingValues(FlatBufferBuilder $builder, $readingValues)
    {
        $builder->addOffsetX(9, $readingValues, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createReadingValuesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startReadingValuesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMatType(FlatBufferBuilder $builder, $matType)
    {
        $builder->addOffsetX(10, $matType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMatClass(FlatBufferBuilder $builder, $matClass)
    {
        $builder->addOffsetX(11, $matClass, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMatName(FlatBufferBuilder $builder, $matName)
    {
        $builder->addOffsetX(12, $matName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMatCat(FlatBufferBuilder $builder, $matCat)
    {
        $builder->addIntX(13, $matCat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCasRN(FlatBufferBuilder $builder, $casRN)
    {
        $builder->addOffsetX(14, $casRN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPpm(FlatBufferBuilder $builder, $ppm)
    {
        $builder->addIntX(15, $ppm, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDensity(FlatBufferBuilder $builder, $density)
    {
        $builder->addDoubleX(16, $density, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRadCtrn(FlatBufferBuilder $builder, $radCtrn)
    {
        $builder->addDoubleX(17, $radCtrn, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGBar(FlatBufferBuilder $builder, $gBar)
    {
        $builder->addDoubleX(18, $gBar, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHBar(FlatBufferBuilder $builder, $hBar)
    {
        $builder->addDoubleX(19, $hBar, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addZ(FlatBufferBuilder $builder, $z)
    {
        $builder->addIntX(20, $z, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addA(FlatBufferBuilder $builder, $a)
    {
        $builder->addIntX(21, $a, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBottleId(FlatBufferBuilder $builder, $bottleId)
    {
        $builder->addOffsetX(22, $bottleId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addChannel(FlatBufferBuilder $builder, $channel)
    {
        $builder->addOffsetX(23, $channel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDuration(FlatBufferBuilder $builder, $duration)
    {
        $builder->addIntX(24, $duration, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addActivity(FlatBufferBuilder $builder, $activity)
    {
        $builder->addDoubleX(25, $activity, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDep(FlatBufferBuilder $builder, $dep)
    {
        $builder->addDoubleX(26, $dep, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDepCtrn(FlatBufferBuilder $builder, $depCtrn)
    {
        $builder->addDoubleX(27, $depCtrn, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMassFrac(FlatBufferBuilder $builder, $massFrac)
    {
        $builder->addDoubleX(28, $massFrac, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDose(FlatBufferBuilder $builder, $dose)
    {
        $builder->addDoubleX(29, $dose, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCtrnTime(FlatBufferBuilder $builder, $ctrnTime)
    {
        $builder->addDoubleX(30, $ctrnTime, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDoseRate(FlatBufferBuilder $builder, $doseRate)
    {
        $builder->addDoubleX(31, $doseRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdPOI(FlatBufferBuilder $builder, $idPOI)
    {
        $builder->addOffsetX(32, $idPOI, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdTrack(FlatBufferBuilder $builder, $idTrack)
    {
        $builder->addOffsetX(33, $idTrack, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(34, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(35, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(36, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(37, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(38, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(39, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endHazard_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishHazard_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "HAZA");
    }
}
