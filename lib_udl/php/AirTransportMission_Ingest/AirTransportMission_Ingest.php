<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// The information in an Air Transport Mission contains unique identification, description of the mission objective, aircraft and crew assignments, mission alias, embarkation/debarkation cargo locations, priority, and other mission characteristics.
class AirTransportMission_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AirTransportMission_Ingest
     */
    public static function getRootAsAirTransportMission_Ingest(ByteBuffer $bb)
    {
        $obj = new AirTransportMission_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AirTransportMission_IngestIdentifier()
    {
        return "AIRT";
    }

    public static function AirTransportMission_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AirTransportMission_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AirTransportMission_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The mission identifier provided by the originating source.
    /// Example: /// Example: 614bebb6-a62e-053c-ca51-e79f8a402b28
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOrigMissionId()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) Encode/Decode procedures.
    /// Example: /// Example: AJM7939B1123
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAmcMissionId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Global Decision Support System (GDSS) mission unique identifier.
    /// Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getGdssMissionId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the previous air transport mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
    /// Example: /// Example: a77055df-edc3-4047-a5fa-604f80b9fe3c
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPrevMissionId()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Air Mobility Command (AMC) mission identifier of the previous air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
    /// Example: /// Example: AJM7939B1122
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPrevAMCMissionId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the next mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
    /// Example: /// Example: 186e5658-1079-45c0-bccc-02d2fa31b663
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getNextMissionId()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Air Mobility Command (AMC) mission identifier of the next air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
    /// Example: /// Example: AJM7939B1124
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getNextAMCMissionId()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A description of this mission's objective.
    /// Example: /// Example: Deliver water to island X.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getObjective()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A description of this mission's purpose (e.g. why this mission needs to happen, what is the mission supporting, etc.).
    /// Example: /// Example: People at island X need water ASAP. Two previous attempts failed due to weather.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getPurpose()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Highest Joint Chiefs of Staff priority of this mission.
    /// Example: /// Example: 1A3
    /// Constraints: Minimum length = 3, Maximum length = 3
    public function getJcsPriority()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating this is a close watch mission.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getCw()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The type of mission (e.g. SAAM, CHNL, etc.).
    /// Example: /// Example: SAAM
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getType()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The International Civil Aviation Organization (ICAO) site code of first cargo pick up.
    /// Example: /// Example: KFAY
    /// Constraints: Minimum length = 4, Maximum length = 4
    public function getFirstPickUp()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The International Civil Aviation Organization (ICAO) site code of last cargo drop off.
    /// Example: /// Example: PGUA
    /// Constraints: Minimum length = 4, Maximum length = 4
    public function getLastDropOff()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mission alias.
    /// Example: /// Example: PACIFIC DEPLOY / CHAP 3 MOVEMENT
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getAlias()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The call sign for this mission.
    /// Example: /// Example: RCH123
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCallSign()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the operation that this mission supports.
    /// Example: /// Example: Golden Eye
    /// Constraints: Minimum length = 0, Maximum length = 100
    public function getOperation()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Numbered Air Force (NAF) organization that owns the mission.
    /// Example: /// Example: 18AF
    /// Constraints: Minimum length = 0, Maximum length = 100
    public function getNaf()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The unit the mission is allocated to.
    /// Example: /// Example: 437 AEW
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getAllocatedUnit()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
    /// Example: /// Example: MIXED
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getLoadCategoryType()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Current state of the mission.
    /// Example: /// Example: EXECUTION
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getState()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The number of minutes a mission is off schedule based on the source system's business rules. Positive numbers are early, negative numbers are late.
    /// Example: /// Example: -90.12
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSourceSysDeviation()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve clearance requests.
    /// Example: /// Example: 1083034
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getApacsId()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
    /// Example: /// Example: G2-182402-AB
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getDipWorksheetName()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSource()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AirTransportMission_Ingest_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRequirements($j)
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRequirementsLength()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRemarks($j)
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRemarksLength()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Collection of Hazardous Material information associated with this Air Transport Mission.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getHazMat($j)
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getHazMatLength()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAirTransportMission_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(38);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AirTransportMission_Ingest
     */
    public static function createAirTransportMission_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $origMissionId, $amcMissionId, $gdssMissionId, $prevMissionId, $prevAMCMissionId, $nextMissionId, $nextAMCMissionId, $objective, $purpose, $jcsPriority, $cw, $type, $firstPickUp, $lastDropOff, $alias, $callSign, $operation, $naf, $allocatedUnit, $loadCategoryType, $state, $sourceSysDeviation, $apacsId, $dipWorksheetName, $createdAt, $createdBy, $updatedAt, $updatedBy, $sourceDL, $source, $origin, $dataMode, $origNetwork, $requirements, $remarks, $hazMat)
    {
        $builder->startObject(38);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addOrigMissionId($builder, $origMissionId);
        self::addAmcMissionId($builder, $amcMissionId);
        self::addGdssMissionId($builder, $gdssMissionId);
        self::addPrevMissionId($builder, $prevMissionId);
        self::addPrevAMCMissionId($builder, $prevAMCMissionId);
        self::addNextMissionId($builder, $nextMissionId);
        self::addNextAMCMissionId($builder, $nextAMCMissionId);
        self::addObjective($builder, $objective);
        self::addPurpose($builder, $purpose);
        self::addJcsPriority($builder, $jcsPriority);
        self::addCw($builder, $cw);
        self::addType($builder, $type);
        self::addFirstPickUp($builder, $firstPickUp);
        self::addLastDropOff($builder, $lastDropOff);
        self::addAlias($builder, $alias);
        self::addCallSign($builder, $callSign);
        self::addOperation($builder, $operation);
        self::addNaf($builder, $naf);
        self::addAllocatedUnit($builder, $allocatedUnit);
        self::addLoadCategoryType($builder, $loadCategoryType);
        self::addState($builder, $state);
        self::addSourceSysDeviation($builder, $sourceSysDeviation);
        self::addApacsId($builder, $apacsId);
        self::addDipWorksheetName($builder, $dipWorksheetName);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        self::addRequirements($builder, $requirements);
        self::addRemarks($builder, $remarks);
        self::addHazMat($builder, $hazMat);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigMissionId(FlatBufferBuilder $builder, $origMissionId)
    {
        $builder->addOffsetX(2, $origMissionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAmcMissionId(FlatBufferBuilder $builder, $amcMissionId)
    {
        $builder->addOffsetX(3, $amcMissionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGdssMissionId(FlatBufferBuilder $builder, $gdssMissionId)
    {
        $builder->addOffsetX(4, $gdssMissionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPrevMissionId(FlatBufferBuilder $builder, $prevMissionId)
    {
        $builder->addOffsetX(5, $prevMissionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPrevAMCMissionId(FlatBufferBuilder $builder, $prevAMCMissionId)
    {
        $builder->addOffsetX(6, $prevAMCMissionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNextMissionId(FlatBufferBuilder $builder, $nextMissionId)
    {
        $builder->addOffsetX(7, $nextMissionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNextAMCMissionId(FlatBufferBuilder $builder, $nextAMCMissionId)
    {
        $builder->addOffsetX(8, $nextAMCMissionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjective(FlatBufferBuilder $builder, $objective)
    {
        $builder->addOffsetX(9, $objective, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPurpose(FlatBufferBuilder $builder, $purpose)
    {
        $builder->addOffsetX(10, $purpose, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJcsPriority(FlatBufferBuilder $builder, $jcsPriority)
    {
        $builder->addOffsetX(11, $jcsPriority, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addCw(FlatBufferBuilder $builder, $cw)
    {
        $builder->addBoolX(12, $cw, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(13, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFirstPickUp(FlatBufferBuilder $builder, $firstPickUp)
    {
        $builder->addOffsetX(14, $firstPickUp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastDropOff(FlatBufferBuilder $builder, $lastDropOff)
    {
        $builder->addOffsetX(15, $lastDropOff, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAlias(FlatBufferBuilder $builder, $alias)
    {
        $builder->addOffsetX(16, $alias, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCallSign(FlatBufferBuilder $builder, $callSign)
    {
        $builder->addOffsetX(17, $callSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOperation(FlatBufferBuilder $builder, $operation)
    {
        $builder->addOffsetX(18, $operation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNaf(FlatBufferBuilder $builder, $naf)
    {
        $builder->addOffsetX(19, $naf, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAllocatedUnit(FlatBufferBuilder $builder, $allocatedUnit)
    {
        $builder->addOffsetX(20, $allocatedUnit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLoadCategoryType(FlatBufferBuilder $builder, $loadCategoryType)
    {
        $builder->addOffsetX(21, $loadCategoryType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addState(FlatBufferBuilder $builder, $state)
    {
        $builder->addOffsetX(22, $state, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSourceSysDeviation(FlatBufferBuilder $builder, $sourceSysDeviation)
    {
        $builder->addDoubleX(23, $sourceSysDeviation, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addApacsId(FlatBufferBuilder $builder, $apacsId)
    {
        $builder->addOffsetX(24, $apacsId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDipWorksheetName(FlatBufferBuilder $builder, $dipWorksheetName)
    {
        $builder->addOffsetX(25, $dipWorksheetName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(26, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(27, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(28, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(29, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(30, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(31, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(32, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(33, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(34, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRequirements(FlatBufferBuilder $builder, $requirements)
    {
        $builder->addOffsetX(35, $requirements, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRequirementsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRequirementsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRemarks(FlatBufferBuilder $builder, $remarks)
    {
        $builder->addOffsetX(36, $remarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRemarksVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRemarksVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addHazMat(FlatBufferBuilder $builder, $hazMat)
    {
        $builder->addOffsetX(37, $hazMat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createHazMatVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startHazMatVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAirTransportMission_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAirTransportMission_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRT");
    }
}
