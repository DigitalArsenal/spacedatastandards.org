<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// ISR Collection data.
class ISRCollection_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return ISRCollection_Ingest
     */
    public static function getRootAsISRCollection_Ingest(ByteBuffer $bb)
    {
        $obj = new ISRCollection_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function ISRCollection_IngestIdentifier()
    {
        return "ISRC";
    }

    public static function ISRCollection_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ISRCollection_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return ISRCollection_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ISRCOLLECTION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Version of the IDEX software the request came from for compatibility.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getIdexVersion()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Human readable Mission Name.
    /// Example: /// Example: Example mission name
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getName()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mission Identifier.
    /// Example: /// Example: myTask-2020-04-23T00:00:00.000Z
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMissionId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Designation of mission Area Of Responsibility.
    /// Example: /// Example: Kandahar
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMissionAOR()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Primary type of intelligence to be collected during the mission.
    /// Example: /// Example: Sig
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMissionPrimaryIntelDiscipline()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Sub category of primary intelligence to be collected.
    /// Example: /// Example: FMV
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMissionPrimarySubCategory()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of intelligence to be collected second.
    /// Example: /// Example: Intelligence_2
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMissionSecondaryIntelDiscipline()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mission sub category for secondary intelligence discipline to be collected.
    /// Example: /// Example: Convoy
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMissionSecondarySubCategory()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// What is the primary objective(Role) of this mission.
    /// Example: /// Example: Targeting of Lead Vehicle
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMissionRole()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mission operation name.
    /// Example: /// Example: OP-HONEY-BADGER
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMissionOperation()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mission Priority (1-n).
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMissionPriority()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Name of the Supporting unit/Location that is performing this mission.
    /// Example: /// Example: ENVOYS
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMissionSupportedUnit()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Text version of what we are emphasizing in this mission.
    /// Example: /// Example: Mission emphasis
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMissionEmphasis()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMissionStartPointLat()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 80.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMissionStartPointLong()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Mission geographical collection area.
    /// Example: /// Example: Example collection area
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getMissionCollectionArea()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Joint Operations Area.
    /// Example: /// Example: Operation area
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMissionJoa()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A synchronization matrix is used to organize the logistics synchronization process during a mission.
    /// Example: /// Example: MATRIX
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMissionSyncMatrixBin()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Country code of the mission.  A Country may represent countries, multi-national consortiums, and international organizations.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getMissionCountry()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Region of the mission.
    /// Example: /// Example: Example Region
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMissionRegion()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Subregion of the mission.
    /// Example: /// Example: Example Subregion
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getMissionSubRegion()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mission desired collection requirements.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCollectionRequirements($j)
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCollectionRequirementsLength()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Object for data dissemination.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTransit($j)
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTransitLength()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Individual taskings to complete the mission.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTaskings($j)
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTaskingsLength()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2021-01-19T01:01:15.001Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \ISRCollection_Ingest_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startISRCollection_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(34);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return ISRCollection_Ingest
     */
    public static function createISRCollection_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $idexVersion, $name, $missionId, $missionAOR, $missionPrimaryIntelDiscipline, $missionPrimarySubCategory, $missionSecondaryIntelDiscipline, $missionSecondarySubCategory, $missionRole, $missionOperation, $missionPriority, $missionSupportedUnit, $missionEmphasis, $missionStartPointLat, $missionStartPointLong, $missionCollectionArea, $missionJoa, $missionSyncMatrixBin, $missionCountry, $missionRegion, $missionSubRegion, $collectionRequirements, $transit, $taskings, $createdAt, $createdBy, $updatedAt, $updatedBy, $source, $origin, $dataMode, $origNetwork)
    {
        $builder->startObject(34);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdexVersion($builder, $idexVersion);
        self::addName($builder, $name);
        self::addMissionId($builder, $missionId);
        self::addMissionAOR($builder, $missionAOR);
        self::addMissionPrimaryIntelDiscipline($builder, $missionPrimaryIntelDiscipline);
        self::addMissionPrimarySubCategory($builder, $missionPrimarySubCategory);
        self::addMissionSecondaryIntelDiscipline($builder, $missionSecondaryIntelDiscipline);
        self::addMissionSecondarySubCategory($builder, $missionSecondarySubCategory);
        self::addMissionRole($builder, $missionRole);
        self::addMissionOperation($builder, $missionOperation);
        self::addMissionPriority($builder, $missionPriority);
        self::addMissionSupportedUnit($builder, $missionSupportedUnit);
        self::addMissionEmphasis($builder, $missionEmphasis);
        self::addMissionStartPointLat($builder, $missionStartPointLat);
        self::addMissionStartPointLong($builder, $missionStartPointLong);
        self::addMissionCollectionArea($builder, $missionCollectionArea);
        self::addMissionJoa($builder, $missionJoa);
        self::addMissionSyncMatrixBin($builder, $missionSyncMatrixBin);
        self::addMissionCountry($builder, $missionCountry);
        self::addMissionRegion($builder, $missionRegion);
        self::addMissionSubRegion($builder, $missionSubRegion);
        self::addCollectionRequirements($builder, $collectionRequirements);
        self::addTransit($builder, $transit);
        self::addTaskings($builder, $taskings);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addIdexVersion(FlatBufferBuilder $builder, $idexVersion)
    {
        $builder->addIntX(2, $idexVersion, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(3, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionId(FlatBufferBuilder $builder, $missionId)
    {
        $builder->addOffsetX(4, $missionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionAOR(FlatBufferBuilder $builder, $missionAOR)
    {
        $builder->addOffsetX(5, $missionAOR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionPrimaryIntelDiscipline(FlatBufferBuilder $builder, $missionPrimaryIntelDiscipline)
    {
        $builder->addOffsetX(6, $missionPrimaryIntelDiscipline, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionPrimarySubCategory(FlatBufferBuilder $builder, $missionPrimarySubCategory)
    {
        $builder->addOffsetX(7, $missionPrimarySubCategory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionSecondaryIntelDiscipline(FlatBufferBuilder $builder, $missionSecondaryIntelDiscipline)
    {
        $builder->addOffsetX(8, $missionSecondaryIntelDiscipline, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionSecondarySubCategory(FlatBufferBuilder $builder, $missionSecondarySubCategory)
    {
        $builder->addOffsetX(9, $missionSecondarySubCategory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionRole(FlatBufferBuilder $builder, $missionRole)
    {
        $builder->addOffsetX(10, $missionRole, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionOperation(FlatBufferBuilder $builder, $missionOperation)
    {
        $builder->addOffsetX(11, $missionOperation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMissionPriority(FlatBufferBuilder $builder, $missionPriority)
    {
        $builder->addIntX(12, $missionPriority, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionSupportedUnit(FlatBufferBuilder $builder, $missionSupportedUnit)
    {
        $builder->addOffsetX(13, $missionSupportedUnit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionEmphasis(FlatBufferBuilder $builder, $missionEmphasis)
    {
        $builder->addOffsetX(14, $missionEmphasis, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMissionStartPointLat(FlatBufferBuilder $builder, $missionStartPointLat)
    {
        $builder->addDoubleX(15, $missionStartPointLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMissionStartPointLong(FlatBufferBuilder $builder, $missionStartPointLong)
    {
        $builder->addDoubleX(16, $missionStartPointLong, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionCollectionArea(FlatBufferBuilder $builder, $missionCollectionArea)
    {
        $builder->addOffsetX(17, $missionCollectionArea, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionJoa(FlatBufferBuilder $builder, $missionJoa)
    {
        $builder->addOffsetX(18, $missionJoa, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionSyncMatrixBin(FlatBufferBuilder $builder, $missionSyncMatrixBin)
    {
        $builder->addOffsetX(19, $missionSyncMatrixBin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionCountry(FlatBufferBuilder $builder, $missionCountry)
    {
        $builder->addOffsetX(20, $missionCountry, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionRegion(FlatBufferBuilder $builder, $missionRegion)
    {
        $builder->addOffsetX(21, $missionRegion, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionSubRegion(FlatBufferBuilder $builder, $missionSubRegion)
    {
        $builder->addOffsetX(22, $missionSubRegion, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCollectionRequirements(FlatBufferBuilder $builder, $collectionRequirements)
    {
        $builder->addOffsetX(23, $collectionRequirements, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCollectionRequirementsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCollectionRequirementsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTransit(FlatBufferBuilder $builder, $transit)
    {
        $builder->addOffsetX(24, $transit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTransitVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTransitVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTaskings(FlatBufferBuilder $builder, $taskings)
    {
        $builder->addOffsetX(25, $taskings, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTaskingsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTaskingsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(26, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(27, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(28, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(29, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(30, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(31, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(32, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(33, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endISRCollection_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishISRCollection_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ISRC");
    }
}
