<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model object representing on-orbit objects or satellites in the system.
class Onorbit_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Onorbit_Abridged
     */
    public static function getRootAsOnorbit_Abridged(ByteBuffer $bb)
    {
        $obj = new Onorbit_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Onorbit_AbridgedIdentifier()
    {
        return "ONOR";
    }

    public static function Onorbit_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Onorbit_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Onorbit_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Common name of the on-orbit object.
    /// Example: /// Example: Example common name
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getCommonName()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Constellation to which this satellite belongs.
    /// Example: /// Example: Big Dipper
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getConstellation()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.
    /// Example: /// Example: 2021123ABC
    /// Constraints: Minimum length = 0, Maximum length = 45
    public function getIntlDes()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Date of launch.
    /// Example: /// Example: 2018-01-01
    /// Constraints: No constraints specified.
    public function getLaunchDate()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Date of decay.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getDecayDate()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.
    /// Example: /// Example: PAYLOAD
    /// Constraints: Minimum length = 0, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getObjectType()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Onorbit_Abridged_objectType_Enum::ROCKET_BODY;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mission number of the on-orbit object.
    /// Example: /// Example: Expedition 1
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getMissionNumber()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).
    /// Example: /// Example: Lunar
    /// Constraints: Minimum length = 0, Maximum length = 45
    /**
     * @return sbyte
     */
    public function getCategory()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Onorbit_Abridged_category_Enum::UNKNOWN;
    }

    /// Estimated lifetime of the on-orbit payload, if known.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getLifetimeYears()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Alternate name of the on-orbit object.
    /// Example: /// Example: Alternate Name
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getAltName()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Onorbit_Abridged_dataMode_Enum::REAL;
    }

    /// Id of the associated launchSite entity.
    /// Example: /// Example: LAUNCHSITE-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getLaunchSiteId()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: /// Example: US
    /// Constraints: No constraints specified.
    public function getCountryCode()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startOnorbit_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(21);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Onorbit_Abridged
     */
    public static function createOnorbit_Abridged(FlatBufferBuilder $builder, $idOnOrbit, $classificationMarking, $satNo, $commonName, $constellation, $intlDes, $launchDate, $decayDate, $objectType, $origin, $missionNumber, $category, $lifetimeYears, $altName, $createdAt, $createdBy, $source, $dataMode, $launchSiteId, $countryCode, $origNetwork)
    {
        $builder->startObject(21);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addSatNo($builder, $satNo);
        self::addCommonName($builder, $commonName);
        self::addConstellation($builder, $constellation);
        self::addIntlDes($builder, $intlDes);
        self::addLaunchDate($builder, $launchDate);
        self::addDecayDate($builder, $decayDate);
        self::addObjectType($builder, $objectType);
        self::addOrigin($builder, $origin);
        self::addMissionNumber($builder, $missionNumber);
        self::addCategory($builder, $category);
        self::addLifetimeYears($builder, $lifetimeYears);
        self::addAltName($builder, $altName);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addDataMode($builder, $dataMode);
        self::addLaunchSiteId($builder, $launchSiteId);
        self::addCountryCode($builder, $countryCode);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(0, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(2, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCommonName(FlatBufferBuilder $builder, $commonName)
    {
        $builder->addOffsetX(3, $commonName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addConstellation(FlatBufferBuilder $builder, $constellation)
    {
        $builder->addOffsetX(4, $constellation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIntlDes(FlatBufferBuilder $builder, $intlDes)
    {
        $builder->addOffsetX(5, $intlDes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchDate(FlatBufferBuilder $builder, $launchDate)
    {
        $builder->addOffsetX(6, $launchDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDecayDate(FlatBufferBuilder $builder, $decayDate)
    {
        $builder->addOffsetX(7, $decayDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addObjectType(FlatBufferBuilder $builder, $objectType)
    {
        $builder->addSbyteX(8, $objectType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(9, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionNumber(FlatBufferBuilder $builder, $missionNumber)
    {
        $builder->addOffsetX(10, $missionNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addCategory(FlatBufferBuilder $builder, $category)
    {
        $builder->addSbyteX(11, $category, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addLifetimeYears(FlatBufferBuilder $builder, $lifetimeYears)
    {
        $builder->addIntX(12, $lifetimeYears, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltName(FlatBufferBuilder $builder, $altName)
    {
        $builder->addOffsetX(13, $altName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(14, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(15, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(16, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(17, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchSiteId(FlatBufferBuilder $builder, $launchSiteId)
    {
        $builder->addOffsetX(18, $launchSiteId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountryCode(FlatBufferBuilder $builder, $countryCode)
    {
        $builder->addOffsetX(19, $countryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(20, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endOnorbit_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishOnorbit_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ONOR");
    }
}
