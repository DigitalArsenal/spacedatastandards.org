<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of characteristics and capabilities of a sensor.
class Sensorcharacteristics_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Sensorcharacteristics_Abridged
     */
    public static function getRootAsSensorcharacteristics_Abridged(ByteBuffer $bb)
    {
        $obj = new Sensorcharacteristics_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Sensorcharacteristics_AbridgedIdentifier()
    {
        return "SENS";
    }

    public static function Sensorcharacteristics_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Sensorcharacteristics_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Sensorcharacteristics_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SENSORCHARACTERISTICS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the parent sensor.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Azimuth rate acquisition limit (rad/min).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzimuthRate()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Elevation rate acquisition limit (rad/min).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevationRateGeolm()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Minimum range measurement capability of the sensor (km).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMinRangeLimit()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum observable range limit (km) -- sensor cannot acquire beyond this range.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxRangeLimit()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For Orbiting Sensors, First Card Azimuth limit #1 (left, deg).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLeftClockAngle()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For Orbiting Sensors, First Card Azimuth limit #3 (left, deg).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRightClockAngle()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The angle of the center of a phased array sensor.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBoresight()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The number of degrees off of the boresight for the sensor (degrees).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBoresightOffAngle()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Negative Range-rate/relative velocity limit (km/sec).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNegativeRangeRateLimit()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Positive Range-rate/relative velocity limit (km/sec).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPositiveRangeRateLimit()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Absolute magnitude acquisition limit for optical sensors.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMagnitudeLimit()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Beginning track angle limit (rad). Track angle is the angle between the camera axis and the gimbal plane. Values range from 0 - PI/2.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTrackAngle()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Signal to Noise Ratio (in db). The values for this range from 0.0 - + 99.99 dB.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMinSignalNoiseRatio()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The beam width of a Sensor's Fan (range). The values for this range from (0.0 to PI).
    /// Example: /// Example: 3.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFanBeamWidth()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum taskable range of the sensor (km).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTaskableRange()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum observable sensor range (km).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxObservableRange()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Radio frequency (if sensor is RF).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRadioFrequency()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Radar frequency of the sensor (if a radar sensor).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRadarFrequency()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Radar transmit power in Watts.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTransmitPower()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Horizontal field of view.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHFOV()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Vertical field of view.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVFOV()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Horizontal pixel resolution.
    /// Example: /// Example: 1000
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getHResPixels()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Vertical pixel resolution.
    /// Example: /// Example: 1000
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getVResPixels()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Sensor band.
    /// Example: /// Example: BAND
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getBand()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Max deviation angle of the sensor in degrees.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxDeviationAngle()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optical sensor camera aperture.
    /// Example: /// Example: 2.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAperture()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Leftmost GEO belt longitude limit for this sensor (if applicable).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLeftGeoBeltLimit()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rightmost GEO belt longitude limit for this sensor (if applicable).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRightGeoBeltLimit()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the radar, in scans/minute.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAsrScanRate()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For radar based sensors, K-factor is a relative indicator of refractivity that infers the amount of radar beam bending due to atmosphere. (1<K<2).
    /// Example: /// Example: 1.4
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getK()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For radar based sensors, the focal point elevation of the radar at the site, in meters.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFocalPoint()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For tower sensors, the physical height of the sensor tower, in meters.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTowerHeight()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// True North correction for the sensor, in ACP (Azimunth Change Pulse) count.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTrueNorthCorrector()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Angle between magnetic north and true north at the sensor site, in degrees.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMagDec()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peformance zone-1 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZ1MinRange()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peformance zone-2 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZ2MinRange()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peformance zone-1 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZ1MaxRange()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peformance zone-2 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZ2MaxRange()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For radar based sensors, radar maximum unambiguous range, in km.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRadarMUR()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For radar based sensors, probability of the indication of the presence of a radar target due to noise or interference.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getProbFalseAlarm()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For radar based sensors, pulse repetition frequency, in Hz. Number of new pulses tranmistted per second.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPrf()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For radar based sensors, radar pulse width, in microseconds. The transmit time of a pulse.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRadarPulseWidth()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For radar based sensors, number of integrated pulses in a transmit cycle.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumIntegratedPulses()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Antenna true tilt, in degrees.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTrueTilt()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Message data format transmitted by the sensor digitizer.
    /// Example: /// Example: DATA_FORMAT
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getRadarMessageFormat()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// For radar based sensors, expression of the radar system noise, aggregated as an equivalent thermal noise value, in degrees Kelvin.
    /// Example: /// Example: 3.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSystemNoiseTemperature()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Sensorcharacteristics_Abridged_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSensorcharacteristics_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(54);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Sensorcharacteristics_Abridged
     */
    public static function createSensorcharacteristics_Abridged(FlatBufferBuilder $builder, $id, $idSensor, $classificationMarking, $origNetwork, $azimuthRate, $elevationRateGeolm, $minRangeLimit, $maxRangeLimit, $leftClockAngle, $rightClockAngle, $boresight, $boresightOffAngle, $negativeRangeRateLimit, $positiveRangeRateLimit, $magnitudeLimit, $trackAngle, $minSignalNoiseRatio, $fanBeamWidth, $taskableRange, $maxObservableRange, $radioFrequency, $radarFrequency, $transmitPower, $hFOV, $vFOV, $hResPixels, $vResPixels, $band, $maxDeviationAngle, $aperture, $leftGeoBeltLimit, $rightGeoBeltLimit, $asrScanRate, $k, $focalPoint, $towerHeight, $trueNorthCorrector, $magDec, $z1MinRange, $z2MinRange, $z1MaxRange, $z2MaxRange, $radarMUR, $probFalseAlarm, $prf, $radarPulseWidth, $numIntegratedPulses, $trueTilt, $radarMessageFormat, $systemNoiseTemperature, $source, $dataMode, $createdAt, $createdBy)
    {
        $builder->startObject(54);
        self::addId($builder, $id);
        self::addIdSensor($builder, $idSensor);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addOrigNetwork($builder, $origNetwork);
        self::addAzimuthRate($builder, $azimuthRate);
        self::addElevationRateGeolm($builder, $elevationRateGeolm);
        self::addMinRangeLimit($builder, $minRangeLimit);
        self::addMaxRangeLimit($builder, $maxRangeLimit);
        self::addLeftClockAngle($builder, $leftClockAngle);
        self::addRightClockAngle($builder, $rightClockAngle);
        self::addBoresight($builder, $boresight);
        self::addBoresightOffAngle($builder, $boresightOffAngle);
        self::addNegativeRangeRateLimit($builder, $negativeRangeRateLimit);
        self::addPositiveRangeRateLimit($builder, $positiveRangeRateLimit);
        self::addMagnitudeLimit($builder, $magnitudeLimit);
        self::addTrackAngle($builder, $trackAngle);
        self::addMinSignalNoiseRatio($builder, $minSignalNoiseRatio);
        self::addFanBeamWidth($builder, $fanBeamWidth);
        self::addTaskableRange($builder, $taskableRange);
        self::addMaxObservableRange($builder, $maxObservableRange);
        self::addRadioFrequency($builder, $radioFrequency);
        self::addRadarFrequency($builder, $radarFrequency);
        self::addTransmitPower($builder, $transmitPower);
        self::addHFOV($builder, $hFOV);
        self::addVFOV($builder, $vFOV);
        self::addHResPixels($builder, $hResPixels);
        self::addVResPixels($builder, $vResPixels);
        self::addBand($builder, $band);
        self::addMaxDeviationAngle($builder, $maxDeviationAngle);
        self::addAperture($builder, $aperture);
        self::addLeftGeoBeltLimit($builder, $leftGeoBeltLimit);
        self::addRightGeoBeltLimit($builder, $rightGeoBeltLimit);
        self::addAsrScanRate($builder, $asrScanRate);
        self::addK($builder, $k);
        self::addFocalPoint($builder, $focalPoint);
        self::addTowerHeight($builder, $towerHeight);
        self::addTrueNorthCorrector($builder, $trueNorthCorrector);
        self::addMagDec($builder, $magDec);
        self::addZ1MinRange($builder, $z1MinRange);
        self::addZ2MinRange($builder, $z2MinRange);
        self::addZ1MaxRange($builder, $z1MaxRange);
        self::addZ2MaxRange($builder, $z2MaxRange);
        self::addRadarMUR($builder, $radarMUR);
        self::addProbFalseAlarm($builder, $probFalseAlarm);
        self::addPrf($builder, $prf);
        self::addRadarPulseWidth($builder, $radarPulseWidth);
        self::addNumIntegratedPulses($builder, $numIntegratedPulses);
        self::addTrueTilt($builder, $trueTilt);
        self::addRadarMessageFormat($builder, $radarMessageFormat);
        self::addSystemNoiseTemperature($builder, $systemNoiseTemperature);
        self::addSource($builder, $source);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(1, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(2, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(3, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzimuthRate(FlatBufferBuilder $builder, $azimuthRate)
    {
        $builder->addDoubleX(4, $azimuthRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevationRateGeolm(FlatBufferBuilder $builder, $elevationRateGeolm)
    {
        $builder->addDoubleX(5, $elevationRateGeolm, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMinRangeLimit(FlatBufferBuilder $builder, $minRangeLimit)
    {
        $builder->addDoubleX(6, $minRangeLimit, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxRangeLimit(FlatBufferBuilder $builder, $maxRangeLimit)
    {
        $builder->addDoubleX(7, $maxRangeLimit, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLeftClockAngle(FlatBufferBuilder $builder, $leftClockAngle)
    {
        $builder->addDoubleX(8, $leftClockAngle, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRightClockAngle(FlatBufferBuilder $builder, $rightClockAngle)
    {
        $builder->addDoubleX(9, $rightClockAngle, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBoresight(FlatBufferBuilder $builder, $boresight)
    {
        $builder->addDoubleX(10, $boresight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBoresightOffAngle(FlatBufferBuilder $builder, $boresightOffAngle)
    {
        $builder->addDoubleX(11, $boresightOffAngle, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNegativeRangeRateLimit(FlatBufferBuilder $builder, $negativeRangeRateLimit)
    {
        $builder->addDoubleX(12, $negativeRangeRateLimit, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPositiveRangeRateLimit(FlatBufferBuilder $builder, $positiveRangeRateLimit)
    {
        $builder->addDoubleX(13, $positiveRangeRateLimit, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMagnitudeLimit(FlatBufferBuilder $builder, $magnitudeLimit)
    {
        $builder->addDoubleX(14, $magnitudeLimit, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTrackAngle(FlatBufferBuilder $builder, $trackAngle)
    {
        $builder->addDoubleX(15, $trackAngle, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMinSignalNoiseRatio(FlatBufferBuilder $builder, $minSignalNoiseRatio)
    {
        $builder->addDoubleX(16, $minSignalNoiseRatio, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFanBeamWidth(FlatBufferBuilder $builder, $fanBeamWidth)
    {
        $builder->addDoubleX(17, $fanBeamWidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTaskableRange(FlatBufferBuilder $builder, $taskableRange)
    {
        $builder->addDoubleX(18, $taskableRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxObservableRange(FlatBufferBuilder $builder, $maxObservableRange)
    {
        $builder->addDoubleX(19, $maxObservableRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRadioFrequency(FlatBufferBuilder $builder, $radioFrequency)
    {
        $builder->addDoubleX(20, $radioFrequency, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRadarFrequency(FlatBufferBuilder $builder, $radarFrequency)
    {
        $builder->addDoubleX(21, $radarFrequency, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTransmitPower(FlatBufferBuilder $builder, $transmitPower)
    {
        $builder->addDoubleX(22, $transmitPower, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHFOV(FlatBufferBuilder $builder, $hFOV)
    {
        $builder->addDoubleX(23, $hFOV, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVFOV(FlatBufferBuilder $builder, $vFOV)
    {
        $builder->addDoubleX(24, $vFOV, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addHResPixels(FlatBufferBuilder $builder, $hResPixels)
    {
        $builder->addIntX(25, $hResPixels, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addVResPixels(FlatBufferBuilder $builder, $vResPixels)
    {
        $builder->addIntX(26, $vResPixels, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBand(FlatBufferBuilder $builder, $band)
    {
        $builder->addOffsetX(27, $band, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxDeviationAngle(FlatBufferBuilder $builder, $maxDeviationAngle)
    {
        $builder->addDoubleX(28, $maxDeviationAngle, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAperture(FlatBufferBuilder $builder, $aperture)
    {
        $builder->addDoubleX(29, $aperture, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLeftGeoBeltLimit(FlatBufferBuilder $builder, $leftGeoBeltLimit)
    {
        $builder->addDoubleX(30, $leftGeoBeltLimit, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRightGeoBeltLimit(FlatBufferBuilder $builder, $rightGeoBeltLimit)
    {
        $builder->addDoubleX(31, $rightGeoBeltLimit, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAsrScanRate(FlatBufferBuilder $builder, $asrScanRate)
    {
        $builder->addDoubleX(32, $asrScanRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addK(FlatBufferBuilder $builder, $k)
    {
        $builder->addDoubleX(33, $k, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFocalPoint(FlatBufferBuilder $builder, $focalPoint)
    {
        $builder->addDoubleX(34, $focalPoint, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTowerHeight(FlatBufferBuilder $builder, $towerHeight)
    {
        $builder->addDoubleX(35, $towerHeight, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTrueNorthCorrector(FlatBufferBuilder $builder, $trueNorthCorrector)
    {
        $builder->addIntX(36, $trueNorthCorrector, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMagDec(FlatBufferBuilder $builder, $magDec)
    {
        $builder->addDoubleX(37, $magDec, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZ1MinRange(FlatBufferBuilder $builder, $z1MinRange)
    {
        $builder->addDoubleX(38, $z1MinRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZ2MinRange(FlatBufferBuilder $builder, $z2MinRange)
    {
        $builder->addDoubleX(39, $z2MinRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZ1MaxRange(FlatBufferBuilder $builder, $z1MaxRange)
    {
        $builder->addDoubleX(40, $z1MaxRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZ2MaxRange(FlatBufferBuilder $builder, $z2MaxRange)
    {
        $builder->addDoubleX(41, $z2MaxRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRadarMUR(FlatBufferBuilder $builder, $radarMUR)
    {
        $builder->addDoubleX(42, $radarMUR, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addProbFalseAlarm(FlatBufferBuilder $builder, $probFalseAlarm)
    {
        $builder->addDoubleX(43, $probFalseAlarm, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPrf(FlatBufferBuilder $builder, $prf)
    {
        $builder->addDoubleX(44, $prf, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRadarPulseWidth(FlatBufferBuilder $builder, $radarPulseWidth)
    {
        $builder->addDoubleX(45, $radarPulseWidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumIntegratedPulses(FlatBufferBuilder $builder, $numIntegratedPulses)
    {
        $builder->addIntX(46, $numIntegratedPulses, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTrueTilt(FlatBufferBuilder $builder, $trueTilt)
    {
        $builder->addDoubleX(47, $trueTilt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRadarMessageFormat(FlatBufferBuilder $builder, $radarMessageFormat)
    {
        $builder->addOffsetX(48, $radarMessageFormat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSystemNoiseTemperature(FlatBufferBuilder $builder, $systemNoiseTemperature)
    {
        $builder->addDoubleX(49, $systemNoiseTemperature, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(50, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(51, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(52, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(53, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSensorcharacteristics_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSensorcharacteristics_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "SENS");
    }
}
