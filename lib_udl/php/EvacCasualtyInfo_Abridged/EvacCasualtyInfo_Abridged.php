<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Identity and medical information on the patient to be evacuated.
class EvacCasualtyInfo_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EvacCasualtyInfo_Abridged
     */
    public static function getRootAsEvacCasualtyInfo_Abridged(ByteBuffer $bb)
    {
        $obj = new EvacCasualtyInfo_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EvacCasualtyInfo_AbridgedIdentifier()
    {
        return "EVAC";
    }

    public static function EvacCasualtyInfo_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EvacCasualtyInfo_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EvacCasualtyInfo_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE, URGENT SURGERY, CONVENIENCE).
    /// Example: /// Example: ROUTINE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getPriority()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
    /// Example: /// Example: GROUND
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getEvacType()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of medical issue resulting in the need to evacuate the patient (NON BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION, BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION, DENIAL, COMBAT STRESS).
    /// Example: /// Example: DENTAL
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCasualtyType()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES, BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY PART).
    /// Example: /// Example: FACE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getBodyPart()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL, CHEMICAL).
    /// Example: /// Example: NONE
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getContamType()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array specifying if any special equipment is need for each of the evacuation of this patient  (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
    /// Example: /// Example: ['OXYGEN', 'HOIST']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSpecMedEquip($j)
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSpecMedEquipLength()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Optional casualty key.
    /// Example: /// Example: casualty-007
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getCasualtyKey()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US CIVILIAN, ENEMY POW).
    /// Example: /// Example: US CIVILIAN
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getPatientStatus()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
    /// Example: /// Example: FRIEND CIVILIAN
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getPatientIdentity()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The country code indicating the citizenship of the patient.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getNationality()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4, O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3, E-2, E-1, NONE, CIVILIAN).
    /// Example: /// Example: CIVILIAN
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getPayGrade()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The patient common or legal name.
    /// Example: /// Example: John Smith
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getName()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The patient age, in years.
    /// Example: /// Example: 35
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAge()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The patient sex (MALE, FEMALE).
    /// Example: /// Example: MALE
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getGender()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Last 4 characters of the patient social security code, or equivalent.
    /// Example: /// Example: 1234
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getLast4SSN()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O NEG).
    /// Example: /// Example: O NEG
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getBloodType()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR, UNKNOWN SERVICE).
    /// Example: /// Example: CIV
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getService()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The call sign of this patient.
    /// Example: /// Example: SHARK
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getCallSign()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The career field of this patient.
    /// Example: /// Example: Healthcare
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getOccSpeciality()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the burial location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
    /// Example: /// Example: [-33.123, 150.33, 0.24]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getBurialLocation($j)
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getBurialLocationLength()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the collection point.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
    /// Example: /// Example: [12.44, 122.55, 0.98]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCollectionPoint($j)
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCollectionPointLength()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Unique identifier for the patient care provider.
    /// Example: /// Example: CARE_PROVIDER-1
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getCareProviderUrn()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
    /// Example: /// Example: EVACUATE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getDispositionType()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE WOUNDED, EVACUATE DECEASED, INTERRED).
    /// Example: /// Example: EVACUATE WOUNDED
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getDisposition()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The method used to generate this medevac report (DEVICE, GROUND COMBAT PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
    /// Example: /// Example: DEVICE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getReportGen()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Datetime of the compiling of the patients casualty report, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-10-15T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getReportTime()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional comments on the  patient's casualty information.
    /// Example: /// Example: Comments relating to this casualty info.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getComments()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Medical condition causation information.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getEtiology($j)
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEtiologyLength()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Treatment information.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTreatment($j)
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTreatmentLength()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Information obtained for vital signs.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getVitalSignData($j)
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getVitalSignDataLength()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Health state information.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getHealthState($j)
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getHealthStateLength()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Health condition information.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCondition($j)
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getConditionLength()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Medication specifics.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getMedication($j)
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMedicationLength()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Injury specifics.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getInjury($j)
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getInjuryLength()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Allergy information.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAllergy($j)
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAllergyLength()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEvacCasualtyInfo_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(35);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EvacCasualtyInfo_Abridged
     */
    public static function createEvacCasualtyInfo_Abridged(FlatBufferBuilder $builder, $priority, $evacType, $casualtyType, $bodyPart, $contamType, $specMedEquip, $casualtyKey, $patientStatus, $patientIdentity, $nationality, $payGrade, $name, $age, $gender, $last4SSN, $bloodType, $service, $callSign, $occSpeciality, $burialLocation, $collectionPoint, $careProviderUrn, $dispositionType, $disposition, $reportGen, $reportTime, $comments, $etiology, $treatment, $vitalSignData, $healthState, $condition, $medication, $injury, $allergy)
    {
        $builder->startObject(35);
        self::addPriority($builder, $priority);
        self::addEvacType($builder, $evacType);
        self::addCasualtyType($builder, $casualtyType);
        self::addBodyPart($builder, $bodyPart);
        self::addContamType($builder, $contamType);
        self::addSpecMedEquip($builder, $specMedEquip);
        self::addCasualtyKey($builder, $casualtyKey);
        self::addPatientStatus($builder, $patientStatus);
        self::addPatientIdentity($builder, $patientIdentity);
        self::addNationality($builder, $nationality);
        self::addPayGrade($builder, $payGrade);
        self::addName($builder, $name);
        self::addAge($builder, $age);
        self::addGender($builder, $gender);
        self::addLast4SSN($builder, $last4SSN);
        self::addBloodType($builder, $bloodType);
        self::addService($builder, $service);
        self::addCallSign($builder, $callSign);
        self::addOccSpeciality($builder, $occSpeciality);
        self::addBurialLocation($builder, $burialLocation);
        self::addCollectionPoint($builder, $collectionPoint);
        self::addCareProviderUrn($builder, $careProviderUrn);
        self::addDispositionType($builder, $dispositionType);
        self::addDisposition($builder, $disposition);
        self::addReportGen($builder, $reportGen);
        self::addReportTime($builder, $reportTime);
        self::addComments($builder, $comments);
        self::addEtiology($builder, $etiology);
        self::addTreatment($builder, $treatment);
        self::addVitalSignData($builder, $vitalSignData);
        self::addHealthState($builder, $healthState);
        self::addCondition($builder, $condition);
        self::addMedication($builder, $medication);
        self::addInjury($builder, $injury);
        self::addAllergy($builder, $allergy);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPriority(FlatBufferBuilder $builder, $priority)
    {
        $builder->addOffsetX(0, $priority, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEvacType(FlatBufferBuilder $builder, $evacType)
    {
        $builder->addOffsetX(1, $evacType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCasualtyType(FlatBufferBuilder $builder, $casualtyType)
    {
        $builder->addOffsetX(2, $casualtyType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBodyPart(FlatBufferBuilder $builder, $bodyPart)
    {
        $builder->addOffsetX(3, $bodyPart, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addContamType(FlatBufferBuilder $builder, $contamType)
    {
        $builder->addOffsetX(4, $contamType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSpecMedEquip(FlatBufferBuilder $builder, $specMedEquip)
    {
        $builder->addOffsetX(5, $specMedEquip, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSpecMedEquipVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSpecMedEquipVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCasualtyKey(FlatBufferBuilder $builder, $casualtyKey)
    {
        $builder->addOffsetX(6, $casualtyKey, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPatientStatus(FlatBufferBuilder $builder, $patientStatus)
    {
        $builder->addOffsetX(7, $patientStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPatientIdentity(FlatBufferBuilder $builder, $patientIdentity)
    {
        $builder->addOffsetX(8, $patientIdentity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNationality(FlatBufferBuilder $builder, $nationality)
    {
        $builder->addOffsetX(9, $nationality, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPayGrade(FlatBufferBuilder $builder, $payGrade)
    {
        $builder->addOffsetX(10, $payGrade, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(11, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAge(FlatBufferBuilder $builder, $age)
    {
        $builder->addIntX(12, $age, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGender(FlatBufferBuilder $builder, $gender)
    {
        $builder->addOffsetX(13, $gender, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLast4SSN(FlatBufferBuilder $builder, $last4SSN)
    {
        $builder->addOffsetX(14, $last4SSN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBloodType(FlatBufferBuilder $builder, $bloodType)
    {
        $builder->addOffsetX(15, $bloodType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addService(FlatBufferBuilder $builder, $service)
    {
        $builder->addOffsetX(16, $service, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCallSign(FlatBufferBuilder $builder, $callSign)
    {
        $builder->addOffsetX(17, $callSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOccSpeciality(FlatBufferBuilder $builder, $occSpeciality)
    {
        $builder->addOffsetX(18, $occSpeciality, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addBurialLocation(FlatBufferBuilder $builder, $burialLocation)
    {
        $builder->addOffsetX(19, $burialLocation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createBurialLocationVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startBurialLocationVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCollectionPoint(FlatBufferBuilder $builder, $collectionPoint)
    {
        $builder->addOffsetX(20, $collectionPoint, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCollectionPointVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCollectionPointVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCareProviderUrn(FlatBufferBuilder $builder, $careProviderUrn)
    {
        $builder->addOffsetX(21, $careProviderUrn, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDispositionType(FlatBufferBuilder $builder, $dispositionType)
    {
        $builder->addOffsetX(22, $dispositionType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDisposition(FlatBufferBuilder $builder, $disposition)
    {
        $builder->addOffsetX(23, $disposition, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReportGen(FlatBufferBuilder $builder, $reportGen)
    {
        $builder->addOffsetX(24, $reportGen, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReportTime(FlatBufferBuilder $builder, $reportTime)
    {
        $builder->addOffsetX(25, $reportTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addComments(FlatBufferBuilder $builder, $comments)
    {
        $builder->addOffsetX(26, $comments, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEtiology(FlatBufferBuilder $builder, $etiology)
    {
        $builder->addOffsetX(27, $etiology, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEtiologyVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEtiologyVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTreatment(FlatBufferBuilder $builder, $treatment)
    {
        $builder->addOffsetX(28, $treatment, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTreatmentVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTreatmentVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addVitalSignData(FlatBufferBuilder $builder, $vitalSignData)
    {
        $builder->addOffsetX(29, $vitalSignData, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createVitalSignDataVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startVitalSignDataVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addHealthState(FlatBufferBuilder $builder, $healthState)
    {
        $builder->addOffsetX(30, $healthState, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createHealthStateVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startHealthStateVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCondition(FlatBufferBuilder $builder, $condition)
    {
        $builder->addOffsetX(31, $condition, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createConditionVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startConditionVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMedication(FlatBufferBuilder $builder, $medication)
    {
        $builder->addOffsetX(32, $medication, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMedicationVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMedicationVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addInjury(FlatBufferBuilder $builder, $injury)
    {
        $builder->addOffsetX(33, $injury, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createInjuryVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startInjuryVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAllergy(FlatBufferBuilder $builder, $allergy)
    {
        $builder->addOffsetX(34, $allergy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAllergyVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAllergyVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEvacCasualtyInfo_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEvacCasualtyInfo_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "EVAC");
    }
}
