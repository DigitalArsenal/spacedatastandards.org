<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Remarks associated with this LogisticsSupport record.
class LogisticsSegments_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return LogisticsSegments_Abridged
     */
    public static function getRootAsLogisticsSegments_Abridged(ByteBuffer $bb)
    {
        $obj = new LogisticsSegments_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function LogisticsSegments_AbridgedIdentifier()
    {
        return "LOGI";
    }

    public static function LogisticsSegments_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::LogisticsSegments_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return LogisticsSegments_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Used to sequence the segments in the transportation plan.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSegmentNumber()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Transportation mode.  AMC airlift, Commercial airlift, Other, or surface transportation.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 1, Maximum length = 1
    public function getModeCode()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of mission (e.g. SAAM, CHNL, etc.).
    /// Example: /// Example: SAAM
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getMissionType()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The unique identifier of the mission to which this logistics record is assigned.
    /// Example: /// Example: EXAMPLE-UUID
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getIdMission()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The GDSS mission ID for this segment.
    /// Example: /// Example: 2001101RF01202307062205
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getExtMissionId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The user generated identifier for an air mission subgroup.
    /// Example: /// Example: TAM308901196
    /// Constraints: Minimum length = 0, Maximum length = 12
    public function getMissionNumber()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Start air mission itinerary point identifier.
    /// Example: /// Example: 200
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getItin()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The identifier that represents a specific aircraft within an aircraft type.
    /// Example: /// Example: N819AX
    /// Constraints: Minimum length = 0, Maximum length = 7
    public function getSegTailNumber()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
    /// Example: /// Example: B7772E
    /// Constraints: Minimum length = 0, Maximum length = 30
    public function getSegAircraftMDS()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Airport ICAO departure code.
    /// Example: /// Example: PHIK
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getDepartureICAO()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Actual departure time to the segment destination, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T19:20:00.123Z
    /// Constraints: No constraints specified.
    public function getSegActDepTime()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Airport ICAO arrival code.
    /// Example: /// Example: YBCS
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getArrivalICAO()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Actual arrival time to segment destination, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T19:20:00.123Z
    /// Constraints: No constraints specified.
    public function getSegActArrTime()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// GC. LGTPS_C_DT_EST_DEP.  GD2: Estimated departure time from the segment origin. Only supplied when the segment is not attached to a Mission, otherwise the ETD is derived from the Mission segment origin point. This datetime should be in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T19:20:00.123Z
    /// Constraints: No constraints specified.
    public function getSegEstDepTime()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// GC. LGTPS_C_DT_EST_ARR.  GD2: Estimated arrival time to the segment destination. Only supplied when the segment is not attached to a Mission, otherwise the ETA is derived from the Mission segment destination point. This datetime should be in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T19:20:00.123Z
    /// Constraints: No constraints specified.
    public function getSegEstArrTime()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startLogisticsSegments_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(15);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return LogisticsSegments_Abridged
     */
    public static function createLogisticsSegments_Abridged(FlatBufferBuilder $builder, $segmentNumber, $modeCode, $missionType, $idMission, $extMissionId, $missionNumber, $itin, $segTailNumber, $segAircraftMDS, $departureICAO, $segActDepTime, $arrivalICAO, $segActArrTime, $segEstDepTime, $segEstArrTime)
    {
        $builder->startObject(15);
        self::addSegmentNumber($builder, $segmentNumber);
        self::addModeCode($builder, $modeCode);
        self::addMissionType($builder, $missionType);
        self::addIdMission($builder, $idMission);
        self::addExtMissionId($builder, $extMissionId);
        self::addMissionNumber($builder, $missionNumber);
        self::addItin($builder, $itin);
        self::addSegTailNumber($builder, $segTailNumber);
        self::addSegAircraftMDS($builder, $segAircraftMDS);
        self::addDepartureICAO($builder, $departureICAO);
        self::addSegActDepTime($builder, $segActDepTime);
        self::addArrivalICAO($builder, $arrivalICAO);
        self::addSegActArrTime($builder, $segActArrTime);
        self::addSegEstDepTime($builder, $segEstDepTime);
        self::addSegEstArrTime($builder, $segEstArrTime);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSegmentNumber(FlatBufferBuilder $builder, $segmentNumber)
    {
        $builder->addIntX(0, $segmentNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addModeCode(FlatBufferBuilder $builder, $modeCode)
    {
        $builder->addOffsetX(1, $modeCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionType(FlatBufferBuilder $builder, $missionType)
    {
        $builder->addOffsetX(2, $missionType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdMission(FlatBufferBuilder $builder, $idMission)
    {
        $builder->addOffsetX(3, $idMission, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExtMissionId(FlatBufferBuilder $builder, $extMissionId)
    {
        $builder->addOffsetX(4, $extMissionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionNumber(FlatBufferBuilder $builder, $missionNumber)
    {
        $builder->addOffsetX(5, $missionNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addItin(FlatBufferBuilder $builder, $itin)
    {
        $builder->addIntX(6, $itin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSegTailNumber(FlatBufferBuilder $builder, $segTailNumber)
    {
        $builder->addOffsetX(7, $segTailNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSegAircraftMDS(FlatBufferBuilder $builder, $segAircraftMDS)
    {
        $builder->addOffsetX(8, $segAircraftMDS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepartureICAO(FlatBufferBuilder $builder, $departureICAO)
    {
        $builder->addOffsetX(9, $departureICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSegActDepTime(FlatBufferBuilder $builder, $segActDepTime)
    {
        $builder->addOffsetX(10, $segActDepTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArrivalICAO(FlatBufferBuilder $builder, $arrivalICAO)
    {
        $builder->addOffsetX(11, $arrivalICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSegActArrTime(FlatBufferBuilder $builder, $segActArrTime)
    {
        $builder->addOffsetX(12, $segActArrTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSegEstDepTime(FlatBufferBuilder $builder, $segEstDepTime)
    {
        $builder->addOffsetX(13, $segEstDepTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSegEstArrTime(FlatBufferBuilder $builder, $segEstArrTime)
    {
        $builder->addOffsetX(14, $segEstArrTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endLogisticsSegments_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishLogisticsSegments_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "LOGI");
    }
}
