<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of observation data for SAR based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
class SARObservation_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return SARObservation_Abridged
     */
    public static function getRootAsSARObservation_Abridged(ByteBuffer $bb)
    {
        $obj = new SARObservation_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function SARObservation_AbridgedIdentifier()
    {
        return "SARO";
    }

    public static function SARObservation_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::SARObservation_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return SARObservation_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SAROBSERVATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the spacecraft hosting the sensor associated with this collection.
    /// Example: /// Example: 36036
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/Catalog number of the spacecraft hosting the sensor associated with this collection.
    /// Example: /// Example: 36036
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional identifier provided by the source to indicate the onorbit object hosting the sensor associated with this collection. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: 36036
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigObjectId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: 36036-1L
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by the source to indicate the sensor for this collection. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: SMOS-1L
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigSensorId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: EXTERNAL-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getExternalId()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier to indicate the specific collection tasking which produced this observation.
    /// Example: /// Example: COLLECTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getCollectionId()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the specific detection within a collection which produced this observation.
    /// Example: /// Example: DETECTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getDetectionId()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Collection start time in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2023-04-22T17:35:00.123456Z
    /// Constraints: No constraints specified.
    public function getCollectionStart()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Collection end time in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2023-04-22T17:38:10.20177Z
    /// Constraints: No constraints specified.
    public function getCollectionEnd()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The datetime at the center point of the collection in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2023-04-22T17:36:35.100885Z
    /// Constraints: No constraints specified.
    public function getCenterTime()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The detection start time in ISO 8601 UTC format, with microsecond precision.
    /// Example: /// Example: 2023-07-08T17:35:01.615396Z
    /// Constraints: No constraints specified.
    public function getDetectionStart()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The detection end time in ISO 8601 UTC format, with microsecond precision.
    /// Example: /// Example: 2023-07-08T17:35:20.77219Z
    /// Constraints: No constraints specified.
    public function getDetectionEnd()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The duration, in seconds, of this detection.
    /// Example: /// Example: 79.156794
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDwellTime()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The orbital direction (ASCENDING, DESCENDING) of the platform during the collection.
    /// Example: /// Example: ASCENDING
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getOrbitState()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Collection mode setting for this collection (e.g. AREA, SPOTLIGHT, STRIP, etc.).
    /// Example: /// Example: SPOTLIGHT
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSarMode()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the band containing operating frequency for the collection (e.g. C, E, EHF, HF, K, Ka, Ku, L, Q, S, SHF, UNK, UHF, V, VHF, VLF, W, X). See RFBandType for more details and descriptions of each band name.
    /// Example: /// Example: L
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getOperatingBand()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The operating frequency, in Mhz, for the collection.
    /// Example: /// Example: 2345.6
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOperatingFreq()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Signal to noise ratio, in dB.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSnr()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Transmit polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
    /// Example: /// Example: H
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getTxPolarization()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Receive polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
    /// Example: /// Example: H
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getRxPolarization()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The graze angle (also referred to as look angle) for the collection in degrees.
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGrazeAngle()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The center incidence angle in degrees.
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getIncidenceAngle()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The squint angle for the collection in degrees.
    /// Example: /// Example: 1.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSquintAngle()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The bandwidth frequency of the pulse in Mhz.
    /// Example: /// Example: 500.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPulseBandwidth()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The duration of a pulse in seconds.
    /// Example: /// Example: 1.1e-05
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPulseDuration()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Required sweep angle for the continuous spot scene in degrees.
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getContinuousSpotAngle()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Slant distance from sensor to center point of imaging event in kilometers.
    /// Example: /// Example: 60.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSlantRange()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Specifies the closest range, in kilometers, from the flight path to target during the collection.
    /// Example: /// Example: 12.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNearRange()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Specifies the farthest range, in kilometers, from the flight path to target during the collection.
    /// Example: /// Example: 34.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFarRange()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The length of the collection as projected on the ground in kilometers.
    /// Example: /// Example: 12.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSwathLength()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    public function getAtext()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    /// Constraints: No constraints specified.
    public function getAgjson()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of region as projected on the ground (POLYGON, POINT, LINE).
    /// Example: /// Example: POLYGON
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getAtype()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of dimensions of the geometry depicted by region.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAndims()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Geographical spatial_ref_sys for region.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAsrid()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The pixel spacing in the range direction measured in meters.
    /// Example: /// Example: 0.123
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSpacingRange()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The pixel spacing in the azimuth direction measured in meters.
    /// Example: /// Example: 0.123
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSpacingAzimuth()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The number of looks in the azimuth direction.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getLooksAzimuth()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The number of looks in the range direction.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getLooksRange()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The resolution in the range direction measured in meters.
    /// Example: /// Example: 0.123
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getResolutionRange()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The resolution in the azimuth direction measured in meters.
    /// Example: /// Example: 0.123
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getResolutionAzimuth()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The antenna pointing direction (LEFT, RIGHT).
    /// Example: /// Example: RIGHT
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getObDirection()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The coordinate system used for the sensor velocity and target position vectors for the collection.
    /// Example: /// Example: ECEF
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getCoordSys()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The collection target X position in kilometers.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTargetposx()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The collection target Y position in kilometers.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTargetposy()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The collection target Z position in kilometers.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTargetposz()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor altitude during collection in kilometers.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenalt()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor platform X-velocity during collection in kilometers/second.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenvelx()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor platform Y-velocity during collection in kilometers/second.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenvely()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor platform Z-velocity during collection in kilometers/second.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenvelz()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 sensor latitude sub-point at collect start time (collectionStart), represented as -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlatStart()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 sensor longitude sub-point at collect start time (collectionStart), represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlonStart()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 sensor latitude sub-point at collect end time (collectionEnd), represented as -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlatEnd()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 sensor longitude sub-point at collect end time (collectionEnd), represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlonEnd()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTransactionId()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of UDL record types (e.g. ANALYTICMAGERY, ESID, GROUNDIMAGE, NOTIFICATION, POI, SV, TRACK) that are related to the SAR Observation. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: /// Example: ['ESID', 'GROUNDIMAGE']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSrcTyps($j)
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSrcTypsLength()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of UUIDs of the UDL data records that are related to the SAR Observation. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/sarobservation/{uuid}).
    /// Example: /// Example: ['f7e01cd4-626b-441f-a423-17b160eb78ba', '223833c4-be0d-4fdb-a2e4-325a48eccced']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSrcIds($j)
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSrcIdsLength()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2023-04-22T17:51:40.854Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SARObservation_Abridged_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSARObservation_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(67);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return SARObservation_Abridged
     */
    public static function createSARObservation_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $idOnOrbit, $satNo, $origObjectId, $idSensor, $origSensorId, $externalId, $collectionId, $detectionId, $collectionStart, $collectionEnd, $centerTime, $detectionStart, $detectionEnd, $dwellTime, $orbitState, $sarMode, $operatingBand, $operatingFreq, $snr, $txPolarization, $rxPolarization, $grazeAngle, $incidenceAngle, $squintAngle, $pulseBandwidth, $pulseDuration, $continuousSpotAngle, $slantRange, $nearRange, $farRange, $swathLength, $atext, $agjson, $atype, $andims, $asrid, $spacingRange, $spacingAzimuth, $looksAzimuth, $looksRange, $resolutionRange, $resolutionAzimuth, $obDirection, $coordSys, $targetposx, $targetposy, $targetposz, $senalt, $senvelx, $senvely, $senvelz, $senlatStart, $senlonStart, $senlatEnd, $senlonEnd, $transactionId, $srcTyps, $srcIds, $createdAt, $createdBy, $source, $origin, $origNetwork, $sourceDL, $dataMode)
    {
        $builder->startObject(67);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addSatNo($builder, $satNo);
        self::addOrigObjectId($builder, $origObjectId);
        self::addIdSensor($builder, $idSensor);
        self::addOrigSensorId($builder, $origSensorId);
        self::addExternalId($builder, $externalId);
        self::addCollectionId($builder, $collectionId);
        self::addDetectionId($builder, $detectionId);
        self::addCollectionStart($builder, $collectionStart);
        self::addCollectionEnd($builder, $collectionEnd);
        self::addCenterTime($builder, $centerTime);
        self::addDetectionStart($builder, $detectionStart);
        self::addDetectionEnd($builder, $detectionEnd);
        self::addDwellTime($builder, $dwellTime);
        self::addOrbitState($builder, $orbitState);
        self::addSarMode($builder, $sarMode);
        self::addOperatingBand($builder, $operatingBand);
        self::addOperatingFreq($builder, $operatingFreq);
        self::addSnr($builder, $snr);
        self::addTxPolarization($builder, $txPolarization);
        self::addRxPolarization($builder, $rxPolarization);
        self::addGrazeAngle($builder, $grazeAngle);
        self::addIncidenceAngle($builder, $incidenceAngle);
        self::addSquintAngle($builder, $squintAngle);
        self::addPulseBandwidth($builder, $pulseBandwidth);
        self::addPulseDuration($builder, $pulseDuration);
        self::addContinuousSpotAngle($builder, $continuousSpotAngle);
        self::addSlantRange($builder, $slantRange);
        self::addNearRange($builder, $nearRange);
        self::addFarRange($builder, $farRange);
        self::addSwathLength($builder, $swathLength);
        self::addAtext($builder, $atext);
        self::addAgjson($builder, $agjson);
        self::addAtype($builder, $atype);
        self::addAndims($builder, $andims);
        self::addAsrid($builder, $asrid);
        self::addSpacingRange($builder, $spacingRange);
        self::addSpacingAzimuth($builder, $spacingAzimuth);
        self::addLooksAzimuth($builder, $looksAzimuth);
        self::addLooksRange($builder, $looksRange);
        self::addResolutionRange($builder, $resolutionRange);
        self::addResolutionAzimuth($builder, $resolutionAzimuth);
        self::addObDirection($builder, $obDirection);
        self::addCoordSys($builder, $coordSys);
        self::addTargetposx($builder, $targetposx);
        self::addTargetposy($builder, $targetposy);
        self::addTargetposz($builder, $targetposz);
        self::addSenalt($builder, $senalt);
        self::addSenvelx($builder, $senvelx);
        self::addSenvely($builder, $senvely);
        self::addSenvelz($builder, $senvelz);
        self::addSenlatStart($builder, $senlatStart);
        self::addSenlonStart($builder, $senlonStart);
        self::addSenlatEnd($builder, $senlatEnd);
        self::addSenlonEnd($builder, $senlonEnd);
        self::addTransactionId($builder, $transactionId);
        self::addSrcTyps($builder, $srcTyps);
        self::addSrcIds($builder, $srcIds);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addSourceDL($builder, $sourceDL);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(2, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(3, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(4, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(5, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSensorId(FlatBufferBuilder $builder, $origSensorId)
    {
        $builder->addOffsetX(6, $origSensorId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalId(FlatBufferBuilder $builder, $externalId)
    {
        $builder->addOffsetX(7, $externalId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCollectionId(FlatBufferBuilder $builder, $collectionId)
    {
        $builder->addOffsetX(8, $collectionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDetectionId(FlatBufferBuilder $builder, $detectionId)
    {
        $builder->addOffsetX(9, $detectionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCollectionStart(FlatBufferBuilder $builder, $collectionStart)
    {
        $builder->addOffsetX(10, $collectionStart, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCollectionEnd(FlatBufferBuilder $builder, $collectionEnd)
    {
        $builder->addOffsetX(11, $collectionEnd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCenterTime(FlatBufferBuilder $builder, $centerTime)
    {
        $builder->addOffsetX(12, $centerTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDetectionStart(FlatBufferBuilder $builder, $detectionStart)
    {
        $builder->addOffsetX(13, $detectionStart, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDetectionEnd(FlatBufferBuilder $builder, $detectionEnd)
    {
        $builder->addOffsetX(14, $detectionEnd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDwellTime(FlatBufferBuilder $builder, $dwellTime)
    {
        $builder->addDoubleX(15, $dwellTime, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrbitState(FlatBufferBuilder $builder, $orbitState)
    {
        $builder->addOffsetX(16, $orbitState, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSarMode(FlatBufferBuilder $builder, $sarMode)
    {
        $builder->addOffsetX(17, $sarMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOperatingBand(FlatBufferBuilder $builder, $operatingBand)
    {
        $builder->addOffsetX(18, $operatingBand, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOperatingFreq(FlatBufferBuilder $builder, $operatingFreq)
    {
        $builder->addDoubleX(19, $operatingFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSnr(FlatBufferBuilder $builder, $snr)
    {
        $builder->addDoubleX(20, $snr, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTxPolarization(FlatBufferBuilder $builder, $txPolarization)
    {
        $builder->addOffsetX(21, $txPolarization, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRxPolarization(FlatBufferBuilder $builder, $rxPolarization)
    {
        $builder->addOffsetX(22, $rxPolarization, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGrazeAngle(FlatBufferBuilder $builder, $grazeAngle)
    {
        $builder->addDoubleX(23, $grazeAngle, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addIncidenceAngle(FlatBufferBuilder $builder, $incidenceAngle)
    {
        $builder->addDoubleX(24, $incidenceAngle, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSquintAngle(FlatBufferBuilder $builder, $squintAngle)
    {
        $builder->addDoubleX(25, $squintAngle, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPulseBandwidth(FlatBufferBuilder $builder, $pulseBandwidth)
    {
        $builder->addDoubleX(26, $pulseBandwidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPulseDuration(FlatBufferBuilder $builder, $pulseDuration)
    {
        $builder->addDoubleX(27, $pulseDuration, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addContinuousSpotAngle(FlatBufferBuilder $builder, $continuousSpotAngle)
    {
        $builder->addDoubleX(28, $continuousSpotAngle, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSlantRange(FlatBufferBuilder $builder, $slantRange)
    {
        $builder->addDoubleX(29, $slantRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNearRange(FlatBufferBuilder $builder, $nearRange)
    {
        $builder->addDoubleX(30, $nearRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFarRange(FlatBufferBuilder $builder, $farRange)
    {
        $builder->addDoubleX(31, $farRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSwathLength(FlatBufferBuilder $builder, $swathLength)
    {
        $builder->addDoubleX(32, $swathLength, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAtext(FlatBufferBuilder $builder, $atext)
    {
        $builder->addOffsetX(33, $atext, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAgjson(FlatBufferBuilder $builder, $agjson)
    {
        $builder->addOffsetX(34, $agjson, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAtype(FlatBufferBuilder $builder, $atype)
    {
        $builder->addOffsetX(35, $atype, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAndims(FlatBufferBuilder $builder, $andims)
    {
        $builder->addIntX(36, $andims, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAsrid(FlatBufferBuilder $builder, $asrid)
    {
        $builder->addIntX(37, $asrid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSpacingRange(FlatBufferBuilder $builder, $spacingRange)
    {
        $builder->addDoubleX(38, $spacingRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSpacingAzimuth(FlatBufferBuilder $builder, $spacingAzimuth)
    {
        $builder->addDoubleX(39, $spacingAzimuth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addLooksAzimuth(FlatBufferBuilder $builder, $looksAzimuth)
    {
        $builder->addIntX(40, $looksAzimuth, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addLooksRange(FlatBufferBuilder $builder, $looksRange)
    {
        $builder->addIntX(41, $looksRange, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addResolutionRange(FlatBufferBuilder $builder, $resolutionRange)
    {
        $builder->addDoubleX(42, $resolutionRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addResolutionAzimuth(FlatBufferBuilder $builder, $resolutionAzimuth)
    {
        $builder->addDoubleX(43, $resolutionAzimuth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObDirection(FlatBufferBuilder $builder, $obDirection)
    {
        $builder->addOffsetX(44, $obDirection, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCoordSys(FlatBufferBuilder $builder, $coordSys)
    {
        $builder->addOffsetX(45, $coordSys, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTargetposx(FlatBufferBuilder $builder, $targetposx)
    {
        $builder->addDoubleX(46, $targetposx, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTargetposy(FlatBufferBuilder $builder, $targetposy)
    {
        $builder->addDoubleX(47, $targetposy, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTargetposz(FlatBufferBuilder $builder, $targetposz)
    {
        $builder->addDoubleX(48, $targetposz, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenalt(FlatBufferBuilder $builder, $senalt)
    {
        $builder->addDoubleX(49, $senalt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenvelx(FlatBufferBuilder $builder, $senvelx)
    {
        $builder->addDoubleX(50, $senvelx, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenvely(FlatBufferBuilder $builder, $senvely)
    {
        $builder->addDoubleX(51, $senvely, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenvelz(FlatBufferBuilder $builder, $senvelz)
    {
        $builder->addDoubleX(52, $senvelz, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlatStart(FlatBufferBuilder $builder, $senlatStart)
    {
        $builder->addDoubleX(53, $senlatStart, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlonStart(FlatBufferBuilder $builder, $senlonStart)
    {
        $builder->addDoubleX(54, $senlonStart, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlatEnd(FlatBufferBuilder $builder, $senlatEnd)
    {
        $builder->addDoubleX(55, $senlatEnd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlonEnd(FlatBufferBuilder $builder, $senlonEnd)
    {
        $builder->addDoubleX(56, $senlonEnd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransactionId(FlatBufferBuilder $builder, $transactionId)
    {
        $builder->addOffsetX(57, $transactionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSrcTyps(FlatBufferBuilder $builder, $srcTyps)
    {
        $builder->addOffsetX(58, $srcTyps, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSrcTypsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSrcTypsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSrcIds(FlatBufferBuilder $builder, $srcIds)
    {
        $builder->addOffsetX(59, $srcIds, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSrcIdsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSrcIdsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(60, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(61, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(62, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(63, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(64, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(65, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(66, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSARObservation_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSARObservation_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "SARO");
    }
}
