<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Object for data dissemination.
class ISRCollectionTransit_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return ISRCollectionTransit_Ingest
     */
    public static function getRootAsISRCollectionTransit_Ingest(ByteBuffer $bb)
    {
        $obj = new ISRCollectionTransit_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function ISRCollectionTransit_IngestIdentifier()
    {
        return "ISRC";
    }

    public static function ISRCollectionTransit_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ISRCollectionTransit_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return ISRCollectionTransit_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Transit Unique Identifier.
    /// Example: /// Example: ISRCOLLECTIONTRANSIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Military Base to transmit the dissemination of this data.
    /// Example: /// Example: ENVOYS
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getBase()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Length of mission in milliseconds.
    /// Example: /// Example: 200.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDuration()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startISRCollectionTransit_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(3);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return ISRCollectionTransit_Ingest
     */
    public static function createISRCollectionTransit_Ingest(FlatBufferBuilder $builder, $id, $base, $duration)
    {
        $builder->startObject(3);
        self::addId($builder, $id);
        self::addBase($builder, $base);
        self::addDuration($builder, $duration);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBase(FlatBufferBuilder $builder, $base)
    {
        $builder->addOffsetX(1, $base, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDuration(FlatBufferBuilder $builder, $duration)
    {
        $builder->addDoubleX(2, $duration, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endISRCollectionTransit_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishISRCollectionTransit_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ISRC");
    }
}
