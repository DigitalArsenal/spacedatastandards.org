<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection that specifies the naval flight operations for this ATO.
class NavalFlightOperations_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return NavalFlightOperations_Full
     */
    public static function getRootAsNavalFlightOperations_Full(ByteBuffer $bb)
    {
        $obj = new NavalFlightOperations_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function NavalFlightOperations_FullIdentifier()
    {
        return "NAVA";
    }

    public static function NavalFlightOperations_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::NavalFlightOperations_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return NavalFlightOperations_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The name of a ship or maritime vessel. Specify UNKNOWN if name is not known.
    /// Example: /// Example: USS WASP
    /// Constraints: Minimum length = 1, Maximum length = 48
    public function getShipName()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time when flight operations begin in ISO8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    public function getFltOpStart()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time when flight operations end in ISO8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    public function getFltOpStop()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// An array of times at which an aircraft will be launched and/or recovered in ISO8601 UTC format with millisecond precision.
    /// Example: /// Example: ['2021-02-25T12:00:00.123Z']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSchdLaunchRcvyTime($j)
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSchdLaunchRcvyTimeLength()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startNavalFlightOperations_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return NavalFlightOperations_Full
     */
    public static function createNavalFlightOperations_Full(FlatBufferBuilder $builder, $shipName, $fltOpStart, $fltOpStop, $schdLaunchRcvyTime)
    {
        $builder->startObject(4);
        self::addShipName($builder, $shipName);
        self::addFltOpStart($builder, $fltOpStart);
        self::addFltOpStop($builder, $fltOpStop);
        self::addSchdLaunchRcvyTime($builder, $schdLaunchRcvyTime);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addShipName(FlatBufferBuilder $builder, $shipName)
    {
        $builder->addOffsetX(0, $shipName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFltOpStart(FlatBufferBuilder $builder, $fltOpStart)
    {
        $builder->addOffsetX(1, $fltOpStart, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFltOpStop(FlatBufferBuilder $builder, $fltOpStop)
    {
        $builder->addOffsetX(2, $fltOpStop, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSchdLaunchRcvyTime(FlatBufferBuilder $builder, $schdLaunchRcvyTime)
    {
        $builder->addOffsetX(3, $schdLaunchRcvyTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSchdLaunchRcvyTimeVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSchdLaunchRcvyTimeVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endNavalFlightOperations_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishNavalFlightOperations_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "NAVA");
    }
}
