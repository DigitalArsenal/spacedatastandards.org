<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).
class RFObservationDetails_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RFObservationDetails_Full
     */
    public static function getRootAsRFObservationDetails_Full(ByteBuffer $bb)
    {
        $obj = new RFObservationDetails_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function RFObservationDetails_FullIdentifier()
    {
        return "RFOB";
    }

    public static function RFObservationDetails_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::RFObservationDetails_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RFObservationDetails_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: RFOBSERVATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Ob detection time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getObTime()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).
    /// Example: /// Example: RF
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getType()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 32258
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional identifier to indicate the specific tasking which produced this observation.
    /// Example: /// Example: TASK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTaskId()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTransactionId()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier of the track to which this observation belongs.
    /// Example: /// Example: TRACK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTrackId()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: ORIG-OBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigObjectId()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIG-SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigSensorId()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getUct()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Optional identifier provided by observation source to indicate the transponder used for this measurement.
    /// Example: /// Example: TRANSPONDER-A
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTransponder()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// azimuth angle in degrees and J2000 coordinate frame.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzimuth()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the azimuth angle measurement, in degrees.
    /// Example: /// Example: 2.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzimuthUnc()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change of the azimuth in degrees per second.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAzimuthRate()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// elevation in degrees and J2000 coordinate frame.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevation()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the elevation angle measurement, in degrees.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevationUnc()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change of the elevation in degrees per second.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevationRate()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Target range in km.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRange()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the range measurement, in kilometers.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRangeUnc()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change of the range in km/sec.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRangeRate()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the range rate measurement, in kilometers/second.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRangeRateUnc()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Target track or apparent range in km.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTrackRange()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlat()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 80.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlon()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenalt()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// ELINT notation.
    /// Example: /// Example: Ex. ELINT
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getElnot()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Center carrier frequency in Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFrequency()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Nominal or expected center carrier frequency in Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNominalFrequency()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Start carrier frequency in Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getStartFrequency()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// End carrier frequency in Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEndFrequency()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Measured power of the center carrier frequency in dBW.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRelativeCarrierPower()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Measured spectrum analyzer power of the center carrier frequency in dBW.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSpectrumAnalyzerPower()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRelativeNoiseFloor()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Reference signal level, in dBW.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getReferenceLevel()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPgri()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Confidence in the signal and its measurements and characterization.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getConfidence()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// True if the signal is incoming, false if outgoing.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getIncoming()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Switch Point of the RFObservation record.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSwitchPoint()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBaudRate()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Signal to noise ratio, in dB.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSnr()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Nominal or expected signal to noise ratio, in dB.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNominalSnr()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The antenna pointing dependent polarizer angle, in degrees.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPolarity()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
    /// Example: /// Example: H
    /// Constraints: Minimum length = 0, Maximum length = 16
    /**
     * @return sbyte
     */
    public function getPolarityType()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \RFObservationDetails_Full_polarityType_Enum::H;
    }

    /// Channel of the RFObservation record.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getChannel()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Measured carrier power over noise (dBW/Hz).
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPowerOverNoise()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Expected carrier power over noise (dBW/Hz).
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNominalPowerOverNoise()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Measured bandwidth in Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBandwidth()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Expected bandwidth in Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNominalBandwidth()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Resolution bandwidth in Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getResolutionBandwidth()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Video bandwidth in Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVideoBandwidth()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Measured Equivalent Isotopically Radiated Power in dBW.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEirp()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Expected Equivalent Isotopically Radiated Power in dBW.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNominalEirp()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Minimum measured PSD value of the trace in dBW.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMinPSD()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum measured PSD value of the trace in dBW.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxPSD()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Frequency Shift of the RFObservation record.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFrequencyShift()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peak of the RFObservation record.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getPeak()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Antenna name of the RFObservation record.
    /// Example: /// Example: Antenna1
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getAntennaName()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
    /// Example: /// Example: DETECTED
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getDetectionStatus()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
    /// Example: /// Example: SURVEY
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCollectionMode()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: Example URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getRawFileURI()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \RFObservationDetails_Full_dataMode_Enum::REAL;
    }

    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTags($j)
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTagsLength()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Noise power density, in dBW-Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNoisePwrDensity()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Carrier standard (e.g. DVB-S2, 802.11g, etc.).
    /// Example: /// Example: DVB-S2
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getCarrierStandard()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).
    /// Example: /// Example: Auto
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getModulation()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
    /// Example: /// Example: 7
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getInnerCodingRate()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getOuterCodingRate()
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Transmit pulse shaping filter typ (e.g. RRC).
    /// Example: /// Example: RRC
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getTransmitFilterType()
    {
        $o = $this->__offset(152);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Transmit pulse shaping filter roll-off value.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTransmitFilterRollOff()
    {
        $o = $this->__offset(154);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Symbol to noise ratio, in dB.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSymbolToNoiseRatio()
    {
        $o = $this->__offset(156);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The ratio of bit errors per number of received bits.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBitErrorRate()
    {
        $o = $this->__offset(158);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(160);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(162);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getOnOrbit()
    {
        $o = $this->__offset(164);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getDescriptor()
    {
        $o = $this->__offset(166);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional URL containing additional information on this observation.
    /// Example: /// Example: https://some-url
    /// Constraints: Minimum length = 0, Maximum length = 2048
    public function getUrl()
    {
        $o = $this->__offset(168);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of individual PSD frequencies of the signal in Hz. This array should correspond with the same-sized array of powers.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getFrequencies($j)
    {
        $o = $this->__offset(170);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getFrequenciesLength()
    {
        $o = $this->__offset(170);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of individual measured PSD powers of the signal in dBW. This array should correspond with the same-sized array of frequencies.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getPowers($j)
    {
        $o = $this->__offset(172);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getPowersLength()
    {
        $o = $this->__offset(172);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of signal to noise ratios of the signals, in dB.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSnrs($j)
    {
        $o = $this->__offset(174);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSnrsLength()
    {
        $o = $this->__offset(174);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of measurement confidences.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getConfidences($j)
    {
        $o = $this->__offset(176);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getConfidencesLength()
    {
        $o = $this->__offset(176);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of detection statuses (e.g. DETECTED, CARRIER_DETECTED, NOT_DETECTED) for each measured signal.
    /// Example: /// Example: ['DETECTED']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDetectionStatuses($j)
    {
        $o = $this->__offset(178);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDetectionStatusesLength()
    {
        $o = $this->__offset(178);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of chipRates.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getChipRates($j)
    {
        $o = $this->__offset(180);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getChipRatesLength()
    {
        $o = $this->__offset(180);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of code taps.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCodeTaps($j)
    {
        $o = $this->__offset(182);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCodeTapsLength()
    {
        $o = $this->__offset(182);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of code fills.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCodeFills($j)
    {
        $o = $this->__offset(184);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCodeFillsLength()
    {
        $o = $this->__offset(184);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of code lengths.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCodeLengths($j)
    {
        $o = $this->__offset(186);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCodeLengthsLength()
    {
        $o = $this->__offset(186);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of pnOrder.
    /// Example: /// Example: [1, 2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getPnOrders($j)
    {
        $o = $this->__offset(188);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getPnOrdersLength()
    {
        $o = $this->__offset(188);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of optional source provided identifiers of the measurements/signals.
    /// Example: /// Example: ['ID1', 'ID2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSignalIds($j)
    {
        $o = $this->__offset(190);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSignalIdsLength()
    {
        $o = $this->__offset(190);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of measured signal baud rates.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getBaudRates($j)
    {
        $o = $this->__offset(192);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getBaudRatesLength()
    {
        $o = $this->__offset(192);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of optional source provided telemetry identifiers of the measurements/signals.
    /// Example: /// Example: ['ID1', 'ID2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTelemetryIds($j)
    {
        $o = $this->__offset(194);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTelemetryIdsLength()
    {
        $o = $this->__offset(194);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of individual x-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationYPoints.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getConstellationXPoints($j)
    {
        $o = $this->__offset(196);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getConstellationXPointsLength()
    {
        $o = $this->__offset(196);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of individual y-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationXPoints.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getConstellationYPoints($j)
    {
        $o = $this->__offset(198);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getConstellationYPointsLength()
    {
        $o = $this->__offset(198);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRFObservationDetails_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(98);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RFObservationDetails_Full
     */
    public static function createRFObservationDetails_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $obTime, $idOnOrbit, $idSensor, $type, $satNo, $taskId, $transactionId, $trackId, $origObjectId, $origSensorId, $uct, $transponder, $azimuth, $azimuthUnc, $azimuthRate, $elevation, $elevationUnc, $elevationRate, $range, $rangeUnc, $rangeRate, $rangeRateUnc, $trackRange, $senlat, $senlon, $senalt, $elnot, $frequency, $nominalFrequency, $startFrequency, $endFrequency, $relativeCarrierPower, $spectrumAnalyzerPower, $relativeNoiseFloor, $referenceLevel, $pgri, $confidence, $incoming, $switchPoint, $baudRate, $snr, $nominalSnr, $polarity, $polarityType, $channel, $powerOverNoise, $nominalPowerOverNoise, $bandwidth, $nominalBandwidth, $resolutionBandwidth, $videoBandwidth, $eirp, $nominalEirp, $minPSD, $maxPSD, $frequencyShift, $peak, $antennaName, $detectionStatus, $collectionMode, $rawFileURI, $source, $origin, $dataMode, $tags, $createdAt, $createdBy, $noisePwrDensity, $carrierStandard, $modulation, $innerCodingRate, $outerCodingRate, $transmitFilterType, $transmitFilterRollOff, $symbolToNoiseRatio, $bitErrorRate, $origNetwork, $sourceDL, $onOrbit, $descriptor, $url, $frequencies, $powers, $snrs, $confidences, $detectionStatuses, $chipRates, $codeTaps, $codeFills, $codeLengths, $pnOrders, $signalIds, $baudRates, $telemetryIds, $constellationXPoints, $constellationYPoints)
    {
        $builder->startObject(98);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addObTime($builder, $obTime);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addIdSensor($builder, $idSensor);
        self::addType($builder, $type);
        self::addSatNo($builder, $satNo);
        self::addTaskId($builder, $taskId);
        self::addTransactionId($builder, $transactionId);
        self::addTrackId($builder, $trackId);
        self::addOrigObjectId($builder, $origObjectId);
        self::addOrigSensorId($builder, $origSensorId);
        self::addUct($builder, $uct);
        self::addTransponder($builder, $transponder);
        self::addAzimuth($builder, $azimuth);
        self::addAzimuthUnc($builder, $azimuthUnc);
        self::addAzimuthRate($builder, $azimuthRate);
        self::addElevation($builder, $elevation);
        self::addElevationUnc($builder, $elevationUnc);
        self::addElevationRate($builder, $elevationRate);
        self::addRange($builder, $range);
        self::addRangeUnc($builder, $rangeUnc);
        self::addRangeRate($builder, $rangeRate);
        self::addRangeRateUnc($builder, $rangeRateUnc);
        self::addTrackRange($builder, $trackRange);
        self::addSenlat($builder, $senlat);
        self::addSenlon($builder, $senlon);
        self::addSenalt($builder, $senalt);
        self::addElnot($builder, $elnot);
        self::addFrequency($builder, $frequency);
        self::addNominalFrequency($builder, $nominalFrequency);
        self::addStartFrequency($builder, $startFrequency);
        self::addEndFrequency($builder, $endFrequency);
        self::addRelativeCarrierPower($builder, $relativeCarrierPower);
        self::addSpectrumAnalyzerPower($builder, $spectrumAnalyzerPower);
        self::addRelativeNoiseFloor($builder, $relativeNoiseFloor);
        self::addReferenceLevel($builder, $referenceLevel);
        self::addPgri($builder, $pgri);
        self::addConfidence($builder, $confidence);
        self::addIncoming($builder, $incoming);
        self::addSwitchPoint($builder, $switchPoint);
        self::addBaudRate($builder, $baudRate);
        self::addSnr($builder, $snr);
        self::addNominalSnr($builder, $nominalSnr);
        self::addPolarity($builder, $polarity);
        self::addPolarityType($builder, $polarityType);
        self::addChannel($builder, $channel);
        self::addPowerOverNoise($builder, $powerOverNoise);
        self::addNominalPowerOverNoise($builder, $nominalPowerOverNoise);
        self::addBandwidth($builder, $bandwidth);
        self::addNominalBandwidth($builder, $nominalBandwidth);
        self::addResolutionBandwidth($builder, $resolutionBandwidth);
        self::addVideoBandwidth($builder, $videoBandwidth);
        self::addEirp($builder, $eirp);
        self::addNominalEirp($builder, $nominalEirp);
        self::addMinPSD($builder, $minPSD);
        self::addMaxPSD($builder, $maxPSD);
        self::addFrequencyShift($builder, $frequencyShift);
        self::addPeak($builder, $peak);
        self::addAntennaName($builder, $antennaName);
        self::addDetectionStatus($builder, $detectionStatus);
        self::addCollectionMode($builder, $collectionMode);
        self::addRawFileURI($builder, $rawFileURI);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addTags($builder, $tags);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addNoisePwrDensity($builder, $noisePwrDensity);
        self::addCarrierStandard($builder, $carrierStandard);
        self::addModulation($builder, $modulation);
        self::addInnerCodingRate($builder, $innerCodingRate);
        self::addOuterCodingRate($builder, $outerCodingRate);
        self::addTransmitFilterType($builder, $transmitFilterType);
        self::addTransmitFilterRollOff($builder, $transmitFilterRollOff);
        self::addSymbolToNoiseRatio($builder, $symbolToNoiseRatio);
        self::addBitErrorRate($builder, $bitErrorRate);
        self::addOrigNetwork($builder, $origNetwork);
        self::addSourceDL($builder, $sourceDL);
        self::addOnOrbit($builder, $onOrbit);
        self::addDescriptor($builder, $descriptor);
        self::addUrl($builder, $url);
        self::addFrequencies($builder, $frequencies);
        self::addPowers($builder, $powers);
        self::addSnrs($builder, $snrs);
        self::addConfidences($builder, $confidences);
        self::addDetectionStatuses($builder, $detectionStatuses);
        self::addChipRates($builder, $chipRates);
        self::addCodeTaps($builder, $codeTaps);
        self::addCodeFills($builder, $codeFills);
        self::addCodeLengths($builder, $codeLengths);
        self::addPnOrders($builder, $pnOrders);
        self::addSignalIds($builder, $signalIds);
        self::addBaudRates($builder, $baudRates);
        self::addTelemetryIds($builder, $telemetryIds);
        self::addConstellationXPoints($builder, $constellationXPoints);
        self::addConstellationYPoints($builder, $constellationYPoints);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObTime(FlatBufferBuilder $builder, $obTime)
    {
        $builder->addOffsetX(2, $obTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(3, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(4, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(5, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(6, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskId(FlatBufferBuilder $builder, $taskId)
    {
        $builder->addOffsetX(7, $taskId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransactionId(FlatBufferBuilder $builder, $transactionId)
    {
        $builder->addOffsetX(8, $transactionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrackId(FlatBufferBuilder $builder, $trackId)
    {
        $builder->addOffsetX(9, $trackId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(10, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSensorId(FlatBufferBuilder $builder, $origSensorId)
    {
        $builder->addOffsetX(11, $origSensorId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addUct(FlatBufferBuilder $builder, $uct)
    {
        $builder->addBoolX(12, $uct, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransponder(FlatBufferBuilder $builder, $transponder)
    {
        $builder->addOffsetX(13, $transponder, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzimuth(FlatBufferBuilder $builder, $azimuth)
    {
        $builder->addDoubleX(14, $azimuth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzimuthUnc(FlatBufferBuilder $builder, $azimuthUnc)
    {
        $builder->addDoubleX(15, $azimuthUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAzimuthRate(FlatBufferBuilder $builder, $azimuthRate)
    {
        $builder->addDoubleX(16, $azimuthRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevation(FlatBufferBuilder $builder, $elevation)
    {
        $builder->addDoubleX(17, $elevation, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevationUnc(FlatBufferBuilder $builder, $elevationUnc)
    {
        $builder->addDoubleX(18, $elevationUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevationRate(FlatBufferBuilder $builder, $elevationRate)
    {
        $builder->addDoubleX(19, $elevationRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRange(FlatBufferBuilder $builder, $range)
    {
        $builder->addDoubleX(20, $range, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRangeUnc(FlatBufferBuilder $builder, $rangeUnc)
    {
        $builder->addDoubleX(21, $rangeUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRangeRate(FlatBufferBuilder $builder, $rangeRate)
    {
        $builder->addDoubleX(22, $rangeRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRangeRateUnc(FlatBufferBuilder $builder, $rangeRateUnc)
    {
        $builder->addDoubleX(23, $rangeRateUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTrackRange(FlatBufferBuilder $builder, $trackRange)
    {
        $builder->addDoubleX(24, $trackRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlat(FlatBufferBuilder $builder, $senlat)
    {
        $builder->addDoubleX(25, $senlat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlon(FlatBufferBuilder $builder, $senlon)
    {
        $builder->addDoubleX(26, $senlon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenalt(FlatBufferBuilder $builder, $senalt)
    {
        $builder->addDoubleX(27, $senalt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addElnot(FlatBufferBuilder $builder, $elnot)
    {
        $builder->addOffsetX(28, $elnot, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFrequency(FlatBufferBuilder $builder, $frequency)
    {
        $builder->addDoubleX(29, $frequency, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNominalFrequency(FlatBufferBuilder $builder, $nominalFrequency)
    {
        $builder->addDoubleX(30, $nominalFrequency, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addStartFrequency(FlatBufferBuilder $builder, $startFrequency)
    {
        $builder->addDoubleX(31, $startFrequency, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEndFrequency(FlatBufferBuilder $builder, $endFrequency)
    {
        $builder->addDoubleX(32, $endFrequency, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRelativeCarrierPower(FlatBufferBuilder $builder, $relativeCarrierPower)
    {
        $builder->addDoubleX(33, $relativeCarrierPower, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSpectrumAnalyzerPower(FlatBufferBuilder $builder, $spectrumAnalyzerPower)
    {
        $builder->addDoubleX(34, $spectrumAnalyzerPower, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRelativeNoiseFloor(FlatBufferBuilder $builder, $relativeNoiseFloor)
    {
        $builder->addDoubleX(35, $relativeNoiseFloor, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addReferenceLevel(FlatBufferBuilder $builder, $referenceLevel)
    {
        $builder->addDoubleX(36, $referenceLevel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPgri(FlatBufferBuilder $builder, $pgri)
    {
        $builder->addDoubleX(37, $pgri, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addConfidence(FlatBufferBuilder $builder, $confidence)
    {
        $builder->addDoubleX(38, $confidence, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addIncoming(FlatBufferBuilder $builder, $incoming)
    {
        $builder->addBoolX(39, $incoming, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSwitchPoint(FlatBufferBuilder $builder, $switchPoint)
    {
        $builder->addIntX(40, $switchPoint, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBaudRate(FlatBufferBuilder $builder, $baudRate)
    {
        $builder->addDoubleX(41, $baudRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSnr(FlatBufferBuilder $builder, $snr)
    {
        $builder->addDoubleX(42, $snr, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNominalSnr(FlatBufferBuilder $builder, $nominalSnr)
    {
        $builder->addDoubleX(43, $nominalSnr, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPolarity(FlatBufferBuilder $builder, $polarity)
    {
        $builder->addDoubleX(44, $polarity, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addPolarityType(FlatBufferBuilder $builder, $polarityType)
    {
        $builder->addSbyteX(45, $polarityType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addChannel(FlatBufferBuilder $builder, $channel)
    {
        $builder->addIntX(46, $channel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPowerOverNoise(FlatBufferBuilder $builder, $powerOverNoise)
    {
        $builder->addDoubleX(47, $powerOverNoise, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNominalPowerOverNoise(FlatBufferBuilder $builder, $nominalPowerOverNoise)
    {
        $builder->addDoubleX(48, $nominalPowerOverNoise, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBandwidth(FlatBufferBuilder $builder, $bandwidth)
    {
        $builder->addDoubleX(49, $bandwidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNominalBandwidth(FlatBufferBuilder $builder, $nominalBandwidth)
    {
        $builder->addDoubleX(50, $nominalBandwidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addResolutionBandwidth(FlatBufferBuilder $builder, $resolutionBandwidth)
    {
        $builder->addDoubleX(51, $resolutionBandwidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVideoBandwidth(FlatBufferBuilder $builder, $videoBandwidth)
    {
        $builder->addDoubleX(52, $videoBandwidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEirp(FlatBufferBuilder $builder, $eirp)
    {
        $builder->addDoubleX(53, $eirp, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNominalEirp(FlatBufferBuilder $builder, $nominalEirp)
    {
        $builder->addDoubleX(54, $nominalEirp, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMinPSD(FlatBufferBuilder $builder, $minPSD)
    {
        $builder->addDoubleX(55, $minPSD, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxPSD(FlatBufferBuilder $builder, $maxPSD)
    {
        $builder->addDoubleX(56, $maxPSD, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFrequencyShift(FlatBufferBuilder $builder, $frequencyShift)
    {
        $builder->addDoubleX(57, $frequencyShift, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addPeak(FlatBufferBuilder $builder, $peak)
    {
        $builder->addBoolX(58, $peak, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAntennaName(FlatBufferBuilder $builder, $antennaName)
    {
        $builder->addOffsetX(59, $antennaName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDetectionStatus(FlatBufferBuilder $builder, $detectionStatus)
    {
        $builder->addOffsetX(60, $detectionStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCollectionMode(FlatBufferBuilder $builder, $collectionMode)
    {
        $builder->addOffsetX(61, $collectionMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRawFileURI(FlatBufferBuilder $builder, $rawFileURI)
    {
        $builder->addOffsetX(62, $rawFileURI, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(63, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(64, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(65, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTags(FlatBufferBuilder $builder, $tags)
    {
        $builder->addOffsetX(66, $tags, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTagsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTagsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(67, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(68, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNoisePwrDensity(FlatBufferBuilder $builder, $noisePwrDensity)
    {
        $builder->addDoubleX(69, $noisePwrDensity, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCarrierStandard(FlatBufferBuilder $builder, $carrierStandard)
    {
        $builder->addOffsetX(70, $carrierStandard, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addModulation(FlatBufferBuilder $builder, $modulation)
    {
        $builder->addOffsetX(71, $modulation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addInnerCodingRate(FlatBufferBuilder $builder, $innerCodingRate)
    {
        $builder->addIntX(72, $innerCodingRate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addOuterCodingRate(FlatBufferBuilder $builder, $outerCodingRate)
    {
        $builder->addIntX(73, $outerCodingRate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransmitFilterType(FlatBufferBuilder $builder, $transmitFilterType)
    {
        $builder->addOffsetX(74, $transmitFilterType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTransmitFilterRollOff(FlatBufferBuilder $builder, $transmitFilterRollOff)
    {
        $builder->addDoubleX(75, $transmitFilterRollOff, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSymbolToNoiseRatio(FlatBufferBuilder $builder, $symbolToNoiseRatio)
    {
        $builder->addDoubleX(76, $symbolToNoiseRatio, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBitErrorRate(FlatBufferBuilder $builder, $bitErrorRate)
    {
        $builder->addDoubleX(77, $bitErrorRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(78, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(79, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOnOrbit(FlatBufferBuilder $builder, $onOrbit)
    {
        $builder->addOffsetX(80, $onOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescriptor(FlatBufferBuilder $builder, $descriptor)
    {
        $builder->addOffsetX(81, $descriptor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUrl(FlatBufferBuilder $builder, $url)
    {
        $builder->addOffsetX(82, $url, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addFrequencies(FlatBufferBuilder $builder, $frequencies)
    {
        $builder->addOffsetX(83, $frequencies, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createFrequenciesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startFrequenciesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPowers(FlatBufferBuilder $builder, $powers)
    {
        $builder->addOffsetX(84, $powers, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createPowersVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startPowersVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSnrs(FlatBufferBuilder $builder, $snrs)
    {
        $builder->addOffsetX(85, $snrs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSnrsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSnrsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addConfidences(FlatBufferBuilder $builder, $confidences)
    {
        $builder->addOffsetX(86, $confidences, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createConfidencesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startConfidencesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDetectionStatuses(FlatBufferBuilder $builder, $detectionStatuses)
    {
        $builder->addOffsetX(87, $detectionStatuses, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDetectionStatusesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDetectionStatusesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addChipRates(FlatBufferBuilder $builder, $chipRates)
    {
        $builder->addOffsetX(88, $chipRates, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createChipRatesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startChipRatesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCodeTaps(FlatBufferBuilder $builder, $codeTaps)
    {
        $builder->addOffsetX(89, $codeTaps, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCodeTapsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCodeTapsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCodeFills(FlatBufferBuilder $builder, $codeFills)
    {
        $builder->addOffsetX(90, $codeFills, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCodeFillsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCodeFillsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCodeLengths(FlatBufferBuilder $builder, $codeLengths)
    {
        $builder->addOffsetX(91, $codeLengths, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCodeLengthsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCodeLengthsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPnOrders(FlatBufferBuilder $builder, $pnOrders)
    {
        $builder->addOffsetX(92, $pnOrders, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createPnOrdersVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startPnOrdersVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSignalIds(FlatBufferBuilder $builder, $signalIds)
    {
        $builder->addOffsetX(93, $signalIds, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSignalIdsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSignalIdsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addBaudRates(FlatBufferBuilder $builder, $baudRates)
    {
        $builder->addOffsetX(94, $baudRates, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createBaudRatesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startBaudRatesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTelemetryIds(FlatBufferBuilder $builder, $telemetryIds)
    {
        $builder->addOffsetX(95, $telemetryIds, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTelemetryIdsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTelemetryIdsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addConstellationXPoints(FlatBufferBuilder $builder, $constellationXPoints)
    {
        $builder->addOffsetX(96, $constellationXPoints, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createConstellationXPointsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startConstellationXPointsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addConstellationYPoints(FlatBufferBuilder $builder, $constellationYPoints)
    {
        $builder->addOffsetX(97, $constellationYPoints, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createConstellationYPointsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startConstellationYPointsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRFObservationDetails_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishRFObservationDetails_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "RFOB");
    }
}
