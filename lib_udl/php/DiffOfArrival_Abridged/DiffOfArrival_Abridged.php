<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of Signal time and frequency difference of arrival (TDOA/FDOA) information obtained by using passive RF based sensor phenomenologies and sensor triangulation.
class DiffOfArrival_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return DiffOfArrival_Abridged
     */
    public static function getRootAsDiffOfArrival_Abridged(ByteBuffer $bb)
    {
        $obj = new DiffOfArrival_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function DiffOfArrival_AbridgedIdentifier()
    {
        return "DIFF";
    }

    public static function DiffOfArrival_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::DiffOfArrival_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return DiffOfArrival_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: DIFFOFARRIVAL-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Ob detection time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getObTime()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Sensor ID of the primary/1st sensor used for this measurement.
    /// Example: /// Example: SENSOR1-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor1()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Sensor ID of the secondary/2nd sensor used for this measurement.
    /// Example: /// Example: SENSOR2-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor2()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Catalog number of the target on-orbit object.
    /// Example: /// Example: 25544
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional identifier to indicate the specific tasking which produced this observation.
    /// Example: /// Example: TASK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTaskId()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigObjectId()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by DOA source to indicate the primary/1st sensor identifier used for this measurement. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR1-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigSensorId1()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by DOA source to indicate the secondary/2nd sensor identifier used for this this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR2-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigSensorId2()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getUct()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The signal arrival delay relative to sensor 1 in seconds.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSensor1Delay()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The signal arrival delay relative to sensor 2 in seconds.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSensor2Delay()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlat()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 120.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenlon()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSenalt()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor 2 WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSen2lat()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor 2 WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSen2lon()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Sensor 2 altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSen2alt()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Center frequency of the collect in Hz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFrequency()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Bandwidth of the signal in Hz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBandwidth()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Delta range, in km. Delta range calculation convention is (sensor2 - sensor1).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeltaRange()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in delta range, in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeltaRangeUnc()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Delta range rate, in km/sec. Delta range rate calculation convention is (sensor2 - sensor1).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeltaRangeRate()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in the delta range rate, in km/sec.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDeltaRangeRateUnc()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Signal to noise ratio, in dB.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSnr()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Time difference of arrival of the center frequency signal, in seconds.  TDOA calculation convention is (sensor2 - sensor1).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTdoa()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in time difference of arrival of the center frequency signal, in seconds.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTdoaUnc()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Frequency difference of arrival of the center frequency signal, in Hz.  FDOA calculation convention is (sensor2 - sensor1).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFdoa()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma uncertainty in frequency difference of arrival of the center frequency signal, in Hz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFdoaUnc()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
    /// Example: /// Example: SURVEY
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCollectionMode()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \DiffOfArrival_Abridged_dataMode_Enum::REAL;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: Example descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getDescriptor()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTransactionId()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startDiffOfArrival_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(41);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return DiffOfArrival_Abridged
     */
    public static function createDiffOfArrival_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $obTime, $idOnOrbit, $idSensor1, $idSensor2, $satNo, $taskId, $origObjectId, $origSensorId1, $origSensorId2, $uct, $sensor1Delay, $sensor2Delay, $senlat, $senlon, $senalt, $sen2lat, $sen2lon, $sen2alt, $frequency, $bandwidth, $deltaRange, $deltaRangeUnc, $deltaRangeRate, $deltaRangeRateUnc, $snr, $tdoa, $tdoaUnc, $fdoa, $fdoaUnc, $collectionMode, $source, $dataMode, $origin, $createdAt, $createdBy, $descriptor, $transactionId, $origNetwork, $sourceDL)
    {
        $builder->startObject(41);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addObTime($builder, $obTime);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addIdSensor1($builder, $idSensor1);
        self::addIdSensor2($builder, $idSensor2);
        self::addSatNo($builder, $satNo);
        self::addTaskId($builder, $taskId);
        self::addOrigObjectId($builder, $origObjectId);
        self::addOrigSensorId1($builder, $origSensorId1);
        self::addOrigSensorId2($builder, $origSensorId2);
        self::addUct($builder, $uct);
        self::addSensor1Delay($builder, $sensor1Delay);
        self::addSensor2Delay($builder, $sensor2Delay);
        self::addSenlat($builder, $senlat);
        self::addSenlon($builder, $senlon);
        self::addSenalt($builder, $senalt);
        self::addSen2lat($builder, $sen2lat);
        self::addSen2lon($builder, $sen2lon);
        self::addSen2alt($builder, $sen2alt);
        self::addFrequency($builder, $frequency);
        self::addBandwidth($builder, $bandwidth);
        self::addDeltaRange($builder, $deltaRange);
        self::addDeltaRangeUnc($builder, $deltaRangeUnc);
        self::addDeltaRangeRate($builder, $deltaRangeRate);
        self::addDeltaRangeRateUnc($builder, $deltaRangeRateUnc);
        self::addSnr($builder, $snr);
        self::addTdoa($builder, $tdoa);
        self::addTdoaUnc($builder, $tdoaUnc);
        self::addFdoa($builder, $fdoa);
        self::addFdoaUnc($builder, $fdoaUnc);
        self::addCollectionMode($builder, $collectionMode);
        self::addSource($builder, $source);
        self::addDataMode($builder, $dataMode);
        self::addOrigin($builder, $origin);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addDescriptor($builder, $descriptor);
        self::addTransactionId($builder, $transactionId);
        self::addOrigNetwork($builder, $origNetwork);
        self::addSourceDL($builder, $sourceDL);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObTime(FlatBufferBuilder $builder, $obTime)
    {
        $builder->addOffsetX(2, $obTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(3, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor1(FlatBufferBuilder $builder, $idSensor1)
    {
        $builder->addOffsetX(4, $idSensor1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor2(FlatBufferBuilder $builder, $idSensor2)
    {
        $builder->addOffsetX(5, $idSensor2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(6, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTaskId(FlatBufferBuilder $builder, $taskId)
    {
        $builder->addOffsetX(7, $taskId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(8, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSensorId1(FlatBufferBuilder $builder, $origSensorId1)
    {
        $builder->addOffsetX(9, $origSensorId1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSensorId2(FlatBufferBuilder $builder, $origSensorId2)
    {
        $builder->addOffsetX(10, $origSensorId2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addUct(FlatBufferBuilder $builder, $uct)
    {
        $builder->addBoolX(11, $uct, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSensor1Delay(FlatBufferBuilder $builder, $sensor1Delay)
    {
        $builder->addDoubleX(12, $sensor1Delay, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSensor2Delay(FlatBufferBuilder $builder, $sensor2Delay)
    {
        $builder->addDoubleX(13, $sensor2Delay, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlat(FlatBufferBuilder $builder, $senlat)
    {
        $builder->addDoubleX(14, $senlat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenlon(FlatBufferBuilder $builder, $senlon)
    {
        $builder->addDoubleX(15, $senlon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSenalt(FlatBufferBuilder $builder, $senalt)
    {
        $builder->addDoubleX(16, $senalt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSen2lat(FlatBufferBuilder $builder, $sen2lat)
    {
        $builder->addDoubleX(17, $sen2lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSen2lon(FlatBufferBuilder $builder, $sen2lon)
    {
        $builder->addDoubleX(18, $sen2lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSen2alt(FlatBufferBuilder $builder, $sen2alt)
    {
        $builder->addDoubleX(19, $sen2alt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFrequency(FlatBufferBuilder $builder, $frequency)
    {
        $builder->addDoubleX(20, $frequency, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBandwidth(FlatBufferBuilder $builder, $bandwidth)
    {
        $builder->addDoubleX(21, $bandwidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeltaRange(FlatBufferBuilder $builder, $deltaRange)
    {
        $builder->addDoubleX(22, $deltaRange, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeltaRangeUnc(FlatBufferBuilder $builder, $deltaRangeUnc)
    {
        $builder->addDoubleX(23, $deltaRangeUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeltaRangeRate(FlatBufferBuilder $builder, $deltaRangeRate)
    {
        $builder->addDoubleX(24, $deltaRangeRate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDeltaRangeRateUnc(FlatBufferBuilder $builder, $deltaRangeRateUnc)
    {
        $builder->addDoubleX(25, $deltaRangeRateUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSnr(FlatBufferBuilder $builder, $snr)
    {
        $builder->addDoubleX(26, $snr, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTdoa(FlatBufferBuilder $builder, $tdoa)
    {
        $builder->addDoubleX(27, $tdoa, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTdoaUnc(FlatBufferBuilder $builder, $tdoaUnc)
    {
        $builder->addDoubleX(28, $tdoaUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFdoa(FlatBufferBuilder $builder, $fdoa)
    {
        $builder->addDoubleX(29, $fdoa, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFdoaUnc(FlatBufferBuilder $builder, $fdoaUnc)
    {
        $builder->addDoubleX(30, $fdoaUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCollectionMode(FlatBufferBuilder $builder, $collectionMode)
    {
        $builder->addOffsetX(31, $collectionMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(32, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(33, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(34, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(35, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(36, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescriptor(FlatBufferBuilder $builder, $descriptor)
    {
        $builder->addOffsetX(37, $descriptor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransactionId(FlatBufferBuilder $builder, $transactionId)
    {
        $builder->addOffsetX(38, $transactionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(39, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(40, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endDiffOfArrival_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishDiffOfArrival_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "DIFF");
    }
}
