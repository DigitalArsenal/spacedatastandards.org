<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Full set of the IRI formalism coefficients.
class IonoObservationDensityProfileIRI_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return IonoObservationDensityProfileIRI_Full
     */
    public static function getRootAsIonoObservationDensityProfileIRI_Full(ByteBuffer $bb)
    {
        $obj = new IonoObservationDensityProfileIRI_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function IonoObservationDensityProfileIRI_FullIdentifier()
    {
        return "IONO";
    }

    public static function IonoObservationDensityProfileIRI_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::IonoObservationDensityProfileIRI_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return IonoObservationDensityProfileIRI_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Description of IRI implementation.
    /// Example: /// Example: Full altitude range of 1D vertical plasma density profile for D, E, and F regions of the ionosphere provided by IRI, in which model parameters are replaced with observed ionogram-derived data where available.
    /// Constraints: No constraints specified.
    public function getDescription()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Peak density of F2 layer, in grams per cubic centimeter.
    /// Example: /// Example: 313283.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNmF2()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peak height of F2 layer, in kilometers.
    /// Example: /// Example: 265.42
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHmF2()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// B0 parameter of the F2 layer shape.
    /// Example: /// Example: 245.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getB0()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// B1 parameter of the F2 layer shape.
    /// Example: /// Example: 3.45
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getB1()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peak density of the F1 layer, in grams per cubic centimeter.
    /// Example: /// Example: 210486
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNmF1()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peak height of the F1 layer, in kilometers.
    /// Example: /// Example: 210.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHmF1()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// D1 parameter of the F1 layer shape.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD1()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Height HZ of the interim layer, in kilometers.
    /// Example: /// Example: 142.7
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHz()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The valley height, in kilometers.
    /// Example: /// Example: 116.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHValTop()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The valley depth, in grams per cubic centimeter.
    /// Example: /// Example: 147025.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNValB()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peak density of the E layer, in per cubic centimeter.
    /// Example: /// Example: 154164.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNmE()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peak height of the F2 layer, in kilometers.
    /// Example: /// Example: 99.8
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHmE()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Height of the intermediate region at the top of D region, in kilometers.
    /// Example: /// Example: 85.6
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHdx()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peak density of the D layer, in per cubic centimeter.
    /// Example: /// Example: 937543116.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNmD()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peak height of the D layer, in kilometers.
    /// Example: /// Example: 81.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHmD()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Starting height of the D layer, in kilometers.
    /// Example: /// Example: 50.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHa()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// TBD.
    /// Example: /// Example: 0.0474732023322638
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFp1()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// TBD.
    /// Example: /// Example: -0.00112685246984002
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFp2()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// TBD.
    /// Example: /// Example: 0.00827559450035957
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFp30()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// TBD.
    /// Example: /// Example: 0.000201178475411428
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFp3U()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.
    /// Example: /// Example: 35.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getChi()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startIonoObservationDensityProfileIRI_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(22);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return IonoObservationDensityProfileIRI_Full
     */
    public static function createIonoObservationDensityProfileIRI_Full(FlatBufferBuilder $builder, $description, $nmF2, $hmF2, $b0, $b1, $nmF1, $hmF1, $d1, $hz, $hValTop, $nValB, $nmE, $hmE, $hdx, $nmD, $hmD, $ha, $fp1, $fp2, $fp30, $fp3U, $chi)
    {
        $builder->startObject(22);
        self::addDescription($builder, $description);
        self::addNmF2($builder, $nmF2);
        self::addHmF2($builder, $hmF2);
        self::addB0($builder, $b0);
        self::addB1($builder, $b1);
        self::addNmF1($builder, $nmF1);
        self::addHmF1($builder, $hmF1);
        self::addD1($builder, $d1);
        self::addHz($builder, $hz);
        self::addHValTop($builder, $hValTop);
        self::addNValB($builder, $nValB);
        self::addNmE($builder, $nmE);
        self::addHmE($builder, $hmE);
        self::addHdx($builder, $hdx);
        self::addNmD($builder, $nmD);
        self::addHmD($builder, $hmD);
        self::addHa($builder, $ha);
        self::addFp1($builder, $fp1);
        self::addFp2($builder, $fp2);
        self::addFp30($builder, $fp30);
        self::addFp3U($builder, $fp3U);
        self::addChi($builder, $chi);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(0, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNmF2(FlatBufferBuilder $builder, $nmF2)
    {
        $builder->addDoubleX(1, $nmF2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHmF2(FlatBufferBuilder $builder, $hmF2)
    {
        $builder->addDoubleX(2, $hmF2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addB0(FlatBufferBuilder $builder, $b0)
    {
        $builder->addDoubleX(3, $b0, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addB1(FlatBufferBuilder $builder, $b1)
    {
        $builder->addDoubleX(4, $b1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNmF1(FlatBufferBuilder $builder, $nmF1)
    {
        $builder->addDoubleX(5, $nmF1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHmF1(FlatBufferBuilder $builder, $hmF1)
    {
        $builder->addDoubleX(6, $hmF1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD1(FlatBufferBuilder $builder, $d1)
    {
        $builder->addDoubleX(7, $d1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHz(FlatBufferBuilder $builder, $hz)
    {
        $builder->addDoubleX(8, $hz, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHValTop(FlatBufferBuilder $builder, $hValTop)
    {
        $builder->addDoubleX(9, $hValTop, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNValB(FlatBufferBuilder $builder, $nValB)
    {
        $builder->addDoubleX(10, $nValB, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNmE(FlatBufferBuilder $builder, $nmE)
    {
        $builder->addDoubleX(11, $nmE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHmE(FlatBufferBuilder $builder, $hmE)
    {
        $builder->addDoubleX(12, $hmE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHdx(FlatBufferBuilder $builder, $hdx)
    {
        $builder->addDoubleX(13, $hdx, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNmD(FlatBufferBuilder $builder, $nmD)
    {
        $builder->addDoubleX(14, $nmD, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHmD(FlatBufferBuilder $builder, $hmD)
    {
        $builder->addDoubleX(15, $hmD, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHa(FlatBufferBuilder $builder, $ha)
    {
        $builder->addDoubleX(16, $ha, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFp1(FlatBufferBuilder $builder, $fp1)
    {
        $builder->addDoubleX(17, $fp1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFp2(FlatBufferBuilder $builder, $fp2)
    {
        $builder->addDoubleX(18, $fp2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFp30(FlatBufferBuilder $builder, $fp30)
    {
        $builder->addDoubleX(19, $fp30, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFp3U(FlatBufferBuilder $builder, $fp3U)
    {
        $builder->addDoubleX(20, $fp3U, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addChi(FlatBufferBuilder $builder, $chi)
    {
        $builder->addDoubleX(21, $chi, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endIonoObservationDensityProfileIRI_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishIonoObservationDensityProfileIRI_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "IONO");
    }
}
