<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Schema for SOI Calibration data.
class SOICalibration_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return SOICalibration_Abridged
     */
    public static function getRootAsSOICalibration_Abridged(ByteBuffer $bb)
    {
        $obj = new SOICalibration_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function SOICalibration_AbridgedIdentifier()
    {
        return "SOIC";
    }

    public static function SOICalibration_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::SOICalibration_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return SOICalibration_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Coefficient value for how much signal would be lost to atmospheric attenuation for a star at zenith, in magnitudes per air mass.
    /// Example: /// Example: 0.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCalExtinctionCoeff()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average Sky Background signals in magnitudes, at calibration. Sky Background refers to the incoming light from an apparently empty part of the night sky.
    /// Example: /// Example: 30086.25
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCalSkyBg()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Background intensity, at calibration, specified in kilowatts per steradian per micrometer.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCalBgIntensity()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// In-band solar magnitudes at 1 A.U, at calibration (e.g. -5.0 to 30.0).
    /// Example: /// Example: 19.23664587
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCalSpectralFilterSolarMag()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Value representing the difference between the catalog magnitude and instrumental magnitude for a set of standard stars, at calibration (e.g. -5.0 to 30.0).
    /// Example: /// Example: 25.15682157
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCalZeroPoint()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Number of detected stars in the FOV with the target object, at calibration. Helps identify frames with clouds.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCalNumDetectedStars()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of correlated stars in the FOV with the target object, at calibration. Can be 0 for narrow FOV sensors.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCalNumCorrelatedStars()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Extinction coefficient uncertainty in magnitudes, at calibration, which represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
    /// Example: /// Example: 0.06474939
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCalExtinctionCoeffUnc()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum extinction coefficient uncertainty in magnitudes, at calibration (e.g. -5.0 to 30.0).
    /// Example: /// Example: 0.19708838
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCalExtinctionCoeffMaxUnc()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Start time of calibration in ISO 8601 UTC time, with millisecond precision.
    /// Example: /// Example: 2023-01-02T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCalTime()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of calibration (e.g. PRE, MID, POST).
    /// Example: /// Example: PRE
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getCalType()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSOICalibration_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(11);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return SOICalibration_Abridged
     */
    public static function createSOICalibration_Abridged(FlatBufferBuilder $builder, $calExtinctionCoeff, $calSkyBg, $calBgIntensity, $calSpectralFilterSolarMag, $calZeroPoint, $calNumDetectedStars, $calNumCorrelatedStars, $calExtinctionCoeffUnc, $calExtinctionCoeffMaxUnc, $calTime, $calType)
    {
        $builder->startObject(11);
        self::addCalExtinctionCoeff($builder, $calExtinctionCoeff);
        self::addCalSkyBg($builder, $calSkyBg);
        self::addCalBgIntensity($builder, $calBgIntensity);
        self::addCalSpectralFilterSolarMag($builder, $calSpectralFilterSolarMag);
        self::addCalZeroPoint($builder, $calZeroPoint);
        self::addCalNumDetectedStars($builder, $calNumDetectedStars);
        self::addCalNumCorrelatedStars($builder, $calNumCorrelatedStars);
        self::addCalExtinctionCoeffUnc($builder, $calExtinctionCoeffUnc);
        self::addCalExtinctionCoeffMaxUnc($builder, $calExtinctionCoeffMaxUnc);
        self::addCalTime($builder, $calTime);
        self::addCalType($builder, $calType);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCalExtinctionCoeff(FlatBufferBuilder $builder, $calExtinctionCoeff)
    {
        $builder->addDoubleX(0, $calExtinctionCoeff, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCalSkyBg(FlatBufferBuilder $builder, $calSkyBg)
    {
        $builder->addDoubleX(1, $calSkyBg, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCalBgIntensity(FlatBufferBuilder $builder, $calBgIntensity)
    {
        $builder->addDoubleX(2, $calBgIntensity, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCalSpectralFilterSolarMag(FlatBufferBuilder $builder, $calSpectralFilterSolarMag)
    {
        $builder->addDoubleX(3, $calSpectralFilterSolarMag, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCalZeroPoint(FlatBufferBuilder $builder, $calZeroPoint)
    {
        $builder->addDoubleX(4, $calZeroPoint, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCalNumDetectedStars(FlatBufferBuilder $builder, $calNumDetectedStars)
    {
        $builder->addIntX(5, $calNumDetectedStars, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCalNumCorrelatedStars(FlatBufferBuilder $builder, $calNumCorrelatedStars)
    {
        $builder->addIntX(6, $calNumCorrelatedStars, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCalExtinctionCoeffUnc(FlatBufferBuilder $builder, $calExtinctionCoeffUnc)
    {
        $builder->addDoubleX(7, $calExtinctionCoeffUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCalExtinctionCoeffMaxUnc(FlatBufferBuilder $builder, $calExtinctionCoeffMaxUnc)
    {
        $builder->addDoubleX(8, $calExtinctionCoeffMaxUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCalTime(FlatBufferBuilder $builder, $calTime)
    {
        $builder->addOffsetX(9, $calTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCalType(FlatBufferBuilder $builder, $calType)
    {
        $builder->addOffsetX(10, $calType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSOICalibration_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSOICalibration_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "SOIC");
    }
}
