<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Characteristic attributes of a IonoObservation.
class IonoObservationCharAtts_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return IonoObservationCharAtts_Ingest
     */
    public static function getRootAsIonoObservationCharAtts_Ingest(ByteBuffer $bb)
    {
        $obj = new IonoObservationCharAtts_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function IonoObservationCharAtts_IngestIdentifier()
    {
        return "IONO";
    }

    public static function IonoObservationCharAtts_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::IonoObservationCharAtts_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return IonoObservationCharAtts_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Characteristic's URSI ID. See the characteristic's description for its corresponding URSI ID.
    /// Example: /// Example: 04
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getUrsiID()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Characteristic name. This value should reflect the UDL field name for the corresponding characteristic.
    /// Example: /// Example: hprimeF2
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getCharName()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specified characteristic's lower bound. Should be less than or equal to the characteristic's current value as set in this record.
    /// Example: /// Example: 1.26
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLowerBound()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Specified characteristic's upper bound. Should be greater than or equal to the characteristic's current value as set in this record.
    /// Example: /// Example: 2.57
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getUpperBound()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Qualifying letter (Q) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
    /// Example: /// Example: T
    /// Constraints: No constraints specified.
    public function getQ()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Descriptive letter (D) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
    /// Example: /// Example: K
    /// Constraints: No constraints specified.
    public function getD()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the climate model.
    /// Example: /// Example: IRI
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getClimateModelName()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// List of options for the climate model.
    /// Example: /// Example: ['URSI-88', 'No storm']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getClimateModelOptions($j)
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getClimateModelOptionsLength()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Input parameters for the climate model.
    /// Example: /// Example: ['ISSN1 88.1', 'Option 2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getClimateModelInputParams($j)
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getClimateModelInputParamsLength()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Uncertainty Bounds (lower and upper) define an interval around reported value that contains true value at the specified probability level. Probability levels are specified in terms of percentile (from 1 to 100) or the standard deviation, sigma (e.g. 1sigma, 2sigma, 3sigma, 5percentile, 10percentile, 25percentile).
    /// Example: /// Example: 1sigma
    /// Constraints: No constraints specified.
    public function getUncertaintyBoundType()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startIonoObservationCharAtts_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(10);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return IonoObservationCharAtts_Ingest
     */
    public static function createIonoObservationCharAtts_Ingest(FlatBufferBuilder $builder, $ursiID, $charName, $lowerBound, $upperBound, $q, $d, $climateModelName, $climateModelOptions, $climateModelInputParams, $uncertaintyBoundType)
    {
        $builder->startObject(10);
        self::addUrsiID($builder, $ursiID);
        self::addCharName($builder, $charName);
        self::addLowerBound($builder, $lowerBound);
        self::addUpperBound($builder, $upperBound);
        self::addQ($builder, $q);
        self::addD($builder, $d);
        self::addClimateModelName($builder, $climateModelName);
        self::addClimateModelOptions($builder, $climateModelOptions);
        self::addClimateModelInputParams($builder, $climateModelInputParams);
        self::addUncertaintyBoundType($builder, $uncertaintyBoundType);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUrsiID(FlatBufferBuilder $builder, $ursiID)
    {
        $builder->addOffsetX(0, $ursiID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCharName(FlatBufferBuilder $builder, $charName)
    {
        $builder->addOffsetX(1, $charName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLowerBound(FlatBufferBuilder $builder, $lowerBound)
    {
        $builder->addDoubleX(2, $lowerBound, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUpperBound(FlatBufferBuilder $builder, $upperBound)
    {
        $builder->addDoubleX(3, $upperBound, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addQ(FlatBufferBuilder $builder, $q)
    {
        $builder->addOffsetX(4, $q, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addD(FlatBufferBuilder $builder, $d)
    {
        $builder->addOffsetX(5, $d, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClimateModelName(FlatBufferBuilder $builder, $climateModelName)
    {
        $builder->addOffsetX(6, $climateModelName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addClimateModelOptions(FlatBufferBuilder $builder, $climateModelOptions)
    {
        $builder->addOffsetX(7, $climateModelOptions, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createClimateModelOptionsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startClimateModelOptionsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addClimateModelInputParams(FlatBufferBuilder $builder, $climateModelInputParams)
    {
        $builder->addOffsetX(8, $climateModelInputParams, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createClimateModelInputParamsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startClimateModelInputParamsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUncertaintyBoundType(FlatBufferBuilder $builder, $uncertaintyBoundType)
    {
        $builder->addOffsetX(9, $uncertaintyBoundType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endIonoObservationCharAtts_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishIonoObservationCharAtts_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "IONO");
    }
}
