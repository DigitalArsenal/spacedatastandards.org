<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
class AircraftSortie_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AircraftSortie_Full
     */
    public static function getRootAsAircraftSortie_Full(ByteBuffer $bb)
    {
        $obj = new AircraftSortie_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AircraftSortie_FullIdentifier()
    {
        return "AIRC";
    }

    public static function AircraftSortie_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AircraftSortie_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AircraftSortie_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: AIRCRAFTSORTIE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The sortie identifier provided by the originating source.
    /// Example: /// Example: A0640
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOrigSortieId()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the aircraft.
    /// Example: /// Example: REF-AIRCRAFT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdAircraft()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Alternate Aircraft Identifier provided by source.
    /// Example: /// Example: ALT-AIRCRAFT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAircraftAltId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The tail number of the aircraft assigned to this sortie.
    /// Example: /// Example: Tail_1
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getTailNumber()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The aircraft Model Design Series designation assigned to this sortie.
    /// Example: /// Example: C017A
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAircraftMDS()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
    /// Example: /// Example: AE123C
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getAircraftADSB()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex. YYYY-MM-DD).
    /// Example: /// Example: 2021-01-01
    /// Constraints: No constraints specified.
    public function getSortieDate()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The external system line number of this sortie.
    /// Example: /// Example: 99
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getLineNumber()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The unique identifier of the mission to which this sortie is assigned.
    /// Example: /// Example: fa18d96e-91ea-60da-a7a8-1af6500066c8
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdMission()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The mission ID according to the source system.
    /// Example: /// Example: ABLE
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getMissionId()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Air Mobility Command (AMC) mission number of the sortie.
    /// Example: /// Example: AJM512571333
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAmcMsnNum()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of mission (e.g. SAAM, CHNL, etc.).
    /// Example: /// Example: SAAM
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAmcMsnType()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The call sign assigned to the aircraft on this sortie.
    /// Example: /// Example: BAKER
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getCallSign()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Joint Chiefs of Staff priority of this sortie.
    /// Example: /// Example: 1A3
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getJcsPriority()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The planned primary Standard Conventional Load of the aircraft for this sortie.
    /// Example: /// Example: ABC
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getPrimarySCL()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The planned secondary Standard Conventional Load of the aircraft for this sortie.
    /// Example: /// Example: ABC
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getSecondarySCL()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Aircraft configuration required for the mission.
    /// Example: /// Example: C-1
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getReqConfig()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.) currently on board the aircraft. Configuration meanings are determined by the data source.
    /// Example: /// Example: C-1
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getCargoConfig()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mass of fuel required for this leg of the sortie, in kilograms.
    /// Example: /// Example: 20000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFuelReq()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Liquid oxygen required on the aircraft for the crew compartment, in liters.
    /// Example: /// Example: 12.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOxyReqCrew()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Liquid oxygen onboard the aircraft for the crew compartment, in liters.
    /// Example: /// Example: 12.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOxyOnCrew()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Liquid oxygen required on the aircraft for the troop compartment, in liters.
    /// Example: /// Example: 12.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOxyReqPax()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Liquid oxygen onboard the aircraft for the troop compartment, in liters.
    /// Example: /// Example: 12.3
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOxyOnPax()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Alert Status code.
    /// Example: /// Example: C1
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getAlertStatusCode()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The amount of time allowed between launch order and takeoff, in seconds.
    /// Example: /// Example: 22
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAlertStatus()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The current state of this sortie.
    /// Example: /// Example: Park
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getCurrentState()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The itinerary identifier of the departure location.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getDepItinerary()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The departure International Civil Aviation Organization (ICAO) of this sortie.
    /// Example: /// Example: KCOS
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getDepICAO()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The departure International Aviation Transport Association (IATA) code of this sortie.
    /// Example: /// Example: AAA
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getDepIATA()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The departure Federal Aviation Administration (FAA) code of this sortie.
    /// Example: /// Example: FAA1
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getDepFAA()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getPlannedDepTime()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getEstDepTime()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The actual departure time, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getActualDepTime()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The estimated time the Aircraft will begin to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T00:55:01.123Z
    /// Constraints: No constraints specified.
    public function getEstBlockOutTime()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The actual time the Aircraft begins to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T00:55:01.123Z
    /// Constraints: No constraints specified.
    public function getActualBlockOutTime()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Purpose code at the departure location of this sortie.
    /// Example: /// Example: P
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getDepPurposeCode()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The itinerary identifier of the arrival location.
    /// Example: /// Example: 101
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getArrItinerary()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The arrival International Civil Aviation Organization (ICAO) of this sortie.
    /// Example: /// Example: KCOS
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getArrICAO()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The arrival International Aviation Transport Association (IATA) code of this sortie.
    /// Example: /// Example: AAA
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getArrIATA()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The arrival Federal Aviation Administration (FAA) code of this sortie.
    /// Example: /// Example: FAA1
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getArrFAA()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The scheduled time that the Aircraft sortie is planned to arrive,  in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getPlannedArrTime()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getEstArrTime()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The actual arrival time, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getActualArrTime()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The estimated time the Aircraft will come to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T01:06:01.123Z
    /// Constraints: No constraints specified.
    public function getEstBlockInTime()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The actual time the Aircraft comes to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T01:06:01.123Z
    /// Constraints: No constraints specified.
    public function getActualBlockInTime()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Purpose code at the arrival location of this sortie.
    /// Example: /// Example: O
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getArrPurposeCode()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Due home date by which the aircraft must return to its home station, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-03T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getDhd()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Reason the aircraft must return to home station by its due home date.
    /// Example: /// Example: Due for maintenance
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getDhdReason()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Aircraft event text.
    /// Example: /// Example: Example event
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getAircraftEvent()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the group responsible for recording the completion time of the next event in the sequence of events assigned to this sortie (e.g. OPS - Operations, MX - Maintenance, TR - Transportation, etc.).
    /// Example: /// Example: OPS
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getSoe()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The leg number of this sortie.
    /// Example: /// Example: 14
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getLegNum()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The planned flight time for this sortie, in minutes.
    /// Example: /// Example: 104.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFlightTime()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Scheduled ground time, in minutes.
    /// Example: /// Example: 387.8
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGndTime()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// When crew papers are associated to this sortie, the system updates this value. This field is the URI location in the document repository of that raw file. To download the raw file, prepend https://udl-hostname/scs/download?id= to this field's value.
    /// Example: /// Example: Example URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getRawFileURI()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The version number of the crew paper.
    /// Example: /// Example: 1.1
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getPapersVersion()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the uploaded PDF.
    /// Example: /// Example: ExampleFileName
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getFilename()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Size of the supporting PDF, in bytes.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getFilesize()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The status of the supporting document.
    /// Example: /// Example: PUBLISHED
    /// Constraints: Minimum length = 0, Maximum length = 9
    /**
     * @return sbyte
     */
    public function getPaperStatus()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AircraftSortie_Full_paperStatus_Enum::PUBLISHED;
    }

    /// The prior permission required (PPR) status.
    /// Example: /// Example: PENDING
    /// Constraints: Minimum length = 0, Maximum length = 22
    /**
     * @return sbyte
     */
    public function getPprStatus()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AircraftSortie_Full_pprStatus_Enum::NOT_REQUIRED;
    }

    /// Time the associated mission data was last updated in relation to the aircraft assignment, in ISO 8601 UTC format with millisecond precision. If this time is coming from an external system, it may not sync with the latest mission time associated to this record.
    /// Example: /// Example: 2024-09-09T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getMissionUpdate()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The primary delay code.
    /// Example: /// Example: 500
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getDelayCode()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The last name of the aircraft commander.
    /// Example: /// Example: Smith
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getCommanderName()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Desk phone number of the flight manager assigned to the sortie. Null when no flight manager is assigned.
    /// Example: /// Example: 7198675309
    /// Constraints: Minimum length = 0, Maximum length = 45
    public function getFmDeskNum()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Last name of the flight manager assigned to the sortie. Null when no flight manager is assigned.
    /// Example: /// Example: Smith
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getFmName()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of Ravens required for this sortie (N - None, R - Raven (Security Team) required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required (Ground time over 6 hours)).
    /// Example: /// Example: R
    /// Constraints: Minimum length = 0, Maximum length = 2
    /**
     * @return sbyte
     */
    public function getRvnReq()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AircraftSortie_Full_rvnReq_Enum::N;
    }

    /// The number of passengers tasked for this sortie.
    /// Example: /// Example: 17
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getPassengers()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The POI parking location.
    /// Example: /// Example: KCOS
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getParkingLoc()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Remarks concerning the sortie objective.
    /// Example: /// Example: Some objective remark about aircraft A
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getObjectiveRemarks()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Remarks concerning the aircraft.
    /// Example: /// Example: Some remark about aircraft A
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getAircraftRemarks()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Remarks concerning the schedule.
    /// Example: /// Example: Some schedule remark about aircraft A
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getScheduleRemarks()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Remarks concerning the results of this sortie.
    /// Example: /// Example: Some remark about aircraft A
    /// Constraints: Minimum length = 0, Maximum length = 512
    public function getResultRemarks()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(152);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(154);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(156);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(158);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(160);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(162);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(164);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AircraftSortie_Full_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(166);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getCrew()
    {
        $o = $this->__offset(168);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSortiePPR($j)
    {
        $o = $this->__offset(170);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSortiePPRLength()
    {
        $o = $this->__offset(170);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAircraftSortie_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(84);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AircraftSortie_Full
     */
    public static function createAircraftSortie_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $origSortieId, $idAircraft, $aircraftAltId, $tailNumber, $aircraftMDS, $aircraftADSB, $sortieDate, $lineNumber, $idMission, $missionId, $amcMsnNum, $amcMsnType, $callSign, $jcsPriority, $primarySCL, $secondarySCL, $reqConfig, $cargoConfig, $fuelReq, $oxyReqCrew, $oxyOnCrew, $oxyReqPax, $oxyOnPax, $alertStatusCode, $alertStatus, $currentState, $depItinerary, $depICAO, $depIATA, $depFAA, $plannedDepTime, $estDepTime, $actualDepTime, $estBlockOutTime, $actualBlockOutTime, $depPurposeCode, $arrItinerary, $arrICAO, $arrIATA, $arrFAA, $plannedArrTime, $estArrTime, $actualArrTime, $estBlockInTime, $actualBlockInTime, $arrPurposeCode, $dhd, $dhdReason, $aircraftEvent, $soe, $legNum, $flightTime, $gndTime, $rawFileURI, $papersVersion, $filename, $filesize, $paperStatus, $pprStatus, $missionUpdate, $delayCode, $commanderName, $fmDeskNum, $fmName, $rvnReq, $passengers, $parkingLoc, $objectiveRemarks, $aircraftRemarks, $scheduleRemarks, $resultRemarks, $createdAt, $createdBy, $updatedAt, $updatedBy, $sourceDL, $source, $origin, $dataMode, $origNetwork, $crew, $sortiePPR)
    {
        $builder->startObject(84);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addOrigSortieId($builder, $origSortieId);
        self::addIdAircraft($builder, $idAircraft);
        self::addAircraftAltId($builder, $aircraftAltId);
        self::addTailNumber($builder, $tailNumber);
        self::addAircraftMDS($builder, $aircraftMDS);
        self::addAircraftADSB($builder, $aircraftADSB);
        self::addSortieDate($builder, $sortieDate);
        self::addLineNumber($builder, $lineNumber);
        self::addIdMission($builder, $idMission);
        self::addMissionId($builder, $missionId);
        self::addAmcMsnNum($builder, $amcMsnNum);
        self::addAmcMsnType($builder, $amcMsnType);
        self::addCallSign($builder, $callSign);
        self::addJcsPriority($builder, $jcsPriority);
        self::addPrimarySCL($builder, $primarySCL);
        self::addSecondarySCL($builder, $secondarySCL);
        self::addReqConfig($builder, $reqConfig);
        self::addCargoConfig($builder, $cargoConfig);
        self::addFuelReq($builder, $fuelReq);
        self::addOxyReqCrew($builder, $oxyReqCrew);
        self::addOxyOnCrew($builder, $oxyOnCrew);
        self::addOxyReqPax($builder, $oxyReqPax);
        self::addOxyOnPax($builder, $oxyOnPax);
        self::addAlertStatusCode($builder, $alertStatusCode);
        self::addAlertStatus($builder, $alertStatus);
        self::addCurrentState($builder, $currentState);
        self::addDepItinerary($builder, $depItinerary);
        self::addDepICAO($builder, $depICAO);
        self::addDepIATA($builder, $depIATA);
        self::addDepFAA($builder, $depFAA);
        self::addPlannedDepTime($builder, $plannedDepTime);
        self::addEstDepTime($builder, $estDepTime);
        self::addActualDepTime($builder, $actualDepTime);
        self::addEstBlockOutTime($builder, $estBlockOutTime);
        self::addActualBlockOutTime($builder, $actualBlockOutTime);
        self::addDepPurposeCode($builder, $depPurposeCode);
        self::addArrItinerary($builder, $arrItinerary);
        self::addArrICAO($builder, $arrICAO);
        self::addArrIATA($builder, $arrIATA);
        self::addArrFAA($builder, $arrFAA);
        self::addPlannedArrTime($builder, $plannedArrTime);
        self::addEstArrTime($builder, $estArrTime);
        self::addActualArrTime($builder, $actualArrTime);
        self::addEstBlockInTime($builder, $estBlockInTime);
        self::addActualBlockInTime($builder, $actualBlockInTime);
        self::addArrPurposeCode($builder, $arrPurposeCode);
        self::addDhd($builder, $dhd);
        self::addDhdReason($builder, $dhdReason);
        self::addAircraftEvent($builder, $aircraftEvent);
        self::addSoe($builder, $soe);
        self::addLegNum($builder, $legNum);
        self::addFlightTime($builder, $flightTime);
        self::addGndTime($builder, $gndTime);
        self::addRawFileURI($builder, $rawFileURI);
        self::addPapersVersion($builder, $papersVersion);
        self::addFilename($builder, $filename);
        self::addFilesize($builder, $filesize);
        self::addPaperStatus($builder, $paperStatus);
        self::addPprStatus($builder, $pprStatus);
        self::addMissionUpdate($builder, $missionUpdate);
        self::addDelayCode($builder, $delayCode);
        self::addCommanderName($builder, $commanderName);
        self::addFmDeskNum($builder, $fmDeskNum);
        self::addFmName($builder, $fmName);
        self::addRvnReq($builder, $rvnReq);
        self::addPassengers($builder, $passengers);
        self::addParkingLoc($builder, $parkingLoc);
        self::addObjectiveRemarks($builder, $objectiveRemarks);
        self::addAircraftRemarks($builder, $aircraftRemarks);
        self::addScheduleRemarks($builder, $scheduleRemarks);
        self::addResultRemarks($builder, $resultRemarks);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        self::addCrew($builder, $crew);
        self::addSortiePPR($builder, $sortiePPR);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSortieId(FlatBufferBuilder $builder, $origSortieId)
    {
        $builder->addOffsetX(2, $origSortieId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdAircraft(FlatBufferBuilder $builder, $idAircraft)
    {
        $builder->addOffsetX(3, $idAircraft, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAircraftAltId(FlatBufferBuilder $builder, $aircraftAltId)
    {
        $builder->addOffsetX(4, $aircraftAltId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTailNumber(FlatBufferBuilder $builder, $tailNumber)
    {
        $builder->addOffsetX(5, $tailNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAircraftMDS(FlatBufferBuilder $builder, $aircraftMDS)
    {
        $builder->addOffsetX(6, $aircraftMDS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAircraftADSB(FlatBufferBuilder $builder, $aircraftADSB)
    {
        $builder->addOffsetX(7, $aircraftADSB, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSortieDate(FlatBufferBuilder $builder, $sortieDate)
    {
        $builder->addOffsetX(8, $sortieDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addLineNumber(FlatBufferBuilder $builder, $lineNumber)
    {
        $builder->addIntX(9, $lineNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdMission(FlatBufferBuilder $builder, $idMission)
    {
        $builder->addOffsetX(10, $idMission, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionId(FlatBufferBuilder $builder, $missionId)
    {
        $builder->addOffsetX(11, $missionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAmcMsnNum(FlatBufferBuilder $builder, $amcMsnNum)
    {
        $builder->addOffsetX(12, $amcMsnNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAmcMsnType(FlatBufferBuilder $builder, $amcMsnType)
    {
        $builder->addOffsetX(13, $amcMsnType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCallSign(FlatBufferBuilder $builder, $callSign)
    {
        $builder->addOffsetX(14, $callSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJcsPriority(FlatBufferBuilder $builder, $jcsPriority)
    {
        $builder->addOffsetX(15, $jcsPriority, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPrimarySCL(FlatBufferBuilder $builder, $primarySCL)
    {
        $builder->addOffsetX(16, $primarySCL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSecondarySCL(FlatBufferBuilder $builder, $secondarySCL)
    {
        $builder->addOffsetX(17, $secondarySCL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReqConfig(FlatBufferBuilder $builder, $reqConfig)
    {
        $builder->addOffsetX(18, $reqConfig, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCargoConfig(FlatBufferBuilder $builder, $cargoConfig)
    {
        $builder->addOffsetX(19, $cargoConfig, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFuelReq(FlatBufferBuilder $builder, $fuelReq)
    {
        $builder->addDoubleX(20, $fuelReq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOxyReqCrew(FlatBufferBuilder $builder, $oxyReqCrew)
    {
        $builder->addDoubleX(21, $oxyReqCrew, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOxyOnCrew(FlatBufferBuilder $builder, $oxyOnCrew)
    {
        $builder->addDoubleX(22, $oxyOnCrew, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOxyReqPax(FlatBufferBuilder $builder, $oxyReqPax)
    {
        $builder->addDoubleX(23, $oxyReqPax, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOxyOnPax(FlatBufferBuilder $builder, $oxyOnPax)
    {
        $builder->addDoubleX(24, $oxyOnPax, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAlertStatusCode(FlatBufferBuilder $builder, $alertStatusCode)
    {
        $builder->addOffsetX(25, $alertStatusCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAlertStatus(FlatBufferBuilder $builder, $alertStatus)
    {
        $builder->addIntX(26, $alertStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCurrentState(FlatBufferBuilder $builder, $currentState)
    {
        $builder->addOffsetX(27, $currentState, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDepItinerary(FlatBufferBuilder $builder, $depItinerary)
    {
        $builder->addIntX(28, $depItinerary, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepICAO(FlatBufferBuilder $builder, $depICAO)
    {
        $builder->addOffsetX(29, $depICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepIATA(FlatBufferBuilder $builder, $depIATA)
    {
        $builder->addOffsetX(30, $depIATA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepFAA(FlatBufferBuilder $builder, $depFAA)
    {
        $builder->addOffsetX(31, $depFAA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlannedDepTime(FlatBufferBuilder $builder, $plannedDepTime)
    {
        $builder->addOffsetX(32, $plannedDepTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEstDepTime(FlatBufferBuilder $builder, $estDepTime)
    {
        $builder->addOffsetX(33, $estDepTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActualDepTime(FlatBufferBuilder $builder, $actualDepTime)
    {
        $builder->addOffsetX(34, $actualDepTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEstBlockOutTime(FlatBufferBuilder $builder, $estBlockOutTime)
    {
        $builder->addOffsetX(35, $estBlockOutTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActualBlockOutTime(FlatBufferBuilder $builder, $actualBlockOutTime)
    {
        $builder->addOffsetX(36, $actualBlockOutTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepPurposeCode(FlatBufferBuilder $builder, $depPurposeCode)
    {
        $builder->addOffsetX(37, $depPurposeCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addArrItinerary(FlatBufferBuilder $builder, $arrItinerary)
    {
        $builder->addIntX(38, $arrItinerary, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArrICAO(FlatBufferBuilder $builder, $arrICAO)
    {
        $builder->addOffsetX(39, $arrICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArrIATA(FlatBufferBuilder $builder, $arrIATA)
    {
        $builder->addOffsetX(40, $arrIATA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArrFAA(FlatBufferBuilder $builder, $arrFAA)
    {
        $builder->addOffsetX(41, $arrFAA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlannedArrTime(FlatBufferBuilder $builder, $plannedArrTime)
    {
        $builder->addOffsetX(42, $plannedArrTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEstArrTime(FlatBufferBuilder $builder, $estArrTime)
    {
        $builder->addOffsetX(43, $estArrTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActualArrTime(FlatBufferBuilder $builder, $actualArrTime)
    {
        $builder->addOffsetX(44, $actualArrTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEstBlockInTime(FlatBufferBuilder $builder, $estBlockInTime)
    {
        $builder->addOffsetX(45, $estBlockInTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActualBlockInTime(FlatBufferBuilder $builder, $actualBlockInTime)
    {
        $builder->addOffsetX(46, $actualBlockInTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArrPurposeCode(FlatBufferBuilder $builder, $arrPurposeCode)
    {
        $builder->addOffsetX(47, $arrPurposeCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDhd(FlatBufferBuilder $builder, $dhd)
    {
        $builder->addOffsetX(48, $dhd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDhdReason(FlatBufferBuilder $builder, $dhdReason)
    {
        $builder->addOffsetX(49, $dhdReason, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAircraftEvent(FlatBufferBuilder $builder, $aircraftEvent)
    {
        $builder->addOffsetX(50, $aircraftEvent, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSoe(FlatBufferBuilder $builder, $soe)
    {
        $builder->addOffsetX(51, $soe, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addLegNum(FlatBufferBuilder $builder, $legNum)
    {
        $builder->addIntX(52, $legNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFlightTime(FlatBufferBuilder $builder, $flightTime)
    {
        $builder->addDoubleX(53, $flightTime, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGndTime(FlatBufferBuilder $builder, $gndTime)
    {
        $builder->addDoubleX(54, $gndTime, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRawFileURI(FlatBufferBuilder $builder, $rawFileURI)
    {
        $builder->addOffsetX(55, $rawFileURI, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPapersVersion(FlatBufferBuilder $builder, $papersVersion)
    {
        $builder->addOffsetX(56, $papersVersion, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFilename(FlatBufferBuilder $builder, $filename)
    {
        $builder->addOffsetX(57, $filename, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addFilesize(FlatBufferBuilder $builder, $filesize)
    {
        $builder->addIntX(58, $filesize, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addPaperStatus(FlatBufferBuilder $builder, $paperStatus)
    {
        $builder->addSbyteX(59, $paperStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addPprStatus(FlatBufferBuilder $builder, $pprStatus)
    {
        $builder->addSbyteX(60, $pprStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionUpdate(FlatBufferBuilder $builder, $missionUpdate)
    {
        $builder->addOffsetX(61, $missionUpdate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDelayCode(FlatBufferBuilder $builder, $delayCode)
    {
        $builder->addOffsetX(62, $delayCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCommanderName(FlatBufferBuilder $builder, $commanderName)
    {
        $builder->addOffsetX(63, $commanderName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFmDeskNum(FlatBufferBuilder $builder, $fmDeskNum)
    {
        $builder->addOffsetX(64, $fmDeskNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFmName(FlatBufferBuilder $builder, $fmName)
    {
        $builder->addOffsetX(65, $fmName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addRvnReq(FlatBufferBuilder $builder, $rvnReq)
    {
        $builder->addSbyteX(66, $rvnReq, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPassengers(FlatBufferBuilder $builder, $passengers)
    {
        $builder->addIntX(67, $passengers, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addParkingLoc(FlatBufferBuilder $builder, $parkingLoc)
    {
        $builder->addOffsetX(68, $parkingLoc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObjectiveRemarks(FlatBufferBuilder $builder, $objectiveRemarks)
    {
        $builder->addOffsetX(69, $objectiveRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAircraftRemarks(FlatBufferBuilder $builder, $aircraftRemarks)
    {
        $builder->addOffsetX(70, $aircraftRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addScheduleRemarks(FlatBufferBuilder $builder, $scheduleRemarks)
    {
        $builder->addOffsetX(71, $scheduleRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addResultRemarks(FlatBufferBuilder $builder, $resultRemarks)
    {
        $builder->addOffsetX(72, $resultRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(73, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(74, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(75, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(76, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(77, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(78, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(79, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(80, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(81, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCrew(FlatBufferBuilder $builder, $crew)
    {
        $builder->addOffsetX(82, $crew, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSortiePPR(FlatBufferBuilder $builder, $sortiePPR)
    {
        $builder->addOffsetX(83, $sortiePPR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSortiePPRVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSortiePPRVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAircraftSortie_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAircraftSortie_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRC");
    }
}
