<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection of aircraft mission location information for this aircraft mission tasking.
class AircraftMissionLocationTasking_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AircraftMissionLocationTasking_Abridged
     */
    public static function getRootAsAircraftMissionLocationTasking_Abridged(ByteBuffer $bb)
    {
        $obj = new AircraftMissionLocationTasking_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AircraftMissionLocationTasking_AbridgedIdentifier()
    {
        return "AIRC";
    }

    public static function AircraftMissionLocationTasking_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AircraftMissionLocationTasking_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AircraftMissionLocationTasking_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The start time of this mission in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-10-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    public function getStartTime()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The end time of this mission in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-10-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    public function getEndTime()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name that identifies the location at which this mission is to be performed. This can be the name of a general target area, orbit, cap point, station, etc.
    /// Example: /// Example: KLSV
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getMsnLocName()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The altitude for this mission represented as hundreds of feet above MSL.
    /// Example: /// Example: 210
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAlt()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The code for the priority assigned to this mission.
    /// Example: /// Example: 1A
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getAirMsnPri()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The radius of the circle around the location being reported in feet.
    /// Example: /// Example: 1000
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAreaGeoRad()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The location name for this mission.
    /// Example: /// Example: PT ALFA
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getMsnLocPtName()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS-84 latitude of the mission location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
    /// Example: /// Example: 35.123
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMsnLocPtLat()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the mission location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
    /// Example: /// Example: 79.01
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMsnLocPtLon()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The alpha-numeric specified location for this mission specified as a bearing angle in degrees relative to true north and a range in nautical miles (NM).
    /// Example: /// Example: 330T-PT ALFA-50NM
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getMsnLocPtBarT()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAircraftMissionLocationTasking_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(10);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AircraftMissionLocationTasking_Abridged
     */
    public static function createAircraftMissionLocationTasking_Abridged(FlatBufferBuilder $builder, $startTime, $endTime, $msnLocName, $alt, $airMsnPri, $areaGeoRad, $msnLocPtName, $msnLocPtLat, $msnLocPtLon, $msnLocPtBarT)
    {
        $builder->startObject(10);
        self::addStartTime($builder, $startTime);
        self::addEndTime($builder, $endTime);
        self::addMsnLocName($builder, $msnLocName);
        self::addAlt($builder, $alt);
        self::addAirMsnPri($builder, $airMsnPri);
        self::addAreaGeoRad($builder, $areaGeoRad);
        self::addMsnLocPtName($builder, $msnLocPtName);
        self::addMsnLocPtLat($builder, $msnLocPtLat);
        self::addMsnLocPtLon($builder, $msnLocPtLon);
        self::addMsnLocPtBarT($builder, $msnLocPtBarT);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStartTime(FlatBufferBuilder $builder, $startTime)
    {
        $builder->addOffsetX(0, $startTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEndTime(FlatBufferBuilder $builder, $endTime)
    {
        $builder->addOffsetX(1, $endTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsnLocName(FlatBufferBuilder $builder, $msnLocName)
    {
        $builder->addOffsetX(2, $msnLocName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAlt(FlatBufferBuilder $builder, $alt)
    {
        $builder->addIntX(3, $alt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAirMsnPri(FlatBufferBuilder $builder, $airMsnPri)
    {
        $builder->addOffsetX(4, $airMsnPri, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAreaGeoRad(FlatBufferBuilder $builder, $areaGeoRad)
    {
        $builder->addIntX(5, $areaGeoRad, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsnLocPtName(FlatBufferBuilder $builder, $msnLocPtName)
    {
        $builder->addOffsetX(6, $msnLocPtName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMsnLocPtLat(FlatBufferBuilder $builder, $msnLocPtLat)
    {
        $builder->addDoubleX(7, $msnLocPtLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMsnLocPtLon(FlatBufferBuilder $builder, $msnLocPtLon)
    {
        $builder->addDoubleX(8, $msnLocPtLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsnLocPtBarT(FlatBufferBuilder $builder, $msnLocPtBarT)
    {
        $builder->addOffsetX(9, $msnLocPtBarT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAircraftMissionLocationTasking_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAircraftMissionLocationTasking_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRC");
    }
}
