<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace Bus_Abridged;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// A bus is the physical and software infrastructure backbone to which on-orbit satellite payloads are attached for power, control, and other support functions.
class Bus_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Bus_Abridged
     */
    public static function getRootAsBus_Abridged(ByteBuffer $bb)
    {
        $obj = new Bus_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Bus_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: BUS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of this bus.
    /// Example: Example name
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getName()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID of the parent entity for this bus.
    /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdEntity()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of this bus.
    /// Example: Example type
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getType()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Maximum mass at launch, lower bounds, in kilograms.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxLaunchMassLower()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum mass at launch, upper bounds, in kilograms.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxLaunchMassUpper()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum mass on station at beginning of life, in kilograms.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxBOLStationMass()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average mass available on this bus for payloads, in kilograms.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgPayloadMass()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum payload mass available, in kilograms.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxPayloadMass()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Minimum mass of this bus without payloads or fuel, in kilograms.
    /// Example: 2858.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMinDryMass()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average mass of this bus without payloads or fuel, in kilograms.
    /// Example: 2879.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgDryMass()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Median mass of this bus without payloads or fuel, in kilograms.
    /// Example: 2950.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMedianDryMass()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum mass of this bus without payloads or fuel, in kilograms.
    /// Example: 2900.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxDryMass()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Minimum mass of this bus with fuel, but without payloads, in kilograms.
    /// Example: 5192.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMinWetMass()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average mass of this bus with fuel, but without payloads, in kilograms.
    /// Example: 5246.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgWetMass()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Median mass of this bus with fuel, but without payloads, in kilograms.
    /// Example: 5260.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMedianWetMass()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum mass of this bus with fuel, but without payloads, in kilograms.
    /// Example: 5300.0
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxWetMass()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum power at beginning of life, lower bounds, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxBOLPowerLower()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum power at beginning of life, upper bounds, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxBOLPowerUpper()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum power at end of life, lower bounds, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxEOLPowerLower()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum power at end of life, upper bounds, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxEOLPowerUpper()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average power available on this bus, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgSpacecraftPower()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum power available on this bus, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxSpacecraftPower()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Orbit averaged power (the power averaged over one orbit) available on this bus, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOapSpacecraftPower()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average power available on this bus for payloads, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAvgPayloadPower()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Maximum payload power available, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxPayloadPower()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Orbit averaged power (the power averaged over one orbit) available on this bus for payloads, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getOapPayloadPower()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Body dimension in X direction pertaining to length, in meters.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBodyDimensionX()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Body dimension in Y direction pertaining to height, in meters.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBodyDimensionY()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Body dimension in Z direction pertaining to width, in meters.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBodyDimensionZ()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The radial dimension available on this bus for payloads, in meters.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPayloadDimensionX()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The in-track dimension available on this bus for payloads, in meters.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPayloadDimensionY()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The cross-track dimension available on this bus for payloads, in meters.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPayloadDimensionZ()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The volume available on this bus for payloads, in cubic meters.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPayloadVolume()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Launch envelope dimension in X direction, in meters.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLaunchEnvelopeDimensionX()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Launch envelope dimension in Y direction, in meters.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLaunchEnvelopeDimensionY()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Launch envelope dimension in Z direction, in meters.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLaunchEnvelopeDimensionZ()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The number of orbit types this bus can support.
    /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumOrbitType()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Unique identifier of the organization which manufactures the telemetry tracking and command subsystem for this bus.
    /// Example: TELEMETRYTRACKINGMANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTelemetryTrackingManufacturerOrgId()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the organization which manufactures the main onboard computer for this bus.
    /// Example: MAINCOMPUTERMANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getMainComputerManufacturerOrgId()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the organization which manufactures this bus.
    /// Example: MANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getManufacturerOrgId()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the organization which designs the bus kit.
    /// Example: BUSKITDESIGNERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getBusKitDesignerOrgId()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Country where this bus was manufactured. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getCountryCode()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mass category of this bus (e.g. 1 - 10 kg: Nanosatellite, 10 - 100 kg: Microsatellite, 100 - 500 kg: Minisatellite, 1000 - 2500kg: Medium satellite, etc.).
    /// Example: Nanosatellite
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getMassCategory()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Power category of this bus (e.g. 0-1kW low power, etc).
    /// Example: low power
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getPowerCategory()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating if this bus is generic.
    /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getGeneric()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Notes/description of the bus.
    /// Example: Dedicated small spacecraft bus.
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getDescription()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Attitude and Orbital Control Notes/description for the bus.
    /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getAocsNotes()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Bus_Abridged_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startBus_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(55);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Bus_Abridged
     */
    public static function createBus_Abridged(FlatBufferBuilder $builder, $id, $name, $classificationMarking, $idEntity, $type, $maxLaunchMassLower, $maxLaunchMassUpper, $maxBOLStationMass, $avgPayloadMass, $maxPayloadMass, $minDryMass, $avgDryMass, $medianDryMass, $maxDryMass, $minWetMass, $avgWetMass, $medianWetMass, $maxWetMass, $maxBOLPowerLower, $maxBOLPowerUpper, $maxEOLPowerLower, $maxEOLPowerUpper, $avgSpacecraftPower, $maxSpacecraftPower, $oapSpacecraftPower, $avgPayloadPower, $maxPayloadPower, $oapPayloadPower, $bodyDimensionX, $bodyDimensionY, $bodyDimensionZ, $payloadDimensionX, $payloadDimensionY, $payloadDimensionZ, $payloadVolume, $launchEnvelopeDimensionX, $launchEnvelopeDimensionY, $launchEnvelopeDimensionZ, $numOrbitType, $telemetryTrackingManufacturerOrgId, $mainComputerManufacturerOrgId, $manufacturerOrgId, $busKitDesignerOrgId, $countryCode, $massCategory, $powerCategory, $generic, $description, $aocsNotes, $source, $origin, $origNetwork, $dataMode, $createdAt, $createdBy)
    {
        $builder->startObject(55);
        self::addId($builder, $id);
        self::addName($builder, $name);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdEntity($builder, $idEntity);
        self::addType($builder, $type);
        self::addMaxLaunchMassLower($builder, $maxLaunchMassLower);
        self::addMaxLaunchMassUpper($builder, $maxLaunchMassUpper);
        self::addMaxBOLStationMass($builder, $maxBOLStationMass);
        self::addAvgPayloadMass($builder, $avgPayloadMass);
        self::addMaxPayloadMass($builder, $maxPayloadMass);
        self::addMinDryMass($builder, $minDryMass);
        self::addAvgDryMass($builder, $avgDryMass);
        self::addMedianDryMass($builder, $medianDryMass);
        self::addMaxDryMass($builder, $maxDryMass);
        self::addMinWetMass($builder, $minWetMass);
        self::addAvgWetMass($builder, $avgWetMass);
        self::addMedianWetMass($builder, $medianWetMass);
        self::addMaxWetMass($builder, $maxWetMass);
        self::addMaxBOLPowerLower($builder, $maxBOLPowerLower);
        self::addMaxBOLPowerUpper($builder, $maxBOLPowerUpper);
        self::addMaxEOLPowerLower($builder, $maxEOLPowerLower);
        self::addMaxEOLPowerUpper($builder, $maxEOLPowerUpper);
        self::addAvgSpacecraftPower($builder, $avgSpacecraftPower);
        self::addMaxSpacecraftPower($builder, $maxSpacecraftPower);
        self::addOapSpacecraftPower($builder, $oapSpacecraftPower);
        self::addAvgPayloadPower($builder, $avgPayloadPower);
        self::addMaxPayloadPower($builder, $maxPayloadPower);
        self::addOapPayloadPower($builder, $oapPayloadPower);
        self::addBodyDimensionX($builder, $bodyDimensionX);
        self::addBodyDimensionY($builder, $bodyDimensionY);
        self::addBodyDimensionZ($builder, $bodyDimensionZ);
        self::addPayloadDimensionX($builder, $payloadDimensionX);
        self::addPayloadDimensionY($builder, $payloadDimensionY);
        self::addPayloadDimensionZ($builder, $payloadDimensionZ);
        self::addPayloadVolume($builder, $payloadVolume);
        self::addLaunchEnvelopeDimensionX($builder, $launchEnvelopeDimensionX);
        self::addLaunchEnvelopeDimensionY($builder, $launchEnvelopeDimensionY);
        self::addLaunchEnvelopeDimensionZ($builder, $launchEnvelopeDimensionZ);
        self::addNumOrbitType($builder, $numOrbitType);
        self::addTelemetryTrackingManufacturerOrgId($builder, $telemetryTrackingManufacturerOrgId);
        self::addMainComputerManufacturerOrgId($builder, $mainComputerManufacturerOrgId);
        self::addManufacturerOrgId($builder, $manufacturerOrgId);
        self::addBusKitDesignerOrgId($builder, $busKitDesignerOrgId);
        self::addCountryCode($builder, $countryCode);
        self::addMassCategory($builder, $massCategory);
        self::addPowerCategory($builder, $powerCategory);
        self::addGeneric($builder, $generic);
        self::addDescription($builder, $description);
        self::addAocsNotes($builder, $aocsNotes);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(1, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(2, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdEntity(FlatBufferBuilder $builder, $idEntity)
    {
        $builder->addOffsetX(3, $idEntity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(4, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxLaunchMassLower(FlatBufferBuilder $builder, $maxLaunchMassLower)
    {
        $builder->addDoubleX(5, $maxLaunchMassLower, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxLaunchMassUpper(FlatBufferBuilder $builder, $maxLaunchMassUpper)
    {
        $builder->addDoubleX(6, $maxLaunchMassUpper, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxBOLStationMass(FlatBufferBuilder $builder, $maxBOLStationMass)
    {
        $builder->addDoubleX(7, $maxBOLStationMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgPayloadMass(FlatBufferBuilder $builder, $avgPayloadMass)
    {
        $builder->addDoubleX(8, $avgPayloadMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxPayloadMass(FlatBufferBuilder $builder, $maxPayloadMass)
    {
        $builder->addDoubleX(9, $maxPayloadMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMinDryMass(FlatBufferBuilder $builder, $minDryMass)
    {
        $builder->addDoubleX(10, $minDryMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgDryMass(FlatBufferBuilder $builder, $avgDryMass)
    {
        $builder->addDoubleX(11, $avgDryMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMedianDryMass(FlatBufferBuilder $builder, $medianDryMass)
    {
        $builder->addDoubleX(12, $medianDryMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxDryMass(FlatBufferBuilder $builder, $maxDryMass)
    {
        $builder->addDoubleX(13, $maxDryMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMinWetMass(FlatBufferBuilder $builder, $minWetMass)
    {
        $builder->addDoubleX(14, $minWetMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgWetMass(FlatBufferBuilder $builder, $avgWetMass)
    {
        $builder->addDoubleX(15, $avgWetMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMedianWetMass(FlatBufferBuilder $builder, $medianWetMass)
    {
        $builder->addDoubleX(16, $medianWetMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxWetMass(FlatBufferBuilder $builder, $maxWetMass)
    {
        $builder->addDoubleX(17, $maxWetMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxBOLPowerLower(FlatBufferBuilder $builder, $maxBOLPowerLower)
    {
        $builder->addDoubleX(18, $maxBOLPowerLower, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxBOLPowerUpper(FlatBufferBuilder $builder, $maxBOLPowerUpper)
    {
        $builder->addDoubleX(19, $maxBOLPowerUpper, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxEOLPowerLower(FlatBufferBuilder $builder, $maxEOLPowerLower)
    {
        $builder->addDoubleX(20, $maxEOLPowerLower, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxEOLPowerUpper(FlatBufferBuilder $builder, $maxEOLPowerUpper)
    {
        $builder->addDoubleX(21, $maxEOLPowerUpper, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgSpacecraftPower(FlatBufferBuilder $builder, $avgSpacecraftPower)
    {
        $builder->addDoubleX(22, $avgSpacecraftPower, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxSpacecraftPower(FlatBufferBuilder $builder, $maxSpacecraftPower)
    {
        $builder->addDoubleX(23, $maxSpacecraftPower, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOapSpacecraftPower(FlatBufferBuilder $builder, $oapSpacecraftPower)
    {
        $builder->addDoubleX(24, $oapSpacecraftPower, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAvgPayloadPower(FlatBufferBuilder $builder, $avgPayloadPower)
    {
        $builder->addDoubleX(25, $avgPayloadPower, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxPayloadPower(FlatBufferBuilder $builder, $maxPayloadPower)
    {
        $builder->addDoubleX(26, $maxPayloadPower, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOapPayloadPower(FlatBufferBuilder $builder, $oapPayloadPower)
    {
        $builder->addDoubleX(27, $oapPayloadPower, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBodyDimensionX(FlatBufferBuilder $builder, $bodyDimensionX)
    {
        $builder->addDoubleX(28, $bodyDimensionX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBodyDimensionY(FlatBufferBuilder $builder, $bodyDimensionY)
    {
        $builder->addDoubleX(29, $bodyDimensionY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBodyDimensionZ(FlatBufferBuilder $builder, $bodyDimensionZ)
    {
        $builder->addDoubleX(30, $bodyDimensionZ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPayloadDimensionX(FlatBufferBuilder $builder, $payloadDimensionX)
    {
        $builder->addDoubleX(31, $payloadDimensionX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPayloadDimensionY(FlatBufferBuilder $builder, $payloadDimensionY)
    {
        $builder->addDoubleX(32, $payloadDimensionY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPayloadDimensionZ(FlatBufferBuilder $builder, $payloadDimensionZ)
    {
        $builder->addDoubleX(33, $payloadDimensionZ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPayloadVolume(FlatBufferBuilder $builder, $payloadVolume)
    {
        $builder->addDoubleX(34, $payloadVolume, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLaunchEnvelopeDimensionX(FlatBufferBuilder $builder, $launchEnvelopeDimensionX)
    {
        $builder->addDoubleX(35, $launchEnvelopeDimensionX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLaunchEnvelopeDimensionY(FlatBufferBuilder $builder, $launchEnvelopeDimensionY)
    {
        $builder->addDoubleX(36, $launchEnvelopeDimensionY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLaunchEnvelopeDimensionZ(FlatBufferBuilder $builder, $launchEnvelopeDimensionZ)
    {
        $builder->addDoubleX(37, $launchEnvelopeDimensionZ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumOrbitType(FlatBufferBuilder $builder, $numOrbitType)
    {
        $builder->addIntX(38, $numOrbitType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTelemetryTrackingManufacturerOrgId(FlatBufferBuilder $builder, $telemetryTrackingManufacturerOrgId)
    {
        $builder->addOffsetX(39, $telemetryTrackingManufacturerOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMainComputerManufacturerOrgId(FlatBufferBuilder $builder, $mainComputerManufacturerOrgId)
    {
        $builder->addOffsetX(40, $mainComputerManufacturerOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addManufacturerOrgId(FlatBufferBuilder $builder, $manufacturerOrgId)
    {
        $builder->addOffsetX(41, $manufacturerOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBusKitDesignerOrgId(FlatBufferBuilder $builder, $busKitDesignerOrgId)
    {
        $builder->addOffsetX(42, $busKitDesignerOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountryCode(FlatBufferBuilder $builder, $countryCode)
    {
        $builder->addOffsetX(43, $countryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMassCategory(FlatBufferBuilder $builder, $massCategory)
    {
        $builder->addOffsetX(44, $massCategory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPowerCategory(FlatBufferBuilder $builder, $powerCategory)
    {
        $builder->addOffsetX(45, $powerCategory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addGeneric(FlatBufferBuilder $builder, $generic)
    {
        $builder->addBoolX(46, $generic, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(47, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAocsNotes(FlatBufferBuilder $builder, $aocsNotes)
    {
        $builder->addOffsetX(48, $aocsNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(49, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(50, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(51, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(52, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(53, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(54, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endBus_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
