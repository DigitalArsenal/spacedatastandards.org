<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
class MtiDwell_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return MtiDwell_Abridged
     */
    public static function getRootAsMtiDwell_Abridged(ByteBuffer $bb)
    {
        $obj = new MtiDwell_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function MtiDwell_AbridgedIdentifier()
    {
        return "MTID";
    }

    public static function MtiDwell_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::MtiDwell_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return MtiDwell_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Sequential count of a revisit of the bounding area in the last sent Job Definition Segment, where a Revisit Index of '0' indicates the first revisit.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD2()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Temporally sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD3()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Flag indicating the last dwell of the revisit.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getD4()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Count of the total number of targets reported during this dwell and sent in this Dwell Segment.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD5()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields (missionRefTime) of the Mission Segment.
    /// Example: /// Example: 1234567890
    /// Constraints: No constraints specified.
    /**
     * @return long
     */
    public function getD6()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /// North-South position of the sensor at the temporal center of the dwell, in degrees.
    /// Example: /// Example: 1.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD7()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The East-West position of the sensor at the temporal center of the dwell, in degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD8()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The altitude of the sensor at temporal center of the dwell, above the WGS 84 ellipsoid, expressed in centimeters.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD9()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Factor which modifies the value of the reported target latitude (Delta Latitude, field D32.4).
    /// Example: /// Example: 1.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD10()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Factor which modifies the value of the reported target longitude (Delta Longitude, field D32.5).
    /// Example: /// Example: 1.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD11()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured along the sensor track direction (field D15), in centimeters.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD12()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured orthogonal to the sensor track direction (field D15), in centimeters.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD13()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Standard deviation of the sensor altitude estimate (field D9), in centimeters.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD14()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Ground track of the sensor at the time of the dwell, as the angle in degrees (clockwise) from True North.
    /// Example: /// Example: 1.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD15()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Ground speed of the sensor at the time of the dwell, in millimeters per second.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD16()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Velocity of the sensor in the vertical direction, in decimeters per second.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD17()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Standard deviation of the estimate of the sensor track, in degrees.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD18()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Standard deviation of estimate of the sensor speed, in millimeters per second.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD19()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Standard deviation of estimate of the sensor vertical velocity, expressed in centimeters per second.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD20()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Heading of the platform at the time of the dwell, as the angle in degrees (clockwise) from True North to the roll axis of the platform.
    /// Example: /// Example: 1.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD21()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Pitch angle of the platform at the time of the dwell, in degrees.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD22()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Roll angle of the platform at the time of the dwell, in degrees.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD23()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The North-South position of the center of the dwell area, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD24()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The East-West position of the center of the dwell area, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD25()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Distance on the earth surface, expressed in kilometers, from the near edge to the center of the dwell area.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD26()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For dwell based radars, one-half of the 3-dB beamwidth.  For non-dwell based radars, the angle between the beginning of the dwell to the center of the dwell.  Measured in degrees.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD27()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rotation of the sensor broadside face about the local vertical axis of the platform, in degrees.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD28()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD29()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getD30()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getD31()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getD32($j)
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getD32Length()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Dwell timestamp in ISO8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getDwellts()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startMtiDwell_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(32);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return MtiDwell_Abridged
     */
    public static function createMtiDwell_Abridged(FlatBufferBuilder $builder, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $dwellts)
    {
        $builder->startObject(32);
        self::addD2($builder, $d2);
        self::addD3($builder, $d3);
        self::addD4($builder, $d4);
        self::addD5($builder, $d5);
        self::addD6($builder, $d6);
        self::addD7($builder, $d7);
        self::addD8($builder, $d8);
        self::addD9($builder, $d9);
        self::addD10($builder, $d10);
        self::addD11($builder, $d11);
        self::addD12($builder, $d12);
        self::addD13($builder, $d13);
        self::addD14($builder, $d14);
        self::addD15($builder, $d15);
        self::addD16($builder, $d16);
        self::addD17($builder, $d17);
        self::addD18($builder, $d18);
        self::addD19($builder, $d19);
        self::addD20($builder, $d20);
        self::addD21($builder, $d21);
        self::addD22($builder, $d22);
        self::addD23($builder, $d23);
        self::addD24($builder, $d24);
        self::addD25($builder, $d25);
        self::addD26($builder, $d26);
        self::addD27($builder, $d27);
        self::addD28($builder, $d28);
        self::addD29($builder, $d29);
        self::addD30($builder, $d30);
        self::addD31($builder, $d31);
        self::addD32($builder, $d32);
        self::addDwellts($builder, $dwellts);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD2(FlatBufferBuilder $builder, $d2)
    {
        $builder->addIntX(0, $d2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD3(FlatBufferBuilder $builder, $d3)
    {
        $builder->addIntX(1, $d3, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addD4(FlatBufferBuilder $builder, $d4)
    {
        $builder->addBoolX(2, $d4, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD5(FlatBufferBuilder $builder, $d5)
    {
        $builder->addIntX(3, $d5, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addD6(FlatBufferBuilder $builder, $d6)
    {
        $builder->addLongX(4, $d6, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD7(FlatBufferBuilder $builder, $d7)
    {
        $builder->addDoubleX(5, $d7, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD8(FlatBufferBuilder $builder, $d8)
    {
        $builder->addDoubleX(6, $d8, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD9(FlatBufferBuilder $builder, $d9)
    {
        $builder->addIntX(7, $d9, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD10(FlatBufferBuilder $builder, $d10)
    {
        $builder->addDoubleX(8, $d10, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD11(FlatBufferBuilder $builder, $d11)
    {
        $builder->addDoubleX(9, $d11, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD12(FlatBufferBuilder $builder, $d12)
    {
        $builder->addIntX(10, $d12, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD13(FlatBufferBuilder $builder, $d13)
    {
        $builder->addIntX(11, $d13, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD14(FlatBufferBuilder $builder, $d14)
    {
        $builder->addIntX(12, $d14, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD15(FlatBufferBuilder $builder, $d15)
    {
        $builder->addDoubleX(13, $d15, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD16(FlatBufferBuilder $builder, $d16)
    {
        $builder->addIntX(14, $d16, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD17(FlatBufferBuilder $builder, $d17)
    {
        $builder->addIntX(15, $d17, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD18(FlatBufferBuilder $builder, $d18)
    {
        $builder->addIntX(16, $d18, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD19(FlatBufferBuilder $builder, $d19)
    {
        $builder->addIntX(17, $d19, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD20(FlatBufferBuilder $builder, $d20)
    {
        $builder->addIntX(18, $d20, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD21(FlatBufferBuilder $builder, $d21)
    {
        $builder->addDoubleX(19, $d21, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD22(FlatBufferBuilder $builder, $d22)
    {
        $builder->addDoubleX(20, $d22, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD23(FlatBufferBuilder $builder, $d23)
    {
        $builder->addDoubleX(21, $d23, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD24(FlatBufferBuilder $builder, $d24)
    {
        $builder->addDoubleX(22, $d24, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD25(FlatBufferBuilder $builder, $d25)
    {
        $builder->addDoubleX(23, $d25, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD26(FlatBufferBuilder $builder, $d26)
    {
        $builder->addDoubleX(24, $d26, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD27(FlatBufferBuilder $builder, $d27)
    {
        $builder->addDoubleX(25, $d27, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD28(FlatBufferBuilder $builder, $d28)
    {
        $builder->addDoubleX(26, $d28, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD29(FlatBufferBuilder $builder, $d29)
    {
        $builder->addDoubleX(27, $d29, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addD30(FlatBufferBuilder $builder, $d30)
    {
        $builder->addDoubleX(28, $d30, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addD31(FlatBufferBuilder $builder, $d31)
    {
        $builder->addIntX(29, $d31, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addD32(FlatBufferBuilder $builder, $d32)
    {
        $builder->addOffsetX(30, $d32, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createD32Vector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startD32Vector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDwellts(FlatBufferBuilder $builder, $dwellts)
    {
        $builder->addOffsetX(31, $dwellts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endMtiDwell_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishMtiDwell_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "MTID");
    }
}
