<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.
class Operatingunit_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Operatingunit_Abridged
     */
    public static function getRootAsOperatingunit_Abridged(ByteBuffer $bb)
    {
        $obj = new Operatingunit_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Operatingunit_AbridgedIdentifier()
    {
        return "OPER";
    }

    public static function Operatingunit_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Operatingunit_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Operatingunit_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: OPERATINGUNIT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdOperatingUnit()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the operating unit record from the originating system.
    /// Example: /// Example: 32100000000021
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAltOperatingUnitId()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the operating unit.
    /// Example: /// Example: SOME_NAME
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getName()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of the operating unit.
    /// Example: /// Example: Description of unit
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getDescription()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the location record for this operating unit.
    /// Example: /// Example: LOCATION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdLocation()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the contact for this operating unit.
    /// Example: /// Example: CONTACT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdContact()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the organization record for this operating unit.
    /// Example: /// Example: ORGANIZATION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOrganization()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.
    /// Example: /// Example: AZXAZ12345
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getUnitIdentifier()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: IQ
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getCountryCode()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
    /// Example: /// Example: IZ
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getAltCountryCode()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// World Aeronautical Chart identifier for the area in which a designated operating unit is located.
    /// Example: /// Example: 0427
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getWac()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: OPR
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getOperStatus()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: RDY
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getCondition()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getConditionAvail()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
    /// Example: /// Example: 7
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getEval()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: EOB
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getFpa()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
    /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
    /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
    /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    /// PENDING: Track object which has not been evaluated.
    /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    /// Example: /// Example: FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getIdent()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: OTHR
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getAllegiance()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
    /// Example: /// Example: HL
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getAltAllegiance()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Location name for the coordinates.
    /// Example: /// Example: LOCATION_NAME
    /// Constraints: Minimum length = 0, Maximum length = 54
    public function getLocName()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: GR
    /// Constraints: Minimum length = 0, Maximum length = 9
    public function getLocReason()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: NV
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getForce()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.
    /// Example: /// Example: FORCE-NAME
    /// Constraints: Minimum length = 0, Maximum length = 54
    public function getForceName()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: MIL
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getFunctRole()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: W6
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getMsnPrimary()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: QK
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getMsnPrimarySpecialty()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getMasterUnit()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getStylizedUnit()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: 5
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getDivCat()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: SHIP
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getEchelon()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: 68
    /// Constraints: Minimum length = 0, Maximum length = 2
    public function getEchelonTier()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getFleetId()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: ND
    /// Constraints: Minimum length = 0, Maximum length = 2
    public function getDeployStatus()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The country code of the observed flag flown.
    /// Example: /// Example: IZ
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getFlagFlown()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: WGS
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getCoordDatum()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// "Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
    /// Pos. 1-2.  Latitude Degrees     [00-90]
    /// Pos. 3-4.  Latitude Minutes     [00-59]
    /// Pos. 5-6.  Latitude Seconds     [00-59]
    /// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
    /// Pos. 10. Latitude Hemisphere       [NS] 
    /// Pos. 11-13. Longitude Degrees     [00-180] 
    /// Pos. 14-15. Longitude Minutes     [00-59] 
    /// Pos. 16-17. Longitude Seconds     [00-59] 
    /// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
    /// Pos. 21. Longitude Hemisphere     [EW]
    /// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]".
    /// Example: /// Example: 340000000N0430000000E
    /// Constraints: Minimum length = 0, Maximum length = 21
    public function getCoord()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the plus or minus error assessed against the method used to derive the coordinate.
    /// Example: /// Example: 12.345
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCoordDerivAcc()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLat()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLon()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
    /// Example: /// Example: 123.45
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevMsl()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
    /// Example: /// Example: 50
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getElevMslConfLvl()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Indicates the plus or minus error assessed against the method used to derive the elevation.
    /// Example: /// Example: 12.34
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevMslDerivAcc()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The distance between Mean Sea Level and a referenced ellipsoid.
    /// Example: /// Example: 12.34
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGeoidalMslSep()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// "Indicates the grid system used in the development of the milGrid coordinates. Values are:
    /// UPS - Universal Polar System
    /// UTM - Universal Transverse Mercator".
    /// Example: /// Example: UTM
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getMilGridSys()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
    /// 4Q (grid zone designator, GZD)
    /// FJ (the 100,000-meter square identifier)
    /// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
    /// Example: /// Example: 4QFJ12345678
    /// Constraints: Minimum length = 0, Maximum length = 15
    public function getMilGrid()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Universal Transverse Mercator (UTM) grid coordinates.
    /// Pos. 1-2, UTM Zone Column   [01-60
    /// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
    /// Pos. 4, UTM False Easting   [0-9]
    /// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
    /// Pos. 10-11, UTM False Northing    [0-9][0-9]
    /// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
    /// Example: /// Example: 19P4390691376966
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getUtm()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
    /// Example: /// Example: AL006
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getAirDefArea()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: IZ07
    /// Constraints: Minimum length = 0, Maximum length = 7
    public function getPolSubdiv()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
    /// Example: /// Example: SOGPU----------
    /// Constraints: Minimum length = 0, Maximum length = 15
    public function getSymCode()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
    /// 0 - Does not meet criteria above
    /// 1 - Primary importance to system
    /// 2 - Secondary importance to system
    /// 3 - Tertiary importance to system
    /// O - Other. Explain in Remarks.
    /// Example: /// Example: 1
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getClassRating()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:
    /// A - Active
    /// I - Inactive
    /// K - Acknowledged
    /// L - Local
    /// Q - A nominated (NOM) or Data Change Request (DCR) record
    /// R - Production reduced by CMD decision
    /// W - Working Record.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 1
    public function getRecStatus()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
    /// Example: /// Example: 2008-06-10
    /// Constraints: No constraints specified.
    public function getReviewDate()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Responsible Producer - Organization that is responsible for the maintenance of the record.
    /// Example: /// Example: RT
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getResProd()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: Provider Reference Documentation
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getReferenceDoc()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Operatingunit_Abridged_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startOperatingunit_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(60);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Operatingunit_Abridged
     */
    public static function createOperatingunit_Abridged(FlatBufferBuilder $builder, $idOperatingUnit, $classificationMarking, $altOperatingUnitId, $name, $description, $idLocation, $idContact, $idOrganization, $unitIdentifier, $countryCode, $altCountryCode, $wac, $operStatus, $condition, $conditionAvail, $eval, $fpa, $ident, $allegiance, $altAllegiance, $locName, $locReason, $force, $forceName, $functRole, $msnPrimary, $msnPrimarySpecialty, $masterUnit, $stylizedUnit, $divCat, $echelon, $echelonTier, $fleetId, $deployStatus, $flagFlown, $coordDatum, $coord, $coordDerivAcc, $lat, $lon, $elevMsl, $elevMslConfLvl, $elevMslDerivAcc, $geoidalMslSep, $milGridSys, $milGrid, $utm, $airDefArea, $polSubdiv, $symCode, $classRating, $recStatus, $reviewDate, $resProd, $referenceDoc, $createdAt, $createdBy, $source, $origin, $dataMode)
    {
        $builder->startObject(60);
        self::addIdOperatingUnit($builder, $idOperatingUnit);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addAltOperatingUnitId($builder, $altOperatingUnitId);
        self::addName($builder, $name);
        self::addDescription($builder, $description);
        self::addIdLocation($builder, $idLocation);
        self::addIdContact($builder, $idContact);
        self::addIdOrganization($builder, $idOrganization);
        self::addUnitIdentifier($builder, $unitIdentifier);
        self::addCountryCode($builder, $countryCode);
        self::addAltCountryCode($builder, $altCountryCode);
        self::addWac($builder, $wac);
        self::addOperStatus($builder, $operStatus);
        self::addCondition($builder, $condition);
        self::addConditionAvail($builder, $conditionAvail);
        self::addEval($builder, $eval);
        self::addFpa($builder, $fpa);
        self::addIdent($builder, $ident);
        self::addAllegiance($builder, $allegiance);
        self::addAltAllegiance($builder, $altAllegiance);
        self::addLocName($builder, $locName);
        self::addLocReason($builder, $locReason);
        self::addForce($builder, $force);
        self::addForceName($builder, $forceName);
        self::addFunctRole($builder, $functRole);
        self::addMsnPrimary($builder, $msnPrimary);
        self::addMsnPrimarySpecialty($builder, $msnPrimarySpecialty);
        self::addMasterUnit($builder, $masterUnit);
        self::addStylizedUnit($builder, $stylizedUnit);
        self::addDivCat($builder, $divCat);
        self::addEchelon($builder, $echelon);
        self::addEchelonTier($builder, $echelonTier);
        self::addFleetId($builder, $fleetId);
        self::addDeployStatus($builder, $deployStatus);
        self::addFlagFlown($builder, $flagFlown);
        self::addCoordDatum($builder, $coordDatum);
        self::addCoord($builder, $coord);
        self::addCoordDerivAcc($builder, $coordDerivAcc);
        self::addLat($builder, $lat);
        self::addLon($builder, $lon);
        self::addElevMsl($builder, $elevMsl);
        self::addElevMslConfLvl($builder, $elevMslConfLvl);
        self::addElevMslDerivAcc($builder, $elevMslDerivAcc);
        self::addGeoidalMslSep($builder, $geoidalMslSep);
        self::addMilGridSys($builder, $milGridSys);
        self::addMilGrid($builder, $milGrid);
        self::addUtm($builder, $utm);
        self::addAirDefArea($builder, $airDefArea);
        self::addPolSubdiv($builder, $polSubdiv);
        self::addSymCode($builder, $symCode);
        self::addClassRating($builder, $classRating);
        self::addRecStatus($builder, $recStatus);
        self::addReviewDate($builder, $reviewDate);
        self::addResProd($builder, $resProd);
        self::addReferenceDoc($builder, $referenceDoc);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOperatingUnit(FlatBufferBuilder $builder, $idOperatingUnit)
    {
        $builder->addOffsetX(0, $idOperatingUnit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltOperatingUnitId(FlatBufferBuilder $builder, $altOperatingUnitId)
    {
        $builder->addOffsetX(2, $altOperatingUnitId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(3, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(4, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdLocation(FlatBufferBuilder $builder, $idLocation)
    {
        $builder->addOffsetX(5, $idLocation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdContact(FlatBufferBuilder $builder, $idContact)
    {
        $builder->addOffsetX(6, $idContact, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOrganization(FlatBufferBuilder $builder, $idOrganization)
    {
        $builder->addOffsetX(7, $idOrganization, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUnitIdentifier(FlatBufferBuilder $builder, $unitIdentifier)
    {
        $builder->addOffsetX(8, $unitIdentifier, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountryCode(FlatBufferBuilder $builder, $countryCode)
    {
        $builder->addOffsetX(9, $countryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltCountryCode(FlatBufferBuilder $builder, $altCountryCode)
    {
        $builder->addOffsetX(10, $altCountryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWac(FlatBufferBuilder $builder, $wac)
    {
        $builder->addOffsetX(11, $wac, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOperStatus(FlatBufferBuilder $builder, $operStatus)
    {
        $builder->addOffsetX(12, $operStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCondition(FlatBufferBuilder $builder, $condition)
    {
        $builder->addOffsetX(13, $condition, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addConditionAvail(FlatBufferBuilder $builder, $conditionAvail)
    {
        $builder->addOffsetX(14, $conditionAvail, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addEval(FlatBufferBuilder $builder, $eval)
    {
        $builder->addIntX(15, $eval, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFpa(FlatBufferBuilder $builder, $fpa)
    {
        $builder->addOffsetX(16, $fpa, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdent(FlatBufferBuilder $builder, $ident)
    {
        $builder->addOffsetX(17, $ident, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAllegiance(FlatBufferBuilder $builder, $allegiance)
    {
        $builder->addOffsetX(18, $allegiance, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltAllegiance(FlatBufferBuilder $builder, $altAllegiance)
    {
        $builder->addOffsetX(19, $altAllegiance, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLocName(FlatBufferBuilder $builder, $locName)
    {
        $builder->addOffsetX(20, $locName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLocReason(FlatBufferBuilder $builder, $locReason)
    {
        $builder->addOffsetX(21, $locReason, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addForce(FlatBufferBuilder $builder, $force)
    {
        $builder->addOffsetX(22, $force, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addForceName(FlatBufferBuilder $builder, $forceName)
    {
        $builder->addOffsetX(23, $forceName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFunctRole(FlatBufferBuilder $builder, $functRole)
    {
        $builder->addOffsetX(24, $functRole, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsnPrimary(FlatBufferBuilder $builder, $msnPrimary)
    {
        $builder->addOffsetX(25, $msnPrimary, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMsnPrimarySpecialty(FlatBufferBuilder $builder, $msnPrimarySpecialty)
    {
        $builder->addOffsetX(26, $msnPrimarySpecialty, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addMasterUnit(FlatBufferBuilder $builder, $masterUnit)
    {
        $builder->addBoolX(27, $masterUnit, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addStylizedUnit(FlatBufferBuilder $builder, $stylizedUnit)
    {
        $builder->addBoolX(28, $stylizedUnit, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDivCat(FlatBufferBuilder $builder, $divCat)
    {
        $builder->addOffsetX(29, $divCat, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEchelon(FlatBufferBuilder $builder, $echelon)
    {
        $builder->addOffsetX(30, $echelon, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEchelonTier(FlatBufferBuilder $builder, $echelonTier)
    {
        $builder->addOffsetX(31, $echelonTier, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFleetId(FlatBufferBuilder $builder, $fleetId)
    {
        $builder->addOffsetX(32, $fleetId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDeployStatus(FlatBufferBuilder $builder, $deployStatus)
    {
        $builder->addOffsetX(33, $deployStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFlagFlown(FlatBufferBuilder $builder, $flagFlown)
    {
        $builder->addOffsetX(34, $flagFlown, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCoordDatum(FlatBufferBuilder $builder, $coordDatum)
    {
        $builder->addOffsetX(35, $coordDatum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCoord(FlatBufferBuilder $builder, $coord)
    {
        $builder->addOffsetX(36, $coord, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCoordDerivAcc(FlatBufferBuilder $builder, $coordDerivAcc)
    {
        $builder->addDoubleX(37, $coordDerivAcc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLat(FlatBufferBuilder $builder, $lat)
    {
        $builder->addDoubleX(38, $lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLon(FlatBufferBuilder $builder, $lon)
    {
        $builder->addDoubleX(39, $lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevMsl(FlatBufferBuilder $builder, $elevMsl)
    {
        $builder->addDoubleX(40, $elevMsl, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addElevMslConfLvl(FlatBufferBuilder $builder, $elevMslConfLvl)
    {
        $builder->addIntX(41, $elevMslConfLvl, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevMslDerivAcc(FlatBufferBuilder $builder, $elevMslDerivAcc)
    {
        $builder->addDoubleX(42, $elevMslDerivAcc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGeoidalMslSep(FlatBufferBuilder $builder, $geoidalMslSep)
    {
        $builder->addDoubleX(43, $geoidalMslSep, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMilGridSys(FlatBufferBuilder $builder, $milGridSys)
    {
        $builder->addOffsetX(44, $milGridSys, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMilGrid(FlatBufferBuilder $builder, $milGrid)
    {
        $builder->addOffsetX(45, $milGrid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUtm(FlatBufferBuilder $builder, $utm)
    {
        $builder->addOffsetX(46, $utm, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAirDefArea(FlatBufferBuilder $builder, $airDefArea)
    {
        $builder->addOffsetX(47, $airDefArea, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPolSubdiv(FlatBufferBuilder $builder, $polSubdiv)
    {
        $builder->addOffsetX(48, $polSubdiv, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSymCode(FlatBufferBuilder $builder, $symCode)
    {
        $builder->addOffsetX(49, $symCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassRating(FlatBufferBuilder $builder, $classRating)
    {
        $builder->addOffsetX(50, $classRating, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRecStatus(FlatBufferBuilder $builder, $recStatus)
    {
        $builder->addOffsetX(51, $recStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReviewDate(FlatBufferBuilder $builder, $reviewDate)
    {
        $builder->addOffsetX(52, $reviewDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addResProd(FlatBufferBuilder $builder, $resProd)
    {
        $builder->addOffsetX(53, $resProd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReferenceDoc(FlatBufferBuilder $builder, $referenceDoc)
    {
        $builder->addOffsetX(54, $referenceDoc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(55, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(56, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(57, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(58, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(59, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endOperatingunit_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishOperatingunit_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "OPER");
    }
}
