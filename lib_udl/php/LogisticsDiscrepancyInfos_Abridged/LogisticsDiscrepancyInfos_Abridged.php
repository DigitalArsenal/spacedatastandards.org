<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Discrepancy information associated with this LogisticsSupport record.
class LogisticsDiscrepancyInfos_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return LogisticsDiscrepancyInfos_Abridged
     */
    public static function getRootAsLogisticsDiscrepancyInfos_Abridged(ByteBuffer $bb)
    {
        $obj = new LogisticsDiscrepancyInfos_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function LogisticsDiscrepancyInfos_AbridgedIdentifier()
    {
        return "LOGI";
    }

    public static function LogisticsDiscrepancyInfos_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::LogisticsDiscrepancyInfos_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return LogisticsDiscrepancyInfos_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Job Control Number of the discrepancy.
    /// Example: /// Example: 231942400
    /// Constraints: Minimum length = 0, Maximum length = 12
    public function getJcn()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The aircraft discrepancy description.
    /// Example: /// Example: PILOT WINDSHIELD PANEL ASSY CRACKED, AND ARCING REQ R2 IAW 56.11.10
    /// Constraints: Minimum length = 0, Maximum length = 680
    public function getDiscrepancyInfo()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The job start time, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T10:30:00.123Z
    /// Constraints: No constraints specified.
    public function getJobStTime()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The discrepancy closure time, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T10:30:00.123Z
    /// Constraints: No constraints specified.
    public function getClosureTime()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startLogisticsDiscrepancyInfos_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return LogisticsDiscrepancyInfos_Abridged
     */
    public static function createLogisticsDiscrepancyInfos_Abridged(FlatBufferBuilder $builder, $jcn, $discrepancyInfo, $jobStTime, $closureTime)
    {
        $builder->startObject(4);
        self::addJcn($builder, $jcn);
        self::addDiscrepancyInfo($builder, $discrepancyInfo);
        self::addJobStTime($builder, $jobStTime);
        self::addClosureTime($builder, $closureTime);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJcn(FlatBufferBuilder $builder, $jcn)
    {
        $builder->addOffsetX(0, $jcn, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDiscrepancyInfo(FlatBufferBuilder $builder, $discrepancyInfo)
    {
        $builder->addOffsetX(1, $discrepancyInfo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJobStTime(FlatBufferBuilder $builder, $jobStTime)
    {
        $builder->addOffsetX(2, $jobStTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClosureTime(FlatBufferBuilder $builder, $closureTime)
    {
        $builder->addOffsetX(3, $closureTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endLogisticsDiscrepancyInfos_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishLogisticsDiscrepancyInfos_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "LOGI");
    }
}
