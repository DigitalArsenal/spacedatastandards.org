<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and meta data indicating the specifics of the orientation of an on-orbit object.  Attitude is typically distributed in a flat file containing details of the attitude generation as well as a large collection of individual points at varying time steps. AttitudeSet is analogous to this flat file.
class AttitudeSet_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AttitudeSet_Full
     */
    public static function getRootAsAttitudeSet_Full(ByteBuffer $bb)
    {
        $obj = new AttitudeSet_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AttitudeSet_FullIdentifier()
    {
        return "ATTI";
    }

    public static function AttitudeSet_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AttitudeSet_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AttitudeSet_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ATTITUDESET-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the on-orbit satellite to which this attitude set applies.
    /// Example: /// Example: 41947
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/catalog number of the on-orbit object to which this attitude set applies.
    /// Example: /// Example: 41947
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: /// Example: D6593
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getOrigObjectId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of attitude message or messages associated with this set.
    /// AEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.
    /// APM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.
    /// Example: /// Example: AEM
    /// Constraints: Minimum length = 1, Maximum length = 3
    public function getType()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.
    /// Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getEsId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of UDL UUIDs of one or more AttitudeSet records associated with this set.  For example, a spacecraft Attitude Ephemeris Set might include a reference to an Attitude Parameter Message defining the sensor to body frame transformation for a sensor onboard the spacecraft, which allows for calculation of the sensor orientation in frame2 of the attitude ephemeris.
    /// Example: /// Example: ['2ea97de6-4680-4767-a07e-35d16398ef60']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAsRef($j)
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAsRefLength()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.
    /// Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigSensorId()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.
    /// Example: /// Example: 2022-07-07T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getStartTime()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.
    /// Example: /// Example: 2022-07-07T18:00:00.654321Z
    /// Constraints: No constraints specified.
    public function getEndTime()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
    /// Example: /// Example: SCBODY
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getFrame1()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getFrame2()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of attitude records contained in this set.
    /// Example: /// Example: 120
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumPoints()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.
    /// Example: /// Example: 60
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getStepSize()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Initial precession angle (ECI J2000 frame) in degrees.
    /// Example: /// Example: 30.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPrecAngleInit()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Initial spin angle (ECI J2000 frame) in degrees.
    /// Example: /// Example: 25.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSpinAngleInit()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. 
    /// The following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as '2', a double rotation with X-Z sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can be expressed as '312'.
    /// Example: /// Example: 123
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getEulerRotSeq()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Collection of attitude data associated with this Attitude Set.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAttitudeList($j)
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAttitudeListLength()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Recommended interpolation method for estimating attitude ephemeris data.
    /// Example: /// Example: LINEAR
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getInterpolator()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Recommended polynomial interpolation degree.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getInterpolatorDegree()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional notes/comments for this attitude set.
    /// Example: /// Example: Notes for this attitude set
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getNotes()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-07-05T12:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getSource()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AttitudeSet_Full_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getOnOrbit()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAttitudeSet_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(30);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AttitudeSet_Full
     */
    public static function createAttitudeSet_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $idOnOrbit, $satNo, $origObjectId, $type, $esId, $asRef, $idSensor, $origSensorId, $startTime, $endTime, $frame1, $frame2, $numPoints, $stepSize, $precAngleInit, $spinAngleInit, $eulerRotSeq, $attitudeList, $interpolator, $interpolatorDegree, $notes, $createdAt, $createdBy, $source, $origin, $dataMode, $origNetwork, $onOrbit)
    {
        $builder->startObject(30);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addSatNo($builder, $satNo);
        self::addOrigObjectId($builder, $origObjectId);
        self::addType($builder, $type);
        self::addEsId($builder, $esId);
        self::addAsRef($builder, $asRef);
        self::addIdSensor($builder, $idSensor);
        self::addOrigSensorId($builder, $origSensorId);
        self::addStartTime($builder, $startTime);
        self::addEndTime($builder, $endTime);
        self::addFrame1($builder, $frame1);
        self::addFrame2($builder, $frame2);
        self::addNumPoints($builder, $numPoints);
        self::addStepSize($builder, $stepSize);
        self::addPrecAngleInit($builder, $precAngleInit);
        self::addSpinAngleInit($builder, $spinAngleInit);
        self::addEulerRotSeq($builder, $eulerRotSeq);
        self::addAttitudeList($builder, $attitudeList);
        self::addInterpolator($builder, $interpolator);
        self::addInterpolatorDegree($builder, $interpolatorDegree);
        self::addNotes($builder, $notes);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        self::addOnOrbit($builder, $onOrbit);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(2, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(3, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(4, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(5, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEsId(FlatBufferBuilder $builder, $esId)
    {
        $builder->addOffsetX(6, $esId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAsRef(FlatBufferBuilder $builder, $asRef)
    {
        $builder->addOffsetX(7, $asRef, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAsRefVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAsRefVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(8, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigSensorId(FlatBufferBuilder $builder, $origSensorId)
    {
        $builder->addOffsetX(9, $origSensorId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStartTime(FlatBufferBuilder $builder, $startTime)
    {
        $builder->addOffsetX(10, $startTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEndTime(FlatBufferBuilder $builder, $endTime)
    {
        $builder->addOffsetX(11, $endTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFrame1(FlatBufferBuilder $builder, $frame1)
    {
        $builder->addOffsetX(12, $frame1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFrame2(FlatBufferBuilder $builder, $frame2)
    {
        $builder->addOffsetX(13, $frame2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumPoints(FlatBufferBuilder $builder, $numPoints)
    {
        $builder->addIntX(14, $numPoints, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addStepSize(FlatBufferBuilder $builder, $stepSize)
    {
        $builder->addIntX(15, $stepSize, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPrecAngleInit(FlatBufferBuilder $builder, $precAngleInit)
    {
        $builder->addDoubleX(16, $precAngleInit, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSpinAngleInit(FlatBufferBuilder $builder, $spinAngleInit)
    {
        $builder->addDoubleX(17, $spinAngleInit, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEulerRotSeq(FlatBufferBuilder $builder, $eulerRotSeq)
    {
        $builder->addOffsetX(18, $eulerRotSeq, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAttitudeList(FlatBufferBuilder $builder, $attitudeList)
    {
        $builder->addOffsetX(19, $attitudeList, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAttitudeListVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAttitudeListVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addInterpolator(FlatBufferBuilder $builder, $interpolator)
    {
        $builder->addOffsetX(20, $interpolator, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addInterpolatorDegree(FlatBufferBuilder $builder, $interpolatorDegree)
    {
        $builder->addIntX(21, $interpolatorDegree, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNotes(FlatBufferBuilder $builder, $notes)
    {
        $builder->addOffsetX(22, $notes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(23, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(24, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(25, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(26, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(27, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(28, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOnOrbit(FlatBufferBuilder $builder, $onOrbit)
    {
        $builder->addOffsetX(29, $onOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAttitudeSet_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAttitudeSet_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ATTI");
    }
}
