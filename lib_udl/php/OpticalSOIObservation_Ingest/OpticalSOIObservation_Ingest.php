<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// An Optical SOI record contains observation information taken from a sensor about a Space Object.
class OpticalSOIObservation_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return OpticalSOIObservation_Ingest
     */
    public static function getRootAsOpticalSOIObservation_Ingest(ByteBuffer $bb)
    {
        $obj = new OpticalSOIObservation_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function OpticalSOIObservation_IngestIdentifier()
    {
        return "OPTI";
    }

    public static function OpticalSOIObservation_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::OpticalSOIObservation_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return OpticalSOIObservation_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Observation detection start time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.888456Z
    /// Constraints: No constraints specified.
    public function getObStartTime()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.
    /// Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.898456Z', '2018-01-01T16:00:00.998456Z']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getIntensityTimes($j)
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getIntensityTimesLength()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCurrentSpectralFilterNum()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Image exposure duration in seconds.
    /// Example: /// Example: 0.455
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getExpDuration()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.
    /// Example: /// Example: [1.1, 1.1, 1.1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getIntensities($j)
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getIntensitiesLength()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.
    /// Example: /// Example: [0.32, 0.32, 0.32]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getExtinctionCoeffs($j)
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getExtinctionCoeffsLength()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
    /// Example: /// Example: [0.06, 0.06, 0.06]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getExtinctionCoeffsUnc($j)
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getExtinctionCoeffsUncLength()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
    /// Example: /// Example: [100625.375, 100625.375, 100625.375]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSkyBgs($j)
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSkyBgsLength()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
    /// Example: /// Example: [100625.375, 100625.375, 100625.375]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLocalSkyBgs($j)
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLocalSkyBgsLength()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.
    /// Example: /// Example: [0.065, 0.065, 0.065]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getLocalSkyBgsUnc($j)
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLocalSkyBgsUncLength()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the number of detected stars in the FOV with a value for each element in the intensities field.
    /// Example: /// Example: [6, 6, 6]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getNumDetectedStars($j)
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getNumDetectedStarsLength()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of the number of correlated stars in the FOV with a value for each element in the intensities field.
    /// Example: /// Example: [3, 3, 3]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getNumCorrelatedStars($j)
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getNumCorrelatedStarsLength()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).
    /// Example: /// Example: [24.711, 24.711, 24.711]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getZeroPoints($j)
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getZeroPointsLength()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.
    /// Example: /// Example: [107.4, 107.4, 107.4]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRas($j)
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRasLength()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frame’s exposure time.
    /// Example: /// Example: [-0.45, -0.45, -0.45]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getDeclinations($j)
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDeclinationsLength()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frame’s exposure time.
    /// Example: /// Example: [0, 0, 0]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRaRates($j)
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRaRatesLength()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.
    /// Example: /// Example: [0.1, 0.2, 1]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getPercentSats($j)
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getPercentSatsLength()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startOpticalSOIObservation_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(17);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return OpticalSOIObservation_Ingest
     */
    public static function createOpticalSOIObservation_Ingest(FlatBufferBuilder $builder, $obStartTime, $intensityTimes, $currentSpectralFilterNum, $expDuration, $intensities, $extinctionCoeffs, $extinctionCoeffsUnc, $skyBgs, $localSkyBgs, $localSkyBgsUnc, $numDetectedStars, $numCorrelatedStars, $zeroPoints, $ras, $declinations, $raRates, $percentSats)
    {
        $builder->startObject(17);
        self::addObStartTime($builder, $obStartTime);
        self::addIntensityTimes($builder, $intensityTimes);
        self::addCurrentSpectralFilterNum($builder, $currentSpectralFilterNum);
        self::addExpDuration($builder, $expDuration);
        self::addIntensities($builder, $intensities);
        self::addExtinctionCoeffs($builder, $extinctionCoeffs);
        self::addExtinctionCoeffsUnc($builder, $extinctionCoeffsUnc);
        self::addSkyBgs($builder, $skyBgs);
        self::addLocalSkyBgs($builder, $localSkyBgs);
        self::addLocalSkyBgsUnc($builder, $localSkyBgsUnc);
        self::addNumDetectedStars($builder, $numDetectedStars);
        self::addNumCorrelatedStars($builder, $numCorrelatedStars);
        self::addZeroPoints($builder, $zeroPoints);
        self::addRas($builder, $ras);
        self::addDeclinations($builder, $declinations);
        self::addRaRates($builder, $raRates);
        self::addPercentSats($builder, $percentSats);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObStartTime(FlatBufferBuilder $builder, $obStartTime)
    {
        $builder->addOffsetX(0, $obStartTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addIntensityTimes(FlatBufferBuilder $builder, $intensityTimes)
    {
        $builder->addOffsetX(1, $intensityTimes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createIntensityTimesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startIntensityTimesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCurrentSpectralFilterNum(FlatBufferBuilder $builder, $currentSpectralFilterNum)
    {
        $builder->addIntX(2, $currentSpectralFilterNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addExpDuration(FlatBufferBuilder $builder, $expDuration)
    {
        $builder->addDoubleX(3, $expDuration, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addIntensities(FlatBufferBuilder $builder, $intensities)
    {
        $builder->addOffsetX(4, $intensities, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createIntensitiesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startIntensitiesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addExtinctionCoeffs(FlatBufferBuilder $builder, $extinctionCoeffs)
    {
        $builder->addOffsetX(5, $extinctionCoeffs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createExtinctionCoeffsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startExtinctionCoeffsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addExtinctionCoeffsUnc(FlatBufferBuilder $builder, $extinctionCoeffsUnc)
    {
        $builder->addOffsetX(6, $extinctionCoeffsUnc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createExtinctionCoeffsUncVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startExtinctionCoeffsUncVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSkyBgs(FlatBufferBuilder $builder, $skyBgs)
    {
        $builder->addOffsetX(7, $skyBgs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSkyBgsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSkyBgsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLocalSkyBgs(FlatBufferBuilder $builder, $localSkyBgs)
    {
        $builder->addOffsetX(8, $localSkyBgs, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLocalSkyBgsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLocalSkyBgsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLocalSkyBgsUnc(FlatBufferBuilder $builder, $localSkyBgsUnc)
    {
        $builder->addOffsetX(9, $localSkyBgsUnc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLocalSkyBgsUncVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLocalSkyBgsUncVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addNumDetectedStars(FlatBufferBuilder $builder, $numDetectedStars)
    {
        $builder->addOffsetX(10, $numDetectedStars, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createNumDetectedStarsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startNumDetectedStarsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addNumCorrelatedStars(FlatBufferBuilder $builder, $numCorrelatedStars)
    {
        $builder->addOffsetX(11, $numCorrelatedStars, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createNumCorrelatedStarsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startNumCorrelatedStarsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addZeroPoints(FlatBufferBuilder $builder, $zeroPoints)
    {
        $builder->addOffsetX(12, $zeroPoints, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createZeroPointsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startZeroPointsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRas(FlatBufferBuilder $builder, $ras)
    {
        $builder->addOffsetX(13, $ras, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRasVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRasVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDeclinations(FlatBufferBuilder $builder, $declinations)
    {
        $builder->addOffsetX(14, $declinations, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDeclinationsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDeclinationsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRaRates(FlatBufferBuilder $builder, $raRates)
    {
        $builder->addOffsetX(15, $raRates, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRaRatesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRaRatesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPercentSats(FlatBufferBuilder $builder, $percentSats)
    {
        $builder->addOffsetX(16, $percentSats, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createPercentSatsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startPercentSatsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endOpticalSOIObservation_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishOpticalSOIObservation_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "OPTI");
    }
}
