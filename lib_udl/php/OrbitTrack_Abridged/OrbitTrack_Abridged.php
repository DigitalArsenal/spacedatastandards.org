<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Keplerian orbital elements describing an orbit for a particular on-orbit satellite and applicable sensor data aiding in the orbit prediction.
class OrbitTrack_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return OrbitTrack_Abridged
     */
    public static function getRootAsOrbitTrack_Abridged(ByteBuffer $bb)
    {
        $obj = new OrbitTrack_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function OrbitTrack_AbridgedIdentifier()
    {
        return "ORBI";
    }

    public static function OrbitTrack_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::OrbitTrack_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return OrbitTrack_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: ORBIT_TRACK_ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: /// Example: 32375
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/catalog number of the target on-orbit object.
    /// Example: /// Example: 37375
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional identifier provided by observation source to indicate the target on-orbit object of this track. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: L2045
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigObjectId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the Elset associated with this object.
    /// Example: /// Example: c715a619-8695-44d2-9e7d-effd257b4843
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdElset()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Track timestamp in ISO8601 UTC format, with microsecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getTs()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS-84 latitude of the track object subpoint, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 19.88550102
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLat()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the track object subpoint, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 46.74596844
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLon()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Track point altitude relative to WGS-84 ellipsoid, in meters.
    /// Example: /// Example: 585.71
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAlt()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Radio frequency of the track, measured in megahertz (MHz).
    /// Example: /// Example: 1.5273
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRdfRF()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// International radio call sign assigned to the track. This is an 8-character alphanumeric code.
    /// Example: /// Example: Charlie
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getCallSign()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Report number received from the reporting source for this track.
    /// Example: /// Example: 123
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getRptNum()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
    ///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    ///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    ///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    ///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    ///  PENDING: Track object which has not been evaluated.
    ///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    ///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    /// Example: /// Example: FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getObjIdent()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \OrbitTrack_Abridged_objIdent_Enum::ASSUMED_FRIEND;
    }

    /// Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
    ///  FAKER: Friendly track, object, or entity acting as an exercise hostile.
    ///  JOKER: Friendly track, object, or entity acting as an exercise suspect.
    ///  KILO: Friendly high-value object.
    ///  TRAVELLER: Suspect land or surface track following a recognized traffic route.
    ///  ZOMBIE: Suspect track, object, or entity of special interest.
    /// Example: /// Example: JOKER
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getIdentAmp()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Status of the satellite.
    /// Example: /// Example: INACTIVE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSatStatus()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The on-orbit category assigned to this track object (DEBRIS, MANNED, PAYLOAD, PLATFORM, ROCKET BODY, UNKNOWN).
    /// Example: /// Example: PAYLOAD
    /// Constraints: Minimum length = 0, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getObjectType()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \OrbitTrack_Abridged_objectType_Enum::DEBRIS;
    }

    /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getCountryCode()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Predicted change in Mean Motion (velocity) in radians/herg^2.  herg is a unit of time measure equal to 806.8120769 seconds, and is the orbital period of an imaginary satellite rotating about the Earth at zero altitude.
    /// Example: /// Example: 0.5868
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDecay()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One-line Charlie elements set.
    /// Example: /// Example: 323751332255940400010000003635829600010200072500098205001150
    /// Constraints: Minimum length = 0, Maximum length = 100
    public function getCharlieLine()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouData array and is required if aouData is not null. See the aouData field definition for specific information.
    /// Example: /// Example: ELLIPSE
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getAouType()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Three element array representing an Area of Uncertainty (AoU).  The array element definitions and units are type specific depending on the aouType specified in this record:
    /// ELLIPSE:
    ///    brg - orientation in degrees of the ellipse
    ///    a1 - semi-major axis in meters
    ///    a2 - semi-minor axis in meters
    /// BEARING (BEARING BOX or MTST BEARING BOX):
    ///    brg - orientation in degrees of the bearing box 
    ///    a1 - length of bearing box in meters 
    ///    a2 - half-width of bearing box in meters 
    /// OTHER (All other type values):
    ///    brg - line of bearing in degrees true 
    ///    a1 - bearing error in degrees 
    ///    a2 - estimated range in meters.
    /// Example: /// Example: [34.3, 26.5, 1.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getAouData($j)
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAouDataLength()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Track object speed, in km/sec.
    /// Example: /// Example: 15.03443
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSpd()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The angle formed between the line of sight of the observer and the horizon at track timestamp, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
    /// Example: /// Example: 15.2
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAngElev()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
    /// Example: /// Example: 90
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCntnmnt()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Source cross-reference code for the command that originated the track report.
    /// Example: /// Example: XE
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getXref()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The cross-reference code of the channel on which this track report was received, if the report came over a comms channel.
    /// Example: /// Example: FHKX
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getChXRef()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Free-form remarks entered for the satellite.
    /// Example: /// Example: A note regarding this spacecraft
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getAmplification()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A text aplifier displaying IFF/SIF/AIS Identification modes and codes.
    /// Example: /// Example: ID Mode
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getIff()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getReinforced()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that this track represents a reduced object or group.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getReduced()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getHq()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getDummy()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getTaskForce()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getFeint()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getInstallation()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The type of vehicle with which the device is associated.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: SPACE
    /// Constraints: Minimum length = 0, Maximum length = 10
    public function getVehType()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// UUID identifying the track, which should remain the same on subsequent tracks of the same object.
    /// Example: /// Example: 3668f135-fcba-4630-a43d-e7782e11d988
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTrkId()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// TrackSensor Collection.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTrackSensors($j)
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTrackSensorsLength()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database.
    /// Example: /// Example: 2021-02-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \OrbitTrack_Abridged_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startOrbitTrack_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(45);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return OrbitTrack_Abridged
     */
    public static function createOrbitTrack_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $idOnOrbit, $satNo, $origObjectId, $idElset, $ts, $lat, $lon, $alt, $rdfRF, $callSign, $rptNum, $objIdent, $identAmp, $satStatus, $objectType, $countryCode, $decay, $charlieLine, $aouType, $aouData, $spd, $angElev, $cntnmnt, $xref, $chXRef, $amplification, $iff, $reinforced, $reduced, $hq, $dummy, $taskForce, $feint, $installation, $vehType, $trkId, $trackSensors, $createdAt, $createdBy, $source, $origin, $dataMode, $origNetwork)
    {
        $builder->startObject(45);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addSatNo($builder, $satNo);
        self::addOrigObjectId($builder, $origObjectId);
        self::addIdElset($builder, $idElset);
        self::addTs($builder, $ts);
        self::addLat($builder, $lat);
        self::addLon($builder, $lon);
        self::addAlt($builder, $alt);
        self::addRdfRF($builder, $rdfRF);
        self::addCallSign($builder, $callSign);
        self::addRptNum($builder, $rptNum);
        self::addObjIdent($builder, $objIdent);
        self::addIdentAmp($builder, $identAmp);
        self::addSatStatus($builder, $satStatus);
        self::addObjectType($builder, $objectType);
        self::addCountryCode($builder, $countryCode);
        self::addDecay($builder, $decay);
        self::addCharlieLine($builder, $charlieLine);
        self::addAouType($builder, $aouType);
        self::addAouData($builder, $aouData);
        self::addSpd($builder, $spd);
        self::addAngElev($builder, $angElev);
        self::addCntnmnt($builder, $cntnmnt);
        self::addXref($builder, $xref);
        self::addChXRef($builder, $chXRef);
        self::addAmplification($builder, $amplification);
        self::addIff($builder, $iff);
        self::addReinforced($builder, $reinforced);
        self::addReduced($builder, $reduced);
        self::addHq($builder, $hq);
        self::addDummy($builder, $dummy);
        self::addTaskForce($builder, $taskForce);
        self::addFeint($builder, $feint);
        self::addInstallation($builder, $installation);
        self::addVehType($builder, $vehType);
        self::addTrkId($builder, $trkId);
        self::addTrackSensors($builder, $trackSensors);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(2, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(3, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(4, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdElset(FlatBufferBuilder $builder, $idElset)
    {
        $builder->addOffsetX(5, $idElset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTs(FlatBufferBuilder $builder, $ts)
    {
        $builder->addOffsetX(6, $ts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLat(FlatBufferBuilder $builder, $lat)
    {
        $builder->addDoubleX(7, $lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLon(FlatBufferBuilder $builder, $lon)
    {
        $builder->addDoubleX(8, $lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAlt(FlatBufferBuilder $builder, $alt)
    {
        $builder->addDoubleX(9, $alt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRdfRF(FlatBufferBuilder $builder, $rdfRF)
    {
        $builder->addDoubleX(10, $rdfRF, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCallSign(FlatBufferBuilder $builder, $callSign)
    {
        $builder->addOffsetX(11, $callSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRptNum(FlatBufferBuilder $builder, $rptNum)
    {
        $builder->addOffsetX(12, $rptNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addObjIdent(FlatBufferBuilder $builder, $objIdent)
    {
        $builder->addSbyteX(13, $objIdent, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdentAmp(FlatBufferBuilder $builder, $identAmp)
    {
        $builder->addOffsetX(14, $identAmp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSatStatus(FlatBufferBuilder $builder, $satStatus)
    {
        $builder->addOffsetX(15, $satStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addObjectType(FlatBufferBuilder $builder, $objectType)
    {
        $builder->addSbyteX(16, $objectType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountryCode(FlatBufferBuilder $builder, $countryCode)
    {
        $builder->addOffsetX(17, $countryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDecay(FlatBufferBuilder $builder, $decay)
    {
        $builder->addDoubleX(18, $decay, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCharlieLine(FlatBufferBuilder $builder, $charlieLine)
    {
        $builder->addOffsetX(19, $charlieLine, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAouType(FlatBufferBuilder $builder, $aouType)
    {
        $builder->addOffsetX(20, $aouType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAouData(FlatBufferBuilder $builder, $aouData)
    {
        $builder->addOffsetX(21, $aouData, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAouDataVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAouDataVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSpd(FlatBufferBuilder $builder, $spd)
    {
        $builder->addDoubleX(22, $spd, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAngElev(FlatBufferBuilder $builder, $angElev)
    {
        $builder->addDoubleX(23, $angElev, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCntnmnt(FlatBufferBuilder $builder, $cntnmnt)
    {
        $builder->addDoubleX(24, $cntnmnt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addXref(FlatBufferBuilder $builder, $xref)
    {
        $builder->addOffsetX(25, $xref, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addChXRef(FlatBufferBuilder $builder, $chXRef)
    {
        $builder->addOffsetX(26, $chXRef, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAmplification(FlatBufferBuilder $builder, $amplification)
    {
        $builder->addOffsetX(27, $amplification, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIff(FlatBufferBuilder $builder, $iff)
    {
        $builder->addOffsetX(28, $iff, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addReinforced(FlatBufferBuilder $builder, $reinforced)
    {
        $builder->addBoolX(29, $reinforced, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addReduced(FlatBufferBuilder $builder, $reduced)
    {
        $builder->addBoolX(30, $reduced, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addHq(FlatBufferBuilder $builder, $hq)
    {
        $builder->addBoolX(31, $hq, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addDummy(FlatBufferBuilder $builder, $dummy)
    {
        $builder->addBoolX(32, $dummy, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addTaskForce(FlatBufferBuilder $builder, $taskForce)
    {
        $builder->addBoolX(33, $taskForce, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addFeint(FlatBufferBuilder $builder, $feint)
    {
        $builder->addBoolX(34, $feint, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addInstallation(FlatBufferBuilder $builder, $installation)
    {
        $builder->addBoolX(35, $installation, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVehType(FlatBufferBuilder $builder, $vehType)
    {
        $builder->addOffsetX(36, $vehType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTrkId(FlatBufferBuilder $builder, $trkId)
    {
        $builder->addOffsetX(37, $trkId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTrackSensors(FlatBufferBuilder $builder, $trackSensors)
    {
        $builder->addOffsetX(38, $trackSensors, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTrackSensorsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTrackSensorsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(39, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(40, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(41, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(42, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(43, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(44, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endOrbitTrack_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishOrbitTrack_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "ORBI");
    }
}
