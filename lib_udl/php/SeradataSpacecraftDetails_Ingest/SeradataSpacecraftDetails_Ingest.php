<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// On-orbit spacecraft details compiled by Seradata for a particular satellite.
class SeradataSpacecraftDetails_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return SeradataSpacecraftDetails_Ingest
     */
    public static function getRootAsSeradataSpacecraftDetails_Ingest(ByteBuffer $bb)
    {
        $obj = new SeradataSpacecraftDetails_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function SeradataSpacecraftDetails_IngestIdentifier()
    {
        return "SERA";
    }

    public static function SeradataSpacecraftDetails_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::SeradataSpacecraftDetails_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return SeradataSpacecraftDetails_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SERADATASPACECRAFTDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// UUID of the parent Onorbit record, if available.
    /// Example: /// Example: 503
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft name.
    /// Example: /// Example: name
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getName()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description associated with the spacecraft.
    /// Example: /// Example: description
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    public function getDescription()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Seradata international number.
    /// Example: /// Example: number
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getIntlNumber()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Seradata sector (e.g. Commercial, Military, Civil/Other).
    /// Example: /// Example: Commercial
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getSector()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Apogee in km.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getApogee()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Perigee in km.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPerigee()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spacecraft period in minutes.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPeriod()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Seradata provided inclination in degrees.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getInclination()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// UUID of the prime manufacturer organization, if available.
    /// Example: /// Example: 05c43360-382e-4aa2-b875-ed28945ff2e5
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPrimeManufacturerOrgId()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc).
    /// Example: /// Example: 3-Axis
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getStabilizer()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft design life in days.
    /// Example: /// Example: 231
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getDesignLife()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Spacecraft expected life in days.
    /// Example: /// Example: 231
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getExpectedLife()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Boolean indicating if the spacecraft was insured at launch.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getInsuredAtLaunch()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Mass at launch in kg.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLaunchMass()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Mass dry in kg.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDryMass()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// NORAD satellite number if available.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getCatalogNumber()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Mass dry in kg.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTotalPayloadPower()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spacecraft constellation.
    /// Example: /// Example: GPS
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getConstellation()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft orbit category (e.g GEO, LEO, etc).
    /// Example: /// Example: GEO
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrbitCategory()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc).
    /// Example: /// Example: Geostationary
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrbitSubCategory()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Cost of launch in M USD.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLaunchCost()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Boolean indicating if the spacecraft launch cost is estimated.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLaunchCostEstimated()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Boolean indicating if the spacecraft cost is estimated.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getCostEstimated()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Cost of spacecraft at new in M USD.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getNewCost()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Combined cost of spacecraft at new in M USD.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCombinedNewCost()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Boolean indicating if the spacecraft combined new cost is estimated.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getCombinedCostEstimated()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Insured value of spacecraft at launch in M USD.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getInsuredValueAtLaunch()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Boolean indicating if the spacecraft insured value at launch is estimated.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getInsuredValueLaunchEstimated()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Annual insured depreciaion factor as a percent fraction.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAnnualInsuredDepreciationFactor()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Boolean indicating if the spacecraft annualInsuredDepreciationFactor is estimated.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getAnnualInsuredDepreciationFactorEstimated()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Insurance premium at launch in M USD.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getInsurancePremiumAtLaunch()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getInsurancePremiumAtLaunchEstimated()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Number of humans carried on spacecraft.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumHumans()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Cubesat dispenser type.
    /// Example: /// Example: cubesatDispenserType
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getCubesatDispenserType()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mass category (e.g.  2500 - 3500kg  - Large Satellite, 10 - 100 kg - Microsatellite, etc).
    /// Example: /// Example: 2500 - 3500kg  - Large Satellite
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getMassCategory()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Seradata launch ID.
    /// Example: /// Example: 11573
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getLaunchId()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Seradata launch ID.
    /// Example: /// Example: 123
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getLaunchVehicleId()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Seradata launch vehicle family.
    /// Example: /// Example: launchProviderFlightNumber
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getLaunchProviderFlightNumber()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Launch Site Name.
    /// Example: /// Example: launchSiteName
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getLaunchSiteName()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Seradata Launch Site ID.
    /// Example: /// Example: 28
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getLaunchSiteId()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Seradata launch country.
    /// Example: /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getLaunchCountry()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Seradata launch provider.
    /// Example: /// Example: launchProvider
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getLaunchProvider()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Seradata launch provider country.
    /// Example: /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getLaunchProviderCountry()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating if the launch was commercial.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getCommercialLaunch()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Seradata launch type (e.g. Launched, Future, etc).
    /// Example: /// Example: Future
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getLaunchType()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Seradata launch characteristic (e.g. Expendable, Reusable (New), etc).
    /// Example: /// Example: Expendable
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getLaunchCharacteristic()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Seradata launch number.
    /// Example: /// Example: FN040
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getLaunchNumber()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Launch date.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getLaunchDate()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Seradata remarks on launch date.
    /// Example: /// Example: launchDateRemarks
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getLaunchDateRemarks()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Youtube link of launch.
    /// Example: /// Example: youtubeLaunchLink
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getYoutubeLaunchLink()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft status (e.g. Inactive - Retired, Inactive - Re-entered, Active, etc).
    /// Example: /// Example: Inactive - Retired
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getStatus()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft owner name.
    /// Example: /// Example: owner
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getOwner()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft owner country.
    /// Example: /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOwnerCountry()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft operator name.
    /// Example: /// Example: operator
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getOperator()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft operator country.
    /// Example: /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOperatorCountry()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating if the spacecraft was leased.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLeased()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Spacecraft order date.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getOrderDate()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Total capability lost as a percent fraction.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCapabilityLost()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Total capacity lost as a percent fraction.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCapacityLost()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spacecraft primary mission and group.
    /// Example: /// Example: primaryMissionGroup
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getPrimaryMissionGroup()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft additional missions and groups.
    /// Example: /// Example: additionalMissionsGroups
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getAdditionalMissionsGroups()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of insurance claims for this spacecraft.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTotalClaims()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of injuries related to this spacecraft.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTotalInjuries()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of fatalities related to this spacecraft.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTotalFatalities()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Spacecraft name at launch.
    /// Example: /// Example: nameAtLaunch
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getNameAtLaunch()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft Bus ID.
    /// Example: /// Example: BUS-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getBusId()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Current age in years.
    /// Example: /// Example: 5.898630136986301
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCurrentAge()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spacecraft life lost as a percent fraction.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLifeLost()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS84 longitude of the spacecraft’s latest GEO position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -8.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGeoPosition()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spacecraft total insurance losses as a fraction.
    /// Example: /// Example: 0.393
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getInsuranceLossesTotal()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spacecraft launch arranger.
    /// Example: /// Example: launchArranger
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getLaunchArranger()
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft launch arranger country.
    /// Example: /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getLaunchArrangerCountry()
    {
        $o = $this->__offset(152);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft serial number.
    /// Example: /// Example: serialNumber
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSerialNumber()
    {
        $o = $this->__offset(154);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft program name.
    /// Example: /// Example: programName
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getProgramName()
    {
        $o = $this->__offset(156);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft reused hull name.
    /// Example: /// Example: reusedHullName
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getReusedHullName()
    {
        $o = $this->__offset(158);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft date of observation.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getDateOfObservation()
    {
        $o = $this->__offset(160);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Spacecraft latest latitude in degrees.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLat()
    {
        $o = $this->__offset(162);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spacecraft latest longitude in degrees.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLon()
    {
        $o = $this->__offset(164);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spacecraft latest altitude in km.
    /// Example: /// Example: 36036.6330576414
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getAltitude()
    {
        $o = $this->__offset(166);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spacecraft collision risk 1mm sqm latest.
    /// Example: /// Example: 1.33
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCollisionRiskMM()
    {
        $o = $this->__offset(168);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spacecraft collision risk 1cm sqm latest.
    /// Example: /// Example: 1.43
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCollisionRiskCM()
    {
        $o = $this->__offset(170);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Spacecraft quantity.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getQuantity()
    {
        $o = $this->__offset(172);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Spacecraft reusable flights.
    /// Example: /// Example: reusableFlights
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getReusableFlights()
    {
        $o = $this->__offset(174);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Notes on the spacecraft.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    public function getNotes()
    {
        $o = $this->__offset(176);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Insurance notes for the spacecraft.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    public function getInsuranceNotes()
    {
        $o = $this->__offset(178);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Insurance notes for the spacecraft.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    public function getLaunchNotes()
    {
        $o = $this->__offset(180);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(182);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(184);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(186);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(188);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SeradataSpacecraftDetails_Ingest_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(190);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(192);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSeradataSpacecraftDetails_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(95);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return SeradataSpacecraftDetails_Ingest
     */
    public static function createSeradataSpacecraftDetails_Ingest(FlatBufferBuilder $builder, $id, $idOnOrbit, $classificationMarking, $name, $description, $intlNumber, $sector, $apogee, $perigee, $period, $inclination, $primeManufacturerOrgId, $stabilizer, $designLife, $expectedLife, $insuredAtLaunch, $launchMass, $dryMass, $catalogNumber, $totalPayloadPower, $constellation, $orbitCategory, $orbitSubCategory, $launchCost, $launchCostEstimated, $costEstimated, $newCost, $combinedNewCost, $combinedCostEstimated, $insuredValueAtLaunch, $insuredValueLaunchEstimated, $annualInsuredDepreciationFactor, $annualInsuredDepreciationFactorEstimated, $insurancePremiumAtLaunch, $insurancePremiumAtLaunchEstimated, $numHumans, $cubesatDispenserType, $massCategory, $launchId, $launchVehicleId, $launchProviderFlightNumber, $launchSiteName, $launchSiteId, $launchCountry, $launchProvider, $launchProviderCountry, $commercialLaunch, $launchType, $launchCharacteristic, $launchNumber, $launchDate, $launchDateRemarks, $youtubeLaunchLink, $status, $owner, $ownerCountry, $operator, $operatorCountry, $leased, $orderDate, $capabilityLost, $capacityLost, $primaryMissionGroup, $additionalMissionsGroups, $totalClaims, $totalInjuries, $totalFatalities, $nameAtLaunch, $busId, $currentAge, $lifeLost, $geoPosition, $insuranceLossesTotal, $launchArranger, $launchArrangerCountry, $serialNumber, $programName, $reusedHullName, $dateOfObservation, $lat, $lon, $altitude, $collisionRiskMM, $collisionRiskCM, $quantity, $reusableFlights, $notes, $insuranceNotes, $launchNotes, $source, $origin, $origNetwork, $dataMode, $createdAt, $createdBy)
    {
        $builder->startObject(95);
        self::addId($builder, $id);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addName($builder, $name);
        self::addDescription($builder, $description);
        self::addIntlNumber($builder, $intlNumber);
        self::addSector($builder, $sector);
        self::addApogee($builder, $apogee);
        self::addPerigee($builder, $perigee);
        self::addPeriod($builder, $period);
        self::addInclination($builder, $inclination);
        self::addPrimeManufacturerOrgId($builder, $primeManufacturerOrgId);
        self::addStabilizer($builder, $stabilizer);
        self::addDesignLife($builder, $designLife);
        self::addExpectedLife($builder, $expectedLife);
        self::addInsuredAtLaunch($builder, $insuredAtLaunch);
        self::addLaunchMass($builder, $launchMass);
        self::addDryMass($builder, $dryMass);
        self::addCatalogNumber($builder, $catalogNumber);
        self::addTotalPayloadPower($builder, $totalPayloadPower);
        self::addConstellation($builder, $constellation);
        self::addOrbitCategory($builder, $orbitCategory);
        self::addOrbitSubCategory($builder, $orbitSubCategory);
        self::addLaunchCost($builder, $launchCost);
        self::addLaunchCostEstimated($builder, $launchCostEstimated);
        self::addCostEstimated($builder, $costEstimated);
        self::addNewCost($builder, $newCost);
        self::addCombinedNewCost($builder, $combinedNewCost);
        self::addCombinedCostEstimated($builder, $combinedCostEstimated);
        self::addInsuredValueAtLaunch($builder, $insuredValueAtLaunch);
        self::addInsuredValueLaunchEstimated($builder, $insuredValueLaunchEstimated);
        self::addAnnualInsuredDepreciationFactor($builder, $annualInsuredDepreciationFactor);
        self::addAnnualInsuredDepreciationFactorEstimated($builder, $annualInsuredDepreciationFactorEstimated);
        self::addInsurancePremiumAtLaunch($builder, $insurancePremiumAtLaunch);
        self::addInsurancePremiumAtLaunchEstimated($builder, $insurancePremiumAtLaunchEstimated);
        self::addNumHumans($builder, $numHumans);
        self::addCubesatDispenserType($builder, $cubesatDispenserType);
        self::addMassCategory($builder, $massCategory);
        self::addLaunchId($builder, $launchId);
        self::addLaunchVehicleId($builder, $launchVehicleId);
        self::addLaunchProviderFlightNumber($builder, $launchProviderFlightNumber);
        self::addLaunchSiteName($builder, $launchSiteName);
        self::addLaunchSiteId($builder, $launchSiteId);
        self::addLaunchCountry($builder, $launchCountry);
        self::addLaunchProvider($builder, $launchProvider);
        self::addLaunchProviderCountry($builder, $launchProviderCountry);
        self::addCommercialLaunch($builder, $commercialLaunch);
        self::addLaunchType($builder, $launchType);
        self::addLaunchCharacteristic($builder, $launchCharacteristic);
        self::addLaunchNumber($builder, $launchNumber);
        self::addLaunchDate($builder, $launchDate);
        self::addLaunchDateRemarks($builder, $launchDateRemarks);
        self::addYoutubeLaunchLink($builder, $youtubeLaunchLink);
        self::addStatus($builder, $status);
        self::addOwner($builder, $owner);
        self::addOwnerCountry($builder, $ownerCountry);
        self::addOperator($builder, $operator);
        self::addOperatorCountry($builder, $operatorCountry);
        self::addLeased($builder, $leased);
        self::addOrderDate($builder, $orderDate);
        self::addCapabilityLost($builder, $capabilityLost);
        self::addCapacityLost($builder, $capacityLost);
        self::addPrimaryMissionGroup($builder, $primaryMissionGroup);
        self::addAdditionalMissionsGroups($builder, $additionalMissionsGroups);
        self::addTotalClaims($builder, $totalClaims);
        self::addTotalInjuries($builder, $totalInjuries);
        self::addTotalFatalities($builder, $totalFatalities);
        self::addNameAtLaunch($builder, $nameAtLaunch);
        self::addBusId($builder, $busId);
        self::addCurrentAge($builder, $currentAge);
        self::addLifeLost($builder, $lifeLost);
        self::addGeoPosition($builder, $geoPosition);
        self::addInsuranceLossesTotal($builder, $insuranceLossesTotal);
        self::addLaunchArranger($builder, $launchArranger);
        self::addLaunchArrangerCountry($builder, $launchArrangerCountry);
        self::addSerialNumber($builder, $serialNumber);
        self::addProgramName($builder, $programName);
        self::addReusedHullName($builder, $reusedHullName);
        self::addDateOfObservation($builder, $dateOfObservation);
        self::addLat($builder, $lat);
        self::addLon($builder, $lon);
        self::addAltitude($builder, $altitude);
        self::addCollisionRiskMM($builder, $collisionRiskMM);
        self::addCollisionRiskCM($builder, $collisionRiskCM);
        self::addQuantity($builder, $quantity);
        self::addReusableFlights($builder, $reusableFlights);
        self::addNotes($builder, $notes);
        self::addInsuranceNotes($builder, $insuranceNotes);
        self::addLaunchNotes($builder, $launchNotes);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(1, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(2, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(3, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescription(FlatBufferBuilder $builder, $description)
    {
        $builder->addOffsetX(4, $description, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIntlNumber(FlatBufferBuilder $builder, $intlNumber)
    {
        $builder->addOffsetX(5, $intlNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSector(FlatBufferBuilder $builder, $sector)
    {
        $builder->addOffsetX(6, $sector, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addApogee(FlatBufferBuilder $builder, $apogee)
    {
        $builder->addDoubleX(7, $apogee, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPerigee(FlatBufferBuilder $builder, $perigee)
    {
        $builder->addDoubleX(8, $perigee, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPeriod(FlatBufferBuilder $builder, $period)
    {
        $builder->addDoubleX(9, $period, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addInclination(FlatBufferBuilder $builder, $inclination)
    {
        $builder->addDoubleX(10, $inclination, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPrimeManufacturerOrgId(FlatBufferBuilder $builder, $primeManufacturerOrgId)
    {
        $builder->addOffsetX(11, $primeManufacturerOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStabilizer(FlatBufferBuilder $builder, $stabilizer)
    {
        $builder->addOffsetX(12, $stabilizer, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDesignLife(FlatBufferBuilder $builder, $designLife)
    {
        $builder->addIntX(13, $designLife, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addExpectedLife(FlatBufferBuilder $builder, $expectedLife)
    {
        $builder->addIntX(14, $expectedLife, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addInsuredAtLaunch(FlatBufferBuilder $builder, $insuredAtLaunch)
    {
        $builder->addBoolX(15, $insuredAtLaunch, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLaunchMass(FlatBufferBuilder $builder, $launchMass)
    {
        $builder->addDoubleX(16, $launchMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDryMass(FlatBufferBuilder $builder, $dryMass)
    {
        $builder->addDoubleX(17, $dryMass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCatalogNumber(FlatBufferBuilder $builder, $catalogNumber)
    {
        $builder->addIntX(18, $catalogNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTotalPayloadPower(FlatBufferBuilder $builder, $totalPayloadPower)
    {
        $builder->addDoubleX(19, $totalPayloadPower, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addConstellation(FlatBufferBuilder $builder, $constellation)
    {
        $builder->addOffsetX(20, $constellation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrbitCategory(FlatBufferBuilder $builder, $orbitCategory)
    {
        $builder->addOffsetX(21, $orbitCategory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrbitSubCategory(FlatBufferBuilder $builder, $orbitSubCategory)
    {
        $builder->addOffsetX(22, $orbitSubCategory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLaunchCost(FlatBufferBuilder $builder, $launchCost)
    {
        $builder->addDoubleX(23, $launchCost, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLaunchCostEstimated(FlatBufferBuilder $builder, $launchCostEstimated)
    {
        $builder->addBoolX(24, $launchCostEstimated, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addCostEstimated(FlatBufferBuilder $builder, $costEstimated)
    {
        $builder->addBoolX(25, $costEstimated, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNewCost(FlatBufferBuilder $builder, $newCost)
    {
        $builder->addDoubleX(26, $newCost, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCombinedNewCost(FlatBufferBuilder $builder, $combinedNewCost)
    {
        $builder->addDoubleX(27, $combinedNewCost, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addCombinedCostEstimated(FlatBufferBuilder $builder, $combinedCostEstimated)
    {
        $builder->addBoolX(28, $combinedCostEstimated, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addInsuredValueAtLaunch(FlatBufferBuilder $builder, $insuredValueAtLaunch)
    {
        $builder->addDoubleX(29, $insuredValueAtLaunch, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addInsuredValueLaunchEstimated(FlatBufferBuilder $builder, $insuredValueLaunchEstimated)
    {
        $builder->addBoolX(30, $insuredValueLaunchEstimated, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAnnualInsuredDepreciationFactor(FlatBufferBuilder $builder, $annualInsuredDepreciationFactor)
    {
        $builder->addDoubleX(31, $annualInsuredDepreciationFactor, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addAnnualInsuredDepreciationFactorEstimated(FlatBufferBuilder $builder, $annualInsuredDepreciationFactorEstimated)
    {
        $builder->addBoolX(32, $annualInsuredDepreciationFactorEstimated, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addInsurancePremiumAtLaunch(FlatBufferBuilder $builder, $insurancePremiumAtLaunch)
    {
        $builder->addDoubleX(33, $insurancePremiumAtLaunch, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addInsurancePremiumAtLaunchEstimated(FlatBufferBuilder $builder, $insurancePremiumAtLaunchEstimated)
    {
        $builder->addBoolX(34, $insurancePremiumAtLaunchEstimated, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumHumans(FlatBufferBuilder $builder, $numHumans)
    {
        $builder->addIntX(35, $numHumans, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCubesatDispenserType(FlatBufferBuilder $builder, $cubesatDispenserType)
    {
        $builder->addOffsetX(36, $cubesatDispenserType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMassCategory(FlatBufferBuilder $builder, $massCategory)
    {
        $builder->addOffsetX(37, $massCategory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchId(FlatBufferBuilder $builder, $launchId)
    {
        $builder->addOffsetX(38, $launchId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchVehicleId(FlatBufferBuilder $builder, $launchVehicleId)
    {
        $builder->addOffsetX(39, $launchVehicleId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchProviderFlightNumber(FlatBufferBuilder $builder, $launchProviderFlightNumber)
    {
        $builder->addOffsetX(40, $launchProviderFlightNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchSiteName(FlatBufferBuilder $builder, $launchSiteName)
    {
        $builder->addOffsetX(41, $launchSiteName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchSiteId(FlatBufferBuilder $builder, $launchSiteId)
    {
        $builder->addOffsetX(42, $launchSiteId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchCountry(FlatBufferBuilder $builder, $launchCountry)
    {
        $builder->addOffsetX(43, $launchCountry, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchProvider(FlatBufferBuilder $builder, $launchProvider)
    {
        $builder->addOffsetX(44, $launchProvider, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchProviderCountry(FlatBufferBuilder $builder, $launchProviderCountry)
    {
        $builder->addOffsetX(45, $launchProviderCountry, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addCommercialLaunch(FlatBufferBuilder $builder, $commercialLaunch)
    {
        $builder->addBoolX(46, $commercialLaunch, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchType(FlatBufferBuilder $builder, $launchType)
    {
        $builder->addOffsetX(47, $launchType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchCharacteristic(FlatBufferBuilder $builder, $launchCharacteristic)
    {
        $builder->addOffsetX(48, $launchCharacteristic, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchNumber(FlatBufferBuilder $builder, $launchNumber)
    {
        $builder->addOffsetX(49, $launchNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchDate(FlatBufferBuilder $builder, $launchDate)
    {
        $builder->addOffsetX(50, $launchDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchDateRemarks(FlatBufferBuilder $builder, $launchDateRemarks)
    {
        $builder->addOffsetX(51, $launchDateRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addYoutubeLaunchLink(FlatBufferBuilder $builder, $youtubeLaunchLink)
    {
        $builder->addOffsetX(52, $youtubeLaunchLink, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStatus(FlatBufferBuilder $builder, $status)
    {
        $builder->addOffsetX(53, $status, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOwner(FlatBufferBuilder $builder, $owner)
    {
        $builder->addOffsetX(54, $owner, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOwnerCountry(FlatBufferBuilder $builder, $ownerCountry)
    {
        $builder->addOffsetX(55, $ownerCountry, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOperator(FlatBufferBuilder $builder, $operator)
    {
        $builder->addOffsetX(56, $operator, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOperatorCountry(FlatBufferBuilder $builder, $operatorCountry)
    {
        $builder->addOffsetX(57, $operatorCountry, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLeased(FlatBufferBuilder $builder, $leased)
    {
        $builder->addBoolX(58, $leased, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrderDate(FlatBufferBuilder $builder, $orderDate)
    {
        $builder->addOffsetX(59, $orderDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCapabilityLost(FlatBufferBuilder $builder, $capabilityLost)
    {
        $builder->addDoubleX(60, $capabilityLost, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCapacityLost(FlatBufferBuilder $builder, $capacityLost)
    {
        $builder->addDoubleX(61, $capacityLost, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPrimaryMissionGroup(FlatBufferBuilder $builder, $primaryMissionGroup)
    {
        $builder->addOffsetX(62, $primaryMissionGroup, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAdditionalMissionsGroups(FlatBufferBuilder $builder, $additionalMissionsGroups)
    {
        $builder->addOffsetX(63, $additionalMissionsGroups, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTotalClaims(FlatBufferBuilder $builder, $totalClaims)
    {
        $builder->addIntX(64, $totalClaims, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTotalInjuries(FlatBufferBuilder $builder, $totalInjuries)
    {
        $builder->addIntX(65, $totalInjuries, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTotalFatalities(FlatBufferBuilder $builder, $totalFatalities)
    {
        $builder->addIntX(66, $totalFatalities, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNameAtLaunch(FlatBufferBuilder $builder, $nameAtLaunch)
    {
        $builder->addOffsetX(67, $nameAtLaunch, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBusId(FlatBufferBuilder $builder, $busId)
    {
        $builder->addOffsetX(68, $busId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCurrentAge(FlatBufferBuilder $builder, $currentAge)
    {
        $builder->addDoubleX(69, $currentAge, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLifeLost(FlatBufferBuilder $builder, $lifeLost)
    {
        $builder->addDoubleX(70, $lifeLost, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGeoPosition(FlatBufferBuilder $builder, $geoPosition)
    {
        $builder->addDoubleX(71, $geoPosition, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addInsuranceLossesTotal(FlatBufferBuilder $builder, $insuranceLossesTotal)
    {
        $builder->addDoubleX(72, $insuranceLossesTotal, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchArranger(FlatBufferBuilder $builder, $launchArranger)
    {
        $builder->addOffsetX(73, $launchArranger, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchArrangerCountry(FlatBufferBuilder $builder, $launchArrangerCountry)
    {
        $builder->addOffsetX(74, $launchArrangerCountry, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSerialNumber(FlatBufferBuilder $builder, $serialNumber)
    {
        $builder->addOffsetX(75, $serialNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addProgramName(FlatBufferBuilder $builder, $programName)
    {
        $builder->addOffsetX(76, $programName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReusedHullName(FlatBufferBuilder $builder, $reusedHullName)
    {
        $builder->addOffsetX(77, $reusedHullName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDateOfObservation(FlatBufferBuilder $builder, $dateOfObservation)
    {
        $builder->addOffsetX(78, $dateOfObservation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLat(FlatBufferBuilder $builder, $lat)
    {
        $builder->addDoubleX(79, $lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLon(FlatBufferBuilder $builder, $lon)
    {
        $builder->addDoubleX(80, $lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAltitude(FlatBufferBuilder $builder, $altitude)
    {
        $builder->addDoubleX(81, $altitude, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCollisionRiskMM(FlatBufferBuilder $builder, $collisionRiskMM)
    {
        $builder->addDoubleX(82, $collisionRiskMM, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCollisionRiskCM(FlatBufferBuilder $builder, $collisionRiskCM)
    {
        $builder->addDoubleX(83, $collisionRiskCM, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addQuantity(FlatBufferBuilder $builder, $quantity)
    {
        $builder->addIntX(84, $quantity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReusableFlights(FlatBufferBuilder $builder, $reusableFlights)
    {
        $builder->addOffsetX(85, $reusableFlights, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNotes(FlatBufferBuilder $builder, $notes)
    {
        $builder->addOffsetX(86, $notes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addInsuranceNotes(FlatBufferBuilder $builder, $insuranceNotes)
    {
        $builder->addOffsetX(87, $insuranceNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLaunchNotes(FlatBufferBuilder $builder, $launchNotes)
    {
        $builder->addOffsetX(88, $launchNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(89, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(90, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(91, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(92, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(93, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(94, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSeradataSpacecraftDetails_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSeradataSpacecraftDetails_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "SERA");
    }
}
