<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// This service provides operations for manipulation and querying of maritime Vessel data. Vessel contains the static data of the specific vessel: mmsi, cruise speed, max speed, etc.
class Vessel_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Vessel_Ingest
     */
    public static function getRootAsVessel_Ingest(ByteBuffer $bb)
    {
        $obj = new Vessel_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Vessel_IngestIdentifier()
    {
        return "VESS";
    }

    public static function Vessel_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Vessel_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Vessel_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    public function getEntity()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the parent entity. idEntity is required for Put.
    /// Example: /// Example: ENTITY-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdEntity()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The original source Id for this vessel.
    /// Example: /// Example: 590b5194fc32e75dd00682ba
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAltVesselId()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UDL ID of the organization that owns the vessel.
    /// Example: /// Example: 0147f777-w09a-835f-85aa-0a07a730fgg0
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOrganization()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of this vessel. Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
    /// Example: /// Example: DORNUM
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getVesselName()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).
    /// Example: /// Example: Passenger
    /// Constraints: Minimum length = 0, Maximum length = 48
    public function getVesselType()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The common name for a group of ships with similar design, usually named for the first vessel of the class.
    /// Example: /// Example: Nimitz
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getVesselClass()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Further description or explanation of the vessel or type.
    /// Example: /// Example: Search and Rescue Vessel
    /// Constraints: Minimum length = 0, Maximum length = 100
    public function getVesselDescription()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
    /// Example: /// Example: B45524
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getSconum()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
    /// Example: /// Example: 9566356
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getImon()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
    /// Example: /// Example: 416450000
    /// Constraints: Minimum length = 0, Maximum length = 9
    public function getMmsi()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A uniquely designated identifier for the vessel's transmitter station. All radio transmissions must be individually identified by the call sign. Merchant and naval vessels are assigned call signs by their national licensing authorities.
    /// Example: /// Example: V2OZ
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getCallsign()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The flag of the subject vessel.
    /// Example: /// Example: United States
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getVesselFlag()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Year the vessel went into service.
    /// Example: /// Example: 2014
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getYearBuilt()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The shipbuilder who built this vessel.
    /// Example: /// Example: Samsung Heavy Inds - Geoje
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getVesselBuilder()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The status of this vessel.
    /// Example: /// Example: In Service/Commission
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getStatus()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The date this vessel was first seen.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getFirstSeen()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
    /// Example: /// Example: 511.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLength()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
    /// Example: /// Example: 24.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getWidth()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The maximum static draught, in meters, of the vessel defined as the distance between the shipâ€™s keel and the waterline of the vessel.
    /// Example: /// Example: 21.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxDraught()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The weight in tons, of this vessel.
    /// Example: /// Example: 3423.76
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVslWt()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The maximum possible speed of this vessel in meters per second.
    /// Example: /// Example: 32.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMaxSpeed()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The stern type code (Counter, Cruiser) associated with this vessel.
    /// Example: /// Example: Cruiser
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getSternType()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The number of blades per shaft for this vessel.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumBlades()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The number of shafts on this vessel.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumShafts()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The type of propulsion employed by this vessel.
    /// Example: /// Example: Diesel
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getPropType()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The vessel hull number designation of this maritime vessel. The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
    /// Example: /// Example: A30081
    /// Constraints: Minimum length = 0, Maximum length = 7
    public function getHullNum()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 64
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Vessel_Ingest_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startVessel_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(35);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Vessel_Ingest
     */
    public static function createVessel_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $entity, $idEntity, $altVesselId, $idOrganization, $vesselName, $vesselType, $vesselClass, $vesselDescription, $sconum, $imon, $mmsi, $callsign, $vesselFlag, $yearBuilt, $vesselBuilder, $status, $firstSeen, $length, $width, $maxDraught, $vslWt, $maxSpeed, $sternType, $numBlades, $numShafts, $propType, $hullNum, $createdAt, $createdBy, $source, $origin, $dataMode, $origNetwork)
    {
        $builder->startObject(35);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addEntity($builder, $entity);
        self::addIdEntity($builder, $idEntity);
        self::addAltVesselId($builder, $altVesselId);
        self::addIdOrganization($builder, $idOrganization);
        self::addVesselName($builder, $vesselName);
        self::addVesselType($builder, $vesselType);
        self::addVesselClass($builder, $vesselClass);
        self::addVesselDescription($builder, $vesselDescription);
        self::addSconum($builder, $sconum);
        self::addImon($builder, $imon);
        self::addMmsi($builder, $mmsi);
        self::addCallsign($builder, $callsign);
        self::addVesselFlag($builder, $vesselFlag);
        self::addYearBuilt($builder, $yearBuilt);
        self::addVesselBuilder($builder, $vesselBuilder);
        self::addStatus($builder, $status);
        self::addFirstSeen($builder, $firstSeen);
        self::addLength($builder, $length);
        self::addWidth($builder, $width);
        self::addMaxDraught($builder, $maxDraught);
        self::addVslWt($builder, $vslWt);
        self::addMaxSpeed($builder, $maxSpeed);
        self::addSternType($builder, $sternType);
        self::addNumBlades($builder, $numBlades);
        self::addNumShafts($builder, $numShafts);
        self::addPropType($builder, $propType);
        self::addHullNum($builder, $hullNum);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEntity(FlatBufferBuilder $builder, $entity)
    {
        $builder->addOffsetX(2, $entity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdEntity(FlatBufferBuilder $builder, $idEntity)
    {
        $builder->addOffsetX(3, $idEntity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltVesselId(FlatBufferBuilder $builder, $altVesselId)
    {
        $builder->addOffsetX(4, $altVesselId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOrganization(FlatBufferBuilder $builder, $idOrganization)
    {
        $builder->addOffsetX(5, $idOrganization, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVesselName(FlatBufferBuilder $builder, $vesselName)
    {
        $builder->addOffsetX(6, $vesselName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVesselType(FlatBufferBuilder $builder, $vesselType)
    {
        $builder->addOffsetX(7, $vesselType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVesselClass(FlatBufferBuilder $builder, $vesselClass)
    {
        $builder->addOffsetX(8, $vesselClass, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVesselDescription(FlatBufferBuilder $builder, $vesselDescription)
    {
        $builder->addOffsetX(9, $vesselDescription, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSconum(FlatBufferBuilder $builder, $sconum)
    {
        $builder->addOffsetX(10, $sconum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addImon(FlatBufferBuilder $builder, $imon)
    {
        $builder->addIntX(11, $imon, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMmsi(FlatBufferBuilder $builder, $mmsi)
    {
        $builder->addOffsetX(12, $mmsi, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCallsign(FlatBufferBuilder $builder, $callsign)
    {
        $builder->addOffsetX(13, $callsign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVesselFlag(FlatBufferBuilder $builder, $vesselFlag)
    {
        $builder->addOffsetX(14, $vesselFlag, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addYearBuilt(FlatBufferBuilder $builder, $yearBuilt)
    {
        $builder->addOffsetX(15, $yearBuilt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVesselBuilder(FlatBufferBuilder $builder, $vesselBuilder)
    {
        $builder->addOffsetX(16, $vesselBuilder, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStatus(FlatBufferBuilder $builder, $status)
    {
        $builder->addOffsetX(17, $status, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFirstSeen(FlatBufferBuilder $builder, $firstSeen)
    {
        $builder->addOffsetX(18, $firstSeen, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLength(FlatBufferBuilder $builder, $length)
    {
        $builder->addDoubleX(19, $length, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWidth(FlatBufferBuilder $builder, $width)
    {
        $builder->addDoubleX(20, $width, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxDraught(FlatBufferBuilder $builder, $maxDraught)
    {
        $builder->addDoubleX(21, $maxDraught, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVslWt(FlatBufferBuilder $builder, $vslWt)
    {
        $builder->addDoubleX(22, $vslWt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaxSpeed(FlatBufferBuilder $builder, $maxSpeed)
    {
        $builder->addDoubleX(23, $maxSpeed, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSternType(FlatBufferBuilder $builder, $sternType)
    {
        $builder->addOffsetX(24, $sternType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumBlades(FlatBufferBuilder $builder, $numBlades)
    {
        $builder->addIntX(25, $numBlades, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumShafts(FlatBufferBuilder $builder, $numShafts)
    {
        $builder->addIntX(26, $numShafts, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPropType(FlatBufferBuilder $builder, $propType)
    {
        $builder->addOffsetX(27, $propType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHullNum(FlatBufferBuilder $builder, $hullNum)
    {
        $builder->addOffsetX(28, $hullNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(29, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(30, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(31, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(32, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(33, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(34, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endVessel_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishVessel_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "VESS");
    }
}
