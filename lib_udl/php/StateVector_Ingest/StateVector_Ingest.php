<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// This service provides operations for querying and manipulation of state vectors for OnOrbit objects. State vectors are cartesian vectors of position (r) and velocity (v) that, together with their time (epoch) (t), uniquely determine the trajectory of the orbiting body in space. J2000 is the preferred coordinate frame for all state vector positions/velocities in UDL, but in some cases data may be in another frame depending on the provider and/or datatype. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
class StateVector_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return StateVector_Ingest
     */
    public static function getRootAsStateVector_Ingest(ByteBuffer $bb)
    {
        $obj = new StateVector_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function StateVector_IngestIdentifier()
    {
        return "STAT";
    }

    public static function StateVector_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::StateVector_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return StateVector_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: STATEVECTOR-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdStateVector()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time of validity for state vector in ISO 8601 UTC datetime format, with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getEpoch()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The pedigree of state vector, or methods used for its generation to include state update/orbit determination, propagation from another state, or a state from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION, CONJUNCTION, FLIGHT_PLAN).
    /// Example: /// Example: CONJUNCTION
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getPedigree()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/Catalog number of the target OnOrbit object.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Optional identifier provided by state vector source to indicate the target onorbit object of this state vector. This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigObjectId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the OD solution record that produced this state vector. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queries as /udl/orbitdetermination/abc.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOrbitDetermination()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating this state vector was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getUct()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Cartesian X position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: -1118.577381
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getXpos()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Y position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 3026.231084
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getYpos()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Z position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 6167.831808
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZpos()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian X velocity of target, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: -4.25242784
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getXvel()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Y velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 5.291107434
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getYvel()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Z velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: -3.356493869
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZvel()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    /**
     * @return sbyte
     */
    public function getReferenceFrame()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \StateVector_Ingest_referenceFrame_Enum::J2000;
    }

    /// Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.  If the covReferenceFrame is null it is assumed to be J2000.
    /// The array values (1-21) represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:
    /// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;
    /// x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
    /// y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3
    /// z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6
    /// x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10
    /// y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
    /// z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;
    /// The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
    /// If additional covariance terms are included for DRAG, SRP, and/or THRUST, the matrix can be extended with the following order of elements:
    /// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR
    /// DRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;
    /// SRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;
    /// THR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCov($j)
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCovLength()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    /**
     * @return sbyte
     */
    public function getCovReferenceFrame()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \StateVector_Ingest_covReferenceFrame_Enum::J2000;
    }

    /// The method used to generate the covariance during the orbit determination (OD) that produced the state vector, or whether an arbitrary, non-calculated default value was used (CALCULATED, DEFAULT).
    /// Example: /// Example: CALCULATED
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getCovMethod()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The covariance matrix values represent the lower triangular half of the covariance matrix in terms of equinoctial elements.&nbsp; The size of the covariance matrix is dynamic.&nbsp; The values are outputted in order across each row, i.e.:
    /// 1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5
    /// 6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10
    /// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
    /// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
    /// 51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55
    /// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
    /// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
    /// The ordering of values is as follows:
    /// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp; Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp; B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...
    /// Af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
    /// Ag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3
    /// L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6
    /// N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10
    /// Chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp; 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15
    /// Psi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp; 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21
    /// B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp; 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28
    /// BDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp; 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36
    /// AGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp; 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45
    /// T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp; 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp; 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55
    /// C1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp; 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp; 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66
    /// C2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp; 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp; 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78
    /// :
    /// :
    /// where C1, C2, etc, are the "consider parameters" that may be added to the covariance matrix.&nbsp; The covariance matrix will be as large as the last element/model parameter needed.&nbsp; In other words, if the DC solved for all 6 elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size will be set to 0x0, and no data will follow.&nbsp; The cov field should contain only the lower left triangle values from top left down to bottom right, in order.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getEqCov($j)
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEqCovLength()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Cartesian X position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
    /// Example: /// Example: -1145.688502
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getXposAlt1()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Y position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
    /// Example: /// Example: 3020.729572
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getYposAlt1()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Z position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
    /// Example: /// Example: 6165.55187
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZposAlt1()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian X velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
    /// Example: /// Example: -4.270832252
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getXvelAlt1()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Y velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
    /// Example: /// Example: 5.27074276
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getYvelAlt1()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Z velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
    /// Example: /// Example: -3.365155181
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZvelAlt1()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The reference frame of the alternate1 (Alt1) cartesian orbital state.
    /// Example: /// Example: TEME
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getAlt1ReferenceFrame()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Cartesian X position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
    /// Example: /// Example: -1456.915926
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getXposAlt2()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Y position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
    /// Example: /// Example: -2883.540406
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getYposAlt2()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Z position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
    /// Example: /// Example: 6165.55187
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZposAlt2()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian X velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
    /// Example: /// Example: -1.219814294
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getXvelAlt2()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Y velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
    /// Example: /// Example: -6.602080212
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getYvelAlt2()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Z velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
    /// Example: /// Example: -3.365155181
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getZvelAlt2()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The reference frame of the alternate2 (Alt2) cartesian orbital state.
    /// Example: /// Example: EFG/TDR
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getAlt2ReferenceFrame()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// One sigma position uncertainty, in kilometers.
    /// Example: /// Example: 0.333399744452
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPosUnc()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// One sigma velocity uncertainty, in kilometers/second.
    /// Example: /// Example: 4e-06
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVelUnc()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The mass of the object, in kilograms.
    /// Example: /// Example: 164.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMass()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The actual area of the object at it's largest cross-section, expressed in meters^2.
    /// Example: /// Example: 5.065
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getArea()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Area-to-mass ratio coefficient for solar radiation pressure.
    /// Example: /// Example: 0.0244394
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSolarRadPressCoeff()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).
    /// Example: /// Example: 0.0224391269775
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDragCoeff()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The effective area of the object exposed to atmospheric drag, expressed in meters^2.
    /// Example: /// Example: 4.739
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDragArea()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Epoch revolution number.
    /// Example: /// Example: 7205
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getRevNo()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96 24Z,24T.
    /// Example: /// Example: EGM-96
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getGeopotentialModel()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90, NONE, etc.).
    /// Example: /// Example: JAC70
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getDragModel()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating use of lunar/solar perturbations for this vector.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getLunarSolar()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Boolean indicating use of solar radiation pressure perturbations for this vector.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getSolarRadPress()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The effective area of the object exposed to solar radiation pressure, expressed in meters^2.
    /// Example: /// Example: 4.311
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSrpArea()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Boolean indicating use of solid earth tide perturbations for this vector.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getSolidEarthTides()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Boolean indicating use of in-track thrust perturbations for this vector.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getInTrackThrust()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// First derivative of drag/ballistic coefficient (m2/kg-s).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBDot()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Model parameter value for energy dissipation rate (EDR) (w/kg).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEdr()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Model parameter value for thrust acceleration (m/s2).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getThrustAccel()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Model parameter value for center of mass offset (m).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCmOffset()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.
    /// Example: /// Example: 2022-11-09T11:20:21.247192Z
    /// Constraints: No constraints specified.
    public function getLastObStart()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.
    /// Example: /// Example: 2022-11-09T11:20:21.247192Z
    /// Constraints: No constraints specified.
    public function getLastObEnd()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The number of observations available for the OD of the object.
    /// Example: /// Example: 376
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getObsAvailable()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The number of observations accepted for the OD of the object.
    /// Example: /// Example: 374
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getObsUsed()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The number of sensor tracks available for the OD of the object.
    /// Example: /// Example: 163
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTracksAvail()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The number of sensor tracks accepted for the OD of the object.
    /// Example: /// Example: 163
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTracksUsed()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The recommended OD time span calculated for the object, expressed in days.
    /// Example: /// Example: 3.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRecODSpan()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The actual time span used for the OD of the object, expressed in days.
    /// Example: /// Example: 3.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getActualODSpan()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The percentage of residuals accepted in the OD of the object.
    /// Example: /// Example: 99.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getResidualsAcc()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// F10 (10.7 cm) solar flux value.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSolarFluxF10()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// F10 (10.7 cm) solar flux 81-day average value.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSolarFluxF10Avg()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Average solar flux geomagnetic index.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSolarFluxAPAvg()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset in seconds.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTaiUtc()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Universal Time-1 (UT1) minus UTC offset, in seconds.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getUt1Utc()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getUt1Rate()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Polar Wander Motion X (arc seconds).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPolarMotionX()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Polar Wander Motion Y (arc seconds).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPolarMotionY()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Number of terms used in the IAU 1980 nutation model (4, 50, or 106).
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getIau1980Terms()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap second is not known, the time of the previous leap second is used.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    public function getLeapSecondTime()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Integrator Mode.
    /// Example: /// Example: integratorMode
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getIntegratorMode()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).
    /// Example: /// Example: ANALYTIC
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getPartials()
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Integrator step mode (AUTO, TIME, or S).
    /// Example: /// Example: AUTO
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getStepMode()
    {
        $o = $this->__offset(152);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating use of fixed step size for this vector.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getFixedStep()
    {
        $o = $this->__offset(154);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Initial step size selection (AUTO or MANUAL).
    /// Example: /// Example: AUTO
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getStepSizeSelection()
    {
        $o = $this->__offset(156);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Initial integration step size (seconds).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getStepSize()
    {
        $o = $this->__offset(158);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Integrator error control.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getErrorControl()
    {
        $o = $this->__offset(160);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Array containing the standard deviation of error in target object position, U, V and W direction respectively (km).
    /// Example: /// Example: [1.23, 4.56]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSigmaPosUVW($j)
    {
        $o = $this->__offset(162);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSigmaPosUVWLength()
    {
        $o = $this->__offset(162);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array containing the standard deviation of error in target object velocity, U, V and W direction respectively (km/sec).
    /// Example: /// Example: [1.23, 4.56]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSigmaVelUVW($j)
    {
        $o = $this->__offset(164);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSigmaVelUVWLength()
    {
        $o = $this->__offset(164);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The Weighted Root Mean Squared (RMS) of the differential correction on the target object that produced this vector.  WRMS is a quality indicator of the state vector update, with a value of 1.00 being optimal.  WRMS applies to Batch Least Squares (BLS) processes.
    /// Example: /// Example: 0.991
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getRms()
    {
        $o = $this->__offset(166);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: rawFileURI
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getRawFileURI()
    {
        $o = $this->__offset(168);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(170);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(172);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(174);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \StateVector_Ingest_dataMode_Enum::REAL;
    }

    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTags($j)
    {
        $o = $this->__offset(176);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTagsLength()
    {
        $o = $this->__offset(176);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Optional algorithm used to produce this record.
    /// Example: /// Example: SAMPLE_ALGORITHM
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getAlgorithm()
    {
        $o = $this->__offset(178);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional array of UDL data (observation) UUIDs used to build this state vector. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
    /// Example: /// Example: ['DATA1', 'DATA2']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getSourcedData($j)
    {
        $o = $this->__offset(180);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSourcedDataLength()
    {
        $o = $this->__offset(180);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Optional array of UDL observation data types used to build this state vector (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
    /// Example: /// Example: ['RADAR']
    /// Constraints: No constraints specified.
    /**
     * @return sbyte
     */
    public function getSourcedDataTypes()
    {
        $o = $this->__offset(182);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \StateVector_Ingest_sourcedDataTypes_Enum::EO;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(184);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(186);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getDescriptor()
    {
        $o = $this->__offset(188);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: transactionId
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTransactionId()
    {
        $o = $this->__offset(190);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(192);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(194);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startStateVector_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(96);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return StateVector_Ingest
     */
    public static function createStateVector_Ingest(FlatBufferBuilder $builder, $idStateVector, $classificationMarking, $epoch, $pedigree, $idOnOrbit, $satNo, $origObjectId, $idOrbitDetermination, $uct, $xpos, $ypos, $zpos, $xvel, $yvel, $zvel, $referenceFrame, $cov, $covReferenceFrame, $covMethod, $eqCov, $xposAlt1, $yposAlt1, $zposAlt1, $xvelAlt1, $yvelAlt1, $zvelAlt1, $alt1ReferenceFrame, $xposAlt2, $yposAlt2, $zposAlt2, $xvelAlt2, $yvelAlt2, $zvelAlt2, $alt2ReferenceFrame, $posUnc, $velUnc, $mass, $area, $solarRadPressCoeff, $dragCoeff, $dragArea, $revNo, $geopotentialModel, $dragModel, $lunarSolar, $solarRadPress, $srpArea, $solidEarthTides, $inTrackThrust, $bDot, $edr, $thrustAccel, $cmOffset, $lastObStart, $lastObEnd, $obsAvailable, $obsUsed, $tracksAvail, $tracksUsed, $recODSpan, $actualODSpan, $residualsAcc, $solarFluxF10, $solarFluxF10Avg, $solarFluxAPAvg, $taiUtc, $ut1Utc, $ut1Rate, $polarMotionX, $polarMotionY, $iau1980Terms, $leapSecondTime, $integratorMode, $partials, $stepMode, $fixedStep, $stepSizeSelection, $stepSize, $errorControl, $sigmaPosUVW, $sigmaVelUVW, $rms, $rawFileURI, $source, $origin, $dataMode, $tags, $algorithm, $sourcedData, $sourcedDataTypes, $createdAt, $createdBy, $descriptor, $transactionId, $origNetwork, $sourceDL)
    {
        $builder->startObject(96);
        self::addIdStateVector($builder, $idStateVector);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addEpoch($builder, $epoch);
        self::addPedigree($builder, $pedigree);
        self::addIdOnOrbit($builder, $idOnOrbit);
        self::addSatNo($builder, $satNo);
        self::addOrigObjectId($builder, $origObjectId);
        self::addIdOrbitDetermination($builder, $idOrbitDetermination);
        self::addUct($builder, $uct);
        self::addXpos($builder, $xpos);
        self::addYpos($builder, $ypos);
        self::addZpos($builder, $zpos);
        self::addXvel($builder, $xvel);
        self::addYvel($builder, $yvel);
        self::addZvel($builder, $zvel);
        self::addReferenceFrame($builder, $referenceFrame);
        self::addCov($builder, $cov);
        self::addCovReferenceFrame($builder, $covReferenceFrame);
        self::addCovMethod($builder, $covMethod);
        self::addEqCov($builder, $eqCov);
        self::addXposAlt1($builder, $xposAlt1);
        self::addYposAlt1($builder, $yposAlt1);
        self::addZposAlt1($builder, $zposAlt1);
        self::addXvelAlt1($builder, $xvelAlt1);
        self::addYvelAlt1($builder, $yvelAlt1);
        self::addZvelAlt1($builder, $zvelAlt1);
        self::addAlt1ReferenceFrame($builder, $alt1ReferenceFrame);
        self::addXposAlt2($builder, $xposAlt2);
        self::addYposAlt2($builder, $yposAlt2);
        self::addZposAlt2($builder, $zposAlt2);
        self::addXvelAlt2($builder, $xvelAlt2);
        self::addYvelAlt2($builder, $yvelAlt2);
        self::addZvelAlt2($builder, $zvelAlt2);
        self::addAlt2ReferenceFrame($builder, $alt2ReferenceFrame);
        self::addPosUnc($builder, $posUnc);
        self::addVelUnc($builder, $velUnc);
        self::addMass($builder, $mass);
        self::addArea($builder, $area);
        self::addSolarRadPressCoeff($builder, $solarRadPressCoeff);
        self::addDragCoeff($builder, $dragCoeff);
        self::addDragArea($builder, $dragArea);
        self::addRevNo($builder, $revNo);
        self::addGeopotentialModel($builder, $geopotentialModel);
        self::addDragModel($builder, $dragModel);
        self::addLunarSolar($builder, $lunarSolar);
        self::addSolarRadPress($builder, $solarRadPress);
        self::addSrpArea($builder, $srpArea);
        self::addSolidEarthTides($builder, $solidEarthTides);
        self::addInTrackThrust($builder, $inTrackThrust);
        self::addBDot($builder, $bDot);
        self::addEdr($builder, $edr);
        self::addThrustAccel($builder, $thrustAccel);
        self::addCmOffset($builder, $cmOffset);
        self::addLastObStart($builder, $lastObStart);
        self::addLastObEnd($builder, $lastObEnd);
        self::addObsAvailable($builder, $obsAvailable);
        self::addObsUsed($builder, $obsUsed);
        self::addTracksAvail($builder, $tracksAvail);
        self::addTracksUsed($builder, $tracksUsed);
        self::addRecODSpan($builder, $recODSpan);
        self::addActualODSpan($builder, $actualODSpan);
        self::addResidualsAcc($builder, $residualsAcc);
        self::addSolarFluxF10($builder, $solarFluxF10);
        self::addSolarFluxF10Avg($builder, $solarFluxF10Avg);
        self::addSolarFluxAPAvg($builder, $solarFluxAPAvg);
        self::addTaiUtc($builder, $taiUtc);
        self::addUt1Utc($builder, $ut1Utc);
        self::addUt1Rate($builder, $ut1Rate);
        self::addPolarMotionX($builder, $polarMotionX);
        self::addPolarMotionY($builder, $polarMotionY);
        self::addIau1980Terms($builder, $iau1980Terms);
        self::addLeapSecondTime($builder, $leapSecondTime);
        self::addIntegratorMode($builder, $integratorMode);
        self::addPartials($builder, $partials);
        self::addStepMode($builder, $stepMode);
        self::addFixedStep($builder, $fixedStep);
        self::addStepSizeSelection($builder, $stepSizeSelection);
        self::addStepSize($builder, $stepSize);
        self::addErrorControl($builder, $errorControl);
        self::addSigmaPosUVW($builder, $sigmaPosUVW);
        self::addSigmaVelUVW($builder, $sigmaVelUVW);
        self::addRms($builder, $rms);
        self::addRawFileURI($builder, $rawFileURI);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addTags($builder, $tags);
        self::addAlgorithm($builder, $algorithm);
        self::addSourcedData($builder, $sourcedData);
        self::addSourcedDataTypes($builder, $sourcedDataTypes);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addDescriptor($builder, $descriptor);
        self::addTransactionId($builder, $transactionId);
        self::addOrigNetwork($builder, $origNetwork);
        self::addSourceDL($builder, $sourceDL);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdStateVector(FlatBufferBuilder $builder, $idStateVector)
    {
        $builder->addOffsetX(0, $idStateVector, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEpoch(FlatBufferBuilder $builder, $epoch)
    {
        $builder->addOffsetX(2, $epoch, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPedigree(FlatBufferBuilder $builder, $pedigree)
    {
        $builder->addOffsetX(3, $pedigree, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit(FlatBufferBuilder $builder, $idOnOrbit)
    {
        $builder->addOffsetX(4, $idOnOrbit, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo(FlatBufferBuilder $builder, $satNo)
    {
        $builder->addIntX(5, $satNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigObjectId(FlatBufferBuilder $builder, $origObjectId)
    {
        $builder->addOffsetX(6, $origObjectId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOrbitDetermination(FlatBufferBuilder $builder, $idOrbitDetermination)
    {
        $builder->addOffsetX(7, $idOrbitDetermination, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addUct(FlatBufferBuilder $builder, $uct)
    {
        $builder->addBoolX(8, $uct, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addXpos(FlatBufferBuilder $builder, $xpos)
    {
        $builder->addDoubleX(9, $xpos, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addYpos(FlatBufferBuilder $builder, $ypos)
    {
        $builder->addDoubleX(10, $ypos, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZpos(FlatBufferBuilder $builder, $zpos)
    {
        $builder->addDoubleX(11, $zpos, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addXvel(FlatBufferBuilder $builder, $xvel)
    {
        $builder->addDoubleX(12, $xvel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addYvel(FlatBufferBuilder $builder, $yvel)
    {
        $builder->addDoubleX(13, $yvel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZvel(FlatBufferBuilder $builder, $zvel)
    {
        $builder->addDoubleX(14, $zvel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addReferenceFrame(FlatBufferBuilder $builder, $referenceFrame)
    {
        $builder->addSbyteX(15, $referenceFrame, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCov(FlatBufferBuilder $builder, $cov)
    {
        $builder->addOffsetX(16, $cov, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCovVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCovVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addCovReferenceFrame(FlatBufferBuilder $builder, $covReferenceFrame)
    {
        $builder->addSbyteX(17, $covReferenceFrame, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCovMethod(FlatBufferBuilder $builder, $covMethod)
    {
        $builder->addOffsetX(18, $covMethod, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEqCov(FlatBufferBuilder $builder, $eqCov)
    {
        $builder->addOffsetX(19, $eqCov, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEqCovVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEqCovVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addXposAlt1(FlatBufferBuilder $builder, $xposAlt1)
    {
        $builder->addDoubleX(20, $xposAlt1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addYposAlt1(FlatBufferBuilder $builder, $yposAlt1)
    {
        $builder->addDoubleX(21, $yposAlt1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZposAlt1(FlatBufferBuilder $builder, $zposAlt1)
    {
        $builder->addDoubleX(22, $zposAlt1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addXvelAlt1(FlatBufferBuilder $builder, $xvelAlt1)
    {
        $builder->addDoubleX(23, $xvelAlt1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addYvelAlt1(FlatBufferBuilder $builder, $yvelAlt1)
    {
        $builder->addDoubleX(24, $yvelAlt1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZvelAlt1(FlatBufferBuilder $builder, $zvelAlt1)
    {
        $builder->addDoubleX(25, $zvelAlt1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAlt1ReferenceFrame(FlatBufferBuilder $builder, $alt1ReferenceFrame)
    {
        $builder->addOffsetX(26, $alt1ReferenceFrame, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addXposAlt2(FlatBufferBuilder $builder, $xposAlt2)
    {
        $builder->addDoubleX(27, $xposAlt2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addYposAlt2(FlatBufferBuilder $builder, $yposAlt2)
    {
        $builder->addDoubleX(28, $yposAlt2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZposAlt2(FlatBufferBuilder $builder, $zposAlt2)
    {
        $builder->addDoubleX(29, $zposAlt2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addXvelAlt2(FlatBufferBuilder $builder, $xvelAlt2)
    {
        $builder->addDoubleX(30, $xvelAlt2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addYvelAlt2(FlatBufferBuilder $builder, $yvelAlt2)
    {
        $builder->addDoubleX(31, $yvelAlt2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZvelAlt2(FlatBufferBuilder $builder, $zvelAlt2)
    {
        $builder->addDoubleX(32, $zvelAlt2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAlt2ReferenceFrame(FlatBufferBuilder $builder, $alt2ReferenceFrame)
    {
        $builder->addOffsetX(33, $alt2ReferenceFrame, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPosUnc(FlatBufferBuilder $builder, $posUnc)
    {
        $builder->addDoubleX(34, $posUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVelUnc(FlatBufferBuilder $builder, $velUnc)
    {
        $builder->addDoubleX(35, $velUnc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMass(FlatBufferBuilder $builder, $mass)
    {
        $builder->addDoubleX(36, $mass, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addArea(FlatBufferBuilder $builder, $area)
    {
        $builder->addDoubleX(37, $area, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSolarRadPressCoeff(FlatBufferBuilder $builder, $solarRadPressCoeff)
    {
        $builder->addDoubleX(38, $solarRadPressCoeff, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDragCoeff(FlatBufferBuilder $builder, $dragCoeff)
    {
        $builder->addDoubleX(39, $dragCoeff, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDragArea(FlatBufferBuilder $builder, $dragArea)
    {
        $builder->addDoubleX(40, $dragArea, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addRevNo(FlatBufferBuilder $builder, $revNo)
    {
        $builder->addIntX(41, $revNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGeopotentialModel(FlatBufferBuilder $builder, $geopotentialModel)
    {
        $builder->addOffsetX(42, $geopotentialModel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDragModel(FlatBufferBuilder $builder, $dragModel)
    {
        $builder->addOffsetX(43, $dragModel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addLunarSolar(FlatBufferBuilder $builder, $lunarSolar)
    {
        $builder->addBoolX(44, $lunarSolar, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addSolarRadPress(FlatBufferBuilder $builder, $solarRadPress)
    {
        $builder->addBoolX(45, $solarRadPress, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSrpArea(FlatBufferBuilder $builder, $srpArea)
    {
        $builder->addDoubleX(46, $srpArea, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addSolidEarthTides(FlatBufferBuilder $builder, $solidEarthTides)
    {
        $builder->addBoolX(47, $solidEarthTides, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addInTrackThrust(FlatBufferBuilder $builder, $inTrackThrust)
    {
        $builder->addBoolX(48, $inTrackThrust, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBDot(FlatBufferBuilder $builder, $bDot)
    {
        $builder->addDoubleX(49, $bDot, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEdr(FlatBufferBuilder $builder, $edr)
    {
        $builder->addDoubleX(50, $edr, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addThrustAccel(FlatBufferBuilder $builder, $thrustAccel)
    {
        $builder->addDoubleX(51, $thrustAccel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCmOffset(FlatBufferBuilder $builder, $cmOffset)
    {
        $builder->addDoubleX(52, $cmOffset, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastObStart(FlatBufferBuilder $builder, $lastObStart)
    {
        $builder->addOffsetX(53, $lastObStart, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLastObEnd(FlatBufferBuilder $builder, $lastObEnd)
    {
        $builder->addOffsetX(54, $lastObEnd, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addObsAvailable(FlatBufferBuilder $builder, $obsAvailable)
    {
        $builder->addIntX(55, $obsAvailable, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addObsUsed(FlatBufferBuilder $builder, $obsUsed)
    {
        $builder->addIntX(56, $obsUsed, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTracksAvail(FlatBufferBuilder $builder, $tracksAvail)
    {
        $builder->addIntX(57, $tracksAvail, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTracksUsed(FlatBufferBuilder $builder, $tracksUsed)
    {
        $builder->addIntX(58, $tracksUsed, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRecODSpan(FlatBufferBuilder $builder, $recODSpan)
    {
        $builder->addDoubleX(59, $recODSpan, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addActualODSpan(FlatBufferBuilder $builder, $actualODSpan)
    {
        $builder->addDoubleX(60, $actualODSpan, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addResidualsAcc(FlatBufferBuilder $builder, $residualsAcc)
    {
        $builder->addDoubleX(61, $residualsAcc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSolarFluxF10(FlatBufferBuilder $builder, $solarFluxF10)
    {
        $builder->addDoubleX(62, $solarFluxF10, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSolarFluxF10Avg(FlatBufferBuilder $builder, $solarFluxF10Avg)
    {
        $builder->addDoubleX(63, $solarFluxF10Avg, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSolarFluxAPAvg(FlatBufferBuilder $builder, $solarFluxAPAvg)
    {
        $builder->addDoubleX(64, $solarFluxAPAvg, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTaiUtc(FlatBufferBuilder $builder, $taiUtc)
    {
        $builder->addDoubleX(65, $taiUtc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUt1Utc(FlatBufferBuilder $builder, $ut1Utc)
    {
        $builder->addDoubleX(66, $ut1Utc, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUt1Rate(FlatBufferBuilder $builder, $ut1Rate)
    {
        $builder->addDoubleX(67, $ut1Rate, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPolarMotionX(FlatBufferBuilder $builder, $polarMotionX)
    {
        $builder->addDoubleX(68, $polarMotionX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPolarMotionY(FlatBufferBuilder $builder, $polarMotionY)
    {
        $builder->addDoubleX(69, $polarMotionY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addIau1980Terms(FlatBufferBuilder $builder, $iau1980Terms)
    {
        $builder->addIntX(70, $iau1980Terms, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLeapSecondTime(FlatBufferBuilder $builder, $leapSecondTime)
    {
        $builder->addOffsetX(71, $leapSecondTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIntegratorMode(FlatBufferBuilder $builder, $integratorMode)
    {
        $builder->addOffsetX(72, $integratorMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPartials(FlatBufferBuilder $builder, $partials)
    {
        $builder->addOffsetX(73, $partials, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStepMode(FlatBufferBuilder $builder, $stepMode)
    {
        $builder->addOffsetX(74, $stepMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addFixedStep(FlatBufferBuilder $builder, $fixedStep)
    {
        $builder->addBoolX(75, $fixedStep, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStepSizeSelection(FlatBufferBuilder $builder, $stepSizeSelection)
    {
        $builder->addOffsetX(76, $stepSizeSelection, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addStepSize(FlatBufferBuilder $builder, $stepSize)
    {
        $builder->addDoubleX(77, $stepSize, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addErrorControl(FlatBufferBuilder $builder, $errorControl)
    {
        $builder->addDoubleX(78, $errorControl, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSigmaPosUVW(FlatBufferBuilder $builder, $sigmaPosUVW)
    {
        $builder->addOffsetX(79, $sigmaPosUVW, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSigmaPosUVWVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSigmaPosUVWVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSigmaVelUVW(FlatBufferBuilder $builder, $sigmaVelUVW)
    {
        $builder->addOffsetX(80, $sigmaVelUVW, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSigmaVelUVWVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSigmaVelUVWVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRms(FlatBufferBuilder $builder, $rms)
    {
        $builder->addDoubleX(81, $rms, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRawFileURI(FlatBufferBuilder $builder, $rawFileURI)
    {
        $builder->addOffsetX(82, $rawFileURI, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(83, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(84, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(85, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTags(FlatBufferBuilder $builder, $tags)
    {
        $builder->addOffsetX(86, $tags, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTagsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTagsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAlgorithm(FlatBufferBuilder $builder, $algorithm)
    {
        $builder->addOffsetX(87, $algorithm, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSourcedData(FlatBufferBuilder $builder, $sourcedData)
    {
        $builder->addOffsetX(88, $sourcedData, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSourcedDataVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSourcedDataVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addSourcedDataTypes(FlatBufferBuilder $builder, $sourcedDataTypes)
    {
        $builder->addSbyteX(89, $sourcedDataTypes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(90, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(91, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDescriptor(FlatBufferBuilder $builder, $descriptor)
    {
        $builder->addOffsetX(92, $descriptor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTransactionId(FlatBufferBuilder $builder, $transactionId)
    {
        $builder->addOffsetX(93, $transactionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(94, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(95, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endStateVector_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishStateVector_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "STAT");
    }
}
