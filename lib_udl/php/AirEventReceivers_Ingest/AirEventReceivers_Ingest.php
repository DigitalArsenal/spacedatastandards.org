<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Collection of receiver aircraft associated with this Air Event.
class AirEventReceivers_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AirEventReceivers_Ingest
     */
    public static function getRootAsAirEventReceivers_Ingest(ByteBuffer $bb)
    {
        $obj = new AirEventReceivers_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AirEventReceivers_IngestIdentifier()
    {
        return "AIRE";
    }

    public static function AirEventReceivers_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AirEventReceivers_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AirEventReceivers_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The UDL ID of the aircraft sortie this receiver is associated with for this event.
    /// Example: /// Example: 1d03e85a-1fb9-4f6e-86a0-593306b6e3f0
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdReceiverSortie()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UDL ID of the mission this receiver is associated with for this event.
    /// Example: /// Example: ce99757d-f733-461f-8939-3939d4f05946
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdReceiverMission()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UDL ID of the airfield this receiver is associated with for this event.
    /// Example: /// Example: 96c4c2ba-a031-4e58-9b8e-3c6fb90a7534
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdReceiverAirfield()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional receiver identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: 3fb8169f-adc1-4667-acab-8415a012d766
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getExternalReceiverId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Coordination record identifier of this receiver.
    /// Example: /// Example: TTC601
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getReceiverCoord()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Model Design Series designation of this receiver.
    /// Example: /// Example: KC135R
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getReceiverMDS()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Air Mobility Command (AMC) mission identifier of this receiver.
    /// Example: /// Example: 8PH000B1S052
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAmcReceiverMissionId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Alternate mission identifier of this receiver provided by source.
    /// Example: /// Example: 1UN05201L121
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getAltReceiverMissionId()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The call sign assigned to this receiver.
    /// Example: /// Example: BAKER
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getReceiverCallSign()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The wing or unit that owns this receiver.
    /// Example: /// Example: 117ARW
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getReceiverOwner()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name and/or number of the point of contact for this receiver.
    /// Example: /// Example: JOHN SMITH (555)555-5555
    /// Constraints: Minimum length = 0, Maximum length = 68
    public function getReceiverPOC()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifies the itinerary point of a mission that this receiver is linked to.
    /// Example: /// Example: 825
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getReceiverLegNum()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Location the receiver is deployed to for an air refueling event.
    /// Example: /// Example: KOFF
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getReceiverDeployedICAO()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of fuel delivery method used by the receiver during an air refueling event (BOOM, DROGUE, BOTH).
    /// Example: /// Example: DROGUE
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getReceiverDeliveryMethod()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Total weight of the fuel transferred to this receiver during an air refueling event, in pounds.
    /// Example: /// Example: 15000000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFuelOn()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Position of this receiver within a group of receivers in an air refueling event.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getReceiverCellPosition()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Indicates the unique number by Unit ID, which identifies an air refueling event.
    /// Example: /// Example: 1018
    /// Constraints: Minimum length = 0, Maximum length = 15
    public function getSequenceNum()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The major command level (MAJCOM) or foreign military sales (FMS) name of the receiver's organization. The tanker flying hours used for an air refueling event are logged against the receiver MAJCOM or foreign government being supported.
    /// Example: /// Example: AMC
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getRecOrg()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of aircraft contained within one receiver coordination record for an air refueling event.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumRecAircraft()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Type of fuel being transferred to the receiver in an air refueling event.
    /// Example: /// Example: JP8
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getReceiverFuelType()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the receiver exercise associated with an air refueling event.
    /// Example: /// Example: NATO19
    /// Constraints: Minimum length = 0, Maximum length = 12
    public function getReceiverExercise()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The package identifier for the receiver in an air refueling event.
    /// Example: /// Example: 135
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getPackageId()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAirEventReceivers_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(22);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AirEventReceivers_Ingest
     */
    public static function createAirEventReceivers_Ingest(FlatBufferBuilder $builder, $idReceiverSortie, $idReceiverMission, $idReceiverAirfield, $externalReceiverId, $receiverCoord, $receiverMDS, $amcReceiverMissionId, $altReceiverMissionId, $receiverCallSign, $receiverOwner, $receiverPOC, $receiverLegNum, $receiverDeployedICAO, $receiverDeliveryMethod, $fuelOn, $receiverCellPosition, $sequenceNum, $recOrg, $numRecAircraft, $receiverFuelType, $receiverExercise, $packageId)
    {
        $builder->startObject(22);
        self::addIdReceiverSortie($builder, $idReceiverSortie);
        self::addIdReceiverMission($builder, $idReceiverMission);
        self::addIdReceiverAirfield($builder, $idReceiverAirfield);
        self::addExternalReceiverId($builder, $externalReceiverId);
        self::addReceiverCoord($builder, $receiverCoord);
        self::addReceiverMDS($builder, $receiverMDS);
        self::addAmcReceiverMissionId($builder, $amcReceiverMissionId);
        self::addAltReceiverMissionId($builder, $altReceiverMissionId);
        self::addReceiverCallSign($builder, $receiverCallSign);
        self::addReceiverOwner($builder, $receiverOwner);
        self::addReceiverPOC($builder, $receiverPOC);
        self::addReceiverLegNum($builder, $receiverLegNum);
        self::addReceiverDeployedICAO($builder, $receiverDeployedICAO);
        self::addReceiverDeliveryMethod($builder, $receiverDeliveryMethod);
        self::addFuelOn($builder, $fuelOn);
        self::addReceiverCellPosition($builder, $receiverCellPosition);
        self::addSequenceNum($builder, $sequenceNum);
        self::addRecOrg($builder, $recOrg);
        self::addNumRecAircraft($builder, $numRecAircraft);
        self::addReceiverFuelType($builder, $receiverFuelType);
        self::addReceiverExercise($builder, $receiverExercise);
        self::addPackageId($builder, $packageId);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdReceiverSortie(FlatBufferBuilder $builder, $idReceiverSortie)
    {
        $builder->addOffsetX(0, $idReceiverSortie, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdReceiverMission(FlatBufferBuilder $builder, $idReceiverMission)
    {
        $builder->addOffsetX(1, $idReceiverMission, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdReceiverAirfield(FlatBufferBuilder $builder, $idReceiverAirfield)
    {
        $builder->addOffsetX(2, $idReceiverAirfield, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalReceiverId(FlatBufferBuilder $builder, $externalReceiverId)
    {
        $builder->addOffsetX(3, $externalReceiverId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReceiverCoord(FlatBufferBuilder $builder, $receiverCoord)
    {
        $builder->addOffsetX(4, $receiverCoord, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReceiverMDS(FlatBufferBuilder $builder, $receiverMDS)
    {
        $builder->addOffsetX(5, $receiverMDS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAmcReceiverMissionId(FlatBufferBuilder $builder, $amcReceiverMissionId)
    {
        $builder->addOffsetX(6, $amcReceiverMissionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltReceiverMissionId(FlatBufferBuilder $builder, $altReceiverMissionId)
    {
        $builder->addOffsetX(7, $altReceiverMissionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReceiverCallSign(FlatBufferBuilder $builder, $receiverCallSign)
    {
        $builder->addOffsetX(8, $receiverCallSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReceiverOwner(FlatBufferBuilder $builder, $receiverOwner)
    {
        $builder->addOffsetX(9, $receiverOwner, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReceiverPOC(FlatBufferBuilder $builder, $receiverPOC)
    {
        $builder->addOffsetX(10, $receiverPOC, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addReceiverLegNum(FlatBufferBuilder $builder, $receiverLegNum)
    {
        $builder->addIntX(11, $receiverLegNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReceiverDeployedICAO(FlatBufferBuilder $builder, $receiverDeployedICAO)
    {
        $builder->addOffsetX(12, $receiverDeployedICAO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReceiverDeliveryMethod(FlatBufferBuilder $builder, $receiverDeliveryMethod)
    {
        $builder->addOffsetX(13, $receiverDeliveryMethod, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFuelOn(FlatBufferBuilder $builder, $fuelOn)
    {
        $builder->addDoubleX(14, $fuelOn, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addReceiverCellPosition(FlatBufferBuilder $builder, $receiverCellPosition)
    {
        $builder->addIntX(15, $receiverCellPosition, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSequenceNum(FlatBufferBuilder $builder, $sequenceNum)
    {
        $builder->addOffsetX(16, $sequenceNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRecOrg(FlatBufferBuilder $builder, $recOrg)
    {
        $builder->addOffsetX(17, $recOrg, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumRecAircraft(FlatBufferBuilder $builder, $numRecAircraft)
    {
        $builder->addIntX(18, $numRecAircraft, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReceiverFuelType(FlatBufferBuilder $builder, $receiverFuelType)
    {
        $builder->addOffsetX(19, $receiverFuelType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReceiverExercise(FlatBufferBuilder $builder, $receiverExercise)
    {
        $builder->addOffsetX(20, $receiverExercise, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPackageId(FlatBufferBuilder $builder, $packageId)
    {
        $builder->addOffsetX(21, $packageId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAirEventReceivers_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAirEventReceivers_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRE");
    }
}
