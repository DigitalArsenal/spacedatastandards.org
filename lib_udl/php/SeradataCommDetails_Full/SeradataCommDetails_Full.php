<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Seradata-compiled information on communications payloads.
class SeradataCommDetails_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return SeradataCommDetails_Full
     */
    public static function getRootAsSeradataCommDetails_Full(ByteBuffer $bb)
    {
        $obj = new SeradataCommDetails_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function SeradataCommDetails_FullIdentifier()
    {
        return "SERA";
    }

    public static function SeradataCommDetails_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::SeradataCommDetails_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return SeradataCommDetails_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SERADATACOMMDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// UUID of the parent Comm record.
    /// Example: /// Example: idComm
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdComm()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    /// Example: /// Example: spacecraftId
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getSpacecraftId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
    /// Example: /// Example: X
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getBand()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Solid state power amplifier, in Watts.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getSolidStatePowerAmp()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Comm travelingWaveTubeAmplifier in Watts.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTravelingWaveTubeAmplifier()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Comm gatewayUplinkFrom in Ghz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGatewayUplinkFrom()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Comm gatewayUplinkTo in Ghz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGatewayUplinkTo()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Comm gatewayDownlinkFrom in Ghz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGatewayDownlinkFrom()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Comm gatewayDownlinkTo in Ghz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getGatewayDownlinkTo()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Comm polarization.
    /// Example: /// Example: polarization
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getPolarization()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Effective isotropic radiated power in dB.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEirp()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Comm bandwidth in Mhz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBandwidth()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Comm numOperationalTransponders.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumOperationalTransponders()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Comm numSpareTransponders.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumSpareTransponders()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Comm hostedForCompanyOrgId.
    /// Example: /// Example: hostedForCompanyOrgId
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getHostedForCompanyOrgId()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Comm manufacturerOrgId.
    /// Example: /// Example: manufacturerOrgId
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getManufacturerOrgId()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Comm tradeLeaseOrgId.
    /// Example: /// Example: tradeLeaseOrgId
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getTradeLeaseOrgId()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Comm num36MhzEquivalentTransponders.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNum36MhzEquivalentTransponders()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Comm htsNumUserSpotBeams.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getHtsNumUserSpotBeams()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Comm htsUserDownlinkBandwidthPerBeam in Mhz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHtsUserDownlinkBandwidthPerBeam()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Comm htsUserUplinkBandwidthPerBeam in Mhz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getHtsUserUplinkBandwidthPerBeam()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Comm estimated HtsTotalUserDownlinkBandwidthPerBeam in Mhz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEstHtsTotalUserDownlinkBandwidthPerBeam()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Comm estimated HtsTotalUserUplinkBandwidthPerBeam in Mhz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEstHtsTotalUserUplinkBandwidthPerBeam()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Comm estimated HtsTotalCapacity in Gbps.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEstHtsTotalCapacity()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Comm userDownlinkFrom in Ghz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getUserDownlinkFrom()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Comm userDownlinkTo in Ghz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getUserDownlinkTo()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Comm userUplinkFrom in Ghz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getUserUplinkFrom()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Comm userUplinkTo in Ghz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getUserUplinkTo()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Payload notes.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    public function getPayloadNotes()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SeradataCommDetails_Full_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSeradataCommDetails_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(39);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return SeradataCommDetails_Full
     */
    public static function createSeradataCommDetails_Full(FlatBufferBuilder $builder, $id, $idComm, $classificationMarking, $spacecraftId, $band, $solidStatePowerAmp, $travelingWaveTubeAmplifier, $gatewayUplinkFrom, $gatewayUplinkTo, $gatewayDownlinkFrom, $gatewayDownlinkTo, $polarization, $eirp, $bandwidth, $numOperationalTransponders, $numSpareTransponders, $hostedForCompanyOrgId, $manufacturerOrgId, $tradeLeaseOrgId, $num36MhzEquivalentTransponders, $htsNumUserSpotBeams, $htsUserDownlinkBandwidthPerBeam, $htsUserUplinkBandwidthPerBeam, $estHtsTotalUserDownlinkBandwidthPerBeam, $estHtsTotalUserUplinkBandwidthPerBeam, $estHtsTotalCapacity, $userDownlinkFrom, $userDownlinkTo, $userUplinkFrom, $userUplinkTo, $payloadNotes, $source, $origin, $origNetwork, $dataMode, $createdAt, $createdBy, $updatedAt, $updatedBy)
    {
        $builder->startObject(39);
        self::addId($builder, $id);
        self::addIdComm($builder, $idComm);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addSpacecraftId($builder, $spacecraftId);
        self::addBand($builder, $band);
        self::addSolidStatePowerAmp($builder, $solidStatePowerAmp);
        self::addTravelingWaveTubeAmplifier($builder, $travelingWaveTubeAmplifier);
        self::addGatewayUplinkFrom($builder, $gatewayUplinkFrom);
        self::addGatewayUplinkTo($builder, $gatewayUplinkTo);
        self::addGatewayDownlinkFrom($builder, $gatewayDownlinkFrom);
        self::addGatewayDownlinkTo($builder, $gatewayDownlinkTo);
        self::addPolarization($builder, $polarization);
        self::addEirp($builder, $eirp);
        self::addBandwidth($builder, $bandwidth);
        self::addNumOperationalTransponders($builder, $numOperationalTransponders);
        self::addNumSpareTransponders($builder, $numSpareTransponders);
        self::addHostedForCompanyOrgId($builder, $hostedForCompanyOrgId);
        self::addManufacturerOrgId($builder, $manufacturerOrgId);
        self::addTradeLeaseOrgId($builder, $tradeLeaseOrgId);
        self::addNum36MhzEquivalentTransponders($builder, $num36MhzEquivalentTransponders);
        self::addHtsNumUserSpotBeams($builder, $htsNumUserSpotBeams);
        self::addHtsUserDownlinkBandwidthPerBeam($builder, $htsUserDownlinkBandwidthPerBeam);
        self::addHtsUserUplinkBandwidthPerBeam($builder, $htsUserUplinkBandwidthPerBeam);
        self::addEstHtsTotalUserDownlinkBandwidthPerBeam($builder, $estHtsTotalUserDownlinkBandwidthPerBeam);
        self::addEstHtsTotalUserUplinkBandwidthPerBeam($builder, $estHtsTotalUserUplinkBandwidthPerBeam);
        self::addEstHtsTotalCapacity($builder, $estHtsTotalCapacity);
        self::addUserDownlinkFrom($builder, $userDownlinkFrom);
        self::addUserDownlinkTo($builder, $userDownlinkTo);
        self::addUserUplinkFrom($builder, $userUplinkFrom);
        self::addUserUplinkTo($builder, $userUplinkTo);
        self::addPayloadNotes($builder, $payloadNotes);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdComm(FlatBufferBuilder $builder, $idComm)
    {
        $builder->addOffsetX(1, $idComm, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(2, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSpacecraftId(FlatBufferBuilder $builder, $spacecraftId)
    {
        $builder->addOffsetX(3, $spacecraftId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBand(FlatBufferBuilder $builder, $band)
    {
        $builder->addOffsetX(4, $band, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSolidStatePowerAmp(FlatBufferBuilder $builder, $solidStatePowerAmp)
    {
        $builder->addDoubleX(5, $solidStatePowerAmp, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTravelingWaveTubeAmplifier(FlatBufferBuilder $builder, $travelingWaveTubeAmplifier)
    {
        $builder->addDoubleX(6, $travelingWaveTubeAmplifier, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGatewayUplinkFrom(FlatBufferBuilder $builder, $gatewayUplinkFrom)
    {
        $builder->addDoubleX(7, $gatewayUplinkFrom, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGatewayUplinkTo(FlatBufferBuilder $builder, $gatewayUplinkTo)
    {
        $builder->addDoubleX(8, $gatewayUplinkTo, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGatewayDownlinkFrom(FlatBufferBuilder $builder, $gatewayDownlinkFrom)
    {
        $builder->addDoubleX(9, $gatewayDownlinkFrom, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGatewayDownlinkTo(FlatBufferBuilder $builder, $gatewayDownlinkTo)
    {
        $builder->addDoubleX(10, $gatewayDownlinkTo, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPolarization(FlatBufferBuilder $builder, $polarization)
    {
        $builder->addOffsetX(11, $polarization, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEirp(FlatBufferBuilder $builder, $eirp)
    {
        $builder->addDoubleX(12, $eirp, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBandwidth(FlatBufferBuilder $builder, $bandwidth)
    {
        $builder->addDoubleX(13, $bandwidth, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumOperationalTransponders(FlatBufferBuilder $builder, $numOperationalTransponders)
    {
        $builder->addIntX(14, $numOperationalTransponders, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumSpareTransponders(FlatBufferBuilder $builder, $numSpareTransponders)
    {
        $builder->addIntX(15, $numSpareTransponders, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHostedForCompanyOrgId(FlatBufferBuilder $builder, $hostedForCompanyOrgId)
    {
        $builder->addOffsetX(16, $hostedForCompanyOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addManufacturerOrgId(FlatBufferBuilder $builder, $manufacturerOrgId)
    {
        $builder->addOffsetX(17, $manufacturerOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTradeLeaseOrgId(FlatBufferBuilder $builder, $tradeLeaseOrgId)
    {
        $builder->addOffsetX(18, $tradeLeaseOrgId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNum36MhzEquivalentTransponders(FlatBufferBuilder $builder, $num36MhzEquivalentTransponders)
    {
        $builder->addIntX(19, $num36MhzEquivalentTransponders, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addHtsNumUserSpotBeams(FlatBufferBuilder $builder, $htsNumUserSpotBeams)
    {
        $builder->addIntX(20, $htsNumUserSpotBeams, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHtsUserDownlinkBandwidthPerBeam(FlatBufferBuilder $builder, $htsUserDownlinkBandwidthPerBeam)
    {
        $builder->addDoubleX(21, $htsUserDownlinkBandwidthPerBeam, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addHtsUserUplinkBandwidthPerBeam(FlatBufferBuilder $builder, $htsUserUplinkBandwidthPerBeam)
    {
        $builder->addDoubleX(22, $htsUserUplinkBandwidthPerBeam, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEstHtsTotalUserDownlinkBandwidthPerBeam(FlatBufferBuilder $builder, $estHtsTotalUserDownlinkBandwidthPerBeam)
    {
        $builder->addDoubleX(23, $estHtsTotalUserDownlinkBandwidthPerBeam, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEstHtsTotalUserUplinkBandwidthPerBeam(FlatBufferBuilder $builder, $estHtsTotalUserUplinkBandwidthPerBeam)
    {
        $builder->addDoubleX(24, $estHtsTotalUserUplinkBandwidthPerBeam, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEstHtsTotalCapacity(FlatBufferBuilder $builder, $estHtsTotalCapacity)
    {
        $builder->addDoubleX(25, $estHtsTotalCapacity, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUserDownlinkFrom(FlatBufferBuilder $builder, $userDownlinkFrom)
    {
        $builder->addDoubleX(26, $userDownlinkFrom, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUserDownlinkTo(FlatBufferBuilder $builder, $userDownlinkTo)
    {
        $builder->addDoubleX(27, $userDownlinkTo, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUserUplinkFrom(FlatBufferBuilder $builder, $userUplinkFrom)
    {
        $builder->addDoubleX(28, $userUplinkFrom, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUserUplinkTo(FlatBufferBuilder $builder, $userUplinkTo)
    {
        $builder->addDoubleX(29, $userUplinkTo, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPayloadNotes(FlatBufferBuilder $builder, $payloadNotes)
    {
        $builder->addOffsetX(30, $payloadNotes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(31, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(32, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(33, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(34, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(35, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(36, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(37, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(38, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSeradataCommDetails_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSeradataCommDetails_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "SERA");
    }
}
