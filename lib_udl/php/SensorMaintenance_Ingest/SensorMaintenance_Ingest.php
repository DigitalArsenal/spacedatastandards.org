<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Maintenance schedule and operational status of Sensor.
class SensorMaintenance_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return SensorMaintenance_Ingest
     */
    public static function getRootAsSensorMaintenance_Ingest(ByteBuffer $bb)
    {
        $obj = new SensorMaintenance_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function SensorMaintenance_IngestIdentifier()
    {
        return "SENS";
    }

    public static function SensorMaintenance_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::SensorMaintenance_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return SensorMaintenance_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SENSORMAINTENANCE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The site to which this item applies.  NOTE - this site code is COLT specific and may not identically correspond to other UDL site IDs.
    /// Example: /// Example: site01
    /// Constraints: Minimum length = 1, Maximum length = 6
    public function getSiteCode()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// UUID of the sensor.
    /// Example: /// Example: idSensor
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSensor()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The planned outage start time in ISO8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getStartTime()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The planned outage end time in ISO8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    public function getEndTime()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The minimum time required to recall this activity, expressed as ddd:hh:mm.
    /// Example: /// Example: 128:16:52
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getRecall()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The duration of the planned outage, expressed as ddd:hh:mm.
    /// Example: /// Example: 128:16:52
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getDuration()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Missile Warning operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
    /// Example: /// Example: G
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getMwOpsCap()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Space Surveillance operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
    /// Example: /// Example: Y
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getSsOpsCap()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Missile Defense operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
    /// Example: /// Example: R
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getMdOpsCap()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The sensor face(s) to which this COLT maintenance item applies, if applicable.
    /// Example: /// Example: impactedFaces
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getImpactedFaces()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The mission capability status of the equipment (e.g. FMC, NMC, PMC, UNK, etc.).
    /// Example: /// Example: FMC
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getEquipStatus()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of the activity taking place during this outage.
    /// Example: /// Example: Activity Description
    /// Constraints: No constraints specified.
    public function getActivity()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Remarks concerning this outage.
    /// Example: /// Example: Remarks
    /// Constraints: No constraints specified.
    public function getRemark()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the requestor.
    /// Example: /// Example: requestor
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getRequestor()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the changer, if applicable.
    /// Example: /// Example: changer
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getChanger()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the approver.
    /// Example: /// Example: approver
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getApprover()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// COLT EOWID.
    /// Example: /// Example: eowId
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getEowId()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The revision number for this maintenance item.
    /// Example: /// Example: rev
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getRev()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The priority of this maintenance item.
    /// Example: /// Example: low
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getPriority()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Release.
    /// Example: /// Example: rel
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getRel()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The internal COLT line number assigned to this item.
    /// Example: /// Example: lineNumber
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getLineNumber()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the resource(s) affected by this maintenance item.
    /// Example: /// Example: resource
    /// Constraints: Minimum length = 0, Maximum length = 255
    public function getResource()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The date that this item became inactive in ISO8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getInactiveDate()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SensorMaintenance_Ingest_dataMode_Enum::REAL;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSensorMaintenance_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(31);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return SensorMaintenance_Ingest
     */
    public static function createSensorMaintenance_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $siteCode, $idSensor, $startTime, $endTime, $recall, $duration, $mwOpsCap, $ssOpsCap, $mdOpsCap, $impactedFaces, $equipStatus, $activity, $remark, $requestor, $changer, $approver, $eowId, $rev, $priority, $rel, $lineNumber, $resource, $inactiveDate, $createdAt, $createdBy, $source, $origin, $dataMode, $origNetwork)
    {
        $builder->startObject(31);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addSiteCode($builder, $siteCode);
        self::addIdSensor($builder, $idSensor);
        self::addStartTime($builder, $startTime);
        self::addEndTime($builder, $endTime);
        self::addRecall($builder, $recall);
        self::addDuration($builder, $duration);
        self::addMwOpsCap($builder, $mwOpsCap);
        self::addSsOpsCap($builder, $ssOpsCap);
        self::addMdOpsCap($builder, $mdOpsCap);
        self::addImpactedFaces($builder, $impactedFaces);
        self::addEquipStatus($builder, $equipStatus);
        self::addActivity($builder, $activity);
        self::addRemark($builder, $remark);
        self::addRequestor($builder, $requestor);
        self::addChanger($builder, $changer);
        self::addApprover($builder, $approver);
        self::addEowId($builder, $eowId);
        self::addRev($builder, $rev);
        self::addPriority($builder, $priority);
        self::addRel($builder, $rel);
        self::addLineNumber($builder, $lineNumber);
        self::addResource($builder, $resource);
        self::addInactiveDate($builder, $inactiveDate);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        self::addOrigNetwork($builder, $origNetwork);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSiteCode(FlatBufferBuilder $builder, $siteCode)
    {
        $builder->addOffsetX(2, $siteCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSensor(FlatBufferBuilder $builder, $idSensor)
    {
        $builder->addOffsetX(3, $idSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStartTime(FlatBufferBuilder $builder, $startTime)
    {
        $builder->addOffsetX(4, $startTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEndTime(FlatBufferBuilder $builder, $endTime)
    {
        $builder->addOffsetX(5, $endTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRecall(FlatBufferBuilder $builder, $recall)
    {
        $builder->addOffsetX(6, $recall, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDuration(FlatBufferBuilder $builder, $duration)
    {
        $builder->addOffsetX(7, $duration, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMwOpsCap(FlatBufferBuilder $builder, $mwOpsCap)
    {
        $builder->addOffsetX(8, $mwOpsCap, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSsOpsCap(FlatBufferBuilder $builder, $ssOpsCap)
    {
        $builder->addOffsetX(9, $ssOpsCap, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMdOpsCap(FlatBufferBuilder $builder, $mdOpsCap)
    {
        $builder->addOffsetX(10, $mdOpsCap, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addImpactedFaces(FlatBufferBuilder $builder, $impactedFaces)
    {
        $builder->addOffsetX(11, $impactedFaces, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEquipStatus(FlatBufferBuilder $builder, $equipStatus)
    {
        $builder->addOffsetX(12, $equipStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActivity(FlatBufferBuilder $builder, $activity)
    {
        $builder->addOffsetX(13, $activity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRemark(FlatBufferBuilder $builder, $remark)
    {
        $builder->addOffsetX(14, $remark, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRequestor(FlatBufferBuilder $builder, $requestor)
    {
        $builder->addOffsetX(15, $requestor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addChanger(FlatBufferBuilder $builder, $changer)
    {
        $builder->addOffsetX(16, $changer, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addApprover(FlatBufferBuilder $builder, $approver)
    {
        $builder->addOffsetX(17, $approver, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEowId(FlatBufferBuilder $builder, $eowId)
    {
        $builder->addOffsetX(18, $eowId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRev(FlatBufferBuilder $builder, $rev)
    {
        $builder->addOffsetX(19, $rev, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPriority(FlatBufferBuilder $builder, $priority)
    {
        $builder->addOffsetX(20, $priority, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRel(FlatBufferBuilder $builder, $rel)
    {
        $builder->addOffsetX(21, $rel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLineNumber(FlatBufferBuilder $builder, $lineNumber)
    {
        $builder->addOffsetX(22, $lineNumber, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addResource(FlatBufferBuilder $builder, $resource)
    {
        $builder->addOffsetX(23, $resource, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addInactiveDate(FlatBufferBuilder $builder, $inactiveDate)
    {
        $builder->addOffsetX(24, $inactiveDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(25, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(26, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(27, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(28, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(29, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(30, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSensorMaintenance_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSensorMaintenance_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "SENS");
    }
}
