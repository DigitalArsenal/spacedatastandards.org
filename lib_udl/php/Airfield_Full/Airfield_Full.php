<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Properties and characteristics of an airfield, which includes location, airfield codes, suitability codes, and remarks.
class Airfield_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Airfield_Full
     */
    public static function getRootAsAirfield_Full(ByteBuffer $bb)
    {
        $obj = new Airfield_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Airfield_FullIdentifier()
    {
        return "AIRF";
    }

    public static function Airfield_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Airfield_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Airfield_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 3f28f60b-3a50-2aef-ac88-8e9d0e39912b
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The ID of the parent site.
    /// Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSite()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Alternate Airfield identifier provided by source.
    /// Example: /// Example: 45301
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getAltAirfieldId()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The airfield's World Area Code installation number (WAC-INNR).
    /// Example: /// Example: 0409-00039
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getWacINNR()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Air Mobility Command (AMC) Zone availability Report identifier.
    /// Example: /// Example: 231
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getZarId()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The International Civil Aviation Organization (ICAO) code of the airfield.
    /// Example: /// Example: KCOS
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getIcao()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The International Aviation Transport Association (IATA) code of the airfield.
    /// Example: /// Example: AAA
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getIata()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Federal Aviation Administration (FAA) location identifier of this airfield.
    /// Example: /// Example: FAA1
    /// Constraints: Minimum length = 0, Maximum length = 5
    public function getFaa()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The host nation code of this airfield, used for non-DoD/FAA locations.
    /// Example: /// Example: ZPU
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getHostNatCode()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the airfield.
    /// Example: /// Example: USAF Academy AFLD
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getName()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The airfield activity use type (e.g. Commercial, Airport, Heliport, Gliderport, etc.).
    /// Example: /// Example: Commercial
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getType()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLat()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLon()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Elevation of the airfield above mean sea level, in feet.
    /// Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 33.562
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevFt()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Elevation of the airfield above mean sea level, in meters.
    /// Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 10.29
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getElevM()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The magnetic declination/variation of the airfield's location from true north, in degrees.  Positive values east of true north and negative values west of true north.
    /// Example: /// Example: 7.35
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getMagDec()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Region where the airfield resides.
    /// Example: /// Example: North America
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getRegionName()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    public function getCountryCode()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Closest city to the airfield's location.
    /// Example: /// Example: Colorado Springs
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getCity()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// State or province of the airfield's location.
    /// Example: /// Example: Colorado
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getState()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Air Force geographic location code of the airfield.
    /// Example: /// Example: XLSX
    /// Constraints: Minimum length = 0, Maximum length = 16
    public function getGeoloc()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time difference between the location of the airfield and the Greenwich Mean Time (GMT), expressed as +/-HH:MM. Time zones east of Greenwich have positive offsets and time zones west of Greenwich are negative.
    /// Example: /// Example: -4:30
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getGmtOffset()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Associated suitability codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
    /// Example: /// Example: ABCDEF
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getSuitabilityCodes()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Applicable miscellaneous codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
    /// Example: /// Example: AMZ
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getMiscCodes()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The number of runways at the site.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getRunways()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The length of the longest runway at this airfield in feet.
    /// Example: /// Example: 1000
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getMaxRunwayLength()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The URL link to information about airfield.
    /// Example: /// Example: URL Link to the Airfield
    /// Constraints: Minimum length = 0, Maximum length = 256
    public function getInfoURL()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Airfield_Full_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAirfield_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(37);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Airfield_Full
     */
    public static function createAirfield_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $idSite, $altAirfieldId, $wacINNR, $zarId, $icao, $iata, $faa, $hostNatCode, $name, $type, $lat, $lon, $elevFt, $elevM, $magDec, $regionName, $countryCode, $city, $state, $geoloc, $gmtOffset, $suitabilityCodes, $miscCodes, $runways, $maxRunwayLength, $infoURL, $createdAt, $createdBy, $updatedAt, $updatedBy, $sourceDL, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(37);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdSite($builder, $idSite);
        self::addAltAirfieldId($builder, $altAirfieldId);
        self::addWacINNR($builder, $wacINNR);
        self::addZarId($builder, $zarId);
        self::addIcao($builder, $icao);
        self::addIata($builder, $iata);
        self::addFaa($builder, $faa);
        self::addHostNatCode($builder, $hostNatCode);
        self::addName($builder, $name);
        self::addType($builder, $type);
        self::addLat($builder, $lat);
        self::addLon($builder, $lon);
        self::addElevFt($builder, $elevFt);
        self::addElevM($builder, $elevM);
        self::addMagDec($builder, $magDec);
        self::addRegionName($builder, $regionName);
        self::addCountryCode($builder, $countryCode);
        self::addCity($builder, $city);
        self::addState($builder, $state);
        self::addGeoloc($builder, $geoloc);
        self::addGmtOffset($builder, $gmtOffset);
        self::addSuitabilityCodes($builder, $suitabilityCodes);
        self::addMiscCodes($builder, $miscCodes);
        self::addRunways($builder, $runways);
        self::addMaxRunwayLength($builder, $maxRunwayLength);
        self::addInfoURL($builder, $infoURL);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSite(FlatBufferBuilder $builder, $idSite)
    {
        $builder->addOffsetX(2, $idSite, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAltAirfieldId(FlatBufferBuilder $builder, $altAirfieldId)
    {
        $builder->addOffsetX(3, $altAirfieldId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWacINNR(FlatBufferBuilder $builder, $wacINNR)
    {
        $builder->addOffsetX(4, $wacINNR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addZarId(FlatBufferBuilder $builder, $zarId)
    {
        $builder->addOffsetX(5, $zarId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIcao(FlatBufferBuilder $builder, $icao)
    {
        $builder->addOffsetX(6, $icao, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIata(FlatBufferBuilder $builder, $iata)
    {
        $builder->addOffsetX(7, $iata, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFaa(FlatBufferBuilder $builder, $faa)
    {
        $builder->addOffsetX(8, $faa, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHostNatCode(FlatBufferBuilder $builder, $hostNatCode)
    {
        $builder->addOffsetX(9, $hostNatCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(10, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(11, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLat(FlatBufferBuilder $builder, $lat)
    {
        $builder->addDoubleX(12, $lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLon(FlatBufferBuilder $builder, $lon)
    {
        $builder->addDoubleX(13, $lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevFt(FlatBufferBuilder $builder, $elevFt)
    {
        $builder->addDoubleX(14, $elevFt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addElevM(FlatBufferBuilder $builder, $elevM)
    {
        $builder->addDoubleX(15, $elevM, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMagDec(FlatBufferBuilder $builder, $magDec)
    {
        $builder->addDoubleX(16, $magDec, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRegionName(FlatBufferBuilder $builder, $regionName)
    {
        $builder->addOffsetX(17, $regionName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountryCode(FlatBufferBuilder $builder, $countryCode)
    {
        $builder->addOffsetX(18, $countryCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCity(FlatBufferBuilder $builder, $city)
    {
        $builder->addOffsetX(19, $city, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addState(FlatBufferBuilder $builder, $state)
    {
        $builder->addOffsetX(20, $state, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGeoloc(FlatBufferBuilder $builder, $geoloc)
    {
        $builder->addOffsetX(21, $geoloc, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGmtOffset(FlatBufferBuilder $builder, $gmtOffset)
    {
        $builder->addOffsetX(22, $gmtOffset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSuitabilityCodes(FlatBufferBuilder $builder, $suitabilityCodes)
    {
        $builder->addOffsetX(23, $suitabilityCodes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMiscCodes(FlatBufferBuilder $builder, $miscCodes)
    {
        $builder->addOffsetX(24, $miscCodes, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addRunways(FlatBufferBuilder $builder, $runways)
    {
        $builder->addIntX(25, $runways, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMaxRunwayLength(FlatBufferBuilder $builder, $maxRunwayLength)
    {
        $builder->addIntX(26, $maxRunwayLength, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addInfoURL(FlatBufferBuilder $builder, $infoURL)
    {
        $builder->addOffsetX(27, $infoURL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(28, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(29, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(30, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(31, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(32, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(33, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(34, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(35, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(36, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAirfield_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAirfield_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRF");
    }
}
