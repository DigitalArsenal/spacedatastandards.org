<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Array of point data for this Point Group.
class FlightPlanPoints_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return FlightPlanPoints_Abridged
     */
    public static function getRootAsFlightPlanPoints_Abridged(ByteBuffer $bb)
    {
        $obj = new FlightPlanPoints_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function FlightPlanPoints_AbridgedIdentifier()
    {
        return "FLIG";
    }

    public static function FlightPlanPoints_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::FlightPlanPoints_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return FlightPlanPoints_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Name of this point.
    /// Example: /// Example: CRUISE ALTITUDE ETP
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getPointName()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFppLat()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFppLon()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2023-09-09T01:00:00.123Z
    /// Constraints: No constraints specified.
    public function getFppEta()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Fuel required at this point to execute an Equal Time Point (ETP) or Extended Operations (ETOPS) plan in pounds.
    /// Example: /// Example: 4250.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getFppReqFuel()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startFlightPlanPoints_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(5);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return FlightPlanPoints_Abridged
     */
    public static function createFlightPlanPoints_Abridged(FlatBufferBuilder $builder, $pointName, $fppLat, $fppLon, $fppEta, $fppReqFuel)
    {
        $builder->startObject(5);
        self::addPointName($builder, $pointName);
        self::addFppLat($builder, $fppLat);
        self::addFppLon($builder, $fppLon);
        self::addFppEta($builder, $fppEta);
        self::addFppReqFuel($builder, $fppReqFuel);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPointName(FlatBufferBuilder $builder, $pointName)
    {
        $builder->addOffsetX(0, $pointName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFppLat(FlatBufferBuilder $builder, $fppLat)
    {
        $builder->addDoubleX(1, $fppLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFppLon(FlatBufferBuilder $builder, $fppLon)
    {
        $builder->addDoubleX(2, $fppLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFppEta(FlatBufferBuilder $builder, $fppEta)
    {
        $builder->addOffsetX(3, $fppEta, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFppReqFuel(FlatBufferBuilder $builder, $fppReqFuel)
    {
        $builder->addDoubleX(4, $fppReqFuel, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endFlightPlanPoints_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishFlightPlanPoints_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "FLIG");
    }
}
