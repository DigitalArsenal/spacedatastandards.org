<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Information related to an air event (e.g. FUEL TRANSFER, AIR DROP) and the associated aircraft.
class AirEvent_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return AirEvent_Abridged
     */
    public static function getRootAsAirEvent_Abridged(ByteBuffer $bb)
    {
        $obj = new AirEvent_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AirEvent_AbridgedIdentifier()
    {
        return "AIRE";
    }

    public static function AirEvent_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AirEvent_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return AirEvent_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of air event (e.g. FUEL TRANSFER, AIR DROP, etc).
    /// Example: /// Example: FUEL TRANSFER
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getType()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UDL unique identifier of the sortie associated with this air event.
    /// Example: /// Example: b9866c03-2397-4506-8153-852e72d9b54f
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdSortie()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The UDL unique identifier of the mission associated with this air event.
    /// Example: /// Example: 190dea6d-2a90-45a2-a276-be9047d9b96c
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdMission()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional air event ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: MB014313032022407540
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getExternalAirEventId()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifies the Itinerary point of a sortie where an air event occurs.
    /// Example: /// Example: 825
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getLegNum()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The location representing this air event specified as a feature Id. Locations specified include air refueling track Ids and air drop event locations.
    /// Example: /// Example: 901EW
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getLocation()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The purpose of the air event at the arrival location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getArrPurpose()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The scheduled arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T13:55:43.123Z
    /// Constraints: No constraints specified.
    public function getPlannedArrTime()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The current estimated arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T13:59:48.123Z
    /// Constraints: No constraints specified.
    public function getEstArrTime()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The actual arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T14:00:03.123Z
    /// Constraints: No constraints specified.
    public function getActualArrTime()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The purpose of the air event at the departure location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
    /// Example: /// Example: Q
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getDepPurpose()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The scheduled departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T14:15:43.123Z
    /// Constraints: No constraints specified.
    public function getPlannedDepTime()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The current estimated departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T14:19:48.123Z
    /// Constraints: No constraints specified.
    public function getEstDepTime()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The actual departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T14:17:03.123Z
    /// Constraints: No constraints specified.
    public function getActualDepTime()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: 6418a4b68e5c3896bf024cc79aa4174c
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getExternalARTrackId()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the air refueling track, if applicable.
    /// Example: /// Example: CH61
    /// Constraints: Minimum length = 0, Maximum length = 15
    public function getArTrackId()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the air refueling track, if applicable.
    /// Example: /// Example: CH61 POST
    /// Constraints: Minimum length = 0, Maximum length = 50
    public function getArTrackName()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Rendezvous Control Time is the planned time the tanker and receiver aircraft will rendezvous for an en route type air refueling event, in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2024-01-07T13:55:43.123Z
    /// Constraints: No constraints specified.
    public function getRzct()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The Air Refueling Control Time is the planned time the tanker aircraft will transfer fuel to the receiver aircraft, in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2024-01-07T15:11:27.123Z
    /// Constraints: No constraints specified.
    public function getArct()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Altitude of this air event, in feet.
    /// Example: /// Example: 28000.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getBaseAlt()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Priority of this air event.
    /// Example: /// Example: 1A2
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getPriority()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Length of time the receiver unit has requested for an air event, in hours.
    /// Example: /// Example: 1.5
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getTrackTime()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Status of this air refueling event track reservation. Receivers are responsible for scheduling or reserving air refueling tracks. Possible values are A (Altitude Reservation), R (Reserved), or Q (Questionable).
    /// Example: /// Example: R
    /// Constraints: Minimum length = 0, Maximum length = 2
    public function getStatusCode()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Rendezvous point for the tanker and receiver during this air refueling event. Possible values are AN (Anchor Nav Point), AP (Anchor Pattern), CP (Control Point), ET (Entry Point), EX (Exit Point), IP (Initial Point), NC (Nav Check Point).
    /// Example: /// Example: AN
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getRzPoint()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of rendezvous used for this air refueling event. Possible values are BUD (Buddy), EN (Enroute), GCI (Ground Control), PP (Point Parallel).
    /// Example: /// Example: PP
    /// Constraints: Minimum length = 0, Maximum length = 3
    public function getRzType()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of process used by AMC to schedule this air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
    /// Example: /// Example: V
    /// Constraints: Minimum length = 0, Maximum length = 2
    public function getArEventType()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The number of tankers requested for an air refueling event.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumTankers()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Flag indicating if the receiver unit has requested flying an air refueling track in both directions.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getRevTrack()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that the receiver unit has requested flying a short portion of an air refueling track.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getShortTrack()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag indicating that this air refueling event has been cancelled.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getCancelled()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Collection of tanker aircraft associated with this Air Event.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getTankers($j)
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTankersLength()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Collection of receiver aircraft associated with this Air Event.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getReceivers($j)
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getReceiversLength()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Collection of remarks associated with this Air Event.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getRemarks($j)
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getRemarksLength()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getUpdatedAt()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getUpdatedBy()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getSourceDL()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AirEvent_Abridged_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAirEvent_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(44);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return AirEvent_Abridged
     */
    public static function createAirEvent_Abridged(FlatBufferBuilder $builder, $id, $classificationMarking, $type, $idSortie, $idMission, $externalAirEventId, $legNum, $location, $arrPurpose, $plannedArrTime, $estArrTime, $actualArrTime, $depPurpose, $plannedDepTime, $estDepTime, $actualDepTime, $externalARTrackId, $arTrackId, $arTrackName, $rzct, $arct, $baseAlt, $priority, $trackTime, $statusCode, $rzPoint, $rzType, $arEventType, $numTankers, $revTrack, $shortTrack, $cancelled, $tankers, $receivers, $remarks, $createdAt, $createdBy, $updatedAt, $updatedBy, $sourceDL, $source, $origin, $origNetwork, $dataMode)
    {
        $builder->startObject(44);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addType($builder, $type);
        self::addIdSortie($builder, $idSortie);
        self::addIdMission($builder, $idMission);
        self::addExternalAirEventId($builder, $externalAirEventId);
        self::addLegNum($builder, $legNum);
        self::addLocation($builder, $location);
        self::addArrPurpose($builder, $arrPurpose);
        self::addPlannedArrTime($builder, $plannedArrTime);
        self::addEstArrTime($builder, $estArrTime);
        self::addActualArrTime($builder, $actualArrTime);
        self::addDepPurpose($builder, $depPurpose);
        self::addPlannedDepTime($builder, $plannedDepTime);
        self::addEstDepTime($builder, $estDepTime);
        self::addActualDepTime($builder, $actualDepTime);
        self::addExternalARTrackId($builder, $externalARTrackId);
        self::addArTrackId($builder, $arTrackId);
        self::addArTrackName($builder, $arTrackName);
        self::addRzct($builder, $rzct);
        self::addArct($builder, $arct);
        self::addBaseAlt($builder, $baseAlt);
        self::addPriority($builder, $priority);
        self::addTrackTime($builder, $trackTime);
        self::addStatusCode($builder, $statusCode);
        self::addRzPoint($builder, $rzPoint);
        self::addRzType($builder, $rzType);
        self::addArEventType($builder, $arEventType);
        self::addNumTankers($builder, $numTankers);
        self::addRevTrack($builder, $revTrack);
        self::addShortTrack($builder, $shortTrack);
        self::addCancelled($builder, $cancelled);
        self::addTankers($builder, $tankers);
        self::addReceivers($builder, $receivers);
        self::addRemarks($builder, $remarks);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addUpdatedAt($builder, $updatedAt);
        self::addUpdatedBy($builder, $updatedBy);
        self::addSourceDL($builder, $sourceDL);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(2, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdSortie(FlatBufferBuilder $builder, $idSortie)
    {
        $builder->addOffsetX(3, $idSortie, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdMission(FlatBufferBuilder $builder, $idMission)
    {
        $builder->addOffsetX(4, $idMission, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalAirEventId(FlatBufferBuilder $builder, $externalAirEventId)
    {
        $builder->addOffsetX(5, $externalAirEventId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addLegNum(FlatBufferBuilder $builder, $legNum)
    {
        $builder->addIntX(6, $legNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLocation(FlatBufferBuilder $builder, $location)
    {
        $builder->addOffsetX(7, $location, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArrPurpose(FlatBufferBuilder $builder, $arrPurpose)
    {
        $builder->addOffsetX(8, $arrPurpose, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlannedArrTime(FlatBufferBuilder $builder, $plannedArrTime)
    {
        $builder->addOffsetX(9, $plannedArrTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEstArrTime(FlatBufferBuilder $builder, $estArrTime)
    {
        $builder->addOffsetX(10, $estArrTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActualArrTime(FlatBufferBuilder $builder, $actualArrTime)
    {
        $builder->addOffsetX(11, $actualArrTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDepPurpose(FlatBufferBuilder $builder, $depPurpose)
    {
        $builder->addOffsetX(12, $depPurpose, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlannedDepTime(FlatBufferBuilder $builder, $plannedDepTime)
    {
        $builder->addOffsetX(13, $plannedDepTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEstDepTime(FlatBufferBuilder $builder, $estDepTime)
    {
        $builder->addOffsetX(14, $estDepTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActualDepTime(FlatBufferBuilder $builder, $actualDepTime)
    {
        $builder->addOffsetX(15, $actualDepTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addExternalARTrackId(FlatBufferBuilder $builder, $externalARTrackId)
    {
        $builder->addOffsetX(16, $externalARTrackId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArTrackId(FlatBufferBuilder $builder, $arTrackId)
    {
        $builder->addOffsetX(17, $arTrackId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArTrackName(FlatBufferBuilder $builder, $arTrackName)
    {
        $builder->addOffsetX(18, $arTrackName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRzct(FlatBufferBuilder $builder, $rzct)
    {
        $builder->addOffsetX(19, $rzct, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArct(FlatBufferBuilder $builder, $arct)
    {
        $builder->addOffsetX(20, $arct, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBaseAlt(FlatBufferBuilder $builder, $baseAlt)
    {
        $builder->addDoubleX(21, $baseAlt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPriority(FlatBufferBuilder $builder, $priority)
    {
        $builder->addOffsetX(22, $priority, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTrackTime(FlatBufferBuilder $builder, $trackTime)
    {
        $builder->addDoubleX(23, $trackTime, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStatusCode(FlatBufferBuilder $builder, $statusCode)
    {
        $builder->addOffsetX(24, $statusCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRzPoint(FlatBufferBuilder $builder, $rzPoint)
    {
        $builder->addOffsetX(25, $rzPoint, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRzType(FlatBufferBuilder $builder, $rzType)
    {
        $builder->addOffsetX(26, $rzType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addArEventType(FlatBufferBuilder $builder, $arEventType)
    {
        $builder->addOffsetX(27, $arEventType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumTankers(FlatBufferBuilder $builder, $numTankers)
    {
        $builder->addIntX(28, $numTankers, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addRevTrack(FlatBufferBuilder $builder, $revTrack)
    {
        $builder->addBoolX(29, $revTrack, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addShortTrack(FlatBufferBuilder $builder, $shortTrack)
    {
        $builder->addBoolX(30, $shortTrack, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addCancelled(FlatBufferBuilder $builder, $cancelled)
    {
        $builder->addBoolX(31, $cancelled, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTankers(FlatBufferBuilder $builder, $tankers)
    {
        $builder->addOffsetX(32, $tankers, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTankersVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTankersVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addReceivers(FlatBufferBuilder $builder, $receivers)
    {
        $builder->addOffsetX(33, $receivers, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createReceiversVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startReceiversVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRemarks(FlatBufferBuilder $builder, $remarks)
    {
        $builder->addOffsetX(34, $remarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRemarksVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRemarksVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(35, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(36, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedAt(FlatBufferBuilder $builder, $updatedAt)
    {
        $builder->addOffsetX(37, $updatedAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUpdatedBy(FlatBufferBuilder $builder, $updatedBy)
    {
        $builder->addOffsetX(38, $updatedBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSourceDL(FlatBufferBuilder $builder, $sourceDL)
    {
        $builder->addOffsetX(39, $sourceDL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(40, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(41, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(42, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(43, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAirEvent_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishAirEvent_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "AIRE");
    }
}
