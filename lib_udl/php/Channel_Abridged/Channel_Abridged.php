<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Channel information on a particular transponder.
class Channel_Abridged extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Channel_Abridged
     */
    public static function getRootAsChannel_Abridged(ByteBuffer $bb)
    {
        $obj = new Channel_Abridged();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Channel_AbridgedIdentifier()
    {
        return "CHAN";
    }

    public static function Channel_AbridgedBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Channel_AbridgedIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Channel_Abridged
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: CHANNEL-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID of the parent transponder object for this Channel.
    /// Example: /// Example: REF-TRANSPONDER-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getIdTransponder()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Channel name.
    /// Example: /// Example: Example name
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getName()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Channel type.
    /// Example: /// Example: Example type
    /// Constraints: Minimum length = 0, Maximum length = 45
    public function getType()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the particular beam for this channel.
    /// Example: /// Example: REF-BEAM-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdBeam()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The antenna beam ID of the particular beam for this channel.  beamName is not unique across payloads.
    /// Example: /// Example: B8VD
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getBeamName()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID of the RF Band object for this channel.
    /// Example: /// Example: REF-RFBAND-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdRFBand()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Channel encryption.
    /// Example: /// Example: Example encryption
    /// Constraints: Minimum length = 0, Maximum length = 45
    public function getEncryption()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Pkg.
    /// Example: /// Example: Example pkg
    /// Constraints: Minimum length = 0, Maximum length = 45
    public function getPkg()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Res.
    /// Example: /// Example: Example res
    /// Constraints: Minimum length = 0, Maximum length = 45
    public function getRes()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Channel compression.
    /// Example: /// Example: Example compression
    /// Constraints: Minimum length = 0, Maximum length = 45
    public function getCompression()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Channel vPid.
    /// Example: /// Example: VP-ID
    /// Constraints: Minimum length = 0, Maximum length = 45
    public function getVpid()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Channel aPid.
    /// Example: /// Example: AP-ID
    /// Constraints: Minimum length = 0, Maximum length = 45
    public function getApid()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// SID.
    /// Example: /// Example: S-ID
    /// Constraints: Minimum length = 0, Maximum length = 45
    public function getSid()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Owner.
    /// Example: /// Example: example_owner
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getOwner()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: system.source
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: example_origin
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Channel_Abridged_dataMode_Enum::REAL;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startChannel_Abridged(FlatBufferBuilder $builder)
    {
        $builder->StartObject(22);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Channel_Abridged
     */
    public static function createChannel_Abridged(FlatBufferBuilder $builder, $id, $idTransponder, $name, $classificationMarking, $type, $idBeam, $beamName, $idRFBand, $encryption, $pkg, $res, $compression, $vpid, $apid, $sid, $owner, $source, $origin, $origNetwork, $dataMode, $createdAt, $createdBy)
    {
        $builder->startObject(22);
        self::addId($builder, $id);
        self::addIdTransponder($builder, $idTransponder);
        self::addName($builder, $name);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addType($builder, $type);
        self::addIdBeam($builder, $idBeam);
        self::addBeamName($builder, $beamName);
        self::addIdRFBand($builder, $idRFBand);
        self::addEncryption($builder, $encryption);
        self::addPkg($builder, $pkg);
        self::addRes($builder, $res);
        self::addCompression($builder, $compression);
        self::addVpid($builder, $vpid);
        self::addApid($builder, $apid);
        self::addSid($builder, $sid);
        self::addOwner($builder, $owner);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdTransponder(FlatBufferBuilder $builder, $idTransponder)
    {
        $builder->addOffsetX(1, $idTransponder, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(2, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(3, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(4, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdBeam(FlatBufferBuilder $builder, $idBeam)
    {
        $builder->addOffsetX(5, $idBeam, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBeamName(FlatBufferBuilder $builder, $beamName)
    {
        $builder->addOffsetX(6, $beamName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdRFBand(FlatBufferBuilder $builder, $idRFBand)
    {
        $builder->addOffsetX(7, $idRFBand, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEncryption(FlatBufferBuilder $builder, $encryption)
    {
        $builder->addOffsetX(8, $encryption, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPkg(FlatBufferBuilder $builder, $pkg)
    {
        $builder->addOffsetX(9, $pkg, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRes(FlatBufferBuilder $builder, $res)
    {
        $builder->addOffsetX(10, $res, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCompression(FlatBufferBuilder $builder, $compression)
    {
        $builder->addOffsetX(11, $compression, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVpid(FlatBufferBuilder $builder, $vpid)
    {
        $builder->addOffsetX(12, $vpid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addApid(FlatBufferBuilder $builder, $apid)
    {
        $builder->addOffsetX(13, $apid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSid(FlatBufferBuilder $builder, $sid)
    {
        $builder->addOffsetX(14, $sid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOwner(FlatBufferBuilder $builder, $owner)
    {
        $builder->addOffsetX(15, $owner, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(16, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(17, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(18, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(19, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(20, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(21, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endChannel_Abridged(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishChannel_AbridgedBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "CHAN");
    }
}
