<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Information for Global Navigation Satellite Systems (GNSS) Observations collected from GNSS receivers, including the specific GNSS sat from which each signal was received, and the observation codes of each observation in the record. Each GNSS Observation is associated with a GNSS Observation Set record containing data which applies to all observations in the set, including observation time, receiver location, and Dilution of Precision (DOP) values. Users can Reference RINEX 3+ documentation for further information concerning many of the standards and conventions for GNSS observations.
class GNSSObservation_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return GNSSObservation_Full
     */
    public static function getRootAsGNSSObservation_Full(ByteBuffer $bb)
    {
        $obj = new GNSSObservation_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function GNSSObservation_FullIdentifier()
    {
        return "GNSS";
    }

    public static function GNSSObservation_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::GNSSObservation_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return GNSSObservation_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// RINEX 3+ compliant GNSS System and Satellite Identifier (represented as SNN, where S is the system code, and NN is the satellite identifier) associated with this observation:
    /// G - GPS (NN = PRN)
    /// R - GLONASS (NN = Slot Number)
    /// S - SBAS Payload (NN = PRN-100)
    /// E - Galileo (NN = PRN)
    /// C - BeiDou (NN = PRN)
    /// J - QZSS (NN = PRN - 1923)
    /// I - IRNSS (NN = PRN)
    /// Example: /// Example: GEJ
    /// Constraints: Minimum length = 0, Maximum length = 6
    public function getGnssSatId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getTrackingStatus()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// GNSS Automatic Gain Control State.
    /// Example: /// Example: 20
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getAgcState()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The observation code set that applies to this observation record.  Reference RINEX 3+ for further information concerning observation code set conventions.
    /// Example: /// Example: ['S1C', 'C1C', 'C1D']
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getObsCodeSet($j)
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getObsCodeSetLength()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of observation(s).  The ob array must be the same length as the obsCodeSet.  Pseudorange (C) is expressed meters, carrier phase (L) in cycles,  doppler (D) in Hz where + values indicate approaching sats, and signal strength C/No (S) in dB-Hz.
    /// Example: /// Example: [42.1, 1000.0, 0.9]
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getOb($j)
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getObLength()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startGNSSObservation_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(5);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return GNSSObservation_Full
     */
    public static function createGNSSObservation_Full(FlatBufferBuilder $builder, $gnssSatId, $trackingStatus, $agcState, $obsCodeSet, $ob)
    {
        $builder->startObject(5);
        self::addGnssSatId($builder, $gnssSatId);
        self::addTrackingStatus($builder, $trackingStatus);
        self::addAgcState($builder, $agcState);
        self::addObsCodeSet($builder, $obsCodeSet);
        self::addOb($builder, $ob);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGnssSatId(FlatBufferBuilder $builder, $gnssSatId)
    {
        $builder->addOffsetX(0, $gnssSatId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTrackingStatus(FlatBufferBuilder $builder, $trackingStatus)
    {
        $builder->addIntX(1, $trackingStatus, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAgcState(FlatBufferBuilder $builder, $agcState)
    {
        $builder->addIntX(2, $agcState, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addObsCodeSet(FlatBufferBuilder $builder, $obsCodeSet)
    {
        $builder->addOffsetX(3, $obsCodeSet, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createObsCodeSetVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startObsCodeSetVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addOb(FlatBufferBuilder $builder, $ob)
    {
        $builder->addOffsetX(4, $ob, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createObVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startObVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endGNSSObservation_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishGNSSObservation_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "GNSS");
    }
}
