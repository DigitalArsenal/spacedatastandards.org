<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Casualty report and evacuation request. Used to report and request support to evacuate friendly and enemy casualties.
class Evac_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Evac_Ingest
     */
    public static function getRootAsEvac_Ingest(ByteBuffer $bb)
    {
        $obj = new Evac_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function Evac_IngestIdentifier()
    {
        return "EVAC";
    }

    public static function Evac_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::Evac_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Evac_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: MEDEVACEVENT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// UUID identifying the medevac mission, which should remain the same on subsequent posts related to the same medevac mission.
    /// Example: /// Example: MedEvac-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getMedevacId()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of this medevac record (REQUEST, RESPONSE).
    /// Example: /// Example: REQUEST
    /// Constraints: Minimum length = 1, Maximum length = 8
    /**
     * @return sbyte
     */
    public function getType()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Evac_Ingest_type_Enum::REQUEST;
    }

    /// The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
    /// Example: /// Example: GROUND
    /// Constraints: Minimum length = 0, Maximum length = 8
    public function getMissionType()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of a weather report associated with this evacuation.
    /// Example: /// Example: WeatherReport-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdWeatherReport()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of people Killed In Action.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumKIA()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of people Wounded In Action.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumWIA()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of littered personnel requiring evacuation.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumLitter()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of ambulatory personnel requiring evacuation.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumAmbulatory()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Flag indicating whether the mission requires medical personnel.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getMedicReq()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Externally provided Medevac request number (e.g. MED.1.223908).
    /// Example: /// Example: MED.1.234567
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getReqNum()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The request time, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-10-15T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getReqTime()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The call sign of this medevac requestor.
    /// Example: /// Example: Bravo
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getReqCallSign()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The expected pickup time, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-10-20T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getPickupTime()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 75.1234
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPickupLat()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 175.1234
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPickupLon()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point height below ellipsoid.
    /// Example: /// Example: 30.1234
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getPickupAlt()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
    /// Example: /// Example: 10.1234
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCe()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Height above lat/lon point, in meters (1-sigma, if representing linear error).
    /// Example: /// Example: 5.1234
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getLe()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Short description of the terrain features of the pickup location (WOODS, TREES, PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL, SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
    /// Example: /// Example: ROCKY
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getTerrain()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Amplifying data for the terrain describing important obstacles in or around the zone.
    /// Example: /// Example: N/A
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getObstaclesRemarks()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Amplifying data for the terrain describing any notable additional terrain features.
    /// Example: /// Example: N/A
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getTerrainRemarks()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name of the zone.
    /// Example: /// Example: example-zone
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getZoneName()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES, MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER DESIGNATOR,  STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS, INFRARED, ILLUMINATION, FRATRICIDE FENCE).
    /// Example: /// Example: ILLUMINATION
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getZoneMarking()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
    /// Example: /// Example: NO ENEMY
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getZoneSecurity()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE, BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
    /// Example: /// Example: RED
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getZoneMarkingColor()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag indicating that the pickup site is hot and hostiles are in the area.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    /**
     * @return bool
     */
    public function getZoneHot()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The contact frequency, in Hz, of the agency or zone controller.
    /// Example: /// Example: 3.11
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getCntctFreq()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The call sign of the zone controller.
    /// Example: /// Example: Tango
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getZoneContrCallSign()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The count of people requiring medevac.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getNumCasualties()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Additional comments for the medevac mission.
    /// Example: /// Example: Comments concerning mission
    /// Constraints: Minimum length = 0, Maximum length = 1024
    public function getComments()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getCasualtyInfo($j)
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCasualtyInfoLength()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    /**
     * @param int offset
     * @return string
     */
    public function getEnemyData($j)
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEnemyDataLength()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \Evac_Ingest_dataMode_Enum::REAL;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEvac_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(40);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Evac_Ingest
     */
    public static function createEvac_Ingest(FlatBufferBuilder $builder, $id, $classificationMarking, $medevacId, $type, $missionType, $idWeatherReport, $numKIA, $numWIA, $numLitter, $numAmbulatory, $medicReq, $reqNum, $reqTime, $reqCallSign, $pickupTime, $pickupLat, $pickupLon, $pickupAlt, $ce, $le, $terrain, $obstaclesRemarks, $terrainRemarks, $zoneName, $zoneMarking, $zoneSecurity, $zoneMarkingColor, $zoneHot, $cntctFreq, $zoneContrCallSign, $numCasualties, $comments, $casualtyInfo, $enemyData, $origNetwork, $createdAt, $createdBy, $source, $origin, $dataMode)
    {
        $builder->startObject(40);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addMedevacId($builder, $medevacId);
        self::addType($builder, $type);
        self::addMissionType($builder, $missionType);
        self::addIdWeatherReport($builder, $idWeatherReport);
        self::addNumKIA($builder, $numKIA);
        self::addNumWIA($builder, $numWIA);
        self::addNumLitter($builder, $numLitter);
        self::addNumAmbulatory($builder, $numAmbulatory);
        self::addMedicReq($builder, $medicReq);
        self::addReqNum($builder, $reqNum);
        self::addReqTime($builder, $reqTime);
        self::addReqCallSign($builder, $reqCallSign);
        self::addPickupTime($builder, $pickupTime);
        self::addPickupLat($builder, $pickupLat);
        self::addPickupLon($builder, $pickupLon);
        self::addPickupAlt($builder, $pickupAlt);
        self::addCe($builder, $ce);
        self::addLe($builder, $le);
        self::addTerrain($builder, $terrain);
        self::addObstaclesRemarks($builder, $obstaclesRemarks);
        self::addTerrainRemarks($builder, $terrainRemarks);
        self::addZoneName($builder, $zoneName);
        self::addZoneMarking($builder, $zoneMarking);
        self::addZoneSecurity($builder, $zoneSecurity);
        self::addZoneMarkingColor($builder, $zoneMarkingColor);
        self::addZoneHot($builder, $zoneHot);
        self::addCntctFreq($builder, $cntctFreq);
        self::addZoneContrCallSign($builder, $zoneContrCallSign);
        self::addNumCasualties($builder, $numCasualties);
        self::addComments($builder, $comments);
        self::addCasualtyInfo($builder, $casualtyInfo);
        self::addEnemyData($builder, $enemyData);
        self::addOrigNetwork($builder, $origNetwork);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addDataMode($builder, $dataMode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMedevacId(FlatBufferBuilder $builder, $medevacId)
    {
        $builder->addOffsetX(2, $medevacId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addSbyteX(3, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMissionType(FlatBufferBuilder $builder, $missionType)
    {
        $builder->addOffsetX(4, $missionType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdWeatherReport(FlatBufferBuilder $builder, $idWeatherReport)
    {
        $builder->addOffsetX(5, $idWeatherReport, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumKIA(FlatBufferBuilder $builder, $numKIA)
    {
        $builder->addIntX(6, $numKIA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumWIA(FlatBufferBuilder $builder, $numWIA)
    {
        $builder->addIntX(7, $numWIA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumLitter(FlatBufferBuilder $builder, $numLitter)
    {
        $builder->addIntX(8, $numLitter, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumAmbulatory(FlatBufferBuilder $builder, $numAmbulatory)
    {
        $builder->addIntX(9, $numAmbulatory, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addMedicReq(FlatBufferBuilder $builder, $medicReq)
    {
        $builder->addBoolX(10, $medicReq, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReqNum(FlatBufferBuilder $builder, $reqNum)
    {
        $builder->addOffsetX(11, $reqNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReqTime(FlatBufferBuilder $builder, $reqTime)
    {
        $builder->addOffsetX(12, $reqTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addReqCallSign(FlatBufferBuilder $builder, $reqCallSign)
    {
        $builder->addOffsetX(13, $reqCallSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPickupTime(FlatBufferBuilder $builder, $pickupTime)
    {
        $builder->addOffsetX(14, $pickupTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPickupLat(FlatBufferBuilder $builder, $pickupLat)
    {
        $builder->addDoubleX(15, $pickupLat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPickupLon(FlatBufferBuilder $builder, $pickupLon)
    {
        $builder->addDoubleX(16, $pickupLon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPickupAlt(FlatBufferBuilder $builder, $pickupAlt)
    {
        $builder->addDoubleX(17, $pickupAlt, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCe(FlatBufferBuilder $builder, $ce)
    {
        $builder->addDoubleX(18, $ce, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLe(FlatBufferBuilder $builder, $le)
    {
        $builder->addDoubleX(19, $le, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTerrain(FlatBufferBuilder $builder, $terrain)
    {
        $builder->addOffsetX(20, $terrain, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addObstaclesRemarks(FlatBufferBuilder $builder, $obstaclesRemarks)
    {
        $builder->addOffsetX(21, $obstaclesRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTerrainRemarks(FlatBufferBuilder $builder, $terrainRemarks)
    {
        $builder->addOffsetX(22, $terrainRemarks, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addZoneName(FlatBufferBuilder $builder, $zoneName)
    {
        $builder->addOffsetX(23, $zoneName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addZoneMarking(FlatBufferBuilder $builder, $zoneMarking)
    {
        $builder->addOffsetX(24, $zoneMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addZoneSecurity(FlatBufferBuilder $builder, $zoneSecurity)
    {
        $builder->addOffsetX(25, $zoneSecurity, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addZoneMarkingColor(FlatBufferBuilder $builder, $zoneMarkingColor)
    {
        $builder->addOffsetX(26, $zoneMarkingColor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addZoneHot(FlatBufferBuilder $builder, $zoneHot)
    {
        $builder->addBoolX(27, $zoneHot, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCntctFreq(FlatBufferBuilder $builder, $cntctFreq)
    {
        $builder->addDoubleX(28, $cntctFreq, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addZoneContrCallSign(FlatBufferBuilder $builder, $zoneContrCallSign)
    {
        $builder->addOffsetX(29, $zoneContrCallSign, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNumCasualties(FlatBufferBuilder $builder, $numCasualties)
    {
        $builder->addIntX(30, $numCasualties, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addComments(FlatBufferBuilder $builder, $comments)
    {
        $builder->addOffsetX(31, $comments, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCasualtyInfo(FlatBufferBuilder $builder, $casualtyInfo)
    {
        $builder->addOffsetX(32, $casualtyInfo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCasualtyInfoVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCasualtyInfoVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEnemyData(FlatBufferBuilder $builder, $enemyData)
    {
        $builder->addOffsetX(33, $enemyData, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEnemyDataVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEnemyDataVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(34, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(35, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(36, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(37, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(38, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(39, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEvac_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEvac_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "EVAC");
    }
}
