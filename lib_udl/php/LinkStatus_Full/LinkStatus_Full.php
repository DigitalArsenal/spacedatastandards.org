<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// Captures link status.
class LinkStatus_Full extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return LinkStatus_Full
     */
    public static function getRootAsLinkStatus_Full(ByteBuffer $bb)
    {
        $obj = new LinkStatus_Full();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function LinkStatus_FullIdentifier()
    {
        return "LINK";
    }

    public static function LinkStatus_FullBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::LinkStatus_FullIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return LinkStatus_Full
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: LINKSTATUS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    public function getClassificationMarking()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique ID of the on-orbit satellite (Sat-1) forming the link.  A null value for idOnOrbit1 indicates that the link is formed over a LEO/MEO constellation.
    /// Example: /// Example: REF-ONORBIT1-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit1()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique ID of the on-orbit satellite (Sat-2) forming the link.  A null value for idOnOrbit2 indicates either a link employing only Sat-1 or a link formed over a LEO/MEO constellation.
    /// Example: /// Example: REF-ONORBIT2-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdOnOrbit2()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The link establishment time, or the time that the link becomes available for use, in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getLinkStartTime()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The link termination time, or the time that the link becomes unavailable for use, in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    public function getLinkStopTime()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The constellation name if the link is established over a LEO/MEO constellation.  In this case, idOnOrbit1 and idOnOrbit2 will be null.
    /// Example: /// Example: Fornax
    /// Constraints: Minimum length = 0, Maximum length = 128
    public function getConstellation()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name or description of the link.
    /// Example: /// Example: Example description
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getLinkName()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of the link.
    /// Example: /// Example: Example link
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getLinkType()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).
    /// Example: /// Example: MIL-KA
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getBand()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The ID of beam-1 forming the link.  In the case of two sat link, beam-1 corresponds to Sat-1.
    /// Example: /// Example: REF-BEAM1-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdBeam1()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name or description of link endpoint-1, corresponding to beam-1.
    /// Example: /// Example: Example endpoint
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getEndPoint1Name()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEndPoint1Lat()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 80.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEndPoint1Lon()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The ID of beam-2 forming the link.  In the case of two sat link, beam-2 corresponds to Sat-2.
    /// Example: /// Example: REF-BEAM2-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    public function getIdBeam2()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The name or description of link endpoint-2, corresponding to beam-2.
    /// Example: /// Example: Example description
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getEndPoint2Name()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEndPoint2Lat()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 80.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getEndPoint2Lon()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The endpoint-1 to endpoint-2 data rate, in kbps.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDataRate1To2()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The endpoint-2 to endpoint-1 data rate, in kbps.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getDataRate2To1()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).
    /// Example: /// Example: DEGRADED-WEATHER
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getLinkState()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The SYSCAP mission status of the system(s) forming the link.
    /// Example: /// Example: Example status
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getSysCap()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The OPSCAP mission status of the system(s) forming the link.
    /// Example: /// Example: Example status
    /// Constraints: Minimum length = 0, Maximum length = 24
    public function getOpsCap()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    public function getCreatedAt()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getCreatedBy()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    public function getSource()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrigin()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    public function getOrigNetwork()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    /**
     * @return sbyte
     */
    public function getDataMode()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \LinkStatus_Full_dataMode_Enum::REAL;
    }

    /// Satellite/catalog number of the target on-orbit primary object.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo1()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Satellite/catalog number of the target on-orbit secondary object.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getSatNo2()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startLinkStatus_Full(FlatBufferBuilder $builder)
    {
        $builder->StartObject(31);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return LinkStatus_Full
     */
    public static function createLinkStatus_Full(FlatBufferBuilder $builder, $id, $classificationMarking, $idOnOrbit1, $idOnOrbit2, $linkStartTime, $linkStopTime, $constellation, $linkName, $linkType, $band, $idBeam1, $endPoint1Name, $endPoint1Lat, $endPoint1Lon, $idBeam2, $endPoint2Name, $endPoint2Lat, $endPoint2Lon, $dataRate1To2, $dataRate2To1, $linkState, $sysCap, $opsCap, $createdAt, $createdBy, $source, $origin, $origNetwork, $dataMode, $satNo1, $satNo2)
    {
        $builder->startObject(31);
        self::addId($builder, $id);
        self::addClassificationMarking($builder, $classificationMarking);
        self::addIdOnOrbit1($builder, $idOnOrbit1);
        self::addIdOnOrbit2($builder, $idOnOrbit2);
        self::addLinkStartTime($builder, $linkStartTime);
        self::addLinkStopTime($builder, $linkStopTime);
        self::addConstellation($builder, $constellation);
        self::addLinkName($builder, $linkName);
        self::addLinkType($builder, $linkType);
        self::addBand($builder, $band);
        self::addIdBeam1($builder, $idBeam1);
        self::addEndPoint1Name($builder, $endPoint1Name);
        self::addEndPoint1Lat($builder, $endPoint1Lat);
        self::addEndPoint1Lon($builder, $endPoint1Lon);
        self::addIdBeam2($builder, $idBeam2);
        self::addEndPoint2Name($builder, $endPoint2Name);
        self::addEndPoint2Lat($builder, $endPoint2Lat);
        self::addEndPoint2Lon($builder, $endPoint2Lon);
        self::addDataRate1To2($builder, $dataRate1To2);
        self::addDataRate2To1($builder, $dataRate2To1);
        self::addLinkState($builder, $linkState);
        self::addSysCap($builder, $sysCap);
        self::addOpsCap($builder, $opsCap);
        self::addCreatedAt($builder, $createdAt);
        self::addCreatedBy($builder, $createdBy);
        self::addSource($builder, $source);
        self::addOrigin($builder, $origin);
        self::addOrigNetwork($builder, $origNetwork);
        self::addDataMode($builder, $dataMode);
        self::addSatNo1($builder, $satNo1);
        self::addSatNo2($builder, $satNo2);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addClassificationMarking(FlatBufferBuilder $builder, $classificationMarking)
    {
        $builder->addOffsetX(1, $classificationMarking, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit1(FlatBufferBuilder $builder, $idOnOrbit1)
    {
        $builder->addOffsetX(2, $idOnOrbit1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdOnOrbit2(FlatBufferBuilder $builder, $idOnOrbit2)
    {
        $builder->addOffsetX(3, $idOnOrbit2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLinkStartTime(FlatBufferBuilder $builder, $linkStartTime)
    {
        $builder->addOffsetX(4, $linkStartTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLinkStopTime(FlatBufferBuilder $builder, $linkStopTime)
    {
        $builder->addOffsetX(5, $linkStopTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addConstellation(FlatBufferBuilder $builder, $constellation)
    {
        $builder->addOffsetX(6, $constellation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLinkName(FlatBufferBuilder $builder, $linkName)
    {
        $builder->addOffsetX(7, $linkName, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLinkType(FlatBufferBuilder $builder, $linkType)
    {
        $builder->addOffsetX(8, $linkType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBand(FlatBufferBuilder $builder, $band)
    {
        $builder->addOffsetX(9, $band, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdBeam1(FlatBufferBuilder $builder, $idBeam1)
    {
        $builder->addOffsetX(10, $idBeam1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEndPoint1Name(FlatBufferBuilder $builder, $endPoint1Name)
    {
        $builder->addOffsetX(11, $endPoint1Name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEndPoint1Lat(FlatBufferBuilder $builder, $endPoint1Lat)
    {
        $builder->addDoubleX(12, $endPoint1Lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEndPoint1Lon(FlatBufferBuilder $builder, $endPoint1Lon)
    {
        $builder->addDoubleX(13, $endPoint1Lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIdBeam2(FlatBufferBuilder $builder, $idBeam2)
    {
        $builder->addOffsetX(14, $idBeam2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEndPoint2Name(FlatBufferBuilder $builder, $endPoint2Name)
    {
        $builder->addOffsetX(15, $endPoint2Name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEndPoint2Lat(FlatBufferBuilder $builder, $endPoint2Lat)
    {
        $builder->addDoubleX(16, $endPoint2Lat, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEndPoint2Lon(FlatBufferBuilder $builder, $endPoint2Lon)
    {
        $builder->addDoubleX(17, $endPoint2Lon, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDataRate1To2(FlatBufferBuilder $builder, $dataRate1To2)
    {
        $builder->addDoubleX(18, $dataRate1To2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDataRate2To1(FlatBufferBuilder $builder, $dataRate2To1)
    {
        $builder->addDoubleX(19, $dataRate2To1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLinkState(FlatBufferBuilder $builder, $linkState)
    {
        $builder->addOffsetX(20, $linkState, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSysCap(FlatBufferBuilder $builder, $sysCap)
    {
        $builder->addOffsetX(21, $sysCap, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOpsCap(FlatBufferBuilder $builder, $opsCap)
    {
        $builder->addOffsetX(22, $opsCap, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(23, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCreatedBy(FlatBufferBuilder $builder, $createdBy)
    {
        $builder->addOffsetX(24, $createdBy, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSource(FlatBufferBuilder $builder, $source)
    {
        $builder->addOffsetX(25, $source, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigin(FlatBufferBuilder $builder, $origin)
    {
        $builder->addOffsetX(26, $origin, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrigNetwork(FlatBufferBuilder $builder, $origNetwork)
    {
        $builder->addOffsetX(27, $origNetwork, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDataMode(FlatBufferBuilder $builder, $dataMode)
    {
        $builder->addSbyteX(28, $dataMode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo1(FlatBufferBuilder $builder, $satNo1)
    {
        $builder->addIntX(29, $satNo1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSatNo2(FlatBufferBuilder $builder, $satNo2)
    {
        $builder->addIntX(30, $satNo2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endLinkStatus_Full(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishLinkStatus_FullBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "LINK");
    }
}
