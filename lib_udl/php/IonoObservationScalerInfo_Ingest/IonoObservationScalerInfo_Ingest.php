<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// /// The ScalerInfo record describes the person or system who interpreted the ionogram in IonoObservation.
class IonoObservationScalerInfo_Ingest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return IonoObservationScalerInfo_Ingest
     */
    public static function getRootAsIonoObservationScalerInfo_Ingest(ByteBuffer $bb)
    {
        $obj = new IonoObservationScalerInfo_Ingest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function IonoObservationScalerInfo_IngestIdentifier()
    {
        return "IONO";
    }

    public static function IonoObservationScalerInfo_IngestBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::IonoObservationScalerInfo_IngestIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return IonoObservationScalerInfo_Ingest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Scaler type (MANUAL, AUTOMATIC or UNKNOWN).
    /// Example: /// Example: MANUAL
    /// Constraints: Minimum length = 0, Maximum length = 9
    public function getType()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Scaler name.
    /// Example: /// Example: ARTIST-4
    /// Constraints: Minimum length = 0, Maximum length = 20
    public function getName()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Scaler organization.
    /// Example: /// Example: UML
    /// Constraints: Minimum length = 0, Maximum length = 64
    public function getOrganization()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Scaler version.
    /// Example: /// Example: 500200.1
    /// Constraints: No constraints specified.
    /**
     * @return double
     */
    public function getVersion()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Scaler confidence score.
    /// Example: /// Example: 75
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getConfidenceScore()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Scaler confidence level.
    /// Example: /// Example: 11
    /// Constraints: No constraints specified.
    /**
     * @return int
     */
    public function getConfidenceLevel()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startIonoObservationScalerInfo_Ingest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(6);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return IonoObservationScalerInfo_Ingest
     */
    public static function createIonoObservationScalerInfo_Ingest(FlatBufferBuilder $builder, $type, $name, $organization, $version, $confidenceScore, $confidenceLevel)
    {
        $builder->startObject(6);
        self::addType($builder, $type);
        self::addName($builder, $name);
        self::addOrganization($builder, $organization);
        self::addVersion($builder, $version);
        self::addConfidenceScore($builder, $confidenceScore);
        self::addConfidenceLevel($builder, $confidenceLevel);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addOffsetX(0, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(1, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOrganization(FlatBufferBuilder $builder, $organization)
    {
        $builder->addOffsetX(2, $organization, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVersion(FlatBufferBuilder $builder, $version)
    {
        $builder->addDoubleX(3, $version, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addConfidenceScore(FlatBufferBuilder $builder, $confidenceScore)
    {
        $builder->addIntX(4, $confidenceScore, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addConfidenceLevel(FlatBufferBuilder $builder, $confidenceLevel)
    {
        $builder->addIntX(5, $confidenceLevel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endIonoObservationScalerInfo_Ingest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishIonoObservationScalerInfo_IngestBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "IONO");
    }
}
