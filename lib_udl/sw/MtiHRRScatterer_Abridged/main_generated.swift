// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// HRR Scatterer record for a target pixel that exceeds the target detection threshold.
public struct MtiHRRScatterer_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "MTIH" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: MtiHRRScatterer_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case h321 = 4
    case h322 = 6
    case h323 = 8
    case h324 = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Scatterer’s power magnitude.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var h321: Int32 { let o = _accessor.offset(VTOFFSET.h321.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Scatterer’s complex phase, in degrees.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var h322: Int32 { let o = _accessor.offset(VTOFFSET.h322.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Scatterer’s Range index relative to Range-Doppler chip, where increasing index equates to increasing range.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var h323: Int32 { let o = _accessor.offset(VTOFFSET.h323.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Scatterer’s Doppler index relative to Range-Doppler chip, where increasing index equates to increasing Doppler.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var h324: Int32 { let o = _accessor.offset(VTOFFSET.h324.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public static func startMtiHRRScatterer_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(h321: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h321, def: 0, at: VTOFFSET.h321.p) }
  public static func add(h322: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h322, def: 0, at: VTOFFSET.h322.p) }
  public static func add(h323: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h323, def: 0, at: VTOFFSET.h323.p) }
  public static func add(h324: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h324, def: 0, at: VTOFFSET.h324.p) }
  public static func endMtiHRRScatterer_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMtiHRRScatterer_Abridged(
    _ fbb: inout FlatBufferBuilder,
    h321: Int32 = 0,
    h322: Int32 = 0,
    h323: Int32 = 0,
    h324: Int32 = 0
  ) -> Offset {
    let __start = MtiHRRScatterer_Abridged.startMtiHRRScatterer_Abridged(&fbb)
    MtiHRRScatterer_Abridged.add(h321: h321, &fbb)
    MtiHRRScatterer_Abridged.add(h322: h322, &fbb)
    MtiHRRScatterer_Abridged.add(h323: h323, &fbb)
    MtiHRRScatterer_Abridged.add(h324: h324, &fbb)
    return MtiHRRScatterer_Abridged.endMtiHRRScatterer_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.h321.p, fieldName: "h321", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h322.p, fieldName: "h322", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h323.p, fieldName: "h323", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h324.p, fieldName: "h324", required: false, type: Int32.self)
    _v.finish()
  }
}

