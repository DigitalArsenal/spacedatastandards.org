// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// List of data sources related to this document.
public struct SofDataSourceRef_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SOFD" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: SofDataSourceRef_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case dataSourceId = 4
    case startPosition = 6
    case endPosition = 8
    case paragraphNumber = 10
    case sentenceNumber = 12
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Data source id.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var dataSourceId: String? { let o = _accessor.offset(VTOFFSET.dataSourceId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dataSourceIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dataSourceId.v) }
  ///  start position.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var startPosition: String? { let o = _accessor.offset(VTOFFSET.startPosition.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startPositionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.startPosition.v) }
  ///  end position.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var endPosition: String? { let o = _accessor.offset(VTOFFSET.endPosition.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var endPositionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.endPosition.v) }
  ///  paragraph number.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var paragraphNumber: String? { let o = _accessor.offset(VTOFFSET.paragraphNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var paragraphNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.paragraphNumber.v) }
  ///  sentence number.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var sentenceNumber: String? { let o = _accessor.offset(VTOFFSET.sentenceNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sentenceNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sentenceNumber.v) }
  public static func startSofDataSourceRef_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 5) }
  public static func add(dataSourceId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dataSourceId, at: VTOFFSET.dataSourceId.p) }
  public static func add(startPosition: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: startPosition, at: VTOFFSET.startPosition.p) }
  public static func add(endPosition: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: endPosition, at: VTOFFSET.endPosition.p) }
  public static func add(paragraphNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: paragraphNumber, at: VTOFFSET.paragraphNumber.p) }
  public static func add(sentenceNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sentenceNumber, at: VTOFFSET.sentenceNumber.p) }
  public static func endSofDataSourceRef_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSofDataSourceRef_Full(
    _ fbb: inout FlatBufferBuilder,
    dataSourceIdOffset dataSourceId: Offset = Offset(),
    startPositionOffset startPosition: Offset = Offset(),
    endPositionOffset endPosition: Offset = Offset(),
    paragraphNumberOffset paragraphNumber: Offset = Offset(),
    sentenceNumberOffset sentenceNumber: Offset = Offset()
  ) -> Offset {
    let __start = SofDataSourceRef_Full.startSofDataSourceRef_Full(&fbb)
    SofDataSourceRef_Full.add(dataSourceId: dataSourceId, &fbb)
    SofDataSourceRef_Full.add(startPosition: startPosition, &fbb)
    SofDataSourceRef_Full.add(endPosition: endPosition, &fbb)
    SofDataSourceRef_Full.add(paragraphNumber: paragraphNumber, &fbb)
    SofDataSourceRef_Full.add(sentenceNumber: sentenceNumber, &fbb)
    return SofDataSourceRef_Full.endSofDataSourceRef_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.dataSourceId.p, fieldName: "dataSourceId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.startPosition.p, fieldName: "startPosition", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.endPosition.p, fieldName: "endPosition", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.paragraphNumber.p, fieldName: "paragraphNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sentenceNumber.p, fieldName: "sentenceNumber", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

