// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum AirLoadPlan_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: AirLoadPlan_Ingest_dataMode_Enum { return .exercise }
  public static var min: AirLoadPlan_Ingest_dataMode_Enum { return .real }
}


///  /// Information related to how an aircraft is loaded with cargo, equipment, and passengers.
public struct AirLoadPlan_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRL" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AirLoadPlan_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case externalId = 8
    case idMission = 10
    case missionNumber = 12
    case idSortie = 14
    case legNum = 16
    case callSign = 18
    case tailNumber = 20
    case aircraftMds = 22
    case depIcao = 24
    case depAirfield = 26
    case estDepTime = 28
    case arrIcao = 30
    case arrAirfield = 32
    case estArrTime = 34
    case crewSize = 36
    case cargoConfig = 38
    case equipConfig = 40
    case tankConfig = 42
    case basicWeight = 44
    case basicMoment = 46
    case fuelWeight = 48
    case fuelMoment = 50
    case estLandingFuelWeight = 52
    case estLandingFuelMoment = 54
    case operatingWeight = 56
    case operatingMoment = 58
    case cargoWeight = 60
    case cargoMoment = 62
    case zeroFuelWeight = 64
    case zeroFuelMoment = 66
    case zeroFuelCg = 68
    case grossWeight = 70
    case grossMoment = 72
    case grossCg = 74
    case landingWeight = 76
    case landingMoment = 78
    case landingCg = 80
    case cargoBayFsmin = 82
    case cargoBayFsmax = 84
    case cargoBayWidth = 86
    case createdAt = 88
    case createdBy = 90
    case sourceDl = 92
    case source = 94
    case origin = 96
    case origNetwork = 98
    case dataMode = 100
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 0457f578-e29c-312e-85aa-0a04a430bdd0
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Required ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: dec7a61a-cd97-4af0-b7bc-f4c3bb33341b
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var externalId: String? { let o = _accessor.offset(VTOFFSET.externalId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var externalIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.externalId.v) }
  ///  The UDL ID of the mission this record is associated with.
  ///  Example: /// Example: 412bebb6-a45e-029c-ca51-e29f8a442b12
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idMission: String? { let o = _accessor.offset(VTOFFSET.idMission.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idMissionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idMission.v) }
  ///  The mission number of the mission supporting this load plan.
  ///  Example: /// Example: AJM123456123
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var missionNumber: String? { let o = _accessor.offset(VTOFFSET.missionNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var missionNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.missionNumber.v) }
  ///  The UDL ID of the aircraft sortie this record is associated with.
  ///  Example: /// Example: 823acfbe6-f36a-157b-ef32-b47c9b589c3
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSortie: String? { let o = _accessor.offset(VTOFFSET.idSortie.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSortieSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSortie.v) }
  ///  The leg number of the mission supporting this load plan.
  ///  Example: /// Example: 200
  ///  Constraints: No constraints specified.
  public var legNum: Int32 { let o = _accessor.offset(VTOFFSET.legNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The call sign of the mission supporting this load plan.
  ///  Example: /// Example: RCH1234
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var callSign: String? { let o = _accessor.offset(VTOFFSET.callSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var callSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.callSign.v) }
  ///  The tail number of the aircraft supporting this load plan.
  ///  Example: /// Example: 77187
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var tailNumber: String? { let o = _accessor.offset(VTOFFSET.tailNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tailNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tailNumber.v) }
  ///  The Model Design Series designation of the aircraft supporting this load plan.
  ///  Example: /// Example: C17A
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var aircraftMds: String? { let o = _accessor.offset(VTOFFSET.aircraftMds.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aircraftMdsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aircraftMds.v) }
  ///  The departure International Civil Organization (ICAO) code of the departure airfield.
  ///  Example: /// Example: KCHS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var depIcao: String? { let o = _accessor.offset(VTOFFSET.depIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var depIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.depIcao.v) }
  ///  Optional identifier of departure airfield with no International Civil Organization (ICAO) code.
  ///  Example: /// Example: W99
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var depAirfield: String? { let o = _accessor.offset(VTOFFSET.depAirfield.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var depAirfieldSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.depAirfield.v) }
  ///  The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format.
  ///  Example: /// Example: 2023-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var estDepTime: String? { let o = _accessor.offset(VTOFFSET.estDepTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var estDepTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.estDepTime.v) }
  ///  The arrival International Civil Organization (ICAO) code of the landing airfield.
  ///  Example: /// Example: ETAR
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var arrIcao: String? { let o = _accessor.offset(VTOFFSET.arrIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var arrIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.arrIcao.v) }
  ///  Optional identifier of arrival airfield with no International Civil Organization (ICAO) code.
  ///  Example: /// Example: W99
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var arrAirfield: String? { let o = _accessor.offset(VTOFFSET.arrAirfield.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var arrAirfieldSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.arrAirfield.v) }
  ///  The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var estArrTime: String? { let o = _accessor.offset(VTOFFSET.estArrTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var estArrTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.estArrTime.v) }
  ///  The number of crew members on the aircraft.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var crewSize: Int32 { let o = _accessor.offset(VTOFFSET.crewSize.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.). Configuration meanings are determined by the data source.
  ///  Example: /// Example: C-1
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var cargoConfig: String? { let o = _accessor.offset(VTOFFSET.cargoConfig.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cargoConfigSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cargoConfig.v) }
  ///  Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat, etc.). Configuration meanings are determined by the data source.
  ///  Example: /// Example: Standard
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var equipConfig: String? { let o = _accessor.offset(VTOFFSET.equipConfig.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var equipConfigSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.equipConfig.v) }
  ///  Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration meanings are determined by the data source.
  ///  Example: /// Example: ER
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var tankConfig: String? { let o = _accessor.offset(VTOFFSET.tankConfig.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tankConfigSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tankConfig.v) }
  ///  The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  public var basicWeight: Double { let o = _accessor.offset(VTOFFSET.basicWeight.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The basic weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
  ///  Example: /// Example: 2500.1
  ///  Constraints: No constraints specified.
  public var basicMoment: Double { let o = _accessor.offset(VTOFFSET.basicMoment.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The weight of usable fuel on board the aircraft, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  public var fuelWeight: Double { let o = _accessor.offset(VTOFFSET.fuelWeight.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The fuel weight on board the aircraft multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
  ///  Example: /// Example: 2500.1
  ///  Constraints: No constraints specified.
  public var fuelMoment: Double { let o = _accessor.offset(VTOFFSET.fuelMoment.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The estimated weight of usable fuel upon landing, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  public var estLandingFuelWeight: Double { let o = _accessor.offset(VTOFFSET.estLandingFuelWeight.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The estimated weight of usable fuel upon landing multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
  ///  Example: /// Example: 2500.1
  ///  Constraints: No constraints specified.
  public var estLandingFuelMoment: Double { let o = _accessor.offset(VTOFFSET.estLandingFuelMoment.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The basic weight of the aircraft including passengers and equipment, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  public var operatingWeight: Double { let o = _accessor.offset(VTOFFSET.operatingWeight.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The operating weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
  ///  Example: /// Example: 2500.1
  ///  Constraints: No constraints specified.
  public var operatingMoment: Double { let o = _accessor.offset(VTOFFSET.operatingMoment.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The weight of the cargo on board the aircraft, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  public var cargoWeight: Double { let o = _accessor.offset(VTOFFSET.cargoWeight.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each individual cargo moment is the weight of the cargo multiplied by the distance between the reference datum and the cargo's center of gravity.
  ///  Example: /// Example: 2500.1
  ///  Constraints: No constraints specified.
  public var cargoMoment: Double { let o = _accessor.offset(VTOFFSET.cargoMoment.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The operating weight of the aircraft including cargo but without usable fuel, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  public var zeroFuelWeight: Double { let o = _accessor.offset(VTOFFSET.zeroFuelWeight.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The zero fuel weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
  ///  Example: /// Example: 2500.1
  ///  Constraints: No constraints specified.
  public var zeroFuelMoment: Double { let o = _accessor.offset(VTOFFSET.zeroFuelMoment.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The center of gravity of the aircraft using the zero fuel weight and zero fuel total moment, as a percentage of the mean aerodynamic chord (%MAC).
  ///  Example: /// Example: 39.5
  ///  Constraints: No constraints specified.
  public var zeroFuelCg: Double { let o = _accessor.offset(VTOFFSET.zeroFuelCg.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The total weight of the aircraft at takeoff including passengers, cargo, equipment, and usable fuel, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  public var grossWeight: Double { let o = _accessor.offset(VTOFFSET.grossWeight.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The sum of moments of all items making up the gross weight of the aircraft, in Newton-meters.
  ///  Example: /// Example: 2500.1
  ///  Constraints: No constraints specified.
  public var grossMoment: Double { let o = _accessor.offset(VTOFFSET.grossMoment.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The center of gravity of the aircraft using the gross weight and gross moment, as a percentage of the mean aerodynamic chord (%MAC).
  ///  Example: /// Example: 38.8
  ///  Constraints: No constraints specified.
  public var grossCg: Double { let o = _accessor.offset(VTOFFSET.grossCg.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The gross weight of the aircraft upon landing, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  public var landingWeight: Double { let o = _accessor.offset(VTOFFSET.landingWeight.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The sum of moments of all items making up the gross weight of the aircraft upon landing, in Newton-meters.
  ///  Example: /// Example: 2500.1
  ///  Constraints: No constraints specified.
  public var landingMoment: Double { let o = _accessor.offset(VTOFFSET.landingMoment.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The center of gravity of the aircraft using the landing weight and landing moment, as a percentage of the mean aerodynamic chord (%MAC).
  ///  Example: /// Example: 38.2
  ///  Constraints: No constraints specified.
  public var landingCg: Double { let o = _accessor.offset(VTOFFSET.landingCg.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var cargoBayFsmin: Int32 { let o = _accessor.offset(VTOFFSET.cargoBayFsmin.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
  ///  Example: /// Example: 20
  ///  Constraints: No constraints specified.
  public var cargoBayFsmax: Int32 { let o = _accessor.offset(VTOFFSET.cargoBayFsmax.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Width of the cargo bay, in meters.
  ///  Example: /// Example: 3.1
  ///  Constraints: No constraints specified.
  public var cargoBayWidth: Double { let o = _accessor.offset(VTOFFSET.cargoBayWidth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2023-03-21T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: source
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: AirLoadPlan_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : AirLoadPlan_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startAirLoadPlan_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 49) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(externalId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: externalId, at: VTOFFSET.externalId.p) }
  public static func add(idMission: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idMission, at: VTOFFSET.idMission.p) }
  public static func add(missionNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: missionNumber, at: VTOFFSET.missionNumber.p) }
  public static func add(idSortie: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSortie, at: VTOFFSET.idSortie.p) }
  public static func add(legNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: legNum, def: 0, at: VTOFFSET.legNum.p) }
  public static func add(callSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callSign, at: VTOFFSET.callSign.p) }
  public static func add(tailNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tailNumber, at: VTOFFSET.tailNumber.p) }
  public static func add(aircraftMds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aircraftMds, at: VTOFFSET.aircraftMds.p) }
  public static func add(depIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: depIcao, at: VTOFFSET.depIcao.p) }
  public static func add(depAirfield: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: depAirfield, at: VTOFFSET.depAirfield.p) }
  public static func add(estDepTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: estDepTime, at: VTOFFSET.estDepTime.p) }
  public static func add(arrIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: arrIcao, at: VTOFFSET.arrIcao.p) }
  public static func add(arrAirfield: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: arrAirfield, at: VTOFFSET.arrAirfield.p) }
  public static func add(estArrTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: estArrTime, at: VTOFFSET.estArrTime.p) }
  public static func add(crewSize: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: crewSize, def: 0, at: VTOFFSET.crewSize.p) }
  public static func add(cargoConfig: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cargoConfig, at: VTOFFSET.cargoConfig.p) }
  public static func add(equipConfig: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: equipConfig, at: VTOFFSET.equipConfig.p) }
  public static func add(tankConfig: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tankConfig, at: VTOFFSET.tankConfig.p) }
  public static func add(basicWeight: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: basicWeight, def: 0.0, at: VTOFFSET.basicWeight.p) }
  public static func add(basicMoment: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: basicMoment, def: 0.0, at: VTOFFSET.basicMoment.p) }
  public static func add(fuelWeight: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fuelWeight, def: 0.0, at: VTOFFSET.fuelWeight.p) }
  public static func add(fuelMoment: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fuelMoment, def: 0.0, at: VTOFFSET.fuelMoment.p) }
  public static func add(estLandingFuelWeight: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: estLandingFuelWeight, def: 0.0, at: VTOFFSET.estLandingFuelWeight.p) }
  public static func add(estLandingFuelMoment: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: estLandingFuelMoment, def: 0.0, at: VTOFFSET.estLandingFuelMoment.p) }
  public static func add(operatingWeight: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: operatingWeight, def: 0.0, at: VTOFFSET.operatingWeight.p) }
  public static func add(operatingMoment: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: operatingMoment, def: 0.0, at: VTOFFSET.operatingMoment.p) }
  public static func add(cargoWeight: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cargoWeight, def: 0.0, at: VTOFFSET.cargoWeight.p) }
  public static func add(cargoMoment: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cargoMoment, def: 0.0, at: VTOFFSET.cargoMoment.p) }
  public static func add(zeroFuelWeight: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: zeroFuelWeight, def: 0.0, at: VTOFFSET.zeroFuelWeight.p) }
  public static func add(zeroFuelMoment: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: zeroFuelMoment, def: 0.0, at: VTOFFSET.zeroFuelMoment.p) }
  public static func add(zeroFuelCg: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: zeroFuelCg, def: 0.0, at: VTOFFSET.zeroFuelCg.p) }
  public static func add(grossWeight: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: grossWeight, def: 0.0, at: VTOFFSET.grossWeight.p) }
  public static func add(grossMoment: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: grossMoment, def: 0.0, at: VTOFFSET.grossMoment.p) }
  public static func add(grossCg: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: grossCg, def: 0.0, at: VTOFFSET.grossCg.p) }
  public static func add(landingWeight: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: landingWeight, def: 0.0, at: VTOFFSET.landingWeight.p) }
  public static func add(landingMoment: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: landingMoment, def: 0.0, at: VTOFFSET.landingMoment.p) }
  public static func add(landingCg: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: landingCg, def: 0.0, at: VTOFFSET.landingCg.p) }
  public static func add(cargoBayFsmin: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cargoBayFsmin, def: 0, at: VTOFFSET.cargoBayFsmin.p) }
  public static func add(cargoBayFsmax: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cargoBayFsmax, def: 0, at: VTOFFSET.cargoBayFsmax.p) }
  public static func add(cargoBayWidth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cargoBayWidth, def: 0.0, at: VTOFFSET.cargoBayWidth.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: AirLoadPlan_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endAirLoadPlan_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAirLoadPlan_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    externalIdOffset externalId: Offset = Offset(),
    idMissionOffset idMission: Offset = Offset(),
    missionNumberOffset missionNumber: Offset = Offset(),
    idSortieOffset idSortie: Offset = Offset(),
    legNum: Int32 = 0,
    callSignOffset callSign: Offset = Offset(),
    tailNumberOffset tailNumber: Offset = Offset(),
    aircraftMdsOffset aircraftMds: Offset = Offset(),
    depIcaoOffset depIcao: Offset = Offset(),
    depAirfieldOffset depAirfield: Offset = Offset(),
    estDepTimeOffset estDepTime: Offset = Offset(),
    arrIcaoOffset arrIcao: Offset = Offset(),
    arrAirfieldOffset arrAirfield: Offset = Offset(),
    estArrTimeOffset estArrTime: Offset = Offset(),
    crewSize: Int32 = 0,
    cargoConfigOffset cargoConfig: Offset = Offset(),
    equipConfigOffset equipConfig: Offset = Offset(),
    tankConfigOffset tankConfig: Offset = Offset(),
    basicWeight: Double = 0.0,
    basicMoment: Double = 0.0,
    fuelWeight: Double = 0.0,
    fuelMoment: Double = 0.0,
    estLandingFuelWeight: Double = 0.0,
    estLandingFuelMoment: Double = 0.0,
    operatingWeight: Double = 0.0,
    operatingMoment: Double = 0.0,
    cargoWeight: Double = 0.0,
    cargoMoment: Double = 0.0,
    zeroFuelWeight: Double = 0.0,
    zeroFuelMoment: Double = 0.0,
    zeroFuelCg: Double = 0.0,
    grossWeight: Double = 0.0,
    grossMoment: Double = 0.0,
    grossCg: Double = 0.0,
    landingWeight: Double = 0.0,
    landingMoment: Double = 0.0,
    landingCg: Double = 0.0,
    cargoBayFsmin: Int32 = 0,
    cargoBayFsmax: Int32 = 0,
    cargoBayWidth: Double = 0.0,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: AirLoadPlan_Ingest_dataMode_Enum = .real
  ) -> Offset {
    let __start = AirLoadPlan_Ingest.startAirLoadPlan_Ingest(&fbb)
    AirLoadPlan_Ingest.add(id: id, &fbb)
    AirLoadPlan_Ingest.add(classificationMarking: classificationMarking, &fbb)
    AirLoadPlan_Ingest.add(externalId: externalId, &fbb)
    AirLoadPlan_Ingest.add(idMission: idMission, &fbb)
    AirLoadPlan_Ingest.add(missionNumber: missionNumber, &fbb)
    AirLoadPlan_Ingest.add(idSortie: idSortie, &fbb)
    AirLoadPlan_Ingest.add(legNum: legNum, &fbb)
    AirLoadPlan_Ingest.add(callSign: callSign, &fbb)
    AirLoadPlan_Ingest.add(tailNumber: tailNumber, &fbb)
    AirLoadPlan_Ingest.add(aircraftMds: aircraftMds, &fbb)
    AirLoadPlan_Ingest.add(depIcao: depIcao, &fbb)
    AirLoadPlan_Ingest.add(depAirfield: depAirfield, &fbb)
    AirLoadPlan_Ingest.add(estDepTime: estDepTime, &fbb)
    AirLoadPlan_Ingest.add(arrIcao: arrIcao, &fbb)
    AirLoadPlan_Ingest.add(arrAirfield: arrAirfield, &fbb)
    AirLoadPlan_Ingest.add(estArrTime: estArrTime, &fbb)
    AirLoadPlan_Ingest.add(crewSize: crewSize, &fbb)
    AirLoadPlan_Ingest.add(cargoConfig: cargoConfig, &fbb)
    AirLoadPlan_Ingest.add(equipConfig: equipConfig, &fbb)
    AirLoadPlan_Ingest.add(tankConfig: tankConfig, &fbb)
    AirLoadPlan_Ingest.add(basicWeight: basicWeight, &fbb)
    AirLoadPlan_Ingest.add(basicMoment: basicMoment, &fbb)
    AirLoadPlan_Ingest.add(fuelWeight: fuelWeight, &fbb)
    AirLoadPlan_Ingest.add(fuelMoment: fuelMoment, &fbb)
    AirLoadPlan_Ingest.add(estLandingFuelWeight: estLandingFuelWeight, &fbb)
    AirLoadPlan_Ingest.add(estLandingFuelMoment: estLandingFuelMoment, &fbb)
    AirLoadPlan_Ingest.add(operatingWeight: operatingWeight, &fbb)
    AirLoadPlan_Ingest.add(operatingMoment: operatingMoment, &fbb)
    AirLoadPlan_Ingest.add(cargoWeight: cargoWeight, &fbb)
    AirLoadPlan_Ingest.add(cargoMoment: cargoMoment, &fbb)
    AirLoadPlan_Ingest.add(zeroFuelWeight: zeroFuelWeight, &fbb)
    AirLoadPlan_Ingest.add(zeroFuelMoment: zeroFuelMoment, &fbb)
    AirLoadPlan_Ingest.add(zeroFuelCg: zeroFuelCg, &fbb)
    AirLoadPlan_Ingest.add(grossWeight: grossWeight, &fbb)
    AirLoadPlan_Ingest.add(grossMoment: grossMoment, &fbb)
    AirLoadPlan_Ingest.add(grossCg: grossCg, &fbb)
    AirLoadPlan_Ingest.add(landingWeight: landingWeight, &fbb)
    AirLoadPlan_Ingest.add(landingMoment: landingMoment, &fbb)
    AirLoadPlan_Ingest.add(landingCg: landingCg, &fbb)
    AirLoadPlan_Ingest.add(cargoBayFsmin: cargoBayFsmin, &fbb)
    AirLoadPlan_Ingest.add(cargoBayFsmax: cargoBayFsmax, &fbb)
    AirLoadPlan_Ingest.add(cargoBayWidth: cargoBayWidth, &fbb)
    AirLoadPlan_Ingest.add(createdAt: createdAt, &fbb)
    AirLoadPlan_Ingest.add(createdBy: createdBy, &fbb)
    AirLoadPlan_Ingest.add(sourceDl: sourceDl, &fbb)
    AirLoadPlan_Ingest.add(source: source, &fbb)
    AirLoadPlan_Ingest.add(origin: origin, &fbb)
    AirLoadPlan_Ingest.add(origNetwork: origNetwork, &fbb)
    AirLoadPlan_Ingest.add(dataMode: dataMode, &fbb)
    return AirLoadPlan_Ingest.endAirLoadPlan_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.externalId.p, fieldName: "externalId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idMission.p, fieldName: "idMission", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.missionNumber.p, fieldName: "missionNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSortie.p, fieldName: "idSortie", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.legNum.p, fieldName: "legNum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.callSign.p, fieldName: "callSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tailNumber.p, fieldName: "tailNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aircraftMds.p, fieldName: "aircraftMds", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.depIcao.p, fieldName: "depIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.depAirfield.p, fieldName: "depAirfield", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.estDepTime.p, fieldName: "estDepTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.arrIcao.p, fieldName: "arrIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.arrAirfield.p, fieldName: "arrAirfield", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.estArrTime.p, fieldName: "estArrTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.crewSize.p, fieldName: "crewSize", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.cargoConfig.p, fieldName: "cargoConfig", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.equipConfig.p, fieldName: "equipConfig", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tankConfig.p, fieldName: "tankConfig", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.basicWeight.p, fieldName: "basicWeight", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.basicMoment.p, fieldName: "basicMoment", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fuelWeight.p, fieldName: "fuelWeight", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fuelMoment.p, fieldName: "fuelMoment", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.estLandingFuelWeight.p, fieldName: "estLandingFuelWeight", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.estLandingFuelMoment.p, fieldName: "estLandingFuelMoment", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.operatingWeight.p, fieldName: "operatingWeight", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.operatingMoment.p, fieldName: "operatingMoment", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.cargoWeight.p, fieldName: "cargoWeight", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.cargoMoment.p, fieldName: "cargoMoment", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.zeroFuelWeight.p, fieldName: "zeroFuelWeight", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.zeroFuelMoment.p, fieldName: "zeroFuelMoment", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.zeroFuelCg.p, fieldName: "zeroFuelCg", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.grossWeight.p, fieldName: "grossWeight", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.grossMoment.p, fieldName: "grossMoment", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.grossCg.p, fieldName: "grossCg", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.landingWeight.p, fieldName: "landingWeight", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.landingMoment.p, fieldName: "landingMoment", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.landingCg.p, fieldName: "landingCg", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.cargoBayFsmin.p, fieldName: "cargoBayFsmin", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.cargoBayFsmax.p, fieldName: "cargoBayFsmax", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.cargoBayWidth.p, fieldName: "cargoBayWidth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: AirLoadPlan_Ingest_dataMode_Enum.self)
    _v.finish()
  }
}

