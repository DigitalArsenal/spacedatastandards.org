// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum EphemerisSet_Abridged_referenceFrame_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case j2000 = 0
  ///  No description available.
  case efgTdr = 1
  ///  No description available.
  case ecrEcef = 2
  ///  No description available.
  case teme = 3
  ///  No description available.
  case itrf = 4
  ///  No description available.
  case gcrf = 5

  public static var max: EphemerisSet_Abridged_referenceFrame_Enum { return .gcrf }
  public static var min: EphemerisSet_Abridged_referenceFrame_Enum { return .j2000 }
}


public enum EphemerisSet_Abridged_covReferenceFrame_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case j2000 = 0
  ///  No description available.
  case uvw = 1

  public static var max: EphemerisSet_Abridged_covReferenceFrame_Enum { return .uvw }
  public static var min: EphemerisSet_Abridged_covReferenceFrame_Enum { return .j2000 }
}


public enum EphemerisSet_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: EphemerisSet_Abridged_dataMode_Enum { return .exercise }
  public static var min: EphemerisSet_Abridged_dataMode_Enum { return .real }
}


///  /// EphemerisSet represents a wrapper or collection of Ephemeris 'points' and meta data indicating the specifics of the propagation of an on-orbit object. Ephemeris is typically distributed in a flat file containing details of the ephemeris generation as well as a large collection of individual points at varying time steps. EphemerisSet is analogous to this flat file.
public struct EphemerisSet_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EPHE" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EphemerisSet_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idOnOrbit = 8
    case origObjectId = 10
    case pointStartTime = 12
    case usableStartTime = 14
    case pointEndTime = 16
    case usableEndTime = 18
    case stepSize = 20
    case numPoints = 22
    case type = 24
    case pedigree = 26
    case category = 28
    case idStateVector = 30
    case hasMnvr = 32
    case idManeuvers = 34
    case hasCov = 36
    case hasAccel = 38
    case centBody = 40
    case integrator = 42
    case geopotentialModel = 44
    case dragModel = 46
    case lunarSolar = 48
    case solidEarthTides = 50
    case bDot = 52
    case edr = 54
    case interpolation = 56
    case interpolationDegree = 58
    case filename = 60
    case comments = 62
    case description = 64
    case descriptor = 66
    case referenceFrame = 68
    case covReferenceFrame = 70
    case createdAt = 72
    case createdBy = 74
    case source = 76
    case origin = 78
    case dataMode = 80
    case satNo = 82
    case transactionId = 84
    case origNetwork = 86
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: EPHEMERISSET-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the primary satellite on-orbit object.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Start time/first time point of the ephemeris, in ISO 8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var pointStartTime: String? { let o = _accessor.offset(VTOFFSET.pointStartTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pointStartTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pointStartTime.v) }
  ///  Optional start time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:10:00.123456Z
  ///  Constraints: No constraints specified.
  public var usableStartTime: String? { let o = _accessor.offset(VTOFFSET.usableStartTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var usableStartTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.usableStartTime.v) }
  ///  End time/last time point of the ephemeris, in ISO 8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var pointEndTime: String? { let o = _accessor.offset(VTOFFSET.pointEndTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pointEndTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pointEndTime.v) }
  ///  Optional end time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2018-01-01T20:50:00.123456Z
  ///  Constraints: No constraints specified.
  public var usableEndTime: String? { let o = _accessor.offset(VTOFFSET.usableEndTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var usableEndTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.usableEndTime.v) }
  ///  Ephemeris step size, in seconds.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var stepSize: Int32 { let o = _accessor.offset(VTOFFSET.stepSize.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of points contained in the ephemeris.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var numPoints: Int32 { let o = _accessor.offset(VTOFFSET.numPoints.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The type/purpose of the ephemeris (e.g., CALIBRATION, LAUNCH, MNVR_PLAN, ROUTINE, SCREENING).
  ///  Example: /// Example: LAUNCH
  ///  Constraints: Minimum length = 1, Maximum length = 24
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  The pedigree of the ephemeris or source data used for ephemeris generation (e.g.  GPS, SLR, RANGING, PROPAGATED, HYBRID).
  ///  Example: /// Example: PROPAGATED
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var pedigree: String? { let o = _accessor.offset(VTOFFSET.pedigree.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pedigreeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pedigree.v) }
  ///  The source category of the ephemeris (e.g. OWNER_OPERATOR, ANALYST, EXTERNAL).
  ///  Example: /// Example: ANALYST
  ///  Constraints: Minimum length = 1, Maximum length = 24
  public var category: String? { let o = _accessor.offset(VTOFFSET.category.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var categorySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.category.v) }
  ///  ID of the State Vector used to generate the ephemeris.
  ///  Example: /// Example: STATEVECTOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idStateVector: String? { let o = _accessor.offset(VTOFFSET.idStateVector.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idStateVectorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idStateVector.v) }
  ///  Boolean indicating whether maneuver(s) are incorporated into the ephemeris.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var hasMnvr: Bool { let o = _accessor.offset(VTOFFSET.hasMnvr.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Array of the maneuver IDs of all maneuvers incorporated in the ephemeris.
  ///  Example: /// Example: ['EXAMPLE_ID1', 'EXAMPLE_ID2']
  ///  Constraints: No constraints specified.
  public var hasIdManeuvers: Bool { let o = _accessor.offset(VTOFFSET.idManeuvers.v); return o == 0 ? false : true }
  public var idManeuversCount: Int32 { let o = _accessor.offset(VTOFFSET.idManeuvers.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func idManeuvers(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.idManeuvers.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Boolean indicating whether covariance data is provided with the ephemeris.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var hasCov: Bool { let o = _accessor.offset(VTOFFSET.hasCov.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Boolean indicating whether acceleration data is provided with the ephemeris.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var hasAccel: Bool { let o = _accessor.offset(VTOFFSET.hasAccel.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The Central Body of the ephemeris.  Assumed to be Earth, unless otherwise indicated.
  ///  Example: /// Example: Earth
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var centBody: String? { let o = _accessor.offset(VTOFFSET.centBody.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var centBodySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.centBody.v) }
  ///  Integrator used in ephemeris generation (e.g. RK7(8), RK8(9), COWELL, TWO-BODY).
  ///  Example: /// Example: COWELL
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var integrator: String? { let o = _accessor.offset(VTOFFSET.integrator.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var integratorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.integrator.v) }
  ///  Geopotential model used in ephemeris generation (e.g. EGM-96, WGS-84, WGS-72, JGM-2, GEM-T3), including mm degree zonals, nn degree/order tesserals (e.g. EGM-96 24Z,24T).
  ///  Example: /// Example: GEM-T3
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var geopotentialModel: String? { let o = _accessor.offset(VTOFFSET.geopotentialModel.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var geopotentialModelSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.geopotentialModel.v) }
  ///  Drag model used in ephemeris generation (e.g. JAC70, MSIS90, NONE, etc.).
  ///  Example: /// Example: JAC70
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var dragModel: String? { let o = _accessor.offset(VTOFFSET.dragModel.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dragModelSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dragModel.v) }
  ///  Boolean indicating use of lunar/solar data in ephemeris generation.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var lunarSolar: Bool { let o = _accessor.offset(VTOFFSET.lunarSolar.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Boolean indicating use of solid earth tide data in ephemeris generation.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var solidEarthTides: Bool { let o = _accessor.offset(VTOFFSET.solidEarthTides.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  First derivative of ballistic coefficient (m^2/kg-s).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var bDot: Double { let o = _accessor.offset(VTOFFSET.bDot.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Model parameter value for energy dissipation rate (EDR), expressed in w/kg.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var edr: Double { let o = _accessor.offset(VTOFFSET.edr.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The recommended interpolation method for the ephemeris data.
  ///  Example: /// Example: LINEAR
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var interpolation: String? { let o = _accessor.offset(VTOFFSET.interpolation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var interpolationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.interpolation.v) }
  ///  The recommended interpolation degree for the ephemeris data.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var interpolationDegree: Int32 { let o = _accessor.offset(VTOFFSET.interpolationDegree.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Filename of the raw file used to provide the ephemeris data including filetype extension, if applicable. This file may be retrieved using the 'getFile' operation as specified in the 'EphemerisSet' OpenAPI docs.
  ///  Example: /// Example: Example file name
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var filename: String? { let o = _accessor.offset(VTOFFSET.filename.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var filenameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.filename.v) }
  ///  Additional source provided comments associated with the ephemeris.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var comments: String? { let o = _accessor.offset(VTOFFSET.comments.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var commentsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.comments.v) }
  ///  Notes/description of the provided ephemeris. A value of DSTOP signifies the ephemeris were generated using the last observation available.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var description: String? { let o = _accessor.offset(VTOFFSET.description.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.description.v) }
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: Example descriptor
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var descriptor: String? { let o = _accessor.offset(VTOFFSET.descriptor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.descriptor.v) }
  ///  The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var referenceFrame: EphemerisSet_Abridged_referenceFrame_Enum { let o = _accessor.offset(VTOFFSET.referenceFrame.v); return o == 0 ? .j2000 : EphemerisSet_Abridged_referenceFrame_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .j2000 }
  ///  The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var covReferenceFrame: EphemerisSet_Abridged_covReferenceFrame_Enum { let o = _accessor.offset(VTOFFSET.covReferenceFrame.v); return o == 0 ? .j2000 : EphemerisSet_Abridged_covReferenceFrame_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .j2000 }
  ///  Time the row was created in the database, in UTC.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: EphemerisSet_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : EphemerisSet_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var transactionId: String? { let o = _accessor.offset(VTOFFSET.transactionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transactionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transactionId.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startEphemerisSet_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 42) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(pointStartTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pointStartTime, at: VTOFFSET.pointStartTime.p) }
  public static func add(usableStartTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usableStartTime, at: VTOFFSET.usableStartTime.p) }
  public static func add(pointEndTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pointEndTime, at: VTOFFSET.pointEndTime.p) }
  public static func add(usableEndTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usableEndTime, at: VTOFFSET.usableEndTime.p) }
  public static func add(stepSize: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: stepSize, def: 0, at: VTOFFSET.stepSize.p) }
  public static func add(numPoints: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numPoints, def: 0, at: VTOFFSET.numPoints.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(pedigree: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pedigree, at: VTOFFSET.pedigree.p) }
  public static func add(category: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: category, at: VTOFFSET.category.p) }
  public static func add(idStateVector: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idStateVector, at: VTOFFSET.idStateVector.p) }
  public static func add(hasMnvr: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hasMnvr, def: false,
   at: VTOFFSET.hasMnvr.p) }
  public static func addVectorOf(idManeuvers: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idManeuvers, at: VTOFFSET.idManeuvers.p) }
  public static func add(hasCov: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hasCov, def: false,
   at: VTOFFSET.hasCov.p) }
  public static func add(hasAccel: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hasAccel, def: false,
   at: VTOFFSET.hasAccel.p) }
  public static func add(centBody: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: centBody, at: VTOFFSET.centBody.p) }
  public static func add(integrator: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: integrator, at: VTOFFSET.integrator.p) }
  public static func add(geopotentialModel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialModel, at: VTOFFSET.geopotentialModel.p) }
  public static func add(dragModel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dragModel, at: VTOFFSET.dragModel.p) }
  public static func add(lunarSolar: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lunarSolar, def: false,
   at: VTOFFSET.lunarSolar.p) }
  public static func add(solidEarthTides: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: solidEarthTides, def: false,
   at: VTOFFSET.solidEarthTides.p) }
  public static func add(bDot: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bDot, def: 0.0, at: VTOFFSET.bDot.p) }
  public static func add(edr: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: edr, def: 0.0, at: VTOFFSET.edr.p) }
  public static func add(interpolation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: interpolation, at: VTOFFSET.interpolation.p) }
  public static func add(interpolationDegree: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: interpolationDegree, def: 0, at: VTOFFSET.interpolationDegree.p) }
  public static func add(filename: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: filename, at: VTOFFSET.filename.p) }
  public static func add(comments: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: comments, at: VTOFFSET.comments.p) }
  public static func add(description: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: description, at: VTOFFSET.description.p) }
  public static func add(descriptor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: descriptor, at: VTOFFSET.descriptor.p) }
  public static func add(referenceFrame: EphemerisSet_Abridged_referenceFrame_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: referenceFrame.rawValue, def: 0, at: VTOFFSET.referenceFrame.p) }
  public static func add(covReferenceFrame: EphemerisSet_Abridged_covReferenceFrame_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: covReferenceFrame.rawValue, def: 0, at: VTOFFSET.covReferenceFrame.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: EphemerisSet_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(transactionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transactionId, at: VTOFFSET.transactionId.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endEphemerisSet_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEphemerisSet_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    origObjectIdOffset origObjectId: Offset = Offset(),
    pointStartTimeOffset pointStartTime: Offset = Offset(),
    usableStartTimeOffset usableStartTime: Offset = Offset(),
    pointEndTimeOffset pointEndTime: Offset = Offset(),
    usableEndTimeOffset usableEndTime: Offset = Offset(),
    stepSize: Int32 = 0,
    numPoints: Int32 = 0,
    typeOffset type: Offset = Offset(),
    pedigreeOffset pedigree: Offset = Offset(),
    categoryOffset category: Offset = Offset(),
    idStateVectorOffset idStateVector: Offset = Offset(),
    hasMnvr: Bool = false,
    idManeuversVectorOffset idManeuvers: Offset = Offset(),
    hasCov: Bool = false,
    hasAccel: Bool = false,
    centBodyOffset centBody: Offset = Offset(),
    integratorOffset integrator: Offset = Offset(),
    geopotentialModelOffset geopotentialModel: Offset = Offset(),
    dragModelOffset dragModel: Offset = Offset(),
    lunarSolar: Bool = false,
    solidEarthTides: Bool = false,
    bDot: Double = 0.0,
    edr: Double = 0.0,
    interpolationOffset interpolation: Offset = Offset(),
    interpolationDegree: Int32 = 0,
    filenameOffset filename: Offset = Offset(),
    commentsOffset comments: Offset = Offset(),
    descriptionOffset description: Offset = Offset(),
    descriptorOffset descriptor: Offset = Offset(),
    referenceFrame: EphemerisSet_Abridged_referenceFrame_Enum = .j2000,
    covReferenceFrame: EphemerisSet_Abridged_covReferenceFrame_Enum = .j2000,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: EphemerisSet_Abridged_dataMode_Enum = .real,
    satNo: Int32 = 0,
    transactionIdOffset transactionId: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = EphemerisSet_Abridged.startEphemerisSet_Abridged(&fbb)
    EphemerisSet_Abridged.add(id: id, &fbb)
    EphemerisSet_Abridged.add(classificationMarking: classificationMarking, &fbb)
    EphemerisSet_Abridged.add(idOnOrbit: idOnOrbit, &fbb)
    EphemerisSet_Abridged.add(origObjectId: origObjectId, &fbb)
    EphemerisSet_Abridged.add(pointStartTime: pointStartTime, &fbb)
    EphemerisSet_Abridged.add(usableStartTime: usableStartTime, &fbb)
    EphemerisSet_Abridged.add(pointEndTime: pointEndTime, &fbb)
    EphemerisSet_Abridged.add(usableEndTime: usableEndTime, &fbb)
    EphemerisSet_Abridged.add(stepSize: stepSize, &fbb)
    EphemerisSet_Abridged.add(numPoints: numPoints, &fbb)
    EphemerisSet_Abridged.add(type: type, &fbb)
    EphemerisSet_Abridged.add(pedigree: pedigree, &fbb)
    EphemerisSet_Abridged.add(category: category, &fbb)
    EphemerisSet_Abridged.add(idStateVector: idStateVector, &fbb)
    EphemerisSet_Abridged.add(hasMnvr: hasMnvr, &fbb)
    EphemerisSet_Abridged.addVectorOf(idManeuvers: idManeuvers, &fbb)
    EphemerisSet_Abridged.add(hasCov: hasCov, &fbb)
    EphemerisSet_Abridged.add(hasAccel: hasAccel, &fbb)
    EphemerisSet_Abridged.add(centBody: centBody, &fbb)
    EphemerisSet_Abridged.add(integrator: integrator, &fbb)
    EphemerisSet_Abridged.add(geopotentialModel: geopotentialModel, &fbb)
    EphemerisSet_Abridged.add(dragModel: dragModel, &fbb)
    EphemerisSet_Abridged.add(lunarSolar: lunarSolar, &fbb)
    EphemerisSet_Abridged.add(solidEarthTides: solidEarthTides, &fbb)
    EphemerisSet_Abridged.add(bDot: bDot, &fbb)
    EphemerisSet_Abridged.add(edr: edr, &fbb)
    EphemerisSet_Abridged.add(interpolation: interpolation, &fbb)
    EphemerisSet_Abridged.add(interpolationDegree: interpolationDegree, &fbb)
    EphemerisSet_Abridged.add(filename: filename, &fbb)
    EphemerisSet_Abridged.add(comments: comments, &fbb)
    EphemerisSet_Abridged.add(description: description, &fbb)
    EphemerisSet_Abridged.add(descriptor: descriptor, &fbb)
    EphemerisSet_Abridged.add(referenceFrame: referenceFrame, &fbb)
    EphemerisSet_Abridged.add(covReferenceFrame: covReferenceFrame, &fbb)
    EphemerisSet_Abridged.add(createdAt: createdAt, &fbb)
    EphemerisSet_Abridged.add(createdBy: createdBy, &fbb)
    EphemerisSet_Abridged.add(source: source, &fbb)
    EphemerisSet_Abridged.add(origin: origin, &fbb)
    EphemerisSet_Abridged.add(dataMode: dataMode, &fbb)
    EphemerisSet_Abridged.add(satNo: satNo, &fbb)
    EphemerisSet_Abridged.add(transactionId: transactionId, &fbb)
    EphemerisSet_Abridged.add(origNetwork: origNetwork, &fbb)
    return EphemerisSet_Abridged.endEphemerisSet_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pointStartTime.p, fieldName: "pointStartTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.usableStartTime.p, fieldName: "usableStartTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pointEndTime.p, fieldName: "pointEndTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.usableEndTime.p, fieldName: "usableEndTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.stepSize.p, fieldName: "stepSize", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numPoints.p, fieldName: "numPoints", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pedigree.p, fieldName: "pedigree", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.category.p, fieldName: "category", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idStateVector.p, fieldName: "idStateVector", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.hasMnvr.p, fieldName: "hasMnvr", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.idManeuvers.p, fieldName: "idManeuvers", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.hasCov.p, fieldName: "hasCov", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.hasAccel.p, fieldName: "hasAccel", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.centBody.p, fieldName: "centBody", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.integrator.p, fieldName: "integrator", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.geopotentialModel.p, fieldName: "geopotentialModel", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dragModel.p, fieldName: "dragModel", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lunarSolar.p, fieldName: "lunarSolar", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.solidEarthTides.p, fieldName: "solidEarthTides", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.bDot.p, fieldName: "bDot", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.edr.p, fieldName: "edr", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.interpolation.p, fieldName: "interpolation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.interpolationDegree.p, fieldName: "interpolationDegree", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.filename.p, fieldName: "filename", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.comments.p, fieldName: "comments", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.description.p, fieldName: "description", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.descriptor.p, fieldName: "descriptor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.referenceFrame.p, fieldName: "referenceFrame", required: false, type: EphemerisSet_Abridged_referenceFrame_Enum.self)
    try _v.visit(field: VTOFFSET.covReferenceFrame.p, fieldName: "covReferenceFrame", required: false, type: EphemerisSet_Abridged_covReferenceFrame_Enum.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: EphemerisSet_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.transactionId.p, fieldName: "transactionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

