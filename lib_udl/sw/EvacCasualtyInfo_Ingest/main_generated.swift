// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Identity and medical information on the patient to be evacuated.
public struct EvacCasualtyInfo_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EVAC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EvacCasualtyInfo_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case priority = 4
    case evacType = 6
    case casualtyType = 8
    case bodyPart = 10
    case contamType = 12
    case specMedEquip = 14
    case casualtyKey = 16
    case patientStatus = 18
    case patientIdentity = 20
    case nationality = 22
    case payGrade = 24
    case name = 26
    case age = 28
    case gender = 30
    case last4Ssn = 32
    case bloodType = 34
    case service = 36
    case callSign = 38
    case occSpeciality = 40
    case burialLocation = 42
    case collectionPoint = 44
    case careProviderUrn = 46
    case dispositionType = 48
    case disposition = 50
    case reportGen = 52
    case reportTime = 54
    case comments = 56
    case etiology = 58
    case treatment = 60
    case vitalSignData = 62
    case healthState = 64
    case condition = 66
    case medication = 68
    case injury = 70
    case allergy = 72
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE, URGENT SURGERY, CONVENIENCE).
  ///  Example: /// Example: ROUTINE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var priority: String? { let o = _accessor.offset(VTOFFSET.priority.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var prioritySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.priority.v) }
  ///  The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
  ///  Example: /// Example: GROUND
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var evacType: String? { let o = _accessor.offset(VTOFFSET.evacType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var evacTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.evacType.v) }
  ///  The type of medical issue resulting in the need to evacuate the patient (NON BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION, BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION, DENIAL, COMBAT STRESS).
  ///  Example: /// Example: DENTAL
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var casualtyType: String? { let o = _accessor.offset(VTOFFSET.casualtyType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var casualtyTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.casualtyType.v) }
  ///  The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES, BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY PART).
  ///  Example: /// Example: FACE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var bodyPart: String? { let o = _accessor.offset(VTOFFSET.bodyPart.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var bodyPartSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.bodyPart.v) }
  ///  The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL, CHEMICAL).
  ///  Example: /// Example: NONE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var contamType: String? { let o = _accessor.offset(VTOFFSET.contamType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var contamTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.contamType.v) }
  ///  Array specifying if any special equipment is need for each of the evacuation of this patient  (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
  ///  Example: /// Example: ['OXYGEN', 'HOIST']
  ///  Constraints: No constraints specified.
  public var hasSpecMedEquip: Bool { let o = _accessor.offset(VTOFFSET.specMedEquip.v); return o == 0 ? false : true }
  public var specMedEquipCount: Int32 { let o = _accessor.offset(VTOFFSET.specMedEquip.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func specMedEquip(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.specMedEquip.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Optional casualty key.
  ///  Example: /// Example: casualty-007
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var casualtyKey: String? { let o = _accessor.offset(VTOFFSET.casualtyKey.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var casualtyKeySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.casualtyKey.v) }
  ///  The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US CIVILIAN, ENEMY POW).
  ///  Example: /// Example: US CIVILIAN
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var patientStatus: String? { let o = _accessor.offset(VTOFFSET.patientStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var patientStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.patientStatus.v) }
  ///  The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
  ///  Example: /// Example: FRIEND CIVILIAN
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var patientIdentity: String? { let o = _accessor.offset(VTOFFSET.patientIdentity.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var patientIdentitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.patientIdentity.v) }
  ///  The country code indicating the citizenship of the patient.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var nationality: String? { let o = _accessor.offset(VTOFFSET.nationality.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nationalitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.nationality.v) }
  ///  The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4, O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3, E-2, E-1, NONE, CIVILIAN).
  ///  Example: /// Example: CIVILIAN
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var payGrade: String? { let o = _accessor.offset(VTOFFSET.payGrade.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var payGradeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.payGrade.v) }
  ///  The patient common or legal name.
  ///  Example: /// Example: John Smith
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  The patient age, in years.
  ///  Example: /// Example: 35
  ///  Constraints: No constraints specified.
  public var age: Int32 { let o = _accessor.offset(VTOFFSET.age.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The patient sex (MALE, FEMALE).
  ///  Example: /// Example: MALE
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var gender: String? { let o = _accessor.offset(VTOFFSET.gender.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var genderSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.gender.v) }
  ///  Last 4 characters of the patient social security code, or equivalent.
  ///  Example: /// Example: 1234
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var last4Ssn: String? { let o = _accessor.offset(VTOFFSET.last4Ssn.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var last4SsnSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.last4Ssn.v) }
  ///  The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O NEG).
  ///  Example: /// Example: O NEG
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var bloodType: String? { let o = _accessor.offset(VTOFFSET.bloodType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var bloodTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.bloodType.v) }
  ///  The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR, UNKNOWN SERVICE).
  ///  Example: /// Example: CIV
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var service: String? { let o = _accessor.offset(VTOFFSET.service.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var serviceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.service.v) }
  ///  The call sign of this patient.
  ///  Example: /// Example: SHARK
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var callSign: String? { let o = _accessor.offset(VTOFFSET.callSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var callSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.callSign.v) }
  ///  The career field of this patient.
  ///  Example: /// Example: Healthcare
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var occSpeciality: String? { let o = _accessor.offset(VTOFFSET.occSpeciality.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var occSpecialitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.occSpeciality.v) }
  ///  Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the burial location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  ///  Example: /// Example: [-33.123, 150.33, 0.24]
  ///  Constraints: No constraints specified.
  public var hasBurialLocation: Bool { let o = _accessor.offset(VTOFFSET.burialLocation.v); return o == 0 ? false : true }
  public var burialLocationCount: Int32 { let o = _accessor.offset(VTOFFSET.burialLocation.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func burialLocation(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.burialLocation.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the collection point.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  ///  Example: /// Example: [12.44, 122.55, 0.98]
  ///  Constraints: No constraints specified.
  public var hasCollectionPoint: Bool { let o = _accessor.offset(VTOFFSET.collectionPoint.v); return o == 0 ? false : true }
  public var collectionPointCount: Int32 { let o = _accessor.offset(VTOFFSET.collectionPoint.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func collectionPoint(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.collectionPoint.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Unique identifier for the patient care provider.
  ///  Example: /// Example: CARE_PROVIDER-1
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var careProviderUrn: String? { let o = _accessor.offset(VTOFFSET.careProviderUrn.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var careProviderUrnSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.careProviderUrn.v) }
  ///  The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
  ///  Example: /// Example: EVACUATE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var dispositionType: String? { let o = _accessor.offset(VTOFFSET.dispositionType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dispositionTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dispositionType.v) }
  ///  The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE WOUNDED, EVACUATE DECEASED, INTERRED).
  ///  Example: /// Example: EVACUATE WOUNDED
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var disposition: String? { let o = _accessor.offset(VTOFFSET.disposition.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dispositionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.disposition.v) }
  ///  The method used to generate this medevac report (DEVICE, GROUND COMBAT PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
  ///  Example: /// Example: DEVICE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var reportGen: String? { let o = _accessor.offset(VTOFFSET.reportGen.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reportGenSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reportGen.v) }
  ///  Datetime of the compiling of the patients casualty report, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-10-15T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var reportTime: String? { let o = _accessor.offset(VTOFFSET.reportTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reportTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reportTime.v) }
  ///  Additional comments on the  patient's casualty information.
  ///  Example: /// Example: Comments relating to this casualty info.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var comments: String? { let o = _accessor.offset(VTOFFSET.comments.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var commentsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.comments.v) }
  ///  Medical condition causation information.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasEtiology: Bool { let o = _accessor.offset(VTOFFSET.etiology.v); return o == 0 ? false : true }
  public var etiologyCount: Int32 { let o = _accessor.offset(VTOFFSET.etiology.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func etiology(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.etiology.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Treatment information.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasTreatment: Bool { let o = _accessor.offset(VTOFFSET.treatment.v); return o == 0 ? false : true }
  public var treatmentCount: Int32 { let o = _accessor.offset(VTOFFSET.treatment.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func treatment(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.treatment.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Information obtained for vital signs.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasVitalSignData: Bool { let o = _accessor.offset(VTOFFSET.vitalSignData.v); return o == 0 ? false : true }
  public var vitalSignDataCount: Int32 { let o = _accessor.offset(VTOFFSET.vitalSignData.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func vitalSignData(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.vitalSignData.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Health state information.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasHealthState: Bool { let o = _accessor.offset(VTOFFSET.healthState.v); return o == 0 ? false : true }
  public var healthStateCount: Int32 { let o = _accessor.offset(VTOFFSET.healthState.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func healthState(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.healthState.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Health condition information.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasCondition: Bool { let o = _accessor.offset(VTOFFSET.condition.v); return o == 0 ? false : true }
  public var conditionCount: Int32 { let o = _accessor.offset(VTOFFSET.condition.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func condition(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.condition.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Medication specifics.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasMedication: Bool { let o = _accessor.offset(VTOFFSET.medication.v); return o == 0 ? false : true }
  public var medicationCount: Int32 { let o = _accessor.offset(VTOFFSET.medication.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func medication(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.medication.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Injury specifics.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasInjury: Bool { let o = _accessor.offset(VTOFFSET.injury.v); return o == 0 ? false : true }
  public var injuryCount: Int32 { let o = _accessor.offset(VTOFFSET.injury.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func injury(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.injury.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Allergy information.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasAllergy: Bool { let o = _accessor.offset(VTOFFSET.allergy.v); return o == 0 ? false : true }
  public var allergyCount: Int32 { let o = _accessor.offset(VTOFFSET.allergy.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func allergy(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.allergy.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startEvacCasualtyInfo_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 35) }
  public static func add(priority: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: priority, at: VTOFFSET.priority.p) }
  public static func add(evacType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: evacType, at: VTOFFSET.evacType.p) }
  public static func add(casualtyType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: casualtyType, at: VTOFFSET.casualtyType.p) }
  public static func add(bodyPart: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: bodyPart, at: VTOFFSET.bodyPart.p) }
  public static func add(contamType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: contamType, at: VTOFFSET.contamType.p) }
  public static func addVectorOf(specMedEquip: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: specMedEquip, at: VTOFFSET.specMedEquip.p) }
  public static func add(casualtyKey: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: casualtyKey, at: VTOFFSET.casualtyKey.p) }
  public static func add(patientStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: patientStatus, at: VTOFFSET.patientStatus.p) }
  public static func add(patientIdentity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: patientIdentity, at: VTOFFSET.patientIdentity.p) }
  public static func add(nationality: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: nationality, at: VTOFFSET.nationality.p) }
  public static func add(payGrade: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: payGrade, at: VTOFFSET.payGrade.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(age: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: age, def: 0, at: VTOFFSET.age.p) }
  public static func add(gender: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: gender, at: VTOFFSET.gender.p) }
  public static func add(last4Ssn: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: last4Ssn, at: VTOFFSET.last4Ssn.p) }
  public static func add(bloodType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: bloodType, at: VTOFFSET.bloodType.p) }
  public static func add(service: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: service, at: VTOFFSET.service.p) }
  public static func add(callSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callSign, at: VTOFFSET.callSign.p) }
  public static func add(occSpeciality: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: occSpeciality, at: VTOFFSET.occSpeciality.p) }
  public static func addVectorOf(burialLocation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: burialLocation, at: VTOFFSET.burialLocation.p) }
  public static func addVectorOf(collectionPoint: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: collectionPoint, at: VTOFFSET.collectionPoint.p) }
  public static func add(careProviderUrn: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: careProviderUrn, at: VTOFFSET.careProviderUrn.p) }
  public static func add(dispositionType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dispositionType, at: VTOFFSET.dispositionType.p) }
  public static func add(disposition: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: disposition, at: VTOFFSET.disposition.p) }
  public static func add(reportGen: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reportGen, at: VTOFFSET.reportGen.p) }
  public static func add(reportTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reportTime, at: VTOFFSET.reportTime.p) }
  public static func add(comments: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: comments, at: VTOFFSET.comments.p) }
  public static func addVectorOf(etiology: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: etiology, at: VTOFFSET.etiology.p) }
  public static func addVectorOf(treatment: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: treatment, at: VTOFFSET.treatment.p) }
  public static func addVectorOf(vitalSignData: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vitalSignData, at: VTOFFSET.vitalSignData.p) }
  public static func addVectorOf(healthState: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: healthState, at: VTOFFSET.healthState.p) }
  public static func addVectorOf(condition: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: condition, at: VTOFFSET.condition.p) }
  public static func addVectorOf(medication: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: medication, at: VTOFFSET.medication.p) }
  public static func addVectorOf(injury: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: injury, at: VTOFFSET.injury.p) }
  public static func addVectorOf(allergy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: allergy, at: VTOFFSET.allergy.p) }
  public static func endEvacCasualtyInfo_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEvacCasualtyInfo_Ingest(
    _ fbb: inout FlatBufferBuilder,
    priorityOffset priority: Offset = Offset(),
    evacTypeOffset evacType: Offset = Offset(),
    casualtyTypeOffset casualtyType: Offset = Offset(),
    bodyPartOffset bodyPart: Offset = Offset(),
    contamTypeOffset contamType: Offset = Offset(),
    specMedEquipVectorOffset specMedEquip: Offset = Offset(),
    casualtyKeyOffset casualtyKey: Offset = Offset(),
    patientStatusOffset patientStatus: Offset = Offset(),
    patientIdentityOffset patientIdentity: Offset = Offset(),
    nationalityOffset nationality: Offset = Offset(),
    payGradeOffset payGrade: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    age: Int32 = 0,
    genderOffset gender: Offset = Offset(),
    last4SsnOffset last4Ssn: Offset = Offset(),
    bloodTypeOffset bloodType: Offset = Offset(),
    serviceOffset service: Offset = Offset(),
    callSignOffset callSign: Offset = Offset(),
    occSpecialityOffset occSpeciality: Offset = Offset(),
    burialLocationVectorOffset burialLocation: Offset = Offset(),
    collectionPointVectorOffset collectionPoint: Offset = Offset(),
    careProviderUrnOffset careProviderUrn: Offset = Offset(),
    dispositionTypeOffset dispositionType: Offset = Offset(),
    dispositionOffset disposition: Offset = Offset(),
    reportGenOffset reportGen: Offset = Offset(),
    reportTimeOffset reportTime: Offset = Offset(),
    commentsOffset comments: Offset = Offset(),
    etiologyVectorOffset etiology: Offset = Offset(),
    treatmentVectorOffset treatment: Offset = Offset(),
    vitalSignDataVectorOffset vitalSignData: Offset = Offset(),
    healthStateVectorOffset healthState: Offset = Offset(),
    conditionVectorOffset condition: Offset = Offset(),
    medicationVectorOffset medication: Offset = Offset(),
    injuryVectorOffset injury: Offset = Offset(),
    allergyVectorOffset allergy: Offset = Offset()
  ) -> Offset {
    let __start = EvacCasualtyInfo_Ingest.startEvacCasualtyInfo_Ingest(&fbb)
    EvacCasualtyInfo_Ingest.add(priority: priority, &fbb)
    EvacCasualtyInfo_Ingest.add(evacType: evacType, &fbb)
    EvacCasualtyInfo_Ingest.add(casualtyType: casualtyType, &fbb)
    EvacCasualtyInfo_Ingest.add(bodyPart: bodyPart, &fbb)
    EvacCasualtyInfo_Ingest.add(contamType: contamType, &fbb)
    EvacCasualtyInfo_Ingest.addVectorOf(specMedEquip: specMedEquip, &fbb)
    EvacCasualtyInfo_Ingest.add(casualtyKey: casualtyKey, &fbb)
    EvacCasualtyInfo_Ingest.add(patientStatus: patientStatus, &fbb)
    EvacCasualtyInfo_Ingest.add(patientIdentity: patientIdentity, &fbb)
    EvacCasualtyInfo_Ingest.add(nationality: nationality, &fbb)
    EvacCasualtyInfo_Ingest.add(payGrade: payGrade, &fbb)
    EvacCasualtyInfo_Ingest.add(name: name, &fbb)
    EvacCasualtyInfo_Ingest.add(age: age, &fbb)
    EvacCasualtyInfo_Ingest.add(gender: gender, &fbb)
    EvacCasualtyInfo_Ingest.add(last4Ssn: last4Ssn, &fbb)
    EvacCasualtyInfo_Ingest.add(bloodType: bloodType, &fbb)
    EvacCasualtyInfo_Ingest.add(service: service, &fbb)
    EvacCasualtyInfo_Ingest.add(callSign: callSign, &fbb)
    EvacCasualtyInfo_Ingest.add(occSpeciality: occSpeciality, &fbb)
    EvacCasualtyInfo_Ingest.addVectorOf(burialLocation: burialLocation, &fbb)
    EvacCasualtyInfo_Ingest.addVectorOf(collectionPoint: collectionPoint, &fbb)
    EvacCasualtyInfo_Ingest.add(careProviderUrn: careProviderUrn, &fbb)
    EvacCasualtyInfo_Ingest.add(dispositionType: dispositionType, &fbb)
    EvacCasualtyInfo_Ingest.add(disposition: disposition, &fbb)
    EvacCasualtyInfo_Ingest.add(reportGen: reportGen, &fbb)
    EvacCasualtyInfo_Ingest.add(reportTime: reportTime, &fbb)
    EvacCasualtyInfo_Ingest.add(comments: comments, &fbb)
    EvacCasualtyInfo_Ingest.addVectorOf(etiology: etiology, &fbb)
    EvacCasualtyInfo_Ingest.addVectorOf(treatment: treatment, &fbb)
    EvacCasualtyInfo_Ingest.addVectorOf(vitalSignData: vitalSignData, &fbb)
    EvacCasualtyInfo_Ingest.addVectorOf(healthState: healthState, &fbb)
    EvacCasualtyInfo_Ingest.addVectorOf(condition: condition, &fbb)
    EvacCasualtyInfo_Ingest.addVectorOf(medication: medication, &fbb)
    EvacCasualtyInfo_Ingest.addVectorOf(injury: injury, &fbb)
    EvacCasualtyInfo_Ingest.addVectorOf(allergy: allergy, &fbb)
    return EvacCasualtyInfo_Ingest.endEvacCasualtyInfo_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.priority.p, fieldName: "priority", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.evacType.p, fieldName: "evacType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.casualtyType.p, fieldName: "casualtyType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.bodyPart.p, fieldName: "bodyPart", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.contamType.p, fieldName: "contamType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.specMedEquip.p, fieldName: "specMedEquip", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.casualtyKey.p, fieldName: "casualtyKey", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.patientStatus.p, fieldName: "patientStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.patientIdentity.p, fieldName: "patientIdentity", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.nationality.p, fieldName: "nationality", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.payGrade.p, fieldName: "payGrade", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.age.p, fieldName: "age", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.gender.p, fieldName: "gender", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.last4Ssn.p, fieldName: "last4Ssn", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.bloodType.p, fieldName: "bloodType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.service.p, fieldName: "service", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.callSign.p, fieldName: "callSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.occSpeciality.p, fieldName: "occSpeciality", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.burialLocation.p, fieldName: "burialLocation", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.collectionPoint.p, fieldName: "collectionPoint", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.careProviderUrn.p, fieldName: "careProviderUrn", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dispositionType.p, fieldName: "dispositionType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.disposition.p, fieldName: "disposition", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reportGen.p, fieldName: "reportGen", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reportTime.p, fieldName: "reportTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.comments.p, fieldName: "comments", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.etiology.p, fieldName: "etiology", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.treatment.p, fieldName: "treatment", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.vitalSignData.p, fieldName: "vitalSignData", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.healthState.p, fieldName: "healthState", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.condition.p, fieldName: "condition", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.medication.p, fieldName: "medication", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.injury.p, fieldName: "injury", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.allergy.p, fieldName: "allergy", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

