// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum AIS_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: AIS_Ingest_dataMode_Enum { return .exercise }
  public static var min: AIS_Ingest_dataMode_Enum { return .real }
}


///  /// Self-reported information obtained from Automatic Identification System (AIS) equipment. This contains information such as unique identification, status, position, course, and speed. The AIS is an automatic tracking system that uses transceivers on ships and is used by vessel traffic services. Although technically and operationally distinct, the AIS system is analogous to ADS-B that performs a similar function for aircraft. AIS is intended to assist a vessel's watchstanding officers and allow maritime authorities to track and monitor vessel movements. AIS integrates a standardized VHF transceiver with a positioning system such as Global Positioning System receiver, with other electronic navigation sensors, such as gyrocompass or rate of turn indicator. Vessels fitted with AIS transceivers can be tracked by AIS base stations located along coast lines or, when out of range of terrestrial networks, through a growing number of satellites that are fitted with special AIS receivers which are capable of deconflicting a large number of signatures.
public struct AIS_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AISI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AIS_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idTrack = 8
    case idVessel = 10
    case mmsi = 12
    case imon = 14
    case ts = 16
    case shipName = 18
    case shipType = 20
    case engagedIn = 22
    case specialCraft = 24
    case cargoType = 26
    case callSign = 28
    case vesselFlag = 30
    case lat = 32
    case lon = 34
    case posHiAccuracy = 36
    case posHiLatency = 38
    case speed = 40
    case trueHeading = 42
    case course = 44
    case rateOfTurn = 46
    case specialManeuver = 48
    case navStatus = 50
    case posDeviceType = 52
    case antennaRefDimensions = 54
    case length = 56
    case width = 58
    case draught = 60
    case shipDescription = 62
    case destination = 64
    case destinationEta = 66
    case currentPortGuid = 68
    case currentPortLocode = 70
    case lastPortGuid = 72
    case lastPortLocode = 74
    case nextPortGuid = 76
    case nextPortLocode = 78
    case etaCalculated = 80
    case etaUpdated = 82
    case distanceToGo = 84
    case distanceTravelled = 86
    case avgSpeed = 88
    case maxSpeed = 90
    case createdAt = 92
    case createdBy = 94
    case source = 96
    case sourceDl = 98
    case origin = 100
    case dataMode = 102
    case origNetwork = 104
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: AIS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the Track.
  ///  Example: /// Example: TRACK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idTrack: String? { let o = _accessor.offset(VTOFFSET.idTrack.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idTrackSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idTrack.v) }
  ///  Unique identifier of the vessel.
  ///  Example: /// Example: VESSEL-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idVessel: String? { let o = _accessor.offset(VTOFFSET.idVessel.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idVesselSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idVessel.v) }
  ///  The Maritime Mobile Service Identity of the vessel.  MMSI is a nine-digit number that identifies the transmitter station of the vessel.
  ///  Example: /// Example: 304010417
  ///  Constraints: No constraints specified.
  public var mmsi: Int64 { let o = _accessor.offset(VTOFFSET.mmsi.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  ///  The International Maritime Organization Number of the vessel.  IMON is a seven-digit number that uniquely identifies the vessel.
  ///  Example: /// Example: 9015462
  ///  Constraints: No constraints specified.
  public var imon: Int64 { let o = _accessor.offset(VTOFFSET.imon.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  ///  The timestamp that the vessel position was recorded, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var ts: String? { let o = _accessor.offset(VTOFFSET.ts.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ts.v) }
  ///  The name of the vessel.  Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
  ///  Example: /// Example: DORNUM
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var shipName: String? { let o = _accessor.offset(VTOFFSET.shipName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var shipNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.shipName.v) }
  ///  The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).  See the engagedIn and specialCraft entries for additional information on certain types of vessels.
  ///  Example: /// Example: Passenger
  ///  Constraints: Minimum length = 0, Maximum length = 48
  public var shipType: String? { let o = _accessor.offset(VTOFFSET.shipType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var shipTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.shipType.v) }
  ///  The activity that the vessel is engaged in.  This entry applies only when the shipType = Other.
  ///  Example: /// Example: Cargo
  ///  Constraints: Minimum length = 0, Maximum length = 48
  public var engagedIn: String? { let o = _accessor.offset(VTOFFSET.engagedIn.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var engagedInSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.engagedIn.v) }
  ///  The type of special craft designation of the vessel.  This entry applies only when the shipType = Special Craft.
  ///  Example: /// Example: Tug
  ///  Constraints: Minimum length = 0, Maximum length = 48
  public var specialCraft: String? { let o = _accessor.offset(VTOFFSET.specialCraft.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var specialCraftSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.specialCraft.v) }
  ///  The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
  ///  Example: /// Example: Freight
  ///  Constraints: Minimum length = 0, Maximum length = 48
  public var cargoType: String? { let o = _accessor.offset(VTOFFSET.cargoType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cargoTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cargoType.v) }
  ///  A uniquely designated identifier for the vessel's transmitter station.
  ///  Example: /// Example: V2OZ
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var callSign: String? { let o = _accessor.offset(VTOFFSET.callSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var callSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.callSign.v) }
  ///  The flag of the subject vessel according to AIS transmission.
  ///  Example: /// Example: United States
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var vesselFlag: String? { let o = _accessor.offset(VTOFFSET.vesselFlag.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var vesselFlagSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.vesselFlag.v) }
  ///  WGS-84 latitude of the vessel position, in degrees.  -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 47.758499
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 longitude of the vessel position, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -5.154223
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Flag indicating high reported position accuracy (less than or equal to 10 meters).  A value of 0/false indicates low accuracy (greater than 10 meters).
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var posHiAccuracy: Bool { let o = _accessor.offset(VTOFFSET.posHiAccuracy.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Flag indicating high reported position latency (greater than 5 seconds).  A value of 0/false indicates low latency (less than 5 seconds).
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var posHiLatency: Bool { let o = _accessor.offset(VTOFFSET.posHiLatency.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The speed-over-ground reported by the vessel, in kilometers/hour.
  ///  Example: /// Example: 10.5
  ///  Constraints: No constraints specified.
  public var speed: Double { let o = _accessor.offset(VTOFFSET.speed.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The true heading reported by the vessel, in degrees.
  ///  Example: /// Example: 329.1
  ///  Constraints: No constraints specified.
  public var trueHeading: Double { let o = _accessor.offset(VTOFFSET.trueHeading.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The course-over-ground reported by the vessel, in degrees.
  ///  Example: /// Example: 157.1
  ///  Constraints: No constraints specified.
  public var course: Double { let o = _accessor.offset(VTOFFSET.course.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Rate-of-Turn for the vessel, in degrees/minute.  Positive value indicates that the vessel is turning right.
  ///  Example: /// Example: 22.1
  ///  Constraints: No constraints specified.
  public var rateOfTurn: Double { let o = _accessor.offset(VTOFFSET.rateOfTurn.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Flag indicating that the vessel is engaged in a special maneuver (e.g. Waterway Navigation).
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var specialManeuver: Bool { let o = _accessor.offset(VTOFFSET.specialManeuver.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored, Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation status definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with navigation status. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
  ///  Example: /// Example: Underway Using Engine
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var navStatus: String? { let o = _accessor.offset(VTOFFSET.navStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var navStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.navStatus.v) }
  ///  The type of electronic position fixing device (e.g. GPS, GLONASS, etc.). Intended as, but not constrained to, the USCG NAVCEN electronic position fixing device definitions. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
  ///  Example: /// Example: GPS
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var posDeviceType: String? { let o = _accessor.offset(VTOFFSET.posDeviceType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var posDeviceTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.posDeviceType.v) }
  ///  The reference dimensions of the vessel, reported as [A, B, C, D], in meters.  Where the array values represent the distance fore (A), aft (B), to port (C), and to starboard (D) of the navigation antenna.  Array with values A = C = 0 and B, D > 0 indicate the length (B) and width (D) of the vessel without antenna position reference.
  ///  Example: /// Example: [50.1, 50.1, 20.1, 20.1]
  ///  Constraints: No constraints specified.
  public var hasAntennaRefDimensions: Bool { let o = _accessor.offset(VTOFFSET.antennaRefDimensions.v); return o == 0 ? false : true }
  public var antennaRefDimensionsCount: Int32 { let o = _accessor.offset(VTOFFSET.antennaRefDimensions.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func antennaRefDimensions(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.antennaRefDimensions.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The overall length of the vessel, in meters.  A value of 511 indicates a vessel length of 511 meters or greater.
  ///  Example: /// Example: 511.1
  ///  Constraints: No constraints specified.
  public var length: Double { let o = _accessor.offset(VTOFFSET.length.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The breadth of the vessel, in meters.  A value of 63 indicates a vessel breadth of 63 meters or greater.
  ///  Example: /// Example: 24.1
  ///  Constraints: No constraints specified.
  public var width: Double { let o = _accessor.offset(VTOFFSET.width.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The maximum static draught, in meters, of the vessel according to the AIS transmission.
  ///  Example: /// Example: 21.1
  ///  Constraints: No constraints specified.
  public var draught: Double { let o = _accessor.offset(VTOFFSET.draught.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Further description or explanation of the vessel or type.
  ///  Example: /// Example: Search and rescue vessels
  ///  Constraints: Minimum length = 0, Maximum length = 100
  public var shipDescription: String? { let o = _accessor.offset(VTOFFSET.shipDescription.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var shipDescriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.shipDescription.v) }
  ///  The destination of the vessel according to the AIS transmission.
  ///  Example: /// Example: USCLE
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var destination: String? { let o = _accessor.offset(VTOFFSET.destination.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var destinationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.destination.v) }
  ///  The Estimated Time of Arrival of the vessel at the destination, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var destinationEta: String? { let o = _accessor.offset(VTOFFSET.destinationEta.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var destinationEtaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.destinationEta.v) }
  ///  The US Geographic Unique Identifier of the current port hosting the vessel.
  ///  Example: /// Example: 0ABC
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var currentPortGuid: String? { let o = _accessor.offset(VTOFFSET.currentPortGuid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var currentPortGuidSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.currentPortGuid.v) }
  ///  The UN Location Code of the current port hosting the vessel.
  ///  Example: /// Example: XF013
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var currentPortLocode: String? { let o = _accessor.offset(VTOFFSET.currentPortLocode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var currentPortLocodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.currentPortLocode.v) }
  ///  The US Geographic Unique Identifier of the last port visited by the vessel.
  ///  Example: /// Example: 0VAX
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var lastPortGuid: String? { let o = _accessor.offset(VTOFFSET.lastPortGuid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastPortGuidSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastPortGuid.v) }
  ///  The UN Location Code of the last port visited by the vessel.
  ///  Example: /// Example: USSKY
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var lastPortLocode: String? { let o = _accessor.offset(VTOFFSET.lastPortLocode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastPortLocodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastPortLocode.v) }
  ///  The US Geographic Unique Identifier of the next destination port of the vessel.
  ///  Example: /// Example: 0Z8Q
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var nextPortGuid: String? { let o = _accessor.offset(VTOFFSET.nextPortGuid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nextPortGuidSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.nextPortGuid.v) }
  ///  The UN  Location Code of the next destination port of the vessel.
  ///  Example: /// Example: USCLE
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var nextPortLocode: String? { let o = _accessor.offset(VTOFFSET.nextPortLocode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nextPortLocodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.nextPortLocode.v) }
  ///  The Estimated Time of Arrival of the vessel at the destination port, according to MarineTraffic calculations, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var etaCalculated: String? { let o = _accessor.offset(VTOFFSET.etaCalculated.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var etaCalculatedSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.etaCalculated.v) }
  ///  The date and time that the ETA was calculated by MarineTraffic, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var etaUpdated: String? { let o = _accessor.offset(VTOFFSET.etaUpdated.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var etaUpdatedSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.etaUpdated.v) }
  ///  The remaining distance, in kilometers, for the vessel to reach the reported destination.
  ///  Example: /// Example: 150.5
  ///  Constraints: No constraints specified.
  public var distanceToGo: Double { let o = _accessor.offset(VTOFFSET.distanceToGo.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The distance, in kilometers, that the vessel has travelled since departing the last port.
  ///  Example: /// Example: 200.3
  ///  Constraints: No constraints specified.
  public var distanceTravelled: Double { let o = _accessor.offset(VTOFFSET.distanceTravelled.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The average speed, in kilometers/hour, calculated for the subject vessel during the latest voyage (port to port).
  ///  Example: /// Example: 12.1
  ///  Constraints: No constraints specified.
  public var avgSpeed: Double { let o = _accessor.offset(VTOFFSET.avgSpeed.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The maximum speed, in kilometers/hour, reported by the subject vessel during the latest voyage (port to port).
  ///  Example: /// Example: 13.3
  ///  Constraints: No constraints specified.
  public var maxSpeed: Double { let o = _accessor.offset(VTOFFSET.maxSpeed.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: AIS_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : AIS_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startAIS_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 51) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idTrack: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idTrack, at: VTOFFSET.idTrack.p) }
  public static func add(idVessel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idVessel, at: VTOFFSET.idVessel.p) }
  public static func add(mmsi: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: mmsi, def: 0, at: VTOFFSET.mmsi.p) }
  public static func add(imon: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: imon, def: 0, at: VTOFFSET.imon.p) }
  public static func add(ts: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ts, at: VTOFFSET.ts.p) }
  public static func add(shipName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shipName, at: VTOFFSET.shipName.p) }
  public static func add(shipType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shipType, at: VTOFFSET.shipType.p) }
  public static func add(engagedIn: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: engagedIn, at: VTOFFSET.engagedIn.p) }
  public static func add(specialCraft: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: specialCraft, at: VTOFFSET.specialCraft.p) }
  public static func add(cargoType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cargoType, at: VTOFFSET.cargoType.p) }
  public static func add(callSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callSign, at: VTOFFSET.callSign.p) }
  public static func add(vesselFlag: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vesselFlag, at: VTOFFSET.vesselFlag.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(posHiAccuracy: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: posHiAccuracy, def: false,
   at: VTOFFSET.posHiAccuracy.p) }
  public static func add(posHiLatency: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: posHiLatency, def: false,
   at: VTOFFSET.posHiLatency.p) }
  public static func add(speed: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: speed, def: 0.0, at: VTOFFSET.speed.p) }
  public static func add(trueHeading: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: trueHeading, def: 0.0, at: VTOFFSET.trueHeading.p) }
  public static func add(course: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: course, def: 0.0, at: VTOFFSET.course.p) }
  public static func add(rateOfTurn: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rateOfTurn, def: 0.0, at: VTOFFSET.rateOfTurn.p) }
  public static func add(specialManeuver: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: specialManeuver, def: false,
   at: VTOFFSET.specialManeuver.p) }
  public static func add(navStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: navStatus, at: VTOFFSET.navStatus.p) }
  public static func add(posDeviceType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: posDeviceType, at: VTOFFSET.posDeviceType.p) }
  public static func addVectorOf(antennaRefDimensions: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: antennaRefDimensions, at: VTOFFSET.antennaRefDimensions.p) }
  public static func add(length: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: length, def: 0.0, at: VTOFFSET.length.p) }
  public static func add(width: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: width, def: 0.0, at: VTOFFSET.width.p) }
  public static func add(draught: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: draught, def: 0.0, at: VTOFFSET.draught.p) }
  public static func add(shipDescription: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shipDescription, at: VTOFFSET.shipDescription.p) }
  public static func add(destination: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: destination, at: VTOFFSET.destination.p) }
  public static func add(destinationEta: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: destinationEta, at: VTOFFSET.destinationEta.p) }
  public static func add(currentPortGuid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: currentPortGuid, at: VTOFFSET.currentPortGuid.p) }
  public static func add(currentPortLocode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: currentPortLocode, at: VTOFFSET.currentPortLocode.p) }
  public static func add(lastPortGuid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastPortGuid, at: VTOFFSET.lastPortGuid.p) }
  public static func add(lastPortLocode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastPortLocode, at: VTOFFSET.lastPortLocode.p) }
  public static func add(nextPortGuid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: nextPortGuid, at: VTOFFSET.nextPortGuid.p) }
  public static func add(nextPortLocode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: nextPortLocode, at: VTOFFSET.nextPortLocode.p) }
  public static func add(etaCalculated: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: etaCalculated, at: VTOFFSET.etaCalculated.p) }
  public static func add(etaUpdated: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: etaUpdated, at: VTOFFSET.etaUpdated.p) }
  public static func add(distanceToGo: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: distanceToGo, def: 0.0, at: VTOFFSET.distanceToGo.p) }
  public static func add(distanceTravelled: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: distanceTravelled, def: 0.0, at: VTOFFSET.distanceTravelled.p) }
  public static func add(avgSpeed: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgSpeed, def: 0.0, at: VTOFFSET.avgSpeed.p) }
  public static func add(maxSpeed: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxSpeed, def: 0.0, at: VTOFFSET.maxSpeed.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: AIS_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endAIS_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAIS_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idTrackOffset idTrack: Offset = Offset(),
    idVesselOffset idVessel: Offset = Offset(),
    mmsi: Int64 = 0,
    imon: Int64 = 0,
    tsOffset ts: Offset = Offset(),
    shipNameOffset shipName: Offset = Offset(),
    shipTypeOffset shipType: Offset = Offset(),
    engagedInOffset engagedIn: Offset = Offset(),
    specialCraftOffset specialCraft: Offset = Offset(),
    cargoTypeOffset cargoType: Offset = Offset(),
    callSignOffset callSign: Offset = Offset(),
    vesselFlagOffset vesselFlag: Offset = Offset(),
    lat: Double = 0.0,
    lon: Double = 0.0,
    posHiAccuracy: Bool = false,
    posHiLatency: Bool = false,
    speed: Double = 0.0,
    trueHeading: Double = 0.0,
    course: Double = 0.0,
    rateOfTurn: Double = 0.0,
    specialManeuver: Bool = false,
    navStatusOffset navStatus: Offset = Offset(),
    posDeviceTypeOffset posDeviceType: Offset = Offset(),
    antennaRefDimensionsVectorOffset antennaRefDimensions: Offset = Offset(),
    length: Double = 0.0,
    width: Double = 0.0,
    draught: Double = 0.0,
    shipDescriptionOffset shipDescription: Offset = Offset(),
    destinationOffset destination: Offset = Offset(),
    destinationEtaOffset destinationEta: Offset = Offset(),
    currentPortGuidOffset currentPortGuid: Offset = Offset(),
    currentPortLocodeOffset currentPortLocode: Offset = Offset(),
    lastPortGuidOffset lastPortGuid: Offset = Offset(),
    lastPortLocodeOffset lastPortLocode: Offset = Offset(),
    nextPortGuidOffset nextPortGuid: Offset = Offset(),
    nextPortLocodeOffset nextPortLocode: Offset = Offset(),
    etaCalculatedOffset etaCalculated: Offset = Offset(),
    etaUpdatedOffset etaUpdated: Offset = Offset(),
    distanceToGo: Double = 0.0,
    distanceTravelled: Double = 0.0,
    avgSpeed: Double = 0.0,
    maxSpeed: Double = 0.0,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: AIS_Ingest_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = AIS_Ingest.startAIS_Ingest(&fbb)
    AIS_Ingest.add(id: id, &fbb)
    AIS_Ingest.add(classificationMarking: classificationMarking, &fbb)
    AIS_Ingest.add(idTrack: idTrack, &fbb)
    AIS_Ingest.add(idVessel: idVessel, &fbb)
    AIS_Ingest.add(mmsi: mmsi, &fbb)
    AIS_Ingest.add(imon: imon, &fbb)
    AIS_Ingest.add(ts: ts, &fbb)
    AIS_Ingest.add(shipName: shipName, &fbb)
    AIS_Ingest.add(shipType: shipType, &fbb)
    AIS_Ingest.add(engagedIn: engagedIn, &fbb)
    AIS_Ingest.add(specialCraft: specialCraft, &fbb)
    AIS_Ingest.add(cargoType: cargoType, &fbb)
    AIS_Ingest.add(callSign: callSign, &fbb)
    AIS_Ingest.add(vesselFlag: vesselFlag, &fbb)
    AIS_Ingest.add(lat: lat, &fbb)
    AIS_Ingest.add(lon: lon, &fbb)
    AIS_Ingest.add(posHiAccuracy: posHiAccuracy, &fbb)
    AIS_Ingest.add(posHiLatency: posHiLatency, &fbb)
    AIS_Ingest.add(speed: speed, &fbb)
    AIS_Ingest.add(trueHeading: trueHeading, &fbb)
    AIS_Ingest.add(course: course, &fbb)
    AIS_Ingest.add(rateOfTurn: rateOfTurn, &fbb)
    AIS_Ingest.add(specialManeuver: specialManeuver, &fbb)
    AIS_Ingest.add(navStatus: navStatus, &fbb)
    AIS_Ingest.add(posDeviceType: posDeviceType, &fbb)
    AIS_Ingest.addVectorOf(antennaRefDimensions: antennaRefDimensions, &fbb)
    AIS_Ingest.add(length: length, &fbb)
    AIS_Ingest.add(width: width, &fbb)
    AIS_Ingest.add(draught: draught, &fbb)
    AIS_Ingest.add(shipDescription: shipDescription, &fbb)
    AIS_Ingest.add(destination: destination, &fbb)
    AIS_Ingest.add(destinationEta: destinationEta, &fbb)
    AIS_Ingest.add(currentPortGuid: currentPortGuid, &fbb)
    AIS_Ingest.add(currentPortLocode: currentPortLocode, &fbb)
    AIS_Ingest.add(lastPortGuid: lastPortGuid, &fbb)
    AIS_Ingest.add(lastPortLocode: lastPortLocode, &fbb)
    AIS_Ingest.add(nextPortGuid: nextPortGuid, &fbb)
    AIS_Ingest.add(nextPortLocode: nextPortLocode, &fbb)
    AIS_Ingest.add(etaCalculated: etaCalculated, &fbb)
    AIS_Ingest.add(etaUpdated: etaUpdated, &fbb)
    AIS_Ingest.add(distanceToGo: distanceToGo, &fbb)
    AIS_Ingest.add(distanceTravelled: distanceTravelled, &fbb)
    AIS_Ingest.add(avgSpeed: avgSpeed, &fbb)
    AIS_Ingest.add(maxSpeed: maxSpeed, &fbb)
    AIS_Ingest.add(createdAt: createdAt, &fbb)
    AIS_Ingest.add(createdBy: createdBy, &fbb)
    AIS_Ingest.add(source: source, &fbb)
    AIS_Ingest.add(sourceDl: sourceDl, &fbb)
    AIS_Ingest.add(origin: origin, &fbb)
    AIS_Ingest.add(dataMode: dataMode, &fbb)
    AIS_Ingest.add(origNetwork: origNetwork, &fbb)
    return AIS_Ingest.endAIS_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idTrack.p, fieldName: "idTrack", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idVessel.p, fieldName: "idVessel", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.mmsi.p, fieldName: "mmsi", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.imon.p, fieldName: "imon", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.ts.p, fieldName: "ts", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.shipName.p, fieldName: "shipName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.shipType.p, fieldName: "shipType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.engagedIn.p, fieldName: "engagedIn", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.specialCraft.p, fieldName: "specialCraft", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cargoType.p, fieldName: "cargoType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.callSign.p, fieldName: "callSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.vesselFlag.p, fieldName: "vesselFlag", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.posHiAccuracy.p, fieldName: "posHiAccuracy", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.posHiLatency.p, fieldName: "posHiLatency", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.speed.p, fieldName: "speed", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.trueHeading.p, fieldName: "trueHeading", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.course.p, fieldName: "course", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rateOfTurn.p, fieldName: "rateOfTurn", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.specialManeuver.p, fieldName: "specialManeuver", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.navStatus.p, fieldName: "navStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.posDeviceType.p, fieldName: "posDeviceType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.antennaRefDimensions.p, fieldName: "antennaRefDimensions", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.length.p, fieldName: "length", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.width.p, fieldName: "width", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.draught.p, fieldName: "draught", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.shipDescription.p, fieldName: "shipDescription", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.destination.p, fieldName: "destination", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.destinationEta.p, fieldName: "destinationEta", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.currentPortGuid.p, fieldName: "currentPortGuid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.currentPortLocode.p, fieldName: "currentPortLocode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lastPortGuid.p, fieldName: "lastPortGuid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lastPortLocode.p, fieldName: "lastPortLocode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.nextPortGuid.p, fieldName: "nextPortGuid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.nextPortLocode.p, fieldName: "nextPortLocode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.etaCalculated.p, fieldName: "etaCalculated", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.etaUpdated.p, fieldName: "etaUpdated", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.distanceToGo.p, fieldName: "distanceToGo", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.distanceTravelled.p, fieldName: "distanceTravelled", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgSpeed.p, fieldName: "avgSpeed", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxSpeed.p, fieldName: "maxSpeed", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: AIS_Ingest_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

