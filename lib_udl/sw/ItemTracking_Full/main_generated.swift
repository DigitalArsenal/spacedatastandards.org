// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum ItemTracking_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: ItemTracking_Full_dataMode_Enum { return .exercise }
  public static var min: ItemTracking_Full_dataMode_Enum { return .real }
}


///  /// No description available.
public struct ItemTracking_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ITEM" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: ItemTracking_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case scanCode = 8
    case scGenTool = 10
    case scannerId = 12
    case ts = 14
    case idItem = 16
    case type = 18
    case lat = 20
    case lon = 22
    case scanType = 24
    case dvCode = 26
    case notes = 28
    case keys = 30
    case values = 32
    case createdAt = 34
    case createdBy = 36
    case sourceDl = 38
    case source = 40
    case origin = 42
    case origNetwork = 44
    case dataMode = 46
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The tracking identifier of an item or person. May be similar in representation of a barcode or UPC.
  ///  Example: /// Example: ABC1234
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var scanCode: String? { let o = _accessor.offset(VTOFFSET.scanCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var scanCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.scanCode.v) }
  ///  The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
  ///  Example: /// Example: bID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var scGenTool: String? { let o = _accessor.offset(VTOFFSET.scGenTool.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var scGenToolSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.scGenTool.v) }
  ///  The ID of the scanner or input device.
  ///  Example: /// Example: 2051M
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var scannerId: String? { let o = _accessor.offset(VTOFFSET.scannerId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var scannerIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.scannerId.v) }
  ///  The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-03-21T14:22:00.123Z
  ///  Constraints: No constraints specified.
  public var ts: String? { let o = _accessor.offset(VTOFFSET.ts.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ts.v) }
  ///  The UDL ID of the item this record is associated with.
  ///  Example: /// Example: 36054487-bcba-6e2d-4f3b-9f25738b2639
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idItem: String? { let o = _accessor.offset(VTOFFSET.idItem.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idItemSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idItem.v) }
  ///  The type of item that is being scanned (e.g. CARGO, PERSON, MAIL, MICAP, OTHER).
  ///  Example: /// Example: CARGO
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  WGS84 latitude where the item was scanned, in degrees.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS84 longitude where the item was scanned, in degrees.
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The type of scan for tracking the item within it's journey  (e.g. IN, OUT, RECEIVED, DELIVERED, TRANSIT, ABANDONDED, REFUSED, UNABLE, RETURNED, HELD, OTHER). For example, received and delivered are for when an item is received from or delivered to the end customer. In and out are for stops in between such as being loaded on an airplane or received at a warehouse.
  ///  Example: /// Example: TRANSIT
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var scanType: String? { let o = _accessor.offset(VTOFFSET.scanType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var scanTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.scanType.v) }
  ///  The United States distinguished visitor code of the person scanned, only applicable to people.
  ///  Example: /// Example: DV-4
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var dvCode: String? { let o = _accessor.offset(VTOFFSET.dvCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dvCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dvCode.v) }
  ///  Optional notes or comments about the tracking data.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  ///  Array of keys that may be associated with this tracked item.
  ///  Example: /// Example: ['tapeColor', 'hazmat']
  ///  Constraints: No constraints specified.
  public var hasKeys: Bool { let o = _accessor.offset(VTOFFSET.keys.v); return o == 0 ? false : true }
  public var keysCount: Int32 { let o = _accessor.offset(VTOFFSET.keys.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func keys(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.keys.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
  ///  Example: /// Example: ['yellow', 'false']
  ///  Constraints: No constraints specified.
  public var hasValues: Bool { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? false : true }
  public var valuesCount: Int32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func values(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2023-03-21T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: ItemTracking_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : ItemTracking_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startItemTracking_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 22) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(scanCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: scanCode, at: VTOFFSET.scanCode.p) }
  public static func add(scGenTool: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: scGenTool, at: VTOFFSET.scGenTool.p) }
  public static func add(scannerId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: scannerId, at: VTOFFSET.scannerId.p) }
  public static func add(ts: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ts, at: VTOFFSET.ts.p) }
  public static func add(idItem: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idItem, at: VTOFFSET.idItem.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(scanType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: scanType, at: VTOFFSET.scanType.p) }
  public static func add(dvCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dvCode, at: VTOFFSET.dvCode.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func addVectorOf(keys: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: keys, at: VTOFFSET.keys.p) }
  public static func addVectorOf(values: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: values, at: VTOFFSET.values.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: ItemTracking_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endItemTracking_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createItemTracking_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    scanCodeOffset scanCode: Offset = Offset(),
    scGenToolOffset scGenTool: Offset = Offset(),
    scannerIdOffset scannerId: Offset = Offset(),
    tsOffset ts: Offset = Offset(),
    idItemOffset idItem: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    lat: Double = 0.0,
    lon: Double = 0.0,
    scanTypeOffset scanType: Offset = Offset(),
    dvCodeOffset dvCode: Offset = Offset(),
    notesOffset notes: Offset = Offset(),
    keysVectorOffset keys: Offset = Offset(),
    valuesVectorOffset values: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: ItemTracking_Full_dataMode_Enum = .real
  ) -> Offset {
    let __start = ItemTracking_Full.startItemTracking_Full(&fbb)
    ItemTracking_Full.add(id: id, &fbb)
    ItemTracking_Full.add(classificationMarking: classificationMarking, &fbb)
    ItemTracking_Full.add(scanCode: scanCode, &fbb)
    ItemTracking_Full.add(scGenTool: scGenTool, &fbb)
    ItemTracking_Full.add(scannerId: scannerId, &fbb)
    ItemTracking_Full.add(ts: ts, &fbb)
    ItemTracking_Full.add(idItem: idItem, &fbb)
    ItemTracking_Full.add(type: type, &fbb)
    ItemTracking_Full.add(lat: lat, &fbb)
    ItemTracking_Full.add(lon: lon, &fbb)
    ItemTracking_Full.add(scanType: scanType, &fbb)
    ItemTracking_Full.add(dvCode: dvCode, &fbb)
    ItemTracking_Full.add(notes: notes, &fbb)
    ItemTracking_Full.addVectorOf(keys: keys, &fbb)
    ItemTracking_Full.addVectorOf(values: values, &fbb)
    ItemTracking_Full.add(createdAt: createdAt, &fbb)
    ItemTracking_Full.add(createdBy: createdBy, &fbb)
    ItemTracking_Full.add(sourceDl: sourceDl, &fbb)
    ItemTracking_Full.add(source: source, &fbb)
    ItemTracking_Full.add(origin: origin, &fbb)
    ItemTracking_Full.add(origNetwork: origNetwork, &fbb)
    ItemTracking_Full.add(dataMode: dataMode, &fbb)
    return ItemTracking_Full.endItemTracking_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.scanCode.p, fieldName: "scanCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.scGenTool.p, fieldName: "scGenTool", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.scannerId.p, fieldName: "scannerId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ts.p, fieldName: "ts", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idItem.p, fieldName: "idItem", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.scanType.p, fieldName: "scanType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dvCode.p, fieldName: "dvCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.keys.p, fieldName: "keys", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.values.p, fieldName: "values", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: ItemTracking_Full_dataMode_Enum.self)
    _v.finish()
  }
}

