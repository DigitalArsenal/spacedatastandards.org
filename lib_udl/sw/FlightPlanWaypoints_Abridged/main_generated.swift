// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection of waypoints associated with this flight plan.
public struct FlightPlanWaypoints_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "FLIG" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: FlightPlanWaypoints_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case type = 4
    case waypointName = 6
    case waypointNum = 8
    case airway = 10
    case arpt = 12
    case lat = 14
    case lon = 16
    case arId = 18
    case navaid = 20
    case tacanChannel = 22
    case vorFreq = 24
    case turbCat = 26
    case iceCat = 28
    case thunderCat = 30
    case alt = 32
    case tempDev = 34
    case legFuelDegrade = 36
    case legMach = 38
    case legMsnIndex = 40
    case legDragIndex = 42
    case avgCalAirspeed = 44
    case avgTrueAirspeed = 46
    case avgGroundSpeed = 48
    case priFreq = 50
    case pointWindDir = 52
    case pointWindSpeed = 54
    case avgWindDir = 56
    case avgWindSpeed = 58
    case legWindFac = 60
    case avgDriftAng = 62
    case secFreq = 64
    case magCourse = 66
    case trueCourse = 68
    case magHeading = 70
    case aaTacanChannel = 72
    case zoneDistance = 74
    case totalFlownDistance = 76
    case totalRemDistance = 78
    case zoneTime = 80
    case totalTime = 82
    case totalTimeRem = 84
    case zoneFuel = 86
    case totalUsedFuel = 88
    case totalRemFuel = 90
    case exchangedFuel = 92
    case airDistance = 94
    case totalAirDistance = 96
    case totalWeight = 98
    case eta = 100
    case ata = 102
    case fuelFlow = 104
    case legAlternate = 106
    case magVar = 108
    case dayLowAlt = 110
    case nightLowAlt = 112
    case nvgLowAlt = 114
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Points are designated by type as either a comment point or a waypoint. A comment point conveys important information about the point for pilots but is not entered into a flight management system. A waypoint is a point that is entered into a flight management system and/or filed with Air Traffic Control.
  ///  Example: /// Example: COMMENT
  ///  Constraints: Minimum length = 1, Maximum length = 16
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Name of the point. The name of a comment point identifies important information about that point, e.g. Top of Climb. The name of a waypoint identifies the location of that point.
  ///  Example: /// Example: KCHS
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var waypointName: String? { let o = _accessor.offset(VTOFFSET.waypointName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var waypointNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.waypointName.v) }
  ///  The waypoint number on the route. Comment points do not get a waypoint number.
  ///  Example: /// Example: 20
  ///  Constraints: No constraints specified.
  public var waypointNum: Int32 { let o = _accessor.offset(VTOFFSET.waypointNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The flight path flown for this leg.
  ///  Example: /// Example: W15
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var airway: String? { let o = _accessor.offset(VTOFFSET.airway.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var airwaySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.airway.v) }
  ///  Point identifying an air refueling track/anchor or fixed track.
  ///  Example: /// Example: ARIP
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var arpt: String? { let o = _accessor.offset(VTOFFSET.arpt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var arptSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.arpt.v) }
  ///  WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The ID of the air refueling track/anchor or fixed track.
  ///  Example: /// Example: AR202
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var arId: String? { let o = _accessor.offset(VTOFFSET.arId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var arIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.arId.v) }
  ///  Navigational Aid (NAVAID) identification code.
  ///  Example: /// Example: HTO
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var navaid: String? { let o = _accessor.offset(VTOFFSET.navaid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var navaidSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.navaid.v) }
  ///  Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
  ///  Example: /// Example: 83X
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var tacanChannel: String? { let o = _accessor.offset(VTOFFSET.tacanChannel.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tacanChannelSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tacanChannel.v) }
  ///  VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in megahertz.
  ///  Example: /// Example: 113.6
  ///  Constraints: No constraints specified.
  public var vorFreq: Double { let o = _accessor.offset(VTOFFSET.vorFreq.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
  ///  Example: /// Example: EXTREME
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var turbCat: String? { let o = _accessor.offset(VTOFFSET.turbCat.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var turbCatSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.turbCat.v) }
  ///  The icing intensity classification for this flight (LIGHT, MODERATE, etc).
  ///  Example: /// Example: MODERATE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var iceCat: String? { let o = _accessor.offset(VTOFFSET.iceCat.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var iceCatSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.iceCat.v) }
  ///  The thunderstorm intensity classification for this flight (LIGHT, MODERATE, etc).
  ///  Example: /// Example: MODERATE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var thunderCat: String? { let o = _accessor.offset(VTOFFSET.thunderCat.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var thunderCatSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.thunderCat.v) }
  ///  Altitude of a level, point, or object measured in feet above mean sea level.
  ///  Example: /// Example: 27000.1
  ///  Constraints: No constraints specified.
  public var alt: Double { let o = _accessor.offset(VTOFFSET.alt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average temperature deviation from standard day profile for this leg in degrees Celsius.
  ///  Example: /// Example: 12.1
  ///  Constraints: No constraints specified.
  public var tempDev: Double { let o = _accessor.offset(VTOFFSET.tempDev.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The fuel degrade percentage used for this leg.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var legFuelDegrade: Double { let o = _accessor.offset(VTOFFSET.legFuelDegrade.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The average Mach speed for this leg.
  ///  Example: /// Example: 0.74
  ///  Constraints: No constraints specified.
  public var legMach: Double { let o = _accessor.offset(VTOFFSET.legMach.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The mission index value for this leg. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
  ///  Example: /// Example: 65
  ///  Constraints: No constraints specified.
  public var legMsnIndex: Double { let o = _accessor.offset(VTOFFSET.legMsnIndex.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The percent degrade due to drag for this aircraft for this leg.
  ///  Example: /// Example: 1.2
  ///  Constraints: No constraints specified.
  public var legDragIndex: Double { let o = _accessor.offset(VTOFFSET.legDragIndex.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The average calibrated airspeed (CAS) for this leg in knots.
  ///  Example: /// Example: 200.1
  ///  Constraints: No constraints specified.
  public var avgCalAirspeed: Double { let o = _accessor.offset(VTOFFSET.avgCalAirspeed.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The average true airspeed (TAS) for this leg in knots.
  ///  Example: /// Example: 210.1
  ///  Constraints: No constraints specified.
  public var avgTrueAirspeed: Double { let o = _accessor.offset(VTOFFSET.avgTrueAirspeed.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The average ground speed for this leg in knots.
  ///  Example: /// Example: 300.1
  ///  Constraints: No constraints specified.
  public var avgGroundSpeed: Double { let o = _accessor.offset(VTOFFSET.avgGroundSpeed.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The primary UHF radio frequency used for the air refueling track or anchor in megahertz.
  ///  Example: /// Example: 357.5
  ///  Constraints: No constraints specified.
  public var priFreq: Double { let o = _accessor.offset(VTOFFSET.priFreq.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The wind direction at this specific point in degrees from true north.
  ///  Example: /// Example: 165.5
  ///  Constraints: No constraints specified.
  public var pointWindDir: Double { let o = _accessor.offset(VTOFFSET.pointWindDir.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The wind velocity at this specific point in knots.
  ///  Example: /// Example: 14.4
  ///  Constraints: No constraints specified.
  public var pointWindSpeed: Double { let o = _accessor.offset(VTOFFSET.pointWindSpeed.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The average wind direction for this leg in degrees from true north.
  ///  Example: /// Example: 165.5
  ///  Constraints: No constraints specified.
  public var avgWindDir: Double { let o = _accessor.offset(VTOFFSET.avgWindDir.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The average wind speed for this leg in knots.
  ///  Example: /// Example: 14.4
  ///  Constraints: No constraints specified.
  public var avgWindSpeed: Double { let o = _accessor.offset(VTOFFSET.avgWindSpeed.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The wind factor for this leg in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  ///  Example: /// Example: -32.1
  ///  Constraints: No constraints specified.
  public var legWindFac: Double { let o = _accessor.offset(VTOFFSET.legWindFac.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The average drift angle for this leg in degrees from true north.
  ///  Example: /// Example: -3.2
  ///  Constraints: No constraints specified.
  public var avgDriftAng: Double { let o = _accessor.offset(VTOFFSET.avgDriftAng.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The secondary UHF radio frequency used for the air refueling track or anchor in megahertz.
  ///  Example: /// Example: 357.5
  ///  Constraints: No constraints specified.
  public var secFreq: Double { let o = _accessor.offset(VTOFFSET.secFreq.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The magnetic course at leg midpoint in degrees from true north.
  ///  Example: /// Example: 338.1
  ///  Constraints: No constraints specified.
  public var magCourse: Double { let o = _accessor.offset(VTOFFSET.magCourse.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The true course at leg midpoint in degrees from true north.
  ///  Example: /// Example: 328.1
  ///  Constraints: No constraints specified.
  public var trueCourse: Double { let o = _accessor.offset(VTOFFSET.trueCourse.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The magnetic heading at leg midpoint in degrees from true north.
  ///  Example: /// Example: 212.1
  ///  Constraints: No constraints specified.
  public var magHeading: Double { let o = _accessor.offset(VTOFFSET.magHeading.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The air-to-air Tactical Air Navigation (TACAN) channels used by the receiver/tanker during air refueling.
  ///  Example: /// Example: 31/94
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var aaTacanChannel: String? { let o = _accessor.offset(VTOFFSET.aaTacanChannel.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aaTacanChannelSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aaTacanChannel.v) }
  ///  The zone/leg distance flown in nautical miles.
  ///  Example: /// Example: 212.1
  ///  Constraints: No constraints specified.
  public var zoneDistance: Double { let o = _accessor.offset(VTOFFSET.zoneDistance.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The total distance flown to this waypoint calculated from point of departure in nautical miles.
  ///  Example: /// Example: 688.1
  ///  Constraints: No constraints specified.
  public var totalFlownDistance: Double { let o = _accessor.offset(VTOFFSET.totalFlownDistance.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The total distance remaining from this waypoint to the point of arrival in nautical miles.
  ///  Example: /// Example: 1288.1
  ///  Constraints: No constraints specified.
  public var totalRemDistance: Double { let o = _accessor.offset(VTOFFSET.totalRemDistance.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The time to fly this zone/leg in minutes.
  ///  Example: /// Example: 36.1
  ///  Constraints: No constraints specified.
  public var zoneTime: Double { let o = _accessor.offset(VTOFFSET.zoneTime.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The total time accumulated from takeoff to this waypoint expressed as HH:MM.
  ///  Example: /// Example: 08:45
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var totalTime: String? { let o = _accessor.offset(VTOFFSET.totalTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var totalTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.totalTime.v) }
  ///  The total time remaining from this waypoint to the point of arrival expressed as HH:MM.
  ///  Example: /// Example: 01:43
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var totalTimeRem: String? { let o = _accessor.offset(VTOFFSET.totalTimeRem.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var totalTimeRemSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.totalTimeRem.v) }
  ///  The amount of fuel used on this zone/leg in pounds.
  ///  Example: /// Example: 1120.1
  ///  Constraints: No constraints specified.
  public var zoneFuel: Double { let o = _accessor.offset(VTOFFSET.zoneFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The total fuel used to this waypoint from point of departure in pounds.
  ///  Example: /// Example: 70431.1
  ///  Constraints: No constraints specified.
  public var totalUsedFuel: Double { let o = _accessor.offset(VTOFFSET.totalUsedFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The total fuel remaining at this waypoint in pounds.
  ///  Example: /// Example: 30453.1
  ///  Constraints: No constraints specified.
  public var totalRemFuel: Double { let o = _accessor.offset(VTOFFSET.totalRemFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The amount of fuel onloaded or offloaded at this waypoint in pounds (negative value for offload).
  ///  Example: /// Example: -30400.1
  ///  Constraints: No constraints specified.
  public var exchangedFuel: Double { let o = _accessor.offset(VTOFFSET.exchangedFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The air distance of this leg in nautical miles.
  ///  Example: /// Example: 321.1
  ///  Constraints: No constraints specified.
  public var airDistance: Double { let o = _accessor.offset(VTOFFSET.airDistance.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The total air distance to this waypoint in nautical miles.
  ///  Example: /// Example: 3251.1
  ///  Constraints: No constraints specified.
  public var totalAirDistance: Double { let o = _accessor.offset(VTOFFSET.totalAirDistance.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The total weight of the aircraft at this waypoint in pounds.
  ///  Example: /// Example: 207123.1
  ///  Constraints: No constraints specified.
  public var totalWeight: Double { let o = _accessor.offset(VTOFFSET.totalWeight.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2023-09-09T01:00:00.123Z
  ///  Constraints: No constraints specified.
  public var eta: String? { let o = _accessor.offset(VTOFFSET.eta.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var etaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eta.v) }
  ///  Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2023-09-09T01:00:00.123Z
  ///  Constraints: No constraints specified.
  public var ata: String? { let o = _accessor.offset(VTOFFSET.ata.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ataSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ata.v) }
  ///  The leg fuel flow in pounds per hour.
  ///  Example: /// Example: 17654.1
  ///  Constraints: No constraints specified.
  public var fuelFlow: Double { let o = _accessor.offset(VTOFFSET.fuelFlow.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The planned alternate leg based on user-defined constraints, International Civil Aviation Organization (ICAO) code preferred.
  ///  Example: /// Example: KCHS
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var legAlternate: String? { let o = _accessor.offset(VTOFFSET.legAlternate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var legAlternateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.legAlternate.v) }
  ///  The magnetic variation for this leg in degrees.
  ///  Example: /// Example: -13.2
  ///  Constraints: No constraints specified.
  public var magVar: Double { let o = _accessor.offset(VTOFFSET.magVar.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The day low level altitude in feet above sea level for the leg ending at this waypoint.
  ///  Example: /// Example: 1500.1
  ///  Constraints: No constraints specified.
  public var dayLowAlt: Double { let o = _accessor.offset(VTOFFSET.dayLowAlt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The night low level altitude in feet above sea level for the leg ending at this waypoint.
  ///  Example: /// Example: 2300.1
  ///  Constraints: No constraints specified.
  public var nightLowAlt: Double { let o = _accessor.offset(VTOFFSET.nightLowAlt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The night vision goggle low level altitude in feet above sea level for the leg ending at this waypoint.
  ///  Example: /// Example: 2450.1
  ///  Constraints: No constraints specified.
  public var nvgLowAlt: Double { let o = _accessor.offset(VTOFFSET.nvgLowAlt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  public static func startFlightPlanWaypoints_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 56) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(waypointName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: waypointName, at: VTOFFSET.waypointName.p) }
  public static func add(waypointNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: waypointNum, def: 0, at: VTOFFSET.waypointNum.p) }
  public static func add(airway: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: airway, at: VTOFFSET.airway.p) }
  public static func add(arpt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: arpt, at: VTOFFSET.arpt.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(arId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: arId, at: VTOFFSET.arId.p) }
  public static func add(navaid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: navaid, at: VTOFFSET.navaid.p) }
  public static func add(tacanChannel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tacanChannel, at: VTOFFSET.tacanChannel.p) }
  public static func add(vorFreq: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vorFreq, def: 0.0, at: VTOFFSET.vorFreq.p) }
  public static func add(turbCat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: turbCat, at: VTOFFSET.turbCat.p) }
  public static func add(iceCat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: iceCat, at: VTOFFSET.iceCat.p) }
  public static func add(thunderCat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: thunderCat, at: VTOFFSET.thunderCat.p) }
  public static func add(alt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: alt, def: 0.0, at: VTOFFSET.alt.p) }
  public static func add(tempDev: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: tempDev, def: 0.0, at: VTOFFSET.tempDev.p) }
  public static func add(legFuelDegrade: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: legFuelDegrade, def: 0.0, at: VTOFFSET.legFuelDegrade.p) }
  public static func add(legMach: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: legMach, def: 0.0, at: VTOFFSET.legMach.p) }
  public static func add(legMsnIndex: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: legMsnIndex, def: 0.0, at: VTOFFSET.legMsnIndex.p) }
  public static func add(legDragIndex: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: legDragIndex, def: 0.0, at: VTOFFSET.legDragIndex.p) }
  public static func add(avgCalAirspeed: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgCalAirspeed, def: 0.0, at: VTOFFSET.avgCalAirspeed.p) }
  public static func add(avgTrueAirspeed: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgTrueAirspeed, def: 0.0, at: VTOFFSET.avgTrueAirspeed.p) }
  public static func add(avgGroundSpeed: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgGroundSpeed, def: 0.0, at: VTOFFSET.avgGroundSpeed.p) }
  public static func add(priFreq: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: priFreq, def: 0.0, at: VTOFFSET.priFreq.p) }
  public static func add(pointWindDir: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pointWindDir, def: 0.0, at: VTOFFSET.pointWindDir.p) }
  public static func add(pointWindSpeed: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pointWindSpeed, def: 0.0, at: VTOFFSET.pointWindSpeed.p) }
  public static func add(avgWindDir: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgWindDir, def: 0.0, at: VTOFFSET.avgWindDir.p) }
  public static func add(avgWindSpeed: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgWindSpeed, def: 0.0, at: VTOFFSET.avgWindSpeed.p) }
  public static func add(legWindFac: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: legWindFac, def: 0.0, at: VTOFFSET.legWindFac.p) }
  public static func add(avgDriftAng: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgDriftAng, def: 0.0, at: VTOFFSET.avgDriftAng.p) }
  public static func add(secFreq: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: secFreq, def: 0.0, at: VTOFFSET.secFreq.p) }
  public static func add(magCourse: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: magCourse, def: 0.0, at: VTOFFSET.magCourse.p) }
  public static func add(trueCourse: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: trueCourse, def: 0.0, at: VTOFFSET.trueCourse.p) }
  public static func add(magHeading: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: magHeading, def: 0.0, at: VTOFFSET.magHeading.p) }
  public static func add(aaTacanChannel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aaTacanChannel, at: VTOFFSET.aaTacanChannel.p) }
  public static func add(zoneDistance: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: zoneDistance, def: 0.0, at: VTOFFSET.zoneDistance.p) }
  public static func add(totalFlownDistance: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalFlownDistance, def: 0.0, at: VTOFFSET.totalFlownDistance.p) }
  public static func add(totalRemDistance: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalRemDistance, def: 0.0, at: VTOFFSET.totalRemDistance.p) }
  public static func add(zoneTime: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: zoneTime, def: 0.0, at: VTOFFSET.zoneTime.p) }
  public static func add(totalTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: totalTime, at: VTOFFSET.totalTime.p) }
  public static func add(totalTimeRem: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: totalTimeRem, at: VTOFFSET.totalTimeRem.p) }
  public static func add(zoneFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: zoneFuel, def: 0.0, at: VTOFFSET.zoneFuel.p) }
  public static func add(totalUsedFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalUsedFuel, def: 0.0, at: VTOFFSET.totalUsedFuel.p) }
  public static func add(totalRemFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalRemFuel, def: 0.0, at: VTOFFSET.totalRemFuel.p) }
  public static func add(exchangedFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: exchangedFuel, def: 0.0, at: VTOFFSET.exchangedFuel.p) }
  public static func add(airDistance: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: airDistance, def: 0.0, at: VTOFFSET.airDistance.p) }
  public static func add(totalAirDistance: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalAirDistance, def: 0.0, at: VTOFFSET.totalAirDistance.p) }
  public static func add(totalWeight: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalWeight, def: 0.0, at: VTOFFSET.totalWeight.p) }
  public static func add(eta: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eta, at: VTOFFSET.eta.p) }
  public static func add(ata: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ata, at: VTOFFSET.ata.p) }
  public static func add(fuelFlow: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fuelFlow, def: 0.0, at: VTOFFSET.fuelFlow.p) }
  public static func add(legAlternate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: legAlternate, at: VTOFFSET.legAlternate.p) }
  public static func add(magVar: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: magVar, def: 0.0, at: VTOFFSET.magVar.p) }
  public static func add(dayLowAlt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dayLowAlt, def: 0.0, at: VTOFFSET.dayLowAlt.p) }
  public static func add(nightLowAlt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nightLowAlt, def: 0.0, at: VTOFFSET.nightLowAlt.p) }
  public static func add(nvgLowAlt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nvgLowAlt, def: 0.0, at: VTOFFSET.nvgLowAlt.p) }
  public static func endFlightPlanWaypoints_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createFlightPlanWaypoints_Abridged(
    _ fbb: inout FlatBufferBuilder,
    typeOffset type: Offset = Offset(),
    waypointNameOffset waypointName: Offset = Offset(),
    waypointNum: Int32 = 0,
    airwayOffset airway: Offset = Offset(),
    arptOffset arpt: Offset = Offset(),
    lat: Double = 0.0,
    lon: Double = 0.0,
    arIdOffset arId: Offset = Offset(),
    navaidOffset navaid: Offset = Offset(),
    tacanChannelOffset tacanChannel: Offset = Offset(),
    vorFreq: Double = 0.0,
    turbCatOffset turbCat: Offset = Offset(),
    iceCatOffset iceCat: Offset = Offset(),
    thunderCatOffset thunderCat: Offset = Offset(),
    alt: Double = 0.0,
    tempDev: Double = 0.0,
    legFuelDegrade: Double = 0.0,
    legMach: Double = 0.0,
    legMsnIndex: Double = 0.0,
    legDragIndex: Double = 0.0,
    avgCalAirspeed: Double = 0.0,
    avgTrueAirspeed: Double = 0.0,
    avgGroundSpeed: Double = 0.0,
    priFreq: Double = 0.0,
    pointWindDir: Double = 0.0,
    pointWindSpeed: Double = 0.0,
    avgWindDir: Double = 0.0,
    avgWindSpeed: Double = 0.0,
    legWindFac: Double = 0.0,
    avgDriftAng: Double = 0.0,
    secFreq: Double = 0.0,
    magCourse: Double = 0.0,
    trueCourse: Double = 0.0,
    magHeading: Double = 0.0,
    aaTacanChannelOffset aaTacanChannel: Offset = Offset(),
    zoneDistance: Double = 0.0,
    totalFlownDistance: Double = 0.0,
    totalRemDistance: Double = 0.0,
    zoneTime: Double = 0.0,
    totalTimeOffset totalTime: Offset = Offset(),
    totalTimeRemOffset totalTimeRem: Offset = Offset(),
    zoneFuel: Double = 0.0,
    totalUsedFuel: Double = 0.0,
    totalRemFuel: Double = 0.0,
    exchangedFuel: Double = 0.0,
    airDistance: Double = 0.0,
    totalAirDistance: Double = 0.0,
    totalWeight: Double = 0.0,
    etaOffset eta: Offset = Offset(),
    ataOffset ata: Offset = Offset(),
    fuelFlow: Double = 0.0,
    legAlternateOffset legAlternate: Offset = Offset(),
    magVar: Double = 0.0,
    dayLowAlt: Double = 0.0,
    nightLowAlt: Double = 0.0,
    nvgLowAlt: Double = 0.0
  ) -> Offset {
    let __start = FlightPlanWaypoints_Abridged.startFlightPlanWaypoints_Abridged(&fbb)
    FlightPlanWaypoints_Abridged.add(type: type, &fbb)
    FlightPlanWaypoints_Abridged.add(waypointName: waypointName, &fbb)
    FlightPlanWaypoints_Abridged.add(waypointNum: waypointNum, &fbb)
    FlightPlanWaypoints_Abridged.add(airway: airway, &fbb)
    FlightPlanWaypoints_Abridged.add(arpt: arpt, &fbb)
    FlightPlanWaypoints_Abridged.add(lat: lat, &fbb)
    FlightPlanWaypoints_Abridged.add(lon: lon, &fbb)
    FlightPlanWaypoints_Abridged.add(arId: arId, &fbb)
    FlightPlanWaypoints_Abridged.add(navaid: navaid, &fbb)
    FlightPlanWaypoints_Abridged.add(tacanChannel: tacanChannel, &fbb)
    FlightPlanWaypoints_Abridged.add(vorFreq: vorFreq, &fbb)
    FlightPlanWaypoints_Abridged.add(turbCat: turbCat, &fbb)
    FlightPlanWaypoints_Abridged.add(iceCat: iceCat, &fbb)
    FlightPlanWaypoints_Abridged.add(thunderCat: thunderCat, &fbb)
    FlightPlanWaypoints_Abridged.add(alt: alt, &fbb)
    FlightPlanWaypoints_Abridged.add(tempDev: tempDev, &fbb)
    FlightPlanWaypoints_Abridged.add(legFuelDegrade: legFuelDegrade, &fbb)
    FlightPlanWaypoints_Abridged.add(legMach: legMach, &fbb)
    FlightPlanWaypoints_Abridged.add(legMsnIndex: legMsnIndex, &fbb)
    FlightPlanWaypoints_Abridged.add(legDragIndex: legDragIndex, &fbb)
    FlightPlanWaypoints_Abridged.add(avgCalAirspeed: avgCalAirspeed, &fbb)
    FlightPlanWaypoints_Abridged.add(avgTrueAirspeed: avgTrueAirspeed, &fbb)
    FlightPlanWaypoints_Abridged.add(avgGroundSpeed: avgGroundSpeed, &fbb)
    FlightPlanWaypoints_Abridged.add(priFreq: priFreq, &fbb)
    FlightPlanWaypoints_Abridged.add(pointWindDir: pointWindDir, &fbb)
    FlightPlanWaypoints_Abridged.add(pointWindSpeed: pointWindSpeed, &fbb)
    FlightPlanWaypoints_Abridged.add(avgWindDir: avgWindDir, &fbb)
    FlightPlanWaypoints_Abridged.add(avgWindSpeed: avgWindSpeed, &fbb)
    FlightPlanWaypoints_Abridged.add(legWindFac: legWindFac, &fbb)
    FlightPlanWaypoints_Abridged.add(avgDriftAng: avgDriftAng, &fbb)
    FlightPlanWaypoints_Abridged.add(secFreq: secFreq, &fbb)
    FlightPlanWaypoints_Abridged.add(magCourse: magCourse, &fbb)
    FlightPlanWaypoints_Abridged.add(trueCourse: trueCourse, &fbb)
    FlightPlanWaypoints_Abridged.add(magHeading: magHeading, &fbb)
    FlightPlanWaypoints_Abridged.add(aaTacanChannel: aaTacanChannel, &fbb)
    FlightPlanWaypoints_Abridged.add(zoneDistance: zoneDistance, &fbb)
    FlightPlanWaypoints_Abridged.add(totalFlownDistance: totalFlownDistance, &fbb)
    FlightPlanWaypoints_Abridged.add(totalRemDistance: totalRemDistance, &fbb)
    FlightPlanWaypoints_Abridged.add(zoneTime: zoneTime, &fbb)
    FlightPlanWaypoints_Abridged.add(totalTime: totalTime, &fbb)
    FlightPlanWaypoints_Abridged.add(totalTimeRem: totalTimeRem, &fbb)
    FlightPlanWaypoints_Abridged.add(zoneFuel: zoneFuel, &fbb)
    FlightPlanWaypoints_Abridged.add(totalUsedFuel: totalUsedFuel, &fbb)
    FlightPlanWaypoints_Abridged.add(totalRemFuel: totalRemFuel, &fbb)
    FlightPlanWaypoints_Abridged.add(exchangedFuel: exchangedFuel, &fbb)
    FlightPlanWaypoints_Abridged.add(airDistance: airDistance, &fbb)
    FlightPlanWaypoints_Abridged.add(totalAirDistance: totalAirDistance, &fbb)
    FlightPlanWaypoints_Abridged.add(totalWeight: totalWeight, &fbb)
    FlightPlanWaypoints_Abridged.add(eta: eta, &fbb)
    FlightPlanWaypoints_Abridged.add(ata: ata, &fbb)
    FlightPlanWaypoints_Abridged.add(fuelFlow: fuelFlow, &fbb)
    FlightPlanWaypoints_Abridged.add(legAlternate: legAlternate, &fbb)
    FlightPlanWaypoints_Abridged.add(magVar: magVar, &fbb)
    FlightPlanWaypoints_Abridged.add(dayLowAlt: dayLowAlt, &fbb)
    FlightPlanWaypoints_Abridged.add(nightLowAlt: nightLowAlt, &fbb)
    FlightPlanWaypoints_Abridged.add(nvgLowAlt: nvgLowAlt, &fbb)
    return FlightPlanWaypoints_Abridged.endFlightPlanWaypoints_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.waypointName.p, fieldName: "waypointName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.waypointNum.p, fieldName: "waypointNum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.airway.p, fieldName: "airway", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.arpt.p, fieldName: "arpt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.arId.p, fieldName: "arId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.navaid.p, fieldName: "navaid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tacanChannel.p, fieldName: "tacanChannel", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.vorFreq.p, fieldName: "vorFreq", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.turbCat.p, fieldName: "turbCat", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.iceCat.p, fieldName: "iceCat", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.thunderCat.p, fieldName: "thunderCat", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.alt.p, fieldName: "alt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.tempDev.p, fieldName: "tempDev", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.legFuelDegrade.p, fieldName: "legFuelDegrade", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.legMach.p, fieldName: "legMach", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.legMsnIndex.p, fieldName: "legMsnIndex", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.legDragIndex.p, fieldName: "legDragIndex", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgCalAirspeed.p, fieldName: "avgCalAirspeed", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgTrueAirspeed.p, fieldName: "avgTrueAirspeed", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgGroundSpeed.p, fieldName: "avgGroundSpeed", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.priFreq.p, fieldName: "priFreq", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pointWindDir.p, fieldName: "pointWindDir", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pointWindSpeed.p, fieldName: "pointWindSpeed", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgWindDir.p, fieldName: "avgWindDir", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgWindSpeed.p, fieldName: "avgWindSpeed", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.legWindFac.p, fieldName: "legWindFac", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgDriftAng.p, fieldName: "avgDriftAng", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.secFreq.p, fieldName: "secFreq", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.magCourse.p, fieldName: "magCourse", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.trueCourse.p, fieldName: "trueCourse", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.magHeading.p, fieldName: "magHeading", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.aaTacanChannel.p, fieldName: "aaTacanChannel", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.zoneDistance.p, fieldName: "zoneDistance", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.totalFlownDistance.p, fieldName: "totalFlownDistance", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.totalRemDistance.p, fieldName: "totalRemDistance", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.zoneTime.p, fieldName: "zoneTime", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.totalTime.p, fieldName: "totalTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.totalTimeRem.p, fieldName: "totalTimeRem", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.zoneFuel.p, fieldName: "zoneFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.totalUsedFuel.p, fieldName: "totalUsedFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.totalRemFuel.p, fieldName: "totalRemFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.exchangedFuel.p, fieldName: "exchangedFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.airDistance.p, fieldName: "airDistance", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.totalAirDistance.p, fieldName: "totalAirDistance", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.totalWeight.p, fieldName: "totalWeight", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.eta.p, fieldName: "eta", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ata.p, fieldName: "ata", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fuelFlow.p, fieldName: "fuelFlow", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.legAlternate.p, fieldName: "legAlternate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.magVar.p, fieldName: "magVar", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dayLowAlt.p, fieldName: "dayLowAlt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.nightLowAlt.p, fieldName: "nightLowAlt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.nvgLowAlt.p, fieldName: "nvgLowAlt", required: false, type: Double.self)
    _v.finish()
  }
}

