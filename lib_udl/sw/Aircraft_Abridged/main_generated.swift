// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Aircraft_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Aircraft_Abridged_dataMode_Enum { return .exercise }
  public static var min: Aircraft_Abridged_dataMode_Enum { return .real }
}


///  /// General aircraft designation, characteristics, and capabilities. The aircraft schema contains static data of specific aircraft, including tail number, cruise speed, max speed, and minimum required runway length, etc.
public struct Aircraft_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Aircraft_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idEntity = 8
    case aircraftMds = 10
    case tailNumber = 12
    case serialNumber = 14
    case owner = 16
    case command = 18
    case category = 20
    case dtd = 22
    case cruiseSpeed = 24
    case maxSpeed = 26
    case minReqRunwayM = 28
    case minReqRunwayFt = 30
    case nominalTatime = 32
    case notes = 34
    case createdAt = 36
    case createdBy = 38
    case sourceDl = 40
    case source = 42
    case origin = 44
    case dataMode = 46
    case origNetwork = 48
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  ID of the parent entity for this aircraft.
  ///  Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idEntity: String? { let o = _accessor.offset(VTOFFSET.idEntity.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idEntitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idEntity.v) }
  ///  The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft.  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  ///  Example: /// Example: E-2C HAWKEYE
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var aircraftMds: String? { let o = _accessor.offset(VTOFFSET.aircraftMds.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aircraftMdsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aircraftMds.v) }
  ///  The tail number of this aircraft.
  ///  Example: /// Example: N702JG
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var tailNumber: String? { let o = _accessor.offset(VTOFFSET.tailNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tailNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tailNumber.v) }
  ///  Full serial number of the aircraft.
  ///  Example: /// Example: 7007187
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var serialNumber: String? { let o = _accessor.offset(VTOFFSET.serialNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var serialNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.serialNumber.v) }
  ///  The wing or unit that owns the aircraft.
  ///  Example: /// Example: 437AW
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var owner: String? { let o = _accessor.offset(VTOFFSET.owner.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ownerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.owner.v) }
  ///  The Air Force major command (MAJCOM) overseeing the aircraft.
  ///  Example: /// Example: HQACC
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var command: String? { let o = _accessor.offset(VTOFFSET.command.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var commandSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.command.v) }
  ///  The category of aircraft (e.g. M = Military, C = Commercial).
  ///  Example: /// Example: M
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var category: String? { let o = _accessor.offset(VTOFFSET.category.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var categorySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.category.v) }
  ///  Military data network data transfer device ID for this aircraft.
  ///  Example: /// Example: 005
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var dtd: String? { let o = _accessor.offset(VTOFFSET.dtd.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dtdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dtd.v) }
  ///  The cruise speed of the aircraft, in kilometers/hour.
  ///  Example: /// Example: 915
  ///  Constraints: No constraints specified.
  public var cruiseSpeed: Double { let o = _accessor.offset(VTOFFSET.cruiseSpeed.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The maximum air speed of the aircraft, in kilometers/hour.
  ///  Example: /// Example: 2655.1
  ///  Constraints: No constraints specified.
  public var maxSpeed: Double { let o = _accessor.offset(VTOFFSET.maxSpeed.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The minimum length of runway required to land this aircraft, in meters. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 1000
  ///  Constraints: No constraints specified.
  public var minReqRunwayM: Int32 { let o = _accessor.offset(VTOFFSET.minReqRunwayM.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The minimum length of runway required to land this aircraft, in feet. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  ///  Example: /// Example: 3000
  ///  Constraints: No constraints specified.
  public var minReqRunwayFt: Int32 { let o = _accessor.offset(VTOFFSET.minReqRunwayFt.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The nominal turnaround time for this aircraft, in minutes.
  ///  Example: /// Example: 500
  ///  Constraints: No constraints specified.
  public var nominalTatime: Int32 { let o = _accessor.offset(VTOFFSET.nominalTatime.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional notes/comments for this aircraft.
  ///  Example: /// Example: Notes for this aircraft
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var dataMode: Aircraft_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Aircraft_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startAircraft_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 23) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idEntity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idEntity, at: VTOFFSET.idEntity.p) }
  public static func add(aircraftMds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aircraftMds, at: VTOFFSET.aircraftMds.p) }
  public static func add(tailNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tailNumber, at: VTOFFSET.tailNumber.p) }
  public static func add(serialNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: serialNumber, at: VTOFFSET.serialNumber.p) }
  public static func add(owner: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: owner, at: VTOFFSET.owner.p) }
  public static func add(command: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: command, at: VTOFFSET.command.p) }
  public static func add(category: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: category, at: VTOFFSET.category.p) }
  public static func add(dtd: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dtd, at: VTOFFSET.dtd.p) }
  public static func add(cruiseSpeed: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cruiseSpeed, def: 0.0, at: VTOFFSET.cruiseSpeed.p) }
  public static func add(maxSpeed: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxSpeed, def: 0.0, at: VTOFFSET.maxSpeed.p) }
  public static func add(minReqRunwayM: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: minReqRunwayM, def: 0, at: VTOFFSET.minReqRunwayM.p) }
  public static func add(minReqRunwayFt: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: minReqRunwayFt, def: 0, at: VTOFFSET.minReqRunwayFt.p) }
  public static func add(nominalTatime: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nominalTatime, def: 0, at: VTOFFSET.nominalTatime.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: Aircraft_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endAircraft_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAircraft_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idEntityOffset idEntity: Offset = Offset(),
    aircraftMdsOffset aircraftMds: Offset = Offset(),
    tailNumberOffset tailNumber: Offset = Offset(),
    serialNumberOffset serialNumber: Offset = Offset(),
    ownerOffset owner: Offset = Offset(),
    commandOffset command: Offset = Offset(),
    categoryOffset category: Offset = Offset(),
    dtdOffset dtd: Offset = Offset(),
    cruiseSpeed: Double = 0.0,
    maxSpeed: Double = 0.0,
    minReqRunwayM: Int32 = 0,
    minReqRunwayFt: Int32 = 0,
    nominalTatime: Int32 = 0,
    notesOffset notes: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: Aircraft_Abridged_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = Aircraft_Abridged.startAircraft_Abridged(&fbb)
    Aircraft_Abridged.add(id: id, &fbb)
    Aircraft_Abridged.add(classificationMarking: classificationMarking, &fbb)
    Aircraft_Abridged.add(idEntity: idEntity, &fbb)
    Aircraft_Abridged.add(aircraftMds: aircraftMds, &fbb)
    Aircraft_Abridged.add(tailNumber: tailNumber, &fbb)
    Aircraft_Abridged.add(serialNumber: serialNumber, &fbb)
    Aircraft_Abridged.add(owner: owner, &fbb)
    Aircraft_Abridged.add(command: command, &fbb)
    Aircraft_Abridged.add(category: category, &fbb)
    Aircraft_Abridged.add(dtd: dtd, &fbb)
    Aircraft_Abridged.add(cruiseSpeed: cruiseSpeed, &fbb)
    Aircraft_Abridged.add(maxSpeed: maxSpeed, &fbb)
    Aircraft_Abridged.add(minReqRunwayM: minReqRunwayM, &fbb)
    Aircraft_Abridged.add(minReqRunwayFt: minReqRunwayFt, &fbb)
    Aircraft_Abridged.add(nominalTatime: nominalTatime, &fbb)
    Aircraft_Abridged.add(notes: notes, &fbb)
    Aircraft_Abridged.add(createdAt: createdAt, &fbb)
    Aircraft_Abridged.add(createdBy: createdBy, &fbb)
    Aircraft_Abridged.add(sourceDl: sourceDl, &fbb)
    Aircraft_Abridged.add(source: source, &fbb)
    Aircraft_Abridged.add(origin: origin, &fbb)
    Aircraft_Abridged.add(dataMode: dataMode, &fbb)
    Aircraft_Abridged.add(origNetwork: origNetwork, &fbb)
    return Aircraft_Abridged.endAircraft_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idEntity.p, fieldName: "idEntity", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aircraftMds.p, fieldName: "aircraftMds", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tailNumber.p, fieldName: "tailNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.serialNumber.p, fieldName: "serialNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.owner.p, fieldName: "owner", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.command.p, fieldName: "command", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.category.p, fieldName: "category", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dtd.p, fieldName: "dtd", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cruiseSpeed.p, fieldName: "cruiseSpeed", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxSpeed.p, fieldName: "maxSpeed", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.minReqRunwayM.p, fieldName: "minReqRunwayM", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.minReqRunwayFt.p, fieldName: "minReqRunwayFt", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.nominalTatime.p, fieldName: "nominalTatime", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Aircraft_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

