// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum RFObservationDetails_Full_polarityType_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case h = 0
  ///  No description available.
  case v = 1
  ///  No description available.
  case r = 2
  ///  No description available.
  case l = 3

  public static var max: RFObservationDetails_Full_polarityType_Enum { return .l }
  public static var min: RFObservationDetails_Full_polarityType_Enum { return .h }
}


public enum RFObservationDetails_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: RFObservationDetails_Full_dataMode_Enum { return .exercise }
  public static var min: RFObservationDetails_Full_dataMode_Enum { return .real }
}


///  /// Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).
public struct RFObservationDetails_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "RFOB" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: RFObservationDetails_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case obTime = 8
    case idOnOrbit = 10
    case idSensor = 12
    case type = 14
    case satNo = 16
    case taskId = 18
    case transactionId = 20
    case trackId = 22
    case origObjectId = 24
    case origSensorId = 26
    case uct = 28
    case transponder = 30
    case azimuth = 32
    case azimuthUnc = 34
    case azimuthRate = 36
    case elevation = 38
    case elevationUnc = 40
    case elevationRate = 42
    case range = 44
    case rangeUnc = 46
    case rangeRate = 48
    case rangeRateUnc = 50
    case trackRange = 52
    case senlat = 54
    case senlon = 56
    case senalt = 58
    case elnot = 60
    case frequency = 62
    case nominalFrequency = 64
    case startFrequency = 66
    case endFrequency = 68
    case relativeCarrierPower = 70
    case spectrumAnalyzerPower = 72
    case relativeNoiseFloor = 74
    case referenceLevel = 76
    case pgri = 78
    case confidence = 80
    case incoming = 82
    case switchPoint = 84
    case baudRate = 86
    case snr = 88
    case nominalSnr = 90
    case polarity = 92
    case polarityType = 94
    case channel = 96
    case powerOverNoise = 98
    case nominalPowerOverNoise = 100
    case bandwidth = 102
    case nominalBandwidth = 104
    case resolutionBandwidth = 106
    case videoBandwidth = 108
    case eirp = 110
    case nominalEirp = 112
    case minPsd = 114
    case maxPsd = 116
    case frequencyShift = 118
    case peak = 120
    case antennaName = 122
    case detectionStatus = 124
    case collectionMode = 126
    case rawFileUri = 128
    case source = 130
    case origin = 132
    case dataMode = 134
    case tags = 136
    case createdAt = 138
    case createdBy = 140
    case noisePwrDensity = 142
    case carrierStandard = 144
    case modulation = 146
    case innerCodingRate = 148
    case outerCodingRate = 150
    case transmitFilterType = 152
    case transmitFilterRollOff = 154
    case symbolToNoiseRatio = 156
    case bitErrorRate = 158
    case origNetwork = 160
    case sourceDl = 162
    case onOrbit = 164
    case descriptor = 166
    case url = 168
    case frequencies = 170
    case powers = 172
    case snrs = 174
    case confidences = 176
    case detectionStatuses = 178
    case chipRates = 180
    case codeTaps = 182
    case codeFills = 184
    case codeLengths = 186
    case pnOrders = 188
    case signalIds = 190
    case baudRates = 192
    case telemetryIds = 194
    case constellationXpoints = 196
    case constellationYpoints = 198
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: RFOBSERVATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Ob detection time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var obTime: String? { let o = _accessor.offset(VTOFFSET.obTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obTime.v) }
  ///  Unique identifier of the target on-orbit object, if correlated.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Unique identifier of the reporting sensor.
  ///  Example: /// Example: SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).
  ///  Example: /// Example: RF
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 32258
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional identifier to indicate the specific tasking which produced this observation.
  ///  Example: /// Example: TASK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var taskId: String? { let o = _accessor.offset(VTOFFSET.taskId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskId.v) }
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var transactionId: String? { let o = _accessor.offset(VTOFFSET.transactionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transactionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transactionId.v) }
  ///  Optional identifier of the track to which this observation belongs.
  ///  Example: /// Example: TRACK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var trackId: String? { let o = _accessor.offset(VTOFFSET.trackId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var trackIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.trackId.v) }
  ///  Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: ORIG-OBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIG-SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origSensorId: String? { let o = _accessor.offset(VTOFFSET.origSensorId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSensorIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSensorId.v) }
  ///  Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var uct: Bool { let o = _accessor.offset(VTOFFSET.uct.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Optional identifier provided by observation source to indicate the transponder used for this measurement.
  ///  Example: /// Example: TRANSPONDER-A
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var transponder: String? { let o = _accessor.offset(VTOFFSET.transponder.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transponderSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transponder.v) }
  ///  azimuth angle in degrees and J2000 coordinate frame.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var azimuth: Double { let o = _accessor.offset(VTOFFSET.azimuth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the azimuth angle measurement, in degrees.
  ///  Example: /// Example: 2.1
  ///  Constraints: No constraints specified.
  public var azimuthUnc: Double { let o = _accessor.offset(VTOFFSET.azimuthUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Rate of change of the azimuth in degrees per second.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var azimuthRate: Double { let o = _accessor.offset(VTOFFSET.azimuthRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  elevation in degrees and J2000 coordinate frame.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var elevation: Double { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the elevation angle measurement, in degrees.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var elevationUnc: Double { let o = _accessor.offset(VTOFFSET.elevationUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Rate of change of the elevation in degrees per second.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var elevationRate: Double { let o = _accessor.offset(VTOFFSET.elevationRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Target range in km.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var range: Double { let o = _accessor.offset(VTOFFSET.range.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the range measurement, in kilometers.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var rangeUnc: Double { let o = _accessor.offset(VTOFFSET.rangeUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Rate of change of the range in km/sec.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var rangeRate: Double { let o = _accessor.offset(VTOFFSET.rangeRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the range rate measurement, in kilometers/second.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var rangeRateUnc: Double { let o = _accessor.offset(VTOFFSET.rangeRateUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Target track or apparent range in km.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var trackRange: Double { let o = _accessor.offset(VTOFFSET.trackRange.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.2
  ///  Constraints: No constraints specified.
  public var senlat: Double { let o = _accessor.offset(VTOFFSET.senlat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 80.3
  ///  Constraints: No constraints specified.
  public var senlon: Double { let o = _accessor.offset(VTOFFSET.senlon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var senalt: Double { let o = _accessor.offset(VTOFFSET.senalt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  ELINT notation.
  ///  Example: /// Example: Ex. ELINT
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var elnot: String? { let o = _accessor.offset(VTOFFSET.elnot.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var elnotSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.elnot.v) }
  ///  Center carrier frequency in Hz.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var frequency: Double { let o = _accessor.offset(VTOFFSET.frequency.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Nominal or expected center carrier frequency in Hz.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var nominalFrequency: Double { let o = _accessor.offset(VTOFFSET.nominalFrequency.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Start carrier frequency in Hz.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var startFrequency: Double { let o = _accessor.offset(VTOFFSET.startFrequency.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  End carrier frequency in Hz.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var endFrequency: Double { let o = _accessor.offset(VTOFFSET.endFrequency.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Measured power of the center carrier frequency in dBW.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var relativeCarrierPower: Double { let o = _accessor.offset(VTOFFSET.relativeCarrierPower.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Measured spectrum analyzer power of the center carrier frequency in dBW.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var spectrumAnalyzerPower: Double { let o = _accessor.offset(VTOFFSET.spectrumAnalyzerPower.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var relativeNoiseFloor: Double { let o = _accessor.offset(VTOFFSET.relativeNoiseFloor.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Reference signal level, in dBW.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var referenceLevel: Double { let o = _accessor.offset(VTOFFSET.referenceLevel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var pgri: Double { let o = _accessor.offset(VTOFFSET.pgri.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Confidence in the signal and its measurements and characterization.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var confidence: Double { let o = _accessor.offset(VTOFFSET.confidence.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  True if the signal is incoming, false if outgoing.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var incoming: Bool { let o = _accessor.offset(VTOFFSET.incoming.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Switch Point of the RFObservation record.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var switchPoint: Int32 { let o = _accessor.offset(VTOFFSET.switchPoint.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var baudRate: Double { let o = _accessor.offset(VTOFFSET.baudRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Signal to noise ratio, in dB.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var snr: Double { let o = _accessor.offset(VTOFFSET.snr.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Nominal or expected signal to noise ratio, in dB.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var nominalSnr: Double { let o = _accessor.offset(VTOFFSET.nominalSnr.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The antenna pointing dependent polarizer angle, in degrees.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var polarity: Double { let o = _accessor.offset(VTOFFSET.polarity.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
  ///  Example: /// Example: H
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var polarityType: RFObservationDetails_Full_polarityType_Enum { let o = _accessor.offset(VTOFFSET.polarityType.v); return o == 0 ? .h : RFObservationDetails_Full_polarityType_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .h }
  ///  Channel of the RFObservation record.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var channel: Int32 { let o = _accessor.offset(VTOFFSET.channel.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Measured carrier power over noise (dBW/Hz).
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var powerOverNoise: Double { let o = _accessor.offset(VTOFFSET.powerOverNoise.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Expected carrier power over noise (dBW/Hz).
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var nominalPowerOverNoise: Double { let o = _accessor.offset(VTOFFSET.nominalPowerOverNoise.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Measured bandwidth in Hz.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var bandwidth: Double { let o = _accessor.offset(VTOFFSET.bandwidth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Expected bandwidth in Hz.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var nominalBandwidth: Double { let o = _accessor.offset(VTOFFSET.nominalBandwidth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Resolution bandwidth in Hz.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var resolutionBandwidth: Double { let o = _accessor.offset(VTOFFSET.resolutionBandwidth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Video bandwidth in Hz.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var videoBandwidth: Double { let o = _accessor.offset(VTOFFSET.videoBandwidth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Measured Equivalent Isotopically Radiated Power in dBW.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var eirp: Double { let o = _accessor.offset(VTOFFSET.eirp.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Expected Equivalent Isotopically Radiated Power in dBW.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var nominalEirp: Double { let o = _accessor.offset(VTOFFSET.nominalEirp.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Minimum measured PSD value of the trace in dBW.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var minPsd: Double { let o = _accessor.offset(VTOFFSET.minPsd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum measured PSD value of the trace in dBW.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var maxPsd: Double { let o = _accessor.offset(VTOFFSET.maxPsd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Frequency Shift of the RFObservation record.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var frequencyShift: Double { let o = _accessor.offset(VTOFFSET.frequencyShift.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Peak of the RFObservation record.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var peak: Bool { let o = _accessor.offset(VTOFFSET.peak.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Antenna name of the RFObservation record.
  ///  Example: /// Example: Antenna1
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var antennaName: String? { let o = _accessor.offset(VTOFFSET.antennaName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var antennaNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.antennaName.v) }
  ///  Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
  ///  Example: /// Example: DETECTED
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var detectionStatus: String? { let o = _accessor.offset(VTOFFSET.detectionStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var detectionStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.detectionStatus.v) }
  ///  Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
  ///  Example: /// Example: SURVEY
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var collectionMode: String? { let o = _accessor.offset(VTOFFSET.collectionMode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var collectionModeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.collectionMode.v) }
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var rawFileUri: String? { let o = _accessor.offset(VTOFFSET.rawFileUri.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rawFileUriSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rawFileUri.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: RFObservationDetails_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : RFObservationDetails_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  public var hasTags: Bool { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? false : true }
  public var tagsCount: Int32 { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func tags(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Noise power density, in dBW-Hz.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var noisePwrDensity: Double { let o = _accessor.offset(VTOFFSET.noisePwrDensity.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Carrier standard (e.g. DVB-S2, 802.11g, etc.).
  ///  Example: /// Example: DVB-S2
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var carrierStandard: String? { let o = _accessor.offset(VTOFFSET.carrierStandard.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var carrierStandardSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.carrierStandard.v) }
  ///  Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).
  ///  Example: /// Example: Auto
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var modulation: String? { let o = _accessor.offset(VTOFFSET.modulation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var modulationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.modulation.v) }
  ///  Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
  ///  Example: /// Example: 7
  ///  Constraints: No constraints specified.
  public var innerCodingRate: Int32 { let o = _accessor.offset(VTOFFSET.innerCodingRate.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  public var outerCodingRate: Int32 { let o = _accessor.offset(VTOFFSET.outerCodingRate.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Transmit pulse shaping filter typ (e.g. RRC).
  ///  Example: /// Example: RRC
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var transmitFilterType: String? { let o = _accessor.offset(VTOFFSET.transmitFilterType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transmitFilterTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transmitFilterType.v) }
  ///  Transmit pulse shaping filter roll-off value.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var transmitFilterRollOff: Double { let o = _accessor.offset(VTOFFSET.transmitFilterRollOff.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Symbol to noise ratio, in dB.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var symbolToNoiseRatio: Double { let o = _accessor.offset(VTOFFSET.symbolToNoiseRatio.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The ratio of bit errors per number of received bits.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var bitErrorRate: Double { let o = _accessor.offset(VTOFFSET.bitErrorRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var onOrbit: String? { let o = _accessor.offset(VTOFFSET.onOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var onOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.onOrbit.v) }
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: descriptor
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var descriptor: String? { let o = _accessor.offset(VTOFFSET.descriptor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.descriptor.v) }
  ///  Optional URL containing additional information on this observation.
  ///  Example: /// Example: https://some-url
  ///  Constraints: Minimum length = 0, Maximum length = 2048
  public var url: String? { let o = _accessor.offset(VTOFFSET.url.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var urlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.url.v) }
  ///  Array of individual PSD frequencies of the signal in Hz. This array should correspond with the same-sized array of powers.
  ///  Example: /// Example: [1.1, 2.2]
  ///  Constraints: No constraints specified.
  public var hasFrequencies: Bool { let o = _accessor.offset(VTOFFSET.frequencies.v); return o == 0 ? false : true }
  public var frequenciesCount: Int32 { let o = _accessor.offset(VTOFFSET.frequencies.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func frequencies(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.frequencies.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of individual measured PSD powers of the signal in dBW. This array should correspond with the same-sized array of frequencies.
  ///  Example: /// Example: [1.1, 2.2]
  ///  Constraints: No constraints specified.
  public var hasPowers: Bool { let o = _accessor.offset(VTOFFSET.powers.v); return o == 0 ? false : true }
  public var powersCount: Int32 { let o = _accessor.offset(VTOFFSET.powers.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func powers(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.powers.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of signal to noise ratios of the signals, in dB.
  ///  Example: /// Example: [1.1, 2.2]
  ///  Constraints: No constraints specified.
  public var hasSnrs: Bool { let o = _accessor.offset(VTOFFSET.snrs.v); return o == 0 ? false : true }
  public var snrsCount: Int32 { let o = _accessor.offset(VTOFFSET.snrs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func snrs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.snrs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of measurement confidences.
  ///  Example: /// Example: [1.1, 2.2]
  ///  Constraints: No constraints specified.
  public var hasConfidences: Bool { let o = _accessor.offset(VTOFFSET.confidences.v); return o == 0 ? false : true }
  public var confidencesCount: Int32 { let o = _accessor.offset(VTOFFSET.confidences.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func confidences(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.confidences.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of detection statuses (e.g. DETECTED, CARRIER_DETECTED, NOT_DETECTED) for each measured signal.
  ///  Example: /// Example: ['DETECTED']
  ///  Constraints: No constraints specified.
  public var hasDetectionStatuses: Bool { let o = _accessor.offset(VTOFFSET.detectionStatuses.v); return o == 0 ? false : true }
  public var detectionStatusesCount: Int32 { let o = _accessor.offset(VTOFFSET.detectionStatuses.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func detectionStatuses(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.detectionStatuses.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of chipRates.
  ///  Example: /// Example: [1.1, 2.2]
  ///  Constraints: No constraints specified.
  public var hasChipRates: Bool { let o = _accessor.offset(VTOFFSET.chipRates.v); return o == 0 ? false : true }
  public var chipRatesCount: Int32 { let o = _accessor.offset(VTOFFSET.chipRates.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func chipRates(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.chipRates.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of code taps.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  public var hasCodeTaps: Bool { let o = _accessor.offset(VTOFFSET.codeTaps.v); return o == 0 ? false : true }
  public var codeTapsCount: Int32 { let o = _accessor.offset(VTOFFSET.codeTaps.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func codeTaps(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.codeTaps.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of code fills.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  public var hasCodeFills: Bool { let o = _accessor.offset(VTOFFSET.codeFills.v); return o == 0 ? false : true }
  public var codeFillsCount: Int32 { let o = _accessor.offset(VTOFFSET.codeFills.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func codeFills(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.codeFills.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of code lengths.
  ///  Example: /// Example: [1.1, 2.2]
  ///  Constraints: No constraints specified.
  public var hasCodeLengths: Bool { let o = _accessor.offset(VTOFFSET.codeLengths.v); return o == 0 ? false : true }
  public var codeLengthsCount: Int32 { let o = _accessor.offset(VTOFFSET.codeLengths.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func codeLengths(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.codeLengths.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of pnOrder.
  ///  Example: /// Example: [1, 2]
  ///  Constraints: No constraints specified.
  public var hasPnOrders: Bool { let o = _accessor.offset(VTOFFSET.pnOrders.v); return o == 0 ? false : true }
  public var pnOrdersCount: Int32 { let o = _accessor.offset(VTOFFSET.pnOrders.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func pnOrders(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.pnOrders.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of optional source provided identifiers of the measurements/signals.
  ///  Example: /// Example: ['ID1', 'ID2']
  ///  Constraints: No constraints specified.
  public var hasSignalIds: Bool { let o = _accessor.offset(VTOFFSET.signalIds.v); return o == 0 ? false : true }
  public var signalIdsCount: Int32 { let o = _accessor.offset(VTOFFSET.signalIds.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func signalIds(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.signalIds.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of measured signal baud rates.
  ///  Example: /// Example: [1.1, 2.2]
  ///  Constraints: No constraints specified.
  public var hasBaudRates: Bool { let o = _accessor.offset(VTOFFSET.baudRates.v); return o == 0 ? false : true }
  public var baudRatesCount: Int32 { let o = _accessor.offset(VTOFFSET.baudRates.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func baudRates(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.baudRates.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of optional source provided telemetry identifiers of the measurements/signals.
  ///  Example: /// Example: ['ID1', 'ID2']
  ///  Constraints: No constraints specified.
  public var hasTelemetryIds: Bool { let o = _accessor.offset(VTOFFSET.telemetryIds.v); return o == 0 ? false : true }
  public var telemetryIdsCount: Int32 { let o = _accessor.offset(VTOFFSET.telemetryIds.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func telemetryIds(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.telemetryIds.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of individual x-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationYPoints.
  ///  Example: /// Example: [1.1, 2.2]
  ///  Constraints: No constraints specified.
  public var hasConstellationXpoints: Bool { let o = _accessor.offset(VTOFFSET.constellationXpoints.v); return o == 0 ? false : true }
  public var constellationXpointsCount: Int32 { let o = _accessor.offset(VTOFFSET.constellationXpoints.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func constellationXpoints(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.constellationXpoints.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of individual y-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationXPoints.
  ///  Example: /// Example: [1.1, 2.2]
  ///  Constraints: No constraints specified.
  public var hasConstellationYpoints: Bool { let o = _accessor.offset(VTOFFSET.constellationYpoints.v); return o == 0 ? false : true }
  public var constellationYpointsCount: Int32 { let o = _accessor.offset(VTOFFSET.constellationYpoints.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func constellationYpoints(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.constellationYpoints.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startRFObservationDetails_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 98) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(obTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obTime, at: VTOFFSET.obTime.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(taskId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskId, at: VTOFFSET.taskId.p) }
  public static func add(transactionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transactionId, at: VTOFFSET.transactionId.p) }
  public static func add(trackId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trackId, at: VTOFFSET.trackId.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(origSensorId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSensorId, at: VTOFFSET.origSensorId.p) }
  public static func add(uct: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: uct, def: false,
   at: VTOFFSET.uct.p) }
  public static func add(transponder: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transponder, at: VTOFFSET.transponder.p) }
  public static func add(azimuth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuth, def: 0.0, at: VTOFFSET.azimuth.p) }
  public static func add(azimuthUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuthUnc, def: 0.0, at: VTOFFSET.azimuthUnc.p) }
  public static func add(azimuthRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuthRate, def: 0.0, at: VTOFFSET.azimuthRate.p) }
  public static func add(elevation: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func add(elevationUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevationUnc, def: 0.0, at: VTOFFSET.elevationUnc.p) }
  public static func add(elevationRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevationRate, def: 0.0, at: VTOFFSET.elevationRate.p) }
  public static func add(range: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: range, def: 0.0, at: VTOFFSET.range.p) }
  public static func add(rangeUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rangeUnc, def: 0.0, at: VTOFFSET.rangeUnc.p) }
  public static func add(rangeRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rangeRate, def: 0.0, at: VTOFFSET.rangeRate.p) }
  public static func add(rangeRateUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rangeRateUnc, def: 0.0, at: VTOFFSET.rangeRateUnc.p) }
  public static func add(trackRange: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: trackRange, def: 0.0, at: VTOFFSET.trackRange.p) }
  public static func add(senlat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senlat, def: 0.0, at: VTOFFSET.senlat.p) }
  public static func add(senlon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senlon, def: 0.0, at: VTOFFSET.senlon.p) }
  public static func add(senalt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senalt, def: 0.0, at: VTOFFSET.senalt.p) }
  public static func add(elnot: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: elnot, at: VTOFFSET.elnot.p) }
  public static func add(frequency: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: frequency, def: 0.0, at: VTOFFSET.frequency.p) }
  public static func add(nominalFrequency: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nominalFrequency, def: 0.0, at: VTOFFSET.nominalFrequency.p) }
  public static func add(startFrequency: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: startFrequency, def: 0.0, at: VTOFFSET.startFrequency.p) }
  public static func add(endFrequency: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: endFrequency, def: 0.0, at: VTOFFSET.endFrequency.p) }
  public static func add(relativeCarrierPower: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: relativeCarrierPower, def: 0.0, at: VTOFFSET.relativeCarrierPower.p) }
  public static func add(spectrumAnalyzerPower: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: spectrumAnalyzerPower, def: 0.0, at: VTOFFSET.spectrumAnalyzerPower.p) }
  public static func add(relativeNoiseFloor: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: relativeNoiseFloor, def: 0.0, at: VTOFFSET.relativeNoiseFloor.p) }
  public static func add(referenceLevel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: referenceLevel, def: 0.0, at: VTOFFSET.referenceLevel.p) }
  public static func add(pgri: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pgri, def: 0.0, at: VTOFFSET.pgri.p) }
  public static func add(confidence: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: confidence, def: 0.0, at: VTOFFSET.confidence.p) }
  public static func add(incoming: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: incoming, def: false,
   at: VTOFFSET.incoming.p) }
  public static func add(switchPoint: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: switchPoint, def: 0, at: VTOFFSET.switchPoint.p) }
  public static func add(baudRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: baudRate, def: 0.0, at: VTOFFSET.baudRate.p) }
  public static func add(snr: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: snr, def: 0.0, at: VTOFFSET.snr.p) }
  public static func add(nominalSnr: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nominalSnr, def: 0.0, at: VTOFFSET.nominalSnr.p) }
  public static func add(polarity: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: polarity, def: 0.0, at: VTOFFSET.polarity.p) }
  public static func add(polarityType: RFObservationDetails_Full_polarityType_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: polarityType.rawValue, def: 0, at: VTOFFSET.polarityType.p) }
  public static func add(channel: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: channel, def: 0, at: VTOFFSET.channel.p) }
  public static func add(powerOverNoise: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: powerOverNoise, def: 0.0, at: VTOFFSET.powerOverNoise.p) }
  public static func add(nominalPowerOverNoise: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nominalPowerOverNoise, def: 0.0, at: VTOFFSET.nominalPowerOverNoise.p) }
  public static func add(bandwidth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bandwidth, def: 0.0, at: VTOFFSET.bandwidth.p) }
  public static func add(nominalBandwidth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nominalBandwidth, def: 0.0, at: VTOFFSET.nominalBandwidth.p) }
  public static func add(resolutionBandwidth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: resolutionBandwidth, def: 0.0, at: VTOFFSET.resolutionBandwidth.p) }
  public static func add(videoBandwidth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: videoBandwidth, def: 0.0, at: VTOFFSET.videoBandwidth.p) }
  public static func add(eirp: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: eirp, def: 0.0, at: VTOFFSET.eirp.p) }
  public static func add(nominalEirp: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nominalEirp, def: 0.0, at: VTOFFSET.nominalEirp.p) }
  public static func add(minPsd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: minPsd, def: 0.0, at: VTOFFSET.minPsd.p) }
  public static func add(maxPsd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxPsd, def: 0.0, at: VTOFFSET.maxPsd.p) }
  public static func add(frequencyShift: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: frequencyShift, def: 0.0, at: VTOFFSET.frequencyShift.p) }
  public static func add(peak: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: peak, def: false,
   at: VTOFFSET.peak.p) }
  public static func add(antennaName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: antennaName, at: VTOFFSET.antennaName.p) }
  public static func add(detectionStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: detectionStatus, at: VTOFFSET.detectionStatus.p) }
  public static func add(collectionMode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: collectionMode, at: VTOFFSET.collectionMode.p) }
  public static func add(rawFileUri: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rawFileUri, at: VTOFFSET.rawFileUri.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: RFObservationDetails_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func addVectorOf(tags: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tags, at: VTOFFSET.tags.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(noisePwrDensity: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: noisePwrDensity, def: 0.0, at: VTOFFSET.noisePwrDensity.p) }
  public static func add(carrierStandard: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: carrierStandard, at: VTOFFSET.carrierStandard.p) }
  public static func add(modulation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: modulation, at: VTOFFSET.modulation.p) }
  public static func add(innerCodingRate: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: innerCodingRate, def: 0, at: VTOFFSET.innerCodingRate.p) }
  public static func add(outerCodingRate: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: outerCodingRate, def: 0, at: VTOFFSET.outerCodingRate.p) }
  public static func add(transmitFilterType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transmitFilterType, at: VTOFFSET.transmitFilterType.p) }
  public static func add(transmitFilterRollOff: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: transmitFilterRollOff, def: 0.0, at: VTOFFSET.transmitFilterRollOff.p) }
  public static func add(symbolToNoiseRatio: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: symbolToNoiseRatio, def: 0.0, at: VTOFFSET.symbolToNoiseRatio.p) }
  public static func add(bitErrorRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bitErrorRate, def: 0.0, at: VTOFFSET.bitErrorRate.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(onOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: onOrbit, at: VTOFFSET.onOrbit.p) }
  public static func add(descriptor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: descriptor, at: VTOFFSET.descriptor.p) }
  public static func add(url: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: url, at: VTOFFSET.url.p) }
  public static func addVectorOf(frequencies: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: frequencies, at: VTOFFSET.frequencies.p) }
  public static func addVectorOf(powers: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: powers, at: VTOFFSET.powers.p) }
  public static func addVectorOf(snrs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snrs, at: VTOFFSET.snrs.p) }
  public static func addVectorOf(confidences: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: confidences, at: VTOFFSET.confidences.p) }
  public static func addVectorOf(detectionStatuses: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: detectionStatuses, at: VTOFFSET.detectionStatuses.p) }
  public static func addVectorOf(chipRates: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: chipRates, at: VTOFFSET.chipRates.p) }
  public static func addVectorOf(codeTaps: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: codeTaps, at: VTOFFSET.codeTaps.p) }
  public static func addVectorOf(codeFills: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: codeFills, at: VTOFFSET.codeFills.p) }
  public static func addVectorOf(codeLengths: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: codeLengths, at: VTOFFSET.codeLengths.p) }
  public static func addVectorOf(pnOrders: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pnOrders, at: VTOFFSET.pnOrders.p) }
  public static func addVectorOf(signalIds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: signalIds, at: VTOFFSET.signalIds.p) }
  public static func addVectorOf(baudRates: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: baudRates, at: VTOFFSET.baudRates.p) }
  public static func addVectorOf(telemetryIds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: telemetryIds, at: VTOFFSET.telemetryIds.p) }
  public static func addVectorOf(constellationXpoints: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: constellationXpoints, at: VTOFFSET.constellationXpoints.p) }
  public static func addVectorOf(constellationYpoints: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: constellationYpoints, at: VTOFFSET.constellationYpoints.p) }
  public static func endRFObservationDetails_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createRFObservationDetails_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    obTimeOffset obTime: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    satNo: Int32 = 0,
    taskIdOffset taskId: Offset = Offset(),
    transactionIdOffset transactionId: Offset = Offset(),
    trackIdOffset trackId: Offset = Offset(),
    origObjectIdOffset origObjectId: Offset = Offset(),
    origSensorIdOffset origSensorId: Offset = Offset(),
    uct: Bool = false,
    transponderOffset transponder: Offset = Offset(),
    azimuth: Double = 0.0,
    azimuthUnc: Double = 0.0,
    azimuthRate: Double = 0.0,
    elevation: Double = 0.0,
    elevationUnc: Double = 0.0,
    elevationRate: Double = 0.0,
    range: Double = 0.0,
    rangeUnc: Double = 0.0,
    rangeRate: Double = 0.0,
    rangeRateUnc: Double = 0.0,
    trackRange: Double = 0.0,
    senlat: Double = 0.0,
    senlon: Double = 0.0,
    senalt: Double = 0.0,
    elnotOffset elnot: Offset = Offset(),
    frequency: Double = 0.0,
    nominalFrequency: Double = 0.0,
    startFrequency: Double = 0.0,
    endFrequency: Double = 0.0,
    relativeCarrierPower: Double = 0.0,
    spectrumAnalyzerPower: Double = 0.0,
    relativeNoiseFloor: Double = 0.0,
    referenceLevel: Double = 0.0,
    pgri: Double = 0.0,
    confidence: Double = 0.0,
    incoming: Bool = false,
    switchPoint: Int32 = 0,
    baudRate: Double = 0.0,
    snr: Double = 0.0,
    nominalSnr: Double = 0.0,
    polarity: Double = 0.0,
    polarityType: RFObservationDetails_Full_polarityType_Enum = .h,
    channel: Int32 = 0,
    powerOverNoise: Double = 0.0,
    nominalPowerOverNoise: Double = 0.0,
    bandwidth: Double = 0.0,
    nominalBandwidth: Double = 0.0,
    resolutionBandwidth: Double = 0.0,
    videoBandwidth: Double = 0.0,
    eirp: Double = 0.0,
    nominalEirp: Double = 0.0,
    minPsd: Double = 0.0,
    maxPsd: Double = 0.0,
    frequencyShift: Double = 0.0,
    peak: Bool = false,
    antennaNameOffset antennaName: Offset = Offset(),
    detectionStatusOffset detectionStatus: Offset = Offset(),
    collectionModeOffset collectionMode: Offset = Offset(),
    rawFileUriOffset rawFileUri: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: RFObservationDetails_Full_dataMode_Enum = .real,
    tagsVectorOffset tags: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    noisePwrDensity: Double = 0.0,
    carrierStandardOffset carrierStandard: Offset = Offset(),
    modulationOffset modulation: Offset = Offset(),
    innerCodingRate: Int32 = 0,
    outerCodingRate: Int32 = 0,
    transmitFilterTypeOffset transmitFilterType: Offset = Offset(),
    transmitFilterRollOff: Double = 0.0,
    symbolToNoiseRatio: Double = 0.0,
    bitErrorRate: Double = 0.0,
    origNetworkOffset origNetwork: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    onOrbitOffset onOrbit: Offset = Offset(),
    descriptorOffset descriptor: Offset = Offset(),
    urlOffset url: Offset = Offset(),
    frequenciesVectorOffset frequencies: Offset = Offset(),
    powersVectorOffset powers: Offset = Offset(),
    snrsVectorOffset snrs: Offset = Offset(),
    confidencesVectorOffset confidences: Offset = Offset(),
    detectionStatusesVectorOffset detectionStatuses: Offset = Offset(),
    chipRatesVectorOffset chipRates: Offset = Offset(),
    codeTapsVectorOffset codeTaps: Offset = Offset(),
    codeFillsVectorOffset codeFills: Offset = Offset(),
    codeLengthsVectorOffset codeLengths: Offset = Offset(),
    pnOrdersVectorOffset pnOrders: Offset = Offset(),
    signalIdsVectorOffset signalIds: Offset = Offset(),
    baudRatesVectorOffset baudRates: Offset = Offset(),
    telemetryIdsVectorOffset telemetryIds: Offset = Offset(),
    constellationXpointsVectorOffset constellationXpoints: Offset = Offset(),
    constellationYpointsVectorOffset constellationYpoints: Offset = Offset()
  ) -> Offset {
    let __start = RFObservationDetails_Full.startRFObservationDetails_Full(&fbb)
    RFObservationDetails_Full.add(id: id, &fbb)
    RFObservationDetails_Full.add(classificationMarking: classificationMarking, &fbb)
    RFObservationDetails_Full.add(obTime: obTime, &fbb)
    RFObservationDetails_Full.add(idOnOrbit: idOnOrbit, &fbb)
    RFObservationDetails_Full.add(idSensor: idSensor, &fbb)
    RFObservationDetails_Full.add(type: type, &fbb)
    RFObservationDetails_Full.add(satNo: satNo, &fbb)
    RFObservationDetails_Full.add(taskId: taskId, &fbb)
    RFObservationDetails_Full.add(transactionId: transactionId, &fbb)
    RFObservationDetails_Full.add(trackId: trackId, &fbb)
    RFObservationDetails_Full.add(origObjectId: origObjectId, &fbb)
    RFObservationDetails_Full.add(origSensorId: origSensorId, &fbb)
    RFObservationDetails_Full.add(uct: uct, &fbb)
    RFObservationDetails_Full.add(transponder: transponder, &fbb)
    RFObservationDetails_Full.add(azimuth: azimuth, &fbb)
    RFObservationDetails_Full.add(azimuthUnc: azimuthUnc, &fbb)
    RFObservationDetails_Full.add(azimuthRate: azimuthRate, &fbb)
    RFObservationDetails_Full.add(elevation: elevation, &fbb)
    RFObservationDetails_Full.add(elevationUnc: elevationUnc, &fbb)
    RFObservationDetails_Full.add(elevationRate: elevationRate, &fbb)
    RFObservationDetails_Full.add(range: range, &fbb)
    RFObservationDetails_Full.add(rangeUnc: rangeUnc, &fbb)
    RFObservationDetails_Full.add(rangeRate: rangeRate, &fbb)
    RFObservationDetails_Full.add(rangeRateUnc: rangeRateUnc, &fbb)
    RFObservationDetails_Full.add(trackRange: trackRange, &fbb)
    RFObservationDetails_Full.add(senlat: senlat, &fbb)
    RFObservationDetails_Full.add(senlon: senlon, &fbb)
    RFObservationDetails_Full.add(senalt: senalt, &fbb)
    RFObservationDetails_Full.add(elnot: elnot, &fbb)
    RFObservationDetails_Full.add(frequency: frequency, &fbb)
    RFObservationDetails_Full.add(nominalFrequency: nominalFrequency, &fbb)
    RFObservationDetails_Full.add(startFrequency: startFrequency, &fbb)
    RFObservationDetails_Full.add(endFrequency: endFrequency, &fbb)
    RFObservationDetails_Full.add(relativeCarrierPower: relativeCarrierPower, &fbb)
    RFObservationDetails_Full.add(spectrumAnalyzerPower: spectrumAnalyzerPower, &fbb)
    RFObservationDetails_Full.add(relativeNoiseFloor: relativeNoiseFloor, &fbb)
    RFObservationDetails_Full.add(referenceLevel: referenceLevel, &fbb)
    RFObservationDetails_Full.add(pgri: pgri, &fbb)
    RFObservationDetails_Full.add(confidence: confidence, &fbb)
    RFObservationDetails_Full.add(incoming: incoming, &fbb)
    RFObservationDetails_Full.add(switchPoint: switchPoint, &fbb)
    RFObservationDetails_Full.add(baudRate: baudRate, &fbb)
    RFObservationDetails_Full.add(snr: snr, &fbb)
    RFObservationDetails_Full.add(nominalSnr: nominalSnr, &fbb)
    RFObservationDetails_Full.add(polarity: polarity, &fbb)
    RFObservationDetails_Full.add(polarityType: polarityType, &fbb)
    RFObservationDetails_Full.add(channel: channel, &fbb)
    RFObservationDetails_Full.add(powerOverNoise: powerOverNoise, &fbb)
    RFObservationDetails_Full.add(nominalPowerOverNoise: nominalPowerOverNoise, &fbb)
    RFObservationDetails_Full.add(bandwidth: bandwidth, &fbb)
    RFObservationDetails_Full.add(nominalBandwidth: nominalBandwidth, &fbb)
    RFObservationDetails_Full.add(resolutionBandwidth: resolutionBandwidth, &fbb)
    RFObservationDetails_Full.add(videoBandwidth: videoBandwidth, &fbb)
    RFObservationDetails_Full.add(eirp: eirp, &fbb)
    RFObservationDetails_Full.add(nominalEirp: nominalEirp, &fbb)
    RFObservationDetails_Full.add(minPsd: minPsd, &fbb)
    RFObservationDetails_Full.add(maxPsd: maxPsd, &fbb)
    RFObservationDetails_Full.add(frequencyShift: frequencyShift, &fbb)
    RFObservationDetails_Full.add(peak: peak, &fbb)
    RFObservationDetails_Full.add(antennaName: antennaName, &fbb)
    RFObservationDetails_Full.add(detectionStatus: detectionStatus, &fbb)
    RFObservationDetails_Full.add(collectionMode: collectionMode, &fbb)
    RFObservationDetails_Full.add(rawFileUri: rawFileUri, &fbb)
    RFObservationDetails_Full.add(source: source, &fbb)
    RFObservationDetails_Full.add(origin: origin, &fbb)
    RFObservationDetails_Full.add(dataMode: dataMode, &fbb)
    RFObservationDetails_Full.addVectorOf(tags: tags, &fbb)
    RFObservationDetails_Full.add(createdAt: createdAt, &fbb)
    RFObservationDetails_Full.add(createdBy: createdBy, &fbb)
    RFObservationDetails_Full.add(noisePwrDensity: noisePwrDensity, &fbb)
    RFObservationDetails_Full.add(carrierStandard: carrierStandard, &fbb)
    RFObservationDetails_Full.add(modulation: modulation, &fbb)
    RFObservationDetails_Full.add(innerCodingRate: innerCodingRate, &fbb)
    RFObservationDetails_Full.add(outerCodingRate: outerCodingRate, &fbb)
    RFObservationDetails_Full.add(transmitFilterType: transmitFilterType, &fbb)
    RFObservationDetails_Full.add(transmitFilterRollOff: transmitFilterRollOff, &fbb)
    RFObservationDetails_Full.add(symbolToNoiseRatio: symbolToNoiseRatio, &fbb)
    RFObservationDetails_Full.add(bitErrorRate: bitErrorRate, &fbb)
    RFObservationDetails_Full.add(origNetwork: origNetwork, &fbb)
    RFObservationDetails_Full.add(sourceDl: sourceDl, &fbb)
    RFObservationDetails_Full.add(onOrbit: onOrbit, &fbb)
    RFObservationDetails_Full.add(descriptor: descriptor, &fbb)
    RFObservationDetails_Full.add(url: url, &fbb)
    RFObservationDetails_Full.addVectorOf(frequencies: frequencies, &fbb)
    RFObservationDetails_Full.addVectorOf(powers: powers, &fbb)
    RFObservationDetails_Full.addVectorOf(snrs: snrs, &fbb)
    RFObservationDetails_Full.addVectorOf(confidences: confidences, &fbb)
    RFObservationDetails_Full.addVectorOf(detectionStatuses: detectionStatuses, &fbb)
    RFObservationDetails_Full.addVectorOf(chipRates: chipRates, &fbb)
    RFObservationDetails_Full.addVectorOf(codeTaps: codeTaps, &fbb)
    RFObservationDetails_Full.addVectorOf(codeFills: codeFills, &fbb)
    RFObservationDetails_Full.addVectorOf(codeLengths: codeLengths, &fbb)
    RFObservationDetails_Full.addVectorOf(pnOrders: pnOrders, &fbb)
    RFObservationDetails_Full.addVectorOf(signalIds: signalIds, &fbb)
    RFObservationDetails_Full.addVectorOf(baudRates: baudRates, &fbb)
    RFObservationDetails_Full.addVectorOf(telemetryIds: telemetryIds, &fbb)
    RFObservationDetails_Full.addVectorOf(constellationXpoints: constellationXpoints, &fbb)
    RFObservationDetails_Full.addVectorOf(constellationYpoints: constellationYpoints, &fbb)
    return RFObservationDetails_Full.endRFObservationDetails_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obTime.p, fieldName: "obTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.taskId.p, fieldName: "taskId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.transactionId.p, fieldName: "transactionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.trackId.p, fieldName: "trackId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSensorId.p, fieldName: "origSensorId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.uct.p, fieldName: "uct", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.transponder.p, fieldName: "transponder", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.azimuth.p, fieldName: "azimuth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.azimuthUnc.p, fieldName: "azimuthUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.azimuthRate.p, fieldName: "azimuthRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevationUnc.p, fieldName: "elevationUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevationRate.p, fieldName: "elevationRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.range.p, fieldName: "range", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rangeUnc.p, fieldName: "rangeUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rangeRate.p, fieldName: "rangeRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rangeRateUnc.p, fieldName: "rangeRateUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.trackRange.p, fieldName: "trackRange", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senlat.p, fieldName: "senlat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senlon.p, fieldName: "senlon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senalt.p, fieldName: "senalt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elnot.p, fieldName: "elnot", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.frequency.p, fieldName: "frequency", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.nominalFrequency.p, fieldName: "nominalFrequency", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.startFrequency.p, fieldName: "startFrequency", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.endFrequency.p, fieldName: "endFrequency", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.relativeCarrierPower.p, fieldName: "relativeCarrierPower", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.spectrumAnalyzerPower.p, fieldName: "spectrumAnalyzerPower", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.relativeNoiseFloor.p, fieldName: "relativeNoiseFloor", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.referenceLevel.p, fieldName: "referenceLevel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pgri.p, fieldName: "pgri", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.confidence.p, fieldName: "confidence", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.incoming.p, fieldName: "incoming", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.switchPoint.p, fieldName: "switchPoint", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.baudRate.p, fieldName: "baudRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.snr.p, fieldName: "snr", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.nominalSnr.p, fieldName: "nominalSnr", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.polarity.p, fieldName: "polarity", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.polarityType.p, fieldName: "polarityType", required: false, type: RFObservationDetails_Full_polarityType_Enum.self)
    try _v.visit(field: VTOFFSET.channel.p, fieldName: "channel", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.powerOverNoise.p, fieldName: "powerOverNoise", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.nominalPowerOverNoise.p, fieldName: "nominalPowerOverNoise", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bandwidth.p, fieldName: "bandwidth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.nominalBandwidth.p, fieldName: "nominalBandwidth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.resolutionBandwidth.p, fieldName: "resolutionBandwidth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.videoBandwidth.p, fieldName: "videoBandwidth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.eirp.p, fieldName: "eirp", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.nominalEirp.p, fieldName: "nominalEirp", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.minPsd.p, fieldName: "minPsd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxPsd.p, fieldName: "maxPsd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.frequencyShift.p, fieldName: "frequencyShift", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.peak.p, fieldName: "peak", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.antennaName.p, fieldName: "antennaName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.detectionStatus.p, fieldName: "detectionStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.collectionMode.p, fieldName: "collectionMode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rawFileUri.p, fieldName: "rawFileUri", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: RFObservationDetails_Full_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.tags.p, fieldName: "tags", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.noisePwrDensity.p, fieldName: "noisePwrDensity", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.carrierStandard.p, fieldName: "carrierStandard", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.modulation.p, fieldName: "modulation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.innerCodingRate.p, fieldName: "innerCodingRate", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.outerCodingRate.p, fieldName: "outerCodingRate", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.transmitFilterType.p, fieldName: "transmitFilterType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.transmitFilterRollOff.p, fieldName: "transmitFilterRollOff", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.symbolToNoiseRatio.p, fieldName: "symbolToNoiseRatio", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bitErrorRate.p, fieldName: "bitErrorRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.onOrbit.p, fieldName: "onOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.descriptor.p, fieldName: "descriptor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.url.p, fieldName: "url", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.frequencies.p, fieldName: "frequencies", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.powers.p, fieldName: "powers", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.snrs.p, fieldName: "snrs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.confidences.p, fieldName: "confidences", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.detectionStatuses.p, fieldName: "detectionStatuses", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.chipRates.p, fieldName: "chipRates", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.codeTaps.p, fieldName: "codeTaps", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.codeFills.p, fieldName: "codeFills", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.codeLengths.p, fieldName: "codeLengths", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.pnOrders.p, fieldName: "pnOrders", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.signalIds.p, fieldName: "signalIds", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.baudRates.p, fieldName: "baudRates", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.telemetryIds.p, fieldName: "telemetryIds", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.constellationXpoints.p, fieldName: "constellationXpoints", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.constellationYpoints.p, fieldName: "constellationYpoints", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

