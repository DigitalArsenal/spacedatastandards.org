// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Eop_Full_polarMotionState_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case i = 0
  ///  No description available.
  case p = 1

  public static var max: Eop_Full_polarMotionState_Enum { return .p }
  public static var min: Eop_Full_polarMotionState_Enum { return .i }
}


public enum Eop_Full_ut1UTCState_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case i = 0
  ///  No description available.
  case p = 1

  public static var max: Eop_Full_ut1UTCState_Enum { return .p }
  public static var min: Eop_Full_ut1UTCState_Enum { return .i }
}


public enum Eop_Full_nutationState_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case i = 0
  ///  No description available.
  case p = 1

  public static var max: Eop_Full_nutationState_Enum { return .p }
  public static var min: Eop_Full_nutationState_Enum { return .i }
}


public enum Eop_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Eop_Full_dataMode_Enum { return .exercise }
  public static var min: Eop_Full_dataMode_Enum { return .real }
}


///  /// Model representation of Earth Orientation Parameters (EOP) produced by the IERS (International Earth Rotation and Reference Systems Service). Earth Orientation Parameters describe the irregularities of the earth's rotation. Technically, they are the parameters which provide the rotation of the ITRS (International Terrestrial Reference System) to the ICRS (International Celestial Reference System) as a function of time.
///  Universal time -- Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
///  Coordinates of the pole -- x and y are the coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS Reference Pole. The CEP differs from the instantaneous rotation axis by quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the direction 90 degrees West longitude.
///  Celestial pole offsets -- Celestial pole offsets are described in the IAU Precession and Nutation models. The observed differences with respect to the conventional celestial pole position defined by the models are monitored and reported by the IERS.
///  IERS Bulletins A and B provide current information on the Earth's orientation in the IERS Reference System.  This includes Universal Time, coordinates of the terrestrial pole, and celestial pole offsets.  Bulletin A gives an advanced solution updated weekly; the standard solution is given monthly in Bulletin B. Fields suffixed with 'B' are Bulletin B values. All solutions are continuous within their respective uncertainties.  Bulletin A is issued by the IERS Rapid Service/Prediction Centre at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports the latest determinations for polar motion, UT1-UTC, and nutation offsets at daily intervals based on a combination of contributed analysis results using data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging (LLR). Predictions for variations a year into the future are also provided. Meteorological predictions of variations in Atmospheric Angular Momentum (AAM) are used to aid in the prediction of near-term UT1-UTC changes. This publication is prepared by the IERS Rapid Service/Prediction Center.
public struct Eop_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EOPF" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Eop_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case eopDate = 8
    case polarMotionState = 10
    case polarMotionX = 12
    case polarMotionXunc = 14
    case polarMotionY = 16
    case polarMotionYunc = 18
    case ut1Utcstate = 20
    case ut1Utc = 22
    case ut1Utcunc = 24
    case lod = 26
    case lodUnc = 28
    case nutationState = 30
    case dPsi = 32
    case dPsiunc = 34
    case dEpsilon = 36
    case dEpsilonUnc = 38
    case dX = 40
    case dXunc = 42
    case dY = 44
    case dYunc = 46
    case polarMotionXb = 48
    case polarMotionYb = 50
    case ut1Utcb = 52
    case dPsib = 54
    case dEpsilonB = 56
    case dXb = 58
    case dYb = 60
    case precessionNutationStd = 62
    case rawFileUri = 64
    case source = 66
    case origin = 68
    case dataMode = 70
    case createdAt = 72
    case createdBy = 74
    case updatedAt = 76
    case updatedBy = 78
    case origNetwork = 80
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: EOP-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Effective date/time for the EOP values in ISO8601 UTC format.  The values could be current or predicted.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var eopDate: String? { let o = _accessor.offset(VTOFFSET.eopDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eopDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eopDate.v) }
  ///  Flag indicating Issued (I), or Predicted (P) for this record's polar motion values.
  ///  Example: /// Example: I
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var polarMotionState: Eop_Full_polarMotionState_Enum { let o = _accessor.offset(VTOFFSET.polarMotionState.v); return o == 0 ? .i : Eop_Full_polarMotionState_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .i }
  ///  The Bulletin A X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
  ///  Example: /// Example: 0.182987
  ///  Constraints: No constraints specified.
  public var polarMotionX: Double { let o = _accessor.offset(VTOFFSET.polarMotionX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Estimated uncertainty/error in polarMotionX value in arc seconds.
  ///  Example: /// Example: 0.000672
  ///  Constraints: No constraints specified.
  public var polarMotionXunc: Double { let o = _accessor.offset(VTOFFSET.polarMotionXunc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Bulletin A Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
  ///  Example: /// Example: 0.168775
  ///  Constraints: No constraints specified.
  public var polarMotionY: Double { let o = _accessor.offset(VTOFFSET.polarMotionY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Estimated uncertainty/error in polarMotionY value in arc seconds.
  ///  Example: /// Example: 0.000345
  ///  Constraints: No constraints specified.
  public var polarMotionYunc: Double { let o = _accessor.offset(VTOFFSET.polarMotionYunc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Flag indicating Issued (I), or Predicted (P) for this record''s Bulletin A UT1-UTC values.
  ///  Example: /// Example: I
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var ut1Utcstate: Eop_Full_ut1UTCState_Enum { let o = _accessor.offset(VTOFFSET.ut1Utcstate.v); return o == 0 ? .i : Eop_Full_ut1UTCState_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .i }
  ///  The difference between the Bulletin A UT1 and UTC time scales as of eopDate in seconds.
  ///  Example: /// Example: -0.1251659
  ///  Constraints: No constraints specified.
  public var ut1Utc: Double { let o = _accessor.offset(VTOFFSET.ut1Utc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The estimated uncertainty/error in the ut1UTC value in seconds.
  ///  Example: /// Example: 2.07e-05
  ///  Constraints: No constraints specified.
  public var ut1Utcunc: Double { let o = _accessor.offset(VTOFFSET.ut1Utcunc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Bulletin A length of day or LOD in milliseconds. Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
  ///  Example: /// Example: 1.8335
  ///  Constraints: No constraints specified.
  public var lod: Double { let o = _accessor.offset(VTOFFSET.lod.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The estimated uncertainty/error in the lod value in seconds.
  ///  Example: /// Example: 0.0201
  ///  Constraints: No constraints specified.
  public var lodUnc: Double { let o = _accessor.offset(VTOFFSET.lodUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Flag indicating Issued (I), or Predicted (P) for this record's nutation values (dPSI and dEpsilon).
  ///  Example: /// Example: I
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var nutationState: Eop_Full_nutationState_Enum { let o = _accessor.offset(VTOFFSET.nutationState.v); return o == 0 ? .i : Eop_Full_nutationState_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .i }
  ///  The Bulletin A offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSI is not used when this record represents IAU 2000 data.
  ///  Example: /// Example: -10.437
  ///  Constraints: No constraints specified.
  public var dPsi: Double { let o = _accessor.offset(VTOFFSET.dPsi.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The estimated uncertainty/error in the dPSI value in milliseconds of arc.
  ///  Example: /// Example: 0.507
  ///  Constraints: No constraints specified.
  public var dPsiunc: Double { let o = _accessor.offset(VTOFFSET.dPsiunc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Bulletin A offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilon is not used when this record represents IAU 2000 data.
  ///  Example: /// Example: -0.917
  ///  Constraints: No constraints specified.
  public var dEpsilon: Double { let o = _accessor.offset(VTOFFSET.dEpsilon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The estimated uncertainty/error in the dEpsilon value in milliseconds of arc.
  ///  Example: /// Example: 0.165
  ///  Constraints: No constraints specified.
  public var dEpsilonUnc: Double { let o = _accessor.offset(VTOFFSET.dEpsilonUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Bulletin A celestial pole offset along x-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dX is not used when this record represents IAU 1980 data.
  ///  Example: /// Example: -0.086
  ///  Constraints: No constraints specified.
  public var dX: Double { let o = _accessor.offset(VTOFFSET.dX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The estimated uncertainty/error in the Bulletin A dX value, in milliseconds of arc.
  ///  Example: /// Example: 0.202
  ///  Constraints: No constraints specified.
  public var dXunc: Double { let o = _accessor.offset(VTOFFSET.dXunc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Bulletin A celestial pole offset along y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dY is not used when this record represents IAU 1980 data.
  ///  Example: /// Example: 0.13
  ///  Constraints: No constraints specified.
  public var dY: Double { let o = _accessor.offset(VTOFFSET.dY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The estimated uncertainty/error in the Bulletin A dY value, in milliseconds of arc.
  ///  Example: /// Example: 0.165
  ///  Constraints: No constraints specified.
  public var dYunc: Double { let o = _accessor.offset(VTOFFSET.dYunc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Bulletin B X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
  ///  Example: /// Example: 0.1824
  ///  Constraints: No constraints specified.
  public var polarMotionXb: Double { let o = _accessor.offset(VTOFFSET.polarMotionXb.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Bulletin B Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
  ///  Example: /// Example: 0.1679
  ///  Constraints: No constraints specified.
  public var polarMotionYb: Double { let o = _accessor.offset(VTOFFSET.polarMotionYb.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Bulletin B difference between the UT1 and UTC time scales as of eopDate in seconds.
  ///  Example: /// Example: -0.1253
  ///  Constraints: No constraints specified.
  public var ut1Utcb: Double { let o = _accessor.offset(VTOFFSET.ut1Utcb.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Bulletin B offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSIB is not used when this record represents IAU 2000 data.
  ///  Example: /// Example: -9.9
  ///  Constraints: No constraints specified.
  public var dPsib: Double { let o = _accessor.offset(VTOFFSET.dPsib.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Bulletin B offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilonB is not used when this record represents IAU 2000 data.
  ///  Example: /// Example: -1.7
  ///  Constraints: No constraints specified.
  public var dEpsilonB: Double { let o = _accessor.offset(VTOFFSET.dEpsilonB.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Bulletin B celestial pole offset along the X-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dXB is not used when this record represents IAU 1980 data.
  ///  Example: /// Example: 0.129
  ///  Constraints: No constraints specified.
  public var dXb: Double { let o = _accessor.offset(VTOFFSET.dXb.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Bulletin B celestial pole offset along the Y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dYB is not used when this record represents IAU 1980 data.
  ///  Example: /// Example: -0.653
  ///  Constraints: No constraints specified.
  public var dYb: Double { let o = _accessor.offset(VTOFFSET.dYb.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The IAU Theory of Precession and Theory of Nutation applied to the data in this record. IAU1980 records employ the IAU 1976 Theory of Precession and IAU 1980 Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory of Precession and Nutation.
  ///  Example: /// Example: IAU1980
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var precessionNutationStd: String? { let o = _accessor.offset(VTOFFSET.precessionNutationStd.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var precessionNutationStdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.precessionNutationStd.v) }
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var rawFileUri: String? { let o = _accessor.offset(VTOFFSET.rawFileUri.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rawFileUriSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rawFileUri.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Eop_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Eop_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startEop_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 39) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(eopDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eopDate, at: VTOFFSET.eopDate.p) }
  public static func add(polarMotionState: Eop_Full_polarMotionState_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: polarMotionState.rawValue, def: 0, at: VTOFFSET.polarMotionState.p) }
  public static func add(polarMotionX: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: polarMotionX, def: 0.0, at: VTOFFSET.polarMotionX.p) }
  public static func add(polarMotionXunc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: polarMotionXunc, def: 0.0, at: VTOFFSET.polarMotionXunc.p) }
  public static func add(polarMotionY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: polarMotionY, def: 0.0, at: VTOFFSET.polarMotionY.p) }
  public static func add(polarMotionYunc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: polarMotionYunc, def: 0.0, at: VTOFFSET.polarMotionYunc.p) }
  public static func add(ut1Utcstate: Eop_Full_ut1UTCState_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ut1Utcstate.rawValue, def: 0, at: VTOFFSET.ut1Utcstate.p) }
  public static func add(ut1Utc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ut1Utc, def: 0.0, at: VTOFFSET.ut1Utc.p) }
  public static func add(ut1Utcunc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ut1Utcunc, def: 0.0, at: VTOFFSET.ut1Utcunc.p) }
  public static func add(lod: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lod, def: 0.0, at: VTOFFSET.lod.p) }
  public static func add(lodUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lodUnc, def: 0.0, at: VTOFFSET.lodUnc.p) }
  public static func add(nutationState: Eop_Full_nutationState_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nutationState.rawValue, def: 0, at: VTOFFSET.nutationState.p) }
  public static func add(dPsi: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dPsi, def: 0.0, at: VTOFFSET.dPsi.p) }
  public static func add(dPsiunc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dPsiunc, def: 0.0, at: VTOFFSET.dPsiunc.p) }
  public static func add(dEpsilon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dEpsilon, def: 0.0, at: VTOFFSET.dEpsilon.p) }
  public static func add(dEpsilonUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dEpsilonUnc, def: 0.0, at: VTOFFSET.dEpsilonUnc.p) }
  public static func add(dX: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dX, def: 0.0, at: VTOFFSET.dX.p) }
  public static func add(dXunc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dXunc, def: 0.0, at: VTOFFSET.dXunc.p) }
  public static func add(dY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dY, def: 0.0, at: VTOFFSET.dY.p) }
  public static func add(dYunc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dYunc, def: 0.0, at: VTOFFSET.dYunc.p) }
  public static func add(polarMotionXb: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: polarMotionXb, def: 0.0, at: VTOFFSET.polarMotionXb.p) }
  public static func add(polarMotionYb: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: polarMotionYb, def: 0.0, at: VTOFFSET.polarMotionYb.p) }
  public static func add(ut1Utcb: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ut1Utcb, def: 0.0, at: VTOFFSET.ut1Utcb.p) }
  public static func add(dPsib: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dPsib, def: 0.0, at: VTOFFSET.dPsib.p) }
  public static func add(dEpsilonB: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dEpsilonB, def: 0.0, at: VTOFFSET.dEpsilonB.p) }
  public static func add(dXb: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dXb, def: 0.0, at: VTOFFSET.dXb.p) }
  public static func add(dYb: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dYb, def: 0.0, at: VTOFFSET.dYb.p) }
  public static func add(precessionNutationStd: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precessionNutationStd, at: VTOFFSET.precessionNutationStd.p) }
  public static func add(rawFileUri: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rawFileUri, at: VTOFFSET.rawFileUri.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: Eop_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endEop_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEop_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    eopDateOffset eopDate: Offset = Offset(),
    polarMotionState: Eop_Full_polarMotionState_Enum = .i,
    polarMotionX: Double = 0.0,
    polarMotionXunc: Double = 0.0,
    polarMotionY: Double = 0.0,
    polarMotionYunc: Double = 0.0,
    ut1Utcstate: Eop_Full_ut1UTCState_Enum = .i,
    ut1Utc: Double = 0.0,
    ut1Utcunc: Double = 0.0,
    lod: Double = 0.0,
    lodUnc: Double = 0.0,
    nutationState: Eop_Full_nutationState_Enum = .i,
    dPsi: Double = 0.0,
    dPsiunc: Double = 0.0,
    dEpsilon: Double = 0.0,
    dEpsilonUnc: Double = 0.0,
    dX: Double = 0.0,
    dXunc: Double = 0.0,
    dY: Double = 0.0,
    dYunc: Double = 0.0,
    polarMotionXb: Double = 0.0,
    polarMotionYb: Double = 0.0,
    ut1Utcb: Double = 0.0,
    dPsib: Double = 0.0,
    dEpsilonB: Double = 0.0,
    dXb: Double = 0.0,
    dYb: Double = 0.0,
    precessionNutationStdOffset precessionNutationStd: Offset = Offset(),
    rawFileUriOffset rawFileUri: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: Eop_Full_dataMode_Enum = .real,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = Eop_Full.startEop_Full(&fbb)
    Eop_Full.add(id: id, &fbb)
    Eop_Full.add(classificationMarking: classificationMarking, &fbb)
    Eop_Full.add(eopDate: eopDate, &fbb)
    Eop_Full.add(polarMotionState: polarMotionState, &fbb)
    Eop_Full.add(polarMotionX: polarMotionX, &fbb)
    Eop_Full.add(polarMotionXunc: polarMotionXunc, &fbb)
    Eop_Full.add(polarMotionY: polarMotionY, &fbb)
    Eop_Full.add(polarMotionYunc: polarMotionYunc, &fbb)
    Eop_Full.add(ut1Utcstate: ut1Utcstate, &fbb)
    Eop_Full.add(ut1Utc: ut1Utc, &fbb)
    Eop_Full.add(ut1Utcunc: ut1Utcunc, &fbb)
    Eop_Full.add(lod: lod, &fbb)
    Eop_Full.add(lodUnc: lodUnc, &fbb)
    Eop_Full.add(nutationState: nutationState, &fbb)
    Eop_Full.add(dPsi: dPsi, &fbb)
    Eop_Full.add(dPsiunc: dPsiunc, &fbb)
    Eop_Full.add(dEpsilon: dEpsilon, &fbb)
    Eop_Full.add(dEpsilonUnc: dEpsilonUnc, &fbb)
    Eop_Full.add(dX: dX, &fbb)
    Eop_Full.add(dXunc: dXunc, &fbb)
    Eop_Full.add(dY: dY, &fbb)
    Eop_Full.add(dYunc: dYunc, &fbb)
    Eop_Full.add(polarMotionXb: polarMotionXb, &fbb)
    Eop_Full.add(polarMotionYb: polarMotionYb, &fbb)
    Eop_Full.add(ut1Utcb: ut1Utcb, &fbb)
    Eop_Full.add(dPsib: dPsib, &fbb)
    Eop_Full.add(dEpsilonB: dEpsilonB, &fbb)
    Eop_Full.add(dXb: dXb, &fbb)
    Eop_Full.add(dYb: dYb, &fbb)
    Eop_Full.add(precessionNutationStd: precessionNutationStd, &fbb)
    Eop_Full.add(rawFileUri: rawFileUri, &fbb)
    Eop_Full.add(source: source, &fbb)
    Eop_Full.add(origin: origin, &fbb)
    Eop_Full.add(dataMode: dataMode, &fbb)
    Eop_Full.add(createdAt: createdAt, &fbb)
    Eop_Full.add(createdBy: createdBy, &fbb)
    Eop_Full.add(updatedAt: updatedAt, &fbb)
    Eop_Full.add(updatedBy: updatedBy, &fbb)
    Eop_Full.add(origNetwork: origNetwork, &fbb)
    return Eop_Full.endEop_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eopDate.p, fieldName: "eopDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.polarMotionState.p, fieldName: "polarMotionState", required: false, type: Eop_Full_polarMotionState_Enum.self)
    try _v.visit(field: VTOFFSET.polarMotionX.p, fieldName: "polarMotionX", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.polarMotionXunc.p, fieldName: "polarMotionXunc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.polarMotionY.p, fieldName: "polarMotionY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.polarMotionYunc.p, fieldName: "polarMotionYunc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ut1Utcstate.p, fieldName: "ut1Utcstate", required: false, type: Eop_Full_ut1UTCState_Enum.self)
    try _v.visit(field: VTOFFSET.ut1Utc.p, fieldName: "ut1Utc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ut1Utcunc.p, fieldName: "ut1Utcunc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lod.p, fieldName: "lod", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lodUnc.p, fieldName: "lodUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.nutationState.p, fieldName: "nutationState", required: false, type: Eop_Full_nutationState_Enum.self)
    try _v.visit(field: VTOFFSET.dPsi.p, fieldName: "dPsi", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dPsiunc.p, fieldName: "dPsiunc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dEpsilon.p, fieldName: "dEpsilon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dEpsilonUnc.p, fieldName: "dEpsilonUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dX.p, fieldName: "dX", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dXunc.p, fieldName: "dXunc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dY.p, fieldName: "dY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dYunc.p, fieldName: "dYunc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.polarMotionXb.p, fieldName: "polarMotionXb", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.polarMotionYb.p, fieldName: "polarMotionYb", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ut1Utcb.p, fieldName: "ut1Utcb", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dPsib.p, fieldName: "dPsib", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dEpsilonB.p, fieldName: "dEpsilonB", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dXb.p, fieldName: "dXb", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dYb.p, fieldName: "dYb", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.precessionNutationStd.p, fieldName: "precessionNutationStd", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rawFileUri.p, fieldName: "rawFileUri", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Eop_Full_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

