// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection that specifies the naval flight operations for this ATO.
public struct IndividualAircraftTasking_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "INDI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: IndividualAircraftTasking_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case numAcft = 4
    case acftType = 6
    case callSign = 8
    case priConfigCode = 10
    case secConfigCode = 12
    case link16CallSign = 14
    case tacanChan = 16
    case juAddress = 18
    case iffSifMode1Code = 20
    case iffSifMode2Code = 22
    case iffSifMode3Code = 24
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The number of aircraft participating in this mission.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var numAcft: Int32 { let o = _accessor.offset(VTOFFSET.numAcft.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The type and model number for the aircraft. The field may specify a value of an aircraft not yet assigned an aircraft code contained in the aircraft codes list.
  ///  Example: /// Example: F35A
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var acftType: String? { let o = _accessor.offset(VTOFFSET.acftType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var acftTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.acftType.v) }
  ///  The call sign assigned to this mission aircraft.
  ///  Example: /// Example: EAGLE47
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var callSign: String? { let o = _accessor.offset(VTOFFSET.callSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var callSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.callSign.v) }
  ///  The code that indicates the ordinance mix carried on this mission aircraft.
  ///  Example: /// Example: 6A2W3
  ///  Constraints: Minimum length = 0, Maximum length = 48
  public var priConfigCode: String? { let o = _accessor.offset(VTOFFSET.priConfigCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var priConfigCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.priConfigCode.v) }
  ///  The code for the secondary ordinance mix carried on this mission aircraft.
  ///  Example: /// Example: 2S2WG
  ///  Constraints: Minimum length = 0, Maximum length = 48
  public var secConfigCode: String? { let o = _accessor.offset(VTOFFSET.secConfigCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var secConfigCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.secConfigCode.v) }
  ///  The Link 16 abbreviated call sign assigned to the ACA. This is normally the first and last letter and the last two numbers of the call sign.
  ///  Example: /// Example: EE47
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var link16CallSign: String? { let o = _accessor.offset(VTOFFSET.link16CallSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var link16CallSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.link16CallSign.v) }
  ///  The TACAN channel assigned to this mission aircraft.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var tacanChan: Int32 { let o = _accessor.offset(VTOFFSET.tacanChan.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  An optional array of link 16 octal track numbers assigned as the primary JTIDS Unit (JU) address for the mission aircraft.
  ///  Example: /// Example: 12345
  ///  Constraints: No constraints specified.
  public var hasJuAddress: Bool { let o = _accessor.offset(VTOFFSET.juAddress.v); return o == 0 ? false : true }
  public var juAddressCount: Int32 { let o = _accessor.offset(VTOFFSET.juAddress.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func juAddress(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.juAddress.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The mode 1 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
  ///  Example: /// Example: 111
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var iffSifMode1Code: String? { let o = _accessor.offset(VTOFFSET.iffSifMode1Code.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var iffSifMode1CodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.iffSifMode1Code.v) }
  ///  The mode 2 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
  ///  Example: /// Example: 20147
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var iffSifMode2Code: String? { let o = _accessor.offset(VTOFFSET.iffSifMode2Code.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var iffSifMode2CodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.iffSifMode2Code.v) }
  ///  The mode 3 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
  ///  Example: /// Example: 30147
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var iffSifMode3Code: String? { let o = _accessor.offset(VTOFFSET.iffSifMode3Code.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var iffSifMode3CodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.iffSifMode3Code.v) }
  public static func startIndividualAircraftTasking_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 11) }
  public static func add(numAcft: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numAcft, def: 0, at: VTOFFSET.numAcft.p) }
  public static func add(acftType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: acftType, at: VTOFFSET.acftType.p) }
  public static func add(callSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callSign, at: VTOFFSET.callSign.p) }
  public static func add(priConfigCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: priConfigCode, at: VTOFFSET.priConfigCode.p) }
  public static func add(secConfigCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: secConfigCode, at: VTOFFSET.secConfigCode.p) }
  public static func add(link16CallSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: link16CallSign, at: VTOFFSET.link16CallSign.p) }
  public static func add(tacanChan: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: tacanChan, def: 0, at: VTOFFSET.tacanChan.p) }
  public static func addVectorOf(juAddress: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: juAddress, at: VTOFFSET.juAddress.p) }
  public static func add(iffSifMode1Code: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: iffSifMode1Code, at: VTOFFSET.iffSifMode1Code.p) }
  public static func add(iffSifMode2Code: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: iffSifMode2Code, at: VTOFFSET.iffSifMode2Code.p) }
  public static func add(iffSifMode3Code: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: iffSifMode3Code, at: VTOFFSET.iffSifMode3Code.p) }
  public static func endIndividualAircraftTasking_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createIndividualAircraftTasking_Ingest(
    _ fbb: inout FlatBufferBuilder,
    numAcft: Int32 = 0,
    acftTypeOffset acftType: Offset = Offset(),
    callSignOffset callSign: Offset = Offset(),
    priConfigCodeOffset priConfigCode: Offset = Offset(),
    secConfigCodeOffset secConfigCode: Offset = Offset(),
    link16CallSignOffset link16CallSign: Offset = Offset(),
    tacanChan: Int32 = 0,
    juAddressVectorOffset juAddress: Offset = Offset(),
    iffSifMode1CodeOffset iffSifMode1Code: Offset = Offset(),
    iffSifMode2CodeOffset iffSifMode2Code: Offset = Offset(),
    iffSifMode3CodeOffset iffSifMode3Code: Offset = Offset()
  ) -> Offset {
    let __start = IndividualAircraftTasking_Ingest.startIndividualAircraftTasking_Ingest(&fbb)
    IndividualAircraftTasking_Ingest.add(numAcft: numAcft, &fbb)
    IndividualAircraftTasking_Ingest.add(acftType: acftType, &fbb)
    IndividualAircraftTasking_Ingest.add(callSign: callSign, &fbb)
    IndividualAircraftTasking_Ingest.add(priConfigCode: priConfigCode, &fbb)
    IndividualAircraftTasking_Ingest.add(secConfigCode: secConfigCode, &fbb)
    IndividualAircraftTasking_Ingest.add(link16CallSign: link16CallSign, &fbb)
    IndividualAircraftTasking_Ingest.add(tacanChan: tacanChan, &fbb)
    IndividualAircraftTasking_Ingest.addVectorOf(juAddress: juAddress, &fbb)
    IndividualAircraftTasking_Ingest.add(iffSifMode1Code: iffSifMode1Code, &fbb)
    IndividualAircraftTasking_Ingest.add(iffSifMode2Code: iffSifMode2Code, &fbb)
    IndividualAircraftTasking_Ingest.add(iffSifMode3Code: iffSifMode3Code, &fbb)
    return IndividualAircraftTasking_Ingest.endIndividualAircraftTasking_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.numAcft.p, fieldName: "numAcft", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.acftType.p, fieldName: "acftType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.callSign.p, fieldName: "callSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.priConfigCode.p, fieldName: "priConfigCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.secConfigCode.p, fieldName: "secConfigCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.link16CallSign.p, fieldName: "link16CallSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tacanChan.p, fieldName: "tacanChan", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.juAddress.p, fieldName: "juAddress", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.iffSifMode1Code.p, fieldName: "iffSifMode1Code", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.iffSifMode2Code.p, fieldName: "iffSifMode2Code", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.iffSifMode3Code.p, fieldName: "iffSifMode3Code", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

