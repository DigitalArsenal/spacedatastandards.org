// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum SGI_Full_state_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case i = 0
  ///  No description available.
  case n = 1
  ///  No description available.
  case p = 2

  public static var max: SGI_Full_state_Enum { return .p }
  public static var min: SGI_Full_state_Enum { return .i }
}


public enum SGI_Full_precedence_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case o = 0
  ///  No description available.
  case p = 1
  ///  No description available.
  case r = 2
  ///  No description available.
  case y = 3
  ///  No description available.
  case z = 4

  public static var max: SGI_Full_precedence_Enum { return .z }
  public static var min: SGI_Full_precedence_Enum { return .o }
}


public enum SGI_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: SGI_Full_dataMode_Enum { return .exercise }
  public static var min: SGI_Full_dataMode_Enum { return .real }
}


///  /// Model representation of space weather/solar, geomagnetic, and radiation belt indices.
public struct SGI_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SGIF" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: SGI_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case effectiveDate = 8
    case sgiDate = 10
    case type = 12
    case state = 14
    case stationName = 16
    case idSensor = 18
    case origSensorId = 20
    case mode = 22
    case precedence_ = 24
    case coeffDegree = 26
    case coeffOrder = 28
    case ctce = 30
    case stce = 32
    case ctci = 34
    case stci = 36
    case e10 = 38
    case e54 = 40
    case s10 = 42
    case s54 = 44
    case m10 = 46
    case m54 = 48
    case y10 = 50
    case y54 = 52
    case f10 = 54
    case f54 = 56
    case f81 = 58
    case ap = 60
    case apDuration = 62
    case kIndex = 64
    case kp = 66
    case kpDuration = 68
    case gamma = 70
    case dst = 72
    case dtc = 74
    case rbRegionCode = 76
    case rbIndex = 78
    case normFactor = 80
    case rbDuration = 82
    case analyzerAttenuation = 84
    case observedBaseline = 86
    case frequencies = 88
    case powers = 90
    case rawFileUri = 92
    case transactionId = 94
    case tags = 96
    case source = 98
    case origin = 100
    case origNetwork = 102
    case dataMode = 104
    case createdAt = 106
    case createdBy = 108
    case updatedAt = 110
    case updatedBy = 112
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SGI-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  ISO8601 UTC Time the data was received and processed from the source. Typically a source provides data for a date window with each transmission including past, present, and future predicted values.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var effectiveDate: String? { let o = _accessor.offset(VTOFFSET.effectiveDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var effectiveDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.effectiveDate.v) }
  ///  ISO8601 UTC Time of the index value. This could be a past, current, or future predicted value. Note: sgiDate defines the start time of the time window for this  data record.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var sgiDate: String? { let o = _accessor.offset(VTOFFSET.sgiDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sgiDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sgiDate.v) }
  ///  The type of data contained in this record (e.g. HASDM, JBH09, K-Index, PSD-dB, RBI, RFI-SFU, etc).
  ///  Example: /// Example: JBH09
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  State indicating Issued (I), Nowcast (N), or Predicted (P) values for this record.
  ///  Example: /// Example: I
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var state: SGI_Full_state_Enum { let o = _accessor.offset(VTOFFSET.state.v); return o == 0 ? .i : SGI_Full_state_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .i }
  ///  The name/location of the station that collected the geomagnetic data for this record.
  ///  Example: /// Example: Boulder
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var stationName: String? { let o = _accessor.offset(VTOFFSET.stationName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var stationNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.stationName.v) }
  ///  Unique identifier of the reporting sensor.
  ///  Example: /// Example: 57c96c97-e076-48af-a068-73ee2cb37e65
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Optional identifier provided by the reporting source to indicate the sensor identifier which produced this data. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origSensorId: String? { let o = _accessor.offset(VTOFFSET.origSensorId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSensorIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSensorId.v) }
  ///  The transmitted DCA mode of the record (1-3).
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var mode: Int32 { let o = _accessor.offset(VTOFFSET.mode.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The precedence of data in this record (O = Immediate, P = Priority, R = Routine, Y = Emergency, Z = Flash).
  ///  Example: /// Example: R
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var precedence_: SGI_Full_precedence_Enum { let o = _accessor.offset(VTOFFSET.precedence_.v); return o == 0 ? .o : SGI_Full_precedence_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .o }
  ///  Array containing the degree of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
  ///  Example: /// Example: [1, 2, 3]
  ///  Constraints: No constraints specified.
  public var hasCoeffDegree: Bool { let o = _accessor.offset(VTOFFSET.coeffDegree.v); return o == 0 ? false : true }
  public var coeffDegreeCount: Int32 { let o = _accessor.offset(VTOFFSET.coeffDegree.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func coeffDegree(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.coeffDegree.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array containing the order of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
  ///  Example: /// Example: [1, 2, 3]
  ///  Constraints: No constraints specified.
  public var hasCoeffOrder: Bool { let o = _accessor.offset(VTOFFSET.coeffOrder.v); return o == 0 ? false : true }
  public var coeffOrderCount: Int32 { let o = _accessor.offset(VTOFFSET.coeffOrder.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func coeffOrder(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.coeffOrder.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array containing the cosine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
  ///  Example: /// Example: [1.23, 342.3, 1.32]
  ///  Constraints: No constraints specified.
  public var hasCtce: Bool { let o = _accessor.offset(VTOFFSET.ctce.v); return o == 0 ? false : true }
  public var ctceCount: Int32 { let o = _accessor.offset(VTOFFSET.ctce.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func ctce(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.ctce.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array containing the sine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
  ///  Example: /// Example: [1.23, 342.3, 1.32]
  ///  Constraints: No constraints specified.
  public var hasStce: Bool { let o = _accessor.offset(VTOFFSET.stce.v); return o == 0 ? false : true }
  public var stceCount: Int32 { let o = _accessor.offset(VTOFFSET.stce.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func stce(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.stce.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array containing the cosine spherical-harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
  ///  Example: /// Example: [1.23, 342.3, 1.32]
  ///  Constraints: No constraints specified.
  public var hasCtci: Bool { let o = _accessor.offset(VTOFFSET.ctci.v); return o == 0 ? false : true }
  public var ctciCount: Int32 { let o = _accessor.offset(VTOFFSET.ctci.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func ctci(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.ctci.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array containing the sine spherical harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
  ///  Example: /// Example: [1.23, 342.3, 1.32]
  ///  Constraints: No constraints specified.
  public var hasStci: Bool { let o = _accessor.offset(VTOFFSET.stci.v); return o == 0 ? false : true }
  public var stciCount: Int32 { let o = _accessor.offset(VTOFFSET.stci.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func stci(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.stci.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Extreme Ultraviolet (EUV) proxy, E10.7, in x10-22 Watts per meter squared per Hertz, is the integrated solar EUV energy flux at the top of atmosphere and normalized to solar flux units.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var e10: Double { let o = _accessor.offset(VTOFFSET.e10.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  E54 (E10-Bar), in x10-22 Watts per meter squared per Hertz, uses the past 54-days E10 values to determine the E10 average.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var e54: Double { let o = _accessor.offset(VTOFFSET.e54.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Daily S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var s10: Double { let o = _accessor.offset(VTOFFSET.s10.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  54 day S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var s54: Double { let o = _accessor.offset(VTOFFSET.s54.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Daily M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var m10: Double { let o = _accessor.offset(VTOFFSET.m10.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  54 day M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var m54: Double { let o = _accessor.offset(VTOFFSET.m54.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Daily Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var y10: Double { let o = _accessor.offset(VTOFFSET.y10.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  54 day Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var y54: Double { let o = _accessor.offset(VTOFFSET.y54.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Daily solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var f10: Double { let o = _accessor.offset(VTOFFSET.f10.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  54 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var f54: Double { let o = _accessor.offset(VTOFFSET.f54.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  81 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var f81: Double { let o = _accessor.offset(VTOFFSET.f81.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Ap is the planetary geomagnetic 2 nT index (00-21 UT) for the timespan specified in apDuration. If apDuration is null, a 3 hour duration should be assumed.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var ap: Double { let o = _accessor.offset(VTOFFSET.ap.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The time, in hours, for which the Ap index value is valid. If null, a span of 3 hours is assumed.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var apDuration: Int32 { let o = _accessor.offset(VTOFFSET.apDuration.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The maximum measured K-Index at the associated station during the kpDuration timespan. The K-Index is a unitless measure (0 - 9) of the deviation in the Earth's magnetic field from normal at the station geographic location, with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var kIndex: Int32 { let o = _accessor.offset(VTOFFSET.kIndex.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The Planetary K-index (Kp) over the kpDuration timespan. The Kp-Index is the average K-Index for the entire Earth, utilizing a unitless scale (0-9, in incremenets of 1/3), with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
  ///  Example: /// Example: 4.66
  ///  Constraints: No constraints specified.
  public var kp: Double { let o = _accessor.offset(VTOFFSET.kp.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The time, in hours, over which the K, Kp, and/or gamma index values are measured.  If null, a span of 3 hours is assumed.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var kpDuration: Int32 { let o = _accessor.offset(VTOFFSET.kpDuration.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The maximum measured gamma deflection during the kpDuration timespan. If kpDuration is null, a 3 hour duration should be assumed.
  ///  Example: /// Example: 25
  ///  Constraints: No constraints specified.
  public var gamma: Int32 { let o = _accessor.offset(VTOFFSET.gamma.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Disturbance Storm Time geomagnetic index in nT.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var dst: Double { let o = _accessor.offset(VTOFFSET.dst.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  delta exospheric temperature correction in units of K.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var dtc: Double { let o = _accessor.offset(VTOFFSET.dtc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Region code for the associated radiation belt index. This is the code associated with the corresponding radiation belt location. See the provider card for reference to specific region code definitions.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var rbRegionCode: Int32 { let o = _accessor.offset(VTOFFSET.rbRegionCode.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The value of the radiation belt index. This is the ratio of current intensity of a radiation belt to long-term average value. It's long-term average should be close to 1. Depending on the type of belt sensor, this ratio may measure Flux (number of particles / (cm^2 sec energy solid-angle)), dose rate (rad per second), or relative counts of particles per time (counts per second). The index value may also be normalized, the normalization value typically represents an average of the sensor measurements taken within a region over a given time interval. See the normFactor field for the specific normalization factor, if provided.
  ///  Example: /// Example: 1.02947164506
  ///  Constraints: No constraints specified.
  public var rbIndex: Double { let o = _accessor.offset(VTOFFSET.rbIndex.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The normalization factor that has already been applied to the index value prior to record ingest. Typically used to normalize the index value to a particular interval. Units of the normalization factor may vary depending on the provider of this data (REACH, POES, CEASE3, etc.).
  ///  Example: /// Example: 2.12679e-07
  ///  Constraints: No constraints specified.
  public var normFactor: Double { let o = _accessor.offset(VTOFFSET.normFactor.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The timespan over which the associated radiation belt index is factored. If rbDuration is null, a 24 hour duration should be assumed. Note: rbDuration defines the length of the time window for this data record. The time window start time is defined by sgiDate, and the time window end time is defined by sgiDate plus rbDuration.
  ///  Example: /// Example: 24
  ///  Constraints: No constraints specified.
  public var rbDuration: Int32 { let o = _accessor.offset(VTOFFSET.rbDuration.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Signal analyzer's input attenuation level, in decibels. Attenuation is a setting on the hardware that measures the power of a signal.
  ///  Example: /// Example: 5.1
  ///  Constraints: No constraints specified.
  public var analyzerAttenuation: Double { let o = _accessor.offset(VTOFFSET.analyzerAttenuation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Observed baseline values of the frequencies specified in the frequencies field, in solar flux units. The baseline values will be used to help detect abnormal readings from the sun that might indicate a flare or other solar activity.
  ///  Example: /// Example: [15, 32, 25, 134, 0, 6, 19, 8]
  ///  Constraints: No constraints specified.
  public var hasObservedBaseline: Bool { let o = _accessor.offset(VTOFFSET.observedBaseline.v); return o == 0 ? false : true }
  public var observedBaselineCount: Int32 { let o = _accessor.offset(VTOFFSET.observedBaseline.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func observedBaseline(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.observedBaseline.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of individual power spectral density (PSD) frequencies of the signal, in megahertz. This array should correspond with the same-sized array of powers.
  ///  Example: /// Example: [25.0, 25.125, 25.25, 25.375, 25.5, 25.625, 25.75, 25.875]
  ///  Constraints: No constraints specified.
  public var hasFrequencies: Bool { let o = _accessor.offset(VTOFFSET.frequencies.v); return o == 0 ? false : true }
  public var frequenciesCount: Int32 { let o = _accessor.offset(VTOFFSET.frequencies.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func frequencies(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.frequencies.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of individual power spectral density (PSD) powers of the signal, in watts. This array should correspond with the same-sized array of frequencies.
  ///  Example: /// Example: [67.1, 65.2, 68.1, 74.3, 68.1, 96.4, 97.3, 68.1]
  ///  Constraints: No constraints specified.
  public var hasPowers: Bool { let o = _accessor.offset(VTOFFSET.powers.v); return o == 0 ? false : true }
  public var powersCount: Int32 { let o = _accessor.offset(VTOFFSET.powers.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func powers(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.powers.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: rawFileURI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var rawFileUri: String? { let o = _accessor.offset(VTOFFSET.rawFileUri.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rawFileUriSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rawFileUri.v) }
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var transactionId: String? { let o = _accessor.offset(VTOFFSET.transactionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transactionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transactionId.v) }
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  public var hasTags: Bool { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? false : true }
  public var tagsCount: Int32 { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func tags(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: SGI_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : SGI_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  public static func startSGI_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 55) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(effectiveDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: effectiveDate, at: VTOFFSET.effectiveDate.p) }
  public static func add(sgiDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sgiDate, at: VTOFFSET.sgiDate.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(state: SGI_Full_state_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: state.rawValue, def: 0, at: VTOFFSET.state.p) }
  public static func add(stationName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: stationName, at: VTOFFSET.stationName.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(origSensorId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSensorId, at: VTOFFSET.origSensorId.p) }
  public static func add(mode: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: mode, def: 0, at: VTOFFSET.mode.p) }
  public static func add(precedence_: SGI_Full_precedence_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: precedence_.rawValue, def: 0, at: VTOFFSET.precedence_.p) }
  public static func addVectorOf(coeffDegree: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: coeffDegree, at: VTOFFSET.coeffDegree.p) }
  public static func addVectorOf(coeffOrder: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: coeffOrder, at: VTOFFSET.coeffOrder.p) }
  public static func addVectorOf(ctce: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ctce, at: VTOFFSET.ctce.p) }
  public static func addVectorOf(stce: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: stce, at: VTOFFSET.stce.p) }
  public static func addVectorOf(ctci: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ctci, at: VTOFFSET.ctci.p) }
  public static func addVectorOf(stci: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: stci, at: VTOFFSET.stci.p) }
  public static func add(e10: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: e10, def: 0.0, at: VTOFFSET.e10.p) }
  public static func add(e54: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: e54, def: 0.0, at: VTOFFSET.e54.p) }
  public static func add(s10: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: s10, def: 0.0, at: VTOFFSET.s10.p) }
  public static func add(s54: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: s54, def: 0.0, at: VTOFFSET.s54.p) }
  public static func add(m10: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: m10, def: 0.0, at: VTOFFSET.m10.p) }
  public static func add(m54: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: m54, def: 0.0, at: VTOFFSET.m54.p) }
  public static func add(y10: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: y10, def: 0.0, at: VTOFFSET.y10.p) }
  public static func add(y54: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: y54, def: 0.0, at: VTOFFSET.y54.p) }
  public static func add(f10: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: f10, def: 0.0, at: VTOFFSET.f10.p) }
  public static func add(f54: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: f54, def: 0.0, at: VTOFFSET.f54.p) }
  public static func add(f81: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: f81, def: 0.0, at: VTOFFSET.f81.p) }
  public static func add(ap: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ap, def: 0.0, at: VTOFFSET.ap.p) }
  public static func add(apDuration: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: apDuration, def: 0, at: VTOFFSET.apDuration.p) }
  public static func add(kIndex: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: kIndex, def: 0, at: VTOFFSET.kIndex.p) }
  public static func add(kp: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: kp, def: 0.0, at: VTOFFSET.kp.p) }
  public static func add(kpDuration: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: kpDuration, def: 0, at: VTOFFSET.kpDuration.p) }
  public static func add(gamma: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gamma, def: 0, at: VTOFFSET.gamma.p) }
  public static func add(dst: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dst, def: 0.0, at: VTOFFSET.dst.p) }
  public static func add(dtc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dtc, def: 0.0, at: VTOFFSET.dtc.p) }
  public static func add(rbRegionCode: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rbRegionCode, def: 0, at: VTOFFSET.rbRegionCode.p) }
  public static func add(rbIndex: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rbIndex, def: 0.0, at: VTOFFSET.rbIndex.p) }
  public static func add(normFactor: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: normFactor, def: 0.0, at: VTOFFSET.normFactor.p) }
  public static func add(rbDuration: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rbDuration, def: 0, at: VTOFFSET.rbDuration.p) }
  public static func add(analyzerAttenuation: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: analyzerAttenuation, def: 0.0, at: VTOFFSET.analyzerAttenuation.p) }
  public static func addVectorOf(observedBaseline: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: observedBaseline, at: VTOFFSET.observedBaseline.p) }
  public static func addVectorOf(frequencies: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: frequencies, at: VTOFFSET.frequencies.p) }
  public static func addVectorOf(powers: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: powers, at: VTOFFSET.powers.p) }
  public static func add(rawFileUri: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rawFileUri, at: VTOFFSET.rawFileUri.p) }
  public static func add(transactionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transactionId, at: VTOFFSET.transactionId.p) }
  public static func addVectorOf(tags: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tags, at: VTOFFSET.tags.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: SGI_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func endSGI_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSGI_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    effectiveDateOffset effectiveDate: Offset = Offset(),
    sgiDateOffset sgiDate: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    state: SGI_Full_state_Enum = .i,
    stationNameOffset stationName: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    origSensorIdOffset origSensorId: Offset = Offset(),
    mode: Int32 = 0,
    precedence_: SGI_Full_precedence_Enum = .o,
    coeffDegreeVectorOffset coeffDegree: Offset = Offset(),
    coeffOrderVectorOffset coeffOrder: Offset = Offset(),
    ctceVectorOffset ctce: Offset = Offset(),
    stceVectorOffset stce: Offset = Offset(),
    ctciVectorOffset ctci: Offset = Offset(),
    stciVectorOffset stci: Offset = Offset(),
    e10: Double = 0.0,
    e54: Double = 0.0,
    s10: Double = 0.0,
    s54: Double = 0.0,
    m10: Double = 0.0,
    m54: Double = 0.0,
    y10: Double = 0.0,
    y54: Double = 0.0,
    f10: Double = 0.0,
    f54: Double = 0.0,
    f81: Double = 0.0,
    ap: Double = 0.0,
    apDuration: Int32 = 0,
    kIndex: Int32 = 0,
    kp: Double = 0.0,
    kpDuration: Int32 = 0,
    gamma: Int32 = 0,
    dst: Double = 0.0,
    dtc: Double = 0.0,
    rbRegionCode: Int32 = 0,
    rbIndex: Double = 0.0,
    normFactor: Double = 0.0,
    rbDuration: Int32 = 0,
    analyzerAttenuation: Double = 0.0,
    observedBaselineVectorOffset observedBaseline: Offset = Offset(),
    frequenciesVectorOffset frequencies: Offset = Offset(),
    powersVectorOffset powers: Offset = Offset(),
    rawFileUriOffset rawFileUri: Offset = Offset(),
    transactionIdOffset transactionId: Offset = Offset(),
    tagsVectorOffset tags: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: SGI_Full_dataMode_Enum = .real,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset()
  ) -> Offset {
    let __start = SGI_Full.startSGI_Full(&fbb)
    SGI_Full.add(id: id, &fbb)
    SGI_Full.add(classificationMarking: classificationMarking, &fbb)
    SGI_Full.add(effectiveDate: effectiveDate, &fbb)
    SGI_Full.add(sgiDate: sgiDate, &fbb)
    SGI_Full.add(type: type, &fbb)
    SGI_Full.add(state: state, &fbb)
    SGI_Full.add(stationName: stationName, &fbb)
    SGI_Full.add(idSensor: idSensor, &fbb)
    SGI_Full.add(origSensorId: origSensorId, &fbb)
    SGI_Full.add(mode: mode, &fbb)
    SGI_Full.add(precedence_: precedence_, &fbb)
    SGI_Full.addVectorOf(coeffDegree: coeffDegree, &fbb)
    SGI_Full.addVectorOf(coeffOrder: coeffOrder, &fbb)
    SGI_Full.addVectorOf(ctce: ctce, &fbb)
    SGI_Full.addVectorOf(stce: stce, &fbb)
    SGI_Full.addVectorOf(ctci: ctci, &fbb)
    SGI_Full.addVectorOf(stci: stci, &fbb)
    SGI_Full.add(e10: e10, &fbb)
    SGI_Full.add(e54: e54, &fbb)
    SGI_Full.add(s10: s10, &fbb)
    SGI_Full.add(s54: s54, &fbb)
    SGI_Full.add(m10: m10, &fbb)
    SGI_Full.add(m54: m54, &fbb)
    SGI_Full.add(y10: y10, &fbb)
    SGI_Full.add(y54: y54, &fbb)
    SGI_Full.add(f10: f10, &fbb)
    SGI_Full.add(f54: f54, &fbb)
    SGI_Full.add(f81: f81, &fbb)
    SGI_Full.add(ap: ap, &fbb)
    SGI_Full.add(apDuration: apDuration, &fbb)
    SGI_Full.add(kIndex: kIndex, &fbb)
    SGI_Full.add(kp: kp, &fbb)
    SGI_Full.add(kpDuration: kpDuration, &fbb)
    SGI_Full.add(gamma: gamma, &fbb)
    SGI_Full.add(dst: dst, &fbb)
    SGI_Full.add(dtc: dtc, &fbb)
    SGI_Full.add(rbRegionCode: rbRegionCode, &fbb)
    SGI_Full.add(rbIndex: rbIndex, &fbb)
    SGI_Full.add(normFactor: normFactor, &fbb)
    SGI_Full.add(rbDuration: rbDuration, &fbb)
    SGI_Full.add(analyzerAttenuation: analyzerAttenuation, &fbb)
    SGI_Full.addVectorOf(observedBaseline: observedBaseline, &fbb)
    SGI_Full.addVectorOf(frequencies: frequencies, &fbb)
    SGI_Full.addVectorOf(powers: powers, &fbb)
    SGI_Full.add(rawFileUri: rawFileUri, &fbb)
    SGI_Full.add(transactionId: transactionId, &fbb)
    SGI_Full.addVectorOf(tags: tags, &fbb)
    SGI_Full.add(source: source, &fbb)
    SGI_Full.add(origin: origin, &fbb)
    SGI_Full.add(origNetwork: origNetwork, &fbb)
    SGI_Full.add(dataMode: dataMode, &fbb)
    SGI_Full.add(createdAt: createdAt, &fbb)
    SGI_Full.add(createdBy: createdBy, &fbb)
    SGI_Full.add(updatedAt: updatedAt, &fbb)
    SGI_Full.add(updatedBy: updatedBy, &fbb)
    return SGI_Full.endSGI_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.effectiveDate.p, fieldName: "effectiveDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sgiDate.p, fieldName: "sgiDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.state.p, fieldName: "state", required: false, type: SGI_Full_state_Enum.self)
    try _v.visit(field: VTOFFSET.stationName.p, fieldName: "stationName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSensorId.p, fieldName: "origSensorId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.mode.p, fieldName: "mode", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.precedence_.p, fieldName: "precedence_", required: false, type: SGI_Full_precedence_Enum.self)
    try _v.visit(field: VTOFFSET.coeffDegree.p, fieldName: "coeffDegree", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.coeffOrder.p, fieldName: "coeffOrder", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.ctce.p, fieldName: "ctce", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.stce.p, fieldName: "stce", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.ctci.p, fieldName: "ctci", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.stci.p, fieldName: "stci", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.e10.p, fieldName: "e10", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.e54.p, fieldName: "e54", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.s10.p, fieldName: "s10", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.s54.p, fieldName: "s54", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.m10.p, fieldName: "m10", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.m54.p, fieldName: "m54", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.y10.p, fieldName: "y10", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.y54.p, fieldName: "y54", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.f10.p, fieldName: "f10", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.f54.p, fieldName: "f54", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.f81.p, fieldName: "f81", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ap.p, fieldName: "ap", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.apDuration.p, fieldName: "apDuration", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.kIndex.p, fieldName: "kIndex", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.kp.p, fieldName: "kp", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.kpDuration.p, fieldName: "kpDuration", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.gamma.p, fieldName: "gamma", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.dst.p, fieldName: "dst", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dtc.p, fieldName: "dtc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rbRegionCode.p, fieldName: "rbRegionCode", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.rbIndex.p, fieldName: "rbIndex", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.normFactor.p, fieldName: "normFactor", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rbDuration.p, fieldName: "rbDuration", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.analyzerAttenuation.p, fieldName: "analyzerAttenuation", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.observedBaseline.p, fieldName: "observedBaseline", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.frequencies.p, fieldName: "frequencies", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.powers.p, fieldName: "powers", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.rawFileUri.p, fieldName: "rawFileUri", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.transactionId.p, fieldName: "transactionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tags.p, fieldName: "tags", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: SGI_Full_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

