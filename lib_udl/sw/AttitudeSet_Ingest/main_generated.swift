// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum AttitudeSet_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: AttitudeSet_Ingest_dataMode_Enum { return .exercise }
  public static var min: AttitudeSet_Ingest_dataMode_Enum { return .real }
}


///  /// AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and meta data indicating the specifics of the orientation of an on-orbit object.  Attitude is typically distributed in a flat file containing details of the attitude generation as well as a large collection of individual points at varying time steps. AttitudeSet is analogous to this flat file.
public struct AttitudeSet_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ATTI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AttitudeSet_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idOnOrbit = 8
    case satNo = 10
    case origObjectId = 12
    case type = 14
    case esId = 16
    case asRef = 18
    case idSensor = 20
    case origSensorId = 22
    case startTime = 24
    case endTime = 26
    case frame1 = 28
    case frame2 = 30
    case numPoints = 32
    case stepSize = 34
    case precAngleInit = 36
    case spinAngleInit = 38
    case eulerRotSeq = 40
    case attitudeList = 42
    case interpolator = 44
    case interpolatorDegree = 46
    case notes = 48
    case createdAt = 50
    case createdBy = 52
    case source = 54
    case origin = 56
    case dataMode = 58
    case origNetwork = 60
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ATTITUDESET-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the on-orbit satellite to which this attitude set applies.
  ///  Example: /// Example: 41947
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Satellite/catalog number of the on-orbit object to which this attitude set applies.
  ///  Example: /// Example: 41947
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: D6593
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  The type of attitude message or messages associated with this set.
  ///  AEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.
  ///  APM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.
  ///  Example: /// Example: AEM
  ///  Constraints: Minimum length = 1, Maximum length = 3
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.
  ///  Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var esId: String? { let o = _accessor.offset(VTOFFSET.esId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var esIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.esId.v) }
  ///  Array of UDL UUIDs of one or more AttitudeSet records associated with this set.  For example, a spacecraft Attitude Ephemeris Set might include a reference to an Attitude Parameter Message defining the sensor to body frame transformation for a sensor onboard the spacecraft, which allows for calculation of the sensor orientation in frame2 of the attitude ephemeris.
  ///  Example: /// Example: ['2ea97de6-4680-4767-a07e-35d16398ef60']
  ///  Constraints: No constraints specified.
  public var hasAsRef: Bool { let o = _accessor.offset(VTOFFSET.asRef.v); return o == 0 ? false : true }
  public var asRefCount: Int32 { let o = _accessor.offset(VTOFFSET.asRef.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func asRef(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.asRef.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.
  ///  Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origSensorId: String? { let o = _accessor.offset(VTOFFSET.origSensorId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSensorIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSensorId.v) }
  ///  The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.
  ///  Example: /// Example: 2022-07-07T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var startTime: String? { let o = _accessor.offset(VTOFFSET.startTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.startTime.v) }
  ///  The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.
  ///  Example: /// Example: 2022-07-07T18:00:00.654321Z
  ///  Constraints: No constraints specified.
  public var endTime: String? { let o = _accessor.offset(VTOFFSET.endTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var endTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.endTime.v) }
  ///  Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
  ///  Example: /// Example: SCBODY
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var frame1: String? { let o = _accessor.offset(VTOFFSET.frame1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var frame1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.frame1.v) }
  ///  Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var frame2: String? { let o = _accessor.offset(VTOFFSET.frame2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var frame2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.frame2.v) }
  ///  Number of attitude records contained in this set.
  ///  Example: /// Example: 120
  ///  Constraints: No constraints specified.
  public var numPoints: Int32 { let o = _accessor.offset(VTOFFSET.numPoints.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.
  ///  Example: /// Example: 60
  ///  Constraints: No constraints specified.
  public var stepSize: Int32 { let o = _accessor.offset(VTOFFSET.stepSize.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Initial precession angle (ECI J2000 frame) in degrees.
  ///  Example: /// Example: 30.5
  ///  Constraints: No constraints specified.
  public var precAngleInit: Double { let o = _accessor.offset(VTOFFSET.precAngleInit.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Initial spin angle (ECI J2000 frame) in degrees.
  ///  Example: /// Example: 25.5
  ///  Constraints: No constraints specified.
  public var spinAngleInit: Double { let o = _accessor.offset(VTOFFSET.spinAngleInit.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. 
  ///  The following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as '2', a double rotation with X-Z sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can be expressed as '312'.
  ///  Example: /// Example: 123
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var eulerRotSeq: String? { let o = _accessor.offset(VTOFFSET.eulerRotSeq.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eulerRotSeqSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eulerRotSeq.v) }
  ///  Collection of attitude data associated with this Attitude Set.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasAttitudeList: Bool { let o = _accessor.offset(VTOFFSET.attitudeList.v); return o == 0 ? false : true }
  public var attitudeListCount: Int32 { let o = _accessor.offset(VTOFFSET.attitudeList.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func attitudeList(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.attitudeList.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Recommended interpolation method for estimating attitude ephemeris data.
  ///  Example: /// Example: LINEAR
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var interpolator: String? { let o = _accessor.offset(VTOFFSET.interpolator.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var interpolatorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.interpolator.v) }
  ///  Recommended polynomial interpolation degree.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var interpolatorDegree: Int32 { let o = _accessor.offset(VTOFFSET.interpolatorDegree.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional notes/comments for this attitude set.
  ///  Example: /// Example: Notes for this attitude set
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-07-05T12:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: AttitudeSet_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : AttitudeSet_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startAttitudeSet_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 29) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(esId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: esId, at: VTOFFSET.esId.p) }
  public static func addVectorOf(asRef: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: asRef, at: VTOFFSET.asRef.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(origSensorId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSensorId, at: VTOFFSET.origSensorId.p) }
  public static func add(startTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: startTime, at: VTOFFSET.startTime.p) }
  public static func add(endTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: endTime, at: VTOFFSET.endTime.p) }
  public static func add(frame1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: frame1, at: VTOFFSET.frame1.p) }
  public static func add(frame2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: frame2, at: VTOFFSET.frame2.p) }
  public static func add(numPoints: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numPoints, def: 0, at: VTOFFSET.numPoints.p) }
  public static func add(stepSize: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: stepSize, def: 0, at: VTOFFSET.stepSize.p) }
  public static func add(precAngleInit: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: precAngleInit, def: 0.0, at: VTOFFSET.precAngleInit.p) }
  public static func add(spinAngleInit: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: spinAngleInit, def: 0.0, at: VTOFFSET.spinAngleInit.p) }
  public static func add(eulerRotSeq: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eulerRotSeq, at: VTOFFSET.eulerRotSeq.p) }
  public static func addVectorOf(attitudeList: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: attitudeList, at: VTOFFSET.attitudeList.p) }
  public static func add(interpolator: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: interpolator, at: VTOFFSET.interpolator.p) }
  public static func add(interpolatorDegree: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: interpolatorDegree, def: 0, at: VTOFFSET.interpolatorDegree.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: AttitudeSet_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endAttitudeSet_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAttitudeSet_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    satNo: Int32 = 0,
    origObjectIdOffset origObjectId: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    esIdOffset esId: Offset = Offset(),
    asRefVectorOffset asRef: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    origSensorIdOffset origSensorId: Offset = Offset(),
    startTimeOffset startTime: Offset = Offset(),
    endTimeOffset endTime: Offset = Offset(),
    frame1Offset frame1: Offset = Offset(),
    frame2Offset frame2: Offset = Offset(),
    numPoints: Int32 = 0,
    stepSize: Int32 = 0,
    precAngleInit: Double = 0.0,
    spinAngleInit: Double = 0.0,
    eulerRotSeqOffset eulerRotSeq: Offset = Offset(),
    attitudeListVectorOffset attitudeList: Offset = Offset(),
    interpolatorOffset interpolator: Offset = Offset(),
    interpolatorDegree: Int32 = 0,
    notesOffset notes: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: AttitudeSet_Ingest_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = AttitudeSet_Ingest.startAttitudeSet_Ingest(&fbb)
    AttitudeSet_Ingest.add(id: id, &fbb)
    AttitudeSet_Ingest.add(classificationMarking: classificationMarking, &fbb)
    AttitudeSet_Ingest.add(idOnOrbit: idOnOrbit, &fbb)
    AttitudeSet_Ingest.add(satNo: satNo, &fbb)
    AttitudeSet_Ingest.add(origObjectId: origObjectId, &fbb)
    AttitudeSet_Ingest.add(type: type, &fbb)
    AttitudeSet_Ingest.add(esId: esId, &fbb)
    AttitudeSet_Ingest.addVectorOf(asRef: asRef, &fbb)
    AttitudeSet_Ingest.add(idSensor: idSensor, &fbb)
    AttitudeSet_Ingest.add(origSensorId: origSensorId, &fbb)
    AttitudeSet_Ingest.add(startTime: startTime, &fbb)
    AttitudeSet_Ingest.add(endTime: endTime, &fbb)
    AttitudeSet_Ingest.add(frame1: frame1, &fbb)
    AttitudeSet_Ingest.add(frame2: frame2, &fbb)
    AttitudeSet_Ingest.add(numPoints: numPoints, &fbb)
    AttitudeSet_Ingest.add(stepSize: stepSize, &fbb)
    AttitudeSet_Ingest.add(precAngleInit: precAngleInit, &fbb)
    AttitudeSet_Ingest.add(spinAngleInit: spinAngleInit, &fbb)
    AttitudeSet_Ingest.add(eulerRotSeq: eulerRotSeq, &fbb)
    AttitudeSet_Ingest.addVectorOf(attitudeList: attitudeList, &fbb)
    AttitudeSet_Ingest.add(interpolator: interpolator, &fbb)
    AttitudeSet_Ingest.add(interpolatorDegree: interpolatorDegree, &fbb)
    AttitudeSet_Ingest.add(notes: notes, &fbb)
    AttitudeSet_Ingest.add(createdAt: createdAt, &fbb)
    AttitudeSet_Ingest.add(createdBy: createdBy, &fbb)
    AttitudeSet_Ingest.add(source: source, &fbb)
    AttitudeSet_Ingest.add(origin: origin, &fbb)
    AttitudeSet_Ingest.add(dataMode: dataMode, &fbb)
    AttitudeSet_Ingest.add(origNetwork: origNetwork, &fbb)
    return AttitudeSet_Ingest.endAttitudeSet_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.esId.p, fieldName: "esId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.asRef.p, fieldName: "asRef", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSensorId.p, fieldName: "origSensorId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.startTime.p, fieldName: "startTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.endTime.p, fieldName: "endTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.frame1.p, fieldName: "frame1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.frame2.p, fieldName: "frame2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numPoints.p, fieldName: "numPoints", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.stepSize.p, fieldName: "stepSize", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.precAngleInit.p, fieldName: "precAngleInit", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.spinAngleInit.p, fieldName: "spinAngleInit", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.eulerRotSeq.p, fieldName: "eulerRotSeq", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.attitudeList.p, fieldName: "attitudeList", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.interpolator.p, fieldName: "interpolator", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.interpolatorDegree.p, fieldName: "interpolatorDegree", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: AttitudeSet_Ingest_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

