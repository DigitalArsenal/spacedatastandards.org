// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Item_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Item_Full_dataMode_Enum { return .exercise }
  public static var min: Item_Full_dataMode_Enum { return .real }
}


///  /// No description available.
public struct Item_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ITEM" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Item_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idAirLoadPlan = 8
    case scanCode = 10
    case scGenTool = 12
    case type = 14
    case cargoType = 16
    case name = 18
    case destination = 20
    case departure = 22
    case receivingUnit = 24
    case receivingBranch = 26
    case lastArrDate = 28
    case uln = 30
    case weight = 32
    case weightTs = 34
    case commodityCode = 36
    case commoditySys = 38
    case productCode = 40
    case productSys = 42
    case width = 44
    case length = 46
    case height = 48
    case volume = 50
    case cg = 52
    case fs = 54
    case centerlineOffset = 56
    case moment = 58
    case airdrop = 60
    case tcn = 62
    case hazCodes = 64
    case netExpWt = 66
    case container = 68
    case itemContains = 70
    case numPalletPos = 72
    case dvCode = 74
    case notes = 76
    case keys = 78
    case values = 80
    case altDataFormat = 82
    case accSystem = 84
    case accSysNotes = 86
    case accSysKeys = 88
    case accSysValues = 90
    case createdAt = 92
    case createdBy = 94
    case updatedAt = 96
    case updatedBy = 98
    case sourceDl = 100
    case source = 102
    case origin = 104
    case origNetwork = 106
    case dataMode = 108
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: 22f1f6da-a568-655a-ea37-76d013d04853
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The UDL ID of the air load plan this item is associated with.
  ///  Example: /// Example: 1038c389-d38e-270f-51cc-6a12e905abe8
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idAirLoadPlan: String? { let o = _accessor.offset(VTOFFSET.idAirLoadPlan.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idAirLoadPlanSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idAirLoadPlan.v) }
  ///  The tracking identifier of an item or person. May be similar in representation of a barcode or UPC. If no scanCode or tracking number equivalent is available, 'NONE' should be used.
  ///  Example: /// Example: 12345ABCD
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var scanCode: String? { let o = _accessor.offset(VTOFFSET.scanCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var scanCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.scanCode.v) }
  ///  The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
  ///  Example: /// Example: bID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var scGenTool: String? { let o = _accessor.offset(VTOFFSET.scGenTool.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var scGenToolSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.scGenTool.v) }
  ///  The item type of this record (e.g. EQUIPMENT, CARGO, PASSENGER).
  ///  Example: /// Example: CARGO
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  The type of cargo (e.g. PALLET, ROLLING STOCK, LOOSE, OTHER). Applicable for cargo item types only.
  ///  Example: /// Example: PALLET
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var cargoType: String? { let o = _accessor.offset(VTOFFSET.cargoType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cargoTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cargoType.v) }
  ///  Name of the item. Applicable for equipment and cargo item types only.
  ///  Example: /// Example: Product Name
  ///  Constraints: Minimum length = 0, Maximum length = 100
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  The destination of the item, typically an ICAO or port code. Applicable for cargo and passenger item types only.
  ///  Example: /// Example: RMS
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var destination: String? { let o = _accessor.offset(VTOFFSET.destination.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var destinationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.destination.v) }
  ///  The departure code or location where this item has left or is leaving.
  ///  Example: /// Example: CHS
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var departure: String? { let o = _accessor.offset(VTOFFSET.departure.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var departureSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.departure.v) }
  ///  The name of the unit receiving this item.
  ///  Example: /// Example: 50 SBN
  ///  Constraints: Minimum length = 0, Maximum length = 100
  public var receivingUnit: String? { let o = _accessor.offset(VTOFFSET.receivingUnit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var receivingUnitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.receivingUnit.v) }
  ///  The military branch receiving this item.
  ///  Example: /// Example: Air Force
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var receivingBranch: String? { let o = _accessor.offset(VTOFFSET.receivingBranch.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var receivingBranchSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.receivingBranch.v) }
  ///  The latest acceptable arrival date of the item at the destination, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
  ///  Example: /// Example: 2023-03-13
  ///  Constraints: No constraints specified.
  public var lastArrDate: String? { let o = _accessor.offset(VTOFFSET.lastArrDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastArrDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastArrDate.v) }
  ///  The unit line number of this item.
  ///  Example: /// Example: T01ME01
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var uln: String? { let o = _accessor.offset(VTOFFSET.uln.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ulnSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.uln.v) }
  ///  Weight of the item in kilograms (if item is a passenger, include on-person bags).
  ///  Example: /// Example: 5443.335
  ///  Constraints: No constraints specified.
  public var weight: Double { let o = _accessor.offset(VTOFFSET.weight.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Timestamp when the weight was taken, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-03-13T16:06:00.123Z
  ///  Constraints: No constraints specified.
  public var weightTs: String? { let o = _accessor.offset(VTOFFSET.weightTs.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var weightTsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.weightTs.v) }
  ///  The classification code of the commodity or group of commodities.
  ///  Example: /// Example: 2304116
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var commodityCode: String? { let o = _accessor.offset(VTOFFSET.commodityCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var commodityCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.commodityCode.v) }
  ///  The classification system denoting the commodity code, commodityCode (e.g. AIR, WATER, NMFC, UFC, STCC, DODUNQ, etc.).
  ///  Example: /// Example: STCC
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var commoditySys: String? { let o = _accessor.offset(VTOFFSET.commoditySys.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var commoditySysSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.commoditySys.v) }
  ///  The code denoting the type of material item.
  ///  Example: /// Example: 530500234
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var productCode: String? { let o = _accessor.offset(VTOFFSET.productCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var productCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.productCode.v) }
  ///  The assigning system that denotes the type of material item, productCode (e.g. NSN-national stock number, NDC-national drug code, MPN-manufacturer part number, etc.).
  ///  Example: /// Example: NSN
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var productSys: String? { let o = _accessor.offset(VTOFFSET.productSys.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var productSysSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.productSys.v) }
  ///  Width of the cargo in meters. Applicable for cargo item types only.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var width: Double { let o = _accessor.offset(VTOFFSET.width.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Length of the cargo in meters. Applicable for cargo item types only.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var length: Double { let o = _accessor.offset(VTOFFSET.length.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Height of the cargo in meters. Applicable for cargo item types only.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var height: Double { let o = _accessor.offset(VTOFFSET.height.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The volume of the item, in cubic meters. Applicable for cargo item types only.
  ///  Example: /// Example: 7.8902
  ///  Constraints: No constraints specified.
  public var volume: Double { let o = _accessor.offset(VTOFFSET.volume.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Center of gravity position of the item, measured from the item's front datum, in centimeters.
  ///  Example: /// Example: 112.014
  ///  Constraints: No constraints specified.
  public var cg: Double { let o = _accessor.offset(VTOFFSET.cg.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The fuselage station of the item measured from the reference datum, in centimeters. Applicable for cargo and passenger item types only.
  ///  Example: /// Example: 412.1
  ///  Constraints: No constraints specified.
  public var fs: Double { let o = _accessor.offset(VTOFFSET.fs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  How far left or right of centerline is the item in meters. Applicable for cargo and passenger item types only.
  ///  Example: /// Example: 3.1
  ///  Constraints: No constraints specified.
  public var centerlineOffset: Double { let o = _accessor.offset(VTOFFSET.centerlineOffset.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Moment of the item in Newton-meters. Applicable for equipment and cargo item types only.
  ///  Example: /// Example: 4000.1
  ///  Constraints: No constraints specified.
  public var moment: Double { let o = _accessor.offset(VTOFFSET.moment.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Flag indicating this item is planned to be airdropped. Applicable for cargo and passenger item types only.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var airdrop: Bool { let o = _accessor.offset(VTOFFSET.airdrop.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Transportation Control Number of the cargo. Applicable for cargo item types only.
  ///  Example: /// Example: M1358232245912XXX
  ///  Constraints: Minimum length = 0, Maximum length = 17
  public var tcn: String? { let o = _accessor.offset(VTOFFSET.tcn.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tcnSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tcn.v) }
  ///  Array of UN hazard classes or division codes that apply to this item.
  ///  Example: /// Example: [1.1, 1.2]
  ///  Constraints: No constraints specified.
  public var hasHazCodes: Bool { let o = _accessor.offset(VTOFFSET.hazCodes.v); return o == 0 ? false : true }
  public var hazCodesCount: Int32 { let o = _accessor.offset(VTOFFSET.hazCodes.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func hazCodes(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.hazCodes.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Net explosive weight of the item, in kilograms.
  ///  Example: /// Example: 51.437
  ///  Constraints: No constraints specified.
  public var netExpWt: Double { let o = _accessor.offset(VTOFFSET.netExpWt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Flag indicating this item acts as a container and contains additional items.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var container: Bool { let o = _accessor.offset(VTOFFSET.container.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Array of tracking identifiers that are contained within this item.
  ///  Example: /// Example: ['2UJ8843K', '745YV1T65']
  ///  Constraints: No constraints specified.
  public var hasItemContains: Bool { let o = _accessor.offset(VTOFFSET.itemContains.v); return o == 0 ? false : true }
  public var itemContainsCount: Int32 { let o = _accessor.offset(VTOFFSET.itemContains.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func itemContains(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.itemContains.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Number of pallet positions or equivalent on the aircraft, ship, or conveyance equipment that this item occupies.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var numPalletPos: Int32 { let o = _accessor.offset(VTOFFSET.numPalletPos.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  United States Distinguished Visitor Code, only applicable to people.
  ///  Example: /// Example: DV-2
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var dvCode: String? { let o = _accessor.offset(VTOFFSET.dvCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dvCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dvCode.v) }
  ///  Optional notes or comments about this item.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  ///  Array of keys that may be associated to this item. The entries in this array must correspond to the position index in the values array. This array must be the same length as values..
  ///  Example: /// Example: ['key1', 'key2']
  ///  Constraints: No constraints specified.
  public var hasKeys: Bool { let o = _accessor.offset(VTOFFSET.keys.v); return o == 0 ? false : true }
  public var keysCount: Int32 { let o = _accessor.offset(VTOFFSET.keys.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func keys(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.keys.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
  ///  Example: /// Example: ['value1', 'value2']
  ///  Constraints: No constraints specified.
  public var hasValues: Bool { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? false : true }
  public var valuesCount: Int32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func values(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Name of the additional data format so downstream consuming applications can know how to parse it. Typically includes the source system name and the format name.
  ///  Example: /// Example: Alt Data Format
  ///  Constraints: Minimum length = 0, Maximum length = 100
  public var altDataFormat: String? { let o = _accessor.offset(VTOFFSET.altDataFormat.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altDataFormatSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altDataFormat.v) }
  ///  Name of the system that accepted this item from a customer. Where a user or application could go look for additional information.
  ///  Example: /// Example: Accepting System
  ///  Constraints: Minimum length = 0, Maximum length = 100
  public var accSystem: String? { let o = _accessor.offset(VTOFFSET.accSystem.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var accSystemSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.accSystem.v) }
  ///  Additional data required to find this item in the accepting system.
  ///  Example: /// Example: Accepting System Notes
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var accSysNotes: String? { let o = _accessor.offset(VTOFFSET.accSysNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var accSysNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.accSysNotes.v) }
  ///  Array of keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysValues array. This array must be the same length as accSysValues.
  ///  Example: /// Example: ['System key1', 'System key2']
  ///  Constraints: No constraints specified.
  public var hasAccSysKeys: Bool { let o = _accessor.offset(VTOFFSET.accSysKeys.v); return o == 0 ? false : true }
  public var accSysKeysCount: Int32 { let o = _accessor.offset(VTOFFSET.accSysKeys.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func accSysKeys(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.accSysKeys.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of values for the keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysKeys array. This array must be the same length as accSysKeys.
  ///  Example: /// Example: ['System value1', 'System value2']
  ///  Constraints: No constraints specified.
  public var hasAccSysValues: Bool { let o = _accessor.offset(VTOFFSET.accSysValues.v); return o == 0 ? false : true }
  public var accSysValuesCount: Int32 { let o = _accessor.offset(VTOFFSET.accSysValues.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func accSysValues(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.accSysValues.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2023-03-21T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Item_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Item_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startItem_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 53) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idAirLoadPlan: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idAirLoadPlan, at: VTOFFSET.idAirLoadPlan.p) }
  public static func add(scanCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: scanCode, at: VTOFFSET.scanCode.p) }
  public static func add(scGenTool: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: scGenTool, at: VTOFFSET.scGenTool.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(cargoType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cargoType, at: VTOFFSET.cargoType.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(destination: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: destination, at: VTOFFSET.destination.p) }
  public static func add(departure: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: departure, at: VTOFFSET.departure.p) }
  public static func add(receivingUnit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: receivingUnit, at: VTOFFSET.receivingUnit.p) }
  public static func add(receivingBranch: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: receivingBranch, at: VTOFFSET.receivingBranch.p) }
  public static func add(lastArrDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastArrDate, at: VTOFFSET.lastArrDate.p) }
  public static func add(uln: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uln, at: VTOFFSET.uln.p) }
  public static func add(weight: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: weight, def: 0.0, at: VTOFFSET.weight.p) }
  public static func add(weightTs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weightTs, at: VTOFFSET.weightTs.p) }
  public static func add(commodityCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: commodityCode, at: VTOFFSET.commodityCode.p) }
  public static func add(commoditySys: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: commoditySys, at: VTOFFSET.commoditySys.p) }
  public static func add(productCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: productCode, at: VTOFFSET.productCode.p) }
  public static func add(productSys: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: productSys, at: VTOFFSET.productSys.p) }
  public static func add(width: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: width, def: 0.0, at: VTOFFSET.width.p) }
  public static func add(length: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: length, def: 0.0, at: VTOFFSET.length.p) }
  public static func add(height: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: height, def: 0.0, at: VTOFFSET.height.p) }
  public static func add(volume: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: volume, def: 0.0, at: VTOFFSET.volume.p) }
  public static func add(cg: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cg, def: 0.0, at: VTOFFSET.cg.p) }
  public static func add(fs: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fs, def: 0.0, at: VTOFFSET.fs.p) }
  public static func add(centerlineOffset: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: centerlineOffset, def: 0.0, at: VTOFFSET.centerlineOffset.p) }
  public static func add(moment: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: moment, def: 0.0, at: VTOFFSET.moment.p) }
  public static func add(airdrop: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: airdrop, def: false,
   at: VTOFFSET.airdrop.p) }
  public static func add(tcn: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tcn, at: VTOFFSET.tcn.p) }
  public static func addVectorOf(hazCodes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hazCodes, at: VTOFFSET.hazCodes.p) }
  public static func add(netExpWt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: netExpWt, def: 0.0, at: VTOFFSET.netExpWt.p) }
  public static func add(container: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: container, def: false,
   at: VTOFFSET.container.p) }
  public static func addVectorOf(itemContains: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: itemContains, at: VTOFFSET.itemContains.p) }
  public static func add(numPalletPos: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numPalletPos, def: 0, at: VTOFFSET.numPalletPos.p) }
  public static func add(dvCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dvCode, at: VTOFFSET.dvCode.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func addVectorOf(keys: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: keys, at: VTOFFSET.keys.p) }
  public static func addVectorOf(values: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: values, at: VTOFFSET.values.p) }
  public static func add(altDataFormat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altDataFormat, at: VTOFFSET.altDataFormat.p) }
  public static func add(accSystem: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: accSystem, at: VTOFFSET.accSystem.p) }
  public static func add(accSysNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: accSysNotes, at: VTOFFSET.accSysNotes.p) }
  public static func addVectorOf(accSysKeys: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: accSysKeys, at: VTOFFSET.accSysKeys.p) }
  public static func addVectorOf(accSysValues: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: accSysValues, at: VTOFFSET.accSysValues.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: Item_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endItem_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createItem_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idAirLoadPlanOffset idAirLoadPlan: Offset = Offset(),
    scanCodeOffset scanCode: Offset = Offset(),
    scGenToolOffset scGenTool: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    cargoTypeOffset cargoType: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    destinationOffset destination: Offset = Offset(),
    departureOffset departure: Offset = Offset(),
    receivingUnitOffset receivingUnit: Offset = Offset(),
    receivingBranchOffset receivingBranch: Offset = Offset(),
    lastArrDateOffset lastArrDate: Offset = Offset(),
    ulnOffset uln: Offset = Offset(),
    weight: Double = 0.0,
    weightTsOffset weightTs: Offset = Offset(),
    commodityCodeOffset commodityCode: Offset = Offset(),
    commoditySysOffset commoditySys: Offset = Offset(),
    productCodeOffset productCode: Offset = Offset(),
    productSysOffset productSys: Offset = Offset(),
    width: Double = 0.0,
    length: Double = 0.0,
    height: Double = 0.0,
    volume: Double = 0.0,
    cg: Double = 0.0,
    fs: Double = 0.0,
    centerlineOffset: Double = 0.0,
    moment: Double = 0.0,
    airdrop: Bool = false,
    tcnOffset tcn: Offset = Offset(),
    hazCodesVectorOffset hazCodes: Offset = Offset(),
    netExpWt: Double = 0.0,
    container: Bool = false,
    itemContainsVectorOffset itemContains: Offset = Offset(),
    numPalletPos: Int32 = 0,
    dvCodeOffset dvCode: Offset = Offset(),
    notesOffset notes: Offset = Offset(),
    keysVectorOffset keys: Offset = Offset(),
    valuesVectorOffset values: Offset = Offset(),
    altDataFormatOffset altDataFormat: Offset = Offset(),
    accSystemOffset accSystem: Offset = Offset(),
    accSysNotesOffset accSysNotes: Offset = Offset(),
    accSysKeysVectorOffset accSysKeys: Offset = Offset(),
    accSysValuesVectorOffset accSysValues: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: Item_Full_dataMode_Enum = .real
  ) -> Offset {
    let __start = Item_Full.startItem_Full(&fbb)
    Item_Full.add(id: id, &fbb)
    Item_Full.add(classificationMarking: classificationMarking, &fbb)
    Item_Full.add(idAirLoadPlan: idAirLoadPlan, &fbb)
    Item_Full.add(scanCode: scanCode, &fbb)
    Item_Full.add(scGenTool: scGenTool, &fbb)
    Item_Full.add(type: type, &fbb)
    Item_Full.add(cargoType: cargoType, &fbb)
    Item_Full.add(name: name, &fbb)
    Item_Full.add(destination: destination, &fbb)
    Item_Full.add(departure: departure, &fbb)
    Item_Full.add(receivingUnit: receivingUnit, &fbb)
    Item_Full.add(receivingBranch: receivingBranch, &fbb)
    Item_Full.add(lastArrDate: lastArrDate, &fbb)
    Item_Full.add(uln: uln, &fbb)
    Item_Full.add(weight: weight, &fbb)
    Item_Full.add(weightTs: weightTs, &fbb)
    Item_Full.add(commodityCode: commodityCode, &fbb)
    Item_Full.add(commoditySys: commoditySys, &fbb)
    Item_Full.add(productCode: productCode, &fbb)
    Item_Full.add(productSys: productSys, &fbb)
    Item_Full.add(width: width, &fbb)
    Item_Full.add(length: length, &fbb)
    Item_Full.add(height: height, &fbb)
    Item_Full.add(volume: volume, &fbb)
    Item_Full.add(cg: cg, &fbb)
    Item_Full.add(fs: fs, &fbb)
    Item_Full.add(centerlineOffset: centerlineOffset, &fbb)
    Item_Full.add(moment: moment, &fbb)
    Item_Full.add(airdrop: airdrop, &fbb)
    Item_Full.add(tcn: tcn, &fbb)
    Item_Full.addVectorOf(hazCodes: hazCodes, &fbb)
    Item_Full.add(netExpWt: netExpWt, &fbb)
    Item_Full.add(container: container, &fbb)
    Item_Full.addVectorOf(itemContains: itemContains, &fbb)
    Item_Full.add(numPalletPos: numPalletPos, &fbb)
    Item_Full.add(dvCode: dvCode, &fbb)
    Item_Full.add(notes: notes, &fbb)
    Item_Full.addVectorOf(keys: keys, &fbb)
    Item_Full.addVectorOf(values: values, &fbb)
    Item_Full.add(altDataFormat: altDataFormat, &fbb)
    Item_Full.add(accSystem: accSystem, &fbb)
    Item_Full.add(accSysNotes: accSysNotes, &fbb)
    Item_Full.addVectorOf(accSysKeys: accSysKeys, &fbb)
    Item_Full.addVectorOf(accSysValues: accSysValues, &fbb)
    Item_Full.add(createdAt: createdAt, &fbb)
    Item_Full.add(createdBy: createdBy, &fbb)
    Item_Full.add(updatedAt: updatedAt, &fbb)
    Item_Full.add(updatedBy: updatedBy, &fbb)
    Item_Full.add(sourceDl: sourceDl, &fbb)
    Item_Full.add(source: source, &fbb)
    Item_Full.add(origin: origin, &fbb)
    Item_Full.add(origNetwork: origNetwork, &fbb)
    Item_Full.add(dataMode: dataMode, &fbb)
    return Item_Full.endItem_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idAirLoadPlan.p, fieldName: "idAirLoadPlan", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.scanCode.p, fieldName: "scanCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.scGenTool.p, fieldName: "scGenTool", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cargoType.p, fieldName: "cargoType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.destination.p, fieldName: "destination", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.departure.p, fieldName: "departure", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.receivingUnit.p, fieldName: "receivingUnit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.receivingBranch.p, fieldName: "receivingBranch", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lastArrDate.p, fieldName: "lastArrDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.uln.p, fieldName: "uln", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.weight.p, fieldName: "weight", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.weightTs.p, fieldName: "weightTs", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.commodityCode.p, fieldName: "commodityCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.commoditySys.p, fieldName: "commoditySys", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.productCode.p, fieldName: "productCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.productSys.p, fieldName: "productSys", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.width.p, fieldName: "width", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.length.p, fieldName: "length", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.height.p, fieldName: "height", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.volume.p, fieldName: "volume", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.cg.p, fieldName: "cg", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fs.p, fieldName: "fs", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.centerlineOffset.p, fieldName: "centerlineOffset", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.moment.p, fieldName: "moment", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.airdrop.p, fieldName: "airdrop", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.tcn.p, fieldName: "tcn", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.hazCodes.p, fieldName: "hazCodes", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.netExpWt.p, fieldName: "netExpWt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.container.p, fieldName: "container", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.itemContains.p, fieldName: "itemContains", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.numPalletPos.p, fieldName: "numPalletPos", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.dvCode.p, fieldName: "dvCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.keys.p, fieldName: "keys", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.values.p, fieldName: "values", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.altDataFormat.p, fieldName: "altDataFormat", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.accSystem.p, fieldName: "accSystem", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.accSysNotes.p, fieldName: "accSysNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.accSysKeys.p, fieldName: "accSysKeys", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.accSysValues.p, fieldName: "accSysValues", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Item_Full_dataMode_Enum.self)
    _v.finish()
  }
}

