// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum AircraftSortie_Ingest_paperStatus_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case published = 0
  ///  No description available.
  case deleted = 1
  ///  No description available.
  case updated = 2
  ///  No description available.
  case read = 3

  public static var max: AircraftSortie_Ingest_paperStatus_Enum { return .read }
  public static var min: AircraftSortie_Ingest_paperStatus_Enum { return .published }
}


public enum AircraftSortie_Ingest_pprStatus_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case notRequired = 0
  ///  No description available.
  case requiredNotRequested = 1
  ///  No description available.
  case granted = 2
  ///  No description available.
  case pending = 3

  public static var max: AircraftSortie_Ingest_pprStatus_Enum { return .pending }
  public static var min: AircraftSortie_Ingest_pprStatus_Enum { return .notRequired }
}


public enum AircraftSortie_Ingest_rvnReq_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case n = 0
  ///  No description available.
  case r = 1
  ///  No description available.
  case c6 = 2
  ///  No description available.
  case r6 = 3

  public static var max: AircraftSortie_Ingest_rvnReq_Enum { return .r6 }
  public static var min: AircraftSortie_Ingest_rvnReq_Enum { return .n }
}


public enum AircraftSortie_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: AircraftSortie_Ingest_dataMode_Enum { return .exercise }
  public static var min: AircraftSortie_Ingest_dataMode_Enum { return .real }
}


///  /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
public struct AircraftSortie_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AircraftSortie_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case origSortieId = 8
    case idAircraft = 10
    case aircraftAltId = 12
    case tailNumber = 14
    case aircraftMds = 16
    case aircraftAdsb = 18
    case sortieDate = 20
    case lineNumber = 22
    case idMission = 24
    case missionId = 26
    case amcMsnNum = 28
    case amcMsnType = 30
    case callSign = 32
    case jcsPriority = 34
    case primaryScl = 36
    case secondaryScl = 38
    case reqConfig = 40
    case cargoConfig = 42
    case fuelReq = 44
    case oxyReqCrew = 46
    case oxyOnCrew = 48
    case oxyReqPax = 50
    case oxyOnPax = 52
    case alertStatusCode = 54
    case alertStatus = 56
    case currentState = 58
    case depItinerary = 60
    case depIcao = 62
    case depIata = 64
    case depFaa = 66
    case plannedDepTime = 68
    case estDepTime = 70
    case actualDepTime = 72
    case estBlockOutTime = 74
    case actualBlockOutTime = 76
    case depPurposeCode = 78
    case arrItinerary = 80
    case arrIcao = 82
    case arrIata = 84
    case arrFaa = 86
    case plannedArrTime = 88
    case estArrTime = 90
    case actualArrTime = 92
    case estBlockInTime = 94
    case actualBlockInTime = 96
    case arrPurposeCode = 98
    case dhd = 100
    case dhdReason = 102
    case aircraftEvent = 104
    case soe = 106
    case legNum = 108
    case flightTime = 110
    case gndTime = 112
    case rawFileUri = 114
    case papersVersion = 116
    case filename = 118
    case filesize = 120
    case paperStatus = 122
    case pprStatus = 124
    case missionUpdate = 126
    case delayCode = 128
    case commanderName = 130
    case fmDeskNum = 132
    case fmName = 134
    case rvnReq = 136
    case passengers = 138
    case parkingLoc = 140
    case objectiveRemarks = 142
    case aircraftRemarks = 144
    case scheduleRemarks = 146
    case resultRemarks = 148
    case createdAt = 150
    case createdBy = 152
    case sourceDl = 154
    case source = 156
    case origin = 158
    case dataMode = 160
    case origNetwork = 162
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: AIRCRAFTSORTIE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The sortie identifier provided by the originating source.
  ///  Example: /// Example: A0640
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origSortieId: String? { let o = _accessor.offset(VTOFFSET.origSortieId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSortieIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSortieId.v) }
  ///  Unique identifier of the aircraft.
  ///  Example: /// Example: REF-AIRCRAFT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idAircraft: String? { let o = _accessor.offset(VTOFFSET.idAircraft.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idAircraftSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idAircraft.v) }
  ///  Alternate Aircraft Identifier provided by source.
  ///  Example: /// Example: ALT-AIRCRAFT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var aircraftAltId: String? { let o = _accessor.offset(VTOFFSET.aircraftAltId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aircraftAltIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aircraftAltId.v) }
  ///  The tail number of the aircraft assigned to this sortie.
  ///  Example: /// Example: Tail_1
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var tailNumber: String? { let o = _accessor.offset(VTOFFSET.tailNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tailNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tailNumber.v) }
  ///  The aircraft Model Design Series designation assigned to this sortie.
  ///  Example: /// Example: C017A
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var aircraftMds: String? { let o = _accessor.offset(VTOFFSET.aircraftMds.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aircraftMdsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aircraftMds.v) }
  ///  The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
  ///  Example: /// Example: AE123C
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var aircraftAdsb: String? { let o = _accessor.offset(VTOFFSET.aircraftAdsb.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aircraftAdsbSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aircraftAdsb.v) }
  ///  The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  ///  Example: /// Example: 2021-01-01
  ///  Constraints: No constraints specified.
  public var sortieDate: String? { let o = _accessor.offset(VTOFFSET.sortieDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sortieDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sortieDate.v) }
  ///  The external system line number of this sortie.
  ///  Example: /// Example: 99
  ///  Constraints: No constraints specified.
  public var lineNumber: Int32 { let o = _accessor.offset(VTOFFSET.lineNumber.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The unique identifier of the mission to which this sortie is assigned.
  ///  Example: /// Example: fa18d96e-91ea-60da-a7a8-1af6500066c8
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idMission: String? { let o = _accessor.offset(VTOFFSET.idMission.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idMissionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idMission.v) }
  ///  The mission ID according to the source system.
  ///  Example: /// Example: ABLE
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var missionId: String? { let o = _accessor.offset(VTOFFSET.missionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var missionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.missionId.v) }
  ///  The Air Mobility Command (AMC) mission number of the sortie.
  ///  Example: /// Example: AJM512571333
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var amcMsnNum: String? { let o = _accessor.offset(VTOFFSET.amcMsnNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var amcMsnNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.amcMsnNum.v) }
  ///  The type of mission (e.g. SAAM, CHNL, etc.).
  ///  Example: /// Example: SAAM
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var amcMsnType: String? { let o = _accessor.offset(VTOFFSET.amcMsnType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var amcMsnTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.amcMsnType.v) }
  ///  The call sign assigned to the aircraft on this sortie.
  ///  Example: /// Example: BAKER
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var callSign: String? { let o = _accessor.offset(VTOFFSET.callSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var callSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.callSign.v) }
  ///  Joint Chiefs of Staff priority of this sortie.
  ///  Example: /// Example: 1A3
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var jcsPriority: String? { let o = _accessor.offset(VTOFFSET.jcsPriority.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var jcsPrioritySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.jcsPriority.v) }
  ///  The planned primary Standard Conventional Load of the aircraft for this sortie.
  ///  Example: /// Example: ABC
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var primaryScl: String? { let o = _accessor.offset(VTOFFSET.primaryScl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var primarySclSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.primaryScl.v) }
  ///  The planned secondary Standard Conventional Load of the aircraft for this sortie.
  ///  Example: /// Example: ABC
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var secondaryScl: String? { let o = _accessor.offset(VTOFFSET.secondaryScl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var secondarySclSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.secondaryScl.v) }
  ///  Aircraft configuration required for the mission.
  ///  Example: /// Example: C-1
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var reqConfig: String? { let o = _accessor.offset(VTOFFSET.reqConfig.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reqConfigSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reqConfig.v) }
  ///  Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.) currently on board the aircraft. Configuration meanings are determined by the data source.
  ///  Example: /// Example: C-1
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var cargoConfig: String? { let o = _accessor.offset(VTOFFSET.cargoConfig.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cargoConfigSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cargoConfig.v) }
  ///  Mass of fuel required for this leg of the sortie, in kilograms.
  ///  Example: /// Example: 20000.1
  ///  Constraints: No constraints specified.
  public var fuelReq: Double { let o = _accessor.offset(VTOFFSET.fuelReq.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Liquid oxygen required on the aircraft for the crew compartment, in liters.
  ///  Example: /// Example: 12.3
  ///  Constraints: No constraints specified.
  public var oxyReqCrew: Double { let o = _accessor.offset(VTOFFSET.oxyReqCrew.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Liquid oxygen onboard the aircraft for the crew compartment, in liters.
  ///  Example: /// Example: 12.3
  ///  Constraints: No constraints specified.
  public var oxyOnCrew: Double { let o = _accessor.offset(VTOFFSET.oxyOnCrew.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Liquid oxygen required on the aircraft for the troop compartment, in liters.
  ///  Example: /// Example: 12.3
  ///  Constraints: No constraints specified.
  public var oxyReqPax: Double { let o = _accessor.offset(VTOFFSET.oxyReqPax.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Liquid oxygen onboard the aircraft for the troop compartment, in liters.
  ///  Example: /// Example: 12.3
  ///  Constraints: No constraints specified.
  public var oxyOnPax: Double { let o = _accessor.offset(VTOFFSET.oxyOnPax.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Alert Status code.
  ///  Example: /// Example: C1
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var alertStatusCode: String? { let o = _accessor.offset(VTOFFSET.alertStatusCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var alertStatusCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.alertStatusCode.v) }
  ///  The amount of time allowed between launch order and takeoff, in seconds.
  ///  Example: /// Example: 22
  ///  Constraints: No constraints specified.
  public var alertStatus: Int32 { let o = _accessor.offset(VTOFFSET.alertStatus.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The current state of this sortie.
  ///  Example: /// Example: Park
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var currentState: String? { let o = _accessor.offset(VTOFFSET.currentState.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var currentStateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.currentState.v) }
  ///  The itinerary identifier of the departure location.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  public var depItinerary: Int32 { let o = _accessor.offset(VTOFFSET.depItinerary.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The departure International Civil Aviation Organization (ICAO) of this sortie.
  ///  Example: /// Example: KCOS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var depIcao: String? { let o = _accessor.offset(VTOFFSET.depIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var depIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.depIcao.v) }
  ///  The departure International Aviation Transport Association (IATA) code of this sortie.
  ///  Example: /// Example: AAA
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var depIata: String? { let o = _accessor.offset(VTOFFSET.depIata.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var depIataSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.depIata.v) }
  ///  The departure Federal Aviation Administration (FAA) code of this sortie.
  ///  Example: /// Example: FAA1
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var depFaa: String? { let o = _accessor.offset(VTOFFSET.depFaa.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var depFaaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.depFaa.v) }
  ///  The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var plannedDepTime: String? { let o = _accessor.offset(VTOFFSET.plannedDepTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var plannedDepTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.plannedDepTime.v) }
  ///  The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var estDepTime: String? { let o = _accessor.offset(VTOFFSET.estDepTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var estDepTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.estDepTime.v) }
  ///  The actual departure time, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var actualDepTime: String? { let o = _accessor.offset(VTOFFSET.actualDepTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actualDepTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.actualDepTime.v) }
  ///  The estimated time the Aircraft will begin to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T00:55:01.123Z
  ///  Constraints: No constraints specified.
  public var estBlockOutTime: String? { let o = _accessor.offset(VTOFFSET.estBlockOutTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var estBlockOutTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.estBlockOutTime.v) }
  ///  The actual time the Aircraft begins to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T00:55:01.123Z
  ///  Constraints: No constraints specified.
  public var actualBlockOutTime: String? { let o = _accessor.offset(VTOFFSET.actualBlockOutTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actualBlockOutTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.actualBlockOutTime.v) }
  ///  Purpose code at the departure location of this sortie.
  ///  Example: /// Example: P
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var depPurposeCode: String? { let o = _accessor.offset(VTOFFSET.depPurposeCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var depPurposeCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.depPurposeCode.v) }
  ///  The itinerary identifier of the arrival location.
  ///  Example: /// Example: 101
  ///  Constraints: No constraints specified.
  public var arrItinerary: Int32 { let o = _accessor.offset(VTOFFSET.arrItinerary.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The arrival International Civil Aviation Organization (ICAO) of this sortie.
  ///  Example: /// Example: KCOS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var arrIcao: String? { let o = _accessor.offset(VTOFFSET.arrIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var arrIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.arrIcao.v) }
  ///  The arrival International Aviation Transport Association (IATA) code of this sortie.
  ///  Example: /// Example: AAA
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var arrIata: String? { let o = _accessor.offset(VTOFFSET.arrIata.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var arrIataSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.arrIata.v) }
  ///  The arrival Federal Aviation Administration (FAA) code of this sortie.
  ///  Example: /// Example: FAA1
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var arrFaa: String? { let o = _accessor.offset(VTOFFSET.arrFaa.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var arrFaaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.arrFaa.v) }
  ///  The scheduled time that the Aircraft sortie is planned to arrive,  in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var plannedArrTime: String? { let o = _accessor.offset(VTOFFSET.plannedArrTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var plannedArrTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.plannedArrTime.v) }
  ///  The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var estArrTime: String? { let o = _accessor.offset(VTOFFSET.estArrTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var estArrTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.estArrTime.v) }
  ///  The actual arrival time, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var actualArrTime: String? { let o = _accessor.offset(VTOFFSET.actualArrTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actualArrTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.actualArrTime.v) }
  ///  The estimated time the Aircraft will come to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T01:06:01.123Z
  ///  Constraints: No constraints specified.
  public var estBlockInTime: String? { let o = _accessor.offset(VTOFFSET.estBlockInTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var estBlockInTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.estBlockInTime.v) }
  ///  The actual time the Aircraft comes to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-01T01:06:01.123Z
  ///  Constraints: No constraints specified.
  public var actualBlockInTime: String? { let o = _accessor.offset(VTOFFSET.actualBlockInTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actualBlockInTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.actualBlockInTime.v) }
  ///  Purpose code at the arrival location of this sortie.
  ///  Example: /// Example: O
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var arrPurposeCode: String? { let o = _accessor.offset(VTOFFSET.arrPurposeCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var arrPurposeCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.arrPurposeCode.v) }
  ///  Due home date by which the aircraft must return to its home station, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-01-03T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var dhd: String? { let o = _accessor.offset(VTOFFSET.dhd.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dhdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dhd.v) }
  ///  Reason the aircraft must return to home station by its due home date.
  ///  Example: /// Example: Due for maintenance
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var dhdReason: String? { let o = _accessor.offset(VTOFFSET.dhdReason.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dhdReasonSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dhdReason.v) }
  ///  Aircraft event text.
  ///  Example: /// Example: Example event
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var aircraftEvent: String? { let o = _accessor.offset(VTOFFSET.aircraftEvent.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aircraftEventSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aircraftEvent.v) }
  ///  Indicates the group responsible for recording the completion time of the next event in the sequence of events assigned to this sortie (e.g. OPS - Operations, MX - Maintenance, TR - Transportation, etc.).
  ///  Example: /// Example: OPS
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var soe: String? { let o = _accessor.offset(VTOFFSET.soe.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var soeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.soe.v) }
  ///  The leg number of this sortie.
  ///  Example: /// Example: 14
  ///  Constraints: No constraints specified.
  public var legNum: Int32 { let o = _accessor.offset(VTOFFSET.legNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The planned flight time for this sortie, in minutes.
  ///  Example: /// Example: 104.5
  ///  Constraints: No constraints specified.
  public var flightTime: Double { let o = _accessor.offset(VTOFFSET.flightTime.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Scheduled ground time, in minutes.
  ///  Example: /// Example: 387.8
  ///  Constraints: No constraints specified.
  public var gndTime: Double { let o = _accessor.offset(VTOFFSET.gndTime.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  When crew papers are associated to this sortie, the system updates this value. This field is the URI location in the document repository of that raw file. To download the raw file, prepend https://udl-hostname/scs/download?id= to this field's value.
  ///  Example: /// Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var rawFileUri: String? { let o = _accessor.offset(VTOFFSET.rawFileUri.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rawFileUriSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rawFileUri.v) }
  ///  The version number of the crew paper.
  ///  Example: /// Example: 1.1
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var papersVersion: String? { let o = _accessor.offset(VTOFFSET.papersVersion.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var papersVersionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.papersVersion.v) }
  ///  Name of the uploaded PDF.
  ///  Example: /// Example: ExampleFileName
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var filename: String? { let o = _accessor.offset(VTOFFSET.filename.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var filenameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.filename.v) }
  ///  Size of the supporting PDF, in bytes.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var filesize: Int32 { let o = _accessor.offset(VTOFFSET.filesize.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The status of the supporting document.
  ///  Example: /// Example: PUBLISHED
  ///  Constraints: Minimum length = 0, Maximum length = 9
  public var paperStatus: AircraftSortie_Ingest_paperStatus_Enum { let o = _accessor.offset(VTOFFSET.paperStatus.v); return o == 0 ? .published : AircraftSortie_Ingest_paperStatus_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .published }
  ///  The prior permission required (PPR) status.
  ///  Example: /// Example: PENDING
  ///  Constraints: Minimum length = 0, Maximum length = 22
  public var pprStatus: AircraftSortie_Ingest_pprStatus_Enum { let o = _accessor.offset(VTOFFSET.pprStatus.v); return o == 0 ? .notRequired : AircraftSortie_Ingest_pprStatus_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .notRequired }
  ///  Time the associated mission data was last updated in relation to the aircraft assignment, in ISO 8601 UTC format with millisecond precision. If this time is coming from an external system, it may not sync with the latest mission time associated to this record.
  ///  Example: /// Example: 2024-09-09T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var missionUpdate: String? { let o = _accessor.offset(VTOFFSET.missionUpdate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var missionUpdateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.missionUpdate.v) }
  ///  The primary delay code.
  ///  Example: /// Example: 500
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var delayCode: String? { let o = _accessor.offset(VTOFFSET.delayCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var delayCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.delayCode.v) }
  ///  The last name of the aircraft commander.
  ///  Example: /// Example: Smith
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var commanderName: String? { let o = _accessor.offset(VTOFFSET.commanderName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var commanderNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.commanderName.v) }
  ///  Desk phone number of the flight manager assigned to the sortie. Null when no flight manager is assigned.
  ///  Example: /// Example: 7198675309
  ///  Constraints: Minimum length = 0, Maximum length = 45
  public var fmDeskNum: String? { let o = _accessor.offset(VTOFFSET.fmDeskNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fmDeskNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fmDeskNum.v) }
  ///  Last name of the flight manager assigned to the sortie. Null when no flight manager is assigned.
  ///  Example: /// Example: Smith
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var fmName: String? { let o = _accessor.offset(VTOFFSET.fmName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fmNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fmName.v) }
  ///  Type of Ravens required for this sortie (N - None, R - Raven (Security Team) required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required (Ground time over 6 hours)).
  ///  Example: /// Example: R
  ///  Constraints: Minimum length = 0, Maximum length = 2
  public var rvnReq: AircraftSortie_Ingest_rvnReq_Enum { let o = _accessor.offset(VTOFFSET.rvnReq.v); return o == 0 ? .n : AircraftSortie_Ingest_rvnReq_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .n }
  ///  The number of passengers tasked for this sortie.
  ///  Example: /// Example: 17
  ///  Constraints: No constraints specified.
  public var passengers: Int32 { let o = _accessor.offset(VTOFFSET.passengers.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The POI parking location.
  ///  Example: /// Example: KCOS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var parkingLoc: String? { let o = _accessor.offset(VTOFFSET.parkingLoc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var parkingLocSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.parkingLoc.v) }
  ///  Remarks concerning the sortie objective.
  ///  Example: /// Example: Some objective remark about aircraft A
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var objectiveRemarks: String? { let o = _accessor.offset(VTOFFSET.objectiveRemarks.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objectiveRemarksSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.objectiveRemarks.v) }
  ///  Remarks concerning the aircraft.
  ///  Example: /// Example: Some remark about aircraft A
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var aircraftRemarks: String? { let o = _accessor.offset(VTOFFSET.aircraftRemarks.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aircraftRemarksSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aircraftRemarks.v) }
  ///  Remarks concerning the schedule.
  ///  Example: /// Example: Some schedule remark about aircraft A
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var scheduleRemarks: String? { let o = _accessor.offset(VTOFFSET.scheduleRemarks.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var scheduleRemarksSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.scheduleRemarks.v) }
  ///  Remarks concerning the results of this sortie.
  ///  Example: /// Example: Some remark about aircraft A
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var resultRemarks: String? { let o = _accessor.offset(VTOFFSET.resultRemarks.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var resultRemarksSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.resultRemarks.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: AircraftSortie_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : AircraftSortie_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startAircraftSortie_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 80) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(origSortieId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSortieId, at: VTOFFSET.origSortieId.p) }
  public static func add(idAircraft: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idAircraft, at: VTOFFSET.idAircraft.p) }
  public static func add(aircraftAltId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aircraftAltId, at: VTOFFSET.aircraftAltId.p) }
  public static func add(tailNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tailNumber, at: VTOFFSET.tailNumber.p) }
  public static func add(aircraftMds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aircraftMds, at: VTOFFSET.aircraftMds.p) }
  public static func add(aircraftAdsb: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aircraftAdsb, at: VTOFFSET.aircraftAdsb.p) }
  public static func add(sortieDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sortieDate, at: VTOFFSET.sortieDate.p) }
  public static func add(lineNumber: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lineNumber, def: 0, at: VTOFFSET.lineNumber.p) }
  public static func add(idMission: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idMission, at: VTOFFSET.idMission.p) }
  public static func add(missionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: missionId, at: VTOFFSET.missionId.p) }
  public static func add(amcMsnNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: amcMsnNum, at: VTOFFSET.amcMsnNum.p) }
  public static func add(amcMsnType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: amcMsnType, at: VTOFFSET.amcMsnType.p) }
  public static func add(callSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callSign, at: VTOFFSET.callSign.p) }
  public static func add(jcsPriority: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: jcsPriority, at: VTOFFSET.jcsPriority.p) }
  public static func add(primaryScl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: primaryScl, at: VTOFFSET.primaryScl.p) }
  public static func add(secondaryScl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: secondaryScl, at: VTOFFSET.secondaryScl.p) }
  public static func add(reqConfig: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reqConfig, at: VTOFFSET.reqConfig.p) }
  public static func add(cargoConfig: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cargoConfig, at: VTOFFSET.cargoConfig.p) }
  public static func add(fuelReq: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fuelReq, def: 0.0, at: VTOFFSET.fuelReq.p) }
  public static func add(oxyReqCrew: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: oxyReqCrew, def: 0.0, at: VTOFFSET.oxyReqCrew.p) }
  public static func add(oxyOnCrew: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: oxyOnCrew, def: 0.0, at: VTOFFSET.oxyOnCrew.p) }
  public static func add(oxyReqPax: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: oxyReqPax, def: 0.0, at: VTOFFSET.oxyReqPax.p) }
  public static func add(oxyOnPax: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: oxyOnPax, def: 0.0, at: VTOFFSET.oxyOnPax.p) }
  public static func add(alertStatusCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: alertStatusCode, at: VTOFFSET.alertStatusCode.p) }
  public static func add(alertStatus: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: alertStatus, def: 0, at: VTOFFSET.alertStatus.p) }
  public static func add(currentState: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: currentState, at: VTOFFSET.currentState.p) }
  public static func add(depItinerary: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: depItinerary, def: 0, at: VTOFFSET.depItinerary.p) }
  public static func add(depIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: depIcao, at: VTOFFSET.depIcao.p) }
  public static func add(depIata: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: depIata, at: VTOFFSET.depIata.p) }
  public static func add(depFaa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: depFaa, at: VTOFFSET.depFaa.p) }
  public static func add(plannedDepTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: plannedDepTime, at: VTOFFSET.plannedDepTime.p) }
  public static func add(estDepTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: estDepTime, at: VTOFFSET.estDepTime.p) }
  public static func add(actualDepTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actualDepTime, at: VTOFFSET.actualDepTime.p) }
  public static func add(estBlockOutTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: estBlockOutTime, at: VTOFFSET.estBlockOutTime.p) }
  public static func add(actualBlockOutTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actualBlockOutTime, at: VTOFFSET.actualBlockOutTime.p) }
  public static func add(depPurposeCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: depPurposeCode, at: VTOFFSET.depPurposeCode.p) }
  public static func add(arrItinerary: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: arrItinerary, def: 0, at: VTOFFSET.arrItinerary.p) }
  public static func add(arrIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: arrIcao, at: VTOFFSET.arrIcao.p) }
  public static func add(arrIata: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: arrIata, at: VTOFFSET.arrIata.p) }
  public static func add(arrFaa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: arrFaa, at: VTOFFSET.arrFaa.p) }
  public static func add(plannedArrTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: plannedArrTime, at: VTOFFSET.plannedArrTime.p) }
  public static func add(estArrTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: estArrTime, at: VTOFFSET.estArrTime.p) }
  public static func add(actualArrTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actualArrTime, at: VTOFFSET.actualArrTime.p) }
  public static func add(estBlockInTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: estBlockInTime, at: VTOFFSET.estBlockInTime.p) }
  public static func add(actualBlockInTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actualBlockInTime, at: VTOFFSET.actualBlockInTime.p) }
  public static func add(arrPurposeCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: arrPurposeCode, at: VTOFFSET.arrPurposeCode.p) }
  public static func add(dhd: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dhd, at: VTOFFSET.dhd.p) }
  public static func add(dhdReason: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dhdReason, at: VTOFFSET.dhdReason.p) }
  public static func add(aircraftEvent: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aircraftEvent, at: VTOFFSET.aircraftEvent.p) }
  public static func add(soe: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soe, at: VTOFFSET.soe.p) }
  public static func add(legNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: legNum, def: 0, at: VTOFFSET.legNum.p) }
  public static func add(flightTime: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: flightTime, def: 0.0, at: VTOFFSET.flightTime.p) }
  public static func add(gndTime: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gndTime, def: 0.0, at: VTOFFSET.gndTime.p) }
  public static func add(rawFileUri: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rawFileUri, at: VTOFFSET.rawFileUri.p) }
  public static func add(papersVersion: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: papersVersion, at: VTOFFSET.papersVersion.p) }
  public static func add(filename: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: filename, at: VTOFFSET.filename.p) }
  public static func add(filesize: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: filesize, def: 0, at: VTOFFSET.filesize.p) }
  public static func add(paperStatus: AircraftSortie_Ingest_paperStatus_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: paperStatus.rawValue, def: 0, at: VTOFFSET.paperStatus.p) }
  public static func add(pprStatus: AircraftSortie_Ingest_pprStatus_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pprStatus.rawValue, def: 0, at: VTOFFSET.pprStatus.p) }
  public static func add(missionUpdate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: missionUpdate, at: VTOFFSET.missionUpdate.p) }
  public static func add(delayCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: delayCode, at: VTOFFSET.delayCode.p) }
  public static func add(commanderName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: commanderName, at: VTOFFSET.commanderName.p) }
  public static func add(fmDeskNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fmDeskNum, at: VTOFFSET.fmDeskNum.p) }
  public static func add(fmName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fmName, at: VTOFFSET.fmName.p) }
  public static func add(rvnReq: AircraftSortie_Ingest_rvnReq_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rvnReq.rawValue, def: 0, at: VTOFFSET.rvnReq.p) }
  public static func add(passengers: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: passengers, def: 0, at: VTOFFSET.passengers.p) }
  public static func add(parkingLoc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: parkingLoc, at: VTOFFSET.parkingLoc.p) }
  public static func add(objectiveRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: objectiveRemarks, at: VTOFFSET.objectiveRemarks.p) }
  public static func add(aircraftRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aircraftRemarks, at: VTOFFSET.aircraftRemarks.p) }
  public static func add(scheduleRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: scheduleRemarks, at: VTOFFSET.scheduleRemarks.p) }
  public static func add(resultRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: resultRemarks, at: VTOFFSET.resultRemarks.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: AircraftSortie_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endAircraftSortie_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAircraftSortie_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    origSortieIdOffset origSortieId: Offset = Offset(),
    idAircraftOffset idAircraft: Offset = Offset(),
    aircraftAltIdOffset aircraftAltId: Offset = Offset(),
    tailNumberOffset tailNumber: Offset = Offset(),
    aircraftMdsOffset aircraftMds: Offset = Offset(),
    aircraftAdsbOffset aircraftAdsb: Offset = Offset(),
    sortieDateOffset sortieDate: Offset = Offset(),
    lineNumber: Int32 = 0,
    idMissionOffset idMission: Offset = Offset(),
    missionIdOffset missionId: Offset = Offset(),
    amcMsnNumOffset amcMsnNum: Offset = Offset(),
    amcMsnTypeOffset amcMsnType: Offset = Offset(),
    callSignOffset callSign: Offset = Offset(),
    jcsPriorityOffset jcsPriority: Offset = Offset(),
    primarySclOffset primaryScl: Offset = Offset(),
    secondarySclOffset secondaryScl: Offset = Offset(),
    reqConfigOffset reqConfig: Offset = Offset(),
    cargoConfigOffset cargoConfig: Offset = Offset(),
    fuelReq: Double = 0.0,
    oxyReqCrew: Double = 0.0,
    oxyOnCrew: Double = 0.0,
    oxyReqPax: Double = 0.0,
    oxyOnPax: Double = 0.0,
    alertStatusCodeOffset alertStatusCode: Offset = Offset(),
    alertStatus: Int32 = 0,
    currentStateOffset currentState: Offset = Offset(),
    depItinerary: Int32 = 0,
    depIcaoOffset depIcao: Offset = Offset(),
    depIataOffset depIata: Offset = Offset(),
    depFaaOffset depFaa: Offset = Offset(),
    plannedDepTimeOffset plannedDepTime: Offset = Offset(),
    estDepTimeOffset estDepTime: Offset = Offset(),
    actualDepTimeOffset actualDepTime: Offset = Offset(),
    estBlockOutTimeOffset estBlockOutTime: Offset = Offset(),
    actualBlockOutTimeOffset actualBlockOutTime: Offset = Offset(),
    depPurposeCodeOffset depPurposeCode: Offset = Offset(),
    arrItinerary: Int32 = 0,
    arrIcaoOffset arrIcao: Offset = Offset(),
    arrIataOffset arrIata: Offset = Offset(),
    arrFaaOffset arrFaa: Offset = Offset(),
    plannedArrTimeOffset plannedArrTime: Offset = Offset(),
    estArrTimeOffset estArrTime: Offset = Offset(),
    actualArrTimeOffset actualArrTime: Offset = Offset(),
    estBlockInTimeOffset estBlockInTime: Offset = Offset(),
    actualBlockInTimeOffset actualBlockInTime: Offset = Offset(),
    arrPurposeCodeOffset arrPurposeCode: Offset = Offset(),
    dhdOffset dhd: Offset = Offset(),
    dhdReasonOffset dhdReason: Offset = Offset(),
    aircraftEventOffset aircraftEvent: Offset = Offset(),
    soeOffset soe: Offset = Offset(),
    legNum: Int32 = 0,
    flightTime: Double = 0.0,
    gndTime: Double = 0.0,
    rawFileUriOffset rawFileUri: Offset = Offset(),
    papersVersionOffset papersVersion: Offset = Offset(),
    filenameOffset filename: Offset = Offset(),
    filesize: Int32 = 0,
    paperStatus: AircraftSortie_Ingest_paperStatus_Enum = .published,
    pprStatus: AircraftSortie_Ingest_pprStatus_Enum = .notRequired,
    missionUpdateOffset missionUpdate: Offset = Offset(),
    delayCodeOffset delayCode: Offset = Offset(),
    commanderNameOffset commanderName: Offset = Offset(),
    fmDeskNumOffset fmDeskNum: Offset = Offset(),
    fmNameOffset fmName: Offset = Offset(),
    rvnReq: AircraftSortie_Ingest_rvnReq_Enum = .n,
    passengers: Int32 = 0,
    parkingLocOffset parkingLoc: Offset = Offset(),
    objectiveRemarksOffset objectiveRemarks: Offset = Offset(),
    aircraftRemarksOffset aircraftRemarks: Offset = Offset(),
    scheduleRemarksOffset scheduleRemarks: Offset = Offset(),
    resultRemarksOffset resultRemarks: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: AircraftSortie_Ingest_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = AircraftSortie_Ingest.startAircraftSortie_Ingest(&fbb)
    AircraftSortie_Ingest.add(id: id, &fbb)
    AircraftSortie_Ingest.add(classificationMarking: classificationMarking, &fbb)
    AircraftSortie_Ingest.add(origSortieId: origSortieId, &fbb)
    AircraftSortie_Ingest.add(idAircraft: idAircraft, &fbb)
    AircraftSortie_Ingest.add(aircraftAltId: aircraftAltId, &fbb)
    AircraftSortie_Ingest.add(tailNumber: tailNumber, &fbb)
    AircraftSortie_Ingest.add(aircraftMds: aircraftMds, &fbb)
    AircraftSortie_Ingest.add(aircraftAdsb: aircraftAdsb, &fbb)
    AircraftSortie_Ingest.add(sortieDate: sortieDate, &fbb)
    AircraftSortie_Ingest.add(lineNumber: lineNumber, &fbb)
    AircraftSortie_Ingest.add(idMission: idMission, &fbb)
    AircraftSortie_Ingest.add(missionId: missionId, &fbb)
    AircraftSortie_Ingest.add(amcMsnNum: amcMsnNum, &fbb)
    AircraftSortie_Ingest.add(amcMsnType: amcMsnType, &fbb)
    AircraftSortie_Ingest.add(callSign: callSign, &fbb)
    AircraftSortie_Ingest.add(jcsPriority: jcsPriority, &fbb)
    AircraftSortie_Ingest.add(primaryScl: primaryScl, &fbb)
    AircraftSortie_Ingest.add(secondaryScl: secondaryScl, &fbb)
    AircraftSortie_Ingest.add(reqConfig: reqConfig, &fbb)
    AircraftSortie_Ingest.add(cargoConfig: cargoConfig, &fbb)
    AircraftSortie_Ingest.add(fuelReq: fuelReq, &fbb)
    AircraftSortie_Ingest.add(oxyReqCrew: oxyReqCrew, &fbb)
    AircraftSortie_Ingest.add(oxyOnCrew: oxyOnCrew, &fbb)
    AircraftSortie_Ingest.add(oxyReqPax: oxyReqPax, &fbb)
    AircraftSortie_Ingest.add(oxyOnPax: oxyOnPax, &fbb)
    AircraftSortie_Ingest.add(alertStatusCode: alertStatusCode, &fbb)
    AircraftSortie_Ingest.add(alertStatus: alertStatus, &fbb)
    AircraftSortie_Ingest.add(currentState: currentState, &fbb)
    AircraftSortie_Ingest.add(depItinerary: depItinerary, &fbb)
    AircraftSortie_Ingest.add(depIcao: depIcao, &fbb)
    AircraftSortie_Ingest.add(depIata: depIata, &fbb)
    AircraftSortie_Ingest.add(depFaa: depFaa, &fbb)
    AircraftSortie_Ingest.add(plannedDepTime: plannedDepTime, &fbb)
    AircraftSortie_Ingest.add(estDepTime: estDepTime, &fbb)
    AircraftSortie_Ingest.add(actualDepTime: actualDepTime, &fbb)
    AircraftSortie_Ingest.add(estBlockOutTime: estBlockOutTime, &fbb)
    AircraftSortie_Ingest.add(actualBlockOutTime: actualBlockOutTime, &fbb)
    AircraftSortie_Ingest.add(depPurposeCode: depPurposeCode, &fbb)
    AircraftSortie_Ingest.add(arrItinerary: arrItinerary, &fbb)
    AircraftSortie_Ingest.add(arrIcao: arrIcao, &fbb)
    AircraftSortie_Ingest.add(arrIata: arrIata, &fbb)
    AircraftSortie_Ingest.add(arrFaa: arrFaa, &fbb)
    AircraftSortie_Ingest.add(plannedArrTime: plannedArrTime, &fbb)
    AircraftSortie_Ingest.add(estArrTime: estArrTime, &fbb)
    AircraftSortie_Ingest.add(actualArrTime: actualArrTime, &fbb)
    AircraftSortie_Ingest.add(estBlockInTime: estBlockInTime, &fbb)
    AircraftSortie_Ingest.add(actualBlockInTime: actualBlockInTime, &fbb)
    AircraftSortie_Ingest.add(arrPurposeCode: arrPurposeCode, &fbb)
    AircraftSortie_Ingest.add(dhd: dhd, &fbb)
    AircraftSortie_Ingest.add(dhdReason: dhdReason, &fbb)
    AircraftSortie_Ingest.add(aircraftEvent: aircraftEvent, &fbb)
    AircraftSortie_Ingest.add(soe: soe, &fbb)
    AircraftSortie_Ingest.add(legNum: legNum, &fbb)
    AircraftSortie_Ingest.add(flightTime: flightTime, &fbb)
    AircraftSortie_Ingest.add(gndTime: gndTime, &fbb)
    AircraftSortie_Ingest.add(rawFileUri: rawFileUri, &fbb)
    AircraftSortie_Ingest.add(papersVersion: papersVersion, &fbb)
    AircraftSortie_Ingest.add(filename: filename, &fbb)
    AircraftSortie_Ingest.add(filesize: filesize, &fbb)
    AircraftSortie_Ingest.add(paperStatus: paperStatus, &fbb)
    AircraftSortie_Ingest.add(pprStatus: pprStatus, &fbb)
    AircraftSortie_Ingest.add(missionUpdate: missionUpdate, &fbb)
    AircraftSortie_Ingest.add(delayCode: delayCode, &fbb)
    AircraftSortie_Ingest.add(commanderName: commanderName, &fbb)
    AircraftSortie_Ingest.add(fmDeskNum: fmDeskNum, &fbb)
    AircraftSortie_Ingest.add(fmName: fmName, &fbb)
    AircraftSortie_Ingest.add(rvnReq: rvnReq, &fbb)
    AircraftSortie_Ingest.add(passengers: passengers, &fbb)
    AircraftSortie_Ingest.add(parkingLoc: parkingLoc, &fbb)
    AircraftSortie_Ingest.add(objectiveRemarks: objectiveRemarks, &fbb)
    AircraftSortie_Ingest.add(aircraftRemarks: aircraftRemarks, &fbb)
    AircraftSortie_Ingest.add(scheduleRemarks: scheduleRemarks, &fbb)
    AircraftSortie_Ingest.add(resultRemarks: resultRemarks, &fbb)
    AircraftSortie_Ingest.add(createdAt: createdAt, &fbb)
    AircraftSortie_Ingest.add(createdBy: createdBy, &fbb)
    AircraftSortie_Ingest.add(sourceDl: sourceDl, &fbb)
    AircraftSortie_Ingest.add(source: source, &fbb)
    AircraftSortie_Ingest.add(origin: origin, &fbb)
    AircraftSortie_Ingest.add(dataMode: dataMode, &fbb)
    AircraftSortie_Ingest.add(origNetwork: origNetwork, &fbb)
    return AircraftSortie_Ingest.endAircraftSortie_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSortieId.p, fieldName: "origSortieId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idAircraft.p, fieldName: "idAircraft", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aircraftAltId.p, fieldName: "aircraftAltId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tailNumber.p, fieldName: "tailNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aircraftMds.p, fieldName: "aircraftMds", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aircraftAdsb.p, fieldName: "aircraftAdsb", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sortieDate.p, fieldName: "sortieDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lineNumber.p, fieldName: "lineNumber", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.idMission.p, fieldName: "idMission", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.missionId.p, fieldName: "missionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.amcMsnNum.p, fieldName: "amcMsnNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.amcMsnType.p, fieldName: "amcMsnType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.callSign.p, fieldName: "callSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.jcsPriority.p, fieldName: "jcsPriority", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.primaryScl.p, fieldName: "primaryScl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.secondaryScl.p, fieldName: "secondaryScl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reqConfig.p, fieldName: "reqConfig", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cargoConfig.p, fieldName: "cargoConfig", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fuelReq.p, fieldName: "fuelReq", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.oxyReqCrew.p, fieldName: "oxyReqCrew", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.oxyOnCrew.p, fieldName: "oxyOnCrew", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.oxyReqPax.p, fieldName: "oxyReqPax", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.oxyOnPax.p, fieldName: "oxyOnPax", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.alertStatusCode.p, fieldName: "alertStatusCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.alertStatus.p, fieldName: "alertStatus", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.currentState.p, fieldName: "currentState", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.depItinerary.p, fieldName: "depItinerary", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.depIcao.p, fieldName: "depIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.depIata.p, fieldName: "depIata", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.depFaa.p, fieldName: "depFaa", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.plannedDepTime.p, fieldName: "plannedDepTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.estDepTime.p, fieldName: "estDepTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.actualDepTime.p, fieldName: "actualDepTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.estBlockOutTime.p, fieldName: "estBlockOutTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.actualBlockOutTime.p, fieldName: "actualBlockOutTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.depPurposeCode.p, fieldName: "depPurposeCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.arrItinerary.p, fieldName: "arrItinerary", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.arrIcao.p, fieldName: "arrIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.arrIata.p, fieldName: "arrIata", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.arrFaa.p, fieldName: "arrFaa", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.plannedArrTime.p, fieldName: "plannedArrTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.estArrTime.p, fieldName: "estArrTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.actualArrTime.p, fieldName: "actualArrTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.estBlockInTime.p, fieldName: "estBlockInTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.actualBlockInTime.p, fieldName: "actualBlockInTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.arrPurposeCode.p, fieldName: "arrPurposeCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dhd.p, fieldName: "dhd", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dhdReason.p, fieldName: "dhdReason", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aircraftEvent.p, fieldName: "aircraftEvent", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.soe.p, fieldName: "soe", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.legNum.p, fieldName: "legNum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.flightTime.p, fieldName: "flightTime", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gndTime.p, fieldName: "gndTime", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rawFileUri.p, fieldName: "rawFileUri", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.papersVersion.p, fieldName: "papersVersion", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.filename.p, fieldName: "filename", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.filesize.p, fieldName: "filesize", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.paperStatus.p, fieldName: "paperStatus", required: false, type: AircraftSortie_Ingest_paperStatus_Enum.self)
    try _v.visit(field: VTOFFSET.pprStatus.p, fieldName: "pprStatus", required: false, type: AircraftSortie_Ingest_pprStatus_Enum.self)
    try _v.visit(field: VTOFFSET.missionUpdate.p, fieldName: "missionUpdate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.delayCode.p, fieldName: "delayCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.commanderName.p, fieldName: "commanderName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fmDeskNum.p, fieldName: "fmDeskNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fmName.p, fieldName: "fmName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rvnReq.p, fieldName: "rvnReq", required: false, type: AircraftSortie_Ingest_rvnReq_Enum.self)
    try _v.visit(field: VTOFFSET.passengers.p, fieldName: "passengers", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.parkingLoc.p, fieldName: "parkingLoc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objectiveRemarks.p, fieldName: "objectiveRemarks", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aircraftRemarks.p, fieldName: "aircraftRemarks", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.scheduleRemarks.p, fieldName: "scheduleRemarks", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.resultRemarks.p, fieldName: "resultRemarks", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: AircraftSortie_Ingest_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

