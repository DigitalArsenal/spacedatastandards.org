// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// What it is that is trying to be exploited.
public struct ISRCollectionExploitationRequirement_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ISRC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: ISRCollectionExploitationRequirement_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case amplification = 6
    case reportingCriteria = 8
    case dissemination = 10
    case eei = 12
    case poc = 14
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Exploitation requirement id.
  ///  Example: /// Example: ISRCOLLECTIONEXPLOITATIONREQUIREMENT
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Amplifying data for the exploitation requirement.
  ///  Example: /// Example: AMPLIFICATION
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var amplification: String? { let o = _accessor.offset(VTOFFSET.amplification.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var amplificationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.amplification.v) }
  ///  The reporting criteria of the collection requirement.
  ///  Example: /// Example: CRITERIA
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var reportingCriteria: String? { let o = _accessor.offset(VTOFFSET.reportingCriteria.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reportingCriteriaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reportingCriteria.v) }
  ///  List of e-mails to disseminate collection verification information.
  ///  Example: /// Example: EMAILS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var dissemination: String? { let o = _accessor.offset(VTOFFSET.dissemination.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var disseminationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dissemination.v) }
  ///  Essential Elements of Information.
  ///  Example: /// Example: ESSENTIAL_ELEMENTS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var eei: String? { let o = _accessor.offset(VTOFFSET.eei.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eeiSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eei.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var poc: String? { let o = _accessor.offset(VTOFFSET.poc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pocSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.poc.v) }
  public static func startISRCollectionExploitationRequirement_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 6) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(amplification: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: amplification, at: VTOFFSET.amplification.p) }
  public static func add(reportingCriteria: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reportingCriteria, at: VTOFFSET.reportingCriteria.p) }
  public static func add(dissemination: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dissemination, at: VTOFFSET.dissemination.p) }
  public static func add(eei: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eei, at: VTOFFSET.eei.p) }
  public static func add(poc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: poc, at: VTOFFSET.poc.p) }
  public static func endISRCollectionExploitationRequirement_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createISRCollectionExploitationRequirement_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    amplificationOffset amplification: Offset = Offset(),
    reportingCriteriaOffset reportingCriteria: Offset = Offset(),
    disseminationOffset dissemination: Offset = Offset(),
    eeiOffset eei: Offset = Offset(),
    pocOffset poc: Offset = Offset()
  ) -> Offset {
    let __start = ISRCollectionExploitationRequirement_Ingest.startISRCollectionExploitationRequirement_Ingest(&fbb)
    ISRCollectionExploitationRequirement_Ingest.add(id: id, &fbb)
    ISRCollectionExploitationRequirement_Ingest.add(amplification: amplification, &fbb)
    ISRCollectionExploitationRequirement_Ingest.add(reportingCriteria: reportingCriteria, &fbb)
    ISRCollectionExploitationRequirement_Ingest.add(dissemination: dissemination, &fbb)
    ISRCollectionExploitationRequirement_Ingest.add(eei: eei, &fbb)
    ISRCollectionExploitationRequirement_Ingest.add(poc: poc, &fbb)
    return ISRCollectionExploitationRequirement_Ingest.endISRCollectionExploitationRequirement_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.amplification.p, fieldName: "amplification", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reportingCriteria.p, fieldName: "reportingCriteria", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dissemination.p, fieldName: "dissemination", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eei.p, fieldName: "eei", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.poc.p, fieldName: "poc", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

