// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
public struct GenText_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "GENT" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: GenText_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case textInd = 4
    case text = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The indicator for the general text block. Examples include "OPENING REMARKS" and "GENERAL SPINS INFORMATION".
  ///  Example: /// Example: OPENING REMARKS
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var textInd: String? { let o = _accessor.offset(VTOFFSET.textInd.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var textIndSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.textInd.v) }
  ///  The free text that describes the information specific to the text indicator.
  ///  Example: /// Example: FREE-TEXT
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var text: String? { let o = _accessor.offset(VTOFFSET.text.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var textSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.text.v) }
  public static func startGenText_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(textInd: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: textInd, at: VTOFFSET.textInd.p) }
  public static func add(text: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: text, at: VTOFFSET.text.p) }
  public static func endGenText_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createGenText_Abridged(
    _ fbb: inout FlatBufferBuilder,
    textIndOffset textInd: Offset = Offset(),
    textOffset text: Offset = Offset()
  ) -> Offset {
    let __start = GenText_Abridged.startGenText_Abridged(&fbb)
    GenText_Abridged.add(textInd: textInd, &fbb)
    GenText_Abridged.add(text: text, &fbb)
    return GenText_Abridged.endGenText_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.textInd.p, fieldName: "textInd", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.text.p, fieldName: "text", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

