// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection of air refueling events occurring on this flight.
public struct FlightPlanAirRefuelEvents_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "FLIG" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: FlightPlanAirRefuelEvents_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case arDegrade = 4
    case arNum = 6
    case arExchangedFuel = 8
    case divertFuel = 10
    case exitFuel = 12
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Additional degrade for air refueling, cumulative with fuelDegrade field percent.
  ///  Example: /// Example: 3.1
  ///  Constraints: No constraints specified.
  public var arDegrade: Double { let o = _accessor.offset(VTOFFSET.arDegrade.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The number of this air refueling event within the flight plan.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var arNum: Int32 { let o = _accessor.offset(VTOFFSET.arNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Fuel onloaded (use positive numbers) or fuel offloaded (use negative numbers) in pounds.
  ///  Example: /// Example: 1500.1
  ///  Constraints: No constraints specified.
  public var arExchangedFuel: Double { let o = _accessor.offset(VTOFFSET.arExchangedFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fuel required to fly from air refueling exit point to air refueling divert alternate airfield in pounds.
  ///  Example: /// Example: 143000.1
  ///  Constraints: No constraints specified.
  public var divertFuel: Double { let o = _accessor.offset(VTOFFSET.divertFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fuel remaining at the air refueling exit in pounds.
  ///  Example: /// Example: 160000.1
  ///  Constraints: No constraints specified.
  public var exitFuel: Double { let o = _accessor.offset(VTOFFSET.exitFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  public static func startFlightPlanAirRefuelEvents_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 5) }
  public static func add(arDegrade: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: arDegrade, def: 0.0, at: VTOFFSET.arDegrade.p) }
  public static func add(arNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: arNum, def: 0, at: VTOFFSET.arNum.p) }
  public static func add(arExchangedFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: arExchangedFuel, def: 0.0, at: VTOFFSET.arExchangedFuel.p) }
  public static func add(divertFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: divertFuel, def: 0.0, at: VTOFFSET.divertFuel.p) }
  public static func add(exitFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: exitFuel, def: 0.0, at: VTOFFSET.exitFuel.p) }
  public static func endFlightPlanAirRefuelEvents_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createFlightPlanAirRefuelEvents_Ingest(
    _ fbb: inout FlatBufferBuilder,
    arDegrade: Double = 0.0,
    arNum: Int32 = 0,
    arExchangedFuel: Double = 0.0,
    divertFuel: Double = 0.0,
    exitFuel: Double = 0.0
  ) -> Offset {
    let __start = FlightPlanAirRefuelEvents_Ingest.startFlightPlanAirRefuelEvents_Ingest(&fbb)
    FlightPlanAirRefuelEvents_Ingest.add(arDegrade: arDegrade, &fbb)
    FlightPlanAirRefuelEvents_Ingest.add(arNum: arNum, &fbb)
    FlightPlanAirRefuelEvents_Ingest.add(arExchangedFuel: arExchangedFuel, &fbb)
    FlightPlanAirRefuelEvents_Ingest.add(divertFuel: divertFuel, &fbb)
    FlightPlanAirRefuelEvents_Ingest.add(exitFuel: exitFuel, &fbb)
    return FlightPlanAirRefuelEvents_Ingest.endFlightPlanAirRefuelEvents_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.arDegrade.p, fieldName: "arDegrade", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.arNum.p, fieldName: "arNum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.arExchangedFuel.p, fieldName: "arExchangedFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.divertFuel.p, fieldName: "divertFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.exitFuel.p, fieldName: "exitFuel", required: false, type: Double.self)
    _v.finish()
  }
}

