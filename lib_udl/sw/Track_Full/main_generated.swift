// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Track_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Track_Full_dataMode_Enum { return .exercise }
  public static var min: Track_Full_dataMode_Enum { return .real }
}


///  /// A track is a position and optionally a heading/velocity of an object such as an aircraft at a particular timestamp. It also includes optional information regarding the identity/type of the target object, if known.
public struct Track_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "TRAC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Track_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case cntct = 8
    case createdAt = 10
    case createdBy = 12
    case msgTs = 14
    case msnId = 16
    case assetNat = 18
    case asset = 20
    case sen = 22
    case senQual = 24
    case trkId = 26
    case trkNum = 28
    case trkStat = 30
    case objNat = 32
    case objId = 34
    case objType = 36
    case objSpec = 38
    case objPlat = 40
    case objAct = 42
    case modType = 44
    case trkItmId = 46
    case ts = 48
    case trkQual = 50
    case trkPtType = 52
    case objIdent = 54
    case identCred = 56
    case identRel = 58
    case identAmp = 60
    case env = 62
    case envConf = 64
    case trkConf = 66
    case ecefPos = 68
    case ecefVel = 70
    case ecefAcc = 72
    case lat = 74
    case lon = 76
    case alt = 78
    case spd = 80
    case hdng = 82
    case course = 84
    case lco = 86
    case lcs = 88
    case lcPos = 90
    case lcVel = 92
    case lcAcc = 94
    case eNuvel = 96
    case eNupos = 98
    case cov = 100
    case errEllp = 102
    case srcTyps = 104
    case srcIds = 106
    case callSign = 108
    case multiSource = 110
    case jSeries = 112
    case strength = 114
    case m1 = 116
    case m1v = 118
    case m2 = 120
    case m2v = 122
    case m3a = 124
    case m3av = 126
    case tags = 128
    case sourceDl = 130
    case source = 132
    case origin = 134
    case dataMode = 136
    case origNetwork = 138
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: TRACK-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
  ///  Example: /// Example: Contact Info
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var cntct: String? { let o = _accessor.offset(VTOFFSET.cntct.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cntctSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cntct.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Message Timestamp.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  public var msgTs: String? { let o = _accessor.offset(VTOFFSET.msgTs.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msgTsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msgTs.v) }
  ///  Mission ID related to the track.
  ///  Example: /// Example: msnId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var msnId: String? { let o = _accessor.offset(VTOFFSET.msnId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msnIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msnId.v) }
  ///  Nationality or organization of the tracking/reporting system or platform (e.g. FR, NATO, US, etc.).
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var assetNat: String? { let o = _accessor.offset(VTOFFSET.assetNat.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var assetNatSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.assetNat.v) }
  ///  Id/name of the platform providing the track data (i.e., tail number for air platform, tower ID for tower based sensor, site id for fixed radar).
  ///  Example: /// Example: asset
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var asset: String? { let o = _accessor.offset(VTOFFSET.asset.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var assetSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.asset.v) }
  ///  Id/name of sensor providing the track data.
  ///  Example: /// Example: sen
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var sen: String? { let o = _accessor.offset(VTOFFSET.sen.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var senSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sen.v) }
  ///  Sensor quality.
  ///  Example: /// Example: senQual
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var senQual: String? { let o = _accessor.offset(VTOFFSET.senQual.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var senQualSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.senQual.v) }
  ///  UUID identifying the track, which should remain the same on subsequent tracks of the same object.
  ///  Example: /// Example: trkId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var trkId: String? { let o = _accessor.offset(VTOFFSET.trkId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var trkIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.trkId.v) }
  ///  The track number (TN) of a surveillance entity. Intended as, but not constrained to, the J-series track number encoded as five character alpha-numeric characters. Users should refer to J-series documentation for specific TN definitions.
  ///  Example: /// Example: trkNum
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var trkNum: String? { let o = _accessor.offset(VTOFFSET.trkNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var trkNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.trkNum.v) }
  ///  Status of the track (e.g., INITIATING, MAINTAINING, DROPPING, TERMINATED, etc.).
  ///  Example: /// Example: INITIATING
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var trkStat: String? { let o = _accessor.offset(VTOFFSET.trkStat.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var trkStatSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.trkStat.v) }
  ///  Nationality or organization of the track object (e.g. FR, NATO, US, etc.).
  ///  Example: /// Example: NATO
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var objNat: String? { let o = _accessor.offset(VTOFFSET.objNat.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objNatSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.objNat.v) }
  ///  The UID or designation of the tracked object.
  ///  Example: /// Example: objId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var objId: String? { let o = _accessor.offset(VTOFFSET.objId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.objId.v) }
  ///  The generic classification of the track object/group (e.g., HELICOPTER, TRACKED, WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676 object type classifications.
  ///  Example: /// Example: WATERCRAFT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var objType: String? { let o = _accessor.offset(VTOFFSET.objType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.objType.v) }
  ///  The object specific type. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations. The specific type can be reported as either a combination of the code and environment (e.g. 155/SURFACE) or as the descriptive representation (e.g. AUDACE DDG), which are equivalent.
  ///  Example: /// Example: LIGHT_TANK
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var objSpec: String? { let o = _accessor.offset(VTOFFSET.objSpec.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objSpecSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.objSpec.v) }
  ///  The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
  ///  Example: /// Example: COMBAT_VEHICLE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var objPlat: String? { let o = _accessor.offset(VTOFFSET.objPlat.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objPlatSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.objPlat.v) }
  ///  The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
  ///  Example: /// Example: HOLDING
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var objAct: String? { let o = _accessor.offset(VTOFFSET.objAct.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objActSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.objAct.v) }
  ///  The type of source information from which the track was derived. Intended as, but not constrained to, NATO STANAG 4676 modality types (AIS, BFT, BIOMETRIC, COMINT, DOPPLER, ELINT, HRR, HUMINT, IMAGE, MASINT, MIXED, OSINT, OTHER):
  ///  AIS: Derived from an automated identification system source.
  ///  BFT: Derived from a blue force tracking source.
  ///  BIOMETRICS: Derived from a biometrics source.
  ///  COMINT: Derived from a communications intelligence source.
  ///  DOPPLER: Derived from a radar doppler source.
  ///  ELINT: Derived from an electronics intelligence source.
  ///  HRR: Derived from a radar high range resolution source.
  ///  HUMINT: Derived from a human intelligence source.
  ///  IMAGE: Derived from a still or motion imagery source.
  ///  MASINT: Derived from a measurement and signals intelligence source.
  ///  MIXED: Derived from a combination of two or more sources.
  ///  OSINT: Derived from an open source intelligence source.
  ///  OTHER: Derived from other types of unspecified sources.
  ///  Example: /// Example: MASINT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var modType: String? { let o = _accessor.offset(VTOFFSET.modType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var modTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.modType.v) }
  ///  UUID of the track item object, applies to STANAG-4676 messages.
  ///  Example: /// Example: trkItmId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var trkItmId: String? { let o = _accessor.offset(VTOFFSET.trkItmId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var trkItmIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.trkItmId.v) }
  ///  Track timestamp in ISO8601 UTC format.
  ///  Example: /// Example: 2021-06-07T14:17:39.653Z
  ///  Constraints: No constraints specified.
  public var ts: String? { let o = _accessor.offset(VTOFFSET.ts.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ts.v) }
  ///  Value indicating track quality (not standardized).
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  public var trkQual: Int32 { let o = _accessor.offset(VTOFFSET.trkQual.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Means by which the track data was created (e.g., MEASURED, AUTOMATIC PREDICTED, etc.).
  ///  Example: /// Example: MEASURED
  ///  Constraints: No constraints specified.
  public var trkPtType: String? { let o = _accessor.offset(VTOFFSET.trkPtType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var trkPtTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.trkPtType.v) }
  ///  The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
  ///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  ///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  ///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  ///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  ///  PENDING: Track object which has not been evaluated.
  ///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  ///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  ///  Example: /// Example: FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var objIdent: String? { let o = _accessor.offset(VTOFFSET.objIdent.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objIdentSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.objIdent.v) }
  ///  Track object identity credibility.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  public var identCred: Int32 { let o = _accessor.offset(VTOFFSET.identCred.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Track object identity reliability.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  public var identRel: Int32 { let o = _accessor.offset(VTOFFSET.identRel.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
  ///  FAKER: Friendly track, object, or entity acting as an exercise hostile.
  ///  JOKER: Friendly track, object, or entity acting as an exercise suspect.
  ///  KILO: Friendly high-value object.
  ///  TRAVELLER: Suspect land or surface track following a recognized traffic route.
  ///  ZOMBIE: Suspect track, object, or entity of special interest.
  ///  Example: /// Example: ZOMBIE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var identAmp: String? { let o = _accessor.offset(VTOFFSET.identAmp.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var identAmpSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.identAmp.v) }
  ///  The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
  ///  AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
  ///  LAND: On the surface of dry land.
  ///  SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
  ///  SURFACE: On the surface of a body of water.
  ///  SUBSURFACE: Below the surface of a body of water.
  ///  UNKNOWN: Environment is not known.
  ///  Example: /// Example: LAND
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var env: String? { let o = _accessor.offset(VTOFFSET.env.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var envSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.env.v) }
  ///  Track environment confidence estimate (not standardized).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var envConf: Double { let o = _accessor.offset(VTOFFSET.envConf.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var trkConf: Double { let o = _accessor.offset(VTOFFSET.trkConf.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Track object location in ECEF [x, y, z], meters.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  public var hasEcefPos: Bool { let o = _accessor.offset(VTOFFSET.ecefPos.v); return o == 0 ? false : true }
  public var ecefPosCount: Int32 { let o = _accessor.offset(VTOFFSET.ecefPos.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func ecefPos(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.ecefPos.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Track object velocity in ECEF [x', y', z'], meters/sec.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  public var hasEcefVel: Bool { let o = _accessor.offset(VTOFFSET.ecefVel.v); return o == 0 ? false : true }
  public var ecefVelCount: Int32 { let o = _accessor.offset(VTOFFSET.ecefVel.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func ecefVel(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.ecefVel.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Track object acceleration in ECEF [x'', y'', z''], meters/sec^2.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  public var hasEcefAcc: Bool { let o = _accessor.offset(VTOFFSET.ecefAcc.v); return o == 0 ? false : true }
  public var ecefAccCount: Int32 { let o = _accessor.offset(VTOFFSET.ecefAcc.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func ecefAcc(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.ecefAcc.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a track object height above ellipsoid, and negative values indicate a track object below ellipsoid, applicable to the depth estimate for a subsurface track.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var alt: Double { let o = _accessor.offset(VTOFFSET.alt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Track object spd, in meters/sec.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var spd: Double { let o = _accessor.offset(VTOFFSET.spd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The track object heading, in degrees clockwise from true North at the object location.
  ///  Example: /// Example: 19.7
  ///  Constraints: No constraints specified.
  public var hdng: Double { let o = _accessor.offset(VTOFFSET.hdng.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The track object course-over-ground, in degrees clockwise from true North at the object location (0-360 degrees).
  ///  Example: /// Example: 88.37
  ///  Constraints: No constraints specified.
  public var course: Double { let o = _accessor.offset(VTOFFSET.course.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Origin of a local coordinate system [lat, lon, altitude].  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  public var hasLco: Bool { let o = _accessor.offset(VTOFFSET.lco.v); return o == 0 ? false : true }
  public var lcoCount: Int32 { let o = _accessor.offset(VTOFFSET.lco.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func lco(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.lco.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  x, y, and z-axis rotations about ECEF that define a local cartesian system.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  public var hasLcs: Bool { let o = _accessor.offset(VTOFFSET.lcs.v); return o == 0 ? false : true }
  public var lcsCount: Int32 { let o = _accessor.offset(VTOFFSET.lcs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func lcs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.lcs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Estimate of the position, [x, y, z], of the track object in the defined cartesian system, in meters.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  public var hasLcPos: Bool { let o = _accessor.offset(VTOFFSET.lcPos.v); return o == 0 ? false : true }
  public var lcPosCount: Int32 { let o = _accessor.offset(VTOFFSET.lcPos.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func lcPos(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.lcPos.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Estimate of the velocity, [x', y', z'], of the track object in the defined cartesian system, in meters/sec.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  public var hasLcVel: Bool { let o = _accessor.offset(VTOFFSET.lcVel.v); return o == 0 ? false : true }
  public var lcVelCount: Int32 { let o = _accessor.offset(VTOFFSET.lcVel.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func lcVel(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.lcVel.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Estimate of the acceleration, [x'', y'', z''], of the track object in the defined cartesian system, in meters/sec^2.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  public var hasLcAcc: Bool { let o = _accessor.offset(VTOFFSET.lcAcc.v); return o == 0 ? false : true }
  public var lcAccCount: Int32 { let o = _accessor.offset(VTOFFSET.lcAcc.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func lcAcc(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.lcAcc.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  East, North, Up velocity components, in meters/sec.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  public var hasENuvel: Bool { let o = _accessor.offset(VTOFFSET.eNuvel.v); return o == 0 ? false : true }
  public var eNuvelCount: Int32 { let o = _accessor.offset(VTOFFSET.eNuvel.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func eNuvel(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.eNuvel.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  East, North, Up position components, in meters.  When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  public var hasENupos: Bool { let o = _accessor.offset(VTOFFSET.eNupos.v); return o == 0 ? false : true }
  public var eNuposCount: Int32 { let o = _accessor.offset(VTOFFSET.eNupos.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func eNupos(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.eNupos.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Covariance matrix, in meter and second based units, for the defined cartesian system.
  ///  The array values represent the lower triangular half of the position-velocity covariance matrix.  The size of the covariance matrix is dynamic.  The values are output as an array of values corresponding to the position-velocity covariance element positions, ordered as follows:
  ///  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
  ///  x&nbsp;&nbsp;&nbsp;&nbsp;1
  ///  y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
  ///  z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
  ///  x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
  ///  y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
  ///  z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
  ///  The covariance matrix will be as large as the last element needed, and with unused values zero-filled to maintain proper element positioning in the array.  For example, for a 2D (x, y) position-only covariance, the covariance matrix will be 2x2 and the array would contain the 3 elements corresponding to the x, and y position.  Another example, now for a 2D (x, y) position-velocity covariance, the covariance matrix will be 5x5 and the array would contain the 15 elements corresponding to the relevant x, y, x', and y' values (with the z-row and z-column being all zeros). The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
  ///  Example: /// Example: [1.1, 2.2, 3.3]
  ///  Constraints: No constraints specified.
  public var hasCov: Bool { let o = _accessor.offset(VTOFFSET.cov.v); return o == 0 ? false : true }
  public var covCount: Int32 { let o = _accessor.offset(VTOFFSET.cov.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cov(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.cov.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Uncertainty ellipsoid [semi-major axis (m), semi-minor axis (m), orientation (deg)].
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  public var hasErrEllp: Bool { let o = _accessor.offset(VTOFFSET.errEllp.v); return o == 0 ? false : true }
  public var errEllpCount: Int32 { let o = _accessor.offset(VTOFFSET.errEllp.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func errEllp(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.errEllp.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of UDL record types (POI, MTI, TRACK, GROUNDIMAGE) that contributed to the generation of this fused track.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array, used in the track fusion. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['MTI', 'POI']
  ///  Constraints: No constraints specified.
  public var hasSrcTyps: Bool { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? false : true }
  public var srcTypsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcTyps(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of UUIDs of the UDL data records that contributed to the generation of this fused track. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array, used in the track fusion.  The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/poi/{uuid}).
  ///  Example: /// Example: ['f7c70cc8-f9b7-4467-b4ad-3904e360e842', '1da3fab000014e3133709830937387405']
  ///  Constraints: No constraints specified.
  public var hasSrcIds: Bool { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? false : true }
  public var srcIdsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcIds(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The call sign currently assigned to this track object.
  ///  Example: /// Example: callSign
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var callSign: String? { let o = _accessor.offset(VTOFFSET.callSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var callSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.callSign.v) }
  ///  Flag indicating that this track is fused from multiple sensor sources.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var multiSource: Bool { let o = _accessor.offset(VTOFFSET.multiSource.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The J-series message type, if this track is derived from a J-series message.
  ///  Example: /// Example: J12.5
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var jSeries: String? { let o = _accessor.offset(VTOFFSET.jSeries.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var jSeriesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.jSeries.v) }
  ///  The number of objects or units moving as a group and represented as a single entity in this track message. If null, the track is assumed to represent a single object. Note that if this track derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
  ///  Example: /// Example: 14
  ///  Constraints: No constraints specified.
  public var strength: Int32 { let o = _accessor.offset(VTOFFSET.strength.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Mode-1 interrogation response (mission code), indicating mission or aircraft type.
  ///  Example: /// Example: 1234
  ///  Constraints: No constraints specified.
  public var m1: Int32 { let o = _accessor.offset(VTOFFSET.m1.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Mode-1 validity status.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var m1v: Int32 { let o = _accessor.offset(VTOFFSET.m1v.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Mode-2 interrogation response (military identification code).
  ///  Example: /// Example: 1234
  ///  Constraints: No constraints specified.
  public var m2: Int32 { let o = _accessor.offset(VTOFFSET.m2.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Mode-2 validity status.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var m2v: Int32 { let o = _accessor.offset(VTOFFSET.m2v.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Mode-3/A interrogation response (aircraft identification), provides a 4-digit octal identification code for the aircraft, assigned by the air traffic controller. Mode-3/A is shared military/civilian use.
  ///  Example: /// Example: 2636
  ///  Constraints: No constraints specified.
  public var m3a: Int32 { let o = _accessor.offset(VTOFFSET.m3a.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Mode-3/A validity status.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var m3av: Int32 { let o = _accessor.offset(VTOFFSET.m3av.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  public var hasTags: Bool { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? false : true }
  public var tagsCount: Int32 { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func tags(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Track_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Track_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startTrack_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 68) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(cntct: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cntct, at: VTOFFSET.cntct.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(msgTs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msgTs, at: VTOFFSET.msgTs.p) }
  public static func add(msnId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msnId, at: VTOFFSET.msnId.p) }
  public static func add(assetNat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: assetNat, at: VTOFFSET.assetNat.p) }
  public static func add(asset: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: asset, at: VTOFFSET.asset.p) }
  public static func add(sen: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sen, at: VTOFFSET.sen.p) }
  public static func add(senQual: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: senQual, at: VTOFFSET.senQual.p) }
  public static func add(trkId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trkId, at: VTOFFSET.trkId.p) }
  public static func add(trkNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trkNum, at: VTOFFSET.trkNum.p) }
  public static func add(trkStat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trkStat, at: VTOFFSET.trkStat.p) }
  public static func add(objNat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: objNat, at: VTOFFSET.objNat.p) }
  public static func add(objId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: objId, at: VTOFFSET.objId.p) }
  public static func add(objType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: objType, at: VTOFFSET.objType.p) }
  public static func add(objSpec: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: objSpec, at: VTOFFSET.objSpec.p) }
  public static func add(objPlat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: objPlat, at: VTOFFSET.objPlat.p) }
  public static func add(objAct: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: objAct, at: VTOFFSET.objAct.p) }
  public static func add(modType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: modType, at: VTOFFSET.modType.p) }
  public static func add(trkItmId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trkItmId, at: VTOFFSET.trkItmId.p) }
  public static func add(ts: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ts, at: VTOFFSET.ts.p) }
  public static func add(trkQual: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: trkQual, def: 0, at: VTOFFSET.trkQual.p) }
  public static func add(trkPtType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trkPtType, at: VTOFFSET.trkPtType.p) }
  public static func add(objIdent: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: objIdent, at: VTOFFSET.objIdent.p) }
  public static func add(identCred: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: identCred, def: 0, at: VTOFFSET.identCred.p) }
  public static func add(identRel: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: identRel, def: 0, at: VTOFFSET.identRel.p) }
  public static func add(identAmp: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: identAmp, at: VTOFFSET.identAmp.p) }
  public static func add(env: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: env, at: VTOFFSET.env.p) }
  public static func add(envConf: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: envConf, def: 0.0, at: VTOFFSET.envConf.p) }
  public static func add(trkConf: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: trkConf, def: 0.0, at: VTOFFSET.trkConf.p) }
  public static func addVectorOf(ecefPos: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ecefPos, at: VTOFFSET.ecefPos.p) }
  public static func addVectorOf(ecefVel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ecefVel, at: VTOFFSET.ecefVel.p) }
  public static func addVectorOf(ecefAcc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ecefAcc, at: VTOFFSET.ecefAcc.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(alt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: alt, def: 0.0, at: VTOFFSET.alt.p) }
  public static func add(spd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: spd, def: 0.0, at: VTOFFSET.spd.p) }
  public static func add(hdng: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hdng, def: 0.0, at: VTOFFSET.hdng.p) }
  public static func add(course: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: course, def: 0.0, at: VTOFFSET.course.p) }
  public static func addVectorOf(lco: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lco, at: VTOFFSET.lco.p) }
  public static func addVectorOf(lcs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lcs, at: VTOFFSET.lcs.p) }
  public static func addVectorOf(lcPos: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lcPos, at: VTOFFSET.lcPos.p) }
  public static func addVectorOf(lcVel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lcVel, at: VTOFFSET.lcVel.p) }
  public static func addVectorOf(lcAcc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lcAcc, at: VTOFFSET.lcAcc.p) }
  public static func addVectorOf(eNuvel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eNuvel, at: VTOFFSET.eNuvel.p) }
  public static func addVectorOf(eNupos: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eNupos, at: VTOFFSET.eNupos.p) }
  public static func addVectorOf(cov: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cov, at: VTOFFSET.cov.p) }
  public static func addVectorOf(errEllp: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: errEllp, at: VTOFFSET.errEllp.p) }
  public static func addVectorOf(srcTyps: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcTyps, at: VTOFFSET.srcTyps.p) }
  public static func addVectorOf(srcIds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcIds, at: VTOFFSET.srcIds.p) }
  public static func add(callSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callSign, at: VTOFFSET.callSign.p) }
  public static func add(multiSource: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: multiSource, def: false,
   at: VTOFFSET.multiSource.p) }
  public static func add(jSeries: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: jSeries, at: VTOFFSET.jSeries.p) }
  public static func add(strength: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: strength, def: 0, at: VTOFFSET.strength.p) }
  public static func add(m1: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: m1, def: 0, at: VTOFFSET.m1.p) }
  public static func add(m1v: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: m1v, def: 0, at: VTOFFSET.m1v.p) }
  public static func add(m2: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: m2, def: 0, at: VTOFFSET.m2.p) }
  public static func add(m2v: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: m2v, def: 0, at: VTOFFSET.m2v.p) }
  public static func add(m3a: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: m3a, def: 0, at: VTOFFSET.m3a.p) }
  public static func add(m3av: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: m3av, def: 0, at: VTOFFSET.m3av.p) }
  public static func addVectorOf(tags: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tags, at: VTOFFSET.tags.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: Track_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endTrack_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createTrack_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    cntctOffset cntct: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    msgTsOffset msgTs: Offset = Offset(),
    msnIdOffset msnId: Offset = Offset(),
    assetNatOffset assetNat: Offset = Offset(),
    assetOffset asset: Offset = Offset(),
    senOffset sen: Offset = Offset(),
    senQualOffset senQual: Offset = Offset(),
    trkIdOffset trkId: Offset = Offset(),
    trkNumOffset trkNum: Offset = Offset(),
    trkStatOffset trkStat: Offset = Offset(),
    objNatOffset objNat: Offset = Offset(),
    objIdOffset objId: Offset = Offset(),
    objTypeOffset objType: Offset = Offset(),
    objSpecOffset objSpec: Offset = Offset(),
    objPlatOffset objPlat: Offset = Offset(),
    objActOffset objAct: Offset = Offset(),
    modTypeOffset modType: Offset = Offset(),
    trkItmIdOffset trkItmId: Offset = Offset(),
    tsOffset ts: Offset = Offset(),
    trkQual: Int32 = 0,
    trkPtTypeOffset trkPtType: Offset = Offset(),
    objIdentOffset objIdent: Offset = Offset(),
    identCred: Int32 = 0,
    identRel: Int32 = 0,
    identAmpOffset identAmp: Offset = Offset(),
    envOffset env: Offset = Offset(),
    envConf: Double = 0.0,
    trkConf: Double = 0.0,
    ecefPosVectorOffset ecefPos: Offset = Offset(),
    ecefVelVectorOffset ecefVel: Offset = Offset(),
    ecefAccVectorOffset ecefAcc: Offset = Offset(),
    lat: Double = 0.0,
    lon: Double = 0.0,
    alt: Double = 0.0,
    spd: Double = 0.0,
    hdng: Double = 0.0,
    course: Double = 0.0,
    lcoVectorOffset lco: Offset = Offset(),
    lcsVectorOffset lcs: Offset = Offset(),
    lcPosVectorOffset lcPos: Offset = Offset(),
    lcVelVectorOffset lcVel: Offset = Offset(),
    lcAccVectorOffset lcAcc: Offset = Offset(),
    eNuvelVectorOffset eNuvel: Offset = Offset(),
    eNuposVectorOffset eNupos: Offset = Offset(),
    covVectorOffset cov: Offset = Offset(),
    errEllpVectorOffset errEllp: Offset = Offset(),
    srcTypsVectorOffset srcTyps: Offset = Offset(),
    srcIdsVectorOffset srcIds: Offset = Offset(),
    callSignOffset callSign: Offset = Offset(),
    multiSource: Bool = false,
    jSeriesOffset jSeries: Offset = Offset(),
    strength: Int32 = 0,
    m1: Int32 = 0,
    m1v: Int32 = 0,
    m2: Int32 = 0,
    m2v: Int32 = 0,
    m3a: Int32 = 0,
    m3av: Int32 = 0,
    tagsVectorOffset tags: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: Track_Full_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = Track_Full.startTrack_Full(&fbb)
    Track_Full.add(id: id, &fbb)
    Track_Full.add(classificationMarking: classificationMarking, &fbb)
    Track_Full.add(cntct: cntct, &fbb)
    Track_Full.add(createdAt: createdAt, &fbb)
    Track_Full.add(createdBy: createdBy, &fbb)
    Track_Full.add(msgTs: msgTs, &fbb)
    Track_Full.add(msnId: msnId, &fbb)
    Track_Full.add(assetNat: assetNat, &fbb)
    Track_Full.add(asset: asset, &fbb)
    Track_Full.add(sen: sen, &fbb)
    Track_Full.add(senQual: senQual, &fbb)
    Track_Full.add(trkId: trkId, &fbb)
    Track_Full.add(trkNum: trkNum, &fbb)
    Track_Full.add(trkStat: trkStat, &fbb)
    Track_Full.add(objNat: objNat, &fbb)
    Track_Full.add(objId: objId, &fbb)
    Track_Full.add(objType: objType, &fbb)
    Track_Full.add(objSpec: objSpec, &fbb)
    Track_Full.add(objPlat: objPlat, &fbb)
    Track_Full.add(objAct: objAct, &fbb)
    Track_Full.add(modType: modType, &fbb)
    Track_Full.add(trkItmId: trkItmId, &fbb)
    Track_Full.add(ts: ts, &fbb)
    Track_Full.add(trkQual: trkQual, &fbb)
    Track_Full.add(trkPtType: trkPtType, &fbb)
    Track_Full.add(objIdent: objIdent, &fbb)
    Track_Full.add(identCred: identCred, &fbb)
    Track_Full.add(identRel: identRel, &fbb)
    Track_Full.add(identAmp: identAmp, &fbb)
    Track_Full.add(env: env, &fbb)
    Track_Full.add(envConf: envConf, &fbb)
    Track_Full.add(trkConf: trkConf, &fbb)
    Track_Full.addVectorOf(ecefPos: ecefPos, &fbb)
    Track_Full.addVectorOf(ecefVel: ecefVel, &fbb)
    Track_Full.addVectorOf(ecefAcc: ecefAcc, &fbb)
    Track_Full.add(lat: lat, &fbb)
    Track_Full.add(lon: lon, &fbb)
    Track_Full.add(alt: alt, &fbb)
    Track_Full.add(spd: spd, &fbb)
    Track_Full.add(hdng: hdng, &fbb)
    Track_Full.add(course: course, &fbb)
    Track_Full.addVectorOf(lco: lco, &fbb)
    Track_Full.addVectorOf(lcs: lcs, &fbb)
    Track_Full.addVectorOf(lcPos: lcPos, &fbb)
    Track_Full.addVectorOf(lcVel: lcVel, &fbb)
    Track_Full.addVectorOf(lcAcc: lcAcc, &fbb)
    Track_Full.addVectorOf(eNuvel: eNuvel, &fbb)
    Track_Full.addVectorOf(eNupos: eNupos, &fbb)
    Track_Full.addVectorOf(cov: cov, &fbb)
    Track_Full.addVectorOf(errEllp: errEllp, &fbb)
    Track_Full.addVectorOf(srcTyps: srcTyps, &fbb)
    Track_Full.addVectorOf(srcIds: srcIds, &fbb)
    Track_Full.add(callSign: callSign, &fbb)
    Track_Full.add(multiSource: multiSource, &fbb)
    Track_Full.add(jSeries: jSeries, &fbb)
    Track_Full.add(strength: strength, &fbb)
    Track_Full.add(m1: m1, &fbb)
    Track_Full.add(m1v: m1v, &fbb)
    Track_Full.add(m2: m2, &fbb)
    Track_Full.add(m2v: m2v, &fbb)
    Track_Full.add(m3a: m3a, &fbb)
    Track_Full.add(m3av: m3av, &fbb)
    Track_Full.addVectorOf(tags: tags, &fbb)
    Track_Full.add(sourceDl: sourceDl, &fbb)
    Track_Full.add(source: source, &fbb)
    Track_Full.add(origin: origin, &fbb)
    Track_Full.add(dataMode: dataMode, &fbb)
    Track_Full.add(origNetwork: origNetwork, &fbb)
    return Track_Full.endTrack_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cntct.p, fieldName: "cntct", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msgTs.p, fieldName: "msgTs", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msnId.p, fieldName: "msnId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.assetNat.p, fieldName: "assetNat", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.asset.p, fieldName: "asset", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sen.p, fieldName: "sen", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.senQual.p, fieldName: "senQual", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.trkId.p, fieldName: "trkId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.trkNum.p, fieldName: "trkNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.trkStat.p, fieldName: "trkStat", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objNat.p, fieldName: "objNat", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objId.p, fieldName: "objId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objType.p, fieldName: "objType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objSpec.p, fieldName: "objSpec", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objPlat.p, fieldName: "objPlat", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objAct.p, fieldName: "objAct", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.modType.p, fieldName: "modType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.trkItmId.p, fieldName: "trkItmId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ts.p, fieldName: "ts", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.trkQual.p, fieldName: "trkQual", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.trkPtType.p, fieldName: "trkPtType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objIdent.p, fieldName: "objIdent", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.identCred.p, fieldName: "identCred", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.identRel.p, fieldName: "identRel", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.identAmp.p, fieldName: "identAmp", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.env.p, fieldName: "env", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.envConf.p, fieldName: "envConf", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.trkConf.p, fieldName: "trkConf", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ecefPos.p, fieldName: "ecefPos", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.ecefVel.p, fieldName: "ecefVel", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.ecefAcc.p, fieldName: "ecefAcc", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.alt.p, fieldName: "alt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.spd.p, fieldName: "spd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.hdng.p, fieldName: "hdng", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.course.p, fieldName: "course", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lco.p, fieldName: "lco", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.lcs.p, fieldName: "lcs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.lcPos.p, fieldName: "lcPos", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.lcVel.p, fieldName: "lcVel", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.lcAcc.p, fieldName: "lcAcc", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.eNuvel.p, fieldName: "eNuvel", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.eNupos.p, fieldName: "eNupos", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.cov.p, fieldName: "cov", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.errEllp.p, fieldName: "errEllp", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.srcTyps.p, fieldName: "srcTyps", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.srcIds.p, fieldName: "srcIds", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.callSign.p, fieldName: "callSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.multiSource.p, fieldName: "multiSource", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.jSeries.p, fieldName: "jSeries", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.strength.p, fieldName: "strength", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.m1.p, fieldName: "m1", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.m1v.p, fieldName: "m1v", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.m2.p, fieldName: "m2", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.m2v.p, fieldName: "m2v", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.m3a.p, fieldName: "m3a", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.m3av.p, fieldName: "m3av", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.tags.p, fieldName: "tags", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Track_Full_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

