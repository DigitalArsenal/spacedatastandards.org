// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum FlightPlan_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: FlightPlan_Full_dataMode_Enum { return .exercise }
  public static var min: FlightPlan_Full_dataMode_Enum { return .real }
}


///  /// Flight Plan contains data specifying the details of an intended flight including schedule and expected route.
public struct FlightPlan_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "FLIG" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: FlightPlan_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case amcMissionId = 8
    case idSortie = 10
    case idAircraft = 12
    case legNum = 14
    case idDepAirfield = 16
    case depAirfield = 18
    case idArrAirfield = 20
    case arrAirfield = 22
    case externalId = 24
    case genTs = 26
    case aircraftMds = 28
    case tailNumber = 30
    case callSign = 32
    case wxValidStart = 34
    case wxValidEnd = 36
    case estDepTime = 38
    case dragIndex = 40
    case fuelDegrade = 42
    case opWeight = 44
    case msnIndex = 46
    case rampFuel = 48
    case taxiFuel = 50
    case takeoffFuel = 52
    case climbFuel = 54
    case climbTime = 56
    case holdDownFuel = 58
    case tocIceFuel = 60
    case tocFuel = 62
    case enrouteFuel = 64
    case enrouteTime = 66
    case thunderAvoidFuel = 68
    case todIceFuel = 70
    case opConditionFuel = 72
    case todFuel = 74
    case earlyDescentFuel = 76
    case arrIceFuel = 78
    case holdFuel = 80
    case holdTime = 82
    case appLandingFuel = 84
    case burnedFuel = 86
    case landingFuel = 88
    case minDivertFuel = 90
    case arrAlternate1Fuel = 92
    case arrAlternate2Fuel = 94
    case contingencyFuel = 96
    case reserveFuel = 98
    case depressFuel = 100
    case unusableFuel = 102
    case unidentExtraFuel = 104
    case identExtraFuel = 106
    case remAlternate1Fuel = 108
    case remAlternate2Fuel = 110
    case enduranceTime = 112
    case sid = 114
    case star = 116
    case gpsRaim = 118
    case depRunway = 120
    case arrRunway = 122
    case routeString = 124
    case countryCodes = 126
    case etopsRating = 128
    case etopsAirfields = 130
    case etopsAltAirfields = 132
    case etopsValWindow = 134
    case plannerRemark = 136
    case cargoRemark = 138
    case windFac1 = 140
    case windFac2 = 142
    case windFacAvg = 144
    case avgTempDev = 146
    case atcAddresses = 148
    case originator = 150
    case numAircraft = 152
    case flightRules = 154
    case flightType = 156
    case initialCruiseSpeed = 158
    case initialFlightLevel = 160
    case arrAlternate1 = 162
    case arrAlternate2 = 164
    case depAlternate = 166
    case wakeTurbCat = 168
    case equipment = 170
    case notes = 172
    case createdAt = 174
    case createdBy = 176
    case sourceDl = 178
    case source = 180
    case origin = 182
    case origNetwork = 184
    case dataMode = 186
    case airRefuelEvents = 188
    case flightPlanMessages = 190
    case flightPlanWaypoints = 192
    case flightPlanPointGroups = 194
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) encode/decode procedures.
  ///  Example: /// Example: AJM7939B1123
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var amcMissionId: String? { let o = _accessor.offset(VTOFFSET.amcMissionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var amcMissionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.amcMissionId.v) }
  ///  The UDL unique identifier of the aircraft sortie associated with this flight plan.
  ///  Example: /// Example: 9d60c1b1-10b1-b2a7-e403-84c5d7eeb170
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSortie: String? { let o = _accessor.offset(VTOFFSET.idSortie.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSortieSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSortie.v) }
  ///  The UDL unique identifier of the aircraft associated with this flight plan.
  ///  Example: /// Example: 4f4a67c6-40fd-11ee-be56-0242ac120002
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idAircraft: String? { let o = _accessor.offset(VTOFFSET.idAircraft.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idAircraftSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idAircraft.v) }
  ///  The leg number of this flight plan.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  public var legNum: Int32 { let o = _accessor.offset(VTOFFSET.legNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The UDL unique identifier of the departure airfield associated with this flight plan.
  ///  Example: /// Example: 2a9020f6-40fd-11ee-be56-0242ac120002
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idDepAirfield: String? { let o = _accessor.offset(VTOFFSET.idDepAirfield.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idDepAirfieldSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idDepAirfield.v) }
  ///  The airfield identifier of the departure location, International Civil Aviation Organization (ICAO) code preferred.
  ///  Example: /// Example: KSLV
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var depAirfield: String? { let o = _accessor.offset(VTOFFSET.depAirfield.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var depAirfieldSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.depAirfield.v) }
  ///  The UDL unique identifier of the arrival airfield associated with this flight plan.
  ///  Example: /// Example: 363080c2-40fd-11ee-be56-0242ac120002
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idArrAirfield: String? { let o = _accessor.offset(VTOFFSET.idArrAirfield.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idArrAirfieldSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idArrAirfield.v) }
  ///  The airfield identifier of the arrival location, International Civil Aviation Organization (ICAO) code preferred.
  ///  Example: /// Example: KCHS
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var arrAirfield: String? { let o = _accessor.offset(VTOFFSET.arrAirfield.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var arrAirfieldSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.arrAirfield.v) }
  ///  The source ID of the flight plan from the generating system.
  ///  Example: /// Example: AFMAPP20322347140001
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var externalId: String? { let o = _accessor.offset(VTOFFSET.externalId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var externalIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.externalId.v) }
  ///  The generation time of this flight plan in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2023-05-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var genTs: String? { let o = _accessor.offset(VTOFFSET.genTs.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var genTsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.genTs.v) }
  ///  The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of the aircraft associated with this flight plan. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  ///  Example: /// Example: KC-130 HERCULES
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var aircraftMds: String? { let o = _accessor.offset(VTOFFSET.aircraftMds.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aircraftMdsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aircraftMds.v) }
  ///  The tail number of the aircraft associated with this flight plan.
  ///  Example: /// Example: 77187
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var tailNumber: String? { let o = _accessor.offset(VTOFFSET.tailNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tailNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tailNumber.v) }
  ///  The call sign assigned to the aircraft for this flight plan.
  ///  Example: /// Example: HKY629
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var callSign: String? { let o = _accessor.offset(VTOFFSET.callSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var callSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.callSign.v) }
  ///  The date and time the weather valid period begins in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2023-05-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var wxValidStart: String? { let o = _accessor.offset(VTOFFSET.wxValidStart.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var wxValidStartSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.wxValidStart.v) }
  ///  The date and time the weather valid period ends in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2023-05-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var wxValidEnd: String? { let o = _accessor.offset(VTOFFSET.wxValidEnd.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var wxValidEndSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.wxValidEnd.v) }
  ///  The estimated time of departure for the aircraft, in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2023-05-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var estDepTime: String? { let o = _accessor.offset(VTOFFSET.estDepTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var estDepTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.estDepTime.v) }
  ///  The percent degrade due to drag for this aircraft.
  ///  Example: /// Example: 16.9
  ///  Constraints: No constraints specified.
  public var dragIndex: Double { let o = _accessor.offset(VTOFFSET.dragIndex.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The fuel degrade percentage used for this mission.
  ///  Example: /// Example: 10.3
  ///  Constraints: No constraints specified.
  public var fuelDegrade: Double { let o = _accessor.offset(VTOFFSET.fuelDegrade.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Operating weight of the aircraft in pounds.
  ///  Example: /// Example: 251830.5
  ///  Constraints: No constraints specified.
  public var opWeight: Double { let o = _accessor.offset(VTOFFSET.opWeight.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The mission index value for this mission. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
  ///  Example: /// Example: 44.1
  ///  Constraints: No constraints specified.
  public var msnIndex: Double { let o = _accessor.offset(VTOFFSET.msnIndex.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Total of all fuel required to complete the flight in pounds, including fuel to be dispensed on a refueling mission.
  ///  Example: /// Example: 180000.1
  ///  Constraints: No constraints specified.
  public var rampFuel: Double { let o = _accessor.offset(VTOFFSET.rampFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fuel required to start engines and taxi to the end of the runway in pounds.
  ///  Example: /// Example: 1500.1
  ///  Constraints: No constraints specified.
  public var taxiFuel: Double { let o = _accessor.offset(VTOFFSET.taxiFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fuel at takeoff, which is calculated as the ramp fuel minus the taxi fuel in pounds.
  ///  Example: /// Example: 178500.1
  ///  Constraints: No constraints specified.
  public var takeoffFuel: Double { let o = _accessor.offset(VTOFFSET.takeoffFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fuel required from brake release to Top of Climb in pounds.
  ///  Example: /// Example: 7000.1
  ///  Constraints: No constraints specified.
  public var climbFuel: Double { let o = _accessor.offset(VTOFFSET.climbFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Time required from brake release to Top of Climb expressed as HH:MM.
  ///  Example: /// Example: 00:13
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var climbTime: String? { let o = _accessor.offset(VTOFFSET.climbTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var climbTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.climbTime.v) }
  ///  Additional fuel burned at Top of Climb in pounds.
  ///  Example: /// Example: 500.1
  ///  Constraints: No constraints specified.
  public var holdDownFuel: Double { let o = _accessor.offset(VTOFFSET.holdDownFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Additional fuel burned at Top of Climb for icing in pounds.
  ///  Example: /// Example: 1000.1
  ///  Constraints: No constraints specified.
  public var tocIceFuel: Double { let o = _accessor.offset(VTOFFSET.tocIceFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fuel remaining at Top of Climb in pounds.
  ///  Example: /// Example: 160000.1
  ///  Constraints: No constraints specified.
  public var tocFuel: Double { let o = _accessor.offset(VTOFFSET.tocFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fuel required to fly from Top of Climb to Top of Descent in pounds.
  ///  Example: /// Example: 155000.1
  ///  Constraints: No constraints specified.
  public var enrouteFuel: Double { let o = _accessor.offset(VTOFFSET.enrouteFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Time required to fly from Top of Climb to Top of Descent expressed as HH:MM.
  ///  Example: /// Example: 06:30
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var enrouteTime: String? { let o = _accessor.offset(VTOFFSET.enrouteTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var enrouteTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.enrouteTime.v) }
  ///  Additional fuel burned at Top of Descent for thunderstorm avoidance in pounds.
  ///  Example: /// Example: 1000.1
  ///  Constraints: No constraints specified.
  public var thunderAvoidFuel: Double { let o = _accessor.offset(VTOFFSET.thunderAvoidFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Additional fuel burned at Top of Descent for icing in pounds.
  ///  Example: /// Example: 2000.1
  ///  Constraints: No constraints specified.
  public var todIceFuel: Double { let o = _accessor.offset(VTOFFSET.todIceFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Additional fuel burned at Top of Descent for the operational condition in pounds.
  ///  Example: /// Example: 5000.1
  ///  Constraints: No constraints specified.
  public var opConditionFuel: Double { let o = _accessor.offset(VTOFFSET.opConditionFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fuel remaining at Top of Descent in pounds.
  ///  Example: /// Example: 32000.1
  ///  Constraints: No constraints specified.
  public var todFuel: Double { let o = _accessor.offset(VTOFFSET.todFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Additional fuel burned at landing/missed approach for an early descent in pounds.
  ///  Example: /// Example: 500.1
  ///  Constraints: No constraints specified.
  public var earlyDescentFuel: Double { let o = _accessor.offset(VTOFFSET.earlyDescentFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Additional fuel burned at landing/missed approach for icing during arrival in pounds.
  ///  Example: /// Example: 1000.1
  ///  Constraints: No constraints specified.
  public var arrIceFuel: Double { let o = _accessor.offset(VTOFFSET.arrIceFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Additional fuel burned at the destination for holding in pounds.
  ///  Example: /// Example: 6000.1
  ///  Constraints: No constraints specified.
  public var holdFuel: Double { let o = _accessor.offset(VTOFFSET.holdFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Additional time for holding at the destination expressed as HH:MM.
  ///  Example: /// Example: 01:00
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var holdTime: String? { let o = _accessor.offset(VTOFFSET.holdTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var holdTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.holdTime.v) }
  ///  Fuel burned from the initial approach point to landing in pounds.
  ///  Example: /// Example: 3000.1
  ///  Constraints: No constraints specified.
  public var appLandingFuel: Double { let o = _accessor.offset(VTOFFSET.appLandingFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fuel planned to be burned during the flight in pounds.
  ///  Example: /// Example: 145000.1
  ///  Constraints: No constraints specified.
  public var burnedFuel: Double { let o = _accessor.offset(VTOFFSET.burnedFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fuel planned to be remaining on the airplane at landing in pounds.
  ///  Example: /// Example: 19000.1
  ///  Constraints: No constraints specified.
  public var landingFuel: Double { let o = _accessor.offset(VTOFFSET.landingFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The minimum fuel on board required to divert in pounds.
  ///  Example: /// Example: 25000.1
  ///  Constraints: No constraints specified.
  public var minDivertFuel: Double { let o = _accessor.offset(VTOFFSET.minDivertFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fuel required to fly to alternate landing site 1 and land in pounds.
  ///  Example: /// Example: 6000.1
  ///  Constraints: No constraints specified.
  public var arrAlternate1Fuel: Double { let o = _accessor.offset(VTOFFSET.arrAlternate1Fuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fuel required to fly to alternate landing site 2 and land in pounds.
  ///  Example: /// Example: 6000.1
  ///  Constraints: No constraints specified.
  public var arrAlternate2Fuel: Double { let o = _accessor.offset(VTOFFSET.arrAlternate2Fuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The amount of contingency fuel in pounds.
  ///  Example: /// Example: 3000.1
  ///  Constraints: No constraints specified.
  public var contingencyFuel: Double { let o = _accessor.offset(VTOFFSET.contingencyFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The amount of reserve fuel in pounds.
  ///  Example: /// Example: 10000.1
  ///  Constraints: No constraints specified.
  public var reserveFuel: Double { let o = _accessor.offset(VTOFFSET.reserveFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The depressurization fuel required to fly from the Equal Time Point to the Last Suitable/First Suitable airfield at depressurization altitude in pounds.
  ///  Example: /// Example: 20000.1
  ///  Constraints: No constraints specified.
  public var depressFuel: Double { let o = _accessor.offset(VTOFFSET.depressFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The amount of unusable fuel in pounds.
  ///  Example: /// Example: 2300.1
  ///  Constraints: No constraints specified.
  public var unusableFuel: Double { let o = _accessor.offset(VTOFFSET.unusableFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The amount of unidentified extra fuel required to get to min landing in pounds.
  ///  Example: /// Example: 5000.1
  ///  Constraints: No constraints specified.
  public var unidentExtraFuel: Double { let o = _accessor.offset(VTOFFSET.unidentExtraFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The amount of identified extra fuel carried and not available in the burn plan in pounds.
  ///  Example: /// Example: 5000.1
  ///  Constraints: No constraints specified.
  public var identExtraFuel: Double { let o = _accessor.offset(VTOFFSET.identExtraFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Total fuel remaining at alternate landing site 1 in pounds.
  ///  Example: /// Example: 18000.1
  ///  Constraints: No constraints specified.
  public var remAlternate1Fuel: Double { let o = _accessor.offset(VTOFFSET.remAlternate1Fuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Total fuel remaining at alternate landing site 2 in pounds.
  ///  Example: /// Example: 18000.1
  ///  Constraints: No constraints specified.
  public var remAlternate2Fuel: Double { let o = _accessor.offset(VTOFFSET.remAlternate2Fuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Total endurance time based on the fuel on board expressed as HH:MM.
  ///  Example: /// Example: 08:45
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var enduranceTime: String? { let o = _accessor.offset(VTOFFSET.enduranceTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var enduranceTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.enduranceTime.v) }
  ///  Name of the planned Standard Instrument Departure (SID) procedure.
  ///  Example: /// Example: RENV3B
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var sid: String? { let o = _accessor.offset(VTOFFSET.sid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sidSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sid.v) }
  ///  Name of the planned Standard Terminal Arrival (STAR) procedure.
  ///  Example: /// Example: ADANA
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var star: String? { let o = _accessor.offset(VTOFFSET.star.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var starSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.star.v) }
  ///  The GPS Receiver Autonomous Integrity Monitoring (RAIM) message. A RAIM system assesses the integrity of the GPS signals. This system predicts outages for a specified geographical area. These predictions are based on the location, path, and scheduled GPS satellite outages.
  ///  Example: /// Example: Failed by FAA SAPT 184022AUG2022
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var gpsRaim: String? { let o = _accessor.offset(VTOFFSET.gpsRaim.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var gpsRaimSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.gpsRaim.v) }
  ///  The departure runway for this flight.
  ///  Example: /// Example: 05L
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var depRunway: String? { let o = _accessor.offset(VTOFFSET.depRunway.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var depRunwaySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.depRunway.v) }
  ///  The arrival runway for this flight.
  ///  Example: /// Example: 05L
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var arrRunway: String? { let o = _accessor.offset(VTOFFSET.arrRunway.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var arrRunwaySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.arrRunway.v) }
  ///  The 1801 fileable route of flight string for this flight. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
  ///  Example: /// Example: RENV3B RENVI Y86 GOSVA/N0317F260 DCT EVLIT DCT UMUGI DCT NISIX DCT GIGOD DCT DIPEB DCT
  ///  GORPI Z80 TILAV L87 RAKIT Z717 PODUS Z130 MAG/N0298F220 Z20 KENIG/N0319F220 Z20 ORTAG T177
  ///  ESEGU Z20 BEBLA DCT MASEK/N0300F200 DCT GISEM/N0319F200 DCT BOMBI/N0276F060 DCT RIDSU DCT
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var routeString: String? { let o = _accessor.offset(VTOFFSET.routeString.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var routeStringSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.routeString.v) }
  ///  Array of country codes for the countries overflown during this flight in ISO 3166-1 Alpha-2 format.
  ///  Example: /// Example: ['US', 'CA', 'UK']
  ///  Constraints: No constraints specified.
  public var hasCountryCodes: Bool { let o = _accessor.offset(VTOFFSET.countryCodes.v); return o == 0 ? false : true }
  public var countryCodesCount: Int32 { let o = _accessor.offset(VTOFFSET.countryCodes.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func countryCodes(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.countryCodes.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The Extended Operations (ETOPS) rating used to calculate this flight plan.
  ///  Example: /// Example: 85 MINUTES
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var etopsRating: String? { let o = _accessor.offset(VTOFFSET.etopsRating.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var etopsRatingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.etopsRating.v) }
  ///  Array of Extended Operations (ETOPS) adequate landing airfields that are within the mission region.
  ///  Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
  ///  Constraints: No constraints specified.
  public var hasEtopsAirfields: Bool { let o = _accessor.offset(VTOFFSET.etopsAirfields.v); return o == 0 ? false : true }
  public var etopsAirfieldsCount: Int32 { let o = _accessor.offset(VTOFFSET.etopsAirfields.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func etopsAirfields(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.etopsAirfields.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of Extended Operations (ETOPS) alternate suitable landing airfields that are within the mission region.
  ///  Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
  ///  Constraints: No constraints specified.
  public var hasEtopsAltAirfields: Bool { let o = _accessor.offset(VTOFFSET.etopsAltAirfields.v); return o == 0 ? false : true }
  public var etopsAltAirfieldsCount: Int32 { let o = _accessor.offset(VTOFFSET.etopsAltAirfields.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func etopsAltAirfields(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.etopsAltAirfields.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The Extended Operations (ETOPS) validity window for the alternate airfield.
  ///  Example: /// Example: LPLA: 0317Z-0722Z
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var etopsValWindow: String? { let o = _accessor.offset(VTOFFSET.etopsValWindow.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var etopsValWindowSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.etopsValWindow.v) }
  ///  Remarks from the planners concerning this flight plan.
  ///  Example: /// Example: Flight plan is good for 2 days before airspace closes over the UK.
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var plannerRemark: String? { let o = _accessor.offset(VTOFFSET.plannerRemark.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var plannerRemarkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.plannerRemark.v) }
  ///  Remarks about the planned cargo associated with this flight plan.
  ///  Example: /// Example: Expecting 55,000 lbs. If different, call us.
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var cargoRemark: String? { let o = _accessor.offset(VTOFFSET.cargoRemark.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cargoRemarkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cargoRemark.v) }
  ///  Wind factor for the first half of the route. This is the average wind factor from first Top of Climb to the mid-time of the entire route in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  ///  Example: /// Example: -1.1
  ///  Constraints: No constraints specified.
  public var windFac1: Double { let o = _accessor.offset(VTOFFSET.windFac1.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Wind factor for the second half of the route. This is the average wind factor from the mid-time of the entire route to last Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var windFac2: Double { let o = _accessor.offset(VTOFFSET.windFac2.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average wind factor from Top of Climb to Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  ///  Example: /// Example: 5.1
  ///  Constraints: No constraints specified.
  public var windFacAvg: Double { let o = _accessor.offset(VTOFFSET.windFacAvg.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average temperature deviation of the primary, divert, and alternate path for the route between first Top of Climb and last Top of Descent in degrees Celsius.
  ///  Example: /// Example: 16.1
  ///  Constraints: No constraints specified.
  public var avgTempDev: Double { let o = _accessor.offset(VTOFFSET.avgTempDev.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Array of Air Traffic Control (ATC) addresses.
  ///  Example: /// Example: ['EYCBZMFO', 'EUCHZMFP', 'ETARYXYX', 'EDUUZVZI']
  ///  Constraints: No constraints specified.
  public var hasAtcAddresses: Bool { let o = _accessor.offset(VTOFFSET.atcAddresses.v); return o == 0 ? false : true }
  public var atcAddressesCount: Int32 { let o = _accessor.offset(VTOFFSET.atcAddresses.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func atcAddresses(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.atcAddresses.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Air Traffic Control address filing the flight plan.
  ///  Example: /// Example: ETARYXYX
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var originator: String? { let o = _accessor.offset(VTOFFSET.originator.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originatorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.originator.v) }
  ///  The number of aircraft flying this flight plan.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var numAircraft: Int32 { let o = _accessor.offset(VTOFFSET.numAircraft.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The flight rules this flight plan is being filed under.
  ///  Example: /// Example: l
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var flightRules: String? { let o = _accessor.offset(VTOFFSET.flightRules.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var flightRulesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.flightRules.v) }
  ///  The type of flight (MILITARY, CIVILIAN, etc).
  ///  Example: /// Example: MILITARY
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var flightType: String? { let o = _accessor.offset(VTOFFSET.flightType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var flightTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.flightType.v) }
  ///  A character string representation of the initial filed cruise speed for this flight (prepended values of K, N, and M represent kilometers per hour, knots, and Mach, respectively).
  ///  Example: /// Example: N0305
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var initialCruiseSpeed: String? { let o = _accessor.offset(VTOFFSET.initialCruiseSpeed.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var initialCruiseSpeedSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.initialCruiseSpeed.v) }
  ///  A character string representation of the initial filed altitude level for this flight (prepended values of F, S, A, and M represent flight level in hundreds of feet, standard metric level in tens of meters, altitude in hundreds of feet, and altitude in tens of meters, respectively).
  ///  Example: /// Example: F270
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var initialFlightLevel: String? { let o = _accessor.offset(VTOFFSET.initialFlightLevel.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var initialFlightLevelSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.initialFlightLevel.v) }
  ///  The first designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
  ///  Example: /// Example: EDDS
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var arrAlternate1: String? { let o = _accessor.offset(VTOFFSET.arrAlternate1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var arrAlternate1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.arrAlternate1.v) }
  ///  The second designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
  ///  Example: /// Example: EDDM
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var arrAlternate2: String? { let o = _accessor.offset(VTOFFSET.arrAlternate2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var arrAlternate2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.arrAlternate2.v) }
  ///  The designated alternate departure airfield, International Civil Aviation Organization (ICAO) code preferred.
  ///  Example: /// Example: LFPO
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var depAlternate: String? { let o = _accessor.offset(VTOFFSET.depAlternate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var depAlternateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.depAlternate.v) }
  ///  The wake turbulence category for this flight. The categories are assigned by the International Civil Aviation Organization (ICAO) and are based on maximum certified takeoff mass for the purpose of separating aircraft in flight due to wake turbulence. Valid values include LIGHT, MEDIUM, LARGE, HEAVY, and SUPER.
  ///  Example: /// Example: MEDIUM
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var wakeTurbCat: String? { let o = _accessor.offset(VTOFFSET.wakeTurbCat.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var wakeTurbCatSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.wakeTurbCat.v) }
  ///  The list of equipment on the aircraft as defined in the Flight Information Publications (FLIP) General Planning (GP) manual.
  ///  Example: /// Example: SDFGHIRTUWXYZ/H
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var equipment: String? { let o = _accessor.offset(VTOFFSET.equipment.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var equipmentSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.equipment.v) }
  ///  Additional remarks for air traffic control for this flight.
  ///  Example: /// Example: STS/STATE PBN/A1B2B5C2C4D2D4 EUR/PROTECTED
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: FlightPlan_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : FlightPlan_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Collection of air refueling events occurring on this flight.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasAirRefuelEvents: Bool { let o = _accessor.offset(VTOFFSET.airRefuelEvents.v); return o == 0 ? false : true }
  public var airRefuelEventsCount: Int32 { let o = _accessor.offset(VTOFFSET.airRefuelEvents.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func airRefuelEvents(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.airRefuelEvents.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasFlightPlanMessages: Bool { let o = _accessor.offset(VTOFFSET.flightPlanMessages.v); return o == 0 ? false : true }
  public var flightPlanMessagesCount: Int32 { let o = _accessor.offset(VTOFFSET.flightPlanMessages.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func flightPlanMessages(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.flightPlanMessages.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Collection of waypoints associated with this flight plan.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasFlightPlanWaypoints: Bool { let o = _accessor.offset(VTOFFSET.flightPlanWaypoints.v); return o == 0 ? false : true }
  public var flightPlanWaypointsCount: Int32 { let o = _accessor.offset(VTOFFSET.flightPlanWaypoints.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func flightPlanWaypoints(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.flightPlanWaypoints.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasFlightPlanPointGroups: Bool { let o = _accessor.offset(VTOFFSET.flightPlanPointGroups.v); return o == 0 ? false : true }
  public var flightPlanPointGroupsCount: Int32 { let o = _accessor.offset(VTOFFSET.flightPlanPointGroups.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func flightPlanPointGroups(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.flightPlanPointGroups.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startFlightPlan_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 96) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(amcMissionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: amcMissionId, at: VTOFFSET.amcMissionId.p) }
  public static func add(idSortie: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSortie, at: VTOFFSET.idSortie.p) }
  public static func add(idAircraft: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idAircraft, at: VTOFFSET.idAircraft.p) }
  public static func add(legNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: legNum, def: 0, at: VTOFFSET.legNum.p) }
  public static func add(idDepAirfield: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idDepAirfield, at: VTOFFSET.idDepAirfield.p) }
  public static func add(depAirfield: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: depAirfield, at: VTOFFSET.depAirfield.p) }
  public static func add(idArrAirfield: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idArrAirfield, at: VTOFFSET.idArrAirfield.p) }
  public static func add(arrAirfield: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: arrAirfield, at: VTOFFSET.arrAirfield.p) }
  public static func add(externalId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: externalId, at: VTOFFSET.externalId.p) }
  public static func add(genTs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: genTs, at: VTOFFSET.genTs.p) }
  public static func add(aircraftMds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aircraftMds, at: VTOFFSET.aircraftMds.p) }
  public static func add(tailNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tailNumber, at: VTOFFSET.tailNumber.p) }
  public static func add(callSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callSign, at: VTOFFSET.callSign.p) }
  public static func add(wxValidStart: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wxValidStart, at: VTOFFSET.wxValidStart.p) }
  public static func add(wxValidEnd: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wxValidEnd, at: VTOFFSET.wxValidEnd.p) }
  public static func add(estDepTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: estDepTime, at: VTOFFSET.estDepTime.p) }
  public static func add(dragIndex: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dragIndex, def: 0.0, at: VTOFFSET.dragIndex.p) }
  public static func add(fuelDegrade: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fuelDegrade, def: 0.0, at: VTOFFSET.fuelDegrade.p) }
  public static func add(opWeight: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: opWeight, def: 0.0, at: VTOFFSET.opWeight.p) }
  public static func add(msnIndex: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: msnIndex, def: 0.0, at: VTOFFSET.msnIndex.p) }
  public static func add(rampFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rampFuel, def: 0.0, at: VTOFFSET.rampFuel.p) }
  public static func add(taxiFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: taxiFuel, def: 0.0, at: VTOFFSET.taxiFuel.p) }
  public static func add(takeoffFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: takeoffFuel, def: 0.0, at: VTOFFSET.takeoffFuel.p) }
  public static func add(climbFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: climbFuel, def: 0.0, at: VTOFFSET.climbFuel.p) }
  public static func add(climbTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: climbTime, at: VTOFFSET.climbTime.p) }
  public static func add(holdDownFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: holdDownFuel, def: 0.0, at: VTOFFSET.holdDownFuel.p) }
  public static func add(tocIceFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: tocIceFuel, def: 0.0, at: VTOFFSET.tocIceFuel.p) }
  public static func add(tocFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: tocFuel, def: 0.0, at: VTOFFSET.tocFuel.p) }
  public static func add(enrouteFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: enrouteFuel, def: 0.0, at: VTOFFSET.enrouteFuel.p) }
  public static func add(enrouteTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: enrouteTime, at: VTOFFSET.enrouteTime.p) }
  public static func add(thunderAvoidFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: thunderAvoidFuel, def: 0.0, at: VTOFFSET.thunderAvoidFuel.p) }
  public static func add(todIceFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: todIceFuel, def: 0.0, at: VTOFFSET.todIceFuel.p) }
  public static func add(opConditionFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: opConditionFuel, def: 0.0, at: VTOFFSET.opConditionFuel.p) }
  public static func add(todFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: todFuel, def: 0.0, at: VTOFFSET.todFuel.p) }
  public static func add(earlyDescentFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: earlyDescentFuel, def: 0.0, at: VTOFFSET.earlyDescentFuel.p) }
  public static func add(arrIceFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: arrIceFuel, def: 0.0, at: VTOFFSET.arrIceFuel.p) }
  public static func add(holdFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: holdFuel, def: 0.0, at: VTOFFSET.holdFuel.p) }
  public static func add(holdTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: holdTime, at: VTOFFSET.holdTime.p) }
  public static func add(appLandingFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: appLandingFuel, def: 0.0, at: VTOFFSET.appLandingFuel.p) }
  public static func add(burnedFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: burnedFuel, def: 0.0, at: VTOFFSET.burnedFuel.p) }
  public static func add(landingFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: landingFuel, def: 0.0, at: VTOFFSET.landingFuel.p) }
  public static func add(minDivertFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: minDivertFuel, def: 0.0, at: VTOFFSET.minDivertFuel.p) }
  public static func add(arrAlternate1Fuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: arrAlternate1Fuel, def: 0.0, at: VTOFFSET.arrAlternate1Fuel.p) }
  public static func add(arrAlternate2Fuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: arrAlternate2Fuel, def: 0.0, at: VTOFFSET.arrAlternate2Fuel.p) }
  public static func add(contingencyFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: contingencyFuel, def: 0.0, at: VTOFFSET.contingencyFuel.p) }
  public static func add(reserveFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: reserveFuel, def: 0.0, at: VTOFFSET.reserveFuel.p) }
  public static func add(depressFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: depressFuel, def: 0.0, at: VTOFFSET.depressFuel.p) }
  public static func add(unusableFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: unusableFuel, def: 0.0, at: VTOFFSET.unusableFuel.p) }
  public static func add(unidentExtraFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: unidentExtraFuel, def: 0.0, at: VTOFFSET.unidentExtraFuel.p) }
  public static func add(identExtraFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: identExtraFuel, def: 0.0, at: VTOFFSET.identExtraFuel.p) }
  public static func add(remAlternate1Fuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: remAlternate1Fuel, def: 0.0, at: VTOFFSET.remAlternate1Fuel.p) }
  public static func add(remAlternate2Fuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: remAlternate2Fuel, def: 0.0, at: VTOFFSET.remAlternate2Fuel.p) }
  public static func add(enduranceTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: enduranceTime, at: VTOFFSET.enduranceTime.p) }
  public static func add(sid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sid, at: VTOFFSET.sid.p) }
  public static func add(star: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: star, at: VTOFFSET.star.p) }
  public static func add(gpsRaim: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: gpsRaim, at: VTOFFSET.gpsRaim.p) }
  public static func add(depRunway: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: depRunway, at: VTOFFSET.depRunway.p) }
  public static func add(arrRunway: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: arrRunway, at: VTOFFSET.arrRunway.p) }
  public static func add(routeString: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: routeString, at: VTOFFSET.routeString.p) }
  public static func addVectorOf(countryCodes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: countryCodes, at: VTOFFSET.countryCodes.p) }
  public static func add(etopsRating: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: etopsRating, at: VTOFFSET.etopsRating.p) }
  public static func addVectorOf(etopsAirfields: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: etopsAirfields, at: VTOFFSET.etopsAirfields.p) }
  public static func addVectorOf(etopsAltAirfields: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: etopsAltAirfields, at: VTOFFSET.etopsAltAirfields.p) }
  public static func add(etopsValWindow: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: etopsValWindow, at: VTOFFSET.etopsValWindow.p) }
  public static func add(plannerRemark: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: plannerRemark, at: VTOFFSET.plannerRemark.p) }
  public static func add(cargoRemark: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cargoRemark, at: VTOFFSET.cargoRemark.p) }
  public static func add(windFac1: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windFac1, def: 0.0, at: VTOFFSET.windFac1.p) }
  public static func add(windFac2: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windFac2, def: 0.0, at: VTOFFSET.windFac2.p) }
  public static func add(windFacAvg: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windFacAvg, def: 0.0, at: VTOFFSET.windFacAvg.p) }
  public static func add(avgTempDev: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgTempDev, def: 0.0, at: VTOFFSET.avgTempDev.p) }
  public static func addVectorOf(atcAddresses: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: atcAddresses, at: VTOFFSET.atcAddresses.p) }
  public static func add(originator: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: originator, at: VTOFFSET.originator.p) }
  public static func add(numAircraft: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numAircraft, def: 0, at: VTOFFSET.numAircraft.p) }
  public static func add(flightRules: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: flightRules, at: VTOFFSET.flightRules.p) }
  public static func add(flightType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: flightType, at: VTOFFSET.flightType.p) }
  public static func add(initialCruiseSpeed: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: initialCruiseSpeed, at: VTOFFSET.initialCruiseSpeed.p) }
  public static func add(initialFlightLevel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: initialFlightLevel, at: VTOFFSET.initialFlightLevel.p) }
  public static func add(arrAlternate1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: arrAlternate1, at: VTOFFSET.arrAlternate1.p) }
  public static func add(arrAlternate2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: arrAlternate2, at: VTOFFSET.arrAlternate2.p) }
  public static func add(depAlternate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: depAlternate, at: VTOFFSET.depAlternate.p) }
  public static func add(wakeTurbCat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wakeTurbCat, at: VTOFFSET.wakeTurbCat.p) }
  public static func add(equipment: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: equipment, at: VTOFFSET.equipment.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: FlightPlan_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func addVectorOf(airRefuelEvents: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: airRefuelEvents, at: VTOFFSET.airRefuelEvents.p) }
  public static func addVectorOf(flightPlanMessages: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: flightPlanMessages, at: VTOFFSET.flightPlanMessages.p) }
  public static func addVectorOf(flightPlanWaypoints: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: flightPlanWaypoints, at: VTOFFSET.flightPlanWaypoints.p) }
  public static func addVectorOf(flightPlanPointGroups: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: flightPlanPointGroups, at: VTOFFSET.flightPlanPointGroups.p) }
  public static func endFlightPlan_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createFlightPlan_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    amcMissionIdOffset amcMissionId: Offset = Offset(),
    idSortieOffset idSortie: Offset = Offset(),
    idAircraftOffset idAircraft: Offset = Offset(),
    legNum: Int32 = 0,
    idDepAirfieldOffset idDepAirfield: Offset = Offset(),
    depAirfieldOffset depAirfield: Offset = Offset(),
    idArrAirfieldOffset idArrAirfield: Offset = Offset(),
    arrAirfieldOffset arrAirfield: Offset = Offset(),
    externalIdOffset externalId: Offset = Offset(),
    genTsOffset genTs: Offset = Offset(),
    aircraftMdsOffset aircraftMds: Offset = Offset(),
    tailNumberOffset tailNumber: Offset = Offset(),
    callSignOffset callSign: Offset = Offset(),
    wxValidStartOffset wxValidStart: Offset = Offset(),
    wxValidEndOffset wxValidEnd: Offset = Offset(),
    estDepTimeOffset estDepTime: Offset = Offset(),
    dragIndex: Double = 0.0,
    fuelDegrade: Double = 0.0,
    opWeight: Double = 0.0,
    msnIndex: Double = 0.0,
    rampFuel: Double = 0.0,
    taxiFuel: Double = 0.0,
    takeoffFuel: Double = 0.0,
    climbFuel: Double = 0.0,
    climbTimeOffset climbTime: Offset = Offset(),
    holdDownFuel: Double = 0.0,
    tocIceFuel: Double = 0.0,
    tocFuel: Double = 0.0,
    enrouteFuel: Double = 0.0,
    enrouteTimeOffset enrouteTime: Offset = Offset(),
    thunderAvoidFuel: Double = 0.0,
    todIceFuel: Double = 0.0,
    opConditionFuel: Double = 0.0,
    todFuel: Double = 0.0,
    earlyDescentFuel: Double = 0.0,
    arrIceFuel: Double = 0.0,
    holdFuel: Double = 0.0,
    holdTimeOffset holdTime: Offset = Offset(),
    appLandingFuel: Double = 0.0,
    burnedFuel: Double = 0.0,
    landingFuel: Double = 0.0,
    minDivertFuel: Double = 0.0,
    arrAlternate1Fuel: Double = 0.0,
    arrAlternate2Fuel: Double = 0.0,
    contingencyFuel: Double = 0.0,
    reserveFuel: Double = 0.0,
    depressFuel: Double = 0.0,
    unusableFuel: Double = 0.0,
    unidentExtraFuel: Double = 0.0,
    identExtraFuel: Double = 0.0,
    remAlternate1Fuel: Double = 0.0,
    remAlternate2Fuel: Double = 0.0,
    enduranceTimeOffset enduranceTime: Offset = Offset(),
    sidOffset sid: Offset = Offset(),
    starOffset star: Offset = Offset(),
    gpsRaimOffset gpsRaim: Offset = Offset(),
    depRunwayOffset depRunway: Offset = Offset(),
    arrRunwayOffset arrRunway: Offset = Offset(),
    routeStringOffset routeString: Offset = Offset(),
    countryCodesVectorOffset countryCodes: Offset = Offset(),
    etopsRatingOffset etopsRating: Offset = Offset(),
    etopsAirfieldsVectorOffset etopsAirfields: Offset = Offset(),
    etopsAltAirfieldsVectorOffset etopsAltAirfields: Offset = Offset(),
    etopsValWindowOffset etopsValWindow: Offset = Offset(),
    plannerRemarkOffset plannerRemark: Offset = Offset(),
    cargoRemarkOffset cargoRemark: Offset = Offset(),
    windFac1: Double = 0.0,
    windFac2: Double = 0.0,
    windFacAvg: Double = 0.0,
    avgTempDev: Double = 0.0,
    atcAddressesVectorOffset atcAddresses: Offset = Offset(),
    originatorOffset originator: Offset = Offset(),
    numAircraft: Int32 = 0,
    flightRulesOffset flightRules: Offset = Offset(),
    flightTypeOffset flightType: Offset = Offset(),
    initialCruiseSpeedOffset initialCruiseSpeed: Offset = Offset(),
    initialFlightLevelOffset initialFlightLevel: Offset = Offset(),
    arrAlternate1Offset arrAlternate1: Offset = Offset(),
    arrAlternate2Offset arrAlternate2: Offset = Offset(),
    depAlternateOffset depAlternate: Offset = Offset(),
    wakeTurbCatOffset wakeTurbCat: Offset = Offset(),
    equipmentOffset equipment: Offset = Offset(),
    notesOffset notes: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: FlightPlan_Full_dataMode_Enum = .real,
    airRefuelEventsVectorOffset airRefuelEvents: Offset = Offset(),
    flightPlanMessagesVectorOffset flightPlanMessages: Offset = Offset(),
    flightPlanWaypointsVectorOffset flightPlanWaypoints: Offset = Offset(),
    flightPlanPointGroupsVectorOffset flightPlanPointGroups: Offset = Offset()
  ) -> Offset {
    let __start = FlightPlan_Full.startFlightPlan_Full(&fbb)
    FlightPlan_Full.add(id: id, &fbb)
    FlightPlan_Full.add(classificationMarking: classificationMarking, &fbb)
    FlightPlan_Full.add(amcMissionId: amcMissionId, &fbb)
    FlightPlan_Full.add(idSortie: idSortie, &fbb)
    FlightPlan_Full.add(idAircraft: idAircraft, &fbb)
    FlightPlan_Full.add(legNum: legNum, &fbb)
    FlightPlan_Full.add(idDepAirfield: idDepAirfield, &fbb)
    FlightPlan_Full.add(depAirfield: depAirfield, &fbb)
    FlightPlan_Full.add(idArrAirfield: idArrAirfield, &fbb)
    FlightPlan_Full.add(arrAirfield: arrAirfield, &fbb)
    FlightPlan_Full.add(externalId: externalId, &fbb)
    FlightPlan_Full.add(genTs: genTs, &fbb)
    FlightPlan_Full.add(aircraftMds: aircraftMds, &fbb)
    FlightPlan_Full.add(tailNumber: tailNumber, &fbb)
    FlightPlan_Full.add(callSign: callSign, &fbb)
    FlightPlan_Full.add(wxValidStart: wxValidStart, &fbb)
    FlightPlan_Full.add(wxValidEnd: wxValidEnd, &fbb)
    FlightPlan_Full.add(estDepTime: estDepTime, &fbb)
    FlightPlan_Full.add(dragIndex: dragIndex, &fbb)
    FlightPlan_Full.add(fuelDegrade: fuelDegrade, &fbb)
    FlightPlan_Full.add(opWeight: opWeight, &fbb)
    FlightPlan_Full.add(msnIndex: msnIndex, &fbb)
    FlightPlan_Full.add(rampFuel: rampFuel, &fbb)
    FlightPlan_Full.add(taxiFuel: taxiFuel, &fbb)
    FlightPlan_Full.add(takeoffFuel: takeoffFuel, &fbb)
    FlightPlan_Full.add(climbFuel: climbFuel, &fbb)
    FlightPlan_Full.add(climbTime: climbTime, &fbb)
    FlightPlan_Full.add(holdDownFuel: holdDownFuel, &fbb)
    FlightPlan_Full.add(tocIceFuel: tocIceFuel, &fbb)
    FlightPlan_Full.add(tocFuel: tocFuel, &fbb)
    FlightPlan_Full.add(enrouteFuel: enrouteFuel, &fbb)
    FlightPlan_Full.add(enrouteTime: enrouteTime, &fbb)
    FlightPlan_Full.add(thunderAvoidFuel: thunderAvoidFuel, &fbb)
    FlightPlan_Full.add(todIceFuel: todIceFuel, &fbb)
    FlightPlan_Full.add(opConditionFuel: opConditionFuel, &fbb)
    FlightPlan_Full.add(todFuel: todFuel, &fbb)
    FlightPlan_Full.add(earlyDescentFuel: earlyDescentFuel, &fbb)
    FlightPlan_Full.add(arrIceFuel: arrIceFuel, &fbb)
    FlightPlan_Full.add(holdFuel: holdFuel, &fbb)
    FlightPlan_Full.add(holdTime: holdTime, &fbb)
    FlightPlan_Full.add(appLandingFuel: appLandingFuel, &fbb)
    FlightPlan_Full.add(burnedFuel: burnedFuel, &fbb)
    FlightPlan_Full.add(landingFuel: landingFuel, &fbb)
    FlightPlan_Full.add(minDivertFuel: minDivertFuel, &fbb)
    FlightPlan_Full.add(arrAlternate1Fuel: arrAlternate1Fuel, &fbb)
    FlightPlan_Full.add(arrAlternate2Fuel: arrAlternate2Fuel, &fbb)
    FlightPlan_Full.add(contingencyFuel: contingencyFuel, &fbb)
    FlightPlan_Full.add(reserveFuel: reserveFuel, &fbb)
    FlightPlan_Full.add(depressFuel: depressFuel, &fbb)
    FlightPlan_Full.add(unusableFuel: unusableFuel, &fbb)
    FlightPlan_Full.add(unidentExtraFuel: unidentExtraFuel, &fbb)
    FlightPlan_Full.add(identExtraFuel: identExtraFuel, &fbb)
    FlightPlan_Full.add(remAlternate1Fuel: remAlternate1Fuel, &fbb)
    FlightPlan_Full.add(remAlternate2Fuel: remAlternate2Fuel, &fbb)
    FlightPlan_Full.add(enduranceTime: enduranceTime, &fbb)
    FlightPlan_Full.add(sid: sid, &fbb)
    FlightPlan_Full.add(star: star, &fbb)
    FlightPlan_Full.add(gpsRaim: gpsRaim, &fbb)
    FlightPlan_Full.add(depRunway: depRunway, &fbb)
    FlightPlan_Full.add(arrRunway: arrRunway, &fbb)
    FlightPlan_Full.add(routeString: routeString, &fbb)
    FlightPlan_Full.addVectorOf(countryCodes: countryCodes, &fbb)
    FlightPlan_Full.add(etopsRating: etopsRating, &fbb)
    FlightPlan_Full.addVectorOf(etopsAirfields: etopsAirfields, &fbb)
    FlightPlan_Full.addVectorOf(etopsAltAirfields: etopsAltAirfields, &fbb)
    FlightPlan_Full.add(etopsValWindow: etopsValWindow, &fbb)
    FlightPlan_Full.add(plannerRemark: plannerRemark, &fbb)
    FlightPlan_Full.add(cargoRemark: cargoRemark, &fbb)
    FlightPlan_Full.add(windFac1: windFac1, &fbb)
    FlightPlan_Full.add(windFac2: windFac2, &fbb)
    FlightPlan_Full.add(windFacAvg: windFacAvg, &fbb)
    FlightPlan_Full.add(avgTempDev: avgTempDev, &fbb)
    FlightPlan_Full.addVectorOf(atcAddresses: atcAddresses, &fbb)
    FlightPlan_Full.add(originator: originator, &fbb)
    FlightPlan_Full.add(numAircraft: numAircraft, &fbb)
    FlightPlan_Full.add(flightRules: flightRules, &fbb)
    FlightPlan_Full.add(flightType: flightType, &fbb)
    FlightPlan_Full.add(initialCruiseSpeed: initialCruiseSpeed, &fbb)
    FlightPlan_Full.add(initialFlightLevel: initialFlightLevel, &fbb)
    FlightPlan_Full.add(arrAlternate1: arrAlternate1, &fbb)
    FlightPlan_Full.add(arrAlternate2: arrAlternate2, &fbb)
    FlightPlan_Full.add(depAlternate: depAlternate, &fbb)
    FlightPlan_Full.add(wakeTurbCat: wakeTurbCat, &fbb)
    FlightPlan_Full.add(equipment: equipment, &fbb)
    FlightPlan_Full.add(notes: notes, &fbb)
    FlightPlan_Full.add(createdAt: createdAt, &fbb)
    FlightPlan_Full.add(createdBy: createdBy, &fbb)
    FlightPlan_Full.add(sourceDl: sourceDl, &fbb)
    FlightPlan_Full.add(source: source, &fbb)
    FlightPlan_Full.add(origin: origin, &fbb)
    FlightPlan_Full.add(origNetwork: origNetwork, &fbb)
    FlightPlan_Full.add(dataMode: dataMode, &fbb)
    FlightPlan_Full.addVectorOf(airRefuelEvents: airRefuelEvents, &fbb)
    FlightPlan_Full.addVectorOf(flightPlanMessages: flightPlanMessages, &fbb)
    FlightPlan_Full.addVectorOf(flightPlanWaypoints: flightPlanWaypoints, &fbb)
    FlightPlan_Full.addVectorOf(flightPlanPointGroups: flightPlanPointGroups, &fbb)
    return FlightPlan_Full.endFlightPlan_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.amcMissionId.p, fieldName: "amcMissionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSortie.p, fieldName: "idSortie", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idAircraft.p, fieldName: "idAircraft", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.legNum.p, fieldName: "legNum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.idDepAirfield.p, fieldName: "idDepAirfield", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.depAirfield.p, fieldName: "depAirfield", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idArrAirfield.p, fieldName: "idArrAirfield", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.arrAirfield.p, fieldName: "arrAirfield", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.externalId.p, fieldName: "externalId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.genTs.p, fieldName: "genTs", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aircraftMds.p, fieldName: "aircraftMds", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tailNumber.p, fieldName: "tailNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.callSign.p, fieldName: "callSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.wxValidStart.p, fieldName: "wxValidStart", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.wxValidEnd.p, fieldName: "wxValidEnd", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.estDepTime.p, fieldName: "estDepTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dragIndex.p, fieldName: "dragIndex", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fuelDegrade.p, fieldName: "fuelDegrade", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.opWeight.p, fieldName: "opWeight", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.msnIndex.p, fieldName: "msnIndex", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rampFuel.p, fieldName: "rampFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.taxiFuel.p, fieldName: "taxiFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.takeoffFuel.p, fieldName: "takeoffFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.climbFuel.p, fieldName: "climbFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.climbTime.p, fieldName: "climbTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.holdDownFuel.p, fieldName: "holdDownFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.tocIceFuel.p, fieldName: "tocIceFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.tocFuel.p, fieldName: "tocFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.enrouteFuel.p, fieldName: "enrouteFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.enrouteTime.p, fieldName: "enrouteTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.thunderAvoidFuel.p, fieldName: "thunderAvoidFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.todIceFuel.p, fieldName: "todIceFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.opConditionFuel.p, fieldName: "opConditionFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.todFuel.p, fieldName: "todFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.earlyDescentFuel.p, fieldName: "earlyDescentFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.arrIceFuel.p, fieldName: "arrIceFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.holdFuel.p, fieldName: "holdFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.holdTime.p, fieldName: "holdTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.appLandingFuel.p, fieldName: "appLandingFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.burnedFuel.p, fieldName: "burnedFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.landingFuel.p, fieldName: "landingFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.minDivertFuel.p, fieldName: "minDivertFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.arrAlternate1Fuel.p, fieldName: "arrAlternate1Fuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.arrAlternate2Fuel.p, fieldName: "arrAlternate2Fuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.contingencyFuel.p, fieldName: "contingencyFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.reserveFuel.p, fieldName: "reserveFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.depressFuel.p, fieldName: "depressFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.unusableFuel.p, fieldName: "unusableFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.unidentExtraFuel.p, fieldName: "unidentExtraFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.identExtraFuel.p, fieldName: "identExtraFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.remAlternate1Fuel.p, fieldName: "remAlternate1Fuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.remAlternate2Fuel.p, fieldName: "remAlternate2Fuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.enduranceTime.p, fieldName: "enduranceTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sid.p, fieldName: "sid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.star.p, fieldName: "star", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.gpsRaim.p, fieldName: "gpsRaim", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.depRunway.p, fieldName: "depRunway", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.arrRunway.p, fieldName: "arrRunway", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.routeString.p, fieldName: "routeString", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.countryCodes.p, fieldName: "countryCodes", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.etopsRating.p, fieldName: "etopsRating", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.etopsAirfields.p, fieldName: "etopsAirfields", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.etopsAltAirfields.p, fieldName: "etopsAltAirfields", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.etopsValWindow.p, fieldName: "etopsValWindow", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.plannerRemark.p, fieldName: "plannerRemark", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cargoRemark.p, fieldName: "cargoRemark", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.windFac1.p, fieldName: "windFac1", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.windFac2.p, fieldName: "windFac2", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.windFacAvg.p, fieldName: "windFacAvg", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgTempDev.p, fieldName: "avgTempDev", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.atcAddresses.p, fieldName: "atcAddresses", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.originator.p, fieldName: "originator", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numAircraft.p, fieldName: "numAircraft", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.flightRules.p, fieldName: "flightRules", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.flightType.p, fieldName: "flightType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.initialCruiseSpeed.p, fieldName: "initialCruiseSpeed", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.initialFlightLevel.p, fieldName: "initialFlightLevel", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.arrAlternate1.p, fieldName: "arrAlternate1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.arrAlternate2.p, fieldName: "arrAlternate2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.depAlternate.p, fieldName: "depAlternate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.wakeTurbCat.p, fieldName: "wakeTurbCat", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.equipment.p, fieldName: "equipment", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: FlightPlan_Full_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.airRefuelEvents.p, fieldName: "airRefuelEvents", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.flightPlanMessages.p, fieldName: "flightPlanMessages", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.flightPlanWaypoints.p, fieldName: "flightPlanWaypoints", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.flightPlanPointGroups.p, fieldName: "flightPlanPointGroups", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

