// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// The parts associated with this support item.
public struct LogisticsParts_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "LOGI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: LogisticsParts_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case partNumber = 4
    case nationalStockNumber = 6
    case measurementUnitCode = 8
    case workUnitCode = 10
    case technicalOrderText = 12
    case figureNumber = 14
    case indexNumber = 16
    case requestVerifier = 18
    case locationVerifier = 20
    case supplyDocumentNumber = 22
    case logisticsStocks = 24
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Requested or supplied part number.
  ///  Example: /// Example: MS35338-42
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var partNumber: String? { let o = _accessor.offset(VTOFFSET.partNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var partNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.partNumber.v) }
  ///  The National Stock Number of the part being requested or supplied.
  ///  Example: /// Example: 5310-00-045-3299
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var nationalStockNumber: String? { let o = _accessor.offset(VTOFFSET.nationalStockNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nationalStockNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.nationalStockNumber.v) }
  ///  Code for a unit of measurement.
  ///  Example: /// Example: EA
  ///  Constraints: Minimum length = 0, Maximum length = 2
  public var measurementUnitCode: String? { let o = _accessor.offset(VTOFFSET.measurementUnitCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var measurementUnitCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.measurementUnitCode.v) }
  ///  Work Unit Code (WUC), or for some aircraft types, the Reference Designator.
  ///  Example: /// Example: 5611UU001
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var workUnitCode: String? { let o = _accessor.offset(VTOFFSET.workUnitCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var workUnitCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.workUnitCode.v) }
  ///  Indicates the specified Technical Order manual holding the aircraft information for use in diagnosing a problem or condition.
  ///  Example: /// Example: 1C-17A-4
  ///  Constraints: Minimum length = 0, Maximum length = 15
  public var technicalOrderText: String? { let o = _accessor.offset(VTOFFSET.technicalOrderText.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var technicalOrderTextSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.technicalOrderText.v) }
  ///  Technical order manual figure number for the requested / supplied part.
  ///  Example: /// Example: 3
  ///  Constraints: Minimum length = 0, Maximum length = 7
  public var figureNumber: String? { let o = _accessor.offset(VTOFFSET.figureNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var figureNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.figureNumber.v) }
  ///  Technical order manual index number for the requested part.
  ///  Example: /// Example: 4
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var indexNumber: String? { let o = _accessor.offset(VTOFFSET.indexNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var indexNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.indexNumber.v) }
  ///  The person who validated the request for parts.
  ///  Example: /// Example: JOHN SMITH
  ///  Constraints: Minimum length = 0, Maximum length = 25
  public var requestVerifier: String? { let o = _accessor.offset(VTOFFSET.requestVerifier.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var requestVerifierSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.requestVerifier.v) }
  ///  The person who validated that the sourced location has, and can supply, the requested parts.
  ///  Example: /// Example: JANE DOE
  ///  Constraints: Minimum length = 0, Maximum length = 25
  public var locationVerifier: String? { let o = _accessor.offset(VTOFFSET.locationVerifier.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var locationVerifierSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.locationVerifier.v) }
  ///  The supply document number.
  ///  Example: /// Example: J223FU31908300
  ///  Constraints: Minimum length = 0, Maximum length = 17
  public var supplyDocumentNumber: String? { let o = _accessor.offset(VTOFFSET.supplyDocumentNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var supplyDocumentNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.supplyDocumentNumber.v) }
  ///  The supply stocks for this support item.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasLogisticsStocks: Bool { let o = _accessor.offset(VTOFFSET.logisticsStocks.v); return o == 0 ? false : true }
  public var logisticsStocksCount: Int32 { let o = _accessor.offset(VTOFFSET.logisticsStocks.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func logisticsStocks(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.logisticsStocks.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startLogisticsParts_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 11) }
  public static func add(partNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: partNumber, at: VTOFFSET.partNumber.p) }
  public static func add(nationalStockNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: nationalStockNumber, at: VTOFFSET.nationalStockNumber.p) }
  public static func add(measurementUnitCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: measurementUnitCode, at: VTOFFSET.measurementUnitCode.p) }
  public static func add(workUnitCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: workUnitCode, at: VTOFFSET.workUnitCode.p) }
  public static func add(technicalOrderText: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: technicalOrderText, at: VTOFFSET.technicalOrderText.p) }
  public static func add(figureNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: figureNumber, at: VTOFFSET.figureNumber.p) }
  public static func add(indexNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: indexNumber, at: VTOFFSET.indexNumber.p) }
  public static func add(requestVerifier: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: requestVerifier, at: VTOFFSET.requestVerifier.p) }
  public static func add(locationVerifier: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: locationVerifier, at: VTOFFSET.locationVerifier.p) }
  public static func add(supplyDocumentNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: supplyDocumentNumber, at: VTOFFSET.supplyDocumentNumber.p) }
  public static func addVectorOf(logisticsStocks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: logisticsStocks, at: VTOFFSET.logisticsStocks.p) }
  public static func endLogisticsParts_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createLogisticsParts_Full(
    _ fbb: inout FlatBufferBuilder,
    partNumberOffset partNumber: Offset = Offset(),
    nationalStockNumberOffset nationalStockNumber: Offset = Offset(),
    measurementUnitCodeOffset measurementUnitCode: Offset = Offset(),
    workUnitCodeOffset workUnitCode: Offset = Offset(),
    technicalOrderTextOffset technicalOrderText: Offset = Offset(),
    figureNumberOffset figureNumber: Offset = Offset(),
    indexNumberOffset indexNumber: Offset = Offset(),
    requestVerifierOffset requestVerifier: Offset = Offset(),
    locationVerifierOffset locationVerifier: Offset = Offset(),
    supplyDocumentNumberOffset supplyDocumentNumber: Offset = Offset(),
    logisticsStocksVectorOffset logisticsStocks: Offset = Offset()
  ) -> Offset {
    let __start = LogisticsParts_Full.startLogisticsParts_Full(&fbb)
    LogisticsParts_Full.add(partNumber: partNumber, &fbb)
    LogisticsParts_Full.add(nationalStockNumber: nationalStockNumber, &fbb)
    LogisticsParts_Full.add(measurementUnitCode: measurementUnitCode, &fbb)
    LogisticsParts_Full.add(workUnitCode: workUnitCode, &fbb)
    LogisticsParts_Full.add(technicalOrderText: technicalOrderText, &fbb)
    LogisticsParts_Full.add(figureNumber: figureNumber, &fbb)
    LogisticsParts_Full.add(indexNumber: indexNumber, &fbb)
    LogisticsParts_Full.add(requestVerifier: requestVerifier, &fbb)
    LogisticsParts_Full.add(locationVerifier: locationVerifier, &fbb)
    LogisticsParts_Full.add(supplyDocumentNumber: supplyDocumentNumber, &fbb)
    LogisticsParts_Full.addVectorOf(logisticsStocks: logisticsStocks, &fbb)
    return LogisticsParts_Full.endLogisticsParts_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.partNumber.p, fieldName: "partNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.nationalStockNumber.p, fieldName: "nationalStockNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.measurementUnitCode.p, fieldName: "measurementUnitCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.workUnitCode.p, fieldName: "workUnitCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.technicalOrderText.p, fieldName: "technicalOrderText", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.figureNumber.p, fieldName: "figureNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.indexNumber.p, fieldName: "indexNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.requestVerifier.p, fieldName: "requestVerifier", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.locationVerifier.p, fieldName: "locationVerifier", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.supplyDocumentNumber.p, fieldName: "supplyDocumentNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.logisticsStocks.p, fieldName: "logisticsStocks", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

