// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum RFEmitterDetails_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: RFEmitterDetails_Ingest_dataMode_Enum { return .exercise }
  public static var min: RFEmitterDetails_Ingest_dataMode_Enum { return .real }
}


///  /// Details for a particular RF Emitter, collected by a particular source. An RF Emitter may have multiple details records from various sources.
public struct RFEmitterDetails_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "RFEM" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: RFEmitterDetails_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case idRfemitter = 6
    case classificationMarking = 8
    case designator = 10
    case altName = 12
    case family = 14
    case productionFacilityName = 16
    case alternateFacilityName = 18
    case manufacturerOrgId = 20
    case productionFacilityLocationId = 22
    case systemSensitivityStart = 24
    case systemSensitivityEnd = 26
    case receiverType = 28
    case receiverSensitivity = 30
    case receiverBandwidth = 32
    case transmitterFrequency = 34
    case transmitterBandwidth = 36
    case transmitPower = 38
    case barrageNoiseBandwidth = 40
    case dopplerNoise = 42
    case drfmInstantaneousBandwidth = 44
    case numChannels = 46
    case numBits = 48
    case antennaSize = 50
    case antennaDiameter = 52
    case notes = 54
    case secondaryNotes = 56
    case description = 58
    case urls = 60
    case source = 62
    case origin = 64
    case origNetwork = 66
    case dataMode = 68
    case createdAt = 70
    case createdBy = 72
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: RFEMITTERDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Unique identifier of the parent RF Emitter.
  ///  Example: /// Example: RFEMITTER-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idRfemitter: String? { let o = _accessor.offset(VTOFFSET.idRfemitter.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idRfemitterSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idRfemitter.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Designator of this RF Emitter.
  ///  Example: /// Example: DESIGNATOR
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var designator: String? { let o = _accessor.offset(VTOFFSET.designator.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var designatorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.designator.v) }
  ///  Optional alternate name or alias for this RF Emitter.
  ///  Example: /// Example: ALTERNATE_NAME
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var altName: String? { let o = _accessor.offset(VTOFFSET.altName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altName.v) }
  ///  Family of this RF Emitter type.
  ///  Example: /// Example: FAMILY
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var family: String? { let o = _accessor.offset(VTOFFSET.family.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var familySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.family.v) }
  ///  Name of the production facility for this RF Emitter.
  ///  Example: /// Example: PRODUCTION_FACILITY
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var productionFacilityName: String? { let o = _accessor.offset(VTOFFSET.productionFacilityName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var productionFacilityNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.productionFacilityName.v) }
  ///  Alternate facility name for this RF Emitter.
  ///  Example: /// Example: ALTERNATE_FACILITY_NAME
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var alternateFacilityName: String? { let o = _accessor.offset(VTOFFSET.alternateFacilityName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var alternateFacilityNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.alternateFacilityName.v) }
  ///  Unique identifier of the organization which manufactures this RF Emitter.
  ///  Example: /// Example: MANUFACTURERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var manufacturerOrgId: String? { let o = _accessor.offset(VTOFFSET.manufacturerOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var manufacturerOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.manufacturerOrgId.v) }
  ///  Unique identifier of the location of the production facility for this RF Emitter.
  ///  Example: /// Example: PRODUCTIONFACILITYLOCATION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var productionFacilityLocationId: String? { let o = _accessor.offset(VTOFFSET.productionFacilityLocationId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var productionFacilityLocationIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.productionFacilityLocationId.v) }
  ///  Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. Start sensitivity range, in dBm.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  public var systemSensitivityStart: Double { let o = _accessor.offset(VTOFFSET.systemSensitivityStart.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. End sensitivity range, in dBm.
  ///  Example: /// Example: 150.23
  ///  Constraints: No constraints specified.
  public var systemSensitivityEnd: Double { let o = _accessor.offset(VTOFFSET.systemSensitivityEnd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Type or name of receiver.
  ///  Example: /// Example: RECEIVER_TYPE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var receiverType: String? { let o = _accessor.offset(VTOFFSET.receiverType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var receiverTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.receiverType.v) }
  ///  Receiver sensitivity in dBm.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var receiverSensitivity: Double { let o = _accessor.offset(VTOFFSET.receiverSensitivity.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Receiver bandwidth in Mhz.
  ///  Example: /// Example: 15.23
  ///  Constraints: No constraints specified.
  public var receiverBandwidth: Double { let o = _accessor.offset(VTOFFSET.receiverBandwidth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Transmitter frequency in Mhz.
  ///  Example: /// Example: 105.9
  ///  Constraints: No constraints specified.
  public var transmitterFrequency: Double { let o = _accessor.offset(VTOFFSET.transmitterFrequency.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Transmitter bandwidth in Mhz.
  ///  Example: /// Example: 0.125
  ///  Constraints: No constraints specified.
  public var transmitterBandwidth: Double { let o = _accessor.offset(VTOFFSET.transmitterBandwidth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Transmit power in Watts.
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  public var transmitPower: Double { let o = _accessor.offset(VTOFFSET.transmitPower.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Barrage noise bandwidth in Mhz.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  public var barrageNoiseBandwidth: Double { let o = _accessor.offset(VTOFFSET.barrageNoiseBandwidth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Doppler noise value in Mhz.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var dopplerNoise: Double { let o = _accessor.offset(VTOFFSET.dopplerNoise.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Digital Form Radio Memory instantaneous bandwidth in Mhz.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  public var drfmInstantaneousBandwidth: Double { let o = _accessor.offset(VTOFFSET.drfmInstantaneousBandwidth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Number of channels.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var numChannels: Int32 { let o = _accessor.offset(VTOFFSET.numChannels.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of bits.
  ///  Example: /// Example: 256
  ///  Constraints: No constraints specified.
  public var numBits: Int32 { let o = _accessor.offset(VTOFFSET.numBits.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
  ///  Example: /// Example: [1.1, 2.2]
  ///  Constraints: No constraints specified.
  public var hasAntennaSize: Bool { let o = _accessor.offset(VTOFFSET.antennaSize.v); return o == 0 ? false : true }
  public var antennaSizeCount: Int32 { let o = _accessor.offset(VTOFFSET.antennaSize.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func antennaSize(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.antennaSize.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  For parabolic/dish antennas, the diameter of the antenna in meters.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  public var antennaDiameter: Double { let o = _accessor.offset(VTOFFSET.antennaDiameter.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Notes on the RF Emitter.
  ///  Example: /// Example: NOTES
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  ///  Secondary notes on the RF Emitter.
  ///  Example: /// Example: MORE_NOTES
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  public var secondaryNotes: String? { let o = _accessor.offset(VTOFFSET.secondaryNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var secondaryNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.secondaryNotes.v) }
  ///  Detailed description of the RF Emitter.
  ///  Example: /// Example: DESCRIPTION
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  public var description: String? { let o = _accessor.offset(VTOFFSET.description.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.description.v) }
  ///  Array of URLs containing additional information on this RF Emitter.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  public var hasUrls: Bool { let o = _accessor.offset(VTOFFSET.urls.v); return o == 0 ? false : true }
  public var urlsCount: Int32 { let o = _accessor.offset(VTOFFSET.urls.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func urls(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.urls.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: RFEmitterDetails_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : RFEmitterDetails_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  public static func startRFEmitterDetails_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 35) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(idRfemitter: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idRfemitter, at: VTOFFSET.idRfemitter.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(designator: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: designator, at: VTOFFSET.designator.p) }
  public static func add(altName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altName, at: VTOFFSET.altName.p) }
  public static func add(family: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: family, at: VTOFFSET.family.p) }
  public static func add(productionFacilityName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: productionFacilityName, at: VTOFFSET.productionFacilityName.p) }
  public static func add(alternateFacilityName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: alternateFacilityName, at: VTOFFSET.alternateFacilityName.p) }
  public static func add(manufacturerOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: manufacturerOrgId, at: VTOFFSET.manufacturerOrgId.p) }
  public static func add(productionFacilityLocationId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: productionFacilityLocationId, at: VTOFFSET.productionFacilityLocationId.p) }
  public static func add(systemSensitivityStart: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: systemSensitivityStart, def: 0.0, at: VTOFFSET.systemSensitivityStart.p) }
  public static func add(systemSensitivityEnd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: systemSensitivityEnd, def: 0.0, at: VTOFFSET.systemSensitivityEnd.p) }
  public static func add(receiverType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: receiverType, at: VTOFFSET.receiverType.p) }
  public static func add(receiverSensitivity: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: receiverSensitivity, def: 0.0, at: VTOFFSET.receiverSensitivity.p) }
  public static func add(receiverBandwidth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: receiverBandwidth, def: 0.0, at: VTOFFSET.receiverBandwidth.p) }
  public static func add(transmitterFrequency: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: transmitterFrequency, def: 0.0, at: VTOFFSET.transmitterFrequency.p) }
  public static func add(transmitterBandwidth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: transmitterBandwidth, def: 0.0, at: VTOFFSET.transmitterBandwidth.p) }
  public static func add(transmitPower: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: transmitPower, def: 0.0, at: VTOFFSET.transmitPower.p) }
  public static func add(barrageNoiseBandwidth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: barrageNoiseBandwidth, def: 0.0, at: VTOFFSET.barrageNoiseBandwidth.p) }
  public static func add(dopplerNoise: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dopplerNoise, def: 0.0, at: VTOFFSET.dopplerNoise.p) }
  public static func add(drfmInstantaneousBandwidth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: drfmInstantaneousBandwidth, def: 0.0, at: VTOFFSET.drfmInstantaneousBandwidth.p) }
  public static func add(numChannels: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numChannels, def: 0, at: VTOFFSET.numChannels.p) }
  public static func add(numBits: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numBits, def: 0, at: VTOFFSET.numBits.p) }
  public static func addVectorOf(antennaSize: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: antennaSize, at: VTOFFSET.antennaSize.p) }
  public static func add(antennaDiameter: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: antennaDiameter, def: 0.0, at: VTOFFSET.antennaDiameter.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func add(secondaryNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: secondaryNotes, at: VTOFFSET.secondaryNotes.p) }
  public static func add(description: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: description, at: VTOFFSET.description.p) }
  public static func addVectorOf(urls: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: urls, at: VTOFFSET.urls.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: RFEmitterDetails_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func endRFEmitterDetails_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createRFEmitterDetails_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    idRfemitterOffset idRfemitter: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    designatorOffset designator: Offset = Offset(),
    altNameOffset altName: Offset = Offset(),
    familyOffset family: Offset = Offset(),
    productionFacilityNameOffset productionFacilityName: Offset = Offset(),
    alternateFacilityNameOffset alternateFacilityName: Offset = Offset(),
    manufacturerOrgIdOffset manufacturerOrgId: Offset = Offset(),
    productionFacilityLocationIdOffset productionFacilityLocationId: Offset = Offset(),
    systemSensitivityStart: Double = 0.0,
    systemSensitivityEnd: Double = 0.0,
    receiverTypeOffset receiverType: Offset = Offset(),
    receiverSensitivity: Double = 0.0,
    receiverBandwidth: Double = 0.0,
    transmitterFrequency: Double = 0.0,
    transmitterBandwidth: Double = 0.0,
    transmitPower: Double = 0.0,
    barrageNoiseBandwidth: Double = 0.0,
    dopplerNoise: Double = 0.0,
    drfmInstantaneousBandwidth: Double = 0.0,
    numChannels: Int32 = 0,
    numBits: Int32 = 0,
    antennaSizeVectorOffset antennaSize: Offset = Offset(),
    antennaDiameter: Double = 0.0,
    notesOffset notes: Offset = Offset(),
    secondaryNotesOffset secondaryNotes: Offset = Offset(),
    descriptionOffset description: Offset = Offset(),
    urlsVectorOffset urls: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: RFEmitterDetails_Ingest_dataMode_Enum = .real,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset()
  ) -> Offset {
    let __start = RFEmitterDetails_Ingest.startRFEmitterDetails_Ingest(&fbb)
    RFEmitterDetails_Ingest.add(id: id, &fbb)
    RFEmitterDetails_Ingest.add(idRfemitter: idRfemitter, &fbb)
    RFEmitterDetails_Ingest.add(classificationMarking: classificationMarking, &fbb)
    RFEmitterDetails_Ingest.add(designator: designator, &fbb)
    RFEmitterDetails_Ingest.add(altName: altName, &fbb)
    RFEmitterDetails_Ingest.add(family: family, &fbb)
    RFEmitterDetails_Ingest.add(productionFacilityName: productionFacilityName, &fbb)
    RFEmitterDetails_Ingest.add(alternateFacilityName: alternateFacilityName, &fbb)
    RFEmitterDetails_Ingest.add(manufacturerOrgId: manufacturerOrgId, &fbb)
    RFEmitterDetails_Ingest.add(productionFacilityLocationId: productionFacilityLocationId, &fbb)
    RFEmitterDetails_Ingest.add(systemSensitivityStart: systemSensitivityStart, &fbb)
    RFEmitterDetails_Ingest.add(systemSensitivityEnd: systemSensitivityEnd, &fbb)
    RFEmitterDetails_Ingest.add(receiverType: receiverType, &fbb)
    RFEmitterDetails_Ingest.add(receiverSensitivity: receiverSensitivity, &fbb)
    RFEmitterDetails_Ingest.add(receiverBandwidth: receiverBandwidth, &fbb)
    RFEmitterDetails_Ingest.add(transmitterFrequency: transmitterFrequency, &fbb)
    RFEmitterDetails_Ingest.add(transmitterBandwidth: transmitterBandwidth, &fbb)
    RFEmitterDetails_Ingest.add(transmitPower: transmitPower, &fbb)
    RFEmitterDetails_Ingest.add(barrageNoiseBandwidth: barrageNoiseBandwidth, &fbb)
    RFEmitterDetails_Ingest.add(dopplerNoise: dopplerNoise, &fbb)
    RFEmitterDetails_Ingest.add(drfmInstantaneousBandwidth: drfmInstantaneousBandwidth, &fbb)
    RFEmitterDetails_Ingest.add(numChannels: numChannels, &fbb)
    RFEmitterDetails_Ingest.add(numBits: numBits, &fbb)
    RFEmitterDetails_Ingest.addVectorOf(antennaSize: antennaSize, &fbb)
    RFEmitterDetails_Ingest.add(antennaDiameter: antennaDiameter, &fbb)
    RFEmitterDetails_Ingest.add(notes: notes, &fbb)
    RFEmitterDetails_Ingest.add(secondaryNotes: secondaryNotes, &fbb)
    RFEmitterDetails_Ingest.add(description: description, &fbb)
    RFEmitterDetails_Ingest.addVectorOf(urls: urls, &fbb)
    RFEmitterDetails_Ingest.add(source: source, &fbb)
    RFEmitterDetails_Ingest.add(origin: origin, &fbb)
    RFEmitterDetails_Ingest.add(origNetwork: origNetwork, &fbb)
    RFEmitterDetails_Ingest.add(dataMode: dataMode, &fbb)
    RFEmitterDetails_Ingest.add(createdAt: createdAt, &fbb)
    RFEmitterDetails_Ingest.add(createdBy: createdBy, &fbb)
    return RFEmitterDetails_Ingest.endRFEmitterDetails_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idRfemitter.p, fieldName: "idRfemitter", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.designator.p, fieldName: "designator", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altName.p, fieldName: "altName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.family.p, fieldName: "family", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.productionFacilityName.p, fieldName: "productionFacilityName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.alternateFacilityName.p, fieldName: "alternateFacilityName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.manufacturerOrgId.p, fieldName: "manufacturerOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.productionFacilityLocationId.p, fieldName: "productionFacilityLocationId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.systemSensitivityStart.p, fieldName: "systemSensitivityStart", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.systemSensitivityEnd.p, fieldName: "systemSensitivityEnd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.receiverType.p, fieldName: "receiverType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.receiverSensitivity.p, fieldName: "receiverSensitivity", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.receiverBandwidth.p, fieldName: "receiverBandwidth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.transmitterFrequency.p, fieldName: "transmitterFrequency", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.transmitterBandwidth.p, fieldName: "transmitterBandwidth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.transmitPower.p, fieldName: "transmitPower", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.barrageNoiseBandwidth.p, fieldName: "barrageNoiseBandwidth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dopplerNoise.p, fieldName: "dopplerNoise", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.drfmInstantaneousBandwidth.p, fieldName: "drfmInstantaneousBandwidth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.numChannels.p, fieldName: "numChannels", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numBits.p, fieldName: "numBits", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.antennaSize.p, fieldName: "antennaSize", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.antennaDiameter.p, fieldName: "antennaDiameter", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.secondaryNotes.p, fieldName: "secondaryNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.description.p, fieldName: "description", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.urls.p, fieldName: "urls", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: RFEmitterDetails_Ingest_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

