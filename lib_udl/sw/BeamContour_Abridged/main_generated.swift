// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum BeamContour_Abridged_type_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case boresight = 0
  ///  No description available.
  case contour = 1
  ///  No description available.
  case svcArea = 2

  public static var max: BeamContour_Abridged_type_Enum { return .svcArea }
  public static var min: BeamContour_Abridged_type_Enum { return .boresight }
}


public enum BeamContour_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: BeamContour_Abridged_dataMode_Enum { return .exercise }
  public static var min: BeamContour_Abridged_dataMode_Enum { return .real }
}


///  /// Describes the beam contour associated with a beam entity. Beam contours are the geographic representation of the relative gain levels of beam power off of the maximum gain boresight points.
public struct BeamContour_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "BEAM" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: BeamContour_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idBeam = 8
    case type = 10
    case contourIdx = 12
    case gain = 14
    case regionName = 16
    case geographyText = 18
    case geographyJson = 20
    case geographyType = 22
    case geographyNdims = 24
    case geographySrid = 26
    case createdAt = 28
    case createdBy = 30
    case source = 32
    case origin = 34
    case origNetwork = 36
    case dataMode = 38
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: BEAMCONTOUR-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  ID of the beam.
  ///  Example: /// Example: REF-BEAM-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idBeam: String? { let o = _accessor.offset(VTOFFSET.idBeam.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idBeamSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idBeam.v) }
  ///  The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).  Boresight refers to the point of maximum/peak gain, and should not be confused with the 'aim point' of the related beam.  Gain contours are regions of  coverage referenced to the relative gain of the related beam.  Service Areas are composed of one or more service regions, with each region being either discrete point(s) or a continuous contour.
  ///  Example: /// Example: BORESIGHT
  ///  Constraints: Minimum length = 1, Maximum length = 16
  public var type: BeamContour_Abridged_type_Enum { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? .boresight : BeamContour_Abridged_type_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .boresight }
  ///  The index number of this contour. The value is required if type = CONTOUR.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var contourIdx: Int32 { let o = _accessor.offset(VTOFFSET.contourIdx.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The relative gain level in dB associated with this boresight or contour.  Gain does not apply to service area records. The value is required if type = BORESIGHT or CONTOUR.
  ///  Example: /// Example: 17.1
  ///  Constraints: No constraints specified.
  public var gain: Double { let o = _accessor.offset(VTOFFSET.gain.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The region name within the service area.
  ///  Example: /// Example: Example region name
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var regionName: String? { let o = _accessor.offset(VTOFFSET.regionName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var regionNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.regionName.v) }
  ///  Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  public var geographyText: String? { let o = _accessor.offset(VTOFFSET.geographyText.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var geographyTextSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.geographyText.v) }
  ///  Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  ///  Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  ///  Constraints: No constraints specified.
  public var geographyJson: String? { let o = _accessor.offset(VTOFFSET.geographyJson.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var geographyJsonSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.geographyJson.v) }
  ///  Type of region as projected.
  ///  Example: /// Example: ST_Polygon
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var geographyType: String? { let o = _accessor.offset(VTOFFSET.geographyType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var geographyTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.geographyType.v) }
  ///  Number of dimensions of the geometry depicted by region.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var geographyNdims: Int32 { let o = _accessor.offset(VTOFFSET.geographyNdims.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Geographical spatial_ref_sys for region.
  ///  Example: /// Example: 4326
  ///  Constraints: No constraints specified.
  public var geographySrid: Int32 { let o = _accessor.offset(VTOFFSET.geographySrid.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: BeamContour_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : BeamContour_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startBeamContour_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 18) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idBeam: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idBeam, at: VTOFFSET.idBeam.p) }
  public static func add(type: BeamContour_Abridged_type_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: type.rawValue, def: 0, at: VTOFFSET.type.p) }
  public static func add(contourIdx: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: contourIdx, def: 0, at: VTOFFSET.contourIdx.p) }
  public static func add(gain: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gain, def: 0.0, at: VTOFFSET.gain.p) }
  public static func add(regionName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: regionName, at: VTOFFSET.regionName.p) }
  public static func add(geographyText: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geographyText, at: VTOFFSET.geographyText.p) }
  public static func add(geographyJson: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geographyJson, at: VTOFFSET.geographyJson.p) }
  public static func add(geographyType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geographyType, at: VTOFFSET.geographyType.p) }
  public static func add(geographyNdims: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: geographyNdims, def: 0, at: VTOFFSET.geographyNdims.p) }
  public static func add(geographySrid: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: geographySrid, def: 0, at: VTOFFSET.geographySrid.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: BeamContour_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endBeamContour_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createBeamContour_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idBeamOffset idBeam: Offset = Offset(),
    type: BeamContour_Abridged_type_Enum = .boresight,
    contourIdx: Int32 = 0,
    gain: Double = 0.0,
    regionNameOffset regionName: Offset = Offset(),
    geographyTextOffset geographyText: Offset = Offset(),
    geographyJsonOffset geographyJson: Offset = Offset(),
    geographyTypeOffset geographyType: Offset = Offset(),
    geographyNdims: Int32 = 0,
    geographySrid: Int32 = 0,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: BeamContour_Abridged_dataMode_Enum = .real
  ) -> Offset {
    let __start = BeamContour_Abridged.startBeamContour_Abridged(&fbb)
    BeamContour_Abridged.add(id: id, &fbb)
    BeamContour_Abridged.add(classificationMarking: classificationMarking, &fbb)
    BeamContour_Abridged.add(idBeam: idBeam, &fbb)
    BeamContour_Abridged.add(type: type, &fbb)
    BeamContour_Abridged.add(contourIdx: contourIdx, &fbb)
    BeamContour_Abridged.add(gain: gain, &fbb)
    BeamContour_Abridged.add(regionName: regionName, &fbb)
    BeamContour_Abridged.add(geographyText: geographyText, &fbb)
    BeamContour_Abridged.add(geographyJson: geographyJson, &fbb)
    BeamContour_Abridged.add(geographyType: geographyType, &fbb)
    BeamContour_Abridged.add(geographyNdims: geographyNdims, &fbb)
    BeamContour_Abridged.add(geographySrid: geographySrid, &fbb)
    BeamContour_Abridged.add(createdAt: createdAt, &fbb)
    BeamContour_Abridged.add(createdBy: createdBy, &fbb)
    BeamContour_Abridged.add(source: source, &fbb)
    BeamContour_Abridged.add(origin: origin, &fbb)
    BeamContour_Abridged.add(origNetwork: origNetwork, &fbb)
    BeamContour_Abridged.add(dataMode: dataMode, &fbb)
    return BeamContour_Abridged.endBeamContour_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idBeam.p, fieldName: "idBeam", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: BeamContour_Abridged_type_Enum.self)
    try _v.visit(field: VTOFFSET.contourIdx.p, fieldName: "contourIdx", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.gain.p, fieldName: "gain", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.regionName.p, fieldName: "regionName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.geographyText.p, fieldName: "geographyText", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.geographyJson.p, fieldName: "geographyJson", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.geographyType.p, fieldName: "geographyType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.geographyNdims.p, fieldName: "geographyNdims", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.geographySrid.p, fieldName: "geographySrid", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: BeamContour_Abridged_dataMode_Enum.self)
    _v.finish()
  }
}

