// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// The specialties required to implement this support item.
public struct LogisticsSpecialties_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "LOGI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: LogisticsSpecialties_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case specialty = 4
    case skillLevel = 6
    case firstName = 8
    case lastName = 10
    case rankCode = 12
    case last4Ssn = 14
    case roleTypeCode = 16
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Indicates where the repairs will be performed, or which shop specialty has been assigned responsibility for correcting the discrepancy. Shop specialties are normally listed in abbreviated format.
  ///  Example: /// Example: ELEN
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var specialty: String? { let o = _accessor.offset(VTOFFSET.specialty.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var specialtySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.specialty.v) }
  ///  Skill level of the mission response team member.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var skillLevel: Int32 { let o = _accessor.offset(VTOFFSET.skillLevel.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The first name of the specialist.
  ///  Example: /// Example: JOHN
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var firstName: String? { let o = _accessor.offset(VTOFFSET.firstName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var firstNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.firstName.v) }
  ///  The last name of the specialist.
  ///  Example: /// Example: SMITH
  ///  Constraints: Minimum length = 0, Maximum length = 30
  public var lastName: String? { let o = _accessor.offset(VTOFFSET.lastName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastName.v) }
  ///  Military service rank designation.
  ///  Example: /// Example: MAJ
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var rankCode: String? { let o = _accessor.offset(VTOFFSET.rankCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rankCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rankCode.v) }
  ///  The last four digits of the specialist's social security number.
  ///  Example: /// Example: 9999
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var last4Ssn: String? { let o = _accessor.offset(VTOFFSET.last4Ssn.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var last4SsnSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.last4Ssn.v) }
  ///  Type code that determines role of the mission response team member. TC - Team Chief, TM - Team Member.
  ///  Example: /// Example: TC
  ///  Constraints: Minimum length = 0, Maximum length = 2
  public var roleTypeCode: String? { let o = _accessor.offset(VTOFFSET.roleTypeCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var roleTypeCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.roleTypeCode.v) }
  public static func startLogisticsSpecialties_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 7) }
  public static func add(specialty: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: specialty, at: VTOFFSET.specialty.p) }
  public static func add(skillLevel: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: skillLevel, def: 0, at: VTOFFSET.skillLevel.p) }
  public static func add(firstName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: firstName, at: VTOFFSET.firstName.p) }
  public static func add(lastName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastName, at: VTOFFSET.lastName.p) }
  public static func add(rankCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rankCode, at: VTOFFSET.rankCode.p) }
  public static func add(last4Ssn: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: last4Ssn, at: VTOFFSET.last4Ssn.p) }
  public static func add(roleTypeCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: roleTypeCode, at: VTOFFSET.roleTypeCode.p) }
  public static func endLogisticsSpecialties_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createLogisticsSpecialties_Ingest(
    _ fbb: inout FlatBufferBuilder,
    specialtyOffset specialty: Offset = Offset(),
    skillLevel: Int32 = 0,
    firstNameOffset firstName: Offset = Offset(),
    lastNameOffset lastName: Offset = Offset(),
    rankCodeOffset rankCode: Offset = Offset(),
    last4SsnOffset last4Ssn: Offset = Offset(),
    roleTypeCodeOffset roleTypeCode: Offset = Offset()
  ) -> Offset {
    let __start = LogisticsSpecialties_Ingest.startLogisticsSpecialties_Ingest(&fbb)
    LogisticsSpecialties_Ingest.add(specialty: specialty, &fbb)
    LogisticsSpecialties_Ingest.add(skillLevel: skillLevel, &fbb)
    LogisticsSpecialties_Ingest.add(firstName: firstName, &fbb)
    LogisticsSpecialties_Ingest.add(lastName: lastName, &fbb)
    LogisticsSpecialties_Ingest.add(rankCode: rankCode, &fbb)
    LogisticsSpecialties_Ingest.add(last4Ssn: last4Ssn, &fbb)
    LogisticsSpecialties_Ingest.add(roleTypeCode: roleTypeCode, &fbb)
    return LogisticsSpecialties_Ingest.endLogisticsSpecialties_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.specialty.p, fieldName: "specialty", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.skillLevel.p, fieldName: "skillLevel", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.firstName.p, fieldName: "firstName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lastName.p, fieldName: "lastName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rankCode.p, fieldName: "rankCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.last4Ssn.p, fieldName: "last4Ssn", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.roleTypeCode.p, fieldName: "roleTypeCode", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

