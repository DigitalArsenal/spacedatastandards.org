// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Support items associated with this LogisticsSupport record.
public struct LogisticsSupportItems_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "LOGI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: LogisticsSupportItems_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case recoveryRequestTypeCode = 4
    case requestNumber = 6
    case quantity = 8
    case description = 10
    case shipmentUnitId = 12
    case redeployShipmentUnitId = 14
    case jobControlNumber = 16
    case sourceIcao = 18
    case deployPlanNumber = 20
    case redeployPlanNumber = 22
    case cannibalized = 24
    case siPoc = 26
    case readyTime = 28
    case receivedTime = 30
    case resupportFlag = 32
    case itemLastChangedDate = 34
    case logisticsParts = 36
    case logisticsSpecialties = 38
    case logisticsRemarks = 40
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The type of recovery request needed. Contact the source provider for details.
  ///  Example: /// Example: E
  ///  Constraints: Minimum length = 1, Maximum length = 1
  public var recoveryRequestTypeCode: String? { let o = _accessor.offset(VTOFFSET.recoveryRequestTypeCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var recoveryRequestTypeCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.recoveryRequestTypeCode.v) }
  ///  The request or record number for this item type (Equipent, Part, or MRT).
  ///  Example: /// Example: 89208
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var requestNumber: String? { let o = _accessor.offset(VTOFFSET.requestNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var requestNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.requestNumber.v) }
  ///  Military aircraft discrepancy logistics requisition ordered quantity. The quantity of equipment ordered that is required to fix the aircraft.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var quantity: Int32 { let o = _accessor.offset(VTOFFSET.quantity.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The technical order name of the part ordered.
  ///  Example: /// Example: HOIST ADAPTER KIT
  ///  Constraints: Minimum length = 0, Maximum length = 150
  public var description: String? { let o = _accessor.offset(VTOFFSET.description.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.description.v) }
  ///  Shipment Unit Identifier is the Transportation Control Number (TCN) for shipping that piece of equipment being requested.
  ///  Example: /// Example: FB44273196X501XXX
  ///  Constraints: Minimum length = 0, Maximum length = 17
  public var shipmentUnitId: String? { let o = _accessor.offset(VTOFFSET.shipmentUnitId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var shipmentUnitIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.shipmentUnitId.v) }
  ///  This is the Redeploy (return) Transportation Control Number/Tracking Reference Number for the selected item.
  ///  Example: /// Example: X400LA31949108
  ///  Constraints: Minimum length = 0, Maximum length = 17
  public var redeployShipmentUnitId: String? { let o = _accessor.offset(VTOFFSET.redeployShipmentUnitId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var redeployShipmentUnitIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.redeployShipmentUnitId.v) }
  ///  A number assigned by Job Control to monitor and record maintenance actions required to correct the associated aircraft maintenance discrepancy.  It is seven, nine or twelve characters, depending on the base-specific numbering scheme.  If seven characters: characters 1-3 are Julian date, 4-7 are sequence numbers.  If nine characters: characters 1-2 are last two digits of the year, characters 3-5 are Julian date, 6-9 are sequence numbers.  If twelve characters: characters 1-2 are last two digits of the year, 3-5 are Julian date, 6-9 are sequence numbers, and 10-12 are a three-digit supplemental number.
  ///  Example: /// Example: 231942400
  ///  Constraints: Minimum length = 0, Maximum length = 12
  public var jobControlNumber: String? { let o = _accessor.offset(VTOFFSET.jobControlNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var jobControlNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.jobControlNumber.v) }
  ///  The code that represents the International Civil Aviation Organization (ICAO) designations of an airport.
  ///  Example: /// Example: PHIK
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var sourceIcao: String? { let o = _accessor.offset(VTOFFSET.sourceIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceIcao.v) }
  ///  System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
  ///  Example: /// Example: T89003
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var deployPlanNumber: String? { let o = _accessor.offset(VTOFFSET.deployPlanNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var deployPlanNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.deployPlanNumber.v) }
  ///  System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
  ///  Example: /// Example: T89003
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var redeployPlanNumber: String? { let o = _accessor.offset(VTOFFSET.redeployPlanNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var redeployPlanNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.redeployPlanNumber.v) }
  ///  This element indicates whether or not the supplied item is contained within another item.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var cannibalized: Bool { let o = _accessor.offset(VTOFFSET.cannibalized.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The point of contact is a free text field to add information about the individual(s) with knowledge of the referenced requested or supplied item(s). The default value for this field is the last name, first name, and middle initial of the operator who created the records and/or generated the transaction.
  ///  Example: /// Example: SMITH, JOHN J
  ///  Constraints: Minimum length = 0, Maximum length = 68
  public var siPoc: String? { let o = _accessor.offset(VTOFFSET.siPoc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var siPocSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.siPoc.v) }
  ///  The time the item is ready, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-17T19:04:00.123Z
  ///  Constraints: No constraints specified.
  public var readyTime: String? { let o = _accessor.offset(VTOFFSET.readyTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var readyTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.readyTime.v) }
  ///  The time the item is received, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-17T19:04:00.123Z
  ///  Constraints: No constraints specified.
  public var receivedTime: String? { let o = _accessor.offset(VTOFFSET.receivedTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var receivedTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.receivedTime.v) }
  ///  This element indicates if the supplied item is characterized as additional support.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var resupportFlag: Bool { let o = _accessor.offset(VTOFFSET.resupportFlag.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The last time this supported item was updated, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-17T19:04:00.123Z
  ///  Constraints: No constraints specified.
  public var itemLastChangedDate: String? { let o = _accessor.offset(VTOFFSET.itemLastChangedDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var itemLastChangedDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.itemLastChangedDate.v) }
  ///  The parts associated with this support item.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasLogisticsParts: Bool { let o = _accessor.offset(VTOFFSET.logisticsParts.v); return o == 0 ? false : true }
  public var logisticsPartsCount: Int32 { let o = _accessor.offset(VTOFFSET.logisticsParts.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func logisticsParts(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.logisticsParts.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The specialties required to implement this support item.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasLogisticsSpecialties: Bool { let o = _accessor.offset(VTOFFSET.logisticsSpecialties.v); return o == 0 ? false : true }
  public var logisticsSpecialtiesCount: Int32 { let o = _accessor.offset(VTOFFSET.logisticsSpecialties.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func logisticsSpecialties(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.logisticsSpecialties.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Remarks associated with this support item.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasLogisticsRemarks: Bool { let o = _accessor.offset(VTOFFSET.logisticsRemarks.v); return o == 0 ? false : true }
  public var logisticsRemarksCount: Int32 { let o = _accessor.offset(VTOFFSET.logisticsRemarks.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func logisticsRemarks(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.logisticsRemarks.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startLogisticsSupportItems_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 19) }
  public static func add(recoveryRequestTypeCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: recoveryRequestTypeCode, at: VTOFFSET.recoveryRequestTypeCode.p) }
  public static func add(requestNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: requestNumber, at: VTOFFSET.requestNumber.p) }
  public static func add(quantity: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: quantity, def: 0, at: VTOFFSET.quantity.p) }
  public static func add(description: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: description, at: VTOFFSET.description.p) }
  public static func add(shipmentUnitId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shipmentUnitId, at: VTOFFSET.shipmentUnitId.p) }
  public static func add(redeployShipmentUnitId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: redeployShipmentUnitId, at: VTOFFSET.redeployShipmentUnitId.p) }
  public static func add(jobControlNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: jobControlNumber, at: VTOFFSET.jobControlNumber.p) }
  public static func add(sourceIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceIcao, at: VTOFFSET.sourceIcao.p) }
  public static func add(deployPlanNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: deployPlanNumber, at: VTOFFSET.deployPlanNumber.p) }
  public static func add(redeployPlanNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: redeployPlanNumber, at: VTOFFSET.redeployPlanNumber.p) }
  public static func add(cannibalized: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cannibalized, def: false,
   at: VTOFFSET.cannibalized.p) }
  public static func add(siPoc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: siPoc, at: VTOFFSET.siPoc.p) }
  public static func add(readyTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: readyTime, at: VTOFFSET.readyTime.p) }
  public static func add(receivedTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: receivedTime, at: VTOFFSET.receivedTime.p) }
  public static func add(resupportFlag: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: resupportFlag, def: false,
   at: VTOFFSET.resupportFlag.p) }
  public static func add(itemLastChangedDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: itemLastChangedDate, at: VTOFFSET.itemLastChangedDate.p) }
  public static func addVectorOf(logisticsParts: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: logisticsParts, at: VTOFFSET.logisticsParts.p) }
  public static func addVectorOf(logisticsSpecialties: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: logisticsSpecialties, at: VTOFFSET.logisticsSpecialties.p) }
  public static func addVectorOf(logisticsRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: logisticsRemarks, at: VTOFFSET.logisticsRemarks.p) }
  public static func endLogisticsSupportItems_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createLogisticsSupportItems_Full(
    _ fbb: inout FlatBufferBuilder,
    recoveryRequestTypeCodeOffset recoveryRequestTypeCode: Offset = Offset(),
    requestNumberOffset requestNumber: Offset = Offset(),
    quantity: Int32 = 0,
    descriptionOffset description: Offset = Offset(),
    shipmentUnitIdOffset shipmentUnitId: Offset = Offset(),
    redeployShipmentUnitIdOffset redeployShipmentUnitId: Offset = Offset(),
    jobControlNumberOffset jobControlNumber: Offset = Offset(),
    sourceIcaoOffset sourceIcao: Offset = Offset(),
    deployPlanNumberOffset deployPlanNumber: Offset = Offset(),
    redeployPlanNumberOffset redeployPlanNumber: Offset = Offset(),
    cannibalized: Bool = false,
    siPocOffset siPoc: Offset = Offset(),
    readyTimeOffset readyTime: Offset = Offset(),
    receivedTimeOffset receivedTime: Offset = Offset(),
    resupportFlag: Bool = false,
    itemLastChangedDateOffset itemLastChangedDate: Offset = Offset(),
    logisticsPartsVectorOffset logisticsParts: Offset = Offset(),
    logisticsSpecialtiesVectorOffset logisticsSpecialties: Offset = Offset(),
    logisticsRemarksVectorOffset logisticsRemarks: Offset = Offset()
  ) -> Offset {
    let __start = LogisticsSupportItems_Full.startLogisticsSupportItems_Full(&fbb)
    LogisticsSupportItems_Full.add(recoveryRequestTypeCode: recoveryRequestTypeCode, &fbb)
    LogisticsSupportItems_Full.add(requestNumber: requestNumber, &fbb)
    LogisticsSupportItems_Full.add(quantity: quantity, &fbb)
    LogisticsSupportItems_Full.add(description: description, &fbb)
    LogisticsSupportItems_Full.add(shipmentUnitId: shipmentUnitId, &fbb)
    LogisticsSupportItems_Full.add(redeployShipmentUnitId: redeployShipmentUnitId, &fbb)
    LogisticsSupportItems_Full.add(jobControlNumber: jobControlNumber, &fbb)
    LogisticsSupportItems_Full.add(sourceIcao: sourceIcao, &fbb)
    LogisticsSupportItems_Full.add(deployPlanNumber: deployPlanNumber, &fbb)
    LogisticsSupportItems_Full.add(redeployPlanNumber: redeployPlanNumber, &fbb)
    LogisticsSupportItems_Full.add(cannibalized: cannibalized, &fbb)
    LogisticsSupportItems_Full.add(siPoc: siPoc, &fbb)
    LogisticsSupportItems_Full.add(readyTime: readyTime, &fbb)
    LogisticsSupportItems_Full.add(receivedTime: receivedTime, &fbb)
    LogisticsSupportItems_Full.add(resupportFlag: resupportFlag, &fbb)
    LogisticsSupportItems_Full.add(itemLastChangedDate: itemLastChangedDate, &fbb)
    LogisticsSupportItems_Full.addVectorOf(logisticsParts: logisticsParts, &fbb)
    LogisticsSupportItems_Full.addVectorOf(logisticsSpecialties: logisticsSpecialties, &fbb)
    LogisticsSupportItems_Full.addVectorOf(logisticsRemarks: logisticsRemarks, &fbb)
    return LogisticsSupportItems_Full.endLogisticsSupportItems_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.recoveryRequestTypeCode.p, fieldName: "recoveryRequestTypeCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.requestNumber.p, fieldName: "requestNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.quantity.p, fieldName: "quantity", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.description.p, fieldName: "description", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.shipmentUnitId.p, fieldName: "shipmentUnitId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.redeployShipmentUnitId.p, fieldName: "redeployShipmentUnitId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.jobControlNumber.p, fieldName: "jobControlNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceIcao.p, fieldName: "sourceIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.deployPlanNumber.p, fieldName: "deployPlanNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.redeployPlanNumber.p, fieldName: "redeployPlanNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cannibalized.p, fieldName: "cannibalized", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.siPoc.p, fieldName: "siPoc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.readyTime.p, fieldName: "readyTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.receivedTime.p, fieldName: "receivedTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.resupportFlag.p, fieldName: "resupportFlag", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.itemLastChangedDate.p, fieldName: "itemLastChangedDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.logisticsParts.p, fieldName: "logisticsParts", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.logisticsSpecialties.p, fieldName: "logisticsSpecialties", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.logisticsRemarks.p, fieldName: "logisticsRemarks", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

