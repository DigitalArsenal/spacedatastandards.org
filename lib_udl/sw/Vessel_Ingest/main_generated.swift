// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Vessel_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Vessel_Ingest_dataMode_Enum { return .exercise }
  public static var min: Vessel_Ingest_dataMode_Enum { return .real }
}


///  /// This service provides operations for manipulation and querying of maritime Vessel data. Vessel contains the static data of the specific vessel: mmsi, cruise speed, max speed, etc.
public struct Vessel_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "VESS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Vessel_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case entity = 8
    case idEntity = 10
    case altVesselId = 12
    case idOrganization = 14
    case vesselName = 16
    case vesselType = 18
    case vesselClass = 20
    case vesselDescription = 22
    case sconum = 24
    case imon = 26
    case mmsi = 28
    case callsign = 30
    case vesselFlag = 32
    case yearBuilt = 34
    case vesselBuilder = 36
    case status = 38
    case firstSeen = 40
    case length = 42
    case width = 44
    case maxDraught = 46
    case vslWt = 48
    case maxSpeed = 50
    case sternType = 52
    case numBlades = 54
    case numShafts = 56
    case propType = 58
    case hullNum = 60
    case createdAt = 62
    case createdBy = 64
    case source = 66
    case origin = 68
    case dataMode = 70
    case origNetwork = 72
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var entity: String? { let o = _accessor.offset(VTOFFSET.entity.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var entitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.entity.v) }
  ///  Unique identifier of the parent entity. idEntity is required for Put.
  ///  Example: /// Example: ENTITY-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idEntity: String? { let o = _accessor.offset(VTOFFSET.idEntity.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idEntitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idEntity.v) }
  ///  The original source Id for this vessel.
  ///  Example: /// Example: 590b5194fc32e75dd00682ba
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var altVesselId: String? { let o = _accessor.offset(VTOFFSET.altVesselId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altVesselIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altVesselId.v) }
  ///  The UDL ID of the organization that owns the vessel.
  ///  Example: /// Example: 0147f777-w09a-835f-85aa-0a07a730fgg0
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOrganization: String? { let o = _accessor.offset(VTOFFSET.idOrganization.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOrganizationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOrganization.v) }
  ///  The name of this vessel. Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
  ///  Example: /// Example: DORNUM
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var vesselName: String? { let o = _accessor.offset(VTOFFSET.vesselName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var vesselNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.vesselName.v) }
  ///  The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).
  ///  Example: /// Example: Passenger
  ///  Constraints: Minimum length = 0, Maximum length = 48
  public var vesselType: String? { let o = _accessor.offset(VTOFFSET.vesselType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var vesselTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.vesselType.v) }
  ///  The common name for a group of ships with similar design, usually named for the first vessel of the class.
  ///  Example: /// Example: Nimitz
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var vesselClass: String? { let o = _accessor.offset(VTOFFSET.vesselClass.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var vesselClassSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.vesselClass.v) }
  ///  Further description or explanation of the vessel or type.
  ///  Example: /// Example: Search and Rescue Vessel
  ///  Constraints: Minimum length = 0, Maximum length = 100
  public var vesselDescription: String? { let o = _accessor.offset(VTOFFSET.vesselDescription.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var vesselDescriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.vesselDescription.v) }
  ///  The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
  ///  Example: /// Example: B45524
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var sconum: String? { let o = _accessor.offset(VTOFFSET.sconum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sconumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sconum.v) }
  ///  The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
  ///  Example: /// Example: 9566356
  ///  Constraints: No constraints specified.
  public var imon: Int32 { let o = _accessor.offset(VTOFFSET.imon.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
  ///  Example: /// Example: 416450000
  ///  Constraints: Minimum length = 0, Maximum length = 9
  public var mmsi: String? { let o = _accessor.offset(VTOFFSET.mmsi.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var mmsiSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.mmsi.v) }
  ///  A uniquely designated identifier for the vessel's transmitter station. All radio transmissions must be individually identified by the call sign. Merchant and naval vessels are assigned call signs by their national licensing authorities.
  ///  Example: /// Example: V2OZ
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var callsign: String? { let o = _accessor.offset(VTOFFSET.callsign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var callsignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.callsign.v) }
  ///  The flag of the subject vessel.
  ///  Example: /// Example: United States
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var vesselFlag: String? { let o = _accessor.offset(VTOFFSET.vesselFlag.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var vesselFlagSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.vesselFlag.v) }
  ///  Year the vessel went into service.
  ///  Example: /// Example: 2014
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var yearBuilt: String? { let o = _accessor.offset(VTOFFSET.yearBuilt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var yearBuiltSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.yearBuilt.v) }
  ///  The shipbuilder who built this vessel.
  ///  Example: /// Example: Samsung Heavy Inds - Geoje
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var vesselBuilder: String? { let o = _accessor.offset(VTOFFSET.vesselBuilder.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var vesselBuilderSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.vesselBuilder.v) }
  ///  The status of this vessel.
  ///  Example: /// Example: In Service/Commission
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var status: String? { let o = _accessor.offset(VTOFFSET.status.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var statusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.status.v) }
  ///  The date this vessel was first seen.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var firstSeen: String? { let o = _accessor.offset(VTOFFSET.firstSeen.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var firstSeenSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.firstSeen.v) }
  ///  The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
  ///  Example: /// Example: 511.1
  ///  Constraints: No constraints specified.
  public var length: Double { let o = _accessor.offset(VTOFFSET.length.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
  ///  Example: /// Example: 24.1
  ///  Constraints: No constraints specified.
  public var width: Double { let o = _accessor.offset(VTOFFSET.width.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The maximum static draught, in meters, of the vessel defined as the distance between the ship’s keel and the waterline of the vessel.
  ///  Example: /// Example: 21.1
  ///  Constraints: No constraints specified.
  public var maxDraught: Double { let o = _accessor.offset(VTOFFSET.maxDraught.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The weight in tons, of this vessel.
  ///  Example: /// Example: 3423.76
  ///  Constraints: No constraints specified.
  public var vslWt: Double { let o = _accessor.offset(VTOFFSET.vslWt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The maximum possible speed of this vessel in meters per second.
  ///  Example: /// Example: 32.5
  ///  Constraints: No constraints specified.
  public var maxSpeed: Double { let o = _accessor.offset(VTOFFSET.maxSpeed.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The stern type code (Counter, Cruiser) associated with this vessel.
  ///  Example: /// Example: Cruiser
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var sternType: String? { let o = _accessor.offset(VTOFFSET.sternType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sternTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sternType.v) }
  ///  The number of blades per shaft for this vessel.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  public var numBlades: Int32 { let o = _accessor.offset(VTOFFSET.numBlades.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The number of shafts on this vessel.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var numShafts: Int32 { let o = _accessor.offset(VTOFFSET.numShafts.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The type of propulsion employed by this vessel.
  ///  Example: /// Example: Diesel
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var propType: String? { let o = _accessor.offset(VTOFFSET.propType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var propTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.propType.v) }
  ///  The vessel hull number designation of this maritime vessel. The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
  ///  Example: /// Example: A30081
  ///  Constraints: Minimum length = 0, Maximum length = 7
  public var hullNum: String? { let o = _accessor.offset(VTOFFSET.hullNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var hullNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.hullNum.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var dataMode: Vessel_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Vessel_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startVessel_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 35) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(entity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: entity, at: VTOFFSET.entity.p) }
  public static func add(idEntity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idEntity, at: VTOFFSET.idEntity.p) }
  public static func add(altVesselId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altVesselId, at: VTOFFSET.altVesselId.p) }
  public static func add(idOrganization: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOrganization, at: VTOFFSET.idOrganization.p) }
  public static func add(vesselName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vesselName, at: VTOFFSET.vesselName.p) }
  public static func add(vesselType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vesselType, at: VTOFFSET.vesselType.p) }
  public static func add(vesselClass: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vesselClass, at: VTOFFSET.vesselClass.p) }
  public static func add(vesselDescription: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vesselDescription, at: VTOFFSET.vesselDescription.p) }
  public static func add(sconum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sconum, at: VTOFFSET.sconum.p) }
  public static func add(imon: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: imon, def: 0, at: VTOFFSET.imon.p) }
  public static func add(mmsi: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mmsi, at: VTOFFSET.mmsi.p) }
  public static func add(callsign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callsign, at: VTOFFSET.callsign.p) }
  public static func add(vesselFlag: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vesselFlag, at: VTOFFSET.vesselFlag.p) }
  public static func add(yearBuilt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: yearBuilt, at: VTOFFSET.yearBuilt.p) }
  public static func add(vesselBuilder: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vesselBuilder, at: VTOFFSET.vesselBuilder.p) }
  public static func add(status: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: status, at: VTOFFSET.status.p) }
  public static func add(firstSeen: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: firstSeen, at: VTOFFSET.firstSeen.p) }
  public static func add(length: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: length, def: 0.0, at: VTOFFSET.length.p) }
  public static func add(width: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: width, def: 0.0, at: VTOFFSET.width.p) }
  public static func add(maxDraught: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxDraught, def: 0.0, at: VTOFFSET.maxDraught.p) }
  public static func add(vslWt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vslWt, def: 0.0, at: VTOFFSET.vslWt.p) }
  public static func add(maxSpeed: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxSpeed, def: 0.0, at: VTOFFSET.maxSpeed.p) }
  public static func add(sternType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sternType, at: VTOFFSET.sternType.p) }
  public static func add(numBlades: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numBlades, def: 0, at: VTOFFSET.numBlades.p) }
  public static func add(numShafts: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numShafts, def: 0, at: VTOFFSET.numShafts.p) }
  public static func add(propType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: propType, at: VTOFFSET.propType.p) }
  public static func add(hullNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hullNum, at: VTOFFSET.hullNum.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: Vessel_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endVessel_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createVessel_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    entityOffset entity: Offset = Offset(),
    idEntityOffset idEntity: Offset = Offset(),
    altVesselIdOffset altVesselId: Offset = Offset(),
    idOrganizationOffset idOrganization: Offset = Offset(),
    vesselNameOffset vesselName: Offset = Offset(),
    vesselTypeOffset vesselType: Offset = Offset(),
    vesselClassOffset vesselClass: Offset = Offset(),
    vesselDescriptionOffset vesselDescription: Offset = Offset(),
    sconumOffset sconum: Offset = Offset(),
    imon: Int32 = 0,
    mmsiOffset mmsi: Offset = Offset(),
    callsignOffset callsign: Offset = Offset(),
    vesselFlagOffset vesselFlag: Offset = Offset(),
    yearBuiltOffset yearBuilt: Offset = Offset(),
    vesselBuilderOffset vesselBuilder: Offset = Offset(),
    statusOffset status: Offset = Offset(),
    firstSeenOffset firstSeen: Offset = Offset(),
    length: Double = 0.0,
    width: Double = 0.0,
    maxDraught: Double = 0.0,
    vslWt: Double = 0.0,
    maxSpeed: Double = 0.0,
    sternTypeOffset sternType: Offset = Offset(),
    numBlades: Int32 = 0,
    numShafts: Int32 = 0,
    propTypeOffset propType: Offset = Offset(),
    hullNumOffset hullNum: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: Vessel_Ingest_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = Vessel_Ingest.startVessel_Ingest(&fbb)
    Vessel_Ingest.add(id: id, &fbb)
    Vessel_Ingest.add(classificationMarking: classificationMarking, &fbb)
    Vessel_Ingest.add(entity: entity, &fbb)
    Vessel_Ingest.add(idEntity: idEntity, &fbb)
    Vessel_Ingest.add(altVesselId: altVesselId, &fbb)
    Vessel_Ingest.add(idOrganization: idOrganization, &fbb)
    Vessel_Ingest.add(vesselName: vesselName, &fbb)
    Vessel_Ingest.add(vesselType: vesselType, &fbb)
    Vessel_Ingest.add(vesselClass: vesselClass, &fbb)
    Vessel_Ingest.add(vesselDescription: vesselDescription, &fbb)
    Vessel_Ingest.add(sconum: sconum, &fbb)
    Vessel_Ingest.add(imon: imon, &fbb)
    Vessel_Ingest.add(mmsi: mmsi, &fbb)
    Vessel_Ingest.add(callsign: callsign, &fbb)
    Vessel_Ingest.add(vesselFlag: vesselFlag, &fbb)
    Vessel_Ingest.add(yearBuilt: yearBuilt, &fbb)
    Vessel_Ingest.add(vesselBuilder: vesselBuilder, &fbb)
    Vessel_Ingest.add(status: status, &fbb)
    Vessel_Ingest.add(firstSeen: firstSeen, &fbb)
    Vessel_Ingest.add(length: length, &fbb)
    Vessel_Ingest.add(width: width, &fbb)
    Vessel_Ingest.add(maxDraught: maxDraught, &fbb)
    Vessel_Ingest.add(vslWt: vslWt, &fbb)
    Vessel_Ingest.add(maxSpeed: maxSpeed, &fbb)
    Vessel_Ingest.add(sternType: sternType, &fbb)
    Vessel_Ingest.add(numBlades: numBlades, &fbb)
    Vessel_Ingest.add(numShafts: numShafts, &fbb)
    Vessel_Ingest.add(propType: propType, &fbb)
    Vessel_Ingest.add(hullNum: hullNum, &fbb)
    Vessel_Ingest.add(createdAt: createdAt, &fbb)
    Vessel_Ingest.add(createdBy: createdBy, &fbb)
    Vessel_Ingest.add(source: source, &fbb)
    Vessel_Ingest.add(origin: origin, &fbb)
    Vessel_Ingest.add(dataMode: dataMode, &fbb)
    Vessel_Ingest.add(origNetwork: origNetwork, &fbb)
    return Vessel_Ingest.endVessel_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.entity.p, fieldName: "entity", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idEntity.p, fieldName: "idEntity", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altVesselId.p, fieldName: "altVesselId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOrganization.p, fieldName: "idOrganization", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.vesselName.p, fieldName: "vesselName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.vesselType.p, fieldName: "vesselType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.vesselClass.p, fieldName: "vesselClass", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.vesselDescription.p, fieldName: "vesselDescription", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sconum.p, fieldName: "sconum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.imon.p, fieldName: "imon", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.mmsi.p, fieldName: "mmsi", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.callsign.p, fieldName: "callsign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.vesselFlag.p, fieldName: "vesselFlag", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.yearBuilt.p, fieldName: "yearBuilt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.vesselBuilder.p, fieldName: "vesselBuilder", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.status.p, fieldName: "status", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.firstSeen.p, fieldName: "firstSeen", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.length.p, fieldName: "length", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.width.p, fieldName: "width", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxDraught.p, fieldName: "maxDraught", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.vslWt.p, fieldName: "vslWt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxSpeed.p, fieldName: "maxSpeed", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.sternType.p, fieldName: "sternType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numBlades.p, fieldName: "numBlades", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numShafts.p, fieldName: "numShafts", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.propType.p, fieldName: "propType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.hullNum.p, fieldName: "hullNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Vessel_Ingest_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

