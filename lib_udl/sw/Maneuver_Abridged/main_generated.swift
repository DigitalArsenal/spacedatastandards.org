// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Maneuver_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Maneuver_Abridged_dataMode_Enum { return .exercise }
  public static var min: Maneuver_Abridged_dataMode_Enum { return .real }
}


///  /// Model representation of on-orbit object maneuver information for detected, possible, and confirmed maneuvers.
public struct Maneuver_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "MANE" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Maneuver_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case satNo = 8
    case reportTime = 10
    case eventStartTime = 12
    case eventEndTime = 14
    case totalBurnTime = 16
    case odFitEndTime = 18
    case idOnOrbit = 20
    case idSensor = 22
    case uct = 24
    case maneuverUnc = 26
    case characterization = 28
    case characterizationUnc = 30
    case eventId = 32
    case origObjectId = 34
    case origSensorId = 36
    case status = 38
    case deltaPos = 40
    case deltaPosU = 42
    case deltaPosV = 44
    case deltaPosW = 46
    case deltaVel = 48
    case deltaVelU = 50
    case deltaVelV = 52
    case deltaVelW = 54
    case deltaMass = 56
    case preEventIdElset = 58
    case preEventElset = 60
    case preEventIdStateVector = 62
    case preEventStateVector = 64
    case prePosX = 66
    case prePosY = 68
    case prePosZ = 70
    case preVelX = 72
    case preVelY = 74
    case preVelZ = 76
    case preRadiationPressCoeff = 78
    case preBallisticCoeff = 80
    case preApogee = 82
    case prePerigee = 84
    case preInclination = 86
    case preEccentricity = 88
    case prePeriod = 90
    case preRaan = 92
    case preSma = 94
    case preGeoLongitude = 96
    case preDriftRate = 98
    case preSigmaU = 100
    case preSigmaV = 102
    case preSigmaW = 104
    case postEventIdElset = 106
    case postEventElset = 108
    case postEventIdStateVector = 110
    case postEventStateVector = 112
    case postPosX = 114
    case postPosY = 116
    case postPosZ = 118
    case postVelX = 120
    case postVelY = 122
    case postVelZ = 124
    case postRadiationPressCoeff = 126
    case postBallisticCoeff = 128
    case postApogee = 130
    case postPerigee = 132
    case postInclination = 134
    case postEccentricity = 136
    case postPeriod = 138
    case postRaan = 140
    case postSma = 142
    case postGeoLongitude = 144
    case postDriftRate = 146
    case postSigmaU = 148
    case postSigmaV = 150
    case postSigmaW = 152
    case cov = 154
    case postMass = 156
    case postArea = 158
    case numObs = 160
    case description = 162
    case descriptor = 164
    case stateModel = 166
    case stateModelVersion = 168
    case numAccelPoints = 170
    case mnvrAccelTimes = 172
    case mnvrAccels = 174
    case mnvrAccelUncs = 176
    case source = 178
    case origin = 180
    case dataMode = 182
    case createdAt = 184
    case createdBy = 186
    case algorithm = 188
    case transactionId = 190
    case origNetwork = 192
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: MANEUVER-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The time that the report or alert of this maneuver was generated, in ISO 8601 UTC format.
  ///  Example: /// Example: 2023-11-16T04:15:00.0001Z
  ///  Constraints: No constraints specified.
  public var reportTime: String? { let o = _accessor.offset(VTOFFSET.reportTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reportTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reportTime.v) }
  ///  Maneuver event start time in ISO 8601 UTC with microsecond precision. For maneuvers without start and end times, the start time is considered to be the maneuver event time.
  ///  Example: /// Example: 2023-11-16T01:05:16.835689Z
  ///  Constraints: No constraints specified.
  public var eventStartTime: String? { let o = _accessor.offset(VTOFFSET.eventStartTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eventStartTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eventStartTime.v) }
  ///  Maneuver event end time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2023-11-16T01:09:01.350012Z
  ///  Constraints: No constraints specified.
  public var eventEndTime: String? { let o = _accessor.offset(VTOFFSET.eventEndTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eventEndTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eventEndTime.v) }
  ///  The estimated total active burn time of a maneuver, in seconds. This includes the sum of all burns in numAccelPoints. Not to be confused with the total duration of the maneuver.
  ///  Example: /// Example: 600.72
  ///  Constraints: No constraints specified.
  public var totalBurnTime: Double { let o = _accessor.offset(VTOFFSET.totalBurnTime.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maneuver orbit determination fit data end time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2023-11-16T03:55:51Z
  ///  Constraints: No constraints specified.
  public var odFitEndTime: String? { let o = _accessor.offset(VTOFFSET.odFitEndTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var odFitEndTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.odFitEndTime.v) }
  ///  Target maneuvering on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
  ///  Example: /// Example: 12
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Optional ID of the sensor that detected this maneuver (for example, if detected by passive RF anomalies).
  ///  Example: /// Example: SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Boolean indicating this maneuver was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var uct: Bool { let o = _accessor.offset(VTOFFSET.uct.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Uncertainty in the occurrence of this maneuver (0 - 1).
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var maneuverUnc: Double { let o = _accessor.offset(VTOFFSET.maneuverUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional purpose of the maneuver if known (e.g. North-South Station Keeping, East-West Station Keeping, Longitude Shift, Unknown).
  ///  Example: /// Example: North-South Station Keeping
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var characterization: String? { let o = _accessor.offset(VTOFFSET.characterization.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var characterizationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.characterization.v) }
  ///  Uncertainty in the characterization or purpose assessment of this maneuver (0 - 1).
  ///  Example: /// Example: 0.15
  ///  Constraints: No constraints specified.
  public var characterizationUnc: Double { let o = _accessor.offset(VTOFFSET.characterizationUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional source-provided identifier for this maneuver event. In the case where multiple maneuver records are submitted for the same event, this field can be used to tie them together to the same event.
  ///  Example: /// Example: EVENT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var eventId: String? { let o = _accessor.offset(VTOFFSET.eventId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eventIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eventId.v) }
  ///  Identifier provided by source to indicate the target on-orbit object performing this maneuver. This may be an internal identifier and not necessarily a valid satellite number/ID.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origSensorId: String? { let o = _accessor.offset(VTOFFSET.origSensorId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSensorIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSensorId.v) }
  ///  Status of this maneuver (CANCELLED, PLANNED, POSSIBLE, REDACTED, VERIFIED).
  ///  CANCELLED:  A previously planned maneuver whose execution was cancelled.
  ///  PLANNED:  A maneuver planned to take place at the eventStartTime.
  ///  POSSIBLE:  A possible maneuver detected by observation of the spacecraft or by evaluation of the spacecraft orbit.
  ///  REDACTED:  A redaction of a reported possible maneuver that has been determined to have not taken place after further observation/evaluation.
  ///  VERIFIED:  A maneuver whose execution has been verified, either by the owner/operator or observation/evaluation.
  ///  Example: /// Example: POSSIBLE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var status: String? { let o = _accessor.offset(VTOFFSET.status.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var statusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.status.v) }
  ///  Magnitude, in km, of the difference in the pre- and post-maneuver position vectors at the maneuver event time.
  ///  Example: /// Example: 0.715998327
  ///  Constraints: No constraints specified.
  public var deltaPos: Double { let o = _accessor.offset(VTOFFSET.deltaPos.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
  ///  Example: /// Example: -0.022172844
  ///  Constraints: No constraints specified.
  public var deltaPosU: Double { let o = _accessor.offset(VTOFFSET.deltaPosU.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
  ///  Example: /// Example: -0.033700154
  ///  Constraints: No constraints specified.
  public var deltaPosV: Double { let o = _accessor.offset(VTOFFSET.deltaPosV.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
  ///  Example: /// Example: -0.714861014
  ///  Constraints: No constraints specified.
  public var deltaPosW: Double { let o = _accessor.offset(VTOFFSET.deltaPosW.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors at the maneuver event time.
  ///  Example: /// Example: 0.000631505
  ///  Constraints: No constraints specified.
  public var deltaVel: Double { let o = _accessor.offset(VTOFFSET.deltaVel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
  ///  Example: /// Example: 3.50165629389647e-05
  ///  Constraints: No constraints specified.
  public var deltaVelU: Double { let o = _accessor.offset(VTOFFSET.deltaVelU.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
  ///  Example: /// Example: 0.000544413
  ///  Constraints: No constraints specified.
  public var deltaVelV: Double { let o = _accessor.offset(VTOFFSET.deltaVelV.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
  ///  Example: /// Example: -0.000318099
  ///  Constraints: No constraints specified.
  public var deltaVelW: Double { let o = _accessor.offset(VTOFFSET.deltaVelW.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Difference in mass before and after the maneuver, in kg.
  ///  Example: /// Example: 0.15
  ///  Constraints: No constraints specified.
  public var deltaMass: Double { let o = _accessor.offset(VTOFFSET.deltaMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional identifier of the element set for the pre-maneuver orbit.
  ///  Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var preEventIdElset: String? { let o = _accessor.offset(VTOFFSET.preEventIdElset.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var preEventIdElsetSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.preEventIdElset.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var preEventElset: String? { let o = _accessor.offset(VTOFFSET.preEventElset.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var preEventElsetSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.preEventElset.v) }
  ///  Optional identifier of the state vector for the pre-maneuver trajectory of the spacecraft.
  ///  Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var preEventIdStateVector: String? { let o = _accessor.offset(VTOFFSET.preEventIdStateVector.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var preEventIdStateVectorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.preEventIdStateVector.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var preEventStateVector: String? { let o = _accessor.offset(VTOFFSET.preEventStateVector.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var preEventStateVectorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.preEventStateVector.v) }
  ///  Pre-event X component of position in ECI space, in km.
  ///  Example: /// Example: 3584.432545
  ///  Constraints: No constraints specified.
  public var prePosX: Double { let o = _accessor.offset(VTOFFSET.prePosX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event Y component of position in ECI space, in km.
  ///  Example: /// Example: 42028.43245
  ///  Constraints: No constraints specified.
  public var prePosY: Double { let o = _accessor.offset(VTOFFSET.prePosY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event Z component of position in ECI space, in km.
  ///  Example: /// Example: -1.97765
  ///  Constraints: No constraints specified.
  public var prePosZ: Double { let o = _accessor.offset(VTOFFSET.prePosZ.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event X component of velocity in ECI space, in km/sec.
  ///  Example: /// Example: -2.543266
  ///  Constraints: No constraints specified.
  public var preVelX: Double { let o = _accessor.offset(VTOFFSET.preVelX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event Y component of velocity in ECI space, in km/sec.
  ///  Example: /// Example: 0.24876
  ///  Constraints: No constraints specified.
  public var preVelY: Double { let o = _accessor.offset(VTOFFSET.preVelY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event Z component of velocity in ECI space, in km/sec.
  ///  Example: /// Example: 0.0067352
  ///  Constraints: No constraints specified.
  public var preVelZ: Double { let o = _accessor.offset(VTOFFSET.preVelZ.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
  ///  Example: /// Example: 4.51e-07
  ///  Constraints: No constraints specified.
  public var preRadiationPressCoeff: Double { let o = _accessor.offset(VTOFFSET.preRadiationPressCoeff.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
  ///  Example: /// Example: 0.000437116
  ///  Constraints: No constraints specified.
  public var preBallisticCoeff: Double { let o = _accessor.offset(VTOFFSET.preBallisticCoeff.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event spacecraft apogee (measured from Earth center), in kilometers.
  ///  Example: /// Example: 35802
  ///  Constraints: No constraints specified.
  public var preApogee: Double { let o = _accessor.offset(VTOFFSET.preApogee.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event spacecraft perigee (measured from Earth center), in kilometers.
  ///  Example: /// Example: 35786.5
  ///  Constraints: No constraints specified.
  public var prePerigee: Double { let o = _accessor.offset(VTOFFSET.prePerigee.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event spacecraft orbital inclination, in degrees. 0-180.
  ///  Example: /// Example: 0.0336
  ///  Constraints: No constraints specified.
  public var preInclination: Double { let o = _accessor.offset(VTOFFSET.preInclination.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event spacecraft eccentricity.
  ///  Example: /// Example: 0.00017
  ///  Constraints: No constraints specified.
  public var preEccentricity: Double { let o = _accessor.offset(VTOFFSET.preEccentricity.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event spacecraft orbital period, in minutes.
  ///  Example: /// Example: 1436.12
  ///  Constraints: No constraints specified.
  public var prePeriod: Double { let o = _accessor.offset(VTOFFSET.prePeriod.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
  ///  Example: /// Example: 98.3336
  ///  Constraints: No constraints specified.
  public var preRaan: Double { let o = _accessor.offset(VTOFFSET.preRaan.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event spacecraft orbital Semi-Major Axis (SMA), in kilometers.
  ///  Example: /// Example: 42165.1
  ///  Constraints: No constraints specified.
  public var preSma: Double { let o = _accessor.offset(VTOFFSET.preSma.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -93.12
  ///  Constraints: No constraints specified.
  public var preGeoLongitude: Double { let o = _accessor.offset(VTOFFSET.preGeoLongitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
  ///  Example: /// Example: -0.0125
  ///  Constraints: No constraints specified.
  public var preDriftRate: Double { let o = _accessor.offset(VTOFFSET.preDriftRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
  ///  Example: /// Example: 0.215
  ///  Constraints: No constraints specified.
  public var preSigmaU: Double { let o = _accessor.offset(VTOFFSET.preSigmaU.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
  ///  Example: /// Example: 1.97
  ///  Constraints: No constraints specified.
  public var preSigmaV: Double { let o = _accessor.offset(VTOFFSET.preSigmaV.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pre-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
  ///  Example: /// Example: 0.208
  ///  Constraints: No constraints specified.
  public var preSigmaW: Double { let o = _accessor.offset(VTOFFSET.preSigmaW.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional identifier of the element set for the post-maneuver orbit.
  ///  Example: /// Example: 225adf4c-8606-40a8-929e-63e22cffe220
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var postEventIdElset: String? { let o = _accessor.offset(VTOFFSET.postEventIdElset.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var postEventIdElsetSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.postEventIdElset.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var postEventElset: String? { let o = _accessor.offset(VTOFFSET.postEventElset.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var postEventElsetSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.postEventElset.v) }
  ///  Optional identifier of the state vector for the post-maneuver trajectory of the spacecraft.
  ///  Example: /// Example: d83a23f8-1496-485a-bd88-ec5808c73299
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var postEventIdStateVector: String? { let o = _accessor.offset(VTOFFSET.postEventIdStateVector.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var postEventIdStateVectorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.postEventIdStateVector.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var postEventStateVector: String? { let o = _accessor.offset(VTOFFSET.postEventStateVector.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var postEventStateVectorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.postEventStateVector.v) }
  ///  Post-event X component of position in ECI space, in km.
  ///  Example: /// Example: 3589.351957
  ///  Constraints: No constraints specified.
  public var postPosX: Double { let o = _accessor.offset(VTOFFSET.postPosX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event Y component of position in ECI space, in km.
  ///  Example: /// Example: 42017.26823
  ///  Constraints: No constraints specified.
  public var postPosY: Double { let o = _accessor.offset(VTOFFSET.postPosY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event Z component of position in ECI space, in km.
  ///  Example: /// Example: -1.27161796
  ///  Constraints: No constraints specified.
  public var postPosZ: Double { let o = _accessor.offset(VTOFFSET.postPosZ.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event X component of velocity in ECI space, in km/sec.
  ///  Example: /// Example: -3.063152826
  ///  Constraints: No constraints specified.
  public var postVelX: Double { let o = _accessor.offset(VTOFFSET.postVelX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event Y component of velocity in ECI space, in km/sec.
  ///  Example: /// Example: 0.261586769
  ///  Constraints: No constraints specified.
  public var postVelY: Double { let o = _accessor.offset(VTOFFSET.postVelY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event Z component of velocity in ECI space, in km/sec.
  ///  Example: /// Example: 0.006842148
  ///  Constraints: No constraints specified.
  public var postVelZ: Double { let o = _accessor.offset(VTOFFSET.postVelZ.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
  ///  Example: /// Example: 4.51e-07
  ///  Constraints: No constraints specified.
  public var postRadiationPressCoeff: Double { let o = _accessor.offset(VTOFFSET.postRadiationPressCoeff.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
  ///  Example: /// Example: 0.000433209
  ///  Constraints: No constraints specified.
  public var postBallisticCoeff: Double { let o = _accessor.offset(VTOFFSET.postBallisticCoeff.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event spacecraft apogee (measured from Earth center), in kilometers.
  ///  Example: /// Example: 35800.1
  ///  Constraints: No constraints specified.
  public var postApogee: Double { let o = _accessor.offset(VTOFFSET.postApogee.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event spacecraft perigee (measured from Earth center), in kilometers.
  ///  Example: /// Example: 35787.9
  ///  Constraints: No constraints specified.
  public var postPerigee: Double { let o = _accessor.offset(VTOFFSET.postPerigee.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event spacecraft orbital inclination, in degrees. 0-180.
  ///  Example: /// Example: 0.0327
  ///  Constraints: No constraints specified.
  public var postInclination: Double { let o = _accessor.offset(VTOFFSET.postInclination.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event spacecraft eccentricity.
  ///  Example: /// Example: 0.000164
  ///  Constraints: No constraints specified.
  public var postEccentricity: Double { let o = _accessor.offset(VTOFFSET.postEccentricity.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event spacecraft orbital period, in minutes.
  ///  Example: /// Example: 1436.01
  ///  Constraints: No constraints specified.
  public var postPeriod: Double { let o = _accessor.offset(VTOFFSET.postPeriod.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
  ///  Example: /// Example: 98.3335
  ///  Constraints: No constraints specified.
  public var postRaan: Double { let o = _accessor.offset(VTOFFSET.postRaan.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event spacecraft Semi-Major Axis (SMA), in kilometers.
  ///  Example: /// Example: 42164.87
  ///  Constraints: No constraints specified.
  public var postSma: Double { let o = _accessor.offset(VTOFFSET.postSma.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -93.15
  ///  Constraints: No constraints specified.
  public var postGeoLongitude: Double { let o = _accessor.offset(VTOFFSET.postGeoLongitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
  ///  Example: /// Example: -0.0125
  ///  Constraints: No constraints specified.
  public var postDriftRate: Double { let o = _accessor.offset(VTOFFSET.postDriftRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
  ///  Example: /// Example: 12.285
  ///  Constraints: No constraints specified.
  public var postSigmaU: Double { let o = _accessor.offset(VTOFFSET.postSigmaU.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
  ///  Example: /// Example: 71.339
  ///  Constraints: No constraints specified.
  public var postSigmaV: Double { let o = _accessor.offset(VTOFFSET.postSigmaV.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Post-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
  ///  Example: /// Example: 12.77
  ///  Constraints: No constraints specified.
  public var postSigmaW: Double { let o = _accessor.offset(VTOFFSET.postSigmaW.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional maneuver cross-track/radial/in-track covariance array, in meter and second based units, in the following order: CR_R, CI_R, CI_I, CC_R, CC_I, CC_C, CT_R, CT_I, CT_C, CT_T.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasCov: Bool { let o = _accessor.offset(VTOFFSET.cov.v); return o == 0 ? false : true }
  public var covCount: Int32 { let o = _accessor.offset(VTOFFSET.cov.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cov(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.cov.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///   Estimated mass of the object following the maneuver, in kg.
  ///  Example: /// Example: 1844.5
  ///  Constraints: No constraints specified.
  public var postMass: Double { let o = _accessor.offset(VTOFFSET.postMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Estimated area of the object following the maneuver, in meters squared.
  ///  Example: /// Example: 35.77
  ///  Constraints: No constraints specified.
  public var postArea: Double { let o = _accessor.offset(VTOFFSET.postArea.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Number of observations used to generate the maneuver data.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var numObs: Int32 { let o = _accessor.offset(VTOFFSET.numObs.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Description and notes of the maneuver.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var description: String? { let o = _accessor.offset(VTOFFSET.description.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.description.v) }
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: Example descriptor
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var descriptor: String? { let o = _accessor.offset(VTOFFSET.descriptor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.descriptor.v) }
  ///  Name of the state model used to generate the maneuver data.
  ///  Example: /// Example: Example name
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var stateModel: String? { let o = _accessor.offset(VTOFFSET.stateModel.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var stateModelSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.stateModel.v) }
  ///  Version of the state model used to generate the maneuver data.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var stateModelVersion: Double { let o = _accessor.offset(VTOFFSET.stateModelVersion.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The total number of estimated acceleration points during the maneuver.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var numAccelPoints: Int32 { let o = _accessor.offset(VTOFFSET.numAccelPoints.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of elapsed times, in seconds from maneuver start time, at which each acceleration point is estimated. Number of elements must match the numAccelPoints.
  ///  Example: /// Example: [10.25, 50.56, 150.78]
  ///  Constraints: No constraints specified.
  public var hasMnvrAccelTimes: Bool { let o = _accessor.offset(VTOFFSET.mnvrAccelTimes.v); return o == 0 ? false : true }
  public var mnvrAccelTimesCount: Int32 { let o = _accessor.offset(VTOFFSET.mnvrAccelTimes.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func mnvrAccelTimes(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.mnvrAccelTimes.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of estimated acceleration values, in meters per second squared. Number of elements must match the numAccelPoints.
  ///  Example: /// Example: [0.05, 0.1, 0.05]
  ///  Constraints: No constraints specified.
  public var hasMnvrAccels: Bool { let o = _accessor.offset(VTOFFSET.mnvrAccels.v); return o == 0 ? false : true }
  public var mnvrAccelsCount: Int32 { let o = _accessor.offset(VTOFFSET.mnvrAccels.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func mnvrAccels(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.mnvrAccels.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the 1-sigma uncertainties in estimated accelerations, in meters per second squared. Number of elements must match the numAccelPoints.
  ///  Example: /// Example: [0.0005, 0.001, 0.0005]
  ///  Constraints: No constraints specified.
  public var hasMnvrAccelUncs: Bool { let o = _accessor.offset(VTOFFSET.mnvrAccelUncs.v); return o == 0 ? false : true }
  public var mnvrAccelUncsCount: Int32 { let o = _accessor.offset(VTOFFSET.mnvrAccelUncs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func mnvrAccelUncs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.mnvrAccelUncs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Maneuver_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Maneuver_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Optional algorithm used to produce this record.
  ///  Example: /// Example: Example algorithm
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var algorithm: String? { let o = _accessor.offset(VTOFFSET.algorithm.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var algorithmSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.algorithm.v) }
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var transactionId: String? { let o = _accessor.offset(VTOFFSET.transactionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transactionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transactionId.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startManeuver_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 95) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(reportTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reportTime, at: VTOFFSET.reportTime.p) }
  public static func add(eventStartTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eventStartTime, at: VTOFFSET.eventStartTime.p) }
  public static func add(eventEndTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eventEndTime, at: VTOFFSET.eventEndTime.p) }
  public static func add(totalBurnTime: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalBurnTime, def: 0.0, at: VTOFFSET.totalBurnTime.p) }
  public static func add(odFitEndTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: odFitEndTime, at: VTOFFSET.odFitEndTime.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(uct: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: uct, def: false,
   at: VTOFFSET.uct.p) }
  public static func add(maneuverUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maneuverUnc, def: 0.0, at: VTOFFSET.maneuverUnc.p) }
  public static func add(characterization: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: characterization, at: VTOFFSET.characterization.p) }
  public static func add(characterizationUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: characterizationUnc, def: 0.0, at: VTOFFSET.characterizationUnc.p) }
  public static func add(eventId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eventId, at: VTOFFSET.eventId.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(origSensorId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSensorId, at: VTOFFSET.origSensorId.p) }
  public static func add(status: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: status, at: VTOFFSET.status.p) }
  public static func add(deltaPos: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: deltaPos, def: 0.0, at: VTOFFSET.deltaPos.p) }
  public static func add(deltaPosU: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: deltaPosU, def: 0.0, at: VTOFFSET.deltaPosU.p) }
  public static func add(deltaPosV: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: deltaPosV, def: 0.0, at: VTOFFSET.deltaPosV.p) }
  public static func add(deltaPosW: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: deltaPosW, def: 0.0, at: VTOFFSET.deltaPosW.p) }
  public static func add(deltaVel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: deltaVel, def: 0.0, at: VTOFFSET.deltaVel.p) }
  public static func add(deltaVelU: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: deltaVelU, def: 0.0, at: VTOFFSET.deltaVelU.p) }
  public static func add(deltaVelV: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: deltaVelV, def: 0.0, at: VTOFFSET.deltaVelV.p) }
  public static func add(deltaVelW: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: deltaVelW, def: 0.0, at: VTOFFSET.deltaVelW.p) }
  public static func add(deltaMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: deltaMass, def: 0.0, at: VTOFFSET.deltaMass.p) }
  public static func add(preEventIdElset: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: preEventIdElset, at: VTOFFSET.preEventIdElset.p) }
  public static func add(preEventElset: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: preEventElset, at: VTOFFSET.preEventElset.p) }
  public static func add(preEventIdStateVector: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: preEventIdStateVector, at: VTOFFSET.preEventIdStateVector.p) }
  public static func add(preEventStateVector: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: preEventStateVector, at: VTOFFSET.preEventStateVector.p) }
  public static func add(prePosX: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: prePosX, def: 0.0, at: VTOFFSET.prePosX.p) }
  public static func add(prePosY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: prePosY, def: 0.0, at: VTOFFSET.prePosY.p) }
  public static func add(prePosZ: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: prePosZ, def: 0.0, at: VTOFFSET.prePosZ.p) }
  public static func add(preVelX: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: preVelX, def: 0.0, at: VTOFFSET.preVelX.p) }
  public static func add(preVelY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: preVelY, def: 0.0, at: VTOFFSET.preVelY.p) }
  public static func add(preVelZ: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: preVelZ, def: 0.0, at: VTOFFSET.preVelZ.p) }
  public static func add(preRadiationPressCoeff: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: preRadiationPressCoeff, def: 0.0, at: VTOFFSET.preRadiationPressCoeff.p) }
  public static func add(preBallisticCoeff: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: preBallisticCoeff, def: 0.0, at: VTOFFSET.preBallisticCoeff.p) }
  public static func add(preApogee: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: preApogee, def: 0.0, at: VTOFFSET.preApogee.p) }
  public static func add(prePerigee: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: prePerigee, def: 0.0, at: VTOFFSET.prePerigee.p) }
  public static func add(preInclination: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: preInclination, def: 0.0, at: VTOFFSET.preInclination.p) }
  public static func add(preEccentricity: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: preEccentricity, def: 0.0, at: VTOFFSET.preEccentricity.p) }
  public static func add(prePeriod: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: prePeriod, def: 0.0, at: VTOFFSET.prePeriod.p) }
  public static func add(preRaan: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: preRaan, def: 0.0, at: VTOFFSET.preRaan.p) }
  public static func add(preSma: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: preSma, def: 0.0, at: VTOFFSET.preSma.p) }
  public static func add(preGeoLongitude: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: preGeoLongitude, def: 0.0, at: VTOFFSET.preGeoLongitude.p) }
  public static func add(preDriftRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: preDriftRate, def: 0.0, at: VTOFFSET.preDriftRate.p) }
  public static func add(preSigmaU: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: preSigmaU, def: 0.0, at: VTOFFSET.preSigmaU.p) }
  public static func add(preSigmaV: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: preSigmaV, def: 0.0, at: VTOFFSET.preSigmaV.p) }
  public static func add(preSigmaW: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: preSigmaW, def: 0.0, at: VTOFFSET.preSigmaW.p) }
  public static func add(postEventIdElset: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: postEventIdElset, at: VTOFFSET.postEventIdElset.p) }
  public static func add(postEventElset: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: postEventElset, at: VTOFFSET.postEventElset.p) }
  public static func add(postEventIdStateVector: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: postEventIdStateVector, at: VTOFFSET.postEventIdStateVector.p) }
  public static func add(postEventStateVector: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: postEventStateVector, at: VTOFFSET.postEventStateVector.p) }
  public static func add(postPosX: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postPosX, def: 0.0, at: VTOFFSET.postPosX.p) }
  public static func add(postPosY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postPosY, def: 0.0, at: VTOFFSET.postPosY.p) }
  public static func add(postPosZ: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postPosZ, def: 0.0, at: VTOFFSET.postPosZ.p) }
  public static func add(postVelX: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postVelX, def: 0.0, at: VTOFFSET.postVelX.p) }
  public static func add(postVelY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postVelY, def: 0.0, at: VTOFFSET.postVelY.p) }
  public static func add(postVelZ: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postVelZ, def: 0.0, at: VTOFFSET.postVelZ.p) }
  public static func add(postRadiationPressCoeff: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postRadiationPressCoeff, def: 0.0, at: VTOFFSET.postRadiationPressCoeff.p) }
  public static func add(postBallisticCoeff: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postBallisticCoeff, def: 0.0, at: VTOFFSET.postBallisticCoeff.p) }
  public static func add(postApogee: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postApogee, def: 0.0, at: VTOFFSET.postApogee.p) }
  public static func add(postPerigee: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postPerigee, def: 0.0, at: VTOFFSET.postPerigee.p) }
  public static func add(postInclination: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postInclination, def: 0.0, at: VTOFFSET.postInclination.p) }
  public static func add(postEccentricity: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postEccentricity, def: 0.0, at: VTOFFSET.postEccentricity.p) }
  public static func add(postPeriod: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postPeriod, def: 0.0, at: VTOFFSET.postPeriod.p) }
  public static func add(postRaan: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postRaan, def: 0.0, at: VTOFFSET.postRaan.p) }
  public static func add(postSma: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postSma, def: 0.0, at: VTOFFSET.postSma.p) }
  public static func add(postGeoLongitude: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postGeoLongitude, def: 0.0, at: VTOFFSET.postGeoLongitude.p) }
  public static func add(postDriftRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postDriftRate, def: 0.0, at: VTOFFSET.postDriftRate.p) }
  public static func add(postSigmaU: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postSigmaU, def: 0.0, at: VTOFFSET.postSigmaU.p) }
  public static func add(postSigmaV: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postSigmaV, def: 0.0, at: VTOFFSET.postSigmaV.p) }
  public static func add(postSigmaW: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postSigmaW, def: 0.0, at: VTOFFSET.postSigmaW.p) }
  public static func addVectorOf(cov: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cov, at: VTOFFSET.cov.p) }
  public static func add(postMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postMass, def: 0.0, at: VTOFFSET.postMass.p) }
  public static func add(postArea: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: postArea, def: 0.0, at: VTOFFSET.postArea.p) }
  public static func add(numObs: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numObs, def: 0, at: VTOFFSET.numObs.p) }
  public static func add(description: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: description, at: VTOFFSET.description.p) }
  public static func add(descriptor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: descriptor, at: VTOFFSET.descriptor.p) }
  public static func add(stateModel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: stateModel, at: VTOFFSET.stateModel.p) }
  public static func add(stateModelVersion: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: stateModelVersion, def: 0.0, at: VTOFFSET.stateModelVersion.p) }
  public static func add(numAccelPoints: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numAccelPoints, def: 0, at: VTOFFSET.numAccelPoints.p) }
  public static func addVectorOf(mnvrAccelTimes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mnvrAccelTimes, at: VTOFFSET.mnvrAccelTimes.p) }
  public static func addVectorOf(mnvrAccels: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mnvrAccels, at: VTOFFSET.mnvrAccels.p) }
  public static func addVectorOf(mnvrAccelUncs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mnvrAccelUncs, at: VTOFFSET.mnvrAccelUncs.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: Maneuver_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(algorithm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: algorithm, at: VTOFFSET.algorithm.p) }
  public static func add(transactionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transactionId, at: VTOFFSET.transactionId.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endManeuver_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createManeuver_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    satNo: Int32 = 0,
    reportTimeOffset reportTime: Offset = Offset(),
    eventStartTimeOffset eventStartTime: Offset = Offset(),
    eventEndTimeOffset eventEndTime: Offset = Offset(),
    totalBurnTime: Double = 0.0,
    odFitEndTimeOffset odFitEndTime: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    uct: Bool = false,
    maneuverUnc: Double = 0.0,
    characterizationOffset characterization: Offset = Offset(),
    characterizationUnc: Double = 0.0,
    eventIdOffset eventId: Offset = Offset(),
    origObjectIdOffset origObjectId: Offset = Offset(),
    origSensorIdOffset origSensorId: Offset = Offset(),
    statusOffset status: Offset = Offset(),
    deltaPos: Double = 0.0,
    deltaPosU: Double = 0.0,
    deltaPosV: Double = 0.0,
    deltaPosW: Double = 0.0,
    deltaVel: Double = 0.0,
    deltaVelU: Double = 0.0,
    deltaVelV: Double = 0.0,
    deltaVelW: Double = 0.0,
    deltaMass: Double = 0.0,
    preEventIdElsetOffset preEventIdElset: Offset = Offset(),
    preEventElsetOffset preEventElset: Offset = Offset(),
    preEventIdStateVectorOffset preEventIdStateVector: Offset = Offset(),
    preEventStateVectorOffset preEventStateVector: Offset = Offset(),
    prePosX: Double = 0.0,
    prePosY: Double = 0.0,
    prePosZ: Double = 0.0,
    preVelX: Double = 0.0,
    preVelY: Double = 0.0,
    preVelZ: Double = 0.0,
    preRadiationPressCoeff: Double = 0.0,
    preBallisticCoeff: Double = 0.0,
    preApogee: Double = 0.0,
    prePerigee: Double = 0.0,
    preInclination: Double = 0.0,
    preEccentricity: Double = 0.0,
    prePeriod: Double = 0.0,
    preRaan: Double = 0.0,
    preSma: Double = 0.0,
    preGeoLongitude: Double = 0.0,
    preDriftRate: Double = 0.0,
    preSigmaU: Double = 0.0,
    preSigmaV: Double = 0.0,
    preSigmaW: Double = 0.0,
    postEventIdElsetOffset postEventIdElset: Offset = Offset(),
    postEventElsetOffset postEventElset: Offset = Offset(),
    postEventIdStateVectorOffset postEventIdStateVector: Offset = Offset(),
    postEventStateVectorOffset postEventStateVector: Offset = Offset(),
    postPosX: Double = 0.0,
    postPosY: Double = 0.0,
    postPosZ: Double = 0.0,
    postVelX: Double = 0.0,
    postVelY: Double = 0.0,
    postVelZ: Double = 0.0,
    postRadiationPressCoeff: Double = 0.0,
    postBallisticCoeff: Double = 0.0,
    postApogee: Double = 0.0,
    postPerigee: Double = 0.0,
    postInclination: Double = 0.0,
    postEccentricity: Double = 0.0,
    postPeriod: Double = 0.0,
    postRaan: Double = 0.0,
    postSma: Double = 0.0,
    postGeoLongitude: Double = 0.0,
    postDriftRate: Double = 0.0,
    postSigmaU: Double = 0.0,
    postSigmaV: Double = 0.0,
    postSigmaW: Double = 0.0,
    covVectorOffset cov: Offset = Offset(),
    postMass: Double = 0.0,
    postArea: Double = 0.0,
    numObs: Int32 = 0,
    descriptionOffset description: Offset = Offset(),
    descriptorOffset descriptor: Offset = Offset(),
    stateModelOffset stateModel: Offset = Offset(),
    stateModelVersion: Double = 0.0,
    numAccelPoints: Int32 = 0,
    mnvrAccelTimesVectorOffset mnvrAccelTimes: Offset = Offset(),
    mnvrAccelsVectorOffset mnvrAccels: Offset = Offset(),
    mnvrAccelUncsVectorOffset mnvrAccelUncs: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: Maneuver_Abridged_dataMode_Enum = .real,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    algorithmOffset algorithm: Offset = Offset(),
    transactionIdOffset transactionId: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = Maneuver_Abridged.startManeuver_Abridged(&fbb)
    Maneuver_Abridged.add(id: id, &fbb)
    Maneuver_Abridged.add(classificationMarking: classificationMarking, &fbb)
    Maneuver_Abridged.add(satNo: satNo, &fbb)
    Maneuver_Abridged.add(reportTime: reportTime, &fbb)
    Maneuver_Abridged.add(eventStartTime: eventStartTime, &fbb)
    Maneuver_Abridged.add(eventEndTime: eventEndTime, &fbb)
    Maneuver_Abridged.add(totalBurnTime: totalBurnTime, &fbb)
    Maneuver_Abridged.add(odFitEndTime: odFitEndTime, &fbb)
    Maneuver_Abridged.add(idOnOrbit: idOnOrbit, &fbb)
    Maneuver_Abridged.add(idSensor: idSensor, &fbb)
    Maneuver_Abridged.add(uct: uct, &fbb)
    Maneuver_Abridged.add(maneuverUnc: maneuverUnc, &fbb)
    Maneuver_Abridged.add(characterization: characterization, &fbb)
    Maneuver_Abridged.add(characterizationUnc: characterizationUnc, &fbb)
    Maneuver_Abridged.add(eventId: eventId, &fbb)
    Maneuver_Abridged.add(origObjectId: origObjectId, &fbb)
    Maneuver_Abridged.add(origSensorId: origSensorId, &fbb)
    Maneuver_Abridged.add(status: status, &fbb)
    Maneuver_Abridged.add(deltaPos: deltaPos, &fbb)
    Maneuver_Abridged.add(deltaPosU: deltaPosU, &fbb)
    Maneuver_Abridged.add(deltaPosV: deltaPosV, &fbb)
    Maneuver_Abridged.add(deltaPosW: deltaPosW, &fbb)
    Maneuver_Abridged.add(deltaVel: deltaVel, &fbb)
    Maneuver_Abridged.add(deltaVelU: deltaVelU, &fbb)
    Maneuver_Abridged.add(deltaVelV: deltaVelV, &fbb)
    Maneuver_Abridged.add(deltaVelW: deltaVelW, &fbb)
    Maneuver_Abridged.add(deltaMass: deltaMass, &fbb)
    Maneuver_Abridged.add(preEventIdElset: preEventIdElset, &fbb)
    Maneuver_Abridged.add(preEventElset: preEventElset, &fbb)
    Maneuver_Abridged.add(preEventIdStateVector: preEventIdStateVector, &fbb)
    Maneuver_Abridged.add(preEventStateVector: preEventStateVector, &fbb)
    Maneuver_Abridged.add(prePosX: prePosX, &fbb)
    Maneuver_Abridged.add(prePosY: prePosY, &fbb)
    Maneuver_Abridged.add(prePosZ: prePosZ, &fbb)
    Maneuver_Abridged.add(preVelX: preVelX, &fbb)
    Maneuver_Abridged.add(preVelY: preVelY, &fbb)
    Maneuver_Abridged.add(preVelZ: preVelZ, &fbb)
    Maneuver_Abridged.add(preRadiationPressCoeff: preRadiationPressCoeff, &fbb)
    Maneuver_Abridged.add(preBallisticCoeff: preBallisticCoeff, &fbb)
    Maneuver_Abridged.add(preApogee: preApogee, &fbb)
    Maneuver_Abridged.add(prePerigee: prePerigee, &fbb)
    Maneuver_Abridged.add(preInclination: preInclination, &fbb)
    Maneuver_Abridged.add(preEccentricity: preEccentricity, &fbb)
    Maneuver_Abridged.add(prePeriod: prePeriod, &fbb)
    Maneuver_Abridged.add(preRaan: preRaan, &fbb)
    Maneuver_Abridged.add(preSma: preSma, &fbb)
    Maneuver_Abridged.add(preGeoLongitude: preGeoLongitude, &fbb)
    Maneuver_Abridged.add(preDriftRate: preDriftRate, &fbb)
    Maneuver_Abridged.add(preSigmaU: preSigmaU, &fbb)
    Maneuver_Abridged.add(preSigmaV: preSigmaV, &fbb)
    Maneuver_Abridged.add(preSigmaW: preSigmaW, &fbb)
    Maneuver_Abridged.add(postEventIdElset: postEventIdElset, &fbb)
    Maneuver_Abridged.add(postEventElset: postEventElset, &fbb)
    Maneuver_Abridged.add(postEventIdStateVector: postEventIdStateVector, &fbb)
    Maneuver_Abridged.add(postEventStateVector: postEventStateVector, &fbb)
    Maneuver_Abridged.add(postPosX: postPosX, &fbb)
    Maneuver_Abridged.add(postPosY: postPosY, &fbb)
    Maneuver_Abridged.add(postPosZ: postPosZ, &fbb)
    Maneuver_Abridged.add(postVelX: postVelX, &fbb)
    Maneuver_Abridged.add(postVelY: postVelY, &fbb)
    Maneuver_Abridged.add(postVelZ: postVelZ, &fbb)
    Maneuver_Abridged.add(postRadiationPressCoeff: postRadiationPressCoeff, &fbb)
    Maneuver_Abridged.add(postBallisticCoeff: postBallisticCoeff, &fbb)
    Maneuver_Abridged.add(postApogee: postApogee, &fbb)
    Maneuver_Abridged.add(postPerigee: postPerigee, &fbb)
    Maneuver_Abridged.add(postInclination: postInclination, &fbb)
    Maneuver_Abridged.add(postEccentricity: postEccentricity, &fbb)
    Maneuver_Abridged.add(postPeriod: postPeriod, &fbb)
    Maneuver_Abridged.add(postRaan: postRaan, &fbb)
    Maneuver_Abridged.add(postSma: postSma, &fbb)
    Maneuver_Abridged.add(postGeoLongitude: postGeoLongitude, &fbb)
    Maneuver_Abridged.add(postDriftRate: postDriftRate, &fbb)
    Maneuver_Abridged.add(postSigmaU: postSigmaU, &fbb)
    Maneuver_Abridged.add(postSigmaV: postSigmaV, &fbb)
    Maneuver_Abridged.add(postSigmaW: postSigmaW, &fbb)
    Maneuver_Abridged.addVectorOf(cov: cov, &fbb)
    Maneuver_Abridged.add(postMass: postMass, &fbb)
    Maneuver_Abridged.add(postArea: postArea, &fbb)
    Maneuver_Abridged.add(numObs: numObs, &fbb)
    Maneuver_Abridged.add(description: description, &fbb)
    Maneuver_Abridged.add(descriptor: descriptor, &fbb)
    Maneuver_Abridged.add(stateModel: stateModel, &fbb)
    Maneuver_Abridged.add(stateModelVersion: stateModelVersion, &fbb)
    Maneuver_Abridged.add(numAccelPoints: numAccelPoints, &fbb)
    Maneuver_Abridged.addVectorOf(mnvrAccelTimes: mnvrAccelTimes, &fbb)
    Maneuver_Abridged.addVectorOf(mnvrAccels: mnvrAccels, &fbb)
    Maneuver_Abridged.addVectorOf(mnvrAccelUncs: mnvrAccelUncs, &fbb)
    Maneuver_Abridged.add(source: source, &fbb)
    Maneuver_Abridged.add(origin: origin, &fbb)
    Maneuver_Abridged.add(dataMode: dataMode, &fbb)
    Maneuver_Abridged.add(createdAt: createdAt, &fbb)
    Maneuver_Abridged.add(createdBy: createdBy, &fbb)
    Maneuver_Abridged.add(algorithm: algorithm, &fbb)
    Maneuver_Abridged.add(transactionId: transactionId, &fbb)
    Maneuver_Abridged.add(origNetwork: origNetwork, &fbb)
    return Maneuver_Abridged.endManeuver_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.reportTime.p, fieldName: "reportTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eventStartTime.p, fieldName: "eventStartTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eventEndTime.p, fieldName: "eventEndTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.totalBurnTime.p, fieldName: "totalBurnTime", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.odFitEndTime.p, fieldName: "odFitEndTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.uct.p, fieldName: "uct", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.maneuverUnc.p, fieldName: "maneuverUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.characterization.p, fieldName: "characterization", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.characterizationUnc.p, fieldName: "characterizationUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.eventId.p, fieldName: "eventId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSensorId.p, fieldName: "origSensorId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.status.p, fieldName: "status", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.deltaPos.p, fieldName: "deltaPos", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.deltaPosU.p, fieldName: "deltaPosU", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.deltaPosV.p, fieldName: "deltaPosV", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.deltaPosW.p, fieldName: "deltaPosW", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.deltaVel.p, fieldName: "deltaVel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.deltaVelU.p, fieldName: "deltaVelU", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.deltaVelV.p, fieldName: "deltaVelV", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.deltaVelW.p, fieldName: "deltaVelW", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.deltaMass.p, fieldName: "deltaMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.preEventIdElset.p, fieldName: "preEventIdElset", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.preEventElset.p, fieldName: "preEventElset", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.preEventIdStateVector.p, fieldName: "preEventIdStateVector", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.preEventStateVector.p, fieldName: "preEventStateVector", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.prePosX.p, fieldName: "prePosX", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.prePosY.p, fieldName: "prePosY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.prePosZ.p, fieldName: "prePosZ", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.preVelX.p, fieldName: "preVelX", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.preVelY.p, fieldName: "preVelY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.preVelZ.p, fieldName: "preVelZ", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.preRadiationPressCoeff.p, fieldName: "preRadiationPressCoeff", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.preBallisticCoeff.p, fieldName: "preBallisticCoeff", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.preApogee.p, fieldName: "preApogee", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.prePerigee.p, fieldName: "prePerigee", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.preInclination.p, fieldName: "preInclination", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.preEccentricity.p, fieldName: "preEccentricity", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.prePeriod.p, fieldName: "prePeriod", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.preRaan.p, fieldName: "preRaan", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.preSma.p, fieldName: "preSma", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.preGeoLongitude.p, fieldName: "preGeoLongitude", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.preDriftRate.p, fieldName: "preDriftRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.preSigmaU.p, fieldName: "preSigmaU", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.preSigmaV.p, fieldName: "preSigmaV", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.preSigmaW.p, fieldName: "preSigmaW", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postEventIdElset.p, fieldName: "postEventIdElset", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.postEventElset.p, fieldName: "postEventElset", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.postEventIdStateVector.p, fieldName: "postEventIdStateVector", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.postEventStateVector.p, fieldName: "postEventStateVector", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.postPosX.p, fieldName: "postPosX", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postPosY.p, fieldName: "postPosY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postPosZ.p, fieldName: "postPosZ", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postVelX.p, fieldName: "postVelX", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postVelY.p, fieldName: "postVelY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postVelZ.p, fieldName: "postVelZ", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postRadiationPressCoeff.p, fieldName: "postRadiationPressCoeff", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postBallisticCoeff.p, fieldName: "postBallisticCoeff", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postApogee.p, fieldName: "postApogee", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postPerigee.p, fieldName: "postPerigee", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postInclination.p, fieldName: "postInclination", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postEccentricity.p, fieldName: "postEccentricity", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postPeriod.p, fieldName: "postPeriod", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postRaan.p, fieldName: "postRaan", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postSma.p, fieldName: "postSma", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postGeoLongitude.p, fieldName: "postGeoLongitude", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postDriftRate.p, fieldName: "postDriftRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postSigmaU.p, fieldName: "postSigmaU", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postSigmaV.p, fieldName: "postSigmaV", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postSigmaW.p, fieldName: "postSigmaW", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.cov.p, fieldName: "cov", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.postMass.p, fieldName: "postMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.postArea.p, fieldName: "postArea", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.numObs.p, fieldName: "numObs", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.description.p, fieldName: "description", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.descriptor.p, fieldName: "descriptor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.stateModel.p, fieldName: "stateModel", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.stateModelVersion.p, fieldName: "stateModelVersion", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.numAccelPoints.p, fieldName: "numAccelPoints", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.mnvrAccelTimes.p, fieldName: "mnvrAccelTimes", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.mnvrAccels.p, fieldName: "mnvrAccels", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.mnvrAccelUncs.p, fieldName: "mnvrAccelUncs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Maneuver_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.algorithm.p, fieldName: "algorithm", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.transactionId.p, fieldName: "transactionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

