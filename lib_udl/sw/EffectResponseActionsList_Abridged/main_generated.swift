// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// List of actions associated with this effect response.
public struct EffectResponseActionsList_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EFFE" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EffectResponseActionsList_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case summary = 4
    case actionId = 6
    case actionStartTime = 8
    case actionEndTime = 10
    case totStartTime = 12
    case totEndTime = 14
    case actionActorSrcType = 16
    case actionActorSrcId = 18
    case effector = 20
    case targetSrcType = 22
    case targetSrcId = 24
    case actorInterceptLat = 26
    case actorInterceptLon = 28
    case actorInterceptAlt = 30
    case weaponInterceptLat = 32
    case weaponInterceptLon = 34
    case weaponInterceptAlt = 36
    case actionMetrics = 38
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  A summary string describing different aspects of the action.
  ///  Example: /// Example: Example summary
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var summary: String? { let o = _accessor.offset(VTOFFSET.summary.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var summarySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.summary.v) }
  ///  Identifier of this action.
  ///  Example: /// Example: ACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var actionId: String? { let o = _accessor.offset(VTOFFSET.actionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.actionId.v) }
  ///  The desired start time of this task, in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T00:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var actionStartTime: String? { let o = _accessor.offset(VTOFFSET.actionStartTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actionStartTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.actionStartTime.v) }
  ///  The desired end time of this task, in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T00:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var actionEndTime: String? { let o = _accessor.offset(VTOFFSET.actionEndTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actionEndTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.actionEndTime.v) }
  ///  The start time of the asset TOT (time over target), in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T00:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var totStartTime: String? { let o = _accessor.offset(VTOFFSET.totStartTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var totStartTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.totStartTime.v) }
  ///  The end time of the asset TOT (time over target), in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T00:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var totEndTime: String? { let o = _accessor.offset(VTOFFSET.totEndTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var totEndTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.totEndTime.v) }
  ///  The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
  ///  Example: /// Example: AIRCRAFT
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var actionActorSrcType: String? { let o = _accessor.offset(VTOFFSET.actionActorSrcType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actionActorSrcTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.actionActorSrcType.v) }
  ///  The record ID, depending on the type identified in actorSrcType, of the requested asset/actor.
  ///  Example: /// Example: ACTIONACTORSRC-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var actionActorSrcId: String? { let o = _accessor.offset(VTOFFSET.actionActorSrcId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actionActorSrcIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.actionActorSrcId.v) }
  ///  The type of munition or sensor used by this asset/actor.
  ///  Example: /// Example: SENSOR1
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var effector: String? { let o = _accessor.offset(VTOFFSET.effector.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var effectorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.effector.v) }
  ///  The source type of the targetId identifier (POI, TRACK).
  ///  Example: /// Example: POI
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var targetSrcType: String? { let o = _accessor.offset(VTOFFSET.targetSrcType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var targetSrcTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.targetSrcType.v) }
  ///  The POI or TRACK ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
  ///  Example: /// Example: TARGETSRC-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var targetSrcId: String? { let o = _accessor.offset(VTOFFSET.targetSrcId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var targetSrcIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.targetSrcId.v) }
  ///  The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.  -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  public var actorInterceptLat: Double { let o = _accessor.offset(VTOFFSET.actorInterceptLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 180.1
  ///  Constraints: No constraints specified.
  public var actorInterceptLon: Double { let o = _accessor.offset(VTOFFSET.actorInterceptLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The WGS-84 altitude of the asset/actor location at weapon launch, in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var actorInterceptAlt: Double { let o = _accessor.offset(VTOFFSET.actorInterceptAlt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The WGS-84 latitude of the weapon destination location, in degrees.  -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  public var weaponInterceptLat: Double { let o = _accessor.offset(VTOFFSET.weaponInterceptLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The WGS-84 longitude of the weapon destination location, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 180.1
  ///  Constraints: No constraints specified.
  public var weaponInterceptLon: Double { let o = _accessor.offset(VTOFFSET.weaponInterceptLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The WGS-84 altitude of the weapon destination location, in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var weaponInterceptAlt: Double { let o = _accessor.offset(VTOFFSET.weaponInterceptAlt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  List of metrics associated with this action.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasActionMetrics: Bool { let o = _accessor.offset(VTOFFSET.actionMetrics.v); return o == 0 ? false : true }
  public var actionMetricsCount: Int32 { let o = _accessor.offset(VTOFFSET.actionMetrics.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func actionMetrics(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.actionMetrics.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startEffectResponseActionsList_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 18) }
  public static func add(summary: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: summary, at: VTOFFSET.summary.p) }
  public static func add(actionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actionId, at: VTOFFSET.actionId.p) }
  public static func add(actionStartTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actionStartTime, at: VTOFFSET.actionStartTime.p) }
  public static func add(actionEndTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actionEndTime, at: VTOFFSET.actionEndTime.p) }
  public static func add(totStartTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: totStartTime, at: VTOFFSET.totStartTime.p) }
  public static func add(totEndTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: totEndTime, at: VTOFFSET.totEndTime.p) }
  public static func add(actionActorSrcType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actionActorSrcType, at: VTOFFSET.actionActorSrcType.p) }
  public static func add(actionActorSrcId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actionActorSrcId, at: VTOFFSET.actionActorSrcId.p) }
  public static func add(effector: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: effector, at: VTOFFSET.effector.p) }
  public static func add(targetSrcType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: targetSrcType, at: VTOFFSET.targetSrcType.p) }
  public static func add(targetSrcId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: targetSrcId, at: VTOFFSET.targetSrcId.p) }
  public static func add(actorInterceptLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: actorInterceptLat, def: 0.0, at: VTOFFSET.actorInterceptLat.p) }
  public static func add(actorInterceptLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: actorInterceptLon, def: 0.0, at: VTOFFSET.actorInterceptLon.p) }
  public static func add(actorInterceptAlt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: actorInterceptAlt, def: 0.0, at: VTOFFSET.actorInterceptAlt.p) }
  public static func add(weaponInterceptLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: weaponInterceptLat, def: 0.0, at: VTOFFSET.weaponInterceptLat.p) }
  public static func add(weaponInterceptLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: weaponInterceptLon, def: 0.0, at: VTOFFSET.weaponInterceptLon.p) }
  public static func add(weaponInterceptAlt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: weaponInterceptAlt, def: 0.0, at: VTOFFSET.weaponInterceptAlt.p) }
  public static func addVectorOf(actionMetrics: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actionMetrics, at: VTOFFSET.actionMetrics.p) }
  public static func endEffectResponseActionsList_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEffectResponseActionsList_Abridged(
    _ fbb: inout FlatBufferBuilder,
    summaryOffset summary: Offset = Offset(),
    actionIdOffset actionId: Offset = Offset(),
    actionStartTimeOffset actionStartTime: Offset = Offset(),
    actionEndTimeOffset actionEndTime: Offset = Offset(),
    totStartTimeOffset totStartTime: Offset = Offset(),
    totEndTimeOffset totEndTime: Offset = Offset(),
    actionActorSrcTypeOffset actionActorSrcType: Offset = Offset(),
    actionActorSrcIdOffset actionActorSrcId: Offset = Offset(),
    effectorOffset effector: Offset = Offset(),
    targetSrcTypeOffset targetSrcType: Offset = Offset(),
    targetSrcIdOffset targetSrcId: Offset = Offset(),
    actorInterceptLat: Double = 0.0,
    actorInterceptLon: Double = 0.0,
    actorInterceptAlt: Double = 0.0,
    weaponInterceptLat: Double = 0.0,
    weaponInterceptLon: Double = 0.0,
    weaponInterceptAlt: Double = 0.0,
    actionMetricsVectorOffset actionMetrics: Offset = Offset()
  ) -> Offset {
    let __start = EffectResponseActionsList_Abridged.startEffectResponseActionsList_Abridged(&fbb)
    EffectResponseActionsList_Abridged.add(summary: summary, &fbb)
    EffectResponseActionsList_Abridged.add(actionId: actionId, &fbb)
    EffectResponseActionsList_Abridged.add(actionStartTime: actionStartTime, &fbb)
    EffectResponseActionsList_Abridged.add(actionEndTime: actionEndTime, &fbb)
    EffectResponseActionsList_Abridged.add(totStartTime: totStartTime, &fbb)
    EffectResponseActionsList_Abridged.add(totEndTime: totEndTime, &fbb)
    EffectResponseActionsList_Abridged.add(actionActorSrcType: actionActorSrcType, &fbb)
    EffectResponseActionsList_Abridged.add(actionActorSrcId: actionActorSrcId, &fbb)
    EffectResponseActionsList_Abridged.add(effector: effector, &fbb)
    EffectResponseActionsList_Abridged.add(targetSrcType: targetSrcType, &fbb)
    EffectResponseActionsList_Abridged.add(targetSrcId: targetSrcId, &fbb)
    EffectResponseActionsList_Abridged.add(actorInterceptLat: actorInterceptLat, &fbb)
    EffectResponseActionsList_Abridged.add(actorInterceptLon: actorInterceptLon, &fbb)
    EffectResponseActionsList_Abridged.add(actorInterceptAlt: actorInterceptAlt, &fbb)
    EffectResponseActionsList_Abridged.add(weaponInterceptLat: weaponInterceptLat, &fbb)
    EffectResponseActionsList_Abridged.add(weaponInterceptLon: weaponInterceptLon, &fbb)
    EffectResponseActionsList_Abridged.add(weaponInterceptAlt: weaponInterceptAlt, &fbb)
    EffectResponseActionsList_Abridged.addVectorOf(actionMetrics: actionMetrics, &fbb)
    return EffectResponseActionsList_Abridged.endEffectResponseActionsList_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.summary.p, fieldName: "summary", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.actionId.p, fieldName: "actionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.actionStartTime.p, fieldName: "actionStartTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.actionEndTime.p, fieldName: "actionEndTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.totStartTime.p, fieldName: "totStartTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.totEndTime.p, fieldName: "totEndTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.actionActorSrcType.p, fieldName: "actionActorSrcType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.actionActorSrcId.p, fieldName: "actionActorSrcId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.effector.p, fieldName: "effector", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.targetSrcType.p, fieldName: "targetSrcType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.targetSrcId.p, fieldName: "targetSrcId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.actorInterceptLat.p, fieldName: "actorInterceptLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.actorInterceptLon.p, fieldName: "actorInterceptLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.actorInterceptAlt.p, fieldName: "actorInterceptAlt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.weaponInterceptLat.p, fieldName: "weaponInterceptLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.weaponInterceptLon.p, fieldName: "weaponInterceptLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.weaponInterceptAlt.p, fieldName: "weaponInterceptAlt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.actionMetrics.p, fieldName: "actionMetrics", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

