// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Equipment_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Equipment_Full_dataMode_Enum { return .exercise }
  public static var min: Equipment_Full_dataMode_Enum { return .real }
}


///  /// Properties and characteristics of equipment that can be associated with a site or other entity.
public struct Equipment_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EQUI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Equipment_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idParentEquipment = 8
    case idSite = 10
    case idOperatingUnit = 12
    case altEqpId = 14
    case eqpCode = 16
    case eqpIdNum = 18
    case countryCode = 20
    case altCountryCode = 22
    case wac = 24
    case seqNum = 26
    case nomen = 28
    case operStatus = 30
    case condition = 32
    case conditionAvail = 34
    case eval = 36
    case fpa = 38
    case function = 40
    case ident = 42
    case allegiance = 44
    case altAllegiance = 46
    case locReason = 48
    case operAreaPrimary = 50
    case functPrimary = 52
    case coordDatum = 54
    case coord = 56
    case coordDerivAcc = 58
    case lat = 60
    case lon = 62
    case elevMsl = 64
    case elevMslConfLvl = 66
    case elevMslDerivAcc = 68
    case geoidalMslSep = 70
    case milGridSys = 72
    case milGrid = 74
    case utm = 76
    case airDefArea = 78
    case polSubdiv = 80
    case qtyOh = 82
    case symCode = 84
    case classRating = 86
    case recStatus = 88
    case reviewDate = 90
    case resProd = 92
    case referenceDoc = 94
    case srcTyps = 96
    case srcIds = 98
    case equipmentRemarks = 100
    case createdAt = 102
    case createdBy = 104
    case updatedAt = 106
    case updatedBy = 108
    case source = 110
    case origin = 112
    case dataMode = 114
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the Parent equipment record associated with this equipment record.
  ///  Example: /// Example: PARENT-EQUIPMENT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idParentEquipment: String? { let o = _accessor.offset(VTOFFSET.idParentEquipment.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idParentEquipmentSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idParentEquipment.v) }
  ///  Unique identifier of the Site Entity associated with the equipment record.
  ///  Example: /// Example: SITE-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSite: String? { let o = _accessor.offset(VTOFFSET.idSite.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSiteSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSite.v) }
  ///  Unique identifier of the operating unit associated with the equipment record.
  ///  Example: /// Example: UNIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOperatingUnit: String? { let o = _accessor.offset(VTOFFSET.idOperatingUnit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOperatingUnitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOperatingUnit.v) }
  ///  Unique identifier of the Equipment record from the originating system.
  ///  Example: /// Example: ORIG-EQP-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var altEqpId: String? { let o = _accessor.offset(VTOFFSET.altEqpId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altEqpIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altEqpId.v) }
  ///  Designated equipment code assigned to the item of equipment or an abbreviation record type unique identifier. Users should consult the data provider for information on the equipment code structure.
  ///  Example: /// Example: X12345
  ///  Constraints: Minimum length = 0, Maximum length = 7
  public var eqpCode: String? { let o = _accessor.offset(VTOFFSET.eqpCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eqpCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eqpCode.v) }
  ///  Uniquely identifies each item or group of equipment associated with a unit, facility or site.
  ///  Example: /// Example: 001
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var eqpIdNum: String? { let o = _accessor.offset(VTOFFSET.eqpIdNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eqpIdNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eqpIdNum.v) }
  ///  The DoD Standard Country Code designator for the country or political entity to which the equipment geographic coordinates reside. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: IQ
  ///  Constraints: Minimum length = 1, Maximum length = 4
  public var countryCode: String? { let o = _accessor.offset(VTOFFSET.countryCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var countryCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.countryCode.v) }
  ///  Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
  ///  Example: /// Example: IZ
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var altCountryCode: String? { let o = _accessor.offset(VTOFFSET.altCountryCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altCountryCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altCountryCode.v) }
  ///  World Aeronautical Chart identifier for the area in which a designated place is located.
  ///  Example: /// Example: 0427
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var wac: String? { let o = _accessor.offset(VTOFFSET.wac.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var wacSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.wac.v) }
  ///  Provider specific sequential number assigned to the equipment.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var seqNum: Int32 { let o = _accessor.offset(VTOFFSET.seqNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Generic type this specific piece of equipment belongs to, and the identifying nomenclature which describes the equipment.
  ///  Example: /// Example: AMPHIBIOUS WARFARE SHIP
  ///  Constraints: Minimum length = 0, Maximum length = 54
  public var nomen: String? { let o = _accessor.offset(VTOFFSET.nomen.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nomenSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.nomen.v) }
  ///  The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: OPR
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var operStatus: String? { let o = _accessor.offset(VTOFFSET.operStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var operStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.operStatus.v) }
  ///  The physical manner of being or state of existence of the entity.  A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: RDY
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var condition: String? { let o = _accessor.offset(VTOFFSET.condition.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var conditionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.condition.v) }
  ///  Availability of the entity relative to its condition.  Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var conditionAvail: String? { let o = _accessor.offset(VTOFFSET.conditionAvail.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var conditionAvailSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.conditionAvail.v) }
  ///  Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
  ///  Example: /// Example: 7
  ///  Constraints: No constraints specified.
  public var eval: Int32 { let o = _accessor.offset(VTOFFSET.eval.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Functional Production Area (FPA) under the Shared Production Program (SPP).  Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: NOB
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var fpa: String? { let o = _accessor.offset(VTOFFSET.fpa.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fpaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fpa.v) }
  ///  Indicates the function or mission of this equipment, which may or may not be engaged in at any particular time.  Typically refers to a unit, organization, or installation/facility performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: OCC
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var function: String? { let o = _accessor.offset(VTOFFSET.function.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var functionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.function.v) }
  ///  Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
  ///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  ///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  ///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  ///  FAKER: Friendly track, object, or entity acting as an exercise hostile.
  ///  JOKER: Friendly track, object, or entity acting as an exercise suspect.
  ///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  ///  PENDING: Track object which has not been evaluated.
  ///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  ///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  ///  Example: /// Example: FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var ident: String? { let o = _accessor.offset(VTOFFSET.ident.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var identSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ident.v) }
  ///  The DoD Standard Country Code designator for the country or political entity to which the equipment owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: OTHR
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var allegiance: String? { let o = _accessor.offset(VTOFFSET.allegiance.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var allegianceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.allegiance.v) }
  ///  Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
  ///  Example: /// Example: HL
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var altAllegiance: String? { let o = _accessor.offset(VTOFFSET.altAllegiance.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altAllegianceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altAllegiance.v) }
  ///  Indicates the reason that the equipment is at that location. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: GR
  ///  Constraints: Minimum length = 0, Maximum length = 9
  public var locReason: String? { let o = _accessor.offset(VTOFFSET.locReason.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var locReasonSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.locReason.v) }
  ///  Internationally recognized water area in which the vessel is most likely to be deployed or in which it normally operates most frequently.
  ///  Example: /// Example: Territorial Sea
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var operAreaPrimary: String? { let o = _accessor.offset(VTOFFSET.operAreaPrimary.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var operAreaPrimarySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.operAreaPrimary.v) }
  ///  Principal operational function being performed.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: JG
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var functPrimary: String? { let o = _accessor.offset(VTOFFSET.functPrimary.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var functPrimarySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.functPrimary.v) }
  ///  A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: WGS
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var coordDatum: String? { let o = _accessor.offset(VTOFFSET.coordDatum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var coordDatumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.coordDatum.v) }
  ///  Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc. specified in degrees, minute, and seconds.
  ///  Pos. 1-2.  Latitude Degrees     [00-90]
  ///  Pos. 3-4.  Latitude Minutes     [00-59]
  ///  Pos. 5-6.  Latitude Seconds     [00-59]
  ///  Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
  ///  Pos. 10. Latitude Hemisphere       [NS] 
  ///  Pos. 11-13. Longitude Degrees     [00-180] 
  ///  Pos. 14-15. Longitude Minutes     [00-59] 
  ///  Pos. 16-17. Longitude Seconds     [00-59] 
  ///  Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
  ///  Pos. 21. Longitude Hemisphere     [EW]
  ///  Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]].
  ///  Example: /// Example: 340000000N0430000000E
  ///  Constraints: Minimum length = 0, Maximum length = 21
  public var coord: String? { let o = _accessor.offset(VTOFFSET.coord.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var coordSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.coord.v) }
  ///  Indicates the plus or minus error assessed against the method used to derive the coordinate.
  ///  Example: /// Example: 12.345
  ///  Constraints: No constraints specified.
  public var coordDerivAcc: Double { let o = _accessor.offset(VTOFFSET.coordDerivAcc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 39.019242
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -104.251659
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Ground elevation, in meters, of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
  ///  Example: /// Example: 123.45
  ///  Constraints: No constraints specified.
  public var elevMsl: Double { let o = _accessor.offset(VTOFFSET.elevMsl.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy. Confidence level has a range of values from 0 to 100, with 100 being highest level of confidence.
  ///  Example: /// Example: 50
  ///  Constraints: No constraints specified.
  public var elevMslConfLvl: Int32 { let o = _accessor.offset(VTOFFSET.elevMslConfLvl.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Indicates the plus or minus error assessed against the method used to derive the elevation, measured in meters.
  ///  Example: /// Example: 12.34
  ///  Constraints: No constraints specified.
  public var elevMslDerivAcc: Double { let o = _accessor.offset(VTOFFSET.elevMslDerivAcc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The distance between Mean Sea Level and a referenced ellipsoid, measured in meters.
  ///  Example: /// Example: 12.34
  ///  Constraints: No constraints specified.
  public var geoidalMslSep: Double { let o = _accessor.offset(VTOFFSET.geoidalMslSep.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Indicates the grid system used in the development of the milGrid coordinates. Values are:
  ///  UPS - Universal Polar System
  ///  UTM - Universal Transverse Mercator.
  ///  Example: /// Example: UTM
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var milGridSys: String? { let o = _accessor.offset(VTOFFSET.milGridSys.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var milGridSysSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.milGridSys.v) }
  ///  The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
  ///  4Q (grid zone designator, GZD)
  ///  FJ (the 100,000-meter square identifier)
  ///  12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
  ///  Example: /// Example: 4QFJ12345678
  ///  Constraints: Minimum length = 0, Maximum length = 15
  public var milGrid: String? { let o = _accessor.offset(VTOFFSET.milGrid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var milGridSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.milGrid.v) }
  ///  Universal Transverse Mercator (UTM) grid coordinates.
  ///  Pos. 1-2, UTM Zone Column   [01-60
  ///  Pos. 3, UTM Zone Row   [C-HJ-NP-X]
  ///  Pos. 4, UTM False Easting   [0-9]
  ///  Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
  ///  Pos. 10-11, UTM False Northing    [0-9][0-9]
  ///  Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
  ///  Example: /// Example: 19P4390691376966
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var utm: String? { let o = _accessor.offset(VTOFFSET.utm.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var utmSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.utm.v) }
  ///  Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
  ///  Example: /// Example: AL006
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var airDefArea: String? { let o = _accessor.offset(VTOFFSET.airDefArea.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var airDefAreaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.airDefArea.v) }
  ///  Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: IZ07
  ///  Constraints: Minimum length = 0, Maximum length = 7
  public var polSubdiv: String? { let o = _accessor.offset(VTOFFSET.polSubdiv.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var polSubdivSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.polSubdiv.v) }
  ///  Relative to the parent entity, the total number of military personnel or equipment assessed to be on-hand (OH).
  ///  Example: /// Example: 7
  ///  Constraints: No constraints specified.
  public var qtyOh: Int32 { let o = _accessor.offset(VTOFFSET.qtyOh.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
  ///  Example: /// Example: SOGPU----------
  ///  Constraints: Minimum length = 0, Maximum length = 15
  public var symCode: String? { let o = _accessor.offset(VTOFFSET.symCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var symCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.symCode.v) }
  ///  Indicates the importance of the equipment. Referenced, but not constrained to, the following class ratings type classifications.
  ///  0 - Not of significant importance of the system
  ///  1 - Primary importance to system
  ///  2 - Secondary importance to system
  ///  3 - Tertiary importance to system
  ///  O - Other. Explain in Remarks.
  ///  Example: /// Example: 1
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var classRating: String? { let o = _accessor.offset(VTOFFSET.classRating.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classRatingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classRating.v) }
  ///  Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Referenced, but not constrained to, the following record status type classifications.
  ///  A - Active
  ///  I - Inactive
  ///  K - Acknowledged
  ///  L - Local
  ///  Q - A nominated (NOM) or Data Change Request (DCR) record
  ///  R - Production reduced by CMD decision
  ///  W - Working Record.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var recStatus: String? { let o = _accessor.offset(VTOFFSET.recStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var recStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.recStatus.v) }
  ///  Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
  ///  Example: /// Example: 2008-06-10
  ///  Constraints: No constraints specified.
  public var reviewDate: String? { let o = _accessor.offset(VTOFFSET.reviewDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reviewDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reviewDate.v) }
  ///  Responsible Producer - Organization that is responsible for the maintenance of the record.
  ///  Example: /// Example: RT
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var resProd: String? { let o = _accessor.offset(VTOFFSET.resProd.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var resProdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.resProd.v) }
  ///  The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: Provider Reference Documentation
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var referenceDoc: String? { let o = _accessor.offset(VTOFFSET.referenceDoc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var referenceDocSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.referenceDoc.v) }
  ///  Array of UDL record types such as AIRCRAFT, VESSEL, EO, MTI that are related to this equipment record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['AIRCRAFT']
  ///  Constraints: No constraints specified.
  public var hasSrcTyps: Bool { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? false : true }
  public var srcTypsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcTyps(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of UUID(s) of the UDL data record(s) that are related to this equipment record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
  ///  Example: /// Example: ['SRC_ID_1']
  ///  Constraints: No constraints specified.
  public var hasSrcIds: Bool { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? false : true }
  public var srcIdsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcIds(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasEquipmentRemarks: Bool { let o = _accessor.offset(VTOFFSET.equipmentRemarks.v); return o == 0 ? false : true }
  public var equipmentRemarksCount: Int32 { let o = _accessor.offset(VTOFFSET.equipmentRemarks.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func equipmentRemarks(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.equipmentRemarks.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Equipment_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Equipment_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startEquipment_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 56) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idParentEquipment: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idParentEquipment, at: VTOFFSET.idParentEquipment.p) }
  public static func add(idSite: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSite, at: VTOFFSET.idSite.p) }
  public static func add(idOperatingUnit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOperatingUnit, at: VTOFFSET.idOperatingUnit.p) }
  public static func add(altEqpId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altEqpId, at: VTOFFSET.altEqpId.p) }
  public static func add(eqpCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eqpCode, at: VTOFFSET.eqpCode.p) }
  public static func add(eqpIdNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eqpIdNum, at: VTOFFSET.eqpIdNum.p) }
  public static func add(countryCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: countryCode, at: VTOFFSET.countryCode.p) }
  public static func add(altCountryCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altCountryCode, at: VTOFFSET.altCountryCode.p) }
  public static func add(wac: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wac, at: VTOFFSET.wac.p) }
  public static func add(seqNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: seqNum, def: 0, at: VTOFFSET.seqNum.p) }
  public static func add(nomen: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: nomen, at: VTOFFSET.nomen.p) }
  public static func add(operStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: operStatus, at: VTOFFSET.operStatus.p) }
  public static func add(condition: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: condition, at: VTOFFSET.condition.p) }
  public static func add(conditionAvail: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: conditionAvail, at: VTOFFSET.conditionAvail.p) }
  public static func add(eval: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: eval, def: 0, at: VTOFFSET.eval.p) }
  public static func add(fpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fpa, at: VTOFFSET.fpa.p) }
  public static func add(function: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: function, at: VTOFFSET.function.p) }
  public static func add(ident: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ident, at: VTOFFSET.ident.p) }
  public static func add(allegiance: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: allegiance, at: VTOFFSET.allegiance.p) }
  public static func add(altAllegiance: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altAllegiance, at: VTOFFSET.altAllegiance.p) }
  public static func add(locReason: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: locReason, at: VTOFFSET.locReason.p) }
  public static func add(operAreaPrimary: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: operAreaPrimary, at: VTOFFSET.operAreaPrimary.p) }
  public static func add(functPrimary: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: functPrimary, at: VTOFFSET.functPrimary.p) }
  public static func add(coordDatum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: coordDatum, at: VTOFFSET.coordDatum.p) }
  public static func add(coord: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: coord, at: VTOFFSET.coord.p) }
  public static func add(coordDerivAcc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: coordDerivAcc, def: 0.0, at: VTOFFSET.coordDerivAcc.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(elevMsl: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevMsl, def: 0.0, at: VTOFFSET.elevMsl.p) }
  public static func add(elevMslConfLvl: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevMslConfLvl, def: 0, at: VTOFFSET.elevMslConfLvl.p) }
  public static func add(elevMslDerivAcc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevMslDerivAcc, def: 0.0, at: VTOFFSET.elevMslDerivAcc.p) }
  public static func add(geoidalMslSep: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: geoidalMslSep, def: 0.0, at: VTOFFSET.geoidalMslSep.p) }
  public static func add(milGridSys: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: milGridSys, at: VTOFFSET.milGridSys.p) }
  public static func add(milGrid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: milGrid, at: VTOFFSET.milGrid.p) }
  public static func add(utm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: utm, at: VTOFFSET.utm.p) }
  public static func add(airDefArea: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: airDefArea, at: VTOFFSET.airDefArea.p) }
  public static func add(polSubdiv: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: polSubdiv, at: VTOFFSET.polSubdiv.p) }
  public static func add(qtyOh: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: qtyOh, def: 0, at: VTOFFSET.qtyOh.p) }
  public static func add(symCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: symCode, at: VTOFFSET.symCode.p) }
  public static func add(classRating: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classRating, at: VTOFFSET.classRating.p) }
  public static func add(recStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: recStatus, at: VTOFFSET.recStatus.p) }
  public static func add(reviewDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reviewDate, at: VTOFFSET.reviewDate.p) }
  public static func add(resProd: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: resProd, at: VTOFFSET.resProd.p) }
  public static func add(referenceDoc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: referenceDoc, at: VTOFFSET.referenceDoc.p) }
  public static func addVectorOf(srcTyps: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcTyps, at: VTOFFSET.srcTyps.p) }
  public static func addVectorOf(srcIds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcIds, at: VTOFFSET.srcIds.p) }
  public static func addVectorOf(equipmentRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: equipmentRemarks, at: VTOFFSET.equipmentRemarks.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: Equipment_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endEquipment_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEquipment_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idParentEquipmentOffset idParentEquipment: Offset = Offset(),
    idSiteOffset idSite: Offset = Offset(),
    idOperatingUnitOffset idOperatingUnit: Offset = Offset(),
    altEqpIdOffset altEqpId: Offset = Offset(),
    eqpCodeOffset eqpCode: Offset = Offset(),
    eqpIdNumOffset eqpIdNum: Offset = Offset(),
    countryCodeOffset countryCode: Offset = Offset(),
    altCountryCodeOffset altCountryCode: Offset = Offset(),
    wacOffset wac: Offset = Offset(),
    seqNum: Int32 = 0,
    nomenOffset nomen: Offset = Offset(),
    operStatusOffset operStatus: Offset = Offset(),
    conditionOffset condition: Offset = Offset(),
    conditionAvailOffset conditionAvail: Offset = Offset(),
    eval: Int32 = 0,
    fpaOffset fpa: Offset = Offset(),
    functionOffset function: Offset = Offset(),
    identOffset ident: Offset = Offset(),
    allegianceOffset allegiance: Offset = Offset(),
    altAllegianceOffset altAllegiance: Offset = Offset(),
    locReasonOffset locReason: Offset = Offset(),
    operAreaPrimaryOffset operAreaPrimary: Offset = Offset(),
    functPrimaryOffset functPrimary: Offset = Offset(),
    coordDatumOffset coordDatum: Offset = Offset(),
    coordOffset coord: Offset = Offset(),
    coordDerivAcc: Double = 0.0,
    lat: Double = 0.0,
    lon: Double = 0.0,
    elevMsl: Double = 0.0,
    elevMslConfLvl: Int32 = 0,
    elevMslDerivAcc: Double = 0.0,
    geoidalMslSep: Double = 0.0,
    milGridSysOffset milGridSys: Offset = Offset(),
    milGridOffset milGrid: Offset = Offset(),
    utmOffset utm: Offset = Offset(),
    airDefAreaOffset airDefArea: Offset = Offset(),
    polSubdivOffset polSubdiv: Offset = Offset(),
    qtyOh: Int32 = 0,
    symCodeOffset symCode: Offset = Offset(),
    classRatingOffset classRating: Offset = Offset(),
    recStatusOffset recStatus: Offset = Offset(),
    reviewDateOffset reviewDate: Offset = Offset(),
    resProdOffset resProd: Offset = Offset(),
    referenceDocOffset referenceDoc: Offset = Offset(),
    srcTypsVectorOffset srcTyps: Offset = Offset(),
    srcIdsVectorOffset srcIds: Offset = Offset(),
    equipmentRemarksVectorOffset equipmentRemarks: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: Equipment_Full_dataMode_Enum = .real
  ) -> Offset {
    let __start = Equipment_Full.startEquipment_Full(&fbb)
    Equipment_Full.add(id: id, &fbb)
    Equipment_Full.add(classificationMarking: classificationMarking, &fbb)
    Equipment_Full.add(idParentEquipment: idParentEquipment, &fbb)
    Equipment_Full.add(idSite: idSite, &fbb)
    Equipment_Full.add(idOperatingUnit: idOperatingUnit, &fbb)
    Equipment_Full.add(altEqpId: altEqpId, &fbb)
    Equipment_Full.add(eqpCode: eqpCode, &fbb)
    Equipment_Full.add(eqpIdNum: eqpIdNum, &fbb)
    Equipment_Full.add(countryCode: countryCode, &fbb)
    Equipment_Full.add(altCountryCode: altCountryCode, &fbb)
    Equipment_Full.add(wac: wac, &fbb)
    Equipment_Full.add(seqNum: seqNum, &fbb)
    Equipment_Full.add(nomen: nomen, &fbb)
    Equipment_Full.add(operStatus: operStatus, &fbb)
    Equipment_Full.add(condition: condition, &fbb)
    Equipment_Full.add(conditionAvail: conditionAvail, &fbb)
    Equipment_Full.add(eval: eval, &fbb)
    Equipment_Full.add(fpa: fpa, &fbb)
    Equipment_Full.add(function: function, &fbb)
    Equipment_Full.add(ident: ident, &fbb)
    Equipment_Full.add(allegiance: allegiance, &fbb)
    Equipment_Full.add(altAllegiance: altAllegiance, &fbb)
    Equipment_Full.add(locReason: locReason, &fbb)
    Equipment_Full.add(operAreaPrimary: operAreaPrimary, &fbb)
    Equipment_Full.add(functPrimary: functPrimary, &fbb)
    Equipment_Full.add(coordDatum: coordDatum, &fbb)
    Equipment_Full.add(coord: coord, &fbb)
    Equipment_Full.add(coordDerivAcc: coordDerivAcc, &fbb)
    Equipment_Full.add(lat: lat, &fbb)
    Equipment_Full.add(lon: lon, &fbb)
    Equipment_Full.add(elevMsl: elevMsl, &fbb)
    Equipment_Full.add(elevMslConfLvl: elevMslConfLvl, &fbb)
    Equipment_Full.add(elevMslDerivAcc: elevMslDerivAcc, &fbb)
    Equipment_Full.add(geoidalMslSep: geoidalMslSep, &fbb)
    Equipment_Full.add(milGridSys: milGridSys, &fbb)
    Equipment_Full.add(milGrid: milGrid, &fbb)
    Equipment_Full.add(utm: utm, &fbb)
    Equipment_Full.add(airDefArea: airDefArea, &fbb)
    Equipment_Full.add(polSubdiv: polSubdiv, &fbb)
    Equipment_Full.add(qtyOh: qtyOh, &fbb)
    Equipment_Full.add(symCode: symCode, &fbb)
    Equipment_Full.add(classRating: classRating, &fbb)
    Equipment_Full.add(recStatus: recStatus, &fbb)
    Equipment_Full.add(reviewDate: reviewDate, &fbb)
    Equipment_Full.add(resProd: resProd, &fbb)
    Equipment_Full.add(referenceDoc: referenceDoc, &fbb)
    Equipment_Full.addVectorOf(srcTyps: srcTyps, &fbb)
    Equipment_Full.addVectorOf(srcIds: srcIds, &fbb)
    Equipment_Full.addVectorOf(equipmentRemarks: equipmentRemarks, &fbb)
    Equipment_Full.add(createdAt: createdAt, &fbb)
    Equipment_Full.add(createdBy: createdBy, &fbb)
    Equipment_Full.add(updatedAt: updatedAt, &fbb)
    Equipment_Full.add(updatedBy: updatedBy, &fbb)
    Equipment_Full.add(source: source, &fbb)
    Equipment_Full.add(origin: origin, &fbb)
    Equipment_Full.add(dataMode: dataMode, &fbb)
    return Equipment_Full.endEquipment_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idParentEquipment.p, fieldName: "idParentEquipment", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSite.p, fieldName: "idSite", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOperatingUnit.p, fieldName: "idOperatingUnit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altEqpId.p, fieldName: "altEqpId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eqpCode.p, fieldName: "eqpCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eqpIdNum.p, fieldName: "eqpIdNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.countryCode.p, fieldName: "countryCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altCountryCode.p, fieldName: "altCountryCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.wac.p, fieldName: "wac", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.seqNum.p, fieldName: "seqNum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.nomen.p, fieldName: "nomen", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.operStatus.p, fieldName: "operStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.condition.p, fieldName: "condition", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.conditionAvail.p, fieldName: "conditionAvail", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eval.p, fieldName: "eval", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.fpa.p, fieldName: "fpa", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.function.p, fieldName: "function", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ident.p, fieldName: "ident", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.allegiance.p, fieldName: "allegiance", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altAllegiance.p, fieldName: "altAllegiance", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.locReason.p, fieldName: "locReason", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.operAreaPrimary.p, fieldName: "operAreaPrimary", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.functPrimary.p, fieldName: "functPrimary", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.coordDatum.p, fieldName: "coordDatum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.coord.p, fieldName: "coord", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.coordDerivAcc.p, fieldName: "coordDerivAcc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevMsl.p, fieldName: "elevMsl", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevMslConfLvl.p, fieldName: "elevMslConfLvl", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.elevMslDerivAcc.p, fieldName: "elevMslDerivAcc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.geoidalMslSep.p, fieldName: "geoidalMslSep", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.milGridSys.p, fieldName: "milGridSys", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.milGrid.p, fieldName: "milGrid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.utm.p, fieldName: "utm", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.airDefArea.p, fieldName: "airDefArea", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.polSubdiv.p, fieldName: "polSubdiv", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.qtyOh.p, fieldName: "qtyOh", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.symCode.p, fieldName: "symCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classRating.p, fieldName: "classRating", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.recStatus.p, fieldName: "recStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reviewDate.p, fieldName: "reviewDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.resProd.p, fieldName: "resProd", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.referenceDoc.p, fieldName: "referenceDoc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.srcTyps.p, fieldName: "srcTyps", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.srcIds.p, fieldName: "srcIds", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.equipmentRemarks.p, fieldName: "equipmentRemarks", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Equipment_Full_dataMode_Enum.self)
    _v.finish()
  }
}

