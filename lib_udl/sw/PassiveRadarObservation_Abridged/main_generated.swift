// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum PassiveRadarObservation_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: PassiveRadarObservation_Abridged_dataMode_Enum { return .exercise }
  public static var min: PassiveRadarObservation_Abridged_dataMode_Enum { return .real }
}


///  /// Model representation of observation data for passive radar based sensor phenomenologies. Passive radar is a form of radar that instead of using a dedicated transmitter, as is the case for traditional radar, utilizes radio frequency (RF) energy already in the environment. With an abundance of existing energy available from geographically diverse sources, passive radar offers wide field of view coverage and long observation times. A passive radar system is comprised of separately located transmitter (for example, FM radio stations), a reference receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over a broad angular extent as well as providing a signal at the reference site. The reflected energy is received at the surveillance site for processing with the reference signal. The long observation durations that are possible with this technology enables an accurate orbit to be determined within a single pass.
public struct PassiveRadarObservation_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "PASS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: PassiveRadarObservation_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case obTime = 8
    case idOnOrbit = 10
    case satNo = 12
    case origObjectId = 14
    case idSensor = 16
    case origSensorId = 18
    case idRfemitter = 20
    case idSensorRefReceiver = 22
    case extObservationId = 24
    case taskId = 26
    case trackId = 28
    case obPosition = 30
    case uct = 32
    case azimuth = 34
    case azimuthUnc = 36
    case azimuthBias = 38
    case azimuthRate = 40
    case elevation = 42
    case elevationUnc = 44
    case elevationBias = 46
    case elevationRate = 48
    case delay = 50
    case delayUnc = 52
    case delayBias = 54
    case bistaticRange = 56
    case bistaticRangeUnc = 58
    case bistaticRangeBias = 60
    case bistaticRangeRate = 62
    case bistaticRangeRateUnc = 64
    case bistaticRangeAccel = 66
    case bistaticRangeAccelUnc = 68
    case doppler = 70
    case dopplerUnc = 72
    case coning = 74
    case coningUnc = 76
    case tof = 78
    case tofUnc = 80
    case tofBias = 82
    case accel = 84
    case accelUnc = 86
    case ra = 88
    case declination = 90
    case lat = 92
    case lon = 94
    case alt = 96
    case xvel = 98
    case yvel = 100
    case zvel = 102
    case rcs = 104
    case rcsUnc = 106
    case orthogonalRcs = 108
    case orthogonalRcsUnc = 110
    case snr = 112
    case timingBias = 114
    case transactionId = 116
    case descriptor = 118
    case createdAt = 120
    case createdBy = 122
    case source = 124
    case origin = 126
    case origNetwork = 128
    case sourceDl = 130
    case dataMode = 132
    case type = 134
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Ob detection time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2023-01-24T23:35:26.518152Z
  ///  Constraints: No constraints specified.
  public var obTime: String? { let o = _accessor.offset(VTOFFSET.obTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obTime.v) }
  ///  Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
  ///  Example: /// Example: 40699
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 40699
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
  ///  Example: /// Example: OCULUSA
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origSensorId: String? { let o = _accessor.offset(VTOFFSET.origSensorId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSensorIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSensorId.v) }
  ///  Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
  ///  Example: /// Example: RED_CLIFFS_3ABCRN
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idRfemitter: String? { let o = _accessor.offset(VTOFFSET.idRfemitter.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idRfemitterSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idRfemitter.v) }
  ///  Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
  ///  Example: /// Example: OculusRef1
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensorRefReceiver: String? { let o = _accessor.offset(VTOFFSET.idSensorRefReceiver.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorRefReceiverSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensorRefReceiver.v) }
  ///  Optional external observation identifier provided by the source.
  ///  Example: /// Example: 26892
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var extObservationId: String? { let o = _accessor.offset(VTOFFSET.extObservationId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var extObservationIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.extObservationId.v) }
  ///  Optional identifier to indicate the specific tasking which produced this observation.
  ///  Example: /// Example: TASK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var taskId: String? { let o = _accessor.offset(VTOFFSET.taskId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskId.v) }
  ///  Unique identifier of a track that represents a tracklet for this observation.
  ///  Example: /// Example: 12212
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var trackId: String? { let o = _accessor.offset(VTOFFSET.trackId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var trackIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.trackId.v) }
  ///  The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
  ///  Example: /// Example: FIRST
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var obPosition: String? { let o = _accessor.offset(VTOFFSET.obPosition.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obPositionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obPosition.v) }
  ///  Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var uct: Bool { let o = _accessor.offset(VTOFFSET.uct.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Line of sight azimuth angle in degrees and topocentric frame.
  ///  Example: /// Example: 134.5
  ///  Constraints: No constraints specified.
  public var azimuth: Double { let o = _accessor.offset(VTOFFSET.azimuth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var azimuthUnc: Double { let o = _accessor.offset(VTOFFSET.azimuthUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor azimuth angle bias in degrees.
  ///  Example: /// Example: 0.123
  ///  Constraints: No constraints specified.
  public var azimuthBias: Double { let o = _accessor.offset(VTOFFSET.azimuthBias.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Rate of change of the line of sight azimuth in degrees per second.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var azimuthRate: Double { let o = _accessor.offset(VTOFFSET.azimuthRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line of sight elevation in degrees and topocentric frame.
  ///  Example: /// Example: 76.1
  ///  Constraints: No constraints specified.
  public var elevation: Double { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var elevationUnc: Double { let o = _accessor.offset(VTOFFSET.elevationUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor elevation bias in degrees.
  ///  Example: /// Example: 0.123
  ///  Constraints: No constraints specified.
  public var elevationBias: Double { let o = _accessor.offset(VTOFFSET.elevationBias.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Rate of change of the line of sight elevation in degrees per second.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var elevationRate: Double { let o = _accessor.offset(VTOFFSET.elevationRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).
  ///  Example: /// Example: 0.00505820232809312
  ///  Constraints: No constraints specified.
  public var delay: Double { let o = _accessor.offset(VTOFFSET.delay.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the delay measurement, in seconds.
  ///  Example: /// Example: 3.1e-06
  ///  Constraints: No constraints specified.
  public var delayUnc: Double { let o = _accessor.offset(VTOFFSET.delayUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Delay bias in seconds.
  ///  Example: /// Example: 1.23e-06
  ///  Constraints: No constraints specified.
  public var delayBias: Double { let o = _accessor.offset(VTOFFSET.delayBias.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.
  ///  Example: /// Example: 754.8212
  ///  Constraints: No constraints specified.
  public var bistaticRange: Double { let o = _accessor.offset(VTOFFSET.bistaticRange.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in bistatic range in kilometers.
  ///  Example: /// Example: 5.1
  ///  Constraints: No constraints specified.
  public var bistaticRangeUnc: Double { let o = _accessor.offset(VTOFFSET.bistaticRangeUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor bistatic range bias in kilometers.
  ///  Example: /// Example: 2.34
  ///  Constraints: No constraints specified.
  public var bistaticRangeBias: Double { let o = _accessor.offset(VTOFFSET.bistaticRangeBias.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Rate of change of the bistatic path in kilometers/sec.
  ///  Example: /// Example: -0.30222
  ///  Constraints: No constraints specified.
  public var bistaticRangeRate: Double { let o = _accessor.offset(VTOFFSET.bistaticRangeRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.
  ///  Example: /// Example: 0.123
  ///  Constraints: No constraints specified.
  public var bistaticRangeRateUnc: Double { let o = _accessor.offset(VTOFFSET.bistaticRangeRateUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Bistatic range acceleration in kilometers/sec^2.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var bistaticRangeAccel: Double { let o = _accessor.offset(VTOFFSET.bistaticRangeAccel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  public var bistaticRangeAccelUnc: Double { let o = _accessor.offset(VTOFFSET.bistaticRangeAccelUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Doppler measurement in hertz.
  ///  Example: /// Example: -101.781641000597
  ///  Constraints: No constraints specified.
  public var doppler: Double { let o = _accessor.offset(VTOFFSET.doppler.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the Doppler measurement in hertz.
  ///  Example: /// Example: 0.2
  ///  Constraints: No constraints specified.
  public var dopplerUnc: Double { let o = _accessor.offset(VTOFFSET.dopplerUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Coning angle in degrees.
  ///  Example: /// Example: 60.1
  ///  Constraints: No constraints specified.
  public var coning: Double { let o = _accessor.offset(VTOFFSET.coning.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the coning angle measurement, in degrees.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var coningUnc: Double { let o = _accessor.offset(VTOFFSET.coningUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.
  ///  Example: /// Example: 0.00592856674135648
  ///  Constraints: No constraints specified.
  public var tof: Double { let o = _accessor.offset(VTOFFSET.tof.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in time of flight in seconds.
  ///  Example: /// Example: 3.1e-06
  ///  Constraints: No constraints specified.
  public var tofUnc: Double { let o = _accessor.offset(VTOFFSET.tofUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Time of Flight (TOF) bias in seconds.
  ///  Example: /// Example: 1.23e-06
  ///  Constraints: No constraints specified.
  public var tofBias: Double { let o = _accessor.offset(VTOFFSET.tofBias.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The target Acceleration measurement in kilometers/sec^2 for this observation.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var accel: Double { let o = _accessor.offset(VTOFFSET.accel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  public var accelUnc: Double { let o = _accessor.offset(VTOFFSET.accelUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line of sight right ascension in degrees and J2000 coordinate frame.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var ra: Double { let o = _accessor.offset(VTOFFSET.ra.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line of sight declination angle in degrees and J2000 coordinate frame.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var declination: Double { let o = _accessor.offset(VTOFFSET.declination.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: -35.1181763996856
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 139.613567052763
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
  ///  Example: /// Example: 478.056378
  ///  Constraints: No constraints specified.
  public var alt: Double { let o = _accessor.offset(VTOFFSET.alt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  X velocity of target in kilometers/sec in J2000 coordinate frame.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var xvel: Double { let o = _accessor.offset(VTOFFSET.xvel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Y velocity of target in kilometers/sec in J2000 coordinate frame.
  ///  Example: /// Example: 3.21
  ///  Constraints: No constraints specified.
  public var yvel: Double { let o = _accessor.offset(VTOFFSET.yvel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Z velocity of target in kilometers/sec in J2000 coordinate frame.
  ///  Example: /// Example: 3.12
  ///  Constraints: No constraints specified.
  public var zvel: Double { let o = _accessor.offset(VTOFFSET.zvel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Radar cross section in meters squared for polarization principal.
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  public var rcs: Double { let o = _accessor.offset(VTOFFSET.rcs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var rcsUnc: Double { let o = _accessor.offset(VTOFFSET.rcsUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Radar cross section in meters squared for orthogonal polarization.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var orthogonalRcs: Double { let o = _accessor.offset(VTOFFSET.orthogonalRcs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var orthogonalRcsUnc: Double { let o = _accessor.offset(VTOFFSET.orthogonalRcsUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Signal to noise ratio, in dB.
  ///  Example: /// Example: 17.292053
  ///  Constraints: No constraints specified.
  public var snr: Double { let o = _accessor.offset(VTOFFSET.snr.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor timing bias in seconds.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var timingBias: Double { let o = _accessor.offset(VTOFFSET.timingBias.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var transactionId: String? { let o = _accessor.offset(VTOFFSET.transactionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transactionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transactionId.v) }
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: Descriptor
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var descriptor: String? { let o = _accessor.offset(VTOFFSET.descriptor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.descriptor.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: PassiveRadarObservation_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : PassiveRadarObservation_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
  ///  Example: /// Example: RADAR
  ///  Constraints: No constraints specified.
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  public static func startPassiveRadarObservation_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 66) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(obTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obTime, at: VTOFFSET.obTime.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(origSensorId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSensorId, at: VTOFFSET.origSensorId.p) }
  public static func add(idRfemitter: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idRfemitter, at: VTOFFSET.idRfemitter.p) }
  public static func add(idSensorRefReceiver: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensorRefReceiver, at: VTOFFSET.idSensorRefReceiver.p) }
  public static func add(extObservationId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: extObservationId, at: VTOFFSET.extObservationId.p) }
  public static func add(taskId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskId, at: VTOFFSET.taskId.p) }
  public static func add(trackId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trackId, at: VTOFFSET.trackId.p) }
  public static func add(obPosition: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obPosition, at: VTOFFSET.obPosition.p) }
  public static func add(uct: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: uct, def: false,
   at: VTOFFSET.uct.p) }
  public static func add(azimuth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuth, def: 0.0, at: VTOFFSET.azimuth.p) }
  public static func add(azimuthUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuthUnc, def: 0.0, at: VTOFFSET.azimuthUnc.p) }
  public static func add(azimuthBias: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuthBias, def: 0.0, at: VTOFFSET.azimuthBias.p) }
  public static func add(azimuthRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuthRate, def: 0.0, at: VTOFFSET.azimuthRate.p) }
  public static func add(elevation: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func add(elevationUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevationUnc, def: 0.0, at: VTOFFSET.elevationUnc.p) }
  public static func add(elevationBias: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevationBias, def: 0.0, at: VTOFFSET.elevationBias.p) }
  public static func add(elevationRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevationRate, def: 0.0, at: VTOFFSET.elevationRate.p) }
  public static func add(delay: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: delay, def: 0.0, at: VTOFFSET.delay.p) }
  public static func add(delayUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: delayUnc, def: 0.0, at: VTOFFSET.delayUnc.p) }
  public static func add(delayBias: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: delayBias, def: 0.0, at: VTOFFSET.delayBias.p) }
  public static func add(bistaticRange: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bistaticRange, def: 0.0, at: VTOFFSET.bistaticRange.p) }
  public static func add(bistaticRangeUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bistaticRangeUnc, def: 0.0, at: VTOFFSET.bistaticRangeUnc.p) }
  public static func add(bistaticRangeBias: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bistaticRangeBias, def: 0.0, at: VTOFFSET.bistaticRangeBias.p) }
  public static func add(bistaticRangeRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bistaticRangeRate, def: 0.0, at: VTOFFSET.bistaticRangeRate.p) }
  public static func add(bistaticRangeRateUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bistaticRangeRateUnc, def: 0.0, at: VTOFFSET.bistaticRangeRateUnc.p) }
  public static func add(bistaticRangeAccel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bistaticRangeAccel, def: 0.0, at: VTOFFSET.bistaticRangeAccel.p) }
  public static func add(bistaticRangeAccelUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bistaticRangeAccelUnc, def: 0.0, at: VTOFFSET.bistaticRangeAccelUnc.p) }
  public static func add(doppler: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: doppler, def: 0.0, at: VTOFFSET.doppler.p) }
  public static func add(dopplerUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dopplerUnc, def: 0.0, at: VTOFFSET.dopplerUnc.p) }
  public static func add(coning: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: coning, def: 0.0, at: VTOFFSET.coning.p) }
  public static func add(coningUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: coningUnc, def: 0.0, at: VTOFFSET.coningUnc.p) }
  public static func add(tof: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: tof, def: 0.0, at: VTOFFSET.tof.p) }
  public static func add(tofUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: tofUnc, def: 0.0, at: VTOFFSET.tofUnc.p) }
  public static func add(tofBias: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: tofBias, def: 0.0, at: VTOFFSET.tofBias.p) }
  public static func add(accel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: accel, def: 0.0, at: VTOFFSET.accel.p) }
  public static func add(accelUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: accelUnc, def: 0.0, at: VTOFFSET.accelUnc.p) }
  public static func add(ra: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ra, def: 0.0, at: VTOFFSET.ra.p) }
  public static func add(declination: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: declination, def: 0.0, at: VTOFFSET.declination.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(alt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: alt, def: 0.0, at: VTOFFSET.alt.p) }
  public static func add(xvel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: xvel, def: 0.0, at: VTOFFSET.xvel.p) }
  public static func add(yvel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: yvel, def: 0.0, at: VTOFFSET.yvel.p) }
  public static func add(zvel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: zvel, def: 0.0, at: VTOFFSET.zvel.p) }
  public static func add(rcs: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rcs, def: 0.0, at: VTOFFSET.rcs.p) }
  public static func add(rcsUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rcsUnc, def: 0.0, at: VTOFFSET.rcsUnc.p) }
  public static func add(orthogonalRcs: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: orthogonalRcs, def: 0.0, at: VTOFFSET.orthogonalRcs.p) }
  public static func add(orthogonalRcsUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: orthogonalRcsUnc, def: 0.0, at: VTOFFSET.orthogonalRcsUnc.p) }
  public static func add(snr: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: snr, def: 0.0, at: VTOFFSET.snr.p) }
  public static func add(timingBias: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: timingBias, def: 0.0, at: VTOFFSET.timingBias.p) }
  public static func add(transactionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transactionId, at: VTOFFSET.transactionId.p) }
  public static func add(descriptor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: descriptor, at: VTOFFSET.descriptor.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(dataMode: PassiveRadarObservation_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func endPassiveRadarObservation_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createPassiveRadarObservation_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    obTimeOffset obTime: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    satNo: Int32 = 0,
    origObjectIdOffset origObjectId: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    origSensorIdOffset origSensorId: Offset = Offset(),
    idRfemitterOffset idRfemitter: Offset = Offset(),
    idSensorRefReceiverOffset idSensorRefReceiver: Offset = Offset(),
    extObservationIdOffset extObservationId: Offset = Offset(),
    taskIdOffset taskId: Offset = Offset(),
    trackIdOffset trackId: Offset = Offset(),
    obPositionOffset obPosition: Offset = Offset(),
    uct: Bool = false,
    azimuth: Double = 0.0,
    azimuthUnc: Double = 0.0,
    azimuthBias: Double = 0.0,
    azimuthRate: Double = 0.0,
    elevation: Double = 0.0,
    elevationUnc: Double = 0.0,
    elevationBias: Double = 0.0,
    elevationRate: Double = 0.0,
    delay: Double = 0.0,
    delayUnc: Double = 0.0,
    delayBias: Double = 0.0,
    bistaticRange: Double = 0.0,
    bistaticRangeUnc: Double = 0.0,
    bistaticRangeBias: Double = 0.0,
    bistaticRangeRate: Double = 0.0,
    bistaticRangeRateUnc: Double = 0.0,
    bistaticRangeAccel: Double = 0.0,
    bistaticRangeAccelUnc: Double = 0.0,
    doppler: Double = 0.0,
    dopplerUnc: Double = 0.0,
    coning: Double = 0.0,
    coningUnc: Double = 0.0,
    tof: Double = 0.0,
    tofUnc: Double = 0.0,
    tofBias: Double = 0.0,
    accel: Double = 0.0,
    accelUnc: Double = 0.0,
    ra: Double = 0.0,
    declination: Double = 0.0,
    lat: Double = 0.0,
    lon: Double = 0.0,
    alt: Double = 0.0,
    xvel: Double = 0.0,
    yvel: Double = 0.0,
    zvel: Double = 0.0,
    rcs: Double = 0.0,
    rcsUnc: Double = 0.0,
    orthogonalRcs: Double = 0.0,
    orthogonalRcsUnc: Double = 0.0,
    snr: Double = 0.0,
    timingBias: Double = 0.0,
    transactionIdOffset transactionId: Offset = Offset(),
    descriptorOffset descriptor: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    dataMode: PassiveRadarObservation_Abridged_dataMode_Enum = .real,
    typeOffset type: Offset = Offset()
  ) -> Offset {
    let __start = PassiveRadarObservation_Abridged.startPassiveRadarObservation_Abridged(&fbb)
    PassiveRadarObservation_Abridged.add(id: id, &fbb)
    PassiveRadarObservation_Abridged.add(classificationMarking: classificationMarking, &fbb)
    PassiveRadarObservation_Abridged.add(obTime: obTime, &fbb)
    PassiveRadarObservation_Abridged.add(idOnOrbit: idOnOrbit, &fbb)
    PassiveRadarObservation_Abridged.add(satNo: satNo, &fbb)
    PassiveRadarObservation_Abridged.add(origObjectId: origObjectId, &fbb)
    PassiveRadarObservation_Abridged.add(idSensor: idSensor, &fbb)
    PassiveRadarObservation_Abridged.add(origSensorId: origSensorId, &fbb)
    PassiveRadarObservation_Abridged.add(idRfemitter: idRfemitter, &fbb)
    PassiveRadarObservation_Abridged.add(idSensorRefReceiver: idSensorRefReceiver, &fbb)
    PassiveRadarObservation_Abridged.add(extObservationId: extObservationId, &fbb)
    PassiveRadarObservation_Abridged.add(taskId: taskId, &fbb)
    PassiveRadarObservation_Abridged.add(trackId: trackId, &fbb)
    PassiveRadarObservation_Abridged.add(obPosition: obPosition, &fbb)
    PassiveRadarObservation_Abridged.add(uct: uct, &fbb)
    PassiveRadarObservation_Abridged.add(azimuth: azimuth, &fbb)
    PassiveRadarObservation_Abridged.add(azimuthUnc: azimuthUnc, &fbb)
    PassiveRadarObservation_Abridged.add(azimuthBias: azimuthBias, &fbb)
    PassiveRadarObservation_Abridged.add(azimuthRate: azimuthRate, &fbb)
    PassiveRadarObservation_Abridged.add(elevation: elevation, &fbb)
    PassiveRadarObservation_Abridged.add(elevationUnc: elevationUnc, &fbb)
    PassiveRadarObservation_Abridged.add(elevationBias: elevationBias, &fbb)
    PassiveRadarObservation_Abridged.add(elevationRate: elevationRate, &fbb)
    PassiveRadarObservation_Abridged.add(delay: delay, &fbb)
    PassiveRadarObservation_Abridged.add(delayUnc: delayUnc, &fbb)
    PassiveRadarObservation_Abridged.add(delayBias: delayBias, &fbb)
    PassiveRadarObservation_Abridged.add(bistaticRange: bistaticRange, &fbb)
    PassiveRadarObservation_Abridged.add(bistaticRangeUnc: bistaticRangeUnc, &fbb)
    PassiveRadarObservation_Abridged.add(bistaticRangeBias: bistaticRangeBias, &fbb)
    PassiveRadarObservation_Abridged.add(bistaticRangeRate: bistaticRangeRate, &fbb)
    PassiveRadarObservation_Abridged.add(bistaticRangeRateUnc: bistaticRangeRateUnc, &fbb)
    PassiveRadarObservation_Abridged.add(bistaticRangeAccel: bistaticRangeAccel, &fbb)
    PassiveRadarObservation_Abridged.add(bistaticRangeAccelUnc: bistaticRangeAccelUnc, &fbb)
    PassiveRadarObservation_Abridged.add(doppler: doppler, &fbb)
    PassiveRadarObservation_Abridged.add(dopplerUnc: dopplerUnc, &fbb)
    PassiveRadarObservation_Abridged.add(coning: coning, &fbb)
    PassiveRadarObservation_Abridged.add(coningUnc: coningUnc, &fbb)
    PassiveRadarObservation_Abridged.add(tof: tof, &fbb)
    PassiveRadarObservation_Abridged.add(tofUnc: tofUnc, &fbb)
    PassiveRadarObservation_Abridged.add(tofBias: tofBias, &fbb)
    PassiveRadarObservation_Abridged.add(accel: accel, &fbb)
    PassiveRadarObservation_Abridged.add(accelUnc: accelUnc, &fbb)
    PassiveRadarObservation_Abridged.add(ra: ra, &fbb)
    PassiveRadarObservation_Abridged.add(declination: declination, &fbb)
    PassiveRadarObservation_Abridged.add(lat: lat, &fbb)
    PassiveRadarObservation_Abridged.add(lon: lon, &fbb)
    PassiveRadarObservation_Abridged.add(alt: alt, &fbb)
    PassiveRadarObservation_Abridged.add(xvel: xvel, &fbb)
    PassiveRadarObservation_Abridged.add(yvel: yvel, &fbb)
    PassiveRadarObservation_Abridged.add(zvel: zvel, &fbb)
    PassiveRadarObservation_Abridged.add(rcs: rcs, &fbb)
    PassiveRadarObservation_Abridged.add(rcsUnc: rcsUnc, &fbb)
    PassiveRadarObservation_Abridged.add(orthogonalRcs: orthogonalRcs, &fbb)
    PassiveRadarObservation_Abridged.add(orthogonalRcsUnc: orthogonalRcsUnc, &fbb)
    PassiveRadarObservation_Abridged.add(snr: snr, &fbb)
    PassiveRadarObservation_Abridged.add(timingBias: timingBias, &fbb)
    PassiveRadarObservation_Abridged.add(transactionId: transactionId, &fbb)
    PassiveRadarObservation_Abridged.add(descriptor: descriptor, &fbb)
    PassiveRadarObservation_Abridged.add(createdAt: createdAt, &fbb)
    PassiveRadarObservation_Abridged.add(createdBy: createdBy, &fbb)
    PassiveRadarObservation_Abridged.add(source: source, &fbb)
    PassiveRadarObservation_Abridged.add(origin: origin, &fbb)
    PassiveRadarObservation_Abridged.add(origNetwork: origNetwork, &fbb)
    PassiveRadarObservation_Abridged.add(sourceDl: sourceDl, &fbb)
    PassiveRadarObservation_Abridged.add(dataMode: dataMode, &fbb)
    PassiveRadarObservation_Abridged.add(type: type, &fbb)
    return PassiveRadarObservation_Abridged.endPassiveRadarObservation_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obTime.p, fieldName: "obTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSensorId.p, fieldName: "origSensorId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idRfemitter.p, fieldName: "idRfemitter", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensorRefReceiver.p, fieldName: "idSensorRefReceiver", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.extObservationId.p, fieldName: "extObservationId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskId.p, fieldName: "taskId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.trackId.p, fieldName: "trackId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obPosition.p, fieldName: "obPosition", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.uct.p, fieldName: "uct", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.azimuth.p, fieldName: "azimuth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.azimuthUnc.p, fieldName: "azimuthUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.azimuthBias.p, fieldName: "azimuthBias", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.azimuthRate.p, fieldName: "azimuthRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevationUnc.p, fieldName: "elevationUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevationBias.p, fieldName: "elevationBias", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevationRate.p, fieldName: "elevationRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.delay.p, fieldName: "delay", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.delayUnc.p, fieldName: "delayUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.delayBias.p, fieldName: "delayBias", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bistaticRange.p, fieldName: "bistaticRange", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bistaticRangeUnc.p, fieldName: "bistaticRangeUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bistaticRangeBias.p, fieldName: "bistaticRangeBias", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bistaticRangeRate.p, fieldName: "bistaticRangeRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bistaticRangeRateUnc.p, fieldName: "bistaticRangeRateUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bistaticRangeAccel.p, fieldName: "bistaticRangeAccel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bistaticRangeAccelUnc.p, fieldName: "bistaticRangeAccelUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.doppler.p, fieldName: "doppler", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dopplerUnc.p, fieldName: "dopplerUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.coning.p, fieldName: "coning", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.coningUnc.p, fieldName: "coningUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.tof.p, fieldName: "tof", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.tofUnc.p, fieldName: "tofUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.tofBias.p, fieldName: "tofBias", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.accel.p, fieldName: "accel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.accelUnc.p, fieldName: "accelUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ra.p, fieldName: "ra", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.declination.p, fieldName: "declination", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.alt.p, fieldName: "alt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.xvel.p, fieldName: "xvel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.yvel.p, fieldName: "yvel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.zvel.p, fieldName: "zvel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rcs.p, fieldName: "rcs", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rcsUnc.p, fieldName: "rcsUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.orthogonalRcs.p, fieldName: "orthogonalRcs", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.orthogonalRcsUnc.p, fieldName: "orthogonalRcsUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.snr.p, fieldName: "snr", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.timingBias.p, fieldName: "timingBias", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.transactionId.p, fieldName: "transactionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.descriptor.p, fieldName: "descriptor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: PassiveRadarObservation_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

