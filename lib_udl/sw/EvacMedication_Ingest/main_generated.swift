// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Medication specifics.
public struct EvacMedication_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EVAC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EvacMedication_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case type = 4
    case bodyPart = 6
    case dose = 8
    case adminRoute = 10
    case time = 12
    case comments = 14
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The type of medication administered.   Intended as, but not constrained to, K07.1 Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC, COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL, HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA, PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).
  ///  Example: /// Example: TYLENOL
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Body part location or body part referenced for medication. Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
  ///  Example: /// Example: ARM LEFT BACK
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var bodyPart: String? { let o = _accessor.offset(VTOFFSET.bodyPart.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var bodyPartSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.bodyPart.v) }
  ///  Quantity of medicine or drug administered or recommended to be taken at a particular time.
  ///  Example: /// Example: 800mg
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var dose: String? { let o = _accessor.offset(VTOFFSET.dose.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var doseSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dose.v) }
  ///  Route of medication delivery (e.g. INJECTION, ORAL, etc.).
  ///  Example: /// Example: ORAL
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var adminRoute: String? { let o = _accessor.offset(VTOFFSET.adminRoute.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var adminRouteSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.adminRoute.v) }
  ///  The time that the medication was administered in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-10-15T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var time: String? { let o = _accessor.offset(VTOFFSET.time.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.time.v) }
  ///  Additional comments on the patient's medication information.
  ///  Example: /// Example: Comments on the patient's medication information.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var comments: String? { let o = _accessor.offset(VTOFFSET.comments.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var commentsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.comments.v) }
  public static func startEvacMedication_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 6) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(bodyPart: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: bodyPart, at: VTOFFSET.bodyPart.p) }
  public static func add(dose: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dose, at: VTOFFSET.dose.p) }
  public static func add(adminRoute: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: adminRoute, at: VTOFFSET.adminRoute.p) }
  public static func add(time: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: time, at: VTOFFSET.time.p) }
  public static func add(comments: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: comments, at: VTOFFSET.comments.p) }
  public static func endEvacMedication_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEvacMedication_Ingest(
    _ fbb: inout FlatBufferBuilder,
    typeOffset type: Offset = Offset(),
    bodyPartOffset bodyPart: Offset = Offset(),
    doseOffset dose: Offset = Offset(),
    adminRouteOffset adminRoute: Offset = Offset(),
    timeOffset time: Offset = Offset(),
    commentsOffset comments: Offset = Offset()
  ) -> Offset {
    let __start = EvacMedication_Ingest.startEvacMedication_Ingest(&fbb)
    EvacMedication_Ingest.add(type: type, &fbb)
    EvacMedication_Ingest.add(bodyPart: bodyPart, &fbb)
    EvacMedication_Ingest.add(dose: dose, &fbb)
    EvacMedication_Ingest.add(adminRoute: adminRoute, &fbb)
    EvacMedication_Ingest.add(time: time, &fbb)
    EvacMedication_Ingest.add(comments: comments, &fbb)
    return EvacMedication_Ingest.endEvacMedication_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.bodyPart.p, fieldName: "bodyPart", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dose.p, fieldName: "dose", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.adminRoute.p, fieldName: "adminRoute", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.comments.p, fieldName: "comments", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

