// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum GNSSRawIF_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: GNSSRawIF_Full_dataMode_Enum { return .exercise }
  public static var min: GNSSRawIF_Full_dataMode_Enum { return .real }
}


///  /// Global Navigation Satellite System (GNSS) Raw Intermediate Frequency (IF) data are the recorded streams of raw signal samples after down-conversion of the received signal to IF and prior to any processing onboard the receiving spacecraft.  These data sets are processed in various geophysical applications and used to characterize Electromagnetic Interference (EMI) in the operating environment.
public struct GNSSRawIF_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "GNSS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: GNSSRawIF_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idOnOrbit = 8
    case satNo = 10
    case origObjectId = 12
    case esId = 14
    case receiver = 16
    case boresight = 18
    case quat = 20
    case startIndex = 22
    case startTime = 24
    case endTime = 26
    case startLat = 28
    case startLon = 30
    case startAlt = 32
    case endLat = 34
    case endLon = 36
    case endAlt = 38
    case centerFreq = 40
    case ifFreq = 42
    case sampleRate = 44
    case postFourier = 46
    case sampleType = 48
    case bitDepth = 50
    case diffCodeBias = 52
    case dataRate = 54
    case setId = 56
    case setLength = 58
    case sequenceId = 60
    case fileName = 62
    case srcTyps = 64
    case srcIds = 66
    case fileSize = 68
    case tags = 70
    case createdAt = 72
    case createdBy = 74
    case source = 76
    case origin = 78
    case dataMode = 80
    case origNetwork = 82
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: GNSSRawIF-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the primary satellite on-orbit object.
  ///  Example: /// Example: 32375
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 32375
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: L2045
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris. If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Raw IF records if each receiver is synced to the ephemeris points.
  ///  Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var esId: String? { let o = _accessor.offset(VTOFFSET.esId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var esIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.esId.v) }
  ///  The number or ID of the GNSS receiver associated with this data.  If reporting for multiple receivers a separate record should be generated for each. If null, it  is assumed to indicate that only one receiver is present, or reported.
  ///  Example: /// Example: GPS1
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var receiver: String? { let o = _accessor.offset(VTOFFSET.receiver.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var receiverSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.receiver.v) }
  ///  Unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
  ///  Example: /// Example: [0, 1, 0]
  ///  Constraints: No constraints specified.
  public var hasBoresight: Bool { let o = _accessor.offset(VTOFFSET.boresight.v); return o == 0 ? false : true }
  public var boresightCount: Int32 { let o = _accessor.offset(VTOFFSET.boresight.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func boresight(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.boresight.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at the sample start time (startTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion. The quaternion should be normalized to 1.
  ///  Example: /// Example: [0, -0.2734104, 0.1562345, 0.9491246]
  ///  Constraints: No constraints specified.
  public var hasQuat: Bool { let o = _accessor.offset(VTOFFSET.quat.v); return o == 0 ? false : true }
  public var quatCount: Int32 { let o = _accessor.offset(VTOFFSET.quat.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func quat(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.quat.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The index of the sample within the associated binary file that corresponds to the startTime indicated in this record.  This is especially useful on high sample-rate sensors when some samples are less than one microsecond before the value of startTime.  This index is 0-based.  If null, the startIndex is assumed to be 0.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var startIndex: Int32 { let o = _accessor.offset(VTOFFSET.startIndex.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2022-04-09T18:11:28.919768Z
  ///  Constraints: No constraints specified.
  public var startTime: String? { let o = _accessor.offset(VTOFFSET.startTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.startTime.v) }
  ///  End time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2022-04-09T18:12:28.919768Z
  ///  Constraints: No constraints specified.
  public var endTime: String? { let o = _accessor.offset(VTOFFSET.endTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var endTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.endTime.v) }
  ///  WGS-84 spacecraft latitude sub-point at start time (startTime), represented as -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 38.834
  ///  Constraints: No constraints specified.
  public var startLat: Double { let o = _accessor.offset(VTOFFSET.startLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 spacecraft longitude sub-point at start time (startTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -104.821
  ///  Constraints: No constraints specified.
  public var startLon: Double { let o = _accessor.offset(VTOFFSET.startLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft altitude at start time (startTime), expressed in kilometers above WGS-84 ellipsoid.
  ///  Example: /// Example: 525.664
  ///  Constraints: No constraints specified.
  public var startAlt: Double { let o = _accessor.offset(VTOFFSET.startAlt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 spacecraft latitude sub-point at end time (endTime), represented as -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 38.922
  ///  Constraints: No constraints specified.
  public var endLat: Double { let o = _accessor.offset(VTOFFSET.endLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 spacecraft longitude sub-point at end time (endTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -104.67
  ///  Constraints: No constraints specified.
  public var endLon: Double { let o = _accessor.offset(VTOFFSET.endLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft altitude at end time (endTime), expressed in kilometers above WGS-84 ellipsoid.
  ///  Example: /// Example: 525.626
  ///  Constraints: No constraints specified.
  public var endAlt: Double { let o = _accessor.offset(VTOFFSET.endAlt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The center frequency, in MHz, of the observation bands.  More than one band may be reported in each binary file, so this is an array of the center frequency of each band (including an array of length 1 if only one band is present).
  ///  Example: /// Example: [1227.6, 1575.4]
  ///  Constraints: No constraints specified.
  public var hasCenterFreq: Bool { let o = _accessor.offset(VTOFFSET.centerFreq.v); return o == 0 ? false : true }
  public var centerFreqCount: Int32 { let o = _accessor.offset(VTOFFSET.centerFreq.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func centerFreq(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.centerFreq.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The center frequency, in MHz, after downconversion to intermediate frequency.  If provided, this array should have the same length as centerFreqs.
  ///  Example: /// Example: [4.09, 5.87]
  ///  Constraints: No constraints specified.
  public var hasIfFreq: Bool { let o = _accessor.offset(VTOFFSET.ifFreq.v); return o == 0 ? false : true }
  public var ifFreqCount: Int32 { let o = _accessor.offset(VTOFFSET.ifFreq.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func ifFreq(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.ifFreq.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The number of samples taken per second.
  ///  Example: /// Example: [8000, 9000]
  ///  Constraints: No constraints specified.
  public var hasSampleRate: Bool { let o = _accessor.offset(VTOFFSET.sampleRate.v); return o == 0 ? false : true }
  public var sampleRateCount: Int32 { let o = _accessor.offset(VTOFFSET.sampleRate.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sampleRate(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.sampleRate.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  After converting the raw data in the file, to generate (frequency-space) spectra some sets require an additional transformation or correction based on details of the hardware that recorded it.  This field marks any such transformations.  Currently supported options are NONE (no correction) and MIRRORED (frequency axis is flipped around the corresponding value of ifFreq). If null, it is assumed that NONE applies to all frequency bands.
  ///  Example: /// Example: ['NONE', 'NONE']
  ///  Constraints: No constraints specified.
  public var hasPostFourier: Bool { let o = _accessor.offset(VTOFFSET.postFourier.v); return o == 0 ? false : true }
  public var postFourierCount: Int32 { let o = _accessor.offset(VTOFFSET.postFourier.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func postFourier(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.postFourier.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The sample type associated with the IF data.  REAL for data with only an I-component or COMPLEX for data with both I & Q components.
  ///  Example: /// Example: COMPLEX
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var sampleType: String? { let o = _accessor.offset(VTOFFSET.sampleType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sampleTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sampleType.v) }
  ///  The number of bits in each datum, for example 2 for 2-bit integers or 8 for 8-bit integers.
  ///  Example: /// Example: 8
  ///  Constraints: No constraints specified.
  public var bitDepth: Int32 { let o = _accessor.offset(VTOFFSET.bitDepth.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Differential Code Biases (DCBs) are the systematic errors, or biases, between two GNSS code observations at the same or different frequencies.  If applicable, this field should contain an array of DBC with length equal to the number of frequencies in the binary file.  The reference frequency should show DCB equal to 0.  If null, it is assumed that there is no DCB (all values are 0).
  ///  Example: /// Example: [0.0271, 0.0016]
  ///  Constraints: No constraints specified.
  public var hasDiffCodeBias: Bool { let o = _accessor.offset(VTOFFSET.diffCodeBias.v); return o == 0 ? false : true }
  public var diffCodeBiasCount: Int32 { let o = _accessor.offset(VTOFFSET.diffCodeBias.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func diffCodeBias(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.diffCodeBias.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The amount of data generated per unit time, expressed in Megabytes/minute.
  ///  Example: /// Example: 0.205
  ///  Constraints: No constraints specified.
  public var dataRate: Double { let o = _accessor.offset(VTOFFSET.dataRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  User-defined ID of a set or sequence of records/files.  Used to associate a set of related raw IF records.
  ///  Example: /// Example: 2b0b1b1a-a3c0-4267-894a-0c40cb84a5af
  ///  Constraints: No constraints specified.
  public var setId: String? { let o = _accessor.offset(VTOFFSET.setId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var setIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.setId.v) }
  ///  The number of raw IF records/files in a set.
  ///  Example: /// Example: 7
  ///  Constraints: No constraints specified.
  public var setLength: Int32 { let o = _accessor.offset(VTOFFSET.setLength.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The sequence number of a raw IF record/file within a set.  Sequence number should start at 1.  If null, then it is assumed that the order of records within a raw IF set is not relevant.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var sequenceId: Int32 { let o = _accessor.offset(VTOFFSET.sequenceId.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The file name of the Raw IF Binary file.  The files should be in the Hierarchical Data Format (HDF5).
  ///  Example: /// Example: somefile.hdf5
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var fileName: String? { let o = _accessor.offset(VTOFFSET.fileName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fileNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fileName.v) }
  ///  Array of UDL record types (GNSSSET) associated with this GNSSRawIF record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['GNSSSET']
  ///  Constraints: No constraints specified.
  public var hasSrcTyps: Bool { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? false : true }
  public var srcTypsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcTyps(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of UUIDs of the UDL data records associated with this GNSSRawIF record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/gnssobservationset/{uuid}).
  ///  Example: /// Example: ['GNSSSET_ID']
  ///  Constraints: No constraints specified.
  public var hasSrcIds: Bool { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? false : true }
  public var srcIdsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcIds(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The binary file size, in bytes, auto-populated by the system.  The maximum file size for this service is 5,000,000 Bytes (5 MB). Files exceeding the maximum size will be rejected.
  ///  Example: /// Example: 3168895
  ///  Constraints: No constraints specified.
  public var fileSize: Int64 { let o = _accessor.offset(VTOFFSET.fileSize.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  public var hasTags: Bool { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? false : true }
  public var tagsCount: Int32 { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func tags(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: GNSSRawIF_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : GNSSRawIF_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startGNSSRawIF_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 40) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(esId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: esId, at: VTOFFSET.esId.p) }
  public static func add(receiver: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: receiver, at: VTOFFSET.receiver.p) }
  public static func addVectorOf(boresight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: boresight, at: VTOFFSET.boresight.p) }
  public static func addVectorOf(quat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: quat, at: VTOFFSET.quat.p) }
  public static func add(startIndex: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: startIndex, def: 0, at: VTOFFSET.startIndex.p) }
  public static func add(startTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: startTime, at: VTOFFSET.startTime.p) }
  public static func add(endTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: endTime, at: VTOFFSET.endTime.p) }
  public static func add(startLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: startLat, def: 0.0, at: VTOFFSET.startLat.p) }
  public static func add(startLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: startLon, def: 0.0, at: VTOFFSET.startLon.p) }
  public static func add(startAlt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: startAlt, def: 0.0, at: VTOFFSET.startAlt.p) }
  public static func add(endLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: endLat, def: 0.0, at: VTOFFSET.endLat.p) }
  public static func add(endLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: endLon, def: 0.0, at: VTOFFSET.endLon.p) }
  public static func add(endAlt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: endAlt, def: 0.0, at: VTOFFSET.endAlt.p) }
  public static func addVectorOf(centerFreq: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: centerFreq, at: VTOFFSET.centerFreq.p) }
  public static func addVectorOf(ifFreq: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ifFreq, at: VTOFFSET.ifFreq.p) }
  public static func addVectorOf(sampleRate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sampleRate, at: VTOFFSET.sampleRate.p) }
  public static func addVectorOf(postFourier: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: postFourier, at: VTOFFSET.postFourier.p) }
  public static func add(sampleType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sampleType, at: VTOFFSET.sampleType.p) }
  public static func add(bitDepth: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bitDepth, def: 0, at: VTOFFSET.bitDepth.p) }
  public static func addVectorOf(diffCodeBias: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: diffCodeBias, at: VTOFFSET.diffCodeBias.p) }
  public static func add(dataRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataRate, def: 0.0, at: VTOFFSET.dataRate.p) }
  public static func add(setId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: setId, at: VTOFFSET.setId.p) }
  public static func add(setLength: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: setLength, def: 0, at: VTOFFSET.setLength.p) }
  public static func add(sequenceId: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sequenceId, def: 0, at: VTOFFSET.sequenceId.p) }
  public static func add(fileName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fileName, at: VTOFFSET.fileName.p) }
  public static func addVectorOf(srcTyps: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcTyps, at: VTOFFSET.srcTyps.p) }
  public static func addVectorOf(srcIds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcIds, at: VTOFFSET.srcIds.p) }
  public static func add(fileSize: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fileSize, def: 0, at: VTOFFSET.fileSize.p) }
  public static func addVectorOf(tags: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tags, at: VTOFFSET.tags.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: GNSSRawIF_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endGNSSRawIF_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createGNSSRawIF_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    satNo: Int32 = 0,
    origObjectIdOffset origObjectId: Offset = Offset(),
    esIdOffset esId: Offset = Offset(),
    receiverOffset receiver: Offset = Offset(),
    boresightVectorOffset boresight: Offset = Offset(),
    quatVectorOffset quat: Offset = Offset(),
    startIndex: Int32 = 0,
    startTimeOffset startTime: Offset = Offset(),
    endTimeOffset endTime: Offset = Offset(),
    startLat: Double = 0.0,
    startLon: Double = 0.0,
    startAlt: Double = 0.0,
    endLat: Double = 0.0,
    endLon: Double = 0.0,
    endAlt: Double = 0.0,
    centerFreqVectorOffset centerFreq: Offset = Offset(),
    ifFreqVectorOffset ifFreq: Offset = Offset(),
    sampleRateVectorOffset sampleRate: Offset = Offset(),
    postFourierVectorOffset postFourier: Offset = Offset(),
    sampleTypeOffset sampleType: Offset = Offset(),
    bitDepth: Int32 = 0,
    diffCodeBiasVectorOffset diffCodeBias: Offset = Offset(),
    dataRate: Double = 0.0,
    setIdOffset setId: Offset = Offset(),
    setLength: Int32 = 0,
    sequenceId: Int32 = 0,
    fileNameOffset fileName: Offset = Offset(),
    srcTypsVectorOffset srcTyps: Offset = Offset(),
    srcIdsVectorOffset srcIds: Offset = Offset(),
    fileSize: Int64 = 0,
    tagsVectorOffset tags: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: GNSSRawIF_Full_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = GNSSRawIF_Full.startGNSSRawIF_Full(&fbb)
    GNSSRawIF_Full.add(id: id, &fbb)
    GNSSRawIF_Full.add(classificationMarking: classificationMarking, &fbb)
    GNSSRawIF_Full.add(idOnOrbit: idOnOrbit, &fbb)
    GNSSRawIF_Full.add(satNo: satNo, &fbb)
    GNSSRawIF_Full.add(origObjectId: origObjectId, &fbb)
    GNSSRawIF_Full.add(esId: esId, &fbb)
    GNSSRawIF_Full.add(receiver: receiver, &fbb)
    GNSSRawIF_Full.addVectorOf(boresight: boresight, &fbb)
    GNSSRawIF_Full.addVectorOf(quat: quat, &fbb)
    GNSSRawIF_Full.add(startIndex: startIndex, &fbb)
    GNSSRawIF_Full.add(startTime: startTime, &fbb)
    GNSSRawIF_Full.add(endTime: endTime, &fbb)
    GNSSRawIF_Full.add(startLat: startLat, &fbb)
    GNSSRawIF_Full.add(startLon: startLon, &fbb)
    GNSSRawIF_Full.add(startAlt: startAlt, &fbb)
    GNSSRawIF_Full.add(endLat: endLat, &fbb)
    GNSSRawIF_Full.add(endLon: endLon, &fbb)
    GNSSRawIF_Full.add(endAlt: endAlt, &fbb)
    GNSSRawIF_Full.addVectorOf(centerFreq: centerFreq, &fbb)
    GNSSRawIF_Full.addVectorOf(ifFreq: ifFreq, &fbb)
    GNSSRawIF_Full.addVectorOf(sampleRate: sampleRate, &fbb)
    GNSSRawIF_Full.addVectorOf(postFourier: postFourier, &fbb)
    GNSSRawIF_Full.add(sampleType: sampleType, &fbb)
    GNSSRawIF_Full.add(bitDepth: bitDepth, &fbb)
    GNSSRawIF_Full.addVectorOf(diffCodeBias: diffCodeBias, &fbb)
    GNSSRawIF_Full.add(dataRate: dataRate, &fbb)
    GNSSRawIF_Full.add(setId: setId, &fbb)
    GNSSRawIF_Full.add(setLength: setLength, &fbb)
    GNSSRawIF_Full.add(sequenceId: sequenceId, &fbb)
    GNSSRawIF_Full.add(fileName: fileName, &fbb)
    GNSSRawIF_Full.addVectorOf(srcTyps: srcTyps, &fbb)
    GNSSRawIF_Full.addVectorOf(srcIds: srcIds, &fbb)
    GNSSRawIF_Full.add(fileSize: fileSize, &fbb)
    GNSSRawIF_Full.addVectorOf(tags: tags, &fbb)
    GNSSRawIF_Full.add(createdAt: createdAt, &fbb)
    GNSSRawIF_Full.add(createdBy: createdBy, &fbb)
    GNSSRawIF_Full.add(source: source, &fbb)
    GNSSRawIF_Full.add(origin: origin, &fbb)
    GNSSRawIF_Full.add(dataMode: dataMode, &fbb)
    GNSSRawIF_Full.add(origNetwork: origNetwork, &fbb)
    return GNSSRawIF_Full.endGNSSRawIF_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.esId.p, fieldName: "esId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.receiver.p, fieldName: "receiver", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.boresight.p, fieldName: "boresight", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.quat.p, fieldName: "quat", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.startIndex.p, fieldName: "startIndex", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.startTime.p, fieldName: "startTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.endTime.p, fieldName: "endTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.startLat.p, fieldName: "startLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.startLon.p, fieldName: "startLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.startAlt.p, fieldName: "startAlt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.endLat.p, fieldName: "endLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.endLon.p, fieldName: "endLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.endAlt.p, fieldName: "endAlt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.centerFreq.p, fieldName: "centerFreq", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.ifFreq.p, fieldName: "ifFreq", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.sampleRate.p, fieldName: "sampleRate", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.postFourier.p, fieldName: "postFourier", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.sampleType.p, fieldName: "sampleType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.bitDepth.p, fieldName: "bitDepth", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.diffCodeBias.p, fieldName: "diffCodeBias", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.dataRate.p, fieldName: "dataRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.setId.p, fieldName: "setId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.setLength.p, fieldName: "setLength", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.sequenceId.p, fieldName: "sequenceId", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.fileName.p, fieldName: "fileName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.srcTyps.p, fieldName: "srcTyps", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.srcIds.p, fieldName: "srcIds", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.fileSize.p, fieldName: "fileSize", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.tags.p, fieldName: "tags", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: GNSSRawIF_Full_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

