// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Schema for Crew Member data.
public struct CrewMembers_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "CREW" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: CrewMembers_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case lastName = 4
    case firstName = 6
    case middleInitial = 8
    case memberId = 10
    case civilian = 12
    case commander = 14
    case last4Ssn = 16
    case dodId = 18
    case dutyPosition = 20
    case crewPosition = 22
    case memberType = 24
    case branch = 26
    case rank = 28
    case wing = 30
    case squadron = 32
    case memberRemarks = 34
    case username = 36
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The last name of the crew member.
  ///  Example: /// Example: Smith
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var lastName: String? { let o = _accessor.offset(VTOFFSET.lastName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastName.v) }
  ///  The first name of the crew member.
  ///  Example: /// Example: Freddie
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var firstName: String? { let o = _accessor.offset(VTOFFSET.firstName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var firstNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.firstName.v) }
  ///  The middle initial of the crew member.
  ///  Example: /// Example: G
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var middleInitial: String? { let o = _accessor.offset(VTOFFSET.middleInitial.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var middleInitialSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.middleInitial.v) }
  ///  Unique identifier of the crew member assigned by the originating source.
  ///  Example: /// Example: 12345678abc
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var memberId: String? { let o = _accessor.offset(VTOFFSET.memberId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var memberIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.memberId.v) }
  ///  Flag indicating this crew member is a civilian or non-military person.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var civilian: Bool { let o = _accessor.offset(VTOFFSET.civilian.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Flag indicating this person is the aircraft commander.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var commander: Bool { let o = _accessor.offset(VTOFFSET.commander.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Last four digits of the crew member's social security number.
  ///  Example: /// Example: 1234
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var last4Ssn: String? { let o = _accessor.offset(VTOFFSET.last4Ssn.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var last4SsnSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.last4Ssn.v) }
  ///  The crew member's 10-digit DoD ID number.
  ///  Example: /// Example: 0123456789
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var dodId: String? { let o = _accessor.offset(VTOFFSET.dodId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dodIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dodId.v) }
  ///  The duty position of the crew member.
  ///  Example: /// Example: IP
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var dutyPosition: String? { let o = _accessor.offset(VTOFFSET.dutyPosition.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dutyPositionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dutyPosition.v) }
  ///  The crew position of the crew member.
  ///  Example: /// Example: EP A
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var crewPosition: String? { let o = _accessor.offset(VTOFFSET.crewPosition.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var crewPositionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.crewPosition.v) }
  ///  Amplifying details about the crew member type (e.g. RAVEN, FCC, COMCAM, AIRCREW, MEP, OTHER, etc.).
  ///  Example: /// Example: AIRCREW
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var memberType: String? { let o = _accessor.offset(VTOFFSET.memberType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var memberTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.memberType.v) }
  ///  The military branch assignment of the crew member.
  ///  Example: /// Example: Air Force
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var branch: String? { let o = _accessor.offset(VTOFFSET.branch.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var branchSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.branch.v) }
  ///  The rank of the crew member.
  ///  Example: /// Example: Capt
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var rank: String? { let o = _accessor.offset(VTOFFSET.rank.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rankSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rank.v) }
  ///  The wing the crew member serves.
  ///  Example: /// Example: 60AMW
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var wing: String? { let o = _accessor.offset(VTOFFSET.wing.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var wingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.wing.v) }
  ///  The squadron the crew member serves.
  ///  Example: /// Example: 21AS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var squadron: String? { let o = _accessor.offset(VTOFFSET.squadron.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var squadronSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.squadron.v) }
  ///  Remarks concerning the crew member.
  ///  Example: /// Example: Crew member remark
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var memberRemarks: String? { let o = _accessor.offset(VTOFFSET.memberRemarks.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var memberRemarksSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.memberRemarks.v) }
  ///  The Mattermost username of this crew member.
  ///  Example: /// Example: fgsmith
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var username: String? { let o = _accessor.offset(VTOFFSET.username.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var usernameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.username.v) }
  public static func startCrewMembers_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 17) }
  public static func add(lastName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastName, at: VTOFFSET.lastName.p) }
  public static func add(firstName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: firstName, at: VTOFFSET.firstName.p) }
  public static func add(middleInitial: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: middleInitial, at: VTOFFSET.middleInitial.p) }
  public static func add(memberId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: memberId, at: VTOFFSET.memberId.p) }
  public static func add(civilian: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: civilian, def: false,
   at: VTOFFSET.civilian.p) }
  public static func add(commander: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: commander, def: false,
   at: VTOFFSET.commander.p) }
  public static func add(last4Ssn: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: last4Ssn, at: VTOFFSET.last4Ssn.p) }
  public static func add(dodId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dodId, at: VTOFFSET.dodId.p) }
  public static func add(dutyPosition: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dutyPosition, at: VTOFFSET.dutyPosition.p) }
  public static func add(crewPosition: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: crewPosition, at: VTOFFSET.crewPosition.p) }
  public static func add(memberType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: memberType, at: VTOFFSET.memberType.p) }
  public static func add(branch: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: branch, at: VTOFFSET.branch.p) }
  public static func add(rank: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rank, at: VTOFFSET.rank.p) }
  public static func add(wing: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wing, at: VTOFFSET.wing.p) }
  public static func add(squadron: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: squadron, at: VTOFFSET.squadron.p) }
  public static func add(memberRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: memberRemarks, at: VTOFFSET.memberRemarks.p) }
  public static func add(username: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: username, at: VTOFFSET.username.p) }
  public static func endCrewMembers_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createCrewMembers_Abridged(
    _ fbb: inout FlatBufferBuilder,
    lastNameOffset lastName: Offset = Offset(),
    firstNameOffset firstName: Offset = Offset(),
    middleInitialOffset middleInitial: Offset = Offset(),
    memberIdOffset memberId: Offset = Offset(),
    civilian: Bool = false,
    commander: Bool = false,
    last4SsnOffset last4Ssn: Offset = Offset(),
    dodIdOffset dodId: Offset = Offset(),
    dutyPositionOffset dutyPosition: Offset = Offset(),
    crewPositionOffset crewPosition: Offset = Offset(),
    memberTypeOffset memberType: Offset = Offset(),
    branchOffset branch: Offset = Offset(),
    rankOffset rank: Offset = Offset(),
    wingOffset wing: Offset = Offset(),
    squadronOffset squadron: Offset = Offset(),
    memberRemarksOffset memberRemarks: Offset = Offset(),
    usernameOffset username: Offset = Offset()
  ) -> Offset {
    let __start = CrewMembers_Abridged.startCrewMembers_Abridged(&fbb)
    CrewMembers_Abridged.add(lastName: lastName, &fbb)
    CrewMembers_Abridged.add(firstName: firstName, &fbb)
    CrewMembers_Abridged.add(middleInitial: middleInitial, &fbb)
    CrewMembers_Abridged.add(memberId: memberId, &fbb)
    CrewMembers_Abridged.add(civilian: civilian, &fbb)
    CrewMembers_Abridged.add(commander: commander, &fbb)
    CrewMembers_Abridged.add(last4Ssn: last4Ssn, &fbb)
    CrewMembers_Abridged.add(dodId: dodId, &fbb)
    CrewMembers_Abridged.add(dutyPosition: dutyPosition, &fbb)
    CrewMembers_Abridged.add(crewPosition: crewPosition, &fbb)
    CrewMembers_Abridged.add(memberType: memberType, &fbb)
    CrewMembers_Abridged.add(branch: branch, &fbb)
    CrewMembers_Abridged.add(rank: rank, &fbb)
    CrewMembers_Abridged.add(wing: wing, &fbb)
    CrewMembers_Abridged.add(squadron: squadron, &fbb)
    CrewMembers_Abridged.add(memberRemarks: memberRemarks, &fbb)
    CrewMembers_Abridged.add(username: username, &fbb)
    return CrewMembers_Abridged.endCrewMembers_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.lastName.p, fieldName: "lastName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.firstName.p, fieldName: "firstName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.middleInitial.p, fieldName: "middleInitial", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.memberId.p, fieldName: "memberId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.civilian.p, fieldName: "civilian", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.commander.p, fieldName: "commander", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.last4Ssn.p, fieldName: "last4Ssn", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dodId.p, fieldName: "dodId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dutyPosition.p, fieldName: "dutyPosition", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.crewPosition.p, fieldName: "crewPosition", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.memberType.p, fieldName: "memberType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.branch.p, fieldName: "branch", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rank.p, fieldName: "rank", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.wing.p, fieldName: "wing", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.squadron.p, fieldName: "squadron", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.memberRemarks.p, fieldName: "memberRemarks", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.username.p, fieldName: "username", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

