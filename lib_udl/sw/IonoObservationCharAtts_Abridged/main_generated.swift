// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Characteristic attributes of a IonoObservation.
public struct IonoObservationCharAtts_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "IONO" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: IonoObservationCharAtts_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case ursiId = 4
    case charName = 6
    case lowerBound = 8
    case upperBound = 10
    case q = 12
    case d = 14
    case climateModelName = 16
    case climateModelOptions = 18
    case climateModelInputParams = 20
    case uncertaintyBoundType = 22
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Characteristic's URSI ID. See the characteristic's description for its corresponding URSI ID.
  ///  Example: /// Example: 04
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var ursiId: String? { let o = _accessor.offset(VTOFFSET.ursiId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ursiIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ursiId.v) }
  ///  Characteristic name. This value should reflect the UDL field name for the corresponding characteristic.
  ///  Example: /// Example: hprimeF2
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var charName: String? { let o = _accessor.offset(VTOFFSET.charName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var charNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.charName.v) }
  ///  Specified characteristic's lower bound. Should be less than or equal to the characteristic's current value as set in this record.
  ///  Example: /// Example: 1.26
  ///  Constraints: No constraints specified.
  public var lowerBound: Double { let o = _accessor.offset(VTOFFSET.lowerBound.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Specified characteristic's upper bound. Should be greater than or equal to the characteristic's current value as set in this record.
  ///  Example: /// Example: 2.57
  ///  Constraints: No constraints specified.
  public var upperBound: Double { let o = _accessor.offset(VTOFFSET.upperBound.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Qualifying letter (Q) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
  ///  Example: /// Example: T
  ///  Constraints: No constraints specified.
  public var q: String? { let o = _accessor.offset(VTOFFSET.q.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var qSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.q.v) }
  ///  Descriptive letter (D) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
  ///  Example: /// Example: K
  ///  Constraints: No constraints specified.
  public var d: String? { let o = _accessor.offset(VTOFFSET.d.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.d.v) }
  ///  Name of the climate model.
  ///  Example: /// Example: IRI
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var climateModelName: String? { let o = _accessor.offset(VTOFFSET.climateModelName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var climateModelNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.climateModelName.v) }
  ///  List of options for the climate model.
  ///  Example: /// Example: ['URSI-88', 'No storm']
  ///  Constraints: No constraints specified.
  public var hasClimateModelOptions: Bool { let o = _accessor.offset(VTOFFSET.climateModelOptions.v); return o == 0 ? false : true }
  public var climateModelOptionsCount: Int32 { let o = _accessor.offset(VTOFFSET.climateModelOptions.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func climateModelOptions(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.climateModelOptions.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Input parameters for the climate model.
  ///  Example: /// Example: ['ISSN1 88.1', 'Option 2']
  ///  Constraints: No constraints specified.
  public var hasClimateModelInputParams: Bool { let o = _accessor.offset(VTOFFSET.climateModelInputParams.v); return o == 0 ? false : true }
  public var climateModelInputParamsCount: Int32 { let o = _accessor.offset(VTOFFSET.climateModelInputParams.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func climateModelInputParams(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.climateModelInputParams.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Uncertainty Bounds (lower and upper) define an interval around reported value that contains true value at the specified probability level. Probability levels are specified in terms of percentile (from 1 to 100) or the standard deviation, sigma (e.g. 1sigma, 2sigma, 3sigma, 5percentile, 10percentile, 25percentile).
  ///  Example: /// Example: 1sigma
  ///  Constraints: No constraints specified.
  public var uncertaintyBoundType: String? { let o = _accessor.offset(VTOFFSET.uncertaintyBoundType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var uncertaintyBoundTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.uncertaintyBoundType.v) }
  public static func startIonoObservationCharAtts_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 10) }
  public static func add(ursiId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ursiId, at: VTOFFSET.ursiId.p) }
  public static func add(charName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: charName, at: VTOFFSET.charName.p) }
  public static func add(lowerBound: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lowerBound, def: 0.0, at: VTOFFSET.lowerBound.p) }
  public static func add(upperBound: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: upperBound, def: 0.0, at: VTOFFSET.upperBound.p) }
  public static func add(q: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: q, at: VTOFFSET.q.p) }
  public static func add(d: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: d, at: VTOFFSET.d.p) }
  public static func add(climateModelName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: climateModelName, at: VTOFFSET.climateModelName.p) }
  public static func addVectorOf(climateModelOptions: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: climateModelOptions, at: VTOFFSET.climateModelOptions.p) }
  public static func addVectorOf(climateModelInputParams: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: climateModelInputParams, at: VTOFFSET.climateModelInputParams.p) }
  public static func add(uncertaintyBoundType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uncertaintyBoundType, at: VTOFFSET.uncertaintyBoundType.p) }
  public static func endIonoObservationCharAtts_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createIonoObservationCharAtts_Abridged(
    _ fbb: inout FlatBufferBuilder,
    ursiIdOffset ursiId: Offset = Offset(),
    charNameOffset charName: Offset = Offset(),
    lowerBound: Double = 0.0,
    upperBound: Double = 0.0,
    qOffset q: Offset = Offset(),
    dOffset d: Offset = Offset(),
    climateModelNameOffset climateModelName: Offset = Offset(),
    climateModelOptionsVectorOffset climateModelOptions: Offset = Offset(),
    climateModelInputParamsVectorOffset climateModelInputParams: Offset = Offset(),
    uncertaintyBoundTypeOffset uncertaintyBoundType: Offset = Offset()
  ) -> Offset {
    let __start = IonoObservationCharAtts_Abridged.startIonoObservationCharAtts_Abridged(&fbb)
    IonoObservationCharAtts_Abridged.add(ursiId: ursiId, &fbb)
    IonoObservationCharAtts_Abridged.add(charName: charName, &fbb)
    IonoObservationCharAtts_Abridged.add(lowerBound: lowerBound, &fbb)
    IonoObservationCharAtts_Abridged.add(upperBound: upperBound, &fbb)
    IonoObservationCharAtts_Abridged.add(q: q, &fbb)
    IonoObservationCharAtts_Abridged.add(d: d, &fbb)
    IonoObservationCharAtts_Abridged.add(climateModelName: climateModelName, &fbb)
    IonoObservationCharAtts_Abridged.addVectorOf(climateModelOptions: climateModelOptions, &fbb)
    IonoObservationCharAtts_Abridged.addVectorOf(climateModelInputParams: climateModelInputParams, &fbb)
    IonoObservationCharAtts_Abridged.add(uncertaintyBoundType: uncertaintyBoundType, &fbb)
    return IonoObservationCharAtts_Abridged.endIonoObservationCharAtts_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.ursiId.p, fieldName: "ursiId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.charName.p, fieldName: "charName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lowerBound.p, fieldName: "lowerBound", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.upperBound.p, fieldName: "upperBound", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.q.p, fieldName: "q", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.d.p, fieldName: "d", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.climateModelName.p, fieldName: "climateModelName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.climateModelOptions.p, fieldName: "climateModelOptions", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.climateModelInputParams.p, fieldName: "climateModelInputParams", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.uncertaintyBoundType.p, fieldName: "uncertaintyBoundType", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

