// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum AirfieldSlot_Full_type_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case working = 0
  ///  No description available.
  case parking = 1
  ///  No description available.
  case takeoff = 2
  ///  No description available.
  case landing = 3
  ///  No description available.
  case other = 4

  public static var max: AirfieldSlot_Full_type_Enum { return .other }
  public static var min: AirfieldSlot_Full_type_Enum { return .working }
}


public enum AirfieldSlot_Full_acSlotCat_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case wide = 0
  ///  No description available.
  case narrow = 1
  ///  No description available.
  case helo = 2
  ///  No description available.
  case all = 3
  ///  No description available.
  case other = 4

  public static var max: AirfieldSlot_Full_acSlotCat_Enum { return .other }
  public static var min: AirfieldSlot_Full_acSlotCat_Enum { return .wide }
}


public enum AirfieldSlot_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: AirfieldSlot_Full_dataMode_Enum { return .exercise }
  public static var min: AirfieldSlot_Full_dataMode_Enum { return .real }
}


///  /// Airfield capacity data. Contains data associated with the airfieldslots available for parking, working, takeoff, and landing at the airfield, as well as the types of aircraft that can be accommodated.
public struct AirfieldSlot_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRF" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AirfieldSlot_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case airfieldName = 8
    case icao = 10
    case idAirfield = 12
    case altAirfieldId = 14
    case name = 16
    case type = 18
    case acSlotCat = 20
    case capacity = 22
    case startTime = 24
    case endTime = 26
    case minSeparation = 28
    case notes = 30
    case createdAt = 32
    case createdBy = 34
    case updatedAt = 36
    case updatedBy = 38
    case sourceDl = 40
    case source = 42
    case origin = 44
    case origNetwork = 46
    case dataMode = 48
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The name of the airfield where this slot is located.
  ///  Example: /// Example: USAF Academy AFLD
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var airfieldName: String? { let o = _accessor.offset(VTOFFSET.airfieldName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var airfieldNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.airfieldName.v) }
  ///  The International Civil Aviation Organization (ICAO) code of the airfield.
  ///  Example: /// Example: KCOS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var icao: String? { let o = _accessor.offset(VTOFFSET.icao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var icaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.icao.v) }
  ///  Unique identifier of the Airfield for which this slot information applies.
  ///  Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idAirfield: String? { let o = _accessor.offset(VTOFFSET.idAirfield.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idAirfieldSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idAirfield.v) }
  ///  Alternate airfield identifier provided by the source.
  ///  Example: /// Example: ALT-AIRFIELD-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var altAirfieldId: String? { let o = _accessor.offset(VTOFFSET.altAirfieldId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altAirfieldIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altAirfieldId.v) }
  ///  Name of this slot.
  ///  Example: /// Example: Apron 5
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING, OTHER).
  ///  Example: /// Example: WORKING
  ///  Constraints: Minimum length = 0, Maximum length = 7
  public var type: AirfieldSlot_Full_type_Enum { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? .working : AirfieldSlot_Full_type_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .working }
  ///  Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL, OTHER).
  ///  Example: /// Example: WIDE
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var acSlotCat: AirfieldSlot_Full_acSlotCat_Enum { let o = _accessor.offset(VTOFFSET.acSlotCat.v); return o == 0 ? .wide : AirfieldSlot_Full_acSlotCat_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .wide }
  ///  Number of aircraft that can fit in this slot at the same time.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var capacity: Int32 { let o = _accessor.offset(VTOFFSET.capacity.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Zulu time this slot is first available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
  ///  Example: /// Example: 0000Z
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var startTime: String? { let o = _accessor.offset(VTOFFSET.startTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.startTime.v) }
  ///  Latest zulu time this slot is available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
  ///  Example: /// Example: 2359Z
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var endTime: String? { let o = _accessor.offset(VTOFFSET.endTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var endTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.endTime.v) }
  ///  Minimum time that must elapse between different aircraft leaving and entering this slot, in minutes.
  ///  Example: /// Example: 7
  ///  Constraints: No constraints specified.
  public var minSeparation: Int32 { let o = _accessor.offset(VTOFFSET.minSeparation.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional notes/comments for this airfield slot.
  ///  Example: /// Example: Notes for an airfield slot.
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: AirfieldSlot_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : AirfieldSlot_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startAirfieldSlot_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 23) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(airfieldName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: airfieldName, at: VTOFFSET.airfieldName.p) }
  public static func add(icao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: icao, at: VTOFFSET.icao.p) }
  public static func add(idAirfield: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idAirfield, at: VTOFFSET.idAirfield.p) }
  public static func add(altAirfieldId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altAirfieldId, at: VTOFFSET.altAirfieldId.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(type: AirfieldSlot_Full_type_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: type.rawValue, def: 0, at: VTOFFSET.type.p) }
  public static func add(acSlotCat: AirfieldSlot_Full_acSlotCat_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: acSlotCat.rawValue, def: 0, at: VTOFFSET.acSlotCat.p) }
  public static func add(capacity: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: capacity, def: 0, at: VTOFFSET.capacity.p) }
  public static func add(startTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: startTime, at: VTOFFSET.startTime.p) }
  public static func add(endTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: endTime, at: VTOFFSET.endTime.p) }
  public static func add(minSeparation: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: minSeparation, def: 0, at: VTOFFSET.minSeparation.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: AirfieldSlot_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endAirfieldSlot_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAirfieldSlot_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    airfieldNameOffset airfieldName: Offset = Offset(),
    icaoOffset icao: Offset = Offset(),
    idAirfieldOffset idAirfield: Offset = Offset(),
    altAirfieldIdOffset altAirfieldId: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    type: AirfieldSlot_Full_type_Enum = .working,
    acSlotCat: AirfieldSlot_Full_acSlotCat_Enum = .wide,
    capacity: Int32 = 0,
    startTimeOffset startTime: Offset = Offset(),
    endTimeOffset endTime: Offset = Offset(),
    minSeparation: Int32 = 0,
    notesOffset notes: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: AirfieldSlot_Full_dataMode_Enum = .real
  ) -> Offset {
    let __start = AirfieldSlot_Full.startAirfieldSlot_Full(&fbb)
    AirfieldSlot_Full.add(id: id, &fbb)
    AirfieldSlot_Full.add(classificationMarking: classificationMarking, &fbb)
    AirfieldSlot_Full.add(airfieldName: airfieldName, &fbb)
    AirfieldSlot_Full.add(icao: icao, &fbb)
    AirfieldSlot_Full.add(idAirfield: idAirfield, &fbb)
    AirfieldSlot_Full.add(altAirfieldId: altAirfieldId, &fbb)
    AirfieldSlot_Full.add(name: name, &fbb)
    AirfieldSlot_Full.add(type: type, &fbb)
    AirfieldSlot_Full.add(acSlotCat: acSlotCat, &fbb)
    AirfieldSlot_Full.add(capacity: capacity, &fbb)
    AirfieldSlot_Full.add(startTime: startTime, &fbb)
    AirfieldSlot_Full.add(endTime: endTime, &fbb)
    AirfieldSlot_Full.add(minSeparation: minSeparation, &fbb)
    AirfieldSlot_Full.add(notes: notes, &fbb)
    AirfieldSlot_Full.add(createdAt: createdAt, &fbb)
    AirfieldSlot_Full.add(createdBy: createdBy, &fbb)
    AirfieldSlot_Full.add(updatedAt: updatedAt, &fbb)
    AirfieldSlot_Full.add(updatedBy: updatedBy, &fbb)
    AirfieldSlot_Full.add(sourceDl: sourceDl, &fbb)
    AirfieldSlot_Full.add(source: source, &fbb)
    AirfieldSlot_Full.add(origin: origin, &fbb)
    AirfieldSlot_Full.add(origNetwork: origNetwork, &fbb)
    AirfieldSlot_Full.add(dataMode: dataMode, &fbb)
    return AirfieldSlot_Full.endAirfieldSlot_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.airfieldName.p, fieldName: "airfieldName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.icao.p, fieldName: "icao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idAirfield.p, fieldName: "idAirfield", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altAirfieldId.p, fieldName: "altAirfieldId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: AirfieldSlot_Full_type_Enum.self)
    try _v.visit(field: VTOFFSET.acSlotCat.p, fieldName: "acSlotCat", required: false, type: AirfieldSlot_Full_acSlotCat_Enum.self)
    try _v.visit(field: VTOFFSET.capacity.p, fieldName: "capacity", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.startTime.p, fieldName: "startTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.endTime.p, fieldName: "endTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.minSeparation.p, fieldName: "minSeparation", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: AirfieldSlot_Full_dataMode_Enum.self)
    _v.finish()
  }
}

