// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
public struct DataLinkRefPoints_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "DATA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: DataLinkRefPoints_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case refPointType = 4
    case refDes = 6
    case refLocName = 8
    case refLat = 10
    case refLon = 12
    case effEventTime = 14
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Type of data link reference point or grid origin.
  ///  Example: /// Example: DLRP
  ///  Constraints: Minimum length = 0, Maximum length = 7
  public var refPointType: String? { let o = _accessor.offset(VTOFFSET.refPointType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var refPointTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.refPointType.v) }
  ///  Identifier to designate a reference point.
  ///  Example: /// Example: L5
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var refDes: String? { let o = _accessor.offset(VTOFFSET.refDes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var refDesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.refDes.v) }
  ///  The location name of the point of reference for this data link message.
  ///  Example: /// Example: FORT BRAGG
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var refLocName: String? { let o = _accessor.offset(VTOFFSET.refLocName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var refLocNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.refLocName.v) }
  ///  WGS84 latitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var refLat: Double { let o = _accessor.offset(VTOFFSET.refLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS84 longitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  public var refLon: Double { let o = _accessor.offset(VTOFFSET.refLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Indicates when a particular event or nickname becomes effective or the old event or nickname is deleted, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-08T13:55:43.123Z
  ///  Constraints: No constraints specified.
  public var effEventTime: String? { let o = _accessor.offset(VTOFFSET.effEventTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var effEventTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.effEventTime.v) }
  public static func startDataLinkRefPoints_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 6) }
  public static func add(refPointType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: refPointType, at: VTOFFSET.refPointType.p) }
  public static func add(refDes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: refDes, at: VTOFFSET.refDes.p) }
  public static func add(refLocName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: refLocName, at: VTOFFSET.refLocName.p) }
  public static func add(refLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: refLat, def: 0.0, at: VTOFFSET.refLat.p) }
  public static func add(refLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: refLon, def: 0.0, at: VTOFFSET.refLon.p) }
  public static func add(effEventTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: effEventTime, at: VTOFFSET.effEventTime.p) }
  public static func endDataLinkRefPoints_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createDataLinkRefPoints_Abridged(
    _ fbb: inout FlatBufferBuilder,
    refPointTypeOffset refPointType: Offset = Offset(),
    refDesOffset refDes: Offset = Offset(),
    refLocNameOffset refLocName: Offset = Offset(),
    refLat: Double = 0.0,
    refLon: Double = 0.0,
    effEventTimeOffset effEventTime: Offset = Offset()
  ) -> Offset {
    let __start = DataLinkRefPoints_Abridged.startDataLinkRefPoints_Abridged(&fbb)
    DataLinkRefPoints_Abridged.add(refPointType: refPointType, &fbb)
    DataLinkRefPoints_Abridged.add(refDes: refDes, &fbb)
    DataLinkRefPoints_Abridged.add(refLocName: refLocName, &fbb)
    DataLinkRefPoints_Abridged.add(refLat: refLat, &fbb)
    DataLinkRefPoints_Abridged.add(refLon: refLon, &fbb)
    DataLinkRefPoints_Abridged.add(effEventTime: effEventTime, &fbb)
    return DataLinkRefPoints_Abridged.endDataLinkRefPoints_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.refPointType.p, fieldName: "refPointType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.refDes.p, fieldName: "refDes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.refLocName.p, fieldName: "refLocName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.refLat.p, fieldName: "refLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.refLon.p, fieldName: "refLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.effEventTime.p, fieldName: "effEventTime", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

