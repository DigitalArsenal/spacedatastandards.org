// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Provides a means of sending Basic Character Set alphanumeric text messages.
public struct MtiFreeText_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "MTIF" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: MtiFreeText_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case f1 = 4
    case f2 = 6
    case f3 = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The originator of the Free Text message.
  ///  Example: /// Example: ORIGINATOR
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var f1: String? { let o = _accessor.offset(VTOFFSET.f1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var f1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.f1.v) }
  ///  The recipient for which the Free Text message is intended.
  ///  Example: /// Example: RECIPIENT
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var f2: String? { let o = _accessor.offset(VTOFFSET.f2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var f2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.f2.v) }
  ///  Free text data message.
  ///  Example: /// Example: TEXT
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var f3: String? { let o = _accessor.offset(VTOFFSET.f3.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var f3SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.f3.v) }
  public static func startMtiFreeText_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(f1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: f1, at: VTOFFSET.f1.p) }
  public static func add(f2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: f2, at: VTOFFSET.f2.p) }
  public static func add(f3: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: f3, at: VTOFFSET.f3.p) }
  public static func endMtiFreeText_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMtiFreeText_Full(
    _ fbb: inout FlatBufferBuilder,
    f1Offset f1: Offset = Offset(),
    f2Offset f2: Offset = Offset(),
    f3Offset f3: Offset = Offset()
  ) -> Offset {
    let __start = MtiFreeText_Full.startMtiFreeText_Full(&fbb)
    MtiFreeText_Full.add(f1: f1, &fbb)
    MtiFreeText_Full.add(f2: f2, &fbb)
    MtiFreeText_Full.add(f3: f3, &fbb)
    return MtiFreeText_Full.endMtiFreeText_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.f1.p, fieldName: "f1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.f2.p, fieldName: "f2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.f3.p, fieldName: "f3", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

