// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Conjunction_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Conjunction_Ingest_dataMode_Enum { return .exercise }
  public static var min: Conjunction_Ingest_dataMode_Enum { return .real }
}


///  /// Stores the results of a particular Conjunction Assessment (CA) run.
public struct Conjunction_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "CONJ" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Conjunction_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idOnOrbit1 = 8
    case idOnOrbit2 = 10
    case type = 12
    case tca = 14
    case missDistance = 16
    case collisionProb = 18
    case collisionProbMethod = 20
    case ephemName1 = 22
    case esId1 = 24
    case ephemName2 = 26
    case esId2 = 28
    case relPosR = 30
    case relPosT = 32
    case relPosN = 34
    case relVelMag = 36
    case relVelR = 38
    case relVelT = 40
    case relVelN = 42
    case screenEntryTime = 44
    case screenExitTime = 46
    case screenVolumeX = 48
    case screenVolumeY = 50
    case screenVolumeZ = 52
    case volShape = 54
    case volEntryTime = 56
    case volExitTime = 58
    case penetrationLevelSigma = 60
    case idStateVector1 = 62
    case lastObTime1 = 64
    case cdAoM1 = 66
    case crAoM1 = 68
    case thrustAccel1 = 70
    case idStateVector2 = 72
    case lastObTime2 = 74
    case cdAoM2 = 76
    case crAoM2 = 78
    case thrustAccel2 = 80
    case comments = 82
    case ccir = 84
    case concernNotes = 86
    case stateDeptNotified = 88
    case ownerContacted = 90
    case rawFileUri = 92
    case messageFor = 94
    case messageId = 96
    case uvwWarn = 98
    case smallRelVelWarning = 100
    case largeRelPosWarning = 102
    case smallCovWarning = 104
    case largeCovWarning = 106
    case transactionId = 108
    case source = 110
    case origin = 112
    case originator = 114
    case eventId = 116
    case descriptor = 118
    case tags = 120
    case dataMode = 122
    case createdAt = 124
    case createdBy = 126
    case stateVector1 = 128
    case stateVector2 = 130
    case satNo1 = 132
    case satNo2 = 134
    case origIdOnOrbit1 = 136
    case origIdOnOrbit2 = 138
    case origNetwork = 140
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: CONJUNCTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the primary satellite on-orbit object, if correlated.
  ///  Example: /// Example: ONORBIT1-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit1: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbit1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit1.v) }
  ///  Unique identifier of the secondary satellite on-orbit object, if correlated.
  ///  Example: /// Example: ONORBIT2-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit2: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbit2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit2.v) }
  ///  The type of data represented in this conjunction record (e.g. CONJUNCTION, CARA-WORKLIST, etc.).  If type is null the record is assumed to be a Conjunction.
  ///  Example: /// Example: CONJUNCTION
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Time of closest approach (TCA) in UTC.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  public var tca: String? { let o = _accessor.offset(VTOFFSET.tca.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tcaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tca.v) }
  ///  Distance between objects at Time of Closest Approach (TCA) in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var missDistance: Double { let o = _accessor.offset(VTOFFSET.missDistance.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Probability of Collision is the probability (denoted p, where 0.0<=p<=1.0), that Object1 and Object2 will collide.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var collisionProb: Double { let o = _accessor.offset(VTOFFSET.collisionProb.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The method that was used to calculate the collision probability, ex. FOSTER-1992.
  ///  Example: /// Example: FOSTER-1992
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var collisionProbMethod: String? { let o = _accessor.offset(VTOFFSET.collisionProbMethod.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var collisionProbMethodSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.collisionProbMethod.v) }
  ///  The filename of the primary (object1) ephemeris used in the screening, if applicable.
  ///  Example: /// Example: MEME_SPCFT_ABC_2180000_ops_nomnvr_unclassified.oem
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var ephemName1: String? { let o = _accessor.offset(VTOFFSET.ephemName1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ephemName1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ephemName1.v) }
  ///  Unique identifier of the parent Ephemeris Set of the primary (object1) ephemeris used in the screening, if applicable.
  ///  Example: /// Example: a2ae2356-6d83-4e4b-896d-ddd1958800fa
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var esId1: String? { let o = _accessor.offset(VTOFFSET.esId1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var esId1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.esId1.v) }
  ///  The filename of the secondary (object2) ephemeris used in the screening, if applicable.
  ///  Example: /// Example: MEME_SPCFT_DEF_2170000_ops_nomnvr_unclassified.txt
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var ephemName2: String? { let o = _accessor.offset(VTOFFSET.ephemName2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ephemName2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ephemName2.v) }
  ///  Unique identifier of the parent Ephemeris Set of the secondary (object2) ephemeris used in the screening, if applicable.
  ///  Example: /// Example: 6fa31433-8beb-4b9b-8bf9-326dbd041c3f
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var esId2: String? { let o = _accessor.offset(VTOFFSET.esId2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var esId2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.esId2.v) }
  ///  Distance between objects along Radial Vector at Time of Closest Approach in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var relPosR: Double { let o = _accessor.offset(VTOFFSET.relPosR.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Distance between objects along Tangential Vector in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var relPosT: Double { let o = _accessor.offset(VTOFFSET.relPosT.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Distance between objects along Normal vector in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var relPosN: Double { let o = _accessor.offset(VTOFFSET.relPosN.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Closing velocity magnitude (relative speed) at Time of Closest Approach in meters/sec.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var relVelMag: Double { let o = _accessor.offset(VTOFFSET.relVelMag.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Closing velocity between objects along Radial Vector at Time of Closest Approach in meters/sec.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var relVelR: Double { let o = _accessor.offset(VTOFFSET.relVelR.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Closing velocity between objects along Tangential Vector in meters/sec.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var relVelT: Double { let o = _accessor.offset(VTOFFSET.relVelT.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Closing velocity between objects along Normal Vector in meters/sec.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var relVelN: Double { let o = _accessor.offset(VTOFFSET.relVelN.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The start time in UTC of the screening period for the conjunction assessment.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  public var screenEntryTime: String? { let o = _accessor.offset(VTOFFSET.screenEntryTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var screenEntryTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.screenEntryTime.v) }
  ///  The stop time in UTC of the screening period for the conjunction assessment.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  public var screenExitTime: String? { let o = _accessor.offset(VTOFFSET.screenExitTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var screenExitTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.screenExitTime.v) }
  ///  Component size of screen in X component of  RTN (Radial, Transverse and Normal) frame in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var screenVolumeX: Double { let o = _accessor.offset(VTOFFSET.screenVolumeX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Component size of screen in Y component of  RTN (Radial, Transverse and Normal) frame in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var screenVolumeY: Double { let o = _accessor.offset(VTOFFSET.screenVolumeY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Component size of screen in Z component of  RTN (Radial, Transverse and Normal) frame in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var screenVolumeZ: Double { let o = _accessor.offset(VTOFFSET.screenVolumeZ.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The shape (BOX, ELLIPSOID) of the screening volume.
  ///  Example: /// Example: ELLIPSOID
  ///  Constraints: Minimum length = 0, Maximum length = 12
  public var volShape: String? { let o = _accessor.offset(VTOFFSET.volShape.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var volShapeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.volShape.v) }
  ///  The time at which the secondary (object2) enters the screening volume, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:02:01.123456Z
  ///  Constraints: No constraints specified.
  public var volEntryTime: String? { let o = _accessor.offset(VTOFFSET.volEntryTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var volEntryTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.volEntryTime.v) }
  ///  The time at which the secondary (object2) exits the screening volume, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:02:28.123456Z
  ///  Constraints: No constraints specified.
  public var volExitTime: String? { let o = _accessor.offset(VTOFFSET.volExitTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var volExitTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.volExitTime.v) }
  ///  Penetration Level Sigma.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var penetrationLevelSigma: Double { let o = _accessor.offset(VTOFFSET.penetrationLevelSigma.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional ID of the UDL State Vector at TCA of the primary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector1.
  ///  Example: /// Example: REF-STATEVECTOR1-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idStateVector1: String? { let o = _accessor.offset(VTOFFSET.idStateVector1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idStateVector1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idStateVector1.v) }
  ///  Time of last positive metric observation of the primary satellite.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  public var lastObTime1: String? { let o = _accessor.offset(VTOFFSET.lastObTime1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastObTime1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastObTime1.v) }
  ///  The value of the primary (object1) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
  ///  Example: /// Example: 0.016386
  ///  Constraints: No constraints specified.
  public var cdAoM1: Double { let o = _accessor.offset(VTOFFSET.cdAoM1.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The value of the primary (object1) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
  ///  Example: /// Example: 0.013814
  ///  Constraints: No constraints specified.
  public var crAoM1: Double { let o = _accessor.offset(VTOFFSET.crAoM1.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The primary (object1) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
  ///  Example: /// Example: 0.033814
  ///  Constraints: No constraints specified.
  public var thrustAccel1: Double { let o = _accessor.offset(VTOFFSET.thrustAccel1.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional ID of the UDL State Vector at TCA of the secondary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector2.
  ///  Example: /// Example: REF-STATEVECTOR2-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idStateVector2: String? { let o = _accessor.offset(VTOFFSET.idStateVector2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idStateVector2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idStateVector2.v) }
  ///  Time of last positive metric observation of the secondary satellite.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  public var lastObTime2: String? { let o = _accessor.offset(VTOFFSET.lastObTime2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastObTime2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastObTime2.v) }
  ///  The value of the secondary (object2) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
  ///  Example: /// Example: 0.016386
  ///  Constraints: No constraints specified.
  public var cdAoM2: Double { let o = _accessor.offset(VTOFFSET.cdAoM2.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The value of the secondary (object2) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
  ///  Example: /// Example: 0.013814
  ///  Constraints: No constraints specified.
  public var crAoM2: Double { let o = _accessor.offset(VTOFFSET.crAoM2.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The secondary (object2) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
  ///  Example: /// Example: 0.033814
  ///  Constraints: No constraints specified.
  public var thrustAccel2: Double { let o = _accessor.offset(VTOFFSET.thrustAccel2.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Additional notes from data providers.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var comments: String? { let o = _accessor.offset(VTOFFSET.comments.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var commentsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.comments.v) }
  ///  Commander's critical information requirements notes.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var ccir: String? { let o = _accessor.offset(VTOFFSET.ccir.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ccirSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ccir.v) }
  ///  Emergency comments.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var concernNotes: String? { let o = _accessor.offset(VTOFFSET.concernNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var concernNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.concernNotes.v) }
  ///  Flag indicating if State department was notified.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var stateDeptNotified: Bool { let o = _accessor.offset(VTOFFSET.stateDeptNotified.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Flag indicating if owner was contacted.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var ownerContacted: Bool { let o = _accessor.offset(VTOFFSET.ownerContacted.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Link to filename associated with JMS record.
  ///  Example: /// Example: Example link
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var rawFileUri: String? { let o = _accessor.offset(VTOFFSET.rawFileUri.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rawFileUriSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rawFileUri.v) }
  ///  Spacecraft name(s) for which the Collision message is provided.
  ///  Example: /// Example: Message for space craft A
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var messageFor: String? { let o = _accessor.offset(VTOFFSET.messageFor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var messageForSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.messageFor.v) }
  ///  JMS provided message ID link.
  ///  Example: /// Example: MESSAGE-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var messageId: String? { let o = _accessor.offset(VTOFFSET.messageId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var messageIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.messageId.v) }
  ///  Used for probability of collision calculation, not Warning/Alert Threshold notifications.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var uvwWarn: Bool { let o = _accessor.offset(VTOFFSET.uvwWarn.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Used for probability of collision calculation, not Warning/Alert Threshold notifications.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var smallRelVelWarning: Bool { let o = _accessor.offset(VTOFFSET.smallRelVelWarning.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Used for probability of collision calculation, not Warning/Alert Threshold notifications.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var largeRelPosWarning: Bool { let o = _accessor.offset(VTOFFSET.largeRelPosWarning.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Used for probability of collision calculation, not Warning/Alert Threshold notifications.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var smallCovWarning: Bool { let o = _accessor.offset(VTOFFSET.smallCovWarning.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Used for probability of collision calculation, not Warning/Alert Threshold notifications.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var largeCovWarning: Bool { let o = _accessor.offset(VTOFFSET.largeCovWarning.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var transactionId: String? { let o = _accessor.offset(VTOFFSET.transactionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transactionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transactionId.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Creating agency or owner/operator (may be different than provider who submitted the conjunction message).
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var originator: String? { let o = _accessor.offset(VTOFFSET.originator.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originatorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.originator.v) }
  ///  Optional source-provided identifier for this conjunction event. In the case where multiple conjunction records are submitted for the same event, this field can be used to tie them together to the same event.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var eventId: String? { let o = _accessor.offset(VTOFFSET.eventId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eventIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eventId.v) }
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: sample_descriptor here
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var descriptor: String? { let o = _accessor.offset(VTOFFSET.descriptor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.descriptor.v) }
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG1']
  ///  Constraints: No constraints specified.
  public var hasTags: Bool { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? false : true }
  public var tagsCount: Int32 { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func tags(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Conjunction_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Conjunction_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var stateVector1: String? { let o = _accessor.offset(VTOFFSET.stateVector1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var stateVector1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.stateVector1.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var stateVector2: String? { let o = _accessor.offset(VTOFFSET.stateVector2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var stateVector2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.stateVector2.v) }
  ///  Satellite/catalog number of the target on-orbit primary object.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var satNo1: Int32 { let o = _accessor.offset(VTOFFSET.satNo1.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Satellite/catalog number of the target on-orbit secondary object.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var satNo2: Int32 { let o = _accessor.offset(VTOFFSET.satNo2.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional place holder for an OnOrbit ID that does not exist in UDL.
  ///  Example: /// Example: ORIGONORBIT1-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origIdOnOrbit1: String? { let o = _accessor.offset(VTOFFSET.origIdOnOrbit1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origIdOnOrbit1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origIdOnOrbit1.v) }
  ///  Optional place holder for an OnOrbit ID that does not exist in UDL.
  ///  Example: /// Example: ORIGONORBIT2-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origIdOnOrbit2: String? { let o = _accessor.offset(VTOFFSET.origIdOnOrbit2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origIdOnOrbit2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origIdOnOrbit2.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startConjunction_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 69) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idOnOrbit1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit1, at: VTOFFSET.idOnOrbit1.p) }
  public static func add(idOnOrbit2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit2, at: VTOFFSET.idOnOrbit2.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(tca: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tca, at: VTOFFSET.tca.p) }
  public static func add(missDistance: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: missDistance, def: 0.0, at: VTOFFSET.missDistance.p) }
  public static func add(collisionProb: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: collisionProb, def: 0.0, at: VTOFFSET.collisionProb.p) }
  public static func add(collisionProbMethod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: collisionProbMethod, at: VTOFFSET.collisionProbMethod.p) }
  public static func add(ephemName1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ephemName1, at: VTOFFSET.ephemName1.p) }
  public static func add(esId1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: esId1, at: VTOFFSET.esId1.p) }
  public static func add(ephemName2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ephemName2, at: VTOFFSET.ephemName2.p) }
  public static func add(esId2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: esId2, at: VTOFFSET.esId2.p) }
  public static func add(relPosR: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: relPosR, def: 0.0, at: VTOFFSET.relPosR.p) }
  public static func add(relPosT: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: relPosT, def: 0.0, at: VTOFFSET.relPosT.p) }
  public static func add(relPosN: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: relPosN, def: 0.0, at: VTOFFSET.relPosN.p) }
  public static func add(relVelMag: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: relVelMag, def: 0.0, at: VTOFFSET.relVelMag.p) }
  public static func add(relVelR: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: relVelR, def: 0.0, at: VTOFFSET.relVelR.p) }
  public static func add(relVelT: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: relVelT, def: 0.0, at: VTOFFSET.relVelT.p) }
  public static func add(relVelN: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: relVelN, def: 0.0, at: VTOFFSET.relVelN.p) }
  public static func add(screenEntryTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: screenEntryTime, at: VTOFFSET.screenEntryTime.p) }
  public static func add(screenExitTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: screenExitTime, at: VTOFFSET.screenExitTime.p) }
  public static func add(screenVolumeX: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: screenVolumeX, def: 0.0, at: VTOFFSET.screenVolumeX.p) }
  public static func add(screenVolumeY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: screenVolumeY, def: 0.0, at: VTOFFSET.screenVolumeY.p) }
  public static func add(screenVolumeZ: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: screenVolumeZ, def: 0.0, at: VTOFFSET.screenVolumeZ.p) }
  public static func add(volShape: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: volShape, at: VTOFFSET.volShape.p) }
  public static func add(volEntryTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: volEntryTime, at: VTOFFSET.volEntryTime.p) }
  public static func add(volExitTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: volExitTime, at: VTOFFSET.volExitTime.p) }
  public static func add(penetrationLevelSigma: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: penetrationLevelSigma, def: 0.0, at: VTOFFSET.penetrationLevelSigma.p) }
  public static func add(idStateVector1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idStateVector1, at: VTOFFSET.idStateVector1.p) }
  public static func add(lastObTime1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastObTime1, at: VTOFFSET.lastObTime1.p) }
  public static func add(cdAoM1: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cdAoM1, def: 0.0, at: VTOFFSET.cdAoM1.p) }
  public static func add(crAoM1: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: crAoM1, def: 0.0, at: VTOFFSET.crAoM1.p) }
  public static func add(thrustAccel1: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: thrustAccel1, def: 0.0, at: VTOFFSET.thrustAccel1.p) }
  public static func add(idStateVector2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idStateVector2, at: VTOFFSET.idStateVector2.p) }
  public static func add(lastObTime2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastObTime2, at: VTOFFSET.lastObTime2.p) }
  public static func add(cdAoM2: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cdAoM2, def: 0.0, at: VTOFFSET.cdAoM2.p) }
  public static func add(crAoM2: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: crAoM2, def: 0.0, at: VTOFFSET.crAoM2.p) }
  public static func add(thrustAccel2: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: thrustAccel2, def: 0.0, at: VTOFFSET.thrustAccel2.p) }
  public static func add(comments: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: comments, at: VTOFFSET.comments.p) }
  public static func add(ccir: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ccir, at: VTOFFSET.ccir.p) }
  public static func add(concernNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: concernNotes, at: VTOFFSET.concernNotes.p) }
  public static func add(stateDeptNotified: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: stateDeptNotified, def: false,
   at: VTOFFSET.stateDeptNotified.p) }
  public static func add(ownerContacted: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ownerContacted, def: false,
   at: VTOFFSET.ownerContacted.p) }
  public static func add(rawFileUri: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rawFileUri, at: VTOFFSET.rawFileUri.p) }
  public static func add(messageFor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: messageFor, at: VTOFFSET.messageFor.p) }
  public static func add(messageId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: messageId, at: VTOFFSET.messageId.p) }
  public static func add(uvwWarn: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: uvwWarn, def: false,
   at: VTOFFSET.uvwWarn.p) }
  public static func add(smallRelVelWarning: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: smallRelVelWarning, def: false,
   at: VTOFFSET.smallRelVelWarning.p) }
  public static func add(largeRelPosWarning: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: largeRelPosWarning, def: false,
   at: VTOFFSET.largeRelPosWarning.p) }
  public static func add(smallCovWarning: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: smallCovWarning, def: false,
   at: VTOFFSET.smallCovWarning.p) }
  public static func add(largeCovWarning: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: largeCovWarning, def: false,
   at: VTOFFSET.largeCovWarning.p) }
  public static func add(transactionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transactionId, at: VTOFFSET.transactionId.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(originator: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: originator, at: VTOFFSET.originator.p) }
  public static func add(eventId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eventId, at: VTOFFSET.eventId.p) }
  public static func add(descriptor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: descriptor, at: VTOFFSET.descriptor.p) }
  public static func addVectorOf(tags: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tags, at: VTOFFSET.tags.p) }
  public static func add(dataMode: Conjunction_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(stateVector1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: stateVector1, at: VTOFFSET.stateVector1.p) }
  public static func add(stateVector2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: stateVector2, at: VTOFFSET.stateVector2.p) }
  public static func add(satNo1: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo1, def: 0, at: VTOFFSET.satNo1.p) }
  public static func add(satNo2: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo2, def: 0, at: VTOFFSET.satNo2.p) }
  public static func add(origIdOnOrbit1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origIdOnOrbit1, at: VTOFFSET.origIdOnOrbit1.p) }
  public static func add(origIdOnOrbit2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origIdOnOrbit2, at: VTOFFSET.origIdOnOrbit2.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endConjunction_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createConjunction_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idOnOrbit1Offset idOnOrbit1: Offset = Offset(),
    idOnOrbit2Offset idOnOrbit2: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    tcaOffset tca: Offset = Offset(),
    missDistance: Double = 0.0,
    collisionProb: Double = 0.0,
    collisionProbMethodOffset collisionProbMethod: Offset = Offset(),
    ephemName1Offset ephemName1: Offset = Offset(),
    esId1Offset esId1: Offset = Offset(),
    ephemName2Offset ephemName2: Offset = Offset(),
    esId2Offset esId2: Offset = Offset(),
    relPosR: Double = 0.0,
    relPosT: Double = 0.0,
    relPosN: Double = 0.0,
    relVelMag: Double = 0.0,
    relVelR: Double = 0.0,
    relVelT: Double = 0.0,
    relVelN: Double = 0.0,
    screenEntryTimeOffset screenEntryTime: Offset = Offset(),
    screenExitTimeOffset screenExitTime: Offset = Offset(),
    screenVolumeX: Double = 0.0,
    screenVolumeY: Double = 0.0,
    screenVolumeZ: Double = 0.0,
    volShapeOffset volShape: Offset = Offset(),
    volEntryTimeOffset volEntryTime: Offset = Offset(),
    volExitTimeOffset volExitTime: Offset = Offset(),
    penetrationLevelSigma: Double = 0.0,
    idStateVector1Offset idStateVector1: Offset = Offset(),
    lastObTime1Offset lastObTime1: Offset = Offset(),
    cdAoM1: Double = 0.0,
    crAoM1: Double = 0.0,
    thrustAccel1: Double = 0.0,
    idStateVector2Offset idStateVector2: Offset = Offset(),
    lastObTime2Offset lastObTime2: Offset = Offset(),
    cdAoM2: Double = 0.0,
    crAoM2: Double = 0.0,
    thrustAccel2: Double = 0.0,
    commentsOffset comments: Offset = Offset(),
    ccirOffset ccir: Offset = Offset(),
    concernNotesOffset concernNotes: Offset = Offset(),
    stateDeptNotified: Bool = false,
    ownerContacted: Bool = false,
    rawFileUriOffset rawFileUri: Offset = Offset(),
    messageForOffset messageFor: Offset = Offset(),
    messageIdOffset messageId: Offset = Offset(),
    uvwWarn: Bool = false,
    smallRelVelWarning: Bool = false,
    largeRelPosWarning: Bool = false,
    smallCovWarning: Bool = false,
    largeCovWarning: Bool = false,
    transactionIdOffset transactionId: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    originatorOffset originator: Offset = Offset(),
    eventIdOffset eventId: Offset = Offset(),
    descriptorOffset descriptor: Offset = Offset(),
    tagsVectorOffset tags: Offset = Offset(),
    dataMode: Conjunction_Ingest_dataMode_Enum = .real,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    stateVector1Offset stateVector1: Offset = Offset(),
    stateVector2Offset stateVector2: Offset = Offset(),
    satNo1: Int32 = 0,
    satNo2: Int32 = 0,
    origIdOnOrbit1Offset origIdOnOrbit1: Offset = Offset(),
    origIdOnOrbit2Offset origIdOnOrbit2: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = Conjunction_Ingest.startConjunction_Ingest(&fbb)
    Conjunction_Ingest.add(id: id, &fbb)
    Conjunction_Ingest.add(classificationMarking: classificationMarking, &fbb)
    Conjunction_Ingest.add(idOnOrbit1: idOnOrbit1, &fbb)
    Conjunction_Ingest.add(idOnOrbit2: idOnOrbit2, &fbb)
    Conjunction_Ingest.add(type: type, &fbb)
    Conjunction_Ingest.add(tca: tca, &fbb)
    Conjunction_Ingest.add(missDistance: missDistance, &fbb)
    Conjunction_Ingest.add(collisionProb: collisionProb, &fbb)
    Conjunction_Ingest.add(collisionProbMethod: collisionProbMethod, &fbb)
    Conjunction_Ingest.add(ephemName1: ephemName1, &fbb)
    Conjunction_Ingest.add(esId1: esId1, &fbb)
    Conjunction_Ingest.add(ephemName2: ephemName2, &fbb)
    Conjunction_Ingest.add(esId2: esId2, &fbb)
    Conjunction_Ingest.add(relPosR: relPosR, &fbb)
    Conjunction_Ingest.add(relPosT: relPosT, &fbb)
    Conjunction_Ingest.add(relPosN: relPosN, &fbb)
    Conjunction_Ingest.add(relVelMag: relVelMag, &fbb)
    Conjunction_Ingest.add(relVelR: relVelR, &fbb)
    Conjunction_Ingest.add(relVelT: relVelT, &fbb)
    Conjunction_Ingest.add(relVelN: relVelN, &fbb)
    Conjunction_Ingest.add(screenEntryTime: screenEntryTime, &fbb)
    Conjunction_Ingest.add(screenExitTime: screenExitTime, &fbb)
    Conjunction_Ingest.add(screenVolumeX: screenVolumeX, &fbb)
    Conjunction_Ingest.add(screenVolumeY: screenVolumeY, &fbb)
    Conjunction_Ingest.add(screenVolumeZ: screenVolumeZ, &fbb)
    Conjunction_Ingest.add(volShape: volShape, &fbb)
    Conjunction_Ingest.add(volEntryTime: volEntryTime, &fbb)
    Conjunction_Ingest.add(volExitTime: volExitTime, &fbb)
    Conjunction_Ingest.add(penetrationLevelSigma: penetrationLevelSigma, &fbb)
    Conjunction_Ingest.add(idStateVector1: idStateVector1, &fbb)
    Conjunction_Ingest.add(lastObTime1: lastObTime1, &fbb)
    Conjunction_Ingest.add(cdAoM1: cdAoM1, &fbb)
    Conjunction_Ingest.add(crAoM1: crAoM1, &fbb)
    Conjunction_Ingest.add(thrustAccel1: thrustAccel1, &fbb)
    Conjunction_Ingest.add(idStateVector2: idStateVector2, &fbb)
    Conjunction_Ingest.add(lastObTime2: lastObTime2, &fbb)
    Conjunction_Ingest.add(cdAoM2: cdAoM2, &fbb)
    Conjunction_Ingest.add(crAoM2: crAoM2, &fbb)
    Conjunction_Ingest.add(thrustAccel2: thrustAccel2, &fbb)
    Conjunction_Ingest.add(comments: comments, &fbb)
    Conjunction_Ingest.add(ccir: ccir, &fbb)
    Conjunction_Ingest.add(concernNotes: concernNotes, &fbb)
    Conjunction_Ingest.add(stateDeptNotified: stateDeptNotified, &fbb)
    Conjunction_Ingest.add(ownerContacted: ownerContacted, &fbb)
    Conjunction_Ingest.add(rawFileUri: rawFileUri, &fbb)
    Conjunction_Ingest.add(messageFor: messageFor, &fbb)
    Conjunction_Ingest.add(messageId: messageId, &fbb)
    Conjunction_Ingest.add(uvwWarn: uvwWarn, &fbb)
    Conjunction_Ingest.add(smallRelVelWarning: smallRelVelWarning, &fbb)
    Conjunction_Ingest.add(largeRelPosWarning: largeRelPosWarning, &fbb)
    Conjunction_Ingest.add(smallCovWarning: smallCovWarning, &fbb)
    Conjunction_Ingest.add(largeCovWarning: largeCovWarning, &fbb)
    Conjunction_Ingest.add(transactionId: transactionId, &fbb)
    Conjunction_Ingest.add(source: source, &fbb)
    Conjunction_Ingest.add(origin: origin, &fbb)
    Conjunction_Ingest.add(originator: originator, &fbb)
    Conjunction_Ingest.add(eventId: eventId, &fbb)
    Conjunction_Ingest.add(descriptor: descriptor, &fbb)
    Conjunction_Ingest.addVectorOf(tags: tags, &fbb)
    Conjunction_Ingest.add(dataMode: dataMode, &fbb)
    Conjunction_Ingest.add(createdAt: createdAt, &fbb)
    Conjunction_Ingest.add(createdBy: createdBy, &fbb)
    Conjunction_Ingest.add(stateVector1: stateVector1, &fbb)
    Conjunction_Ingest.add(stateVector2: stateVector2, &fbb)
    Conjunction_Ingest.add(satNo1: satNo1, &fbb)
    Conjunction_Ingest.add(satNo2: satNo2, &fbb)
    Conjunction_Ingest.add(origIdOnOrbit1: origIdOnOrbit1, &fbb)
    Conjunction_Ingest.add(origIdOnOrbit2: origIdOnOrbit2, &fbb)
    Conjunction_Ingest.add(origNetwork: origNetwork, &fbb)
    return Conjunction_Ingest.endConjunction_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit1.p, fieldName: "idOnOrbit1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit2.p, fieldName: "idOnOrbit2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tca.p, fieldName: "tca", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.missDistance.p, fieldName: "missDistance", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.collisionProb.p, fieldName: "collisionProb", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.collisionProbMethod.p, fieldName: "collisionProbMethod", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ephemName1.p, fieldName: "ephemName1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.esId1.p, fieldName: "esId1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ephemName2.p, fieldName: "ephemName2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.esId2.p, fieldName: "esId2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.relPosR.p, fieldName: "relPosR", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.relPosT.p, fieldName: "relPosT", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.relPosN.p, fieldName: "relPosN", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.relVelMag.p, fieldName: "relVelMag", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.relVelR.p, fieldName: "relVelR", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.relVelT.p, fieldName: "relVelT", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.relVelN.p, fieldName: "relVelN", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.screenEntryTime.p, fieldName: "screenEntryTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.screenExitTime.p, fieldName: "screenExitTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.screenVolumeX.p, fieldName: "screenVolumeX", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.screenVolumeY.p, fieldName: "screenVolumeY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.screenVolumeZ.p, fieldName: "screenVolumeZ", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.volShape.p, fieldName: "volShape", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.volEntryTime.p, fieldName: "volEntryTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.volExitTime.p, fieldName: "volExitTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.penetrationLevelSigma.p, fieldName: "penetrationLevelSigma", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.idStateVector1.p, fieldName: "idStateVector1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lastObTime1.p, fieldName: "lastObTime1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cdAoM1.p, fieldName: "cdAoM1", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.crAoM1.p, fieldName: "crAoM1", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.thrustAccel1.p, fieldName: "thrustAccel1", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.idStateVector2.p, fieldName: "idStateVector2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lastObTime2.p, fieldName: "lastObTime2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cdAoM2.p, fieldName: "cdAoM2", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.crAoM2.p, fieldName: "crAoM2", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.thrustAccel2.p, fieldName: "thrustAccel2", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.comments.p, fieldName: "comments", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ccir.p, fieldName: "ccir", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.concernNotes.p, fieldName: "concernNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.stateDeptNotified.p, fieldName: "stateDeptNotified", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.ownerContacted.p, fieldName: "ownerContacted", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.rawFileUri.p, fieldName: "rawFileUri", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.messageFor.p, fieldName: "messageFor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.messageId.p, fieldName: "messageId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.uvwWarn.p, fieldName: "uvwWarn", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.smallRelVelWarning.p, fieldName: "smallRelVelWarning", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.largeRelPosWarning.p, fieldName: "largeRelPosWarning", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.smallCovWarning.p, fieldName: "smallCovWarning", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.largeCovWarning.p, fieldName: "largeCovWarning", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.transactionId.p, fieldName: "transactionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.originator.p, fieldName: "originator", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eventId.p, fieldName: "eventId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.descriptor.p, fieldName: "descriptor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tags.p, fieldName: "tags", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Conjunction_Ingest_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.stateVector1.p, fieldName: "stateVector1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.stateVector2.p, fieldName: "stateVector2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo1.p, fieldName: "satNo1", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.satNo2.p, fieldName: "satNo2", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.origIdOnOrbit1.p, fieldName: "origIdOnOrbit1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origIdOnOrbit2.p, fieldName: "origIdOnOrbit2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

