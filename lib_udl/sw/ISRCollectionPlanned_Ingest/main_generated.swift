// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Planned start and stop for the collection.
public struct ISRCollectionPlanned_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ISRC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: ISRCollectionPlanned_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case start = 4
    case stop = 6
    case additional = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Start time of collection, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-19T01:01:15.001Z
  ///  Constraints: No constraints specified.
  public var start: String? { let o = _accessor.offset(VTOFFSET.start.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.start.v) }
  ///  Stop time of collection, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-19T01:01:15.001Z
  ///  Constraints: No constraints specified.
  public var stop: String? { let o = _accessor.offset(VTOFFSET.stop.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var stopSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.stop.v) }
  ///  Additional start and stop for the collection.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasAdditional: Bool { let o = _accessor.offset(VTOFFSET.additional.v); return o == 0 ? false : true }
  public var additionalCount: Int32 { let o = _accessor.offset(VTOFFSET.additional.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func additional(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.additional.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startISRCollectionPlanned_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(start: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: start, at: VTOFFSET.start.p) }
  public static func add(stop: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: stop, at: VTOFFSET.stop.p) }
  public static func addVectorOf(additional: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: additional, at: VTOFFSET.additional.p) }
  public static func endISRCollectionPlanned_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createISRCollectionPlanned_Ingest(
    _ fbb: inout FlatBufferBuilder,
    startOffset start: Offset = Offset(),
    stopOffset stop: Offset = Offset(),
    additionalVectorOffset additional: Offset = Offset()
  ) -> Offset {
    let __start = ISRCollectionPlanned_Ingest.startISRCollectionPlanned_Ingest(&fbb)
    ISRCollectionPlanned_Ingest.add(start: start, &fbb)
    ISRCollectionPlanned_Ingest.add(stop: stop, &fbb)
    ISRCollectionPlanned_Ingest.addVectorOf(additional: additional, &fbb)
    return ISRCollectionPlanned_Ingest.endISRCollectionPlanned_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.start.p, fieldName: "start", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.stop.p, fieldName: "stop", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.additional.p, fieldName: "additional", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

