// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum AntennaDetails_Ingest_mode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case tx = 0
  ///  No description available.
  case rx = 1

  public static var max: AntennaDetails_Ingest_mode_Enum { return .rx }
  public static var min: AntennaDetails_Ingest_mode_Enum { return .tx }
}


public enum AntennaDetails_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: AntennaDetails_Ingest_dataMode_Enum { return .exercise }
  public static var min: AntennaDetails_Ingest_dataMode_Enum { return .real }
}


///  /// Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.
public struct AntennaDetails_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ANTE" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AntennaDetails_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case idAntenna = 6
    case classificationMarking = 8
    case type = 10
    case position = 12
    case mode = 14
    case steerable = 16
    case beamForming = 18
    case manufacturerOrgId = 20
    case diameter = 22
    case size = 24
    case startFrequency = 26
    case endFrequency = 28
    case beamwidth = 30
    case gain = 32
    case gainTolerance = 34
    case polarization = 36
    case description = 38
    case createdAt = 40
    case createdBy = 42
    case source = 44
    case origin = 46
    case origNetwork = 48
    case dataMode = 50
    case tags = 52
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ANTENNADETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Unique identifier of the parent Antenna.
  ///  Example: /// Example: ANTENNA-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idAntenna: String? { let o = _accessor.offset(VTOFFSET.idAntenna.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idAntennaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idAntenna.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).
  ///  Example: /// Example: Reflector
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Antenna position (e.g. Top, Nadir, Side).
  ///  Example: /// Example: Top
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var position: String? { let o = _accessor.offset(VTOFFSET.position.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var positionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.position.v) }
  ///  Antenna mode (e.g. TX,RX).
  ///  Example: /// Example: TX
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var mode: AntennaDetails_Ingest_mode_Enum { let o = _accessor.offset(VTOFFSET.mode.v); return o == 0 ? .tx : AntennaDetails_Ingest_mode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .tx }
  ///  Boolean indicating if this antenna is steerable.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var steerable: Bool { let o = _accessor.offset(VTOFFSET.steerable.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Boolean indicating if this is a beam forming antenna.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var beamForming: Bool { let o = _accessor.offset(VTOFFSET.beamForming.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  ID of the organization that manufactures the antenna.
  ///  Example: /// Example: MANUFACTUREORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var manufacturerOrgId: String? { let o = _accessor.offset(VTOFFSET.manufacturerOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var manufacturerOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.manufacturerOrgId.v) }
  ///  Antenna diameter in meters.
  ///  Example: /// Example: 0.01
  ///  Constraints: No constraints specified.
  public var diameter: Double { let o = _accessor.offset(VTOFFSET.diameter.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
  ///  Example: /// Example: [0.03, 0.05]
  ///  Constraints: No constraints specified.
  public var hasSize: Bool { let o = _accessor.offset(VTOFFSET.size.v); return o == 0 ? false : true }
  public var sizeCount: Int32 { let o = _accessor.offset(VTOFFSET.size.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func size(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.size.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Antenna start of frequency range in Mhz.
  ///  Example: /// Example: 2.1
  ///  Constraints: No constraints specified.
  public var startFrequency: Double { let o = _accessor.offset(VTOFFSET.startFrequency.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Antenna end of frequency range in Mhz.
  ///  Example: /// Example: 3.3
  ///  Constraints: No constraints specified.
  public var endFrequency: Double { let o = _accessor.offset(VTOFFSET.endFrequency.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
  ///  Example: /// Example: 14.1
  ///  Constraints: No constraints specified.
  public var beamwidth: Double { let o = _accessor.offset(VTOFFSET.beamwidth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Antenna maximum gain in dBi.
  ///  Example: /// Example: 20.1
  ///  Constraints: No constraints specified.
  public var gain: Double { let o = _accessor.offset(VTOFFSET.gain.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Antenna gain tolerance in dB.
  ///  Example: /// Example: 5.1
  ///  Constraints: No constraints specified.
  public var gainTolerance: Double { let o = _accessor.offset(VTOFFSET.gainTolerance.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Antenna polarization in degrees.
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  public var polarization: Double { let o = _accessor.offset(VTOFFSET.polarization.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Antenna description.
  ///  Example: /// Example: Description of antenna A
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var description: String? { let o = _accessor.offset(VTOFFSET.description.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.description.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: AntennaDetails_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : AntennaDetails_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  public var hasTags: Bool { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? false : true }
  public var tagsCount: Int32 { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func tags(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startAntennaDetails_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 25) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(idAntenna: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idAntenna, at: VTOFFSET.idAntenna.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(position: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: position, at: VTOFFSET.position.p) }
  public static func add(mode: AntennaDetails_Ingest_mode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: mode.rawValue, def: 0, at: VTOFFSET.mode.p) }
  public static func add(steerable: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: steerable, def: false,
   at: VTOFFSET.steerable.p) }
  public static func add(beamForming: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: beamForming, def: false,
   at: VTOFFSET.beamForming.p) }
  public static func add(manufacturerOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: manufacturerOrgId, at: VTOFFSET.manufacturerOrgId.p) }
  public static func add(diameter: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: diameter, def: 0.0, at: VTOFFSET.diameter.p) }
  public static func addVectorOf(size: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: size, at: VTOFFSET.size.p) }
  public static func add(startFrequency: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: startFrequency, def: 0.0, at: VTOFFSET.startFrequency.p) }
  public static func add(endFrequency: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: endFrequency, def: 0.0, at: VTOFFSET.endFrequency.p) }
  public static func add(beamwidth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: beamwidth, def: 0.0, at: VTOFFSET.beamwidth.p) }
  public static func add(gain: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gain, def: 0.0, at: VTOFFSET.gain.p) }
  public static func add(gainTolerance: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gainTolerance, def: 0.0, at: VTOFFSET.gainTolerance.p) }
  public static func add(polarization: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: polarization, def: 0.0, at: VTOFFSET.polarization.p) }
  public static func add(description: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: description, at: VTOFFSET.description.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: AntennaDetails_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func addVectorOf(tags: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tags, at: VTOFFSET.tags.p) }
  public static func endAntennaDetails_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAntennaDetails_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    idAntennaOffset idAntenna: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    positionOffset position: Offset = Offset(),
    mode: AntennaDetails_Ingest_mode_Enum = .tx,
    steerable: Bool = false,
    beamForming: Bool = false,
    manufacturerOrgIdOffset manufacturerOrgId: Offset = Offset(),
    diameter: Double = 0.0,
    sizeVectorOffset size: Offset = Offset(),
    startFrequency: Double = 0.0,
    endFrequency: Double = 0.0,
    beamwidth: Double = 0.0,
    gain: Double = 0.0,
    gainTolerance: Double = 0.0,
    polarization: Double = 0.0,
    descriptionOffset description: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: AntennaDetails_Ingest_dataMode_Enum = .real,
    tagsVectorOffset tags: Offset = Offset()
  ) -> Offset {
    let __start = AntennaDetails_Ingest.startAntennaDetails_Ingest(&fbb)
    AntennaDetails_Ingest.add(id: id, &fbb)
    AntennaDetails_Ingest.add(idAntenna: idAntenna, &fbb)
    AntennaDetails_Ingest.add(classificationMarking: classificationMarking, &fbb)
    AntennaDetails_Ingest.add(type: type, &fbb)
    AntennaDetails_Ingest.add(position: position, &fbb)
    AntennaDetails_Ingest.add(mode: mode, &fbb)
    AntennaDetails_Ingest.add(steerable: steerable, &fbb)
    AntennaDetails_Ingest.add(beamForming: beamForming, &fbb)
    AntennaDetails_Ingest.add(manufacturerOrgId: manufacturerOrgId, &fbb)
    AntennaDetails_Ingest.add(diameter: diameter, &fbb)
    AntennaDetails_Ingest.addVectorOf(size: size, &fbb)
    AntennaDetails_Ingest.add(startFrequency: startFrequency, &fbb)
    AntennaDetails_Ingest.add(endFrequency: endFrequency, &fbb)
    AntennaDetails_Ingest.add(beamwidth: beamwidth, &fbb)
    AntennaDetails_Ingest.add(gain: gain, &fbb)
    AntennaDetails_Ingest.add(gainTolerance: gainTolerance, &fbb)
    AntennaDetails_Ingest.add(polarization: polarization, &fbb)
    AntennaDetails_Ingest.add(description: description, &fbb)
    AntennaDetails_Ingest.add(createdAt: createdAt, &fbb)
    AntennaDetails_Ingest.add(createdBy: createdBy, &fbb)
    AntennaDetails_Ingest.add(source: source, &fbb)
    AntennaDetails_Ingest.add(origin: origin, &fbb)
    AntennaDetails_Ingest.add(origNetwork: origNetwork, &fbb)
    AntennaDetails_Ingest.add(dataMode: dataMode, &fbb)
    AntennaDetails_Ingest.addVectorOf(tags: tags, &fbb)
    return AntennaDetails_Ingest.endAntennaDetails_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idAntenna.p, fieldName: "idAntenna", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.position.p, fieldName: "position", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.mode.p, fieldName: "mode", required: false, type: AntennaDetails_Ingest_mode_Enum.self)
    try _v.visit(field: VTOFFSET.steerable.p, fieldName: "steerable", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.beamForming.p, fieldName: "beamForming", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.manufacturerOrgId.p, fieldName: "manufacturerOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.diameter.p, fieldName: "diameter", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.size.p, fieldName: "size", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.startFrequency.p, fieldName: "startFrequency", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.endFrequency.p, fieldName: "endFrequency", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.beamwidth.p, fieldName: "beamwidth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gain.p, fieldName: "gain", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gainTolerance.p, fieldName: "gainTolerance", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.polarization.p, fieldName: "polarization", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.description.p, fieldName: "description", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: AntennaDetails_Ingest_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.tags.p, fieldName: "tags", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

