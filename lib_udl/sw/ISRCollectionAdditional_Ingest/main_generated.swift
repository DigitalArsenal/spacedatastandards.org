// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Additional start and stop for the collection.
public struct ISRCollectionAdditional_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ISRC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: ISRCollectionAdditional_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case start = 6
    case stop = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique Identifier of additional collection period.
  ///  Example: /// Example: ISRCOLLECTIONADDITIONAL
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Start time of collection, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-19T01:01:15.001Z
  ///  Constraints: No constraints specified.
  public var start: String? { let o = _accessor.offset(VTOFFSET.start.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.start.v) }
  ///  Stop time of collection, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-19T01:01:15.001Z
  ///  Constraints: No constraints specified.
  public var stop: String? { let o = _accessor.offset(VTOFFSET.stop.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var stopSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.stop.v) }
  public static func startISRCollectionAdditional_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(start: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: start, at: VTOFFSET.start.p) }
  public static func add(stop: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: stop, at: VTOFFSET.stop.p) }
  public static func endISRCollectionAdditional_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createISRCollectionAdditional_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    startOffset start: Offset = Offset(),
    stopOffset stop: Offset = Offset()
  ) -> Offset {
    let __start = ISRCollectionAdditional_Ingest.startISRCollectionAdditional_Ingest(&fbb)
    ISRCollectionAdditional_Ingest.add(id: id, &fbb)
    ISRCollectionAdditional_Ingest.add(start: start, &fbb)
    ISRCollectionAdditional_Ingest.add(stop: stop, &fbb)
    return ISRCollectionAdditional_Ingest.endISRCollectionAdditional_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.start.p, fieldName: "start", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.stop.p, fieldName: "stop", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

