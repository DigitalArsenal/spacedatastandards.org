// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Transponder_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Transponder_Abridged_dataMode_Enum { return .exercise }
  public static var min: Transponder_Abridged_dataMode_Enum { return .real }
}


///  /// A transponder receives and transmits radio signals at a prescribed frequency range. A communications satellite's transponder is the series of interconnected units that form a communications channel between the receiving and the transmitting antennas. It is mainly used in satellite communication to transfer the received signals.
public struct Transponder_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "TRAN" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Transponder_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case idComm = 6
    case name = 8
    case classificationMarking = 10
    case nid = 12
    case tid = 14
    case ttf = 16
    case symbolRate = 18
    case fec = 20
    case modulation = 22
    case format = 24
    case system = 26
    case source = 28
    case origin = 30
    case origNetwork = 32
    case dataMode = 34
    case createdAt = 36
    case createdBy = 38
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: TRANSPONDER-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  ID of the parent Comm object for this transponder.
  ///  Example: /// Example: REF-COMM-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idComm: String? { let o = _accessor.offset(VTOFFSET.idComm.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idCommSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idComm.v) }
  ///  Optional name of the transponder.
  ///  Example: /// Example: AA10
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Optional external network id as provided data source.
  ///  Example: /// Example: N-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var nid: String? { let o = _accessor.offset(VTOFFSET.nid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nidSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.nid.v) }
  ///  Optional external transponder id as provided data source.
  ///  Example: /// Example: T-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var tid: String? { let o = _accessor.offset(VTOFFSET.tid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tidSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tid.v) }
  ///  Transponder Translation Factor. This is the frequency difference between the uplink received by a satellite, and the downlink transmitted back. It varies satellite to satellite dependent on the mission.
  ///  Example: /// Example: 1.53261520047876
  ///  Constraints: No constraints specified.
  public var ttf: Double { let o = _accessor.offset(VTOFFSET.ttf.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Symbol rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per time unit using a digitally modulated signal or a line code. Also measured in Hz.
  ///  Example: /// Example: 4.0
  ///  Constraints: No constraints specified.
  public var symbolRate: Double { let o = _accessor.offset(VTOFFSET.symbolRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Forward error correction, e.g. 0=Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  public var fec: Int32 { let o = _accessor.offset(VTOFFSET.fec.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Transponder modulation, e.g. Auto, QPSK, 8PSK.
  ///  Example: /// Example: Auto
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var modulation: String? { let o = _accessor.offset(VTOFFSET.modulation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var modulationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.modulation.v) }
  ///  Format.
  ///  Example: /// Example: format
  ///  Constraints: Minimum length = 0, Maximum length = 45
  public var format: String? { let o = _accessor.offset(VTOFFSET.format.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var formatSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.format.v) }
  ///  Transponder system, e.g. DVB-S, DVB-S2.
  ///  Example: /// Example: DVB-S
  ///  Constraints: Minimum length = 0, Maximum length = 45
  public var system: String? { let o = _accessor.offset(VTOFFSET.system.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var systemSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.system.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Transponder_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Transponder_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  public static func startTransponder_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 18) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(idComm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idComm, at: VTOFFSET.idComm.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(nid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: nid, at: VTOFFSET.nid.p) }
  public static func add(tid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tid, at: VTOFFSET.tid.p) }
  public static func add(ttf: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ttf, def: 0.0, at: VTOFFSET.ttf.p) }
  public static func add(symbolRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: symbolRate, def: 0.0, at: VTOFFSET.symbolRate.p) }
  public static func add(fec: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fec, def: 0, at: VTOFFSET.fec.p) }
  public static func add(modulation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: modulation, at: VTOFFSET.modulation.p) }
  public static func add(format: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: format, at: VTOFFSET.format.p) }
  public static func add(system: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: system, at: VTOFFSET.system.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: Transponder_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func endTransponder_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createTransponder_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    idCommOffset idComm: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    nidOffset nid: Offset = Offset(),
    tidOffset tid: Offset = Offset(),
    ttf: Double = 0.0,
    symbolRate: Double = 0.0,
    fec: Int32 = 0,
    modulationOffset modulation: Offset = Offset(),
    formatOffset format: Offset = Offset(),
    systemOffset system: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: Transponder_Abridged_dataMode_Enum = .real,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset()
  ) -> Offset {
    let __start = Transponder_Abridged.startTransponder_Abridged(&fbb)
    Transponder_Abridged.add(id: id, &fbb)
    Transponder_Abridged.add(idComm: idComm, &fbb)
    Transponder_Abridged.add(name: name, &fbb)
    Transponder_Abridged.add(classificationMarking: classificationMarking, &fbb)
    Transponder_Abridged.add(nid: nid, &fbb)
    Transponder_Abridged.add(tid: tid, &fbb)
    Transponder_Abridged.add(ttf: ttf, &fbb)
    Transponder_Abridged.add(symbolRate: symbolRate, &fbb)
    Transponder_Abridged.add(fec: fec, &fbb)
    Transponder_Abridged.add(modulation: modulation, &fbb)
    Transponder_Abridged.add(format: format, &fbb)
    Transponder_Abridged.add(system: system, &fbb)
    Transponder_Abridged.add(source: source, &fbb)
    Transponder_Abridged.add(origin: origin, &fbb)
    Transponder_Abridged.add(origNetwork: origNetwork, &fbb)
    Transponder_Abridged.add(dataMode: dataMode, &fbb)
    Transponder_Abridged.add(createdAt: createdAt, &fbb)
    Transponder_Abridged.add(createdBy: createdBy, &fbb)
    return Transponder_Abridged.endTransponder_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idComm.p, fieldName: "idComm", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.nid.p, fieldName: "nid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tid.p, fieldName: "tid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ttf.p, fieldName: "ttf", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.symbolRate.p, fieldName: "symbolRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fec.p, fieldName: "fec", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.modulation.p, fieldName: "modulation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.format.p, fieldName: "format", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.system.p, fieldName: "system", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Transponder_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

