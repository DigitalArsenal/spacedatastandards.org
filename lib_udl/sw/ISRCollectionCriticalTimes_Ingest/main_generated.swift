// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// High priority time windows.
public struct ISRCollectionCriticalTimes_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ISRC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: ISRCollectionCriticalTimes_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case earliestImagingTime = 4
    case latestImagingTime = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Critical start time to collect an image for this requirement.
  ///  Example: /// Example: 2021-01-19T01:01:15.001Z
  ///  Constraints: No constraints specified.
  public var earliestImagingTime: String? { let o = _accessor.offset(VTOFFSET.earliestImagingTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var earliestImagingTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.earliestImagingTime.v) }
  ///  Critical stop time to collect an image for this requirement.
  ///  Example: /// Example: 2021-01-19T01:11:15.001Z
  ///  Constraints: No constraints specified.
  public var latestImagingTime: String? { let o = _accessor.offset(VTOFFSET.latestImagingTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var latestImagingTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.latestImagingTime.v) }
  public static func startISRCollectionCriticalTimes_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(earliestImagingTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: earliestImagingTime, at: VTOFFSET.earliestImagingTime.p) }
  public static func add(latestImagingTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: latestImagingTime, at: VTOFFSET.latestImagingTime.p) }
  public static func endISRCollectionCriticalTimes_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createISRCollectionCriticalTimes_Ingest(
    _ fbb: inout FlatBufferBuilder,
    earliestImagingTimeOffset earliestImagingTime: Offset = Offset(),
    latestImagingTimeOffset latestImagingTime: Offset = Offset()
  ) -> Offset {
    let __start = ISRCollectionCriticalTimes_Ingest.startISRCollectionCriticalTimes_Ingest(&fbb)
    ISRCollectionCriticalTimes_Ingest.add(earliestImagingTime: earliestImagingTime, &fbb)
    ISRCollectionCriticalTimes_Ingest.add(latestImagingTime: latestImagingTime, &fbb)
    return ISRCollectionCriticalTimes_Ingest.endISRCollectionCriticalTimes_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.earliestImagingTime.p, fieldName: "earliestImagingTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.latestImagingTime.p, fieldName: "latestImagingTime", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

