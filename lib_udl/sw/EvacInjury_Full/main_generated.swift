// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Injury specifics.
public struct EvacInjury_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EVAC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EvacInjury_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case type = 4
    case bodyPart = 6
    case time = 8
    case comments = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Classification of the injury type (ABRASION, AMPUTATION IT, AVULATION, BALLISTIC, BLAST WAVE, BURN 1ST DEGREE, BURN 2ND DEGREE, BURN 3RD DEGREE, BURN INHALATION, BURN LOWER AIRWAY, CHEST FLAIL, CHEST OPEN, DEGLOVING, ECCHYMOSIS, FRACTURE CLOSED, FRACTURE CREPITUS, FRACTURE IT, FRACTURE OPEN, HEMATOMA, IRREGULAR CONSISTENCY, IRREGULAR CONSISTENCY RIDGED, IRREGULAR CONSISTENCY SWOLLEN, IRREGULAR CONSISTENCY SWOLLEN DISTENDED, IRREGULAR CONSISTENCY TENDER, IRREGULAR POSITION, IRREGULAR SHAPE, IRREGULAR SHAPE MISSHAPED, IRREGULAR SHAPE NON SYMMETRICAL, LACERATION, NEUROVASCULAR COMPROMISE, NEUROVASCULAR INTACT, PUNCTURE, SEAT BELT SIGN, STAB, TIC TIM).
  ///  Example: /// Example: ABRASION
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Body part location of the injury.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
  ///  Example: /// Example: ARM LEFT FRONT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var bodyPart: String? { let o = _accessor.offset(VTOFFSET.bodyPart.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var bodyPartSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.bodyPart.v) }
  ///  The time of the injury, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-10-15T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var time: String? { let o = _accessor.offset(VTOFFSET.time.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.time.v) }
  ///  Additional comments on the patient's injury information.
  ///  Example: /// Example: Comments on the patient's injury.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var comments: String? { let o = _accessor.offset(VTOFFSET.comments.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var commentsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.comments.v) }
  public static func startEvacInjury_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(bodyPart: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: bodyPart, at: VTOFFSET.bodyPart.p) }
  public static func add(time: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: time, at: VTOFFSET.time.p) }
  public static func add(comments: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: comments, at: VTOFFSET.comments.p) }
  public static func endEvacInjury_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEvacInjury_Full(
    _ fbb: inout FlatBufferBuilder,
    typeOffset type: Offset = Offset(),
    bodyPartOffset bodyPart: Offset = Offset(),
    timeOffset time: Offset = Offset(),
    commentsOffset comments: Offset = Offset()
  ) -> Offset {
    let __start = EvacInjury_Full.startEvacInjury_Full(&fbb)
    EvacInjury_Full.add(type: type, &fbb)
    EvacInjury_Full.add(bodyPart: bodyPart, &fbb)
    EvacInjury_Full.add(time: time, &fbb)
    EvacInjury_Full.add(comments: comments, &fbb)
    return EvacInjury_Full.endEvacInjury_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.bodyPart.p, fieldName: "bodyPart", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.comments.p, fieldName: "comments", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

