// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Crew_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Crew_Abridged_dataMode_Enum { return .exercise }
  public static var min: Crew_Abridged_dataMode_Enum { return .real }
}


///  /// Crew Services.
public struct Crew_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "CREW" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Crew_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case origCrewId = 8
    case crewName = 10
    case status = 12
    case idSortie = 14
    case legalAlertTime = 16
    case legalBravoTime = 18
    case alertedTime = 20
    case returnTime = 22
    case fdpEligType = 24
    case fdpType = 26
    case crewType = 28
    case armsCrewUnit = 30
    case crewMembers = 32
    case createdAt = 34
    case createdBy = 36
    case updatedAt = 38
    case updatedBy = 40
    case source = 42
    case origin = 44
    case origNetwork = 46
    case dataMode = 48
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the formed crew provided by the originating source. Provided for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: JHJDHjhuu929o92
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var origCrewId: String? { let o = _accessor.offset(VTOFFSET.origCrewId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origCrewIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origCrewId.v) }
  ///  Name of the formed crew.
  ///  Example: /// Example: falcon
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var crewName: String? { let o = _accessor.offset(VTOFFSET.crewName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var crewNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.crewName.v) }
  ///  Crew Status (e.g. APPROVED, PENDING).
  ///  Example: /// Example: APPROVED
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var status: String? { let o = _accessor.offset(VTOFFSET.status.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var statusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.status.v) }
  ///  Unique identifier of the Aircraft Sortie associated with this crew record.
  ///  Example: /// Example: 4ef3d1e8-ab08-ab70-498f-edc479734e5c
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSortie: String? { let o = _accessor.offset(VTOFFSET.idSortie.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSortieSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSortie.v) }
  ///  Time the crew is legal for alert, in ISO8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var legalAlertTime: String? { let o = _accessor.offset(VTOFFSET.legalAlertTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var legalAlertTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.legalAlertTime.v) }
  ///  Time the crew is legal for bravo, in ISO8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var legalBravoTime: String? { let o = _accessor.offset(VTOFFSET.legalBravoTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var legalBravoTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.legalBravoTime.v) }
  ///  Time the crew was alerted, in ISO8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var alertedTime: String? { let o = _accessor.offset(VTOFFSET.alertedTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var alertedTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.alertedTime.v) }
  ///  Scheduled return time, in ISO8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var returnTime: String? { let o = _accessor.offset(VTOFFSET.returnTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var returnTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.returnTime.v) }
  ///  Crew Flight Duty Period (FDP) eligibility type.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var fdpEligType: String? { let o = _accessor.offset(VTOFFSET.fdpEligType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fdpEligTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fdpEligType.v) }
  ///  Flight Duty Period (FDP) type.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var fdpType: String? { let o = _accessor.offset(VTOFFSET.fdpType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fdpTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fdpType.v) }
  ///  Crew type.
  ///  Example: /// Example: AIRLAND
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var crewType: String? { let o = _accessor.offset(VTOFFSET.crewType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var crewTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.crewType.v) }
  ///  The crew's Aviation Resource Management System (ARMS) unit.  If multiple units exist, use the Aircraft Commander's Unit.
  ///  Example: /// Example: 00016ALSQ
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var armsCrewUnit: String? { let o = _accessor.offset(VTOFFSET.armsCrewUnit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var armsCrewUnitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.armsCrewUnit.v) }
  ///  CrewMembers Collection.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasCrewMembers: Bool { let o = _accessor.offset(VTOFFSET.crewMembers.v); return o == 0 ? false : true }
  public var crewMembersCount: Int32 { let o = _accessor.offset(VTOFFSET.crewMembers.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func crewMembers(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.crewMembers.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Crew_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Crew_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startCrew_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 23) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(origCrewId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origCrewId, at: VTOFFSET.origCrewId.p) }
  public static func add(crewName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: crewName, at: VTOFFSET.crewName.p) }
  public static func add(status: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: status, at: VTOFFSET.status.p) }
  public static func add(idSortie: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSortie, at: VTOFFSET.idSortie.p) }
  public static func add(legalAlertTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: legalAlertTime, at: VTOFFSET.legalAlertTime.p) }
  public static func add(legalBravoTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: legalBravoTime, at: VTOFFSET.legalBravoTime.p) }
  public static func add(alertedTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: alertedTime, at: VTOFFSET.alertedTime.p) }
  public static func add(returnTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: returnTime, at: VTOFFSET.returnTime.p) }
  public static func add(fdpEligType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fdpEligType, at: VTOFFSET.fdpEligType.p) }
  public static func add(fdpType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fdpType, at: VTOFFSET.fdpType.p) }
  public static func add(crewType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: crewType, at: VTOFFSET.crewType.p) }
  public static func add(armsCrewUnit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: armsCrewUnit, at: VTOFFSET.armsCrewUnit.p) }
  public static func addVectorOf(crewMembers: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: crewMembers, at: VTOFFSET.crewMembers.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: Crew_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endCrew_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createCrew_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    origCrewIdOffset origCrewId: Offset = Offset(),
    crewNameOffset crewName: Offset = Offset(),
    statusOffset status: Offset = Offset(),
    idSortieOffset idSortie: Offset = Offset(),
    legalAlertTimeOffset legalAlertTime: Offset = Offset(),
    legalBravoTimeOffset legalBravoTime: Offset = Offset(),
    alertedTimeOffset alertedTime: Offset = Offset(),
    returnTimeOffset returnTime: Offset = Offset(),
    fdpEligTypeOffset fdpEligType: Offset = Offset(),
    fdpTypeOffset fdpType: Offset = Offset(),
    crewTypeOffset crewType: Offset = Offset(),
    armsCrewUnitOffset armsCrewUnit: Offset = Offset(),
    crewMembersVectorOffset crewMembers: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: Crew_Abridged_dataMode_Enum = .real
  ) -> Offset {
    let __start = Crew_Abridged.startCrew_Abridged(&fbb)
    Crew_Abridged.add(id: id, &fbb)
    Crew_Abridged.add(classificationMarking: classificationMarking, &fbb)
    Crew_Abridged.add(origCrewId: origCrewId, &fbb)
    Crew_Abridged.add(crewName: crewName, &fbb)
    Crew_Abridged.add(status: status, &fbb)
    Crew_Abridged.add(idSortie: idSortie, &fbb)
    Crew_Abridged.add(legalAlertTime: legalAlertTime, &fbb)
    Crew_Abridged.add(legalBravoTime: legalBravoTime, &fbb)
    Crew_Abridged.add(alertedTime: alertedTime, &fbb)
    Crew_Abridged.add(returnTime: returnTime, &fbb)
    Crew_Abridged.add(fdpEligType: fdpEligType, &fbb)
    Crew_Abridged.add(fdpType: fdpType, &fbb)
    Crew_Abridged.add(crewType: crewType, &fbb)
    Crew_Abridged.add(armsCrewUnit: armsCrewUnit, &fbb)
    Crew_Abridged.addVectorOf(crewMembers: crewMembers, &fbb)
    Crew_Abridged.add(createdAt: createdAt, &fbb)
    Crew_Abridged.add(createdBy: createdBy, &fbb)
    Crew_Abridged.add(updatedAt: updatedAt, &fbb)
    Crew_Abridged.add(updatedBy: updatedBy, &fbb)
    Crew_Abridged.add(source: source, &fbb)
    Crew_Abridged.add(origin: origin, &fbb)
    Crew_Abridged.add(origNetwork: origNetwork, &fbb)
    Crew_Abridged.add(dataMode: dataMode, &fbb)
    return Crew_Abridged.endCrew_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origCrewId.p, fieldName: "origCrewId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.crewName.p, fieldName: "crewName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.status.p, fieldName: "status", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSortie.p, fieldName: "idSortie", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.legalAlertTime.p, fieldName: "legalAlertTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.legalBravoTime.p, fieldName: "legalBravoTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.alertedTime.p, fieldName: "alertedTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.returnTime.p, fieldName: "returnTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fdpEligType.p, fieldName: "fdpEligType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fdpType.p, fieldName: "fdpType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.crewType.p, fieldName: "crewType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.armsCrewUnit.p, fieldName: "armsCrewUnit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.crewMembers.p, fieldName: "crewMembers", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Crew_Abridged_dataMode_Enum.self)
    _v.finish()
  }
}

