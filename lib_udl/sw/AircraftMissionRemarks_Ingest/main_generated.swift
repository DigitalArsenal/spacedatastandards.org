// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection of Remarks associated with this Air Transport Mission.
public struct AircraftMissionRemarks_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AircraftMissionRemarks_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case gdssRemarkId = 4
    case type = 6
    case text = 8
    case date = 10
    case user = 12
    case itineraryNum = 14
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Global Decision Support System (GDSS) remark identifier.
  ///  Example: /// Example: GDSSREMARK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var gdssRemarkId: String? { let o = _accessor.offset(VTOFFSET.gdssRemarkId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var gdssRemarkIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.gdssRemarkId.v) }
  ///  Remark type.
  ///  Example: /// Example: MP
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Text of the remark.
  ///  Example: /// Example: Example mission remarks.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var text: String? { let o = _accessor.offset(VTOFFSET.text.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var textSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.text.v) }
  ///  Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var date: String? { let o = _accessor.offset(VTOFFSET.date.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.date.v) }
  ///  User who published the remark.
  ///  Example: /// Example: John Doe
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var user: String? { let o = _accessor.offset(VTOFFSET.user.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var userSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.user.v) }
  ///  If the remark is sortie specific, this is the number of the sortie it applies to.
  ///  Example: /// Example: 825
  ///  Constraints: No constraints specified.
  public var itineraryNum: Int32 { let o = _accessor.offset(VTOFFSET.itineraryNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public static func startAircraftMissionRemarks_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 6) }
  public static func add(gdssRemarkId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: gdssRemarkId, at: VTOFFSET.gdssRemarkId.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(text: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: text, at: VTOFFSET.text.p) }
  public static func add(date: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: date, at: VTOFFSET.date.p) }
  public static func add(user: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: user, at: VTOFFSET.user.p) }
  public static func add(itineraryNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: itineraryNum, def: 0, at: VTOFFSET.itineraryNum.p) }
  public static func endAircraftMissionRemarks_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAircraftMissionRemarks_Ingest(
    _ fbb: inout FlatBufferBuilder,
    gdssRemarkIdOffset gdssRemarkId: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    textOffset text: Offset = Offset(),
    dateOffset date: Offset = Offset(),
    userOffset user: Offset = Offset(),
    itineraryNum: Int32 = 0
  ) -> Offset {
    let __start = AircraftMissionRemarks_Ingest.startAircraftMissionRemarks_Ingest(&fbb)
    AircraftMissionRemarks_Ingest.add(gdssRemarkId: gdssRemarkId, &fbb)
    AircraftMissionRemarks_Ingest.add(type: type, &fbb)
    AircraftMissionRemarks_Ingest.add(text: text, &fbb)
    AircraftMissionRemarks_Ingest.add(date: date, &fbb)
    AircraftMissionRemarks_Ingest.add(user: user, &fbb)
    AircraftMissionRemarks_Ingest.add(itineraryNum: itineraryNum, &fbb)
    return AircraftMissionRemarks_Ingest.endAircraftMissionRemarks_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.gdssRemarkId.p, fieldName: "gdssRemarkId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.text.p, fieldName: "text", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.date.p, fieldName: "date", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.user.p, fieldName: "user", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.itineraryNum.p, fieldName: "itineraryNum", required: false, type: Int32.self)
    _v.finish()
  }
}

