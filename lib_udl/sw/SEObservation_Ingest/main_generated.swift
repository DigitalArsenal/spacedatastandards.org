// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// A single space environment observation.
public struct SEObservation_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SEOB" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: SEObservation_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case obType = 4
    case obUoM = 6
    case obValue = 8
    case obString = 10
    case obArray = 12
    case obBool = 14
    case obQuality = 16
    case obDescription = 18
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The type of observation associated with this record.
  ///  Example: /// Example: INTEGRAL FLUX
  ///  Constraints: Minimum length = 1, Maximum length = 24
  public var obType: String? { let o = _accessor.offset(VTOFFSET.obType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obType.v) }
  ///  The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.
  ///  Example: /// Example: particles/cm^2/s/sr
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var obUoM: String? { let o = _accessor.offset(VTOFFSET.obUoM.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obUoMSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obUoM.v) }
  ///  A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  ///  Example: /// Example: 0.487687826
  ///  Constraints: No constraints specified.
  public var obValue: Double { let o = _accessor.offset(VTOFFSET.obValue.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  ///  Example: /// Example: C1.3
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var obString: String? { let o = _accessor.offset(VTOFFSET.obString.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obStringSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obString.v) }
  ///  An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  ///  Example: /// Example: [1.7, 35.6, 21.2, 19.01]
  ///  Constraints: No constraints specified.
  public var hasObArray: Bool { let o = _accessor.offset(VTOFFSET.obArray.v); return o == 0 ? false : true }
  public var obArrayCount: Int32 { let o = _accessor.offset(VTOFFSET.obArray.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func obArray(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.obArray.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var obBool: Bool { let o = _accessor.offset(VTOFFSET.obBool.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.
  ///  Example: /// Example: GOOD
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var obQuality: String? { let o = _accessor.offset(VTOFFSET.obQuality.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obQualitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obQuality.v) }
  ///  Descriptive or additional information associated with this individual observation.
  ///  Example: /// Example: Observation Description Text
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var obDescription: String? { let o = _accessor.offset(VTOFFSET.obDescription.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obDescriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obDescription.v) }
  public static func startSEObservation_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 8) }
  public static func add(obType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obType, at: VTOFFSET.obType.p) }
  public static func add(obUoM: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obUoM, at: VTOFFSET.obUoM.p) }
  public static func add(obValue: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: obValue, def: 0.0, at: VTOFFSET.obValue.p) }
  public static func add(obString: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obString, at: VTOFFSET.obString.p) }
  public static func addVectorOf(obArray: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obArray, at: VTOFFSET.obArray.p) }
  public static func add(obBool: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: obBool, def: false,
   at: VTOFFSET.obBool.p) }
  public static func add(obQuality: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obQuality, at: VTOFFSET.obQuality.p) }
  public static func add(obDescription: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obDescription, at: VTOFFSET.obDescription.p) }
  public static func endSEObservation_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSEObservation_Ingest(
    _ fbb: inout FlatBufferBuilder,
    obTypeOffset obType: Offset = Offset(),
    obUoMOffset obUoM: Offset = Offset(),
    obValue: Double = 0.0,
    obStringOffset obString: Offset = Offset(),
    obArrayVectorOffset obArray: Offset = Offset(),
    obBool: Bool = false,
    obQualityOffset obQuality: Offset = Offset(),
    obDescriptionOffset obDescription: Offset = Offset()
  ) -> Offset {
    let __start = SEObservation_Ingest.startSEObservation_Ingest(&fbb)
    SEObservation_Ingest.add(obType: obType, &fbb)
    SEObservation_Ingest.add(obUoM: obUoM, &fbb)
    SEObservation_Ingest.add(obValue: obValue, &fbb)
    SEObservation_Ingest.add(obString: obString, &fbb)
    SEObservation_Ingest.addVectorOf(obArray: obArray, &fbb)
    SEObservation_Ingest.add(obBool: obBool, &fbb)
    SEObservation_Ingest.add(obQuality: obQuality, &fbb)
    SEObservation_Ingest.add(obDescription: obDescription, &fbb)
    return SEObservation_Ingest.endSEObservation_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.obType.p, fieldName: "obType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obUoM.p, fieldName: "obUoM", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obValue.p, fieldName: "obValue", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.obString.p, fieldName: "obString", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obArray.p, fieldName: "obArray", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.obBool.p, fieldName: "obBool", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.obQuality.p, fieldName: "obQuality", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obDescription.p, fieldName: "obDescription", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

