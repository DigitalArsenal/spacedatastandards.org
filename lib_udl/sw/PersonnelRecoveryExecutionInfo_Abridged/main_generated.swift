// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Information pertaining to the details of executing the recovery.
public struct PersonnelRecoveryExecutionInfo_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "PERS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: PersonnelRecoveryExecutionInfo_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case initialPoint = 4
    case ingress = 6
    case objStrategy = 8
    case egressPoint = 10
    case egress = 12
    case recoveryVehicle = 14
    case escortVehicle = 16
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the initial location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  ///  Example: /// Example: [103.23, 30.445]
  ///  Constraints: No constraints specified.
  public var hasInitialPoint: Bool { let o = _accessor.offset(VTOFFSET.initialPoint.v); return o == 0 ? false : true }
  public var initialPointCount: Int32 { let o = _accessor.offset(VTOFFSET.initialPoint.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func initialPoint(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.initialPoint.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The heading, in degrees clockwise from North, of entering the recovery zone.
  ///  Example: /// Example: 35.66
  ///  Constraints: No constraints specified.
  public var ingress: Double { let o = _accessor.offset(VTOFFSET.ingress.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Description of the objective strategy plan.
  ///  Example: /// Example: Description of strategy plan.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var objStrategy: String? { let o = _accessor.offset(VTOFFSET.objStrategy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objStrategySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.objStrategy.v) }
  ///  Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the egress location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  ///  Example: /// Example: [107.23, 30.455]
  ///  Constraints: No constraints specified.
  public var hasEgressPoint: Bool { let o = _accessor.offset(VTOFFSET.egressPoint.v); return o == 0 ? false : true }
  public var egressPointCount: Int32 { let o = _accessor.offset(VTOFFSET.egressPoint.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func egressPoint(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.egressPoint.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The heading, in degrees, of leaving the recovery zone.
  ///  Example: /// Example: 66.53
  ///  Constraints: No constraints specified.
  public var egress: Double { let o = _accessor.offset(VTOFFSET.egress.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var recoveryVehicle: String? { let o = _accessor.offset(VTOFFSET.recoveryVehicle.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var recoveryVehicleSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.recoveryVehicle.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var escortVehicle: String? { let o = _accessor.offset(VTOFFSET.escortVehicle.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var escortVehicleSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.escortVehicle.v) }
  public static func startPersonnelRecoveryExecutionInfo_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 7) }
  public static func addVectorOf(initialPoint: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: initialPoint, at: VTOFFSET.initialPoint.p) }
  public static func add(ingress: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ingress, def: 0.0, at: VTOFFSET.ingress.p) }
  public static func add(objStrategy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: objStrategy, at: VTOFFSET.objStrategy.p) }
  public static func addVectorOf(egressPoint: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: egressPoint, at: VTOFFSET.egressPoint.p) }
  public static func add(egress: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: egress, def: 0.0, at: VTOFFSET.egress.p) }
  public static func add(recoveryVehicle: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: recoveryVehicle, at: VTOFFSET.recoveryVehicle.p) }
  public static func add(escortVehicle: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: escortVehicle, at: VTOFFSET.escortVehicle.p) }
  public static func endPersonnelRecoveryExecutionInfo_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createPersonnelRecoveryExecutionInfo_Abridged(
    _ fbb: inout FlatBufferBuilder,
    initialPointVectorOffset initialPoint: Offset = Offset(),
    ingress: Double = 0.0,
    objStrategyOffset objStrategy: Offset = Offset(),
    egressPointVectorOffset egressPoint: Offset = Offset(),
    egress: Double = 0.0,
    recoveryVehicleOffset recoveryVehicle: Offset = Offset(),
    escortVehicleOffset escortVehicle: Offset = Offset()
  ) -> Offset {
    let __start = PersonnelRecoveryExecutionInfo_Abridged.startPersonnelRecoveryExecutionInfo_Abridged(&fbb)
    PersonnelRecoveryExecutionInfo_Abridged.addVectorOf(initialPoint: initialPoint, &fbb)
    PersonnelRecoveryExecutionInfo_Abridged.add(ingress: ingress, &fbb)
    PersonnelRecoveryExecutionInfo_Abridged.add(objStrategy: objStrategy, &fbb)
    PersonnelRecoveryExecutionInfo_Abridged.addVectorOf(egressPoint: egressPoint, &fbb)
    PersonnelRecoveryExecutionInfo_Abridged.add(egress: egress, &fbb)
    PersonnelRecoveryExecutionInfo_Abridged.add(recoveryVehicle: recoveryVehicle, &fbb)
    PersonnelRecoveryExecutionInfo_Abridged.add(escortVehicle: escortVehicle, &fbb)
    return PersonnelRecoveryExecutionInfo_Abridged.endPersonnelRecoveryExecutionInfo_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.initialPoint.p, fieldName: "initialPoint", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.ingress.p, fieldName: "ingress", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.objStrategy.p, fieldName: "objStrategy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.egressPoint.p, fieldName: "egressPoint", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.egress.p, fieldName: "egress", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.recoveryVehicle.p, fieldName: "recoveryVehicle", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.escortVehicle.p, fieldName: "escortVehicle", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

