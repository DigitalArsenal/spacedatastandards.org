// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection of aircraft mission location information for this aircraft mission tasking.
public struct AircraftMissionLocationTasking_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AircraftMissionLocationTasking_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case startTime = 4
    case endTime = 6
    case msnLocName = 8
    case alt = 10
    case airMsnPri = 12
    case areaGeoRad = 14
    case msnLocPtName = 16
    case msnLocPtLat = 18
    case msnLocPtLon = 20
    case msnLocPtBarT = 22
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The start time of this mission in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-10-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  public var startTime: String? { let o = _accessor.offset(VTOFFSET.startTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.startTime.v) }
  ///  The end time of this mission in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-10-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  public var endTime: String? { let o = _accessor.offset(VTOFFSET.endTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var endTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.endTime.v) }
  ///  The name that identifies the location at which this mission is to be performed. This can be the name of a general target area, orbit, cap point, station, etc.
  ///  Example: /// Example: KLSV
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var msnLocName: String? { let o = _accessor.offset(VTOFFSET.msnLocName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msnLocNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msnLocName.v) }
  ///  The altitude for this mission represented as hundreds of feet above MSL.
  ///  Example: /// Example: 210
  ///  Constraints: No constraints specified.
  public var alt: Int32 { let o = _accessor.offset(VTOFFSET.alt.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The code for the priority assigned to this mission.
  ///  Example: /// Example: 1A
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var airMsnPri: String? { let o = _accessor.offset(VTOFFSET.airMsnPri.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var airMsnPriSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.airMsnPri.v) }
  ///  The radius of the circle around the location being reported in feet.
  ///  Example: /// Example: 1000
  ///  Constraints: No constraints specified.
  public var areaGeoRad: Int32 { let o = _accessor.offset(VTOFFSET.areaGeoRad.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The location name for this mission.
  ///  Example: /// Example: PT ALFA
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var msnLocPtName: String? { let o = _accessor.offset(VTOFFSET.msnLocPtName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msnLocPtNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msnLocPtName.v) }
  ///  WGS-84 latitude of the mission location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
  ///  Example: /// Example: 35.123
  ///  Constraints: No constraints specified.
  public var msnLocPtLat: Double { let o = _accessor.offset(VTOFFSET.msnLocPtLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 longitude of the mission location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
  ///  Example: /// Example: 79.01
  ///  Constraints: No constraints specified.
  public var msnLocPtLon: Double { let o = _accessor.offset(VTOFFSET.msnLocPtLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The alpha-numeric specified location for this mission specified as a bearing angle in degrees relative to true north and a range in nautical miles (NM).
  ///  Example: /// Example: 330T-PT ALFA-50NM
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var msnLocPtBarT: String? { let o = _accessor.offset(VTOFFSET.msnLocPtBarT.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msnLocPtBarTSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msnLocPtBarT.v) }
  public static func startAircraftMissionLocationTasking_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 10) }
  public static func add(startTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: startTime, at: VTOFFSET.startTime.p) }
  public static func add(endTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: endTime, at: VTOFFSET.endTime.p) }
  public static func add(msnLocName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msnLocName, at: VTOFFSET.msnLocName.p) }
  public static func add(alt: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: alt, def: 0, at: VTOFFSET.alt.p) }
  public static func add(airMsnPri: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: airMsnPri, at: VTOFFSET.airMsnPri.p) }
  public static func add(areaGeoRad: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: areaGeoRad, def: 0, at: VTOFFSET.areaGeoRad.p) }
  public static func add(msnLocPtName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msnLocPtName, at: VTOFFSET.msnLocPtName.p) }
  public static func add(msnLocPtLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: msnLocPtLat, def: 0.0, at: VTOFFSET.msnLocPtLat.p) }
  public static func add(msnLocPtLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: msnLocPtLon, def: 0.0, at: VTOFFSET.msnLocPtLon.p) }
  public static func add(msnLocPtBarT: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msnLocPtBarT, at: VTOFFSET.msnLocPtBarT.p) }
  public static func endAircraftMissionLocationTasking_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAircraftMissionLocationTasking_Ingest(
    _ fbb: inout FlatBufferBuilder,
    startTimeOffset startTime: Offset = Offset(),
    endTimeOffset endTime: Offset = Offset(),
    msnLocNameOffset msnLocName: Offset = Offset(),
    alt: Int32 = 0,
    airMsnPriOffset airMsnPri: Offset = Offset(),
    areaGeoRad: Int32 = 0,
    msnLocPtNameOffset msnLocPtName: Offset = Offset(),
    msnLocPtLat: Double = 0.0,
    msnLocPtLon: Double = 0.0,
    msnLocPtBarTOffset msnLocPtBarT: Offset = Offset()
  ) -> Offset {
    let __start = AircraftMissionLocationTasking_Ingest.startAircraftMissionLocationTasking_Ingest(&fbb)
    AircraftMissionLocationTasking_Ingest.add(startTime: startTime, &fbb)
    AircraftMissionLocationTasking_Ingest.add(endTime: endTime, &fbb)
    AircraftMissionLocationTasking_Ingest.add(msnLocName: msnLocName, &fbb)
    AircraftMissionLocationTasking_Ingest.add(alt: alt, &fbb)
    AircraftMissionLocationTasking_Ingest.add(airMsnPri: airMsnPri, &fbb)
    AircraftMissionLocationTasking_Ingest.add(areaGeoRad: areaGeoRad, &fbb)
    AircraftMissionLocationTasking_Ingest.add(msnLocPtName: msnLocPtName, &fbb)
    AircraftMissionLocationTasking_Ingest.add(msnLocPtLat: msnLocPtLat, &fbb)
    AircraftMissionLocationTasking_Ingest.add(msnLocPtLon: msnLocPtLon, &fbb)
    AircraftMissionLocationTasking_Ingest.add(msnLocPtBarT: msnLocPtBarT, &fbb)
    return AircraftMissionLocationTasking_Ingest.endAircraftMissionLocationTasking_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.startTime.p, fieldName: "startTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.endTime.p, fieldName: "endTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msnLocName.p, fieldName: "msnLocName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.alt.p, fieldName: "alt", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.airMsnPri.p, fieldName: "airMsnPri", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.areaGeoRad.p, fieldName: "areaGeoRad", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.msnLocPtName.p, fieldName: "msnLocPtName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msnLocPtLat.p, fieldName: "msnLocPtLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.msnLocPtLon.p, fieldName: "msnLocPtLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.msnLocPtBarT.p, fieldName: "msnLocPtBarT", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

