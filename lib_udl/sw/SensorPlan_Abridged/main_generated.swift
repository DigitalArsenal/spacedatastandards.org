// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum SensorPlan_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: SensorPlan_Abridged_dataMode_Enum { return .exercise }
  public static var min: SensorPlan_Abridged_dataMode_Enum { return .real }
}


///  /// A Plan is used to aggregate two or more of the same type of record to a parent entity, with the planId (UUID) being included in all of the subordinate records, enabling resolution back to the parent.
public struct SensorPlan_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SENS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: SensorPlan_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case type = 8
    case recType = 10
    case startTime = 12
    case endTime = 14
    case name = 16
    case idSensor = 18
    case origSensorId = 20
    case purpose = 22
    case senNetwork = 24
    case reqTotal = 26
    case customer = 28
    case status = 30
    case createdAt = 32
    case createdBy = 34
    case source = 36
    case origin = 38
    case dataMode = 40
    case origNetwork = 42
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SENSORPLAN-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The type of this sensor plan/schedule (PLAN, REQUEST, SCHEDULE).
  ///  Example: /// Example: PLAN
  ///  Constraints: Minimum length = 1, Maximum length = 12
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  The type of records that comprise this parent set (COLLECT, CONTACT).
  ///  Example: /// Example: COLLECT
  ///  Constraints: Minimum length = 1, Maximum length = 12
  public var recType: String? { let o = _accessor.offset(VTOFFSET.recType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var recTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.recType.v) }
  ///  The start time of the plan or schedule, in ISO 8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var startTime: String? { let o = _accessor.offset(VTOFFSET.startTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.startTime.v) }
  ///  The end time of the plan or schedule, in ISO 8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var endTime: String? { let o = _accessor.offset(VTOFFSET.endTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var endTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.endTime.v) }
  ///  Name associated with this plan or schedule.
  ///  Example: /// Example: EXAMPLE NAME
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  Unique identifier of the requested/schedule/planned sensor associated with this request.
  ///  Example: /// Example: REF-SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origSensorId: String? { let o = _accessor.offset(VTOFFSET.origSensorId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSensorIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSensorId.v) }
  ///  The purpose/description of this plan or schedule.
  ///  Example: /// Example: Example purpose
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var purpose: String? { let o = _accessor.offset(VTOFFSET.purpose.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var purposeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.purpose.v) }
  ///  The sensor or ground network associated with this plan or schedule.
  ///  Example: /// Example: NETWORK
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var senNetwork: String? { let o = _accessor.offset(VTOFFSET.senNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var senNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.senNetwork.v) }
  ///  The total number of requests contained in this plan or schedule. Value of this field must match the size of collectRequest list if the list is provided and can be null or any value otherwise.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var reqTotal: Int32 { let o = _accessor.offset(VTOFFSET.reqTotal.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The customer for this plan or schedule.
  ///  Example: /// Example: CUSTOMER
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var customer: String? { let o = _accessor.offset(VTOFFSET.customer.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var customerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.customer.v) }
  ///  The status of this plan or schedule (ACCEPTED, APPROVED, COMPLETED, PROPOSED, REJECTED, REQUESTED, SCHEDULED).
  ///  Example: /// Example: ACCEPTED
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var status: String? { let o = _accessor.offset(VTOFFSET.status.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var statusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.status.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: SensorPlan_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : SensorPlan_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startSensorPlan_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 20) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(recType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: recType, at: VTOFFSET.recType.p) }
  public static func add(startTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: startTime, at: VTOFFSET.startTime.p) }
  public static func add(endTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: endTime, at: VTOFFSET.endTime.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(origSensorId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSensorId, at: VTOFFSET.origSensorId.p) }
  public static func add(purpose: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: purpose, at: VTOFFSET.purpose.p) }
  public static func add(senNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: senNetwork, at: VTOFFSET.senNetwork.p) }
  public static func add(reqTotal: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: reqTotal, def: 0, at: VTOFFSET.reqTotal.p) }
  public static func add(customer: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: customer, at: VTOFFSET.customer.p) }
  public static func add(status: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: status, at: VTOFFSET.status.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: SensorPlan_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endSensorPlan_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSensorPlan_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    recTypeOffset recType: Offset = Offset(),
    startTimeOffset startTime: Offset = Offset(),
    endTimeOffset endTime: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    origSensorIdOffset origSensorId: Offset = Offset(),
    purposeOffset purpose: Offset = Offset(),
    senNetworkOffset senNetwork: Offset = Offset(),
    reqTotal: Int32 = 0,
    customerOffset customer: Offset = Offset(),
    statusOffset status: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: SensorPlan_Abridged_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = SensorPlan_Abridged.startSensorPlan_Abridged(&fbb)
    SensorPlan_Abridged.add(id: id, &fbb)
    SensorPlan_Abridged.add(classificationMarking: classificationMarking, &fbb)
    SensorPlan_Abridged.add(type: type, &fbb)
    SensorPlan_Abridged.add(recType: recType, &fbb)
    SensorPlan_Abridged.add(startTime: startTime, &fbb)
    SensorPlan_Abridged.add(endTime: endTime, &fbb)
    SensorPlan_Abridged.add(name: name, &fbb)
    SensorPlan_Abridged.add(idSensor: idSensor, &fbb)
    SensorPlan_Abridged.add(origSensorId: origSensorId, &fbb)
    SensorPlan_Abridged.add(purpose: purpose, &fbb)
    SensorPlan_Abridged.add(senNetwork: senNetwork, &fbb)
    SensorPlan_Abridged.add(reqTotal: reqTotal, &fbb)
    SensorPlan_Abridged.add(customer: customer, &fbb)
    SensorPlan_Abridged.add(status: status, &fbb)
    SensorPlan_Abridged.add(createdAt: createdAt, &fbb)
    SensorPlan_Abridged.add(createdBy: createdBy, &fbb)
    SensorPlan_Abridged.add(source: source, &fbb)
    SensorPlan_Abridged.add(origin: origin, &fbb)
    SensorPlan_Abridged.add(dataMode: dataMode, &fbb)
    SensorPlan_Abridged.add(origNetwork: origNetwork, &fbb)
    return SensorPlan_Abridged.endSensorPlan_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.recType.p, fieldName: "recType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.startTime.p, fieldName: "startTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.endTime.p, fieldName: "endTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSensorId.p, fieldName: "origSensorId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.purpose.p, fieldName: "purpose", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.senNetwork.p, fieldName: "senNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reqTotal.p, fieldName: "reqTotal", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.customer.p, fieldName: "customer", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.status.p, fieldName: "status", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: SensorPlan_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

