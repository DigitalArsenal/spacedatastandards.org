// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
public struct DataLinkReferences_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "DATA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: DataLinkReferences_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case refSerialId = 4
    case refType = 6
    case refOriginator = 8
    case refTs = 10
    case refSerialNum = 12
    case refSpecialNotation = 14
    case refSics = 16
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Specifies an alphabetic serial identifier a reference pertaining to the data link message.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 2
  public var refSerialId: String? { let o = _accessor.offset(VTOFFSET.refSerialId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var refSerialIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.refSerialId.v) }
  ///  Specifies the type of document referenced.
  ///  Example: /// Example: ABSTAT
  ///  Constraints: Minimum length = 0, Maximum length = 56
  public var refType: String? { let o = _accessor.offset(VTOFFSET.refType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var refTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.refType.v) }
  ///  The originator of this reference.
  ///  Example: /// Example: CENTCOM
  ///  Constraints: Minimum length = 0, Maximum length = 30
  public var refOriginator: String? { let o = _accessor.offset(VTOFFSET.refOriginator.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var refOriginatorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.refOriginator.v) }
  ///  Timestamp of the referenced message, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-07T13:55:43.123Z
  ///  Constraints: No constraints specified.
  public var refTs: String? { let o = _accessor.offset(VTOFFSET.refTs.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var refTsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.refTs.v) }
  ///  Serial number assigned to this reference.
  ///  Example: /// Example: 1402001
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var refSerialNum: String? { let o = _accessor.offset(VTOFFSET.refSerialNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var refSerialNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.refSerialNum.v) }
  ///  Indicates any special actions, restrictions, guidance, or information relating to this reference.
  ///  Example: /// Example: NOTAL
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var refSpecialNotation: String? { let o = _accessor.offset(VTOFFSET.refSpecialNotation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var refSpecialNotationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.refSpecialNotation.v) }
  ///  Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document being referenced.
  ///  Example: /// Example: ['RDU', 'C-123-92']
  ///  Constraints: No constraints specified.
  public var hasRefSics: Bool { let o = _accessor.offset(VTOFFSET.refSics.v); return o == 0 ? false : true }
  public var refSicsCount: Int32 { let o = _accessor.offset(VTOFFSET.refSics.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func refSics(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.refSics.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startDataLinkReferences_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 7) }
  public static func add(refSerialId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: refSerialId, at: VTOFFSET.refSerialId.p) }
  public static func add(refType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: refType, at: VTOFFSET.refType.p) }
  public static func add(refOriginator: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: refOriginator, at: VTOFFSET.refOriginator.p) }
  public static func add(refTs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: refTs, at: VTOFFSET.refTs.p) }
  public static func add(refSerialNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: refSerialNum, at: VTOFFSET.refSerialNum.p) }
  public static func add(refSpecialNotation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: refSpecialNotation, at: VTOFFSET.refSpecialNotation.p) }
  public static func addVectorOf(refSics: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: refSics, at: VTOFFSET.refSics.p) }
  public static func endDataLinkReferences_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createDataLinkReferences_Ingest(
    _ fbb: inout FlatBufferBuilder,
    refSerialIdOffset refSerialId: Offset = Offset(),
    refTypeOffset refType: Offset = Offset(),
    refOriginatorOffset refOriginator: Offset = Offset(),
    refTsOffset refTs: Offset = Offset(),
    refSerialNumOffset refSerialNum: Offset = Offset(),
    refSpecialNotationOffset refSpecialNotation: Offset = Offset(),
    refSicsVectorOffset refSics: Offset = Offset()
  ) -> Offset {
    let __start = DataLinkReferences_Ingest.startDataLinkReferences_Ingest(&fbb)
    DataLinkReferences_Ingest.add(refSerialId: refSerialId, &fbb)
    DataLinkReferences_Ingest.add(refType: refType, &fbb)
    DataLinkReferences_Ingest.add(refOriginator: refOriginator, &fbb)
    DataLinkReferences_Ingest.add(refTs: refTs, &fbb)
    DataLinkReferences_Ingest.add(refSerialNum: refSerialNum, &fbb)
    DataLinkReferences_Ingest.add(refSpecialNotation: refSpecialNotation, &fbb)
    DataLinkReferences_Ingest.addVectorOf(refSics: refSics, &fbb)
    return DataLinkReferences_Ingest.endDataLinkReferences_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.refSerialId.p, fieldName: "refSerialId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.refType.p, fieldName: "refType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.refOriginator.p, fieldName: "refOriginator", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.refTs.p, fieldName: "refTs", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.refSerialNum.p, fieldName: "refSerialNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.refSpecialNotation.p, fieldName: "refSpecialNotation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.refSics.p, fieldName: "refSics", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

