// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
public struct MtiMission_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "MTIM" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: MtiMission_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case m1 = 4
    case m2 = 6
    case m3 = 8
    case m4 = 10
    case msnRefTs = 12
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The mission plan id.
  ///  Example: /// Example: M1-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var m1: String? { let o = _accessor.offset(VTOFFSET.m1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var m1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.m1.v) }
  ///  Unique identification of the flight plan.
  ///  Example: /// Example: M2-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var m2: String? { let o = _accessor.offset(VTOFFSET.m2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var m2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.m2.v) }
  ///  Platform type that originated the data.
  ///  Example: /// Example: PLATFORM
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var m3: String? { let o = _accessor.offset(VTOFFSET.m3.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var m3SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.m3.v) }
  ///  Identification of the platform variant, modifications, etc.
  ///  Example: /// Example: IDENT
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var m4: String? { let o = _accessor.offset(VTOFFSET.m4.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var m4SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.m4.v) }
  ///  Mission origination date.
  ///  Example: /// Example: 2018-01-01
  ///  Constraints: No constraints specified.
  public var msnRefTs: String? { let o = _accessor.offset(VTOFFSET.msnRefTs.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msnRefTsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msnRefTs.v) }
  public static func startMtiMission_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 5) }
  public static func add(m1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: m1, at: VTOFFSET.m1.p) }
  public static func add(m2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: m2, at: VTOFFSET.m2.p) }
  public static func add(m3: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: m3, at: VTOFFSET.m3.p) }
  public static func add(m4: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: m4, at: VTOFFSET.m4.p) }
  public static func add(msnRefTs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msnRefTs, at: VTOFFSET.msnRefTs.p) }
  public static func endMtiMission_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMtiMission_Ingest(
    _ fbb: inout FlatBufferBuilder,
    m1Offset m1: Offset = Offset(),
    m2Offset m2: Offset = Offset(),
    m3Offset m3: Offset = Offset(),
    m4Offset m4: Offset = Offset(),
    msnRefTsOffset msnRefTs: Offset = Offset()
  ) -> Offset {
    let __start = MtiMission_Ingest.startMtiMission_Ingest(&fbb)
    MtiMission_Ingest.add(m1: m1, &fbb)
    MtiMission_Ingest.add(m2: m2, &fbb)
    MtiMission_Ingest.add(m3: m3, &fbb)
    MtiMission_Ingest.add(m4: m4, &fbb)
    MtiMission_Ingest.add(msnRefTs: msnRefTs, &fbb)
    return MtiMission_Ingest.endMtiMission_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.m1.p, fieldName: "m1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.m2.p, fieldName: "m2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.m3.p, fieldName: "m3", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.m4.p, fieldName: "m4", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msnRefTs.p, fieldName: "msnRefTs", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

