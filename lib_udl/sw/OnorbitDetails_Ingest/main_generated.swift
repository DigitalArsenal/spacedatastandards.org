// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum OnorbitDetails_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: OnorbitDetails_Ingest_dataMode_Enum { return .exercise }
  public static var min: OnorbitDetails_Ingest_dataMode_Enum { return .real }
}


///  /// Contains details of the OnOrbit object.
public struct OnorbitDetails_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ONOR" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: OnorbitDetails_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case idOnOrbit = 6
    case classificationMarking = 8
    case lastObTime = 10
    case vismag = 12
    case vismagMin = 14
    case vismagMax = 16
    case vismagMean = 18
    case rcs = 20
    case rcsMin = 22
    case rcsMax = 24
    case rcsMean = 26
    case bolDeltaV = 28
    case maxDeltaV = 30
    case deltaVunc = 32
    case estDeltaVduration = 34
    case numMission = 36
    case missionTypes = 38
    case busType = 40
    case geoSlot = 42
    case driftRate = 44
    case dryMass = 46
    case additionalMass = 48
    case launchMassMin = 50
    case launchMass = 52
    case launchMassMax = 54
    case bolFuelMass = 56
    case currentMass = 58
    case totalMassUnc = 60
    case solarArrayArea = 62
    case maneuverable = 64
    case fuelRemaining = 66
    case crossSection = 68
    case busCrossSection = 70
    case maxRadius = 72
    case colaRadius = 74
    case adeptRadius = 76
    case numDeployable = 78
    case depNames = 80
    case depEstMasses = 82
    case depMassUncs = 84
    case source = 86
    case origin = 88
    case lastObSource = 90
    case dataMode = 92
    case createdAt = 94
    case createdBy = 96
    case origNetwork = 98
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ONORBITDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  UUID of the parent Onorbit record.
  ///  Example: /// Example: REF-ONORBIT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  public var lastObTime: String? { let o = _accessor.offset(VTOFFSET.lastObTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastObTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastObTime.v) }
  ///  Current/latest visual magnitude in M.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var vismag: Double { let o = _accessor.offset(VTOFFSET.vismag.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Minimum visual magnitude in M.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  public var vismagMin: Double { let o = _accessor.offset(VTOFFSET.vismagMin.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum visual magnitude in M.
  ///  Example: /// Example: 15.23
  ///  Constraints: No constraints specified.
  public var vismagMax: Double { let o = _accessor.offset(VTOFFSET.vismagMax.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Mean visual magnitude in M.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var vismagMean: Double { let o = _accessor.offset(VTOFFSET.vismagMean.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Current/latest radar cross section in meters squared.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var rcs: Double { let o = _accessor.offset(VTOFFSET.rcs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Minimum radar cross section in meters squared.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  public var rcsMin: Double { let o = _accessor.offset(VTOFFSET.rcsMin.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum radar cross section in meters squared.
  ///  Example: /// Example: 15.23
  ///  Constraints: No constraints specified.
  public var rcsMax: Double { let o = _accessor.offset(VTOFFSET.rcsMax.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Mean radar cross section in meters squared.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var rcsMean: Double { let o = _accessor.offset(VTOFFSET.rcsMean.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The total beginning of life delta V of the spacecraft, in meters per second.
  ///  Example: /// Example: 1000.1
  ///  Constraints: No constraints specified.
  public var bolDeltaV: Double { let o = _accessor.offset(VTOFFSET.bolDeltaV.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum delta V available for this on-orbit spacecraft, in meters per second.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var maxDeltaV: Double { let o = _accessor.offset(VTOFFSET.maxDeltaV.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
  ///  Example: /// Example: 50.1
  ///  Constraints: No constraints specified.
  public var deltaVunc: Double { let o = _accessor.offset(VTOFFSET.deltaVunc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Estimated maximum burn duration for the object, in seconds.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var estDeltaVduration: Double { let o = _accessor.offset(VTOFFSET.estDeltaVduration.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The number of distinct missions the spacecraft performs.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var numMission: Int32 { let o = _accessor.offset(VTOFFSET.numMission.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.
  ///  Example: /// Example: ['Weather', 'Space Weather']
  ///  Constraints: No constraints specified.
  public var hasMissionTypes: Bool { let o = _accessor.offset(VTOFFSET.missionTypes.v); return o == 0 ? false : true }
  public var missionTypesCount: Int32 { let o = _accessor.offset(VTOFFSET.missionTypes.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func missionTypes(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.missionTypes.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Type of the bus on the spacecraft.
  ///  Example: /// Example: A2100
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var busType: String? { let o = _accessor.offset(VTOFFSET.busType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var busTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.busType.v) }
  ///  GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.
  ///  Example: /// Example: 90.23
  ///  Constraints: No constraints specified.
  public var geoSlot: Double { let o = _accessor.offset(VTOFFSET.geoSlot.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  GEO drift rate, if applicable in degrees per day.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var driftRate: Double { let o = _accessor.offset(VTOFFSET.driftRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft dry mass (without fuel or disposables) in kilograms.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var dryMass: Double { let o = _accessor.offset(VTOFFSET.dryMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Mass of fuel and disposables at launch time in kilograms.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var additionalMass: Double { let o = _accessor.offset(VTOFFSET.additionalMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  public var launchMassMin: Double { let o = _accessor.offset(VTOFFSET.launchMassMin.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Nominal mass of spacecraft and fuel at launch time, in kilograms.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var launchMass: Double { let o = _accessor.offset(VTOFFSET.launchMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
  ///  Example: /// Example: 15.23
  ///  Constraints: No constraints specified.
  public var launchMassMax: Double { let o = _accessor.offset(VTOFFSET.launchMassMax.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft beginning of life fuel mass, in orbit, in kilograms.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var bolFuelMass: Double { let o = _accessor.offset(VTOFFSET.bolFuelMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The estimated total current mass of the spacecraft, in kilograms.
  ///  Example: /// Example: 500
  ///  Constraints: No constraints specified.
  public var currentMass: Double { let o = _accessor.offset(VTOFFSET.currentMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
  ///  Example: /// Example: 50.1
  ///  Constraints: No constraints specified.
  public var totalMassUnc: Double { let o = _accessor.offset(VTOFFSET.totalMassUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft deployed area of solar array in meters squared.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var solarArrayArea: Double { let o = _accessor.offset(VTOFFSET.solarArrayArea.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var maneuverable: Bool { let o = _accessor.offset(VTOFFSET.maneuverable.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Estimated remaining fuel for the object in kilograms.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var fuelRemaining: Double { let o = _accessor.offset(VTOFFSET.fuelRemaining.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average cross sectional area in meters squared.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var crossSection: Double { let o = _accessor.offset(VTOFFSET.crossSection.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average cross sectional area of the bus in meters squared.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var busCrossSection: Double { let o = _accessor.offset(VTOFFSET.busCrossSection.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var maxRadius: Double { let o = _accessor.offset(VTOFFSET.maxRadius.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var colaRadius: Double { let o = _accessor.offset(VTOFFSET.colaRadius.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var adeptRadius: Double { let o = _accessor.offset(VTOFFSET.adeptRadius.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The number of sub-satellites or deployable objects on the spacecraft.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var numDeployable: Int32 { let o = _accessor.offset(VTOFFSET.numDeployable.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.
  ///  Example: /// Example: ['GOES-18A', 'GOES-18B']
  ///  Constraints: No constraints specified.
  public var hasDepNames: Bool { let o = _accessor.offset(VTOFFSET.depNames.v); return o == 0 ? false : true }
  public var depNamesCount: Int32 { let o = _accessor.offset(VTOFFSET.depNames.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func depNames(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.depNames.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
  ///  Example: /// Example: [20, 21]
  ///  Constraints: No constraints specified.
  public var hasDepEstMasses: Bool { let o = _accessor.offset(VTOFFSET.depEstMasses.v); return o == 0 ? false : true }
  public var depEstMassesCount: Int32 { let o = _accessor.offset(VTOFFSET.depEstMasses.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func depEstMasses(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.depEstMasses.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
  ///  Example: /// Example: [10, 5]
  ///  Constraints: No constraints specified.
  public var hasDepMassUncs: Bool { let o = _accessor.offset(VTOFFSET.depMassUncs.v); return o == 0 ? false : true }
  public var depMassUncsCount: Int32 { let o = _accessor.offset(VTOFFSET.depMassUncs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func depMassUncs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.depMassUncs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The name of the source who last provided an observation for this idOnOrbit.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var lastObSource: String? { let o = _accessor.offset(VTOFFSET.lastObSource.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastObSourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastObSource.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: OnorbitDetails_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : OnorbitDetails_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startOnorbitDetails_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 48) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(lastObTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastObTime, at: VTOFFSET.lastObTime.p) }
  public static func add(vismag: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vismag, def: 0.0, at: VTOFFSET.vismag.p) }
  public static func add(vismagMin: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vismagMin, def: 0.0, at: VTOFFSET.vismagMin.p) }
  public static func add(vismagMax: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vismagMax, def: 0.0, at: VTOFFSET.vismagMax.p) }
  public static func add(vismagMean: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vismagMean, def: 0.0, at: VTOFFSET.vismagMean.p) }
  public static func add(rcs: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rcs, def: 0.0, at: VTOFFSET.rcs.p) }
  public static func add(rcsMin: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rcsMin, def: 0.0, at: VTOFFSET.rcsMin.p) }
  public static func add(rcsMax: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rcsMax, def: 0.0, at: VTOFFSET.rcsMax.p) }
  public static func add(rcsMean: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rcsMean, def: 0.0, at: VTOFFSET.rcsMean.p) }
  public static func add(bolDeltaV: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bolDeltaV, def: 0.0, at: VTOFFSET.bolDeltaV.p) }
  public static func add(maxDeltaV: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxDeltaV, def: 0.0, at: VTOFFSET.maxDeltaV.p) }
  public static func add(deltaVunc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: deltaVunc, def: 0.0, at: VTOFFSET.deltaVunc.p) }
  public static func add(estDeltaVduration: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: estDeltaVduration, def: 0.0, at: VTOFFSET.estDeltaVduration.p) }
  public static func add(numMission: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numMission, def: 0, at: VTOFFSET.numMission.p) }
  public static func addVectorOf(missionTypes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: missionTypes, at: VTOFFSET.missionTypes.p) }
  public static func add(busType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: busType, at: VTOFFSET.busType.p) }
  public static func add(geoSlot: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: geoSlot, def: 0.0, at: VTOFFSET.geoSlot.p) }
  public static func add(driftRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: driftRate, def: 0.0, at: VTOFFSET.driftRate.p) }
  public static func add(dryMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dryMass, def: 0.0, at: VTOFFSET.dryMass.p) }
  public static func add(additionalMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: additionalMass, def: 0.0, at: VTOFFSET.additionalMass.p) }
  public static func add(launchMassMin: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: launchMassMin, def: 0.0, at: VTOFFSET.launchMassMin.p) }
  public static func add(launchMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: launchMass, def: 0.0, at: VTOFFSET.launchMass.p) }
  public static func add(launchMassMax: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: launchMassMax, def: 0.0, at: VTOFFSET.launchMassMax.p) }
  public static func add(bolFuelMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bolFuelMass, def: 0.0, at: VTOFFSET.bolFuelMass.p) }
  public static func add(currentMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: currentMass, def: 0.0, at: VTOFFSET.currentMass.p) }
  public static func add(totalMassUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalMassUnc, def: 0.0, at: VTOFFSET.totalMassUnc.p) }
  public static func add(solarArrayArea: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: solarArrayArea, def: 0.0, at: VTOFFSET.solarArrayArea.p) }
  public static func add(maneuverable: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maneuverable, def: false,
   at: VTOFFSET.maneuverable.p) }
  public static func add(fuelRemaining: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fuelRemaining, def: 0.0, at: VTOFFSET.fuelRemaining.p) }
  public static func add(crossSection: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: crossSection, def: 0.0, at: VTOFFSET.crossSection.p) }
  public static func add(busCrossSection: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: busCrossSection, def: 0.0, at: VTOFFSET.busCrossSection.p) }
  public static func add(maxRadius: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxRadius, def: 0.0, at: VTOFFSET.maxRadius.p) }
  public static func add(colaRadius: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: colaRadius, def: 0.0, at: VTOFFSET.colaRadius.p) }
  public static func add(adeptRadius: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: adeptRadius, def: 0.0, at: VTOFFSET.adeptRadius.p) }
  public static func add(numDeployable: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numDeployable, def: 0, at: VTOFFSET.numDeployable.p) }
  public static func addVectorOf(depNames: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: depNames, at: VTOFFSET.depNames.p) }
  public static func addVectorOf(depEstMasses: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: depEstMasses, at: VTOFFSET.depEstMasses.p) }
  public static func addVectorOf(depMassUncs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: depMassUncs, at: VTOFFSET.depMassUncs.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(lastObSource: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastObSource, at: VTOFFSET.lastObSource.p) }
  public static func add(dataMode: OnorbitDetails_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endOnorbitDetails_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createOnorbitDetails_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    lastObTimeOffset lastObTime: Offset = Offset(),
    vismag: Double = 0.0,
    vismagMin: Double = 0.0,
    vismagMax: Double = 0.0,
    vismagMean: Double = 0.0,
    rcs: Double = 0.0,
    rcsMin: Double = 0.0,
    rcsMax: Double = 0.0,
    rcsMean: Double = 0.0,
    bolDeltaV: Double = 0.0,
    maxDeltaV: Double = 0.0,
    deltaVunc: Double = 0.0,
    estDeltaVduration: Double = 0.0,
    numMission: Int32 = 0,
    missionTypesVectorOffset missionTypes: Offset = Offset(),
    busTypeOffset busType: Offset = Offset(),
    geoSlot: Double = 0.0,
    driftRate: Double = 0.0,
    dryMass: Double = 0.0,
    additionalMass: Double = 0.0,
    launchMassMin: Double = 0.0,
    launchMass: Double = 0.0,
    launchMassMax: Double = 0.0,
    bolFuelMass: Double = 0.0,
    currentMass: Double = 0.0,
    totalMassUnc: Double = 0.0,
    solarArrayArea: Double = 0.0,
    maneuverable: Bool = false,
    fuelRemaining: Double = 0.0,
    crossSection: Double = 0.0,
    busCrossSection: Double = 0.0,
    maxRadius: Double = 0.0,
    colaRadius: Double = 0.0,
    adeptRadius: Double = 0.0,
    numDeployable: Int32 = 0,
    depNamesVectorOffset depNames: Offset = Offset(),
    depEstMassesVectorOffset depEstMasses: Offset = Offset(),
    depMassUncsVectorOffset depMassUncs: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    lastObSourceOffset lastObSource: Offset = Offset(),
    dataMode: OnorbitDetails_Ingest_dataMode_Enum = .real,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = OnorbitDetails_Ingest.startOnorbitDetails_Ingest(&fbb)
    OnorbitDetails_Ingest.add(id: id, &fbb)
    OnorbitDetails_Ingest.add(idOnOrbit: idOnOrbit, &fbb)
    OnorbitDetails_Ingest.add(classificationMarking: classificationMarking, &fbb)
    OnorbitDetails_Ingest.add(lastObTime: lastObTime, &fbb)
    OnorbitDetails_Ingest.add(vismag: vismag, &fbb)
    OnorbitDetails_Ingest.add(vismagMin: vismagMin, &fbb)
    OnorbitDetails_Ingest.add(vismagMax: vismagMax, &fbb)
    OnorbitDetails_Ingest.add(vismagMean: vismagMean, &fbb)
    OnorbitDetails_Ingest.add(rcs: rcs, &fbb)
    OnorbitDetails_Ingest.add(rcsMin: rcsMin, &fbb)
    OnorbitDetails_Ingest.add(rcsMax: rcsMax, &fbb)
    OnorbitDetails_Ingest.add(rcsMean: rcsMean, &fbb)
    OnorbitDetails_Ingest.add(bolDeltaV: bolDeltaV, &fbb)
    OnorbitDetails_Ingest.add(maxDeltaV: maxDeltaV, &fbb)
    OnorbitDetails_Ingest.add(deltaVunc: deltaVunc, &fbb)
    OnorbitDetails_Ingest.add(estDeltaVduration: estDeltaVduration, &fbb)
    OnorbitDetails_Ingest.add(numMission: numMission, &fbb)
    OnorbitDetails_Ingest.addVectorOf(missionTypes: missionTypes, &fbb)
    OnorbitDetails_Ingest.add(busType: busType, &fbb)
    OnorbitDetails_Ingest.add(geoSlot: geoSlot, &fbb)
    OnorbitDetails_Ingest.add(driftRate: driftRate, &fbb)
    OnorbitDetails_Ingest.add(dryMass: dryMass, &fbb)
    OnorbitDetails_Ingest.add(additionalMass: additionalMass, &fbb)
    OnorbitDetails_Ingest.add(launchMassMin: launchMassMin, &fbb)
    OnorbitDetails_Ingest.add(launchMass: launchMass, &fbb)
    OnorbitDetails_Ingest.add(launchMassMax: launchMassMax, &fbb)
    OnorbitDetails_Ingest.add(bolFuelMass: bolFuelMass, &fbb)
    OnorbitDetails_Ingest.add(currentMass: currentMass, &fbb)
    OnorbitDetails_Ingest.add(totalMassUnc: totalMassUnc, &fbb)
    OnorbitDetails_Ingest.add(solarArrayArea: solarArrayArea, &fbb)
    OnorbitDetails_Ingest.add(maneuverable: maneuverable, &fbb)
    OnorbitDetails_Ingest.add(fuelRemaining: fuelRemaining, &fbb)
    OnorbitDetails_Ingest.add(crossSection: crossSection, &fbb)
    OnorbitDetails_Ingest.add(busCrossSection: busCrossSection, &fbb)
    OnorbitDetails_Ingest.add(maxRadius: maxRadius, &fbb)
    OnorbitDetails_Ingest.add(colaRadius: colaRadius, &fbb)
    OnorbitDetails_Ingest.add(adeptRadius: adeptRadius, &fbb)
    OnorbitDetails_Ingest.add(numDeployable: numDeployable, &fbb)
    OnorbitDetails_Ingest.addVectorOf(depNames: depNames, &fbb)
    OnorbitDetails_Ingest.addVectorOf(depEstMasses: depEstMasses, &fbb)
    OnorbitDetails_Ingest.addVectorOf(depMassUncs: depMassUncs, &fbb)
    OnorbitDetails_Ingest.add(source: source, &fbb)
    OnorbitDetails_Ingest.add(origin: origin, &fbb)
    OnorbitDetails_Ingest.add(lastObSource: lastObSource, &fbb)
    OnorbitDetails_Ingest.add(dataMode: dataMode, &fbb)
    OnorbitDetails_Ingest.add(createdAt: createdAt, &fbb)
    OnorbitDetails_Ingest.add(createdBy: createdBy, &fbb)
    OnorbitDetails_Ingest.add(origNetwork: origNetwork, &fbb)
    return OnorbitDetails_Ingest.endOnorbitDetails_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lastObTime.p, fieldName: "lastObTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.vismag.p, fieldName: "vismag", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.vismagMin.p, fieldName: "vismagMin", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.vismagMax.p, fieldName: "vismagMax", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.vismagMean.p, fieldName: "vismagMean", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rcs.p, fieldName: "rcs", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rcsMin.p, fieldName: "rcsMin", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rcsMax.p, fieldName: "rcsMax", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rcsMean.p, fieldName: "rcsMean", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bolDeltaV.p, fieldName: "bolDeltaV", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxDeltaV.p, fieldName: "maxDeltaV", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.deltaVunc.p, fieldName: "deltaVunc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.estDeltaVduration.p, fieldName: "estDeltaVduration", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.numMission.p, fieldName: "numMission", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.missionTypes.p, fieldName: "missionTypes", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.busType.p, fieldName: "busType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.geoSlot.p, fieldName: "geoSlot", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.driftRate.p, fieldName: "driftRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dryMass.p, fieldName: "dryMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.additionalMass.p, fieldName: "additionalMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.launchMassMin.p, fieldName: "launchMassMin", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.launchMass.p, fieldName: "launchMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.launchMassMax.p, fieldName: "launchMassMax", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bolFuelMass.p, fieldName: "bolFuelMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.currentMass.p, fieldName: "currentMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.totalMassUnc.p, fieldName: "totalMassUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.solarArrayArea.p, fieldName: "solarArrayArea", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maneuverable.p, fieldName: "maneuverable", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.fuelRemaining.p, fieldName: "fuelRemaining", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.crossSection.p, fieldName: "crossSection", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.busCrossSection.p, fieldName: "busCrossSection", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxRadius.p, fieldName: "maxRadius", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.colaRadius.p, fieldName: "colaRadius", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.adeptRadius.p, fieldName: "adeptRadius", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.numDeployable.p, fieldName: "numDeployable", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.depNames.p, fieldName: "depNames", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.depEstMasses.p, fieldName: "depEstMasses", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.depMassUncs.p, fieldName: "depMassUncs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lastObSource.p, fieldName: "lastObSource", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: OnorbitDetails_Ingest_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

