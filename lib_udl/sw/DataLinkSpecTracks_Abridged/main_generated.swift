// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
public struct DataLinkSpecTracks_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "DATA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: DataLinkSpecTracks_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case specTrackNum = 4
    case specTrackNumDesc = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The special track number used on the data link entered as an octal reference number. Used to identify a particular type of platform (e.g. MPA, KRESTA) or platform name (e.g. TROMP, MOUNT WHITNEY) which is not included in assigned track blocks.
  ///  Example: /// Example: 12345
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var specTrackNum: String? { let o = _accessor.offset(VTOFFSET.specTrackNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var specTrackNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.specTrackNum.v) }
  ///  Description of the special track number.
  ///  Example: /// Example: SAM SITE CHARLIE
  ///  Constraints: Minimum length = 0, Maximum length = 40
  public var specTrackNumDesc: String? { let o = _accessor.offset(VTOFFSET.specTrackNumDesc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var specTrackNumDescSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.specTrackNumDesc.v) }
  public static func startDataLinkSpecTracks_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(specTrackNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: specTrackNum, at: VTOFFSET.specTrackNum.p) }
  public static func add(specTrackNumDesc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: specTrackNumDesc, at: VTOFFSET.specTrackNumDesc.p) }
  public static func endDataLinkSpecTracks_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createDataLinkSpecTracks_Abridged(
    _ fbb: inout FlatBufferBuilder,
    specTrackNumOffset specTrackNum: Offset = Offset(),
    specTrackNumDescOffset specTrackNumDesc: Offset = Offset()
  ) -> Offset {
    let __start = DataLinkSpecTracks_Abridged.startDataLinkSpecTracks_Abridged(&fbb)
    DataLinkSpecTracks_Abridged.add(specTrackNum: specTrackNum, &fbb)
    DataLinkSpecTracks_Abridged.add(specTrackNumDesc: specTrackNumDesc, &fbb)
    return DataLinkSpecTracks_Abridged.endDataLinkSpecTracks_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.specTrackNum.p, fieldName: "specTrackNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.specTrackNumDesc.p, fieldName: "specTrackNumDesc", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

