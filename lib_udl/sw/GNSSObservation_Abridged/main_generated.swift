// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Information for Global Navigation Satellite Systems (GNSS) Observations collected from GNSS receivers, including the specific GNSS sat from which each signal was received, and the observation codes of each observation in the record. Each GNSS Observation is associated with a GNSS Observation Set record containing data which applies to all observations in the set, including observation time, receiver location, and Dilution of Precision (DOP) values. Users can Reference RINEX 3+ documentation for further information concerning many of the standards and conventions for GNSS observations.
public struct GNSSObservation_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "GNSS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: GNSSObservation_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case gnssSatId = 4
    case trackingStatus = 6
    case agcState = 8
    case obsCodeSet = 10
    case ob = 12
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  RINEX 3+ compliant GNSS System and Satellite Identifier (represented as SNN, where S is the system code, and NN is the satellite identifier) associated with this observation:
  ///  G - GPS (NN = PRN)
  ///  R - GLONASS (NN = Slot Number)
  ///  S - SBAS Payload (NN = PRN-100)
  ///  E - Galileo (NN = PRN)
  ///  C - BeiDou (NN = PRN)
  ///  J - QZSS (NN = PRN - 1923)
  ///  I - IRNSS (NN = PRN)
  ///  Example: /// Example: GEJ
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var gnssSatId: String? { let o = _accessor.offset(VTOFFSET.gnssSatId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var gnssSatIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.gnssSatId.v) }
  ///  Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  public var trackingStatus: Int32 { let o = _accessor.offset(VTOFFSET.trackingStatus.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  GNSS Automatic Gain Control State.
  ///  Example: /// Example: 20
  ///  Constraints: No constraints specified.
  public var agcState: Int32 { let o = _accessor.offset(VTOFFSET.agcState.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The observation code set that applies to this observation record.  Reference RINEX 3+ for further information concerning observation code set conventions.
  ///  Example: /// Example: ['S1C', 'C1C', 'C1D']
  ///  Constraints: No constraints specified.
  public var hasObsCodeSet: Bool { let o = _accessor.offset(VTOFFSET.obsCodeSet.v); return o == 0 ? false : true }
  public var obsCodeSetCount: Int32 { let o = _accessor.offset(VTOFFSET.obsCodeSet.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func obsCodeSet(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.obsCodeSet.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of observation(s).  The ob array must be the same length as the obsCodeSet.  Pseudorange (C) is expressed meters, carrier phase (L) in cycles,  doppler (D) in Hz where + values indicate approaching sats, and signal strength C/No (S) in dB-Hz.
  ///  Example: /// Example: [42.1, 1000.0, 0.9]
  ///  Constraints: No constraints specified.
  public var hasOb: Bool { let o = _accessor.offset(VTOFFSET.ob.v); return o == 0 ? false : true }
  public var obCount: Int32 { let o = _accessor.offset(VTOFFSET.ob.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func ob(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.ob.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startGNSSObservation_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 5) }
  public static func add(gnssSatId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: gnssSatId, at: VTOFFSET.gnssSatId.p) }
  public static func add(trackingStatus: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: trackingStatus, def: 0, at: VTOFFSET.trackingStatus.p) }
  public static func add(agcState: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: agcState, def: 0, at: VTOFFSET.agcState.p) }
  public static func addVectorOf(obsCodeSet: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obsCodeSet, at: VTOFFSET.obsCodeSet.p) }
  public static func addVectorOf(ob: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ob, at: VTOFFSET.ob.p) }
  public static func endGNSSObservation_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createGNSSObservation_Abridged(
    _ fbb: inout FlatBufferBuilder,
    gnssSatIdOffset gnssSatId: Offset = Offset(),
    trackingStatus: Int32 = 0,
    agcState: Int32 = 0,
    obsCodeSetVectorOffset obsCodeSet: Offset = Offset(),
    obVectorOffset ob: Offset = Offset()
  ) -> Offset {
    let __start = GNSSObservation_Abridged.startGNSSObservation_Abridged(&fbb)
    GNSSObservation_Abridged.add(gnssSatId: gnssSatId, &fbb)
    GNSSObservation_Abridged.add(trackingStatus: trackingStatus, &fbb)
    GNSSObservation_Abridged.add(agcState: agcState, &fbb)
    GNSSObservation_Abridged.addVectorOf(obsCodeSet: obsCodeSet, &fbb)
    GNSSObservation_Abridged.addVectorOf(ob: ob, &fbb)
    return GNSSObservation_Abridged.endGNSSObservation_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.gnssSatId.p, fieldName: "gnssSatId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.trackingStatus.p, fieldName: "trackingStatus", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.agcState.p, fieldName: "agcState", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.obsCodeSet.p, fieldName: "obsCodeSet", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.ob.p, fieldName: "ob", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

