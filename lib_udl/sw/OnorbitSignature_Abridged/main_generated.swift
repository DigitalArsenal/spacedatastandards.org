// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Contains a list of common information across both Radar and EO observations.
public struct OnorbitSignature_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ONOR" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: OnorbitSignature_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case eoObservation = 4
    case radarObservation = 6
    case rfObservation = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var eoObservation: String? { let o = _accessor.offset(VTOFFSET.eoObservation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eoObservationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eoObservation.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var radarObservation: String? { let o = _accessor.offset(VTOFFSET.radarObservation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var radarObservationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.radarObservation.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var rfObservation: String? { let o = _accessor.offset(VTOFFSET.rfObservation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rfObservationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rfObservation.v) }
  public static func startOnorbitSignature_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(eoObservation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eoObservation, at: VTOFFSET.eoObservation.p) }
  public static func add(radarObservation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: radarObservation, at: VTOFFSET.radarObservation.p) }
  public static func add(rfObservation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rfObservation, at: VTOFFSET.rfObservation.p) }
  public static func endOnorbitSignature_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createOnorbitSignature_Abridged(
    _ fbb: inout FlatBufferBuilder,
    eoObservationOffset eoObservation: Offset = Offset(),
    radarObservationOffset radarObservation: Offset = Offset(),
    rfObservationOffset rfObservation: Offset = Offset()
  ) -> Offset {
    let __start = OnorbitSignature_Abridged.startOnorbitSignature_Abridged(&fbb)
    OnorbitSignature_Abridged.add(eoObservation: eoObservation, &fbb)
    OnorbitSignature_Abridged.add(radarObservation: radarObservation, &fbb)
    OnorbitSignature_Abridged.add(rfObservation: rfObservation, &fbb)
    return OnorbitSignature_Abridged.endOnorbitSignature_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.eoObservation.p, fieldName: "eoObservation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.radarObservation.p, fieldName: "radarObservation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rfObservation.p, fieldName: "rfObservation", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

