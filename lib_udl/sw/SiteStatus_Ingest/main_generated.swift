// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum SiteStatus_Ingest_instStatus_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case fmc = 0
  ///  No description available.
  case pmc = 1
  ///  No description available.
  case nmc = 2
  ///  No description available.
  case unk = 3

  public static var max: SiteStatus_Ingest_instStatus_Enum { return .unk }
  public static var min: SiteStatus_Ingest_instStatus_Enum { return .fmc }
}


public enum SiteStatus_Ingest_fpcon_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case normal = 0
  ///  No description available.
  case alpha = 1
  ///  No description available.
  case bravo = 2
  ///  No description available.
  case charlie = 3
  ///  No description available.
  case delta = 4

  public static var max: SiteStatus_Ingest_fpcon_Enum { return .delta }
  public static var min: SiteStatus_Ingest_fpcon_Enum { return .normal }
}


public enum SiteStatus_Ingest_hpcon_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case e0 = 0
  ///  No description available.
  case alpha = 1
  ///  No description available.
  case bravo = 2
  ///  No description available.
  case charlie = 3
  ///  No description available.
  case delta = 4

  public static var max: SiteStatus_Ingest_hpcon_Enum { return .delta }
  public static var min: SiteStatus_Ingest_hpcon_Enum { return .e0 }
}


public enum SiteStatus_Ingest_cpcon_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case e1 = 0
  ///  No description available.
  case e2 = 1
  ///  No description available.
  case e3 = 2
  ///  No description available.
  case e4 = 3
  ///  No description available.
  case e5 = 4

  public static var max: SiteStatus_Ingest_cpcon_Enum { return .e5 }
  public static var min: SiteStatus_Ingest_cpcon_Enum { return .e1 }
}


public enum SiteStatus_Ingest_cat_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case cold = 0
  ///  No description available.
  case warm = 1
  ///  No description available.
  case hot = 2

  public static var max: SiteStatus_Ingest_cat_Enum { return .hot }
  public static var min: SiteStatus_Ingest_cat_Enum { return .cold }
}


public enum SiteStatus_Ingest_eoc_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case cold = 0
  ///  No description available.
  case warm = 1
  ///  No description available.
  case hot = 2

  public static var max: SiteStatus_Ingest_eoc_Enum { return .hot }
  public static var min: SiteStatus_Ingest_eoc_Enum { return .cold }
}


public enum SiteStatus_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: SiteStatus_Ingest_dataMode_Enum { return .exercise }
  public static var min: SiteStatus_Ingest_dataMode_Enum { return .real }
}


///  /// No description available.
public struct SiteStatus_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SITE" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: SiteStatus_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idSite = 8
    case siteType = 10
    case mobileAltId = 12
    case poiid = 14
    case trackId = 16
    case trackRefL16 = 18
    case opsCapability = 20
    case instStatus = 22
    case fpcon = 24
    case hpcon = 26
    case cpcon = 28
    case reportTime = 30
    case timeFunction = 32
    case weatherMessage = 34
    case pes = 36
    case hotInventory = 38
    case coldInventory = 40
    case samMode = 42
    case radiateMode = 44
    case opsImpairment = 46
    case commImpairment = 48
    case cat = 50
    case eoc = 52
    case link = 54
    case linkStatus = 56
    case radarSystem = 58
    case radarStatus = 60
    case missile = 62
    case missileInventory = 64
    case createdAt = 66
    case createdBy = 68
    case source = 70
    case origin = 72
    case origNetwork = 74
    case dataMode = 76
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SITESTATUS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The ID of the site, if this status is associated with a fixed site or platform.
  ///  Example: /// Example: 41e3e554-9790-40b9-bd7b-f30d864dcad8
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idSite: String? { let o = _accessor.offset(VTOFFSET.idSite.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSiteSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSite.v) }
  ///  Optional site type or further detail of type.  Intended for, but not limited to, Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).
  ///  Example: /// Example: ADOC
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var siteType: String? { let o = _accessor.offset(VTOFFSET.siteType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var siteTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.siteType.v) }
  ///  Alternate Identifier for a mobile or transportable platform provided by source.
  ///  Example: /// Example: MOBILEALT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var mobileAltId: String? { let o = _accessor.offset(VTOFFSET.mobileAltId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var mobileAltIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.mobileAltId.v) }
  ///  The POI (point of interest) ID related to this platform, if available.
  ///  Example: /// Example: d4a91864-6140-4b8d-67cd-45421c75f696
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var poiid: String? { let o = _accessor.offset(VTOFFSET.poiid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var poiidSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.poiid.v) }
  ///  The track ID related to this platform (if mobile or transportable), if available.
  ///  Example: /// Example: PCM4923-1656174732-4-1-257
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var trackId: String? { let o = _accessor.offset(VTOFFSET.trackId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var trackIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.trackId.v) }
  ///  Link-16 specific reference track number.
  ///  Example: /// Example: TrkNm
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var trackRefL16: String? { let o = _accessor.offset(VTOFFSET.trackRefL16.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var trackRefL16SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.trackRefL16.v) }
  ///  The operational status of the platform (e.g. Fully Operational, Partially Operational, Not Operational, etc.).
  ///  Example: /// Example: Fully Operational
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var opsCapability: String? { let o = _accessor.offset(VTOFFSET.opsCapability.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var opsCapabilitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.opsCapability.v) }
  ///  The status of the installation.
  ///  FMC - Fully Mission Capable
  ///   PMC - Partially Mission Capable
  ///  NMC - Non Mission Capable
  ///  UNK - Unknown.
  ///  Example: /// Example: PMC
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var instStatus: SiteStatus_Ingest_instStatus_Enum { let o = _accessor.offset(VTOFFSET.instStatus.v); return o == 0 ? .fmc : SiteStatus_Ingest_instStatus_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .fmc }
  ///  Force Protection Condition (FPCON).
  ///  NORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.
  ///  ALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.
  ///  BRAVO - Applies when an increased or predictable threat of terrorist activity exists.
  ///  CHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.
  ///  DELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.
  ///  Example: /// Example: BRAVO
  ///  Constraints: Minimum length = 0, Maximum length = 7
  public var fpcon: SiteStatus_Ingest_fpcon_Enum { let o = _accessor.offset(VTOFFSET.fpcon.v); return o == 0 ? .normal : SiteStatus_Ingest_fpcon_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .normal }
  ///  Health Protection Condition (HPCON).
  ///  0 - Routine, no community transmission.
  ///  ALPHA - Limited, community transmission beginning.
  ///  BRAVO - Moderate, increased community transmission.
  ///  CHARLIE - Substantial, sustained community transmission.
  ///  DELTA - Severe, widespread community transmission.
  ///  Example: /// Example: CHARLIE
  ///  Constraints: Minimum length = 0, Maximum length = 7
  public var hpcon: SiteStatus_Ingest_hpcon_Enum { let o = _accessor.offset(VTOFFSET.hpcon.v); return o == 0 ? .e0 : SiteStatus_Ingest_hpcon_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .e0 }
  ///  Cyberspace Protection Condition (CPCON).
  ///  1 - VERY HIGH - Critical functions.
  ///  2 - HIGH - Critical and essential functions.
  ///  3 - MEDIUM - Critical, essential, and support functions.
  ///  4 - LOW - All functions.
  ///  5 - VERY LOW - All functions.
  ///  Example: /// Example: 4
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var cpcon: SiteStatus_Ingest_cpcon_Enum { let o = _accessor.offset(VTOFFSET.cpcon.v); return o == 0 ? .e1 : SiteStatus_Ingest_cpcon_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .e1 }
  ///  Time of report, in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var reportTime: String? { let o = _accessor.offset(VTOFFSET.reportTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reportTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reportTime.v) }
  ///  Description of the time function associated with the reportTime (e.g. Activation, Deactivation, Arrival, Departure, etc.), if applicable.
  ///  Example: /// Example: Activation
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var timeFunction: String? { let o = _accessor.offset(VTOFFSET.timeFunction.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timeFunctionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timeFunction.v) }
  ///  Description of the current weather conditions over a site.
  ///  Example: /// Example: Heavy rain
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var weatherMessage: String? { let o = _accessor.offset(VTOFFSET.weatherMessage.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var weatherMessageSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.weatherMessage.v) }
  ///  Position Engagement Status flag, Indicating whether this platform is initiating multiple simultaneous engagements.  A value of 1/True indicates the platform is initiating multiple simultaneous engagements.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var pes: Bool { let o = _accessor.offset(VTOFFSET.pes.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Estimated number of hot missiles of all types remaining in weapons system inventory.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var hotInventory: Int32 { let o = _accessor.offset(VTOFFSET.hotInventory.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Estimated number of cold missiles of all types remaining in weapons system inventory.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var coldInventory: Int32 { let o = _accessor.offset(VTOFFSET.coldInventory.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The state of a SAM unit (e.g. Initialization, Standby, Reorientation, etc.).
  ///  Example: /// Example: Initialization
  ///  Constraints: Minimum length = 0, Maximum length = 48
  public var samMode: String? { let o = _accessor.offset(VTOFFSET.samMode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var samModeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.samMode.v) }
  ///  SAM sensor radar surveillance mode (Active, Passive, Off).
  ///  Example: /// Example: Active
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var radiateMode: String? { let o = _accessor.offset(VTOFFSET.radiateMode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var radiateModeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.radiateMode.v) }
  ///  The primary component degrading the operational capability of the platform or system.
  ///  Example: /// Example: opsImpairment
  ///  Constraints: Minimum length = 0, Maximum length = 48
  public var opsImpairment: String? { let o = _accessor.offset(VTOFFSET.opsImpairment.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var opsImpairmentSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.opsImpairment.v) }
  ///  The communications component causing the platform or system to be less than fully operational.
  ///  Example: /// Example: commImpairment
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var commImpairment: String? { let o = _accessor.offset(VTOFFSET.commImpairment.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var commImpairmentSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.commImpairment.v) }
  ///  Crisis Action Team (CAT).
  ///  COLD - Not in use.
  ///  WARM - Facility prepped/possible skeleton crew.
  ///  HOT - Fully active.
  ///  Example: /// Example: COLD
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var cat: SiteStatus_Ingest_cat_Enum { let o = _accessor.offset(VTOFFSET.cat.v); return o == 0 ? .cold : SiteStatus_Ingest_cat_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .cold }
  ///  Emergency Operations Center (EOC) status.
  ///  COLD - Not in use.
  ///  WARM - Facility prepped/possible skeleton crew.
  ///  HOT - Fully active.
  ///  Example: /// Example: WARM
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var eoc: SiteStatus_Ingest_eoc_Enum { let o = _accessor.offset(VTOFFSET.eoc.v); return o == 0 ? .cold : SiteStatus_Ingest_eoc_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .cold }
  ///  Array of Link item(s) for which status is available and reported (ATDL, IJMS,  LINK-1, LINK-11, LINK-11B, LINK-16).  This array must be the same length as the linkStatus array.
  ///  Example: /// Example: ['ATDL', 'IJMS', 'LINK-1']
  ///  Constraints: No constraints specified.
  public var hasLink: Bool { let o = _accessor.offset(VTOFFSET.link.v); return o == 0 ? false : true }
  public var linkCount: Int32 { let o = _accessor.offset(VTOFFSET.link.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func link(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.link.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the status (AVAILABLE, DEGRADED, NOT AVAILABLE, etc.) for each links in the link array. This array must be the same length as the link array, and the status must correspond to the appropriate position index in the link array.
  ///  Example: /// Example: ['AVAILABLE', 'DEGRADED', 'NOT AVAILABLE']
  ///  Constraints: No constraints specified.
  public var hasLinkStatus: Bool { let o = _accessor.offset(VTOFFSET.linkStatus.v); return o == 0 ? false : true }
  public var linkStatusCount: Int32 { let o = _accessor.offset(VTOFFSET.linkStatus.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func linkStatus(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.linkStatus.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of radar system(s) for which status is available and reported (ACQUISITION, IFFSIF, ILLUMINATING, MODE-4, PRIMARY SURVEILLANCE, SECONDARY SURVEILLANCE, TERTIARY SURVEILLANCE). This array must be the same length as the radarStatus array.
  ///  Example: /// Example: ['ILLUMINATING', 'MODE-4', 'MODE-3']
  ///  Constraints: No constraints specified.
  public var hasRadarSystem: Bool { let o = _accessor.offset(VTOFFSET.radarSystem.v); return o == 0 ? false : true }
  public var radarSystemCount: Int32 { let o = _accessor.offset(VTOFFSET.radarSystem.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func radarSystem(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.radarSystem.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the status (NON-OPERATIONAL, OPERATIONAL, OFF) for each radar system in the radarSystem array. This array must be the same length as the radarSystem array, and the status must correspond to the appropriate position index in the radarSystem array.
  ///  Example: /// Example: ['OPERATIONAL', 'OFF', 'NON-OPERATIONAL']
  ///  Constraints: No constraints specified.
  public var hasRadarStatus: Bool { let o = _accessor.offset(VTOFFSET.radarStatus.v); return o == 0 ? false : true }
  public var radarStatusCount: Int32 { let o = _accessor.offset(VTOFFSET.radarStatus.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func radarStatus(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.radarStatus.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of specific missile types for which an estimated inventory count is available (e.g. GMD TYPE A, HARPOON, TOMAHAWK, etc.).  This array must be the same length as the missileInventory array.
  ///  Example: /// Example: ['GMD', 'HARPOON', 'JAVELIN']
  ///  Constraints: No constraints specified.
  public var hasMissile: Bool { let o = _accessor.offset(VTOFFSET.missile.v); return o == 0 ? false : true }
  public var missileCount: Int32 { let o = _accessor.offset(VTOFFSET.missile.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func missile(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.missile.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the quantity of each of the missile items.  This array must be the same length as the missile array, and the values must correspond to appropriate position index in the missile array.
  ///  Example: /// Example: [5, 10, 100]
  ///  Constraints: No constraints specified.
  public var hasMissileInventory: Bool { let o = _accessor.offset(VTOFFSET.missileInventory.v); return o == 0 ? false : true }
  public var missileInventoryCount: Int32 { let o = _accessor.offset(VTOFFSET.missileInventory.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func missileInventory(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.missileInventory.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: SiteStatus_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : SiteStatus_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startSiteStatus_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 37) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idSite: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSite, at: VTOFFSET.idSite.p) }
  public static func add(siteType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: siteType, at: VTOFFSET.siteType.p) }
  public static func add(mobileAltId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mobileAltId, at: VTOFFSET.mobileAltId.p) }
  public static func add(poiid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: poiid, at: VTOFFSET.poiid.p) }
  public static func add(trackId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trackId, at: VTOFFSET.trackId.p) }
  public static func add(trackRefL16: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trackRefL16, at: VTOFFSET.trackRefL16.p) }
  public static func add(opsCapability: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: opsCapability, at: VTOFFSET.opsCapability.p) }
  public static func add(instStatus: SiteStatus_Ingest_instStatus_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: instStatus.rawValue, def: 0, at: VTOFFSET.instStatus.p) }
  public static func add(fpcon: SiteStatus_Ingest_fpcon_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fpcon.rawValue, def: 0, at: VTOFFSET.fpcon.p) }
  public static func add(hpcon: SiteStatus_Ingest_hpcon_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hpcon.rawValue, def: 0, at: VTOFFSET.hpcon.p) }
  public static func add(cpcon: SiteStatus_Ingest_cpcon_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cpcon.rawValue, def: 0, at: VTOFFSET.cpcon.p) }
  public static func add(reportTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reportTime, at: VTOFFSET.reportTime.p) }
  public static func add(timeFunction: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timeFunction, at: VTOFFSET.timeFunction.p) }
  public static func add(weatherMessage: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weatherMessage, at: VTOFFSET.weatherMessage.p) }
  public static func add(pes: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pes, def: false,
   at: VTOFFSET.pes.p) }
  public static func add(hotInventory: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hotInventory, def: 0, at: VTOFFSET.hotInventory.p) }
  public static func add(coldInventory: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: coldInventory, def: 0, at: VTOFFSET.coldInventory.p) }
  public static func add(samMode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: samMode, at: VTOFFSET.samMode.p) }
  public static func add(radiateMode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: radiateMode, at: VTOFFSET.radiateMode.p) }
  public static func add(opsImpairment: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: opsImpairment, at: VTOFFSET.opsImpairment.p) }
  public static func add(commImpairment: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: commImpairment, at: VTOFFSET.commImpairment.p) }
  public static func add(cat: SiteStatus_Ingest_cat_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cat.rawValue, def: 0, at: VTOFFSET.cat.p) }
  public static func add(eoc: SiteStatus_Ingest_eoc_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: eoc.rawValue, def: 0, at: VTOFFSET.eoc.p) }
  public static func addVectorOf(link: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: link, at: VTOFFSET.link.p) }
  public static func addVectorOf(linkStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: linkStatus, at: VTOFFSET.linkStatus.p) }
  public static func addVectorOf(radarSystem: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: radarSystem, at: VTOFFSET.radarSystem.p) }
  public static func addVectorOf(radarStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: radarStatus, at: VTOFFSET.radarStatus.p) }
  public static func addVectorOf(missile: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: missile, at: VTOFFSET.missile.p) }
  public static func addVectorOf(missileInventory: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: missileInventory, at: VTOFFSET.missileInventory.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: SiteStatus_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endSiteStatus_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSiteStatus_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idSiteOffset idSite: Offset = Offset(),
    siteTypeOffset siteType: Offset = Offset(),
    mobileAltIdOffset mobileAltId: Offset = Offset(),
    poiidOffset poiid: Offset = Offset(),
    trackIdOffset trackId: Offset = Offset(),
    trackRefL16Offset trackRefL16: Offset = Offset(),
    opsCapabilityOffset opsCapability: Offset = Offset(),
    instStatus: SiteStatus_Ingest_instStatus_Enum = .fmc,
    fpcon: SiteStatus_Ingest_fpcon_Enum = .normal,
    hpcon: SiteStatus_Ingest_hpcon_Enum = .e0,
    cpcon: SiteStatus_Ingest_cpcon_Enum = .e1,
    reportTimeOffset reportTime: Offset = Offset(),
    timeFunctionOffset timeFunction: Offset = Offset(),
    weatherMessageOffset weatherMessage: Offset = Offset(),
    pes: Bool = false,
    hotInventory: Int32 = 0,
    coldInventory: Int32 = 0,
    samModeOffset samMode: Offset = Offset(),
    radiateModeOffset radiateMode: Offset = Offset(),
    opsImpairmentOffset opsImpairment: Offset = Offset(),
    commImpairmentOffset commImpairment: Offset = Offset(),
    cat: SiteStatus_Ingest_cat_Enum = .cold,
    eoc: SiteStatus_Ingest_eoc_Enum = .cold,
    linkVectorOffset link: Offset = Offset(),
    linkStatusVectorOffset linkStatus: Offset = Offset(),
    radarSystemVectorOffset radarSystem: Offset = Offset(),
    radarStatusVectorOffset radarStatus: Offset = Offset(),
    missileVectorOffset missile: Offset = Offset(),
    missileInventoryVectorOffset missileInventory: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: SiteStatus_Ingest_dataMode_Enum = .real
  ) -> Offset {
    let __start = SiteStatus_Ingest.startSiteStatus_Ingest(&fbb)
    SiteStatus_Ingest.add(id: id, &fbb)
    SiteStatus_Ingest.add(classificationMarking: classificationMarking, &fbb)
    SiteStatus_Ingest.add(idSite: idSite, &fbb)
    SiteStatus_Ingest.add(siteType: siteType, &fbb)
    SiteStatus_Ingest.add(mobileAltId: mobileAltId, &fbb)
    SiteStatus_Ingest.add(poiid: poiid, &fbb)
    SiteStatus_Ingest.add(trackId: trackId, &fbb)
    SiteStatus_Ingest.add(trackRefL16: trackRefL16, &fbb)
    SiteStatus_Ingest.add(opsCapability: opsCapability, &fbb)
    SiteStatus_Ingest.add(instStatus: instStatus, &fbb)
    SiteStatus_Ingest.add(fpcon: fpcon, &fbb)
    SiteStatus_Ingest.add(hpcon: hpcon, &fbb)
    SiteStatus_Ingest.add(cpcon: cpcon, &fbb)
    SiteStatus_Ingest.add(reportTime: reportTime, &fbb)
    SiteStatus_Ingest.add(timeFunction: timeFunction, &fbb)
    SiteStatus_Ingest.add(weatherMessage: weatherMessage, &fbb)
    SiteStatus_Ingest.add(pes: pes, &fbb)
    SiteStatus_Ingest.add(hotInventory: hotInventory, &fbb)
    SiteStatus_Ingest.add(coldInventory: coldInventory, &fbb)
    SiteStatus_Ingest.add(samMode: samMode, &fbb)
    SiteStatus_Ingest.add(radiateMode: radiateMode, &fbb)
    SiteStatus_Ingest.add(opsImpairment: opsImpairment, &fbb)
    SiteStatus_Ingest.add(commImpairment: commImpairment, &fbb)
    SiteStatus_Ingest.add(cat: cat, &fbb)
    SiteStatus_Ingest.add(eoc: eoc, &fbb)
    SiteStatus_Ingest.addVectorOf(link: link, &fbb)
    SiteStatus_Ingest.addVectorOf(linkStatus: linkStatus, &fbb)
    SiteStatus_Ingest.addVectorOf(radarSystem: radarSystem, &fbb)
    SiteStatus_Ingest.addVectorOf(radarStatus: radarStatus, &fbb)
    SiteStatus_Ingest.addVectorOf(missile: missile, &fbb)
    SiteStatus_Ingest.addVectorOf(missileInventory: missileInventory, &fbb)
    SiteStatus_Ingest.add(createdAt: createdAt, &fbb)
    SiteStatus_Ingest.add(createdBy: createdBy, &fbb)
    SiteStatus_Ingest.add(source: source, &fbb)
    SiteStatus_Ingest.add(origin: origin, &fbb)
    SiteStatus_Ingest.add(origNetwork: origNetwork, &fbb)
    SiteStatus_Ingest.add(dataMode: dataMode, &fbb)
    return SiteStatus_Ingest.endSiteStatus_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSite.p, fieldName: "idSite", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.siteType.p, fieldName: "siteType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.mobileAltId.p, fieldName: "mobileAltId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.poiid.p, fieldName: "poiid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.trackId.p, fieldName: "trackId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.trackRefL16.p, fieldName: "trackRefL16", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.opsCapability.p, fieldName: "opsCapability", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.instStatus.p, fieldName: "instStatus", required: false, type: SiteStatus_Ingest_instStatus_Enum.self)
    try _v.visit(field: VTOFFSET.fpcon.p, fieldName: "fpcon", required: false, type: SiteStatus_Ingest_fpcon_Enum.self)
    try _v.visit(field: VTOFFSET.hpcon.p, fieldName: "hpcon", required: false, type: SiteStatus_Ingest_hpcon_Enum.self)
    try _v.visit(field: VTOFFSET.cpcon.p, fieldName: "cpcon", required: false, type: SiteStatus_Ingest_cpcon_Enum.self)
    try _v.visit(field: VTOFFSET.reportTime.p, fieldName: "reportTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timeFunction.p, fieldName: "timeFunction", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.weatherMessage.p, fieldName: "weatherMessage", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pes.p, fieldName: "pes", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.hotInventory.p, fieldName: "hotInventory", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.coldInventory.p, fieldName: "coldInventory", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.samMode.p, fieldName: "samMode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.radiateMode.p, fieldName: "radiateMode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.opsImpairment.p, fieldName: "opsImpairment", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.commImpairment.p, fieldName: "commImpairment", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cat.p, fieldName: "cat", required: false, type: SiteStatus_Ingest_cat_Enum.self)
    try _v.visit(field: VTOFFSET.eoc.p, fieldName: "eoc", required: false, type: SiteStatus_Ingest_eoc_Enum.self)
    try _v.visit(field: VTOFFSET.link.p, fieldName: "link", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.linkStatus.p, fieldName: "linkStatus", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.radarSystem.p, fieldName: "radarSystem", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.radarStatus.p, fieldName: "radarStatus", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.missile.p, fieldName: "missile", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.missileInventory.p, fieldName: "missileInventory", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: SiteStatus_Ingest_dataMode_Enum.self)
    _v.finish()
  }
}

