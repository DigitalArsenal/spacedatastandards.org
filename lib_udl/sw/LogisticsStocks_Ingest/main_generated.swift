// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// The supply stocks for this support item.
public struct LogisticsStocks_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "LOGI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: LogisticsStocks_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case sourceIcao = 4
    case quantity = 6
    case stockCheckTime = 8
    case stockPoc = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The ICAO code for the primary location with available parts.
  ///  Example: /// Example: PHIK
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var sourceIcao: String? { let o = _accessor.offset(VTOFFSET.sourceIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceIcao.v) }
  ///  The quantity of available parts needed from sourceICAO.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  public var quantity: Int32 { let o = _accessor.offset(VTOFFSET.quantity.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The datetime when the parts were sourced, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-13T13:47:00.123Z
  ///  Constraints: No constraints specified.
  public var stockCheckTime: String? { let o = _accessor.offset(VTOFFSET.stockCheckTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var stockCheckTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.stockCheckTime.v) }
  ///  The point of contact at the sourced location.
  ///  Example: /// Example: SMITH, JOHN J
  ///  Constraints: Minimum length = 0, Maximum length = 68
  public var stockPoc: String? { let o = _accessor.offset(VTOFFSET.stockPoc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var stockPocSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.stockPoc.v) }
  public static func startLogisticsStocks_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(sourceIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceIcao, at: VTOFFSET.sourceIcao.p) }
  public static func add(quantity: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: quantity, def: 0, at: VTOFFSET.quantity.p) }
  public static func add(stockCheckTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: stockCheckTime, at: VTOFFSET.stockCheckTime.p) }
  public static func add(stockPoc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: stockPoc, at: VTOFFSET.stockPoc.p) }
  public static func endLogisticsStocks_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createLogisticsStocks_Ingest(
    _ fbb: inout FlatBufferBuilder,
    sourceIcaoOffset sourceIcao: Offset = Offset(),
    quantity: Int32 = 0,
    stockCheckTimeOffset stockCheckTime: Offset = Offset(),
    stockPocOffset stockPoc: Offset = Offset()
  ) -> Offset {
    let __start = LogisticsStocks_Ingest.startLogisticsStocks_Ingest(&fbb)
    LogisticsStocks_Ingest.add(sourceIcao: sourceIcao, &fbb)
    LogisticsStocks_Ingest.add(quantity: quantity, &fbb)
    LogisticsStocks_Ingest.add(stockCheckTime: stockCheckTime, &fbb)
    LogisticsStocks_Ingest.add(stockPoc: stockPoc, &fbb)
    return LogisticsStocks_Ingest.endLogisticsStocks_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.sourceIcao.p, fieldName: "sourceIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.quantity.p, fieldName: "quantity", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.stockCheckTime.p, fieldName: "stockCheckTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.stockPoc.p, fieldName: "stockPoc", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

