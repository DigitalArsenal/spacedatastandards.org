// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// An Optical SOI record contains observation information taken from a sensor about a Space Object.
public struct OpticalSOIObservation_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "OPTI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: OpticalSOIObservation_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case obStartTime = 4
    case intensityTimes = 6
    case currentSpectralFilterNum = 8
    case expDuration = 10
    case intensities = 12
    case extinctionCoeffs = 14
    case extinctionCoeffsUnc = 16
    case skyBgs = 18
    case localSkyBgs = 20
    case localSkyBgsUnc = 22
    case numDetectedStars = 24
    case numCorrelatedStars = 26
    case zeroPoints = 28
    case ras = 30
    case declinations = 32
    case raRates = 34
    case percentSats = 36
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Observation detection start time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.888456Z
  ///  Constraints: No constraints specified.
  public var obStartTime: String? { let o = _accessor.offset(VTOFFSET.obStartTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obStartTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obStartTime.v) }
  ///  Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.
  ///  Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.898456Z', '2018-01-01T16:00:00.998456Z']
  ///  Constraints: No constraints specified.
  public var hasIntensityTimes: Bool { let o = _accessor.offset(VTOFFSET.intensityTimes.v); return o == 0 ? false : true }
  public var intensityTimesCount: Int32 { let o = _accessor.offset(VTOFFSET.intensityTimes.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func intensityTimes(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.intensityTimes.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  public var currentSpectralFilterNum: Int32 { let o = _accessor.offset(VTOFFSET.currentSpectralFilterNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Image exposure duration in seconds.
  ///  Example: /// Example: 0.455
  ///  Constraints: No constraints specified.
  public var expDuration: Double { let o = _accessor.offset(VTOFFSET.expDuration.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.
  ///  Example: /// Example: [1.1, 1.1, 1.1]
  ///  Constraints: No constraints specified.
  public var hasIntensities: Bool { let o = _accessor.offset(VTOFFSET.intensities.v); return o == 0 ? false : true }
  public var intensitiesCount: Int32 { let o = _accessor.offset(VTOFFSET.intensities.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func intensities(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.intensities.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.
  ///  Example: /// Example: [0.32, 0.32, 0.32]
  ///  Constraints: No constraints specified.
  public var hasExtinctionCoeffs: Bool { let o = _accessor.offset(VTOFFSET.extinctionCoeffs.v); return o == 0 ? false : true }
  public var extinctionCoeffsCount: Int32 { let o = _accessor.offset(VTOFFSET.extinctionCoeffs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func extinctionCoeffs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.extinctionCoeffs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
  ///  Example: /// Example: [0.06, 0.06, 0.06]
  ///  Constraints: No constraints specified.
  public var hasExtinctionCoeffsUnc: Bool { let o = _accessor.offset(VTOFFSET.extinctionCoeffsUnc.v); return o == 0 ? false : true }
  public var extinctionCoeffsUncCount: Int32 { let o = _accessor.offset(VTOFFSET.extinctionCoeffsUnc.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func extinctionCoeffsUnc(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.extinctionCoeffsUnc.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  ///  Example: /// Example: [100625.375, 100625.375, 100625.375]
  ///  Constraints: No constraints specified.
  public var hasSkyBgs: Bool { let o = _accessor.offset(VTOFFSET.skyBgs.v); return o == 0 ? false : true }
  public var skyBgsCount: Int32 { let o = _accessor.offset(VTOFFSET.skyBgs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func skyBgs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.skyBgs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  ///  Example: /// Example: [100625.375, 100625.375, 100625.375]
  ///  Constraints: No constraints specified.
  public var hasLocalSkyBgs: Bool { let o = _accessor.offset(VTOFFSET.localSkyBgs.v); return o == 0 ? false : true }
  public var localSkyBgsCount: Int32 { let o = _accessor.offset(VTOFFSET.localSkyBgs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func localSkyBgs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.localSkyBgs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.
  ///  Example: /// Example: [0.065, 0.065, 0.065]
  ///  Constraints: No constraints specified.
  public var hasLocalSkyBgsUnc: Bool { let o = _accessor.offset(VTOFFSET.localSkyBgsUnc.v); return o == 0 ? false : true }
  public var localSkyBgsUncCount: Int32 { let o = _accessor.offset(VTOFFSET.localSkyBgsUnc.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func localSkyBgsUnc(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.localSkyBgsUnc.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the number of detected stars in the FOV with a value for each element in the intensities field.
  ///  Example: /// Example: [6, 6, 6]
  ///  Constraints: No constraints specified.
  public var hasNumDetectedStars: Bool { let o = _accessor.offset(VTOFFSET.numDetectedStars.v); return o == 0 ? false : true }
  public var numDetectedStarsCount: Int32 { let o = _accessor.offset(VTOFFSET.numDetectedStars.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func numDetectedStars(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.numDetectedStars.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the number of correlated stars in the FOV with a value for each element in the intensities field.
  ///  Example: /// Example: [3, 3, 3]
  ///  Constraints: No constraints specified.
  public var hasNumCorrelatedStars: Bool { let o = _accessor.offset(VTOFFSET.numCorrelatedStars.v); return o == 0 ? false : true }
  public var numCorrelatedStarsCount: Int32 { let o = _accessor.offset(VTOFFSET.numCorrelatedStars.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func numCorrelatedStars(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.numCorrelatedStars.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).
  ///  Example: /// Example: [24.711, 24.711, 24.711]
  ///  Constraints: No constraints specified.
  public var hasZeroPoints: Bool { let o = _accessor.offset(VTOFFSET.zeroPoints.v); return o == 0 ? false : true }
  public var zeroPointsCount: Int32 { let o = _accessor.offset(VTOFFSET.zeroPoints.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func zeroPoints(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.zeroPoints.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.
  ///  Example: /// Example: [107.4, 107.4, 107.4]
  ///  Constraints: No constraints specified.
  public var hasRas: Bool { let o = _accessor.offset(VTOFFSET.ras.v); return o == 0 ? false : true }
  public var rasCount: Int32 { let o = _accessor.offset(VTOFFSET.ras.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func ras(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.ras.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frame’s exposure time.
  ///  Example: /// Example: [-0.45, -0.45, -0.45]
  ///  Constraints: No constraints specified.
  public var hasDeclinations: Bool { let o = _accessor.offset(VTOFFSET.declinations.v); return o == 0 ? false : true }
  public var declinationsCount: Int32 { let o = _accessor.offset(VTOFFSET.declinations.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func declinations(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.declinations.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frame’s exposure time.
  ///  Example: /// Example: [0, 0, 0]
  ///  Constraints: No constraints specified.
  public var hasRaRates: Bool { let o = _accessor.offset(VTOFFSET.raRates.v); return o == 0 ? false : true }
  public var raRatesCount: Int32 { let o = _accessor.offset(VTOFFSET.raRates.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func raRates(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.raRates.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.
  ///  Example: /// Example: [0.1, 0.2, 1]
  ///  Constraints: No constraints specified.
  public var hasPercentSats: Bool { let o = _accessor.offset(VTOFFSET.percentSats.v); return o == 0 ? false : true }
  public var percentSatsCount: Int32 { let o = _accessor.offset(VTOFFSET.percentSats.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func percentSats(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.percentSats.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startOpticalSOIObservation_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 17) }
  public static func add(obStartTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obStartTime, at: VTOFFSET.obStartTime.p) }
  public static func addVectorOf(intensityTimes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: intensityTimes, at: VTOFFSET.intensityTimes.p) }
  public static func add(currentSpectralFilterNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: currentSpectralFilterNum, def: 0, at: VTOFFSET.currentSpectralFilterNum.p) }
  public static func add(expDuration: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: expDuration, def: 0.0, at: VTOFFSET.expDuration.p) }
  public static func addVectorOf(intensities: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: intensities, at: VTOFFSET.intensities.p) }
  public static func addVectorOf(extinctionCoeffs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: extinctionCoeffs, at: VTOFFSET.extinctionCoeffs.p) }
  public static func addVectorOf(extinctionCoeffsUnc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: extinctionCoeffsUnc, at: VTOFFSET.extinctionCoeffsUnc.p) }
  public static func addVectorOf(skyBgs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: skyBgs, at: VTOFFSET.skyBgs.p) }
  public static func addVectorOf(localSkyBgs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: localSkyBgs, at: VTOFFSET.localSkyBgs.p) }
  public static func addVectorOf(localSkyBgsUnc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: localSkyBgsUnc, at: VTOFFSET.localSkyBgsUnc.p) }
  public static func addVectorOf(numDetectedStars: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: numDetectedStars, at: VTOFFSET.numDetectedStars.p) }
  public static func addVectorOf(numCorrelatedStars: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: numCorrelatedStars, at: VTOFFSET.numCorrelatedStars.p) }
  public static func addVectorOf(zeroPoints: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: zeroPoints, at: VTOFFSET.zeroPoints.p) }
  public static func addVectorOf(ras: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ras, at: VTOFFSET.ras.p) }
  public static func addVectorOf(declinations: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: declinations, at: VTOFFSET.declinations.p) }
  public static func addVectorOf(raRates: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: raRates, at: VTOFFSET.raRates.p) }
  public static func addVectorOf(percentSats: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: percentSats, at: VTOFFSET.percentSats.p) }
  public static func endOpticalSOIObservation_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createOpticalSOIObservation_Full(
    _ fbb: inout FlatBufferBuilder,
    obStartTimeOffset obStartTime: Offset = Offset(),
    intensityTimesVectorOffset intensityTimes: Offset = Offset(),
    currentSpectralFilterNum: Int32 = 0,
    expDuration: Double = 0.0,
    intensitiesVectorOffset intensities: Offset = Offset(),
    extinctionCoeffsVectorOffset extinctionCoeffs: Offset = Offset(),
    extinctionCoeffsUncVectorOffset extinctionCoeffsUnc: Offset = Offset(),
    skyBgsVectorOffset skyBgs: Offset = Offset(),
    localSkyBgsVectorOffset localSkyBgs: Offset = Offset(),
    localSkyBgsUncVectorOffset localSkyBgsUnc: Offset = Offset(),
    numDetectedStarsVectorOffset numDetectedStars: Offset = Offset(),
    numCorrelatedStarsVectorOffset numCorrelatedStars: Offset = Offset(),
    zeroPointsVectorOffset zeroPoints: Offset = Offset(),
    rasVectorOffset ras: Offset = Offset(),
    declinationsVectorOffset declinations: Offset = Offset(),
    raRatesVectorOffset raRates: Offset = Offset(),
    percentSatsVectorOffset percentSats: Offset = Offset()
  ) -> Offset {
    let __start = OpticalSOIObservation_Full.startOpticalSOIObservation_Full(&fbb)
    OpticalSOIObservation_Full.add(obStartTime: obStartTime, &fbb)
    OpticalSOIObservation_Full.addVectorOf(intensityTimes: intensityTimes, &fbb)
    OpticalSOIObservation_Full.add(currentSpectralFilterNum: currentSpectralFilterNum, &fbb)
    OpticalSOIObservation_Full.add(expDuration: expDuration, &fbb)
    OpticalSOIObservation_Full.addVectorOf(intensities: intensities, &fbb)
    OpticalSOIObservation_Full.addVectorOf(extinctionCoeffs: extinctionCoeffs, &fbb)
    OpticalSOIObservation_Full.addVectorOf(extinctionCoeffsUnc: extinctionCoeffsUnc, &fbb)
    OpticalSOIObservation_Full.addVectorOf(skyBgs: skyBgs, &fbb)
    OpticalSOIObservation_Full.addVectorOf(localSkyBgs: localSkyBgs, &fbb)
    OpticalSOIObservation_Full.addVectorOf(localSkyBgsUnc: localSkyBgsUnc, &fbb)
    OpticalSOIObservation_Full.addVectorOf(numDetectedStars: numDetectedStars, &fbb)
    OpticalSOIObservation_Full.addVectorOf(numCorrelatedStars: numCorrelatedStars, &fbb)
    OpticalSOIObservation_Full.addVectorOf(zeroPoints: zeroPoints, &fbb)
    OpticalSOIObservation_Full.addVectorOf(ras: ras, &fbb)
    OpticalSOIObservation_Full.addVectorOf(declinations: declinations, &fbb)
    OpticalSOIObservation_Full.addVectorOf(raRates: raRates, &fbb)
    OpticalSOIObservation_Full.addVectorOf(percentSats: percentSats, &fbb)
    return OpticalSOIObservation_Full.endOpticalSOIObservation_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.obStartTime.p, fieldName: "obStartTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.intensityTimes.p, fieldName: "intensityTimes", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.currentSpectralFilterNum.p, fieldName: "currentSpectralFilterNum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.expDuration.p, fieldName: "expDuration", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.intensities.p, fieldName: "intensities", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.extinctionCoeffs.p, fieldName: "extinctionCoeffs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.extinctionCoeffsUnc.p, fieldName: "extinctionCoeffsUnc", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.skyBgs.p, fieldName: "skyBgs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.localSkyBgs.p, fieldName: "localSkyBgs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.localSkyBgsUnc.p, fieldName: "localSkyBgsUnc", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.numDetectedStars.p, fieldName: "numDetectedStars", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.numCorrelatedStars.p, fieldName: "numCorrelatedStars", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.zeroPoints.p, fieldName: "zeroPoints", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.ras.p, fieldName: "ras", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.declinations.p, fieldName: "declinations", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.raRates.p, fieldName: "raRates", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.percentSats.p, fieldName: "percentSats", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

