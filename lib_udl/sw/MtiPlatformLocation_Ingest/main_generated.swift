// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Provides information pertaining to the location of the sensor platform during periods when the sensor is not collecting data. It shall be sent as required during periods in which the sensor is not collecting data, such as enroute to an orbit location, during a turn, or any other time at which platform location is required.
public struct MtiPlatformLocation_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "MTIP" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: MtiPlatformLocation_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case l1 = 4
    case l2 = 6
    case l3 = 8
    case l4 = 10
    case l5 = 12
    case l6 = 14
    case l7 = 16
    case platlocts = 18
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields of the Mission Segment to the time the report is prepared.
  ///  Example: /// Example: 1234567890
  ///  Constraints: No constraints specified.
  public var l1: Int64 { let o = _accessor.offset(VTOFFSET.l1.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  ///  North-South position of the platform at the time the report is prepared, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var l2: Double { let o = _accessor.offset(VTOFFSET.l2.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  East-West position of the platform at the time the report is prepared, expressed as degrees East (positive) from the Prime Meridian.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var l3: Double { let o = _accessor.offset(VTOFFSET.l3.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Altitude of the platform at the time the report is prepared, referenced to its position above the WGS-84 ellipsoid, in centimeters.
  ///  Example: /// Example: 45
  ///  Constraints: No constraints specified.
  public var l4: Int32 { let o = _accessor.offset(VTOFFSET.l4.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Ground track of the platform at the time the report is prepared, expressed as the angle in degrees (clockwise) from True North.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var l5: Double { let o = _accessor.offset(VTOFFSET.l5.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Ground speed of the platform at the time the report is prepared, expressed as millimeters per second.
  ///  Example: /// Example: 50
  ///  Constraints: No constraints specified.
  public var l6: Int32 { let o = _accessor.offset(VTOFFSET.l6.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Velocity of the platform in the vertical direction, expressed as decimeters per second.
  ///  Example: /// Example: 82
  ///  Constraints: No constraints specified.
  public var l7: Int32 { let o = _accessor.offset(VTOFFSET.l7.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Platform location timestamp in ISO8601 UTC format.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var platlocts: String? { let o = _accessor.offset(VTOFFSET.platlocts.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var platloctsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.platlocts.v) }
  public static func startMtiPlatformLocation_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 8) }
  public static func add(l1: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: l1, def: 0, at: VTOFFSET.l1.p) }
  public static func add(l2: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: l2, def: 0.0, at: VTOFFSET.l2.p) }
  public static func add(l3: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: l3, def: 0.0, at: VTOFFSET.l3.p) }
  public static func add(l4: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: l4, def: 0, at: VTOFFSET.l4.p) }
  public static func add(l5: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: l5, def: 0.0, at: VTOFFSET.l5.p) }
  public static func add(l6: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: l6, def: 0, at: VTOFFSET.l6.p) }
  public static func add(l7: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: l7, def: 0, at: VTOFFSET.l7.p) }
  public static func add(platlocts: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: platlocts, at: VTOFFSET.platlocts.p) }
  public static func endMtiPlatformLocation_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMtiPlatformLocation_Ingest(
    _ fbb: inout FlatBufferBuilder,
    l1: Int64 = 0,
    l2: Double = 0.0,
    l3: Double = 0.0,
    l4: Int32 = 0,
    l5: Double = 0.0,
    l6: Int32 = 0,
    l7: Int32 = 0,
    platloctsOffset platlocts: Offset = Offset()
  ) -> Offset {
    let __start = MtiPlatformLocation_Ingest.startMtiPlatformLocation_Ingest(&fbb)
    MtiPlatformLocation_Ingest.add(l1: l1, &fbb)
    MtiPlatformLocation_Ingest.add(l2: l2, &fbb)
    MtiPlatformLocation_Ingest.add(l3: l3, &fbb)
    MtiPlatformLocation_Ingest.add(l4: l4, &fbb)
    MtiPlatformLocation_Ingest.add(l5: l5, &fbb)
    MtiPlatformLocation_Ingest.add(l6: l6, &fbb)
    MtiPlatformLocation_Ingest.add(l7: l7, &fbb)
    MtiPlatformLocation_Ingest.add(platlocts: platlocts, &fbb)
    return MtiPlatformLocation_Ingest.endMtiPlatformLocation_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.l1.p, fieldName: "l1", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.l2.p, fieldName: "l2", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.l3.p, fieldName: "l3", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.l4.p, fieldName: "l4", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.l5.p, fieldName: "l5", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.l6.p, fieldName: "l6", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.l7.p, fieldName: "l7", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.platlocts.p, fieldName: "platlocts", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

