// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum OnorbitThrusterStatus_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: OnorbitThrusterStatus_Abridged_dataMode_Enum { return .exercise }
  public static var min: OnorbitThrusterStatus_Abridged_dataMode_Enum { return .real }
}


///  /// Status information for OnorbitThruster objects.
public struct OnorbitThrusterStatus_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ONOR" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: OnorbitThrusterStatus_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idOnorbitThruster = 8
    case name = 10
    case statusTime = 12
    case propMassMin = 14
    case propMassAvg = 16
    case propMassMedian = 18
    case propMassMax = 20
    case fuelMass = 22
    case fuelMassUnc = 24
    case totalDeltaV = 26
    case minDeltaV = 28
    case estDeltaV = 30
    case maxDeltaV = 32
    case thrustMax = 34
    case isp = 36
    case operational = 38
    case createdAt = 40
    case createdBy = 42
    case source = 44
    case origin = 46
    case origNetwork = 48
    case dataMode = 50
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: af103c-1f917dc-002c1bd
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
  ///  Example: /// Example: ff7dc909-e8b4-4a54-8529-1963d4e9b353
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idOnorbitThruster: String? { let o = _accessor.offset(VTOFFSET.idOnorbitThruster.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnorbitThrusterSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnorbitThruster.v) }
  ///  Identifier of this thruster.
  ///  Example: /// Example: REA1
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var statusTime: String? { let o = _accessor.offset(VTOFFSET.statusTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var statusTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.statusTime.v) }
  ///  Minimum available propellant mass for this thruster's type, in kilograms.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  public var propMassMin: Double { let o = _accessor.offset(VTOFFSET.propMassMin.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average available propellant mass for this thruster's type, in kilograms.
  ///  Example: /// Example: 907.6
  ///  Constraints: No constraints specified.
  public var propMassAvg: Double { let o = _accessor.offset(VTOFFSET.propMassAvg.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Median available propellant mass for this thruster's type, in kilograms.
  ///  Example: /// Example: 200.1
  ///  Constraints: No constraints specified.
  public var propMassMedian: Double { let o = _accessor.offset(VTOFFSET.propMassMedian.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum available propellant mass for this thruster's type, in kilograms.
  ///  Example: /// Example: 2333.3
  ///  Constraints: No constraints specified.
  public var propMassMax: Double { let o = _accessor.offset(VTOFFSET.propMassMax.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Total fuel mass available for this thruster's type, in kilograms.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  public var fuelMass: Double { let o = _accessor.offset(VTOFFSET.fuelMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var fuelMassUnc: Double { let o = _accessor.offset(VTOFFSET.fuelMassUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Total delta-velocity available for this thruster's type, in meters per second.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  public var totalDeltaV: Double { let o = _accessor.offset(VTOFFSET.totalDeltaV.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Minimum available delta-velocity for this thruster, in meters per second.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  public var minDeltaV: Double { let o = _accessor.offset(VTOFFSET.minDeltaV.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Estimated available delta-velocity for this thruster, in meters per second.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var estDeltaV: Double { let o = _accessor.offset(VTOFFSET.estDeltaV.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum available delta-velocity for this thruster, in meters per second.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  public var maxDeltaV: Double { let o = _accessor.offset(VTOFFSET.maxDeltaV.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum available thrust for this thruster, in newtons.
  ///  Example: /// Example: 22.1
  ///  Constraints: No constraints specified.
  public var thrustMax: Double { let o = _accessor.offset(VTOFFSET.thrustMax.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Specific impulse for this thruster, in seconds.
  ///  Example: /// Example: 300.1
  ///  Constraints: No constraints specified.
  public var isp: Double { let o = _accessor.offset(VTOFFSET.isp.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Flag indicating if this thruster is operational.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var operational: Bool { let o = _accessor.offset(VTOFFSET.operational.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: OnorbitThrusterStatus_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : OnorbitThrusterStatus_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startOnorbitThrusterStatus_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 24) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idOnorbitThruster: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnorbitThruster, at: VTOFFSET.idOnorbitThruster.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(statusTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: statusTime, at: VTOFFSET.statusTime.p) }
  public static func add(propMassMin: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: propMassMin, def: 0.0, at: VTOFFSET.propMassMin.p) }
  public static func add(propMassAvg: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: propMassAvg, def: 0.0, at: VTOFFSET.propMassAvg.p) }
  public static func add(propMassMedian: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: propMassMedian, def: 0.0, at: VTOFFSET.propMassMedian.p) }
  public static func add(propMassMax: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: propMassMax, def: 0.0, at: VTOFFSET.propMassMax.p) }
  public static func add(fuelMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fuelMass, def: 0.0, at: VTOFFSET.fuelMass.p) }
  public static func add(fuelMassUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fuelMassUnc, def: 0.0, at: VTOFFSET.fuelMassUnc.p) }
  public static func add(totalDeltaV: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalDeltaV, def: 0.0, at: VTOFFSET.totalDeltaV.p) }
  public static func add(minDeltaV: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: minDeltaV, def: 0.0, at: VTOFFSET.minDeltaV.p) }
  public static func add(estDeltaV: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: estDeltaV, def: 0.0, at: VTOFFSET.estDeltaV.p) }
  public static func add(maxDeltaV: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxDeltaV, def: 0.0, at: VTOFFSET.maxDeltaV.p) }
  public static func add(thrustMax: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: thrustMax, def: 0.0, at: VTOFFSET.thrustMax.p) }
  public static func add(isp: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: isp, def: 0.0, at: VTOFFSET.isp.p) }
  public static func add(operational: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: operational, def: false,
   at: VTOFFSET.operational.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: OnorbitThrusterStatus_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endOnorbitThrusterStatus_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createOnorbitThrusterStatus_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idOnorbitThrusterOffset idOnorbitThruster: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    statusTimeOffset statusTime: Offset = Offset(),
    propMassMin: Double = 0.0,
    propMassAvg: Double = 0.0,
    propMassMedian: Double = 0.0,
    propMassMax: Double = 0.0,
    fuelMass: Double = 0.0,
    fuelMassUnc: Double = 0.0,
    totalDeltaV: Double = 0.0,
    minDeltaV: Double = 0.0,
    estDeltaV: Double = 0.0,
    maxDeltaV: Double = 0.0,
    thrustMax: Double = 0.0,
    isp: Double = 0.0,
    operational: Bool = false,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: OnorbitThrusterStatus_Abridged_dataMode_Enum = .real
  ) -> Offset {
    let __start = OnorbitThrusterStatus_Abridged.startOnorbitThrusterStatus_Abridged(&fbb)
    OnorbitThrusterStatus_Abridged.add(id: id, &fbb)
    OnorbitThrusterStatus_Abridged.add(classificationMarking: classificationMarking, &fbb)
    OnorbitThrusterStatus_Abridged.add(idOnorbitThruster: idOnorbitThruster, &fbb)
    OnorbitThrusterStatus_Abridged.add(name: name, &fbb)
    OnorbitThrusterStatus_Abridged.add(statusTime: statusTime, &fbb)
    OnorbitThrusterStatus_Abridged.add(propMassMin: propMassMin, &fbb)
    OnorbitThrusterStatus_Abridged.add(propMassAvg: propMassAvg, &fbb)
    OnorbitThrusterStatus_Abridged.add(propMassMedian: propMassMedian, &fbb)
    OnorbitThrusterStatus_Abridged.add(propMassMax: propMassMax, &fbb)
    OnorbitThrusterStatus_Abridged.add(fuelMass: fuelMass, &fbb)
    OnorbitThrusterStatus_Abridged.add(fuelMassUnc: fuelMassUnc, &fbb)
    OnorbitThrusterStatus_Abridged.add(totalDeltaV: totalDeltaV, &fbb)
    OnorbitThrusterStatus_Abridged.add(minDeltaV: minDeltaV, &fbb)
    OnorbitThrusterStatus_Abridged.add(estDeltaV: estDeltaV, &fbb)
    OnorbitThrusterStatus_Abridged.add(maxDeltaV: maxDeltaV, &fbb)
    OnorbitThrusterStatus_Abridged.add(thrustMax: thrustMax, &fbb)
    OnorbitThrusterStatus_Abridged.add(isp: isp, &fbb)
    OnorbitThrusterStatus_Abridged.add(operational: operational, &fbb)
    OnorbitThrusterStatus_Abridged.add(createdAt: createdAt, &fbb)
    OnorbitThrusterStatus_Abridged.add(createdBy: createdBy, &fbb)
    OnorbitThrusterStatus_Abridged.add(source: source, &fbb)
    OnorbitThrusterStatus_Abridged.add(origin: origin, &fbb)
    OnorbitThrusterStatus_Abridged.add(origNetwork: origNetwork, &fbb)
    OnorbitThrusterStatus_Abridged.add(dataMode: dataMode, &fbb)
    return OnorbitThrusterStatus_Abridged.endOnorbitThrusterStatus_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnorbitThruster.p, fieldName: "idOnorbitThruster", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.statusTime.p, fieldName: "statusTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.propMassMin.p, fieldName: "propMassMin", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.propMassAvg.p, fieldName: "propMassAvg", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.propMassMedian.p, fieldName: "propMassMedian", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.propMassMax.p, fieldName: "propMassMax", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fuelMass.p, fieldName: "fuelMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fuelMassUnc.p, fieldName: "fuelMassUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.totalDeltaV.p, fieldName: "totalDeltaV", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.minDeltaV.p, fieldName: "minDeltaV", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.estDeltaV.p, fieldName: "estDeltaV", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxDeltaV.p, fieldName: "maxDeltaV", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.thrustMax.p, fieldName: "thrustMax", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.isp.p, fieldName: "isp", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.operational.p, fieldName: "operational", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: OnorbitThrusterStatus_Abridged_dataMode_Enum.self)
    _v.finish()
  }
}

