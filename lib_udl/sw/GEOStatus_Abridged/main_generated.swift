// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum GEOStatus_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: GEOStatus_Abridged_dataMode_Enum { return .exercise }
  public static var min: GEOStatus_Abridged_dataMode_Enum { return .real }
}


///  /// Information for the specified on-orbit GEO spacecraft, including status, expected longitude limits, and drift rates.
public struct GEOStatus_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "GEOS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: GEOStatus_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idOnOrbit = 8
    case origObjectId = 10
    case ss = 12
    case sc = 14
    case relativeEnergy = 16
    case longitudeRate = 18
    case longitudeMin = 20
    case longitudeMax = 22
    case confidenceLevel = 24
    case planeChangeStatus = 26
    case troughType = 28
    case lostFlag = 30
    case semiAnnualCorrFlag = 32
    case objectStatus = 34
    case rawFileUri = 36
    case createdAt = 38
    case createdBy = 40
    case source = 42
    case origin = 44
    case dataMode = 46
    case satNo = 48
    case origNetwork = 50
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: GEOSTATUS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the object on-orbit object.
  ///  Example: /// Example: REF-ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Optional identifier provided to indicate the target onorbit. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Sine of inclination times the sine of right ascension.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var ss: Double { let o = _accessor.offset(VTOFFSET.ss.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sine of inclination times the cosine of right ascension.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var sc: Double { let o = _accessor.offset(VTOFFSET.sc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Objects displacement from geostationary orbit in deg^2/day^2.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var relativeEnergy: Double { let o = _accessor.offset(VTOFFSET.relativeEnergy.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Corrective or overriding long term trend for longitudinal change in degrees/day.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var longitudeRate: Double { let o = _accessor.offset(VTOFFSET.longitudeRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Minimum longitude for this object.  WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
  ///  Example: /// Example: 180.1
  ///  Constraints: No constraints specified.
  public var longitudeMin: Double { let o = _accessor.offset(VTOFFSET.longitudeMin.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum longitude for this object. WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
  ///  Example: /// Example: 1.01
  ///  Constraints: No constraints specified.
  public var longitudeMax: Double { let o = _accessor.offset(VTOFFSET.longitudeMax.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Indicates the confidence level in the entry.  (Low, Medium, High).
  ///  Example: /// Example: Low
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var confidenceLevel: String? { let o = _accessor.offset(VTOFFSET.confidenceLevel.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var confidenceLevelSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.confidenceLevel.v) }
  ///  Geosynchronous plane changing status.  (Current, Never, Former, Future).
  ///  Example: /// Example: Current
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var planeChangeStatus: String? { let o = _accessor.offset(VTOFFSET.planeChangeStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var planeChangeStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.planeChangeStatus.v) }
  ///  Indicates the trough (gravity well) or drift direction of a space object:
  ///  255 - Influenced by 255° longitude trough. 
  ///  75 - Influenced by 75° longitude trough. 
  ///  Both - Oscillating between both 255 and 75 troughs. 
  ///  East - Drifting eastward; large relative energy and a period less than 1436.1 minutes. 
  ///  West - Drifting westward; large relative energy and a period greater than 1436.2 minutes.
  ///  Example: /// Example: West
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var troughType: String? { let o = _accessor.offset(VTOFFSET.troughType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var troughTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.troughType.v) }
  ///  Lost space object indicator.  (True or False).
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var lostFlag: Bool { let o = _accessor.offset(VTOFFSET.lostFlag.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Semi-annual correction.  (True or False).
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var semiAnnualCorrFlag: Bool { let o = _accessor.offset(VTOFFSET.semiAnnualCorrFlag.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Space object status.  (Active, Dead, Unknown).
  ///  Example: /// Example: Active
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var objectStatus: String? { let o = _accessor.offset(VTOFFSET.objectStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objectStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.objectStatus.v) }
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var rawFileUri: String? { let o = _accessor.offset(VTOFFSET.rawFileUri.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rawFileUriSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rawFileUri.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: GEOStatus_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : GEOStatus_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 21
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startGEOStatus_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 24) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(ss: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ss, def: 0.0, at: VTOFFSET.ss.p) }
  public static func add(sc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sc, def: 0.0, at: VTOFFSET.sc.p) }
  public static func add(relativeEnergy: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: relativeEnergy, def: 0.0, at: VTOFFSET.relativeEnergy.p) }
  public static func add(longitudeRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: longitudeRate, def: 0.0, at: VTOFFSET.longitudeRate.p) }
  public static func add(longitudeMin: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: longitudeMin, def: 0.0, at: VTOFFSET.longitudeMin.p) }
  public static func add(longitudeMax: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: longitudeMax, def: 0.0, at: VTOFFSET.longitudeMax.p) }
  public static func add(confidenceLevel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: confidenceLevel, at: VTOFFSET.confidenceLevel.p) }
  public static func add(planeChangeStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: planeChangeStatus, at: VTOFFSET.planeChangeStatus.p) }
  public static func add(troughType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: troughType, at: VTOFFSET.troughType.p) }
  public static func add(lostFlag: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lostFlag, def: false,
   at: VTOFFSET.lostFlag.p) }
  public static func add(semiAnnualCorrFlag: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: semiAnnualCorrFlag, def: false,
   at: VTOFFSET.semiAnnualCorrFlag.p) }
  public static func add(objectStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: objectStatus, at: VTOFFSET.objectStatus.p) }
  public static func add(rawFileUri: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rawFileUri, at: VTOFFSET.rawFileUri.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: GEOStatus_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endGEOStatus_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createGEOStatus_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    origObjectIdOffset origObjectId: Offset = Offset(),
    ss: Double = 0.0,
    sc: Double = 0.0,
    relativeEnergy: Double = 0.0,
    longitudeRate: Double = 0.0,
    longitudeMin: Double = 0.0,
    longitudeMax: Double = 0.0,
    confidenceLevelOffset confidenceLevel: Offset = Offset(),
    planeChangeStatusOffset planeChangeStatus: Offset = Offset(),
    troughTypeOffset troughType: Offset = Offset(),
    lostFlag: Bool = false,
    semiAnnualCorrFlag: Bool = false,
    objectStatusOffset objectStatus: Offset = Offset(),
    rawFileUriOffset rawFileUri: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: GEOStatus_Abridged_dataMode_Enum = .real,
    satNo: Int32 = 0,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = GEOStatus_Abridged.startGEOStatus_Abridged(&fbb)
    GEOStatus_Abridged.add(id: id, &fbb)
    GEOStatus_Abridged.add(classificationMarking: classificationMarking, &fbb)
    GEOStatus_Abridged.add(idOnOrbit: idOnOrbit, &fbb)
    GEOStatus_Abridged.add(origObjectId: origObjectId, &fbb)
    GEOStatus_Abridged.add(ss: ss, &fbb)
    GEOStatus_Abridged.add(sc: sc, &fbb)
    GEOStatus_Abridged.add(relativeEnergy: relativeEnergy, &fbb)
    GEOStatus_Abridged.add(longitudeRate: longitudeRate, &fbb)
    GEOStatus_Abridged.add(longitudeMin: longitudeMin, &fbb)
    GEOStatus_Abridged.add(longitudeMax: longitudeMax, &fbb)
    GEOStatus_Abridged.add(confidenceLevel: confidenceLevel, &fbb)
    GEOStatus_Abridged.add(planeChangeStatus: planeChangeStatus, &fbb)
    GEOStatus_Abridged.add(troughType: troughType, &fbb)
    GEOStatus_Abridged.add(lostFlag: lostFlag, &fbb)
    GEOStatus_Abridged.add(semiAnnualCorrFlag: semiAnnualCorrFlag, &fbb)
    GEOStatus_Abridged.add(objectStatus: objectStatus, &fbb)
    GEOStatus_Abridged.add(rawFileUri: rawFileUri, &fbb)
    GEOStatus_Abridged.add(createdAt: createdAt, &fbb)
    GEOStatus_Abridged.add(createdBy: createdBy, &fbb)
    GEOStatus_Abridged.add(source: source, &fbb)
    GEOStatus_Abridged.add(origin: origin, &fbb)
    GEOStatus_Abridged.add(dataMode: dataMode, &fbb)
    GEOStatus_Abridged.add(satNo: satNo, &fbb)
    GEOStatus_Abridged.add(origNetwork: origNetwork, &fbb)
    return GEOStatus_Abridged.endGEOStatus_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ss.p, fieldName: "ss", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.sc.p, fieldName: "sc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.relativeEnergy.p, fieldName: "relativeEnergy", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.longitudeRate.p, fieldName: "longitudeRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.longitudeMin.p, fieldName: "longitudeMin", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.longitudeMax.p, fieldName: "longitudeMax", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.confidenceLevel.p, fieldName: "confidenceLevel", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.planeChangeStatus.p, fieldName: "planeChangeStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.troughType.p, fieldName: "troughType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lostFlag.p, fieldName: "lostFlag", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.semiAnnualCorrFlag.p, fieldName: "semiAnnualCorrFlag", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.objectStatus.p, fieldName: "objectStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rawFileUri.p, fieldName: "rawFileUri", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: GEOStatus_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

