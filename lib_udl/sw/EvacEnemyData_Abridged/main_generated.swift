// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Data defining any enemy intelligence reported by the requestor.
public struct EvacEnemyData_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EVAC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EvacEnemyData_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case dirToEnemy = 4
    case hostileFireType = 6
    case friendliesRemarks = 8
    case hlzRemarks = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
  ///  Example: /// Example: NORTH
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var dirToEnemy: String? { let o = _accessor.offset(VTOFFSET.dirToEnemy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dirToEnemySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dirToEnemy.v) }
  ///  The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
  ///  Example: /// Example: SMALL ARMS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var hostileFireType: String? { let o = _accessor.offset(VTOFFSET.hostileFireType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var hostileFireTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.hostileFireType.v) }
  ///  Comments provided by friendlies about the evac zone.
  ///  Example: /// Example: Comments from friendlies.
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var friendliesRemarks: String? { let o = _accessor.offset(VTOFFSET.friendliesRemarks.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var friendliesRemarksSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.friendliesRemarks.v) }
  ///  Hot Landing Zone remarks.
  ///  Example: /// Example: Remarks about hot landing zone.
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var hlzRemarks: String? { let o = _accessor.offset(VTOFFSET.hlzRemarks.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var hlzRemarksSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.hlzRemarks.v) }
  public static func startEvacEnemyData_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(dirToEnemy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dirToEnemy, at: VTOFFSET.dirToEnemy.p) }
  public static func add(hostileFireType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hostileFireType, at: VTOFFSET.hostileFireType.p) }
  public static func add(friendliesRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: friendliesRemarks, at: VTOFFSET.friendliesRemarks.p) }
  public static func add(hlzRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hlzRemarks, at: VTOFFSET.hlzRemarks.p) }
  public static func endEvacEnemyData_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEvacEnemyData_Abridged(
    _ fbb: inout FlatBufferBuilder,
    dirToEnemyOffset dirToEnemy: Offset = Offset(),
    hostileFireTypeOffset hostileFireType: Offset = Offset(),
    friendliesRemarksOffset friendliesRemarks: Offset = Offset(),
    hlzRemarksOffset hlzRemarks: Offset = Offset()
  ) -> Offset {
    let __start = EvacEnemyData_Abridged.startEvacEnemyData_Abridged(&fbb)
    EvacEnemyData_Abridged.add(dirToEnemy: dirToEnemy, &fbb)
    EvacEnemyData_Abridged.add(hostileFireType: hostileFireType, &fbb)
    EvacEnemyData_Abridged.add(friendliesRemarks: friendliesRemarks, &fbb)
    EvacEnemyData_Abridged.add(hlzRemarks: hlzRemarks, &fbb)
    return EvacEnemyData_Abridged.endEvacEnemyData_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.dirToEnemy.p, fieldName: "dirToEnemy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.hostileFireType.p, fieldName: "hostileFireType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.friendliesRemarks.p, fieldName: "friendliesRemarks", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.hlzRemarks.p, fieldName: "hlzRemarks", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

