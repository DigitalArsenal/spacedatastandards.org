// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum SARObservation_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: SARObservation_Abridged_dataMode_Enum { return .exercise }
  public static var min: SARObservation_Abridged_dataMode_Enum { return .real }
}


///  /// Model representation of observation data for SAR based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
public struct SARObservation_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SARO" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: SARObservation_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idOnOrbit = 8
    case satNo = 10
    case origObjectId = 12
    case idSensor = 14
    case origSensorId = 16
    case externalId = 18
    case collectionId = 20
    case detectionId = 22
    case collectionStart = 24
    case collectionEnd = 26
    case centerTime = 28
    case detectionStart = 30
    case detectionEnd = 32
    case dwellTime = 34
    case orbitState = 36
    case sarMode = 38
    case operatingBand = 40
    case operatingFreq = 42
    case snr = 44
    case txPolarization = 46
    case rxPolarization = 48
    case grazeAngle = 50
    case incidenceAngle = 52
    case squintAngle = 54
    case pulseBandwidth = 56
    case pulseDuration = 58
    case continuousSpotAngle = 60
    case slantRange = 62
    case nearRange = 64
    case farRange = 66
    case swathLength = 68
    case atext = 70
    case agjson = 72
    case atype = 74
    case andims = 76
    case asrid = 78
    case spacingRange = 80
    case spacingAzimuth = 82
    case looksAzimuth = 84
    case looksRange = 86
    case resolutionRange = 88
    case resolutionAzimuth = 90
    case obDirection = 92
    case coordSys = 94
    case targetposx = 96
    case targetposy = 98
    case targetposz = 100
    case senalt = 102
    case senvelx = 104
    case senvely = 106
    case senvelz = 108
    case senlatStart = 110
    case senlonStart = 112
    case senlatEnd = 114
    case senlonEnd = 116
    case transactionId = 118
    case srcTyps = 120
    case srcIds = 122
    case createdAt = 124
    case createdBy = 126
    case source = 128
    case origin = 130
    case origNetwork = 132
    case sourceDl = 134
    case dataMode = 136
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SAROBSERVATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the spacecraft hosting the sensor associated with this collection.
  ///  Example: /// Example: 36036
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Satellite/Catalog number of the spacecraft hosting the sensor associated with this collection.
  ///  Example: /// Example: 36036
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional identifier provided by the source to indicate the onorbit object hosting the sensor associated with this collection. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: 36036
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Unique identifier of the reporting sensor.
  ///  Example: /// Example: 36036-1L
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Optional identifier provided by the source to indicate the sensor for this collection. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: SMOS-1L
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origSensorId: String? { let o = _accessor.offset(VTOFFSET.origSensorId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSensorIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSensorId.v) }
  ///  Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: EXTERNAL-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var externalId: String? { let o = _accessor.offset(VTOFFSET.externalId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var externalIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.externalId.v) }
  ///  Optional identifier to indicate the specific collection tasking which produced this observation.
  ///  Example: /// Example: COLLECTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var collectionId: String? { let o = _accessor.offset(VTOFFSET.collectionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var collectionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.collectionId.v) }
  ///  Identifier of the specific detection within a collection which produced this observation.
  ///  Example: /// Example: DETECTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var detectionId: String? { let o = _accessor.offset(VTOFFSET.detectionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var detectionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.detectionId.v) }
  ///  Collection start time in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2023-04-22T17:35:00.123456Z
  ///  Constraints: No constraints specified.
  public var collectionStart: String? { let o = _accessor.offset(VTOFFSET.collectionStart.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var collectionStartSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.collectionStart.v) }
  ///  Collection end time in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2023-04-22T17:38:10.20177Z
  ///  Constraints: No constraints specified.
  public var collectionEnd: String? { let o = _accessor.offset(VTOFFSET.collectionEnd.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var collectionEndSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.collectionEnd.v) }
  ///  The datetime at the center point of the collection in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2023-04-22T17:36:35.100885Z
  ///  Constraints: No constraints specified.
  public var centerTime: String? { let o = _accessor.offset(VTOFFSET.centerTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var centerTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.centerTime.v) }
  ///  The detection start time in ISO 8601 UTC format, with microsecond precision.
  ///  Example: /// Example: 2023-07-08T17:35:01.615396Z
  ///  Constraints: No constraints specified.
  public var detectionStart: String? { let o = _accessor.offset(VTOFFSET.detectionStart.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var detectionStartSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.detectionStart.v) }
  ///  The detection end time in ISO 8601 UTC format, with microsecond precision.
  ///  Example: /// Example: 2023-07-08T17:35:20.77219Z
  ///  Constraints: No constraints specified.
  public var detectionEnd: String? { let o = _accessor.offset(VTOFFSET.detectionEnd.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var detectionEndSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.detectionEnd.v) }
  ///  The duration, in seconds, of this detection.
  ///  Example: /// Example: 79.156794
  ///  Constraints: No constraints specified.
  public var dwellTime: Double { let o = _accessor.offset(VTOFFSET.dwellTime.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The orbital direction (ASCENDING, DESCENDING) of the platform during the collection.
  ///  Example: /// Example: ASCENDING
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var orbitState: String? { let o = _accessor.offset(VTOFFSET.orbitState.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var orbitStateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.orbitState.v) }
  ///  Collection mode setting for this collection (e.g. AREA, SPOTLIGHT, STRIP, etc.).
  ///  Example: /// Example: SPOTLIGHT
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var sarMode: String? { let o = _accessor.offset(VTOFFSET.sarMode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sarModeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sarMode.v) }
  ///  Name of the band containing operating frequency for the collection (e.g. C, E, EHF, HF, K, Ka, Ku, L, Q, S, SHF, UNK, UHF, V, VHF, VLF, W, X). See RFBandType for more details and descriptions of each band name.
  ///  Example: /// Example: L
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var operatingBand: String? { let o = _accessor.offset(VTOFFSET.operatingBand.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var operatingBandSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.operatingBand.v) }
  ///  The operating frequency, in Mhz, for the collection.
  ///  Example: /// Example: 2345.6
  ///  Constraints: No constraints specified.
  public var operatingFreq: Double { let o = _accessor.offset(VTOFFSET.operatingFreq.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Signal to noise ratio, in dB.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var snr: Double { let o = _accessor.offset(VTOFFSET.snr.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Transmit polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
  ///  Example: /// Example: H
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var txPolarization: String? { let o = _accessor.offset(VTOFFSET.txPolarization.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var txPolarizationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.txPolarization.v) }
  ///  Receive polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
  ///  Example: /// Example: H
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var rxPolarization: String? { let o = _accessor.offset(VTOFFSET.rxPolarization.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rxPolarizationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rxPolarization.v) }
  ///  The graze angle (also referred to as look angle) for the collection in degrees.
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  public var grazeAngle: Double { let o = _accessor.offset(VTOFFSET.grazeAngle.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The center incidence angle in degrees.
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  public var incidenceAngle: Double { let o = _accessor.offset(VTOFFSET.incidenceAngle.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The squint angle for the collection in degrees.
  ///  Example: /// Example: 1.2
  ///  Constraints: No constraints specified.
  public var squintAngle: Double { let o = _accessor.offset(VTOFFSET.squintAngle.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The bandwidth frequency of the pulse in Mhz.
  ///  Example: /// Example: 500.1
  ///  Constraints: No constraints specified.
  public var pulseBandwidth: Double { let o = _accessor.offset(VTOFFSET.pulseBandwidth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The duration of a pulse in seconds.
  ///  Example: /// Example: 1.1e-05
  ///  Constraints: No constraints specified.
  public var pulseDuration: Double { let o = _accessor.offset(VTOFFSET.pulseDuration.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Required sweep angle for the continuous spot scene in degrees.
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  public var continuousSpotAngle: Double { let o = _accessor.offset(VTOFFSET.continuousSpotAngle.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Slant distance from sensor to center point of imaging event in kilometers.
  ///  Example: /// Example: 60.1
  ///  Constraints: No constraints specified.
  public var slantRange: Double { let o = _accessor.offset(VTOFFSET.slantRange.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Specifies the closest range, in kilometers, from the flight path to target during the collection.
  ///  Example: /// Example: 12.1
  ///  Constraints: No constraints specified.
  public var nearRange: Double { let o = _accessor.offset(VTOFFSET.nearRange.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Specifies the farthest range, in kilometers, from the flight path to target during the collection.
  ///  Example: /// Example: 34.1
  ///  Constraints: No constraints specified.
  public var farRange: Double { let o = _accessor.offset(VTOFFSET.farRange.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The length of the collection as projected on the ground in kilometers.
  ///  Example: /// Example: 12.1
  ///  Constraints: No constraints specified.
  public var swathLength: Double { let o = _accessor.offset(VTOFFSET.swathLength.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  public var atext: String? { let o = _accessor.offset(VTOFFSET.atext.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var atextSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.atext.v) }
  ///  Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  ///  Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  ///  Constraints: No constraints specified.
  public var agjson: String? { let o = _accessor.offset(VTOFFSET.agjson.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var agjsonSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.agjson.v) }
  ///  Type of region as projected on the ground (POLYGON, POINT, LINE).
  ///  Example: /// Example: POLYGON
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var atype: String? { let o = _accessor.offset(VTOFFSET.atype.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var atypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.atype.v) }
  ///  Number of dimensions of the geometry depicted by region.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var andims: Int32 { let o = _accessor.offset(VTOFFSET.andims.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Geographical spatial_ref_sys for region.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var asrid: Int32 { let o = _accessor.offset(VTOFFSET.asrid.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The pixel spacing in the range direction measured in meters.
  ///  Example: /// Example: 0.123
  ///  Constraints: No constraints specified.
  public var spacingRange: Double { let o = _accessor.offset(VTOFFSET.spacingRange.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The pixel spacing in the azimuth direction measured in meters.
  ///  Example: /// Example: 0.123
  ///  Constraints: No constraints specified.
  public var spacingAzimuth: Double { let o = _accessor.offset(VTOFFSET.spacingAzimuth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The number of looks in the azimuth direction.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var looksAzimuth: Int32 { let o = _accessor.offset(VTOFFSET.looksAzimuth.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The number of looks in the range direction.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var looksRange: Int32 { let o = _accessor.offset(VTOFFSET.looksRange.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The resolution in the range direction measured in meters.
  ///  Example: /// Example: 0.123
  ///  Constraints: No constraints specified.
  public var resolutionRange: Double { let o = _accessor.offset(VTOFFSET.resolutionRange.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The resolution in the azimuth direction measured in meters.
  ///  Example: /// Example: 0.123
  ///  Constraints: No constraints specified.
  public var resolutionAzimuth: Double { let o = _accessor.offset(VTOFFSET.resolutionAzimuth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The antenna pointing direction (LEFT, RIGHT).
  ///  Example: /// Example: RIGHT
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var obDirection: String? { let o = _accessor.offset(VTOFFSET.obDirection.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obDirectionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obDirection.v) }
  ///  The coordinate system used for the sensor velocity and target position vectors for the collection.
  ///  Example: /// Example: ECEF
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var coordSys: String? { let o = _accessor.offset(VTOFFSET.coordSys.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var coordSysSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.coordSys.v) }
  ///  The collection target X position in kilometers.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  public var targetposx: Double { let o = _accessor.offset(VTOFFSET.targetposx.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The collection target Y position in kilometers.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  public var targetposy: Double { let o = _accessor.offset(VTOFFSET.targetposy.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The collection target Z position in kilometers.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  public var targetposz: Double { let o = _accessor.offset(VTOFFSET.targetposz.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor altitude during collection in kilometers.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var senalt: Double { let o = _accessor.offset(VTOFFSET.senalt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor platform X-velocity during collection in kilometers/second.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var senvelx: Double { let o = _accessor.offset(VTOFFSET.senvelx.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor platform Y-velocity during collection in kilometers/second.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var senvely: Double { let o = _accessor.offset(VTOFFSET.senvely.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor platform Z-velocity during collection in kilometers/second.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var senvelz: Double { let o = _accessor.offset(VTOFFSET.senvelz.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 sensor latitude sub-point at collect start time (collectionStart), represented as -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  public var senlatStart: Double { let o = _accessor.offset(VTOFFSET.senlatStart.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 sensor longitude sub-point at collect start time (collectionStart), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  public var senlonStart: Double { let o = _accessor.offset(VTOFFSET.senlonStart.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 sensor latitude sub-point at collect end time (collectionEnd), represented as -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  public var senlatEnd: Double { let o = _accessor.offset(VTOFFSET.senlatEnd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 sensor longitude sub-point at collect end time (collectionEnd), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  public var senlonEnd: Double { let o = _accessor.offset(VTOFFSET.senlonEnd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var transactionId: String? { let o = _accessor.offset(VTOFFSET.transactionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transactionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transactionId.v) }
  ///  Array of UDL record types (e.g. ANALYTICMAGERY, ESID, GROUNDIMAGE, NOTIFICATION, POI, SV, TRACK) that are related to the SAR Observation. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['ESID', 'GROUNDIMAGE']
  ///  Constraints: No constraints specified.
  public var hasSrcTyps: Bool { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? false : true }
  public var srcTypsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcTyps(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of UUIDs of the UDL data records that are related to the SAR Observation. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/sarobservation/{uuid}).
  ///  Example: /// Example: ['f7e01cd4-626b-441f-a423-17b160eb78ba', '223833c4-be0d-4fdb-a2e4-325a48eccced']
  ///  Constraints: No constraints specified.
  public var hasSrcIds: Bool { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? false : true }
  public var srcIdsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcIds(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2023-04-22T17:51:40.854Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: SARObservation_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : SARObservation_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startSARObservation_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 67) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(origSensorId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSensorId, at: VTOFFSET.origSensorId.p) }
  public static func add(externalId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: externalId, at: VTOFFSET.externalId.p) }
  public static func add(collectionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: collectionId, at: VTOFFSET.collectionId.p) }
  public static func add(detectionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: detectionId, at: VTOFFSET.detectionId.p) }
  public static func add(collectionStart: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: collectionStart, at: VTOFFSET.collectionStart.p) }
  public static func add(collectionEnd: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: collectionEnd, at: VTOFFSET.collectionEnd.p) }
  public static func add(centerTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: centerTime, at: VTOFFSET.centerTime.p) }
  public static func add(detectionStart: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: detectionStart, at: VTOFFSET.detectionStart.p) }
  public static func add(detectionEnd: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: detectionEnd, at: VTOFFSET.detectionEnd.p) }
  public static func add(dwellTime: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dwellTime, def: 0.0, at: VTOFFSET.dwellTime.p) }
  public static func add(orbitState: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: orbitState, at: VTOFFSET.orbitState.p) }
  public static func add(sarMode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sarMode, at: VTOFFSET.sarMode.p) }
  public static func add(operatingBand: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: operatingBand, at: VTOFFSET.operatingBand.p) }
  public static func add(operatingFreq: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: operatingFreq, def: 0.0, at: VTOFFSET.operatingFreq.p) }
  public static func add(snr: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: snr, def: 0.0, at: VTOFFSET.snr.p) }
  public static func add(txPolarization: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: txPolarization, at: VTOFFSET.txPolarization.p) }
  public static func add(rxPolarization: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rxPolarization, at: VTOFFSET.rxPolarization.p) }
  public static func add(grazeAngle: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: grazeAngle, def: 0.0, at: VTOFFSET.grazeAngle.p) }
  public static func add(incidenceAngle: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: incidenceAngle, def: 0.0, at: VTOFFSET.incidenceAngle.p) }
  public static func add(squintAngle: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: squintAngle, def: 0.0, at: VTOFFSET.squintAngle.p) }
  public static func add(pulseBandwidth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pulseBandwidth, def: 0.0, at: VTOFFSET.pulseBandwidth.p) }
  public static func add(pulseDuration: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pulseDuration, def: 0.0, at: VTOFFSET.pulseDuration.p) }
  public static func add(continuousSpotAngle: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: continuousSpotAngle, def: 0.0, at: VTOFFSET.continuousSpotAngle.p) }
  public static func add(slantRange: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: slantRange, def: 0.0, at: VTOFFSET.slantRange.p) }
  public static func add(nearRange: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nearRange, def: 0.0, at: VTOFFSET.nearRange.p) }
  public static func add(farRange: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: farRange, def: 0.0, at: VTOFFSET.farRange.p) }
  public static func add(swathLength: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: swathLength, def: 0.0, at: VTOFFSET.swathLength.p) }
  public static func add(atext: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: atext, at: VTOFFSET.atext.p) }
  public static func add(agjson: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: agjson, at: VTOFFSET.agjson.p) }
  public static func add(atype: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: atype, at: VTOFFSET.atype.p) }
  public static func add(andims: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: andims, def: 0, at: VTOFFSET.andims.p) }
  public static func add(asrid: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: asrid, def: 0, at: VTOFFSET.asrid.p) }
  public static func add(spacingRange: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: spacingRange, def: 0.0, at: VTOFFSET.spacingRange.p) }
  public static func add(spacingAzimuth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: spacingAzimuth, def: 0.0, at: VTOFFSET.spacingAzimuth.p) }
  public static func add(looksAzimuth: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: looksAzimuth, def: 0, at: VTOFFSET.looksAzimuth.p) }
  public static func add(looksRange: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: looksRange, def: 0, at: VTOFFSET.looksRange.p) }
  public static func add(resolutionRange: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: resolutionRange, def: 0.0, at: VTOFFSET.resolutionRange.p) }
  public static func add(resolutionAzimuth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: resolutionAzimuth, def: 0.0, at: VTOFFSET.resolutionAzimuth.p) }
  public static func add(obDirection: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obDirection, at: VTOFFSET.obDirection.p) }
  public static func add(coordSys: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: coordSys, at: VTOFFSET.coordSys.p) }
  public static func add(targetposx: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: targetposx, def: 0.0, at: VTOFFSET.targetposx.p) }
  public static func add(targetposy: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: targetposy, def: 0.0, at: VTOFFSET.targetposy.p) }
  public static func add(targetposz: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: targetposz, def: 0.0, at: VTOFFSET.targetposz.p) }
  public static func add(senalt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senalt, def: 0.0, at: VTOFFSET.senalt.p) }
  public static func add(senvelx: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senvelx, def: 0.0, at: VTOFFSET.senvelx.p) }
  public static func add(senvely: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senvely, def: 0.0, at: VTOFFSET.senvely.p) }
  public static func add(senvelz: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senvelz, def: 0.0, at: VTOFFSET.senvelz.p) }
  public static func add(senlatStart: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senlatStart, def: 0.0, at: VTOFFSET.senlatStart.p) }
  public static func add(senlonStart: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senlonStart, def: 0.0, at: VTOFFSET.senlonStart.p) }
  public static func add(senlatEnd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senlatEnd, def: 0.0, at: VTOFFSET.senlatEnd.p) }
  public static func add(senlonEnd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senlonEnd, def: 0.0, at: VTOFFSET.senlonEnd.p) }
  public static func add(transactionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transactionId, at: VTOFFSET.transactionId.p) }
  public static func addVectorOf(srcTyps: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcTyps, at: VTOFFSET.srcTyps.p) }
  public static func addVectorOf(srcIds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcIds, at: VTOFFSET.srcIds.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(dataMode: SARObservation_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endSARObservation_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSARObservation_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    satNo: Int32 = 0,
    origObjectIdOffset origObjectId: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    origSensorIdOffset origSensorId: Offset = Offset(),
    externalIdOffset externalId: Offset = Offset(),
    collectionIdOffset collectionId: Offset = Offset(),
    detectionIdOffset detectionId: Offset = Offset(),
    collectionStartOffset collectionStart: Offset = Offset(),
    collectionEndOffset collectionEnd: Offset = Offset(),
    centerTimeOffset centerTime: Offset = Offset(),
    detectionStartOffset detectionStart: Offset = Offset(),
    detectionEndOffset detectionEnd: Offset = Offset(),
    dwellTime: Double = 0.0,
    orbitStateOffset orbitState: Offset = Offset(),
    sarModeOffset sarMode: Offset = Offset(),
    operatingBandOffset operatingBand: Offset = Offset(),
    operatingFreq: Double = 0.0,
    snr: Double = 0.0,
    txPolarizationOffset txPolarization: Offset = Offset(),
    rxPolarizationOffset rxPolarization: Offset = Offset(),
    grazeAngle: Double = 0.0,
    incidenceAngle: Double = 0.0,
    squintAngle: Double = 0.0,
    pulseBandwidth: Double = 0.0,
    pulseDuration: Double = 0.0,
    continuousSpotAngle: Double = 0.0,
    slantRange: Double = 0.0,
    nearRange: Double = 0.0,
    farRange: Double = 0.0,
    swathLength: Double = 0.0,
    atextOffset atext: Offset = Offset(),
    agjsonOffset agjson: Offset = Offset(),
    atypeOffset atype: Offset = Offset(),
    andims: Int32 = 0,
    asrid: Int32 = 0,
    spacingRange: Double = 0.0,
    spacingAzimuth: Double = 0.0,
    looksAzimuth: Int32 = 0,
    looksRange: Int32 = 0,
    resolutionRange: Double = 0.0,
    resolutionAzimuth: Double = 0.0,
    obDirectionOffset obDirection: Offset = Offset(),
    coordSysOffset coordSys: Offset = Offset(),
    targetposx: Double = 0.0,
    targetposy: Double = 0.0,
    targetposz: Double = 0.0,
    senalt: Double = 0.0,
    senvelx: Double = 0.0,
    senvely: Double = 0.0,
    senvelz: Double = 0.0,
    senlatStart: Double = 0.0,
    senlonStart: Double = 0.0,
    senlatEnd: Double = 0.0,
    senlonEnd: Double = 0.0,
    transactionIdOffset transactionId: Offset = Offset(),
    srcTypsVectorOffset srcTyps: Offset = Offset(),
    srcIdsVectorOffset srcIds: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    dataMode: SARObservation_Abridged_dataMode_Enum = .real
  ) -> Offset {
    let __start = SARObservation_Abridged.startSARObservation_Abridged(&fbb)
    SARObservation_Abridged.add(id: id, &fbb)
    SARObservation_Abridged.add(classificationMarking: classificationMarking, &fbb)
    SARObservation_Abridged.add(idOnOrbit: idOnOrbit, &fbb)
    SARObservation_Abridged.add(satNo: satNo, &fbb)
    SARObservation_Abridged.add(origObjectId: origObjectId, &fbb)
    SARObservation_Abridged.add(idSensor: idSensor, &fbb)
    SARObservation_Abridged.add(origSensorId: origSensorId, &fbb)
    SARObservation_Abridged.add(externalId: externalId, &fbb)
    SARObservation_Abridged.add(collectionId: collectionId, &fbb)
    SARObservation_Abridged.add(detectionId: detectionId, &fbb)
    SARObservation_Abridged.add(collectionStart: collectionStart, &fbb)
    SARObservation_Abridged.add(collectionEnd: collectionEnd, &fbb)
    SARObservation_Abridged.add(centerTime: centerTime, &fbb)
    SARObservation_Abridged.add(detectionStart: detectionStart, &fbb)
    SARObservation_Abridged.add(detectionEnd: detectionEnd, &fbb)
    SARObservation_Abridged.add(dwellTime: dwellTime, &fbb)
    SARObservation_Abridged.add(orbitState: orbitState, &fbb)
    SARObservation_Abridged.add(sarMode: sarMode, &fbb)
    SARObservation_Abridged.add(operatingBand: operatingBand, &fbb)
    SARObservation_Abridged.add(operatingFreq: operatingFreq, &fbb)
    SARObservation_Abridged.add(snr: snr, &fbb)
    SARObservation_Abridged.add(txPolarization: txPolarization, &fbb)
    SARObservation_Abridged.add(rxPolarization: rxPolarization, &fbb)
    SARObservation_Abridged.add(grazeAngle: grazeAngle, &fbb)
    SARObservation_Abridged.add(incidenceAngle: incidenceAngle, &fbb)
    SARObservation_Abridged.add(squintAngle: squintAngle, &fbb)
    SARObservation_Abridged.add(pulseBandwidth: pulseBandwidth, &fbb)
    SARObservation_Abridged.add(pulseDuration: pulseDuration, &fbb)
    SARObservation_Abridged.add(continuousSpotAngle: continuousSpotAngle, &fbb)
    SARObservation_Abridged.add(slantRange: slantRange, &fbb)
    SARObservation_Abridged.add(nearRange: nearRange, &fbb)
    SARObservation_Abridged.add(farRange: farRange, &fbb)
    SARObservation_Abridged.add(swathLength: swathLength, &fbb)
    SARObservation_Abridged.add(atext: atext, &fbb)
    SARObservation_Abridged.add(agjson: agjson, &fbb)
    SARObservation_Abridged.add(atype: atype, &fbb)
    SARObservation_Abridged.add(andims: andims, &fbb)
    SARObservation_Abridged.add(asrid: asrid, &fbb)
    SARObservation_Abridged.add(spacingRange: spacingRange, &fbb)
    SARObservation_Abridged.add(spacingAzimuth: spacingAzimuth, &fbb)
    SARObservation_Abridged.add(looksAzimuth: looksAzimuth, &fbb)
    SARObservation_Abridged.add(looksRange: looksRange, &fbb)
    SARObservation_Abridged.add(resolutionRange: resolutionRange, &fbb)
    SARObservation_Abridged.add(resolutionAzimuth: resolutionAzimuth, &fbb)
    SARObservation_Abridged.add(obDirection: obDirection, &fbb)
    SARObservation_Abridged.add(coordSys: coordSys, &fbb)
    SARObservation_Abridged.add(targetposx: targetposx, &fbb)
    SARObservation_Abridged.add(targetposy: targetposy, &fbb)
    SARObservation_Abridged.add(targetposz: targetposz, &fbb)
    SARObservation_Abridged.add(senalt: senalt, &fbb)
    SARObservation_Abridged.add(senvelx: senvelx, &fbb)
    SARObservation_Abridged.add(senvely: senvely, &fbb)
    SARObservation_Abridged.add(senvelz: senvelz, &fbb)
    SARObservation_Abridged.add(senlatStart: senlatStart, &fbb)
    SARObservation_Abridged.add(senlonStart: senlonStart, &fbb)
    SARObservation_Abridged.add(senlatEnd: senlatEnd, &fbb)
    SARObservation_Abridged.add(senlonEnd: senlonEnd, &fbb)
    SARObservation_Abridged.add(transactionId: transactionId, &fbb)
    SARObservation_Abridged.addVectorOf(srcTyps: srcTyps, &fbb)
    SARObservation_Abridged.addVectorOf(srcIds: srcIds, &fbb)
    SARObservation_Abridged.add(createdAt: createdAt, &fbb)
    SARObservation_Abridged.add(createdBy: createdBy, &fbb)
    SARObservation_Abridged.add(source: source, &fbb)
    SARObservation_Abridged.add(origin: origin, &fbb)
    SARObservation_Abridged.add(origNetwork: origNetwork, &fbb)
    SARObservation_Abridged.add(sourceDl: sourceDl, &fbb)
    SARObservation_Abridged.add(dataMode: dataMode, &fbb)
    return SARObservation_Abridged.endSARObservation_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSensorId.p, fieldName: "origSensorId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.externalId.p, fieldName: "externalId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.collectionId.p, fieldName: "collectionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.detectionId.p, fieldName: "detectionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.collectionStart.p, fieldName: "collectionStart", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.collectionEnd.p, fieldName: "collectionEnd", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.centerTime.p, fieldName: "centerTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.detectionStart.p, fieldName: "detectionStart", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.detectionEnd.p, fieldName: "detectionEnd", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dwellTime.p, fieldName: "dwellTime", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.orbitState.p, fieldName: "orbitState", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sarMode.p, fieldName: "sarMode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.operatingBand.p, fieldName: "operatingBand", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.operatingFreq.p, fieldName: "operatingFreq", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.snr.p, fieldName: "snr", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.txPolarization.p, fieldName: "txPolarization", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rxPolarization.p, fieldName: "rxPolarization", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.grazeAngle.p, fieldName: "grazeAngle", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.incidenceAngle.p, fieldName: "incidenceAngle", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.squintAngle.p, fieldName: "squintAngle", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pulseBandwidth.p, fieldName: "pulseBandwidth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pulseDuration.p, fieldName: "pulseDuration", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.continuousSpotAngle.p, fieldName: "continuousSpotAngle", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.slantRange.p, fieldName: "slantRange", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.nearRange.p, fieldName: "nearRange", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.farRange.p, fieldName: "farRange", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.swathLength.p, fieldName: "swathLength", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.atext.p, fieldName: "atext", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.agjson.p, fieldName: "agjson", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.atype.p, fieldName: "atype", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.andims.p, fieldName: "andims", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.asrid.p, fieldName: "asrid", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.spacingRange.p, fieldName: "spacingRange", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.spacingAzimuth.p, fieldName: "spacingAzimuth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.looksAzimuth.p, fieldName: "looksAzimuth", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.looksRange.p, fieldName: "looksRange", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.resolutionRange.p, fieldName: "resolutionRange", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.resolutionAzimuth.p, fieldName: "resolutionAzimuth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.obDirection.p, fieldName: "obDirection", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.coordSys.p, fieldName: "coordSys", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.targetposx.p, fieldName: "targetposx", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.targetposy.p, fieldName: "targetposy", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.targetposz.p, fieldName: "targetposz", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senalt.p, fieldName: "senalt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senvelx.p, fieldName: "senvelx", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senvely.p, fieldName: "senvely", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senvelz.p, fieldName: "senvelz", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senlatStart.p, fieldName: "senlatStart", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senlonStart.p, fieldName: "senlonStart", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senlatEnd.p, fieldName: "senlatEnd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senlonEnd.p, fieldName: "senlonEnd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.transactionId.p, fieldName: "transactionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.srcTyps.p, fieldName: "srcTyps", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.srcIds.p, fieldName: "srcIds", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: SARObservation_Abridged_dataMode_Enum.self)
    _v.finish()
  }
}

