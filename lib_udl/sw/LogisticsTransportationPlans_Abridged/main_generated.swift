// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
public struct LogisticsTransportationPlans_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "LOGI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: LogisticsTransportationPlans_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case plansNumber = 4
    case missionChange = 6
    case planDefinition = 8
    case statusCode = 10
    case coordinator = 12
    case coordinatorUnit = 14
    case originIcao = 16
    case estDepTime = 18
    case estArrTime = 20
    case destinationIcao = 22
    case logisticMasterRecordId = 24
    case tpTailNumber = 26
    case tpAircraftMds = 28
    case majcom = 30
    case approxArrTime = 32
    case duration = 34
    case actDepTime = 36
    case closedDate = 38
    case cancelledDate = 40
    case aircraftStatus = 42
    case numEnrouteStops = 44
    case serialNumber = 46
    case numTransLoads = 48
    case lastChangedDate = 50
    case logisticsSegments = 52
    case logisticsTransportationPlansRemarks = 54
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
  ///  Example: /// Example: T89002
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var plansNumber: String? { let o = _accessor.offset(VTOFFSET.plansNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var plansNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.plansNumber.v) }
  ///  Indicates whether there have been changes to changes to ICAOs, estArrTime, or estDepTime since this Transportation Plan was last edited.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var missionChange: Bool { let o = _accessor.offset(VTOFFSET.missionChange.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Defines the transporation plan as either a deployment or redeployment.
  ///  Example: /// Example: DEPLOY
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var planDefinition: String? { let o = _accessor.offset(VTOFFSET.planDefinition.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var planDefinitionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.planDefinition.v) }
  ///  Transporation Coordination status code. Cancel, Send to APCC, working, agree, disapprove or blank.
  ///  Example: /// Example: N
  ///  Constraints: Minimum length = 1, Maximum length = 1
  public var statusCode: String? { let o = _accessor.offset(VTOFFSET.statusCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var statusCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.statusCode.v) }
  ///  The AMS username of the operator who alters the coordination status.  Automatically captured by the system.
  ///  Example: /// Example: SMITH, JOHN
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var coordinator: String? { let o = _accessor.offset(VTOFFSET.coordinator.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var coordinatorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.coordinator.v) }
  ///  The AMS user unit_id of the operator who alters the coordination status.  Automatically captured by the system from table AMS_USER.
  ///  Example: /// Example: TACC
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var coordinatorUnit: String? { let o = _accessor.offset(VTOFFSET.coordinatorUnit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var coordinatorUnitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.coordinatorUnit.v) }
  ///  The origin location.
  ///  Example: /// Example: KATL
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var originIcao: String? { let o = _accessor.offset(VTOFFSET.originIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.originIcao.v) }
  ///  ETD of the first segment, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-15T14:25:00.123Z
  ///  Constraints: No constraints specified.
  public var estDepTime: String? { let o = _accessor.offset(VTOFFSET.estDepTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var estDepTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.estDepTime.v) }
  ///  ETA of the final segment, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-15T14:25:00.123Z
  ///  Constraints: No constraints specified.
  public var estArrTime: String? { let o = _accessor.offset(VTOFFSET.estArrTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var estArrTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.estArrTime.v) }
  ///  Destination location ICAO.
  ///  Example: /// Example: YBCS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var destinationIcao: String? { let o = _accessor.offset(VTOFFSET.destinationIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var destinationIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.destinationIcao.v) }
  ///  The identifier that represents a Logistics Master Record.
  ///  Example: /// Example: L62126
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var logisticMasterRecordId: String? { let o = _accessor.offset(VTOFFSET.logisticMasterRecordId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var logisticMasterRecordIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.logisticMasterRecordId.v) }
  ///  Contains the tail number displayed by GDSS2.
  ///  Example: /// Example: 99209
  ///  Constraints: Minimum length = 0, Maximum length = 7
  public var tpTailNumber: String? { let o = _accessor.offset(VTOFFSET.tpTailNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tpTailNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tpTailNumber.v) }
  ///  The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  ///  Example: /// Example: C17A
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var tpAircraftMds: String? { let o = _accessor.offset(VTOFFSET.tpAircraftMds.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tpAircraftMdsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tpAircraftMds.v) }
  ///  The major command for the current unit.
  ///  Example: /// Example: HQAMC
  ///  Constraints: Minimum length = 0, Maximum length = 250
  public var majcom: String? { let o = _accessor.offset(VTOFFSET.majcom.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var majcomSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.majcom.v) }
  ///  Approximate time of arrival of final segement, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-14T20:37:00.123Z
  ///  Constraints: No constraints specified.
  public var approxArrTime: String? { let o = _accessor.offset(VTOFFSET.approxArrTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var approxArrTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.approxArrTime.v) }
  ///  Transportation plan duration, expressed in the format MMM:SS.
  ///  Example: /// Example: 086:20
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var duration: String? { let o = _accessor.offset(VTOFFSET.duration.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var durationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.duration.v) }
  ///  Actual time of departure of first segment, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-14T19:37:00.123Z
  ///  Constraints: No constraints specified.
  public var actDepTime: String? { let o = _accessor.offset(VTOFFSET.actDepTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actDepTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.actDepTime.v) }
  ///  GC. LGTP_CLSD_DT.  GD2:  Date when the transportation plan was closed, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-14T20:37:00.123Z
  ///  Constraints: No constraints specified.
  public var closedDate: String? { let o = _accessor.offset(VTOFFSET.closedDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var closedDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.closedDate.v) }
  ///  GC. LGTP_CANX_DT.  GD2: Date when the transportation plan was cancelled, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-14T20:37:00.123Z
  ///  Constraints: No constraints specified.
  public var cancelledDate: String? { let o = _accessor.offset(VTOFFSET.cancelledDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cancelledDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cancelledDate.v) }
  ///  These are the initial maintenance values entered based on the pilot descriptions or the official maintenance evaluation code.
  ///  Example: /// Example: NMCMU
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var aircraftStatus: String? { let o = _accessor.offset(VTOFFSET.aircraftStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aircraftStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aircraftStatus.v) }
  ///  Transportation plan enroute stops.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  public var numEnrouteStops: Int32 { let o = _accessor.offset(VTOFFSET.numEnrouteStops.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  GDSS2 uses an 8 character serial number to uniquely identify the aircraft and MDS combination. This is a portion of the full manufacturer serial number.
  ///  Example: /// Example: 9009209
  ///  Constraints: Minimum length = 0, Maximum length = 30
  public var serialNumber: String? { let o = _accessor.offset(VTOFFSET.serialNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var serialNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.serialNumber.v) }
  ///  The number of transloads for this Transportation Plan.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var numTransLoads: Int32 { let o = _accessor.offset(VTOFFSET.numTransLoads.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Last time transportation plan was updated, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-14T20:37:00.123Z
  ///  Constraints: No constraints specified.
  public var lastChangedDate: String? { let o = _accessor.offset(VTOFFSET.lastChangedDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastChangedDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastChangedDate.v) }
  ///  The transportation segments associated with this transportation plan.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasLogisticsSegments: Bool { let o = _accessor.offset(VTOFFSET.logisticsSegments.v); return o == 0 ? false : true }
  public var logisticsSegmentsCount: Int32 { let o = _accessor.offset(VTOFFSET.logisticsSegments.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func logisticsSegments(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.logisticsSegments.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Remarks associated with this transportation plan.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasLogisticsTransportationPlansRemarks: Bool { let o = _accessor.offset(VTOFFSET.logisticsTransportationPlansRemarks.v); return o == 0 ? false : true }
  public var logisticsTransportationPlansRemarksCount: Int32 { let o = _accessor.offset(VTOFFSET.logisticsTransportationPlansRemarks.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func logisticsTransportationPlansRemarks(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.logisticsTransportationPlansRemarks.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startLogisticsTransportationPlans_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 26) }
  public static func add(plansNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: plansNumber, at: VTOFFSET.plansNumber.p) }
  public static func add(missionChange: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: missionChange, def: false,
   at: VTOFFSET.missionChange.p) }
  public static func add(planDefinition: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: planDefinition, at: VTOFFSET.planDefinition.p) }
  public static func add(statusCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: statusCode, at: VTOFFSET.statusCode.p) }
  public static func add(coordinator: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: coordinator, at: VTOFFSET.coordinator.p) }
  public static func add(coordinatorUnit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: coordinatorUnit, at: VTOFFSET.coordinatorUnit.p) }
  public static func add(originIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: originIcao, at: VTOFFSET.originIcao.p) }
  public static func add(estDepTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: estDepTime, at: VTOFFSET.estDepTime.p) }
  public static func add(estArrTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: estArrTime, at: VTOFFSET.estArrTime.p) }
  public static func add(destinationIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: destinationIcao, at: VTOFFSET.destinationIcao.p) }
  public static func add(logisticMasterRecordId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: logisticMasterRecordId, at: VTOFFSET.logisticMasterRecordId.p) }
  public static func add(tpTailNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tpTailNumber, at: VTOFFSET.tpTailNumber.p) }
  public static func add(tpAircraftMds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tpAircraftMds, at: VTOFFSET.tpAircraftMds.p) }
  public static func add(majcom: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: majcom, at: VTOFFSET.majcom.p) }
  public static func add(approxArrTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: approxArrTime, at: VTOFFSET.approxArrTime.p) }
  public static func add(duration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: duration, at: VTOFFSET.duration.p) }
  public static func add(actDepTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actDepTime, at: VTOFFSET.actDepTime.p) }
  public static func add(closedDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: closedDate, at: VTOFFSET.closedDate.p) }
  public static func add(cancelledDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cancelledDate, at: VTOFFSET.cancelledDate.p) }
  public static func add(aircraftStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aircraftStatus, at: VTOFFSET.aircraftStatus.p) }
  public static func add(numEnrouteStops: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numEnrouteStops, def: 0, at: VTOFFSET.numEnrouteStops.p) }
  public static func add(serialNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: serialNumber, at: VTOFFSET.serialNumber.p) }
  public static func add(numTransLoads: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numTransLoads, def: 0, at: VTOFFSET.numTransLoads.p) }
  public static func add(lastChangedDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastChangedDate, at: VTOFFSET.lastChangedDate.p) }
  public static func addVectorOf(logisticsSegments: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: logisticsSegments, at: VTOFFSET.logisticsSegments.p) }
  public static func addVectorOf(logisticsTransportationPlansRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: logisticsTransportationPlansRemarks, at: VTOFFSET.logisticsTransportationPlansRemarks.p) }
  public static func endLogisticsTransportationPlans_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createLogisticsTransportationPlans_Abridged(
    _ fbb: inout FlatBufferBuilder,
    plansNumberOffset plansNumber: Offset = Offset(),
    missionChange: Bool = false,
    planDefinitionOffset planDefinition: Offset = Offset(),
    statusCodeOffset statusCode: Offset = Offset(),
    coordinatorOffset coordinator: Offset = Offset(),
    coordinatorUnitOffset coordinatorUnit: Offset = Offset(),
    originIcaoOffset originIcao: Offset = Offset(),
    estDepTimeOffset estDepTime: Offset = Offset(),
    estArrTimeOffset estArrTime: Offset = Offset(),
    destinationIcaoOffset destinationIcao: Offset = Offset(),
    logisticMasterRecordIdOffset logisticMasterRecordId: Offset = Offset(),
    tpTailNumberOffset tpTailNumber: Offset = Offset(),
    tpAircraftMdsOffset tpAircraftMds: Offset = Offset(),
    majcomOffset majcom: Offset = Offset(),
    approxArrTimeOffset approxArrTime: Offset = Offset(),
    durationOffset duration: Offset = Offset(),
    actDepTimeOffset actDepTime: Offset = Offset(),
    closedDateOffset closedDate: Offset = Offset(),
    cancelledDateOffset cancelledDate: Offset = Offset(),
    aircraftStatusOffset aircraftStatus: Offset = Offset(),
    numEnrouteStops: Int32 = 0,
    serialNumberOffset serialNumber: Offset = Offset(),
    numTransLoads: Int32 = 0,
    lastChangedDateOffset lastChangedDate: Offset = Offset(),
    logisticsSegmentsVectorOffset logisticsSegments: Offset = Offset(),
    logisticsTransportationPlansRemarksVectorOffset logisticsTransportationPlansRemarks: Offset = Offset()
  ) -> Offset {
    let __start = LogisticsTransportationPlans_Abridged.startLogisticsTransportationPlans_Abridged(&fbb)
    LogisticsTransportationPlans_Abridged.add(plansNumber: plansNumber, &fbb)
    LogisticsTransportationPlans_Abridged.add(missionChange: missionChange, &fbb)
    LogisticsTransportationPlans_Abridged.add(planDefinition: planDefinition, &fbb)
    LogisticsTransportationPlans_Abridged.add(statusCode: statusCode, &fbb)
    LogisticsTransportationPlans_Abridged.add(coordinator: coordinator, &fbb)
    LogisticsTransportationPlans_Abridged.add(coordinatorUnit: coordinatorUnit, &fbb)
    LogisticsTransportationPlans_Abridged.add(originIcao: originIcao, &fbb)
    LogisticsTransportationPlans_Abridged.add(estDepTime: estDepTime, &fbb)
    LogisticsTransportationPlans_Abridged.add(estArrTime: estArrTime, &fbb)
    LogisticsTransportationPlans_Abridged.add(destinationIcao: destinationIcao, &fbb)
    LogisticsTransportationPlans_Abridged.add(logisticMasterRecordId: logisticMasterRecordId, &fbb)
    LogisticsTransportationPlans_Abridged.add(tpTailNumber: tpTailNumber, &fbb)
    LogisticsTransportationPlans_Abridged.add(tpAircraftMds: tpAircraftMds, &fbb)
    LogisticsTransportationPlans_Abridged.add(majcom: majcom, &fbb)
    LogisticsTransportationPlans_Abridged.add(approxArrTime: approxArrTime, &fbb)
    LogisticsTransportationPlans_Abridged.add(duration: duration, &fbb)
    LogisticsTransportationPlans_Abridged.add(actDepTime: actDepTime, &fbb)
    LogisticsTransportationPlans_Abridged.add(closedDate: closedDate, &fbb)
    LogisticsTransportationPlans_Abridged.add(cancelledDate: cancelledDate, &fbb)
    LogisticsTransportationPlans_Abridged.add(aircraftStatus: aircraftStatus, &fbb)
    LogisticsTransportationPlans_Abridged.add(numEnrouteStops: numEnrouteStops, &fbb)
    LogisticsTransportationPlans_Abridged.add(serialNumber: serialNumber, &fbb)
    LogisticsTransportationPlans_Abridged.add(numTransLoads: numTransLoads, &fbb)
    LogisticsTransportationPlans_Abridged.add(lastChangedDate: lastChangedDate, &fbb)
    LogisticsTransportationPlans_Abridged.addVectorOf(logisticsSegments: logisticsSegments, &fbb)
    LogisticsTransportationPlans_Abridged.addVectorOf(logisticsTransportationPlansRemarks: logisticsTransportationPlansRemarks, &fbb)
    return LogisticsTransportationPlans_Abridged.endLogisticsTransportationPlans_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.plansNumber.p, fieldName: "plansNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.missionChange.p, fieldName: "missionChange", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.planDefinition.p, fieldName: "planDefinition", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.statusCode.p, fieldName: "statusCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.coordinator.p, fieldName: "coordinator", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.coordinatorUnit.p, fieldName: "coordinatorUnit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.originIcao.p, fieldName: "originIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.estDepTime.p, fieldName: "estDepTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.estArrTime.p, fieldName: "estArrTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.destinationIcao.p, fieldName: "destinationIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.logisticMasterRecordId.p, fieldName: "logisticMasterRecordId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tpTailNumber.p, fieldName: "tpTailNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tpAircraftMds.p, fieldName: "tpAircraftMds", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.majcom.p, fieldName: "majcom", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.approxArrTime.p, fieldName: "approxArrTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.duration.p, fieldName: "duration", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.actDepTime.p, fieldName: "actDepTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.closedDate.p, fieldName: "closedDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cancelledDate.p, fieldName: "cancelledDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aircraftStatus.p, fieldName: "aircraftStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numEnrouteStops.p, fieldName: "numEnrouteStops", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.serialNumber.p, fieldName: "serialNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numTransLoads.p, fieldName: "numTransLoads", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.lastChangedDate.p, fieldName: "lastChangedDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.logisticsSegments.p, fieldName: "logisticsSegments", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.logisticsTransportationPlansRemarks.p, fieldName: "logisticsTransportationPlansRemarks", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

