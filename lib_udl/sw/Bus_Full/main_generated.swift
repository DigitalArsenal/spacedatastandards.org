// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Bus_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Bus_Full_dataMode_Enum { return .exercise }
  public static var min: Bus_Full_dataMode_Enum { return .real }
}


///  /// A bus is the physical and software infrastructure backbone to which on-orbit satellite payloads are attached for power, control, and other support functions.
public struct Bus_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "BUSF" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Bus_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case name = 6
    case classificationMarking = 8
    case idEntity = 10
    case type = 12
    case maxLaunchMassLower = 14
    case maxLaunchMassUpper = 16
    case maxBolstationMass = 18
    case avgPayloadMass = 20
    case maxPayloadMass = 22
    case minDryMass = 24
    case avgDryMass = 26
    case medianDryMass = 28
    case maxDryMass = 30
    case minWetMass = 32
    case avgWetMass = 34
    case medianWetMass = 36
    case maxWetMass = 38
    case maxBolpowerLower = 40
    case maxBolpowerUpper = 42
    case maxEolpowerLower = 44
    case maxEolpowerUpper = 46
    case avgSpacecraftPower = 48
    case maxSpacecraftPower = 50
    case oapSpacecraftPower = 52
    case avgPayloadPower = 54
    case maxPayloadPower = 56
    case oapPayloadPower = 58
    case bodyDimensionX = 60
    case bodyDimensionY = 62
    case bodyDimensionZ = 64
    case payloadDimensionX = 66
    case payloadDimensionY = 68
    case payloadDimensionZ = 70
    case payloadVolume = 72
    case launchEnvelopeDimensionX = 74
    case launchEnvelopeDimensionY = 76
    case launchEnvelopeDimensionZ = 78
    case numOrbitType = 80
    case orbitTypes = 82
    case telemetryTrackingManufacturerOrgId = 84
    case mainComputerManufacturerOrgId = 86
    case manufacturerOrgId = 88
    case busKitDesignerOrgId = 90
    case countryCode = 92
    case massCategory = 94
    case powerCategory = 96
    case generic = 98
    case description = 100
    case aocsNotes = 102
    case source = 104
    case origin = 106
    case origNetwork = 108
    case dataMode = 110
    case createdAt = 112
    case createdBy = 114
    case updatedAt = 116
    case updatedBy = 118
    case entity = 120
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: BUS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Name of this bus.
  ///  Example: /// Example: Example name
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  ID of the parent entity for this bus.
  ///  Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idEntity: String? { let o = _accessor.offset(VTOFFSET.idEntity.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idEntitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idEntity.v) }
  ///  Type of this bus.
  ///  Example: /// Example: Example type
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Maximum mass at launch, lower bounds, in kilograms.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var maxLaunchMassLower: Double { let o = _accessor.offset(VTOFFSET.maxLaunchMassLower.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum mass at launch, upper bounds, in kilograms.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var maxLaunchMassUpper: Double { let o = _accessor.offset(VTOFFSET.maxLaunchMassUpper.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum mass on station at beginning of life, in kilograms.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var maxBolstationMass: Double { let o = _accessor.offset(VTOFFSET.maxBolstationMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average mass available on this bus for payloads, in kilograms.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var avgPayloadMass: Double { let o = _accessor.offset(VTOFFSET.avgPayloadMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum payload mass available, in kilograms.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var maxPayloadMass: Double { let o = _accessor.offset(VTOFFSET.maxPayloadMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Minimum mass of this bus without payloads or fuel, in kilograms.
  ///  Example: /// Example: 2858.1
  ///  Constraints: No constraints specified.
  public var minDryMass: Double { let o = _accessor.offset(VTOFFSET.minDryMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average mass of this bus without payloads or fuel, in kilograms.
  ///  Example: /// Example: 2879.1
  ///  Constraints: No constraints specified.
  public var avgDryMass: Double { let o = _accessor.offset(VTOFFSET.avgDryMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Median mass of this bus without payloads or fuel, in kilograms.
  ///  Example: /// Example: 2950.1
  ///  Constraints: No constraints specified.
  public var medianDryMass: Double { let o = _accessor.offset(VTOFFSET.medianDryMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum mass of this bus without payloads or fuel, in kilograms.
  ///  Example: /// Example: 2900.1
  ///  Constraints: No constraints specified.
  public var maxDryMass: Double { let o = _accessor.offset(VTOFFSET.maxDryMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Minimum mass of this bus with fuel, but without payloads, in kilograms.
  ///  Example: /// Example: 5192.1
  ///  Constraints: No constraints specified.
  public var minWetMass: Double { let o = _accessor.offset(VTOFFSET.minWetMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average mass of this bus with fuel, but without payloads, in kilograms.
  ///  Example: /// Example: 5246.1
  ///  Constraints: No constraints specified.
  public var avgWetMass: Double { let o = _accessor.offset(VTOFFSET.avgWetMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Median mass of this bus with fuel, but without payloads, in kilograms.
  ///  Example: /// Example: 5260.1
  ///  Constraints: No constraints specified.
  public var medianWetMass: Double { let o = _accessor.offset(VTOFFSET.medianWetMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum mass of this bus with fuel, but without payloads, in kilograms.
  ///  Example: /// Example: 5300.0
  ///  Constraints: No constraints specified.
  public var maxWetMass: Double { let o = _accessor.offset(VTOFFSET.maxWetMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum power at beginning of life, lower bounds, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var maxBolpowerLower: Double { let o = _accessor.offset(VTOFFSET.maxBolpowerLower.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum power at beginning of life, upper bounds, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var maxBolpowerUpper: Double { let o = _accessor.offset(VTOFFSET.maxBolpowerUpper.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum power at end of life, lower bounds, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var maxEolpowerLower: Double { let o = _accessor.offset(VTOFFSET.maxEolpowerLower.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum power at end of life, upper bounds, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var maxEolpowerUpper: Double { let o = _accessor.offset(VTOFFSET.maxEolpowerUpper.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average power available on this bus, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var avgSpacecraftPower: Double { let o = _accessor.offset(VTOFFSET.avgSpacecraftPower.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum power available on this bus, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var maxSpacecraftPower: Double { let o = _accessor.offset(VTOFFSET.maxSpacecraftPower.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Orbit averaged power (the power averaged over one orbit) available on this bus, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var oapSpacecraftPower: Double { let o = _accessor.offset(VTOFFSET.oapSpacecraftPower.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average power available on this bus for payloads, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var avgPayloadPower: Double { let o = _accessor.offset(VTOFFSET.avgPayloadPower.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum payload power available, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var maxPayloadPower: Double { let o = _accessor.offset(VTOFFSET.maxPayloadPower.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Orbit averaged power (the power averaged over one orbit) available on this bus for payloads, in kilowatts.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var oapPayloadPower: Double { let o = _accessor.offset(VTOFFSET.oapPayloadPower.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Body dimension in X direction pertaining to length, in meters.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var bodyDimensionX: Double { let o = _accessor.offset(VTOFFSET.bodyDimensionX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Body dimension in Y direction pertaining to height, in meters.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var bodyDimensionY: Double { let o = _accessor.offset(VTOFFSET.bodyDimensionY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Body dimension in Z direction pertaining to width, in meters.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var bodyDimensionZ: Double { let o = _accessor.offset(VTOFFSET.bodyDimensionZ.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The radial dimension available on this bus for payloads, in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var payloadDimensionX: Double { let o = _accessor.offset(VTOFFSET.payloadDimensionX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The in-track dimension available on this bus for payloads, in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var payloadDimensionY: Double { let o = _accessor.offset(VTOFFSET.payloadDimensionY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The cross-track dimension available on this bus for payloads, in meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var payloadDimensionZ: Double { let o = _accessor.offset(VTOFFSET.payloadDimensionZ.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The volume available on this bus for payloads, in cubic meters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var payloadVolume: Double { let o = _accessor.offset(VTOFFSET.payloadVolume.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Launch envelope dimension in X direction, in meters.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var launchEnvelopeDimensionX: Double { let o = _accessor.offset(VTOFFSET.launchEnvelopeDimensionX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Launch envelope dimension in Y direction, in meters.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var launchEnvelopeDimensionY: Double { let o = _accessor.offset(VTOFFSET.launchEnvelopeDimensionY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Launch envelope dimension in Z direction, in meters.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var launchEnvelopeDimensionZ: Double { let o = _accessor.offset(VTOFFSET.launchEnvelopeDimensionZ.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The number of orbit types this bus can support.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var numOrbitType: Int32 { let o = _accessor.offset(VTOFFSET.numOrbitType.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of orbit types this bus can support (e.g. GEO, LEO, etc.). Must contain the same number of elements as the value of numOrbitType.
  ///  Example: /// Example: ['LEO', 'HEO', 'GEO']
  ///  Constraints: No constraints specified.
  public var hasOrbitTypes: Bool { let o = _accessor.offset(VTOFFSET.orbitTypes.v); return o == 0 ? false : true }
  public var orbitTypesCount: Int32 { let o = _accessor.offset(VTOFFSET.orbitTypes.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func orbitTypes(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.orbitTypes.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Unique identifier of the organization which manufactures the telemetry tracking and command subsystem for this bus.
  ///  Example: /// Example: TELEMETRYTRACKINGMANUFACTURERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var telemetryTrackingManufacturerOrgId: String? { let o = _accessor.offset(VTOFFSET.telemetryTrackingManufacturerOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var telemetryTrackingManufacturerOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.telemetryTrackingManufacturerOrgId.v) }
  ///  Unique identifier of the organization which manufactures the main onboard computer for this bus.
  ///  Example: /// Example: MAINCOMPUTERMANUFACTURERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var mainComputerManufacturerOrgId: String? { let o = _accessor.offset(VTOFFSET.mainComputerManufacturerOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var mainComputerManufacturerOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.mainComputerManufacturerOrgId.v) }
  ///  Unique identifier of the organization which manufactures this bus.
  ///  Example: /// Example: MANUFACTURERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var manufacturerOrgId: String? { let o = _accessor.offset(VTOFFSET.manufacturerOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var manufacturerOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.manufacturerOrgId.v) }
  ///  Unique identifier of the organization which designs the bus kit.
  ///  Example: /// Example: BUSKITDESIGNERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var busKitDesignerOrgId: String? { let o = _accessor.offset(VTOFFSET.busKitDesignerOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var busKitDesignerOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.busKitDesignerOrgId.v) }
  ///  Country where this bus was manufactured. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var countryCode: String? { let o = _accessor.offset(VTOFFSET.countryCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var countryCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.countryCode.v) }
  ///  Mass category of this bus (e.g. 1 - 10 kg: Nanosatellite, 10 - 100 kg: Microsatellite, 100 - 500 kg: Minisatellite, 1000 - 2500kg: Medium satellite, etc.).
  ///  Example: /// Example: Nanosatellite
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var massCategory: String? { let o = _accessor.offset(VTOFFSET.massCategory.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var massCategorySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.massCategory.v) }
  ///  Power category of this bus (e.g. 0-1kW low power, etc).
  ///  Example: /// Example: low power
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var powerCategory: String? { let o = _accessor.offset(VTOFFSET.powerCategory.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var powerCategorySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.powerCategory.v) }
  ///  Boolean indicating if this bus is generic.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var generic: Bool { let o = _accessor.offset(VTOFFSET.generic.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Notes/description of the bus.
  ///  Example: /// Example: Dedicated small spacecraft bus.
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var description: String? { let o = _accessor.offset(VTOFFSET.description.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.description.v) }
  ///  Attitude and Orbital Control Notes/description for the bus.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var aocsNotes: String? { let o = _accessor.offset(VTOFFSET.aocsNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aocsNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aocsNotes.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Bus_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Bus_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var entity: String? { let o = _accessor.offset(VTOFFSET.entity.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var entitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.entity.v) }
  public static func startBus_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 59) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idEntity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idEntity, at: VTOFFSET.idEntity.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(maxLaunchMassLower: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxLaunchMassLower, def: 0.0, at: VTOFFSET.maxLaunchMassLower.p) }
  public static func add(maxLaunchMassUpper: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxLaunchMassUpper, def: 0.0, at: VTOFFSET.maxLaunchMassUpper.p) }
  public static func add(maxBolstationMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxBolstationMass, def: 0.0, at: VTOFFSET.maxBolstationMass.p) }
  public static func add(avgPayloadMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgPayloadMass, def: 0.0, at: VTOFFSET.avgPayloadMass.p) }
  public static func add(maxPayloadMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxPayloadMass, def: 0.0, at: VTOFFSET.maxPayloadMass.p) }
  public static func add(minDryMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: minDryMass, def: 0.0, at: VTOFFSET.minDryMass.p) }
  public static func add(avgDryMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgDryMass, def: 0.0, at: VTOFFSET.avgDryMass.p) }
  public static func add(medianDryMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: medianDryMass, def: 0.0, at: VTOFFSET.medianDryMass.p) }
  public static func add(maxDryMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxDryMass, def: 0.0, at: VTOFFSET.maxDryMass.p) }
  public static func add(minWetMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: minWetMass, def: 0.0, at: VTOFFSET.minWetMass.p) }
  public static func add(avgWetMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgWetMass, def: 0.0, at: VTOFFSET.avgWetMass.p) }
  public static func add(medianWetMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: medianWetMass, def: 0.0, at: VTOFFSET.medianWetMass.p) }
  public static func add(maxWetMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxWetMass, def: 0.0, at: VTOFFSET.maxWetMass.p) }
  public static func add(maxBolpowerLower: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxBolpowerLower, def: 0.0, at: VTOFFSET.maxBolpowerLower.p) }
  public static func add(maxBolpowerUpper: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxBolpowerUpper, def: 0.0, at: VTOFFSET.maxBolpowerUpper.p) }
  public static func add(maxEolpowerLower: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxEolpowerLower, def: 0.0, at: VTOFFSET.maxEolpowerLower.p) }
  public static func add(maxEolpowerUpper: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxEolpowerUpper, def: 0.0, at: VTOFFSET.maxEolpowerUpper.p) }
  public static func add(avgSpacecraftPower: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgSpacecraftPower, def: 0.0, at: VTOFFSET.avgSpacecraftPower.p) }
  public static func add(maxSpacecraftPower: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxSpacecraftPower, def: 0.0, at: VTOFFSET.maxSpacecraftPower.p) }
  public static func add(oapSpacecraftPower: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: oapSpacecraftPower, def: 0.0, at: VTOFFSET.oapSpacecraftPower.p) }
  public static func add(avgPayloadPower: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgPayloadPower, def: 0.0, at: VTOFFSET.avgPayloadPower.p) }
  public static func add(maxPayloadPower: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxPayloadPower, def: 0.0, at: VTOFFSET.maxPayloadPower.p) }
  public static func add(oapPayloadPower: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: oapPayloadPower, def: 0.0, at: VTOFFSET.oapPayloadPower.p) }
  public static func add(bodyDimensionX: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bodyDimensionX, def: 0.0, at: VTOFFSET.bodyDimensionX.p) }
  public static func add(bodyDimensionY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bodyDimensionY, def: 0.0, at: VTOFFSET.bodyDimensionY.p) }
  public static func add(bodyDimensionZ: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bodyDimensionZ, def: 0.0, at: VTOFFSET.bodyDimensionZ.p) }
  public static func add(payloadDimensionX: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: payloadDimensionX, def: 0.0, at: VTOFFSET.payloadDimensionX.p) }
  public static func add(payloadDimensionY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: payloadDimensionY, def: 0.0, at: VTOFFSET.payloadDimensionY.p) }
  public static func add(payloadDimensionZ: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: payloadDimensionZ, def: 0.0, at: VTOFFSET.payloadDimensionZ.p) }
  public static func add(payloadVolume: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: payloadVolume, def: 0.0, at: VTOFFSET.payloadVolume.p) }
  public static func add(launchEnvelopeDimensionX: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: launchEnvelopeDimensionX, def: 0.0, at: VTOFFSET.launchEnvelopeDimensionX.p) }
  public static func add(launchEnvelopeDimensionY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: launchEnvelopeDimensionY, def: 0.0, at: VTOFFSET.launchEnvelopeDimensionY.p) }
  public static func add(launchEnvelopeDimensionZ: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: launchEnvelopeDimensionZ, def: 0.0, at: VTOFFSET.launchEnvelopeDimensionZ.p) }
  public static func add(numOrbitType: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numOrbitType, def: 0, at: VTOFFSET.numOrbitType.p) }
  public static func addVectorOf(orbitTypes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: orbitTypes, at: VTOFFSET.orbitTypes.p) }
  public static func add(telemetryTrackingManufacturerOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: telemetryTrackingManufacturerOrgId, at: VTOFFSET.telemetryTrackingManufacturerOrgId.p) }
  public static func add(mainComputerManufacturerOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mainComputerManufacturerOrgId, at: VTOFFSET.mainComputerManufacturerOrgId.p) }
  public static func add(manufacturerOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: manufacturerOrgId, at: VTOFFSET.manufacturerOrgId.p) }
  public static func add(busKitDesignerOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: busKitDesignerOrgId, at: VTOFFSET.busKitDesignerOrgId.p) }
  public static func add(countryCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: countryCode, at: VTOFFSET.countryCode.p) }
  public static func add(massCategory: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: massCategory, at: VTOFFSET.massCategory.p) }
  public static func add(powerCategory: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: powerCategory, at: VTOFFSET.powerCategory.p) }
  public static func add(generic: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: generic, def: false,
   at: VTOFFSET.generic.p) }
  public static func add(description: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: description, at: VTOFFSET.description.p) }
  public static func add(aocsNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aocsNotes, at: VTOFFSET.aocsNotes.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: Bus_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(entity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: entity, at: VTOFFSET.entity.p) }
  public static func endBus_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createBus_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idEntityOffset idEntity: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    maxLaunchMassLower: Double = 0.0,
    maxLaunchMassUpper: Double = 0.0,
    maxBolstationMass: Double = 0.0,
    avgPayloadMass: Double = 0.0,
    maxPayloadMass: Double = 0.0,
    minDryMass: Double = 0.0,
    avgDryMass: Double = 0.0,
    medianDryMass: Double = 0.0,
    maxDryMass: Double = 0.0,
    minWetMass: Double = 0.0,
    avgWetMass: Double = 0.0,
    medianWetMass: Double = 0.0,
    maxWetMass: Double = 0.0,
    maxBolpowerLower: Double = 0.0,
    maxBolpowerUpper: Double = 0.0,
    maxEolpowerLower: Double = 0.0,
    maxEolpowerUpper: Double = 0.0,
    avgSpacecraftPower: Double = 0.0,
    maxSpacecraftPower: Double = 0.0,
    oapSpacecraftPower: Double = 0.0,
    avgPayloadPower: Double = 0.0,
    maxPayloadPower: Double = 0.0,
    oapPayloadPower: Double = 0.0,
    bodyDimensionX: Double = 0.0,
    bodyDimensionY: Double = 0.0,
    bodyDimensionZ: Double = 0.0,
    payloadDimensionX: Double = 0.0,
    payloadDimensionY: Double = 0.0,
    payloadDimensionZ: Double = 0.0,
    payloadVolume: Double = 0.0,
    launchEnvelopeDimensionX: Double = 0.0,
    launchEnvelopeDimensionY: Double = 0.0,
    launchEnvelopeDimensionZ: Double = 0.0,
    numOrbitType: Int32 = 0,
    orbitTypesVectorOffset orbitTypes: Offset = Offset(),
    telemetryTrackingManufacturerOrgIdOffset telemetryTrackingManufacturerOrgId: Offset = Offset(),
    mainComputerManufacturerOrgIdOffset mainComputerManufacturerOrgId: Offset = Offset(),
    manufacturerOrgIdOffset manufacturerOrgId: Offset = Offset(),
    busKitDesignerOrgIdOffset busKitDesignerOrgId: Offset = Offset(),
    countryCodeOffset countryCode: Offset = Offset(),
    massCategoryOffset massCategory: Offset = Offset(),
    powerCategoryOffset powerCategory: Offset = Offset(),
    generic: Bool = false,
    descriptionOffset description: Offset = Offset(),
    aocsNotesOffset aocsNotes: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: Bus_Full_dataMode_Enum = .real,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    entityOffset entity: Offset = Offset()
  ) -> Offset {
    let __start = Bus_Full.startBus_Full(&fbb)
    Bus_Full.add(id: id, &fbb)
    Bus_Full.add(name: name, &fbb)
    Bus_Full.add(classificationMarking: classificationMarking, &fbb)
    Bus_Full.add(idEntity: idEntity, &fbb)
    Bus_Full.add(type: type, &fbb)
    Bus_Full.add(maxLaunchMassLower: maxLaunchMassLower, &fbb)
    Bus_Full.add(maxLaunchMassUpper: maxLaunchMassUpper, &fbb)
    Bus_Full.add(maxBolstationMass: maxBolstationMass, &fbb)
    Bus_Full.add(avgPayloadMass: avgPayloadMass, &fbb)
    Bus_Full.add(maxPayloadMass: maxPayloadMass, &fbb)
    Bus_Full.add(minDryMass: minDryMass, &fbb)
    Bus_Full.add(avgDryMass: avgDryMass, &fbb)
    Bus_Full.add(medianDryMass: medianDryMass, &fbb)
    Bus_Full.add(maxDryMass: maxDryMass, &fbb)
    Bus_Full.add(minWetMass: minWetMass, &fbb)
    Bus_Full.add(avgWetMass: avgWetMass, &fbb)
    Bus_Full.add(medianWetMass: medianWetMass, &fbb)
    Bus_Full.add(maxWetMass: maxWetMass, &fbb)
    Bus_Full.add(maxBolpowerLower: maxBolpowerLower, &fbb)
    Bus_Full.add(maxBolpowerUpper: maxBolpowerUpper, &fbb)
    Bus_Full.add(maxEolpowerLower: maxEolpowerLower, &fbb)
    Bus_Full.add(maxEolpowerUpper: maxEolpowerUpper, &fbb)
    Bus_Full.add(avgSpacecraftPower: avgSpacecraftPower, &fbb)
    Bus_Full.add(maxSpacecraftPower: maxSpacecraftPower, &fbb)
    Bus_Full.add(oapSpacecraftPower: oapSpacecraftPower, &fbb)
    Bus_Full.add(avgPayloadPower: avgPayloadPower, &fbb)
    Bus_Full.add(maxPayloadPower: maxPayloadPower, &fbb)
    Bus_Full.add(oapPayloadPower: oapPayloadPower, &fbb)
    Bus_Full.add(bodyDimensionX: bodyDimensionX, &fbb)
    Bus_Full.add(bodyDimensionY: bodyDimensionY, &fbb)
    Bus_Full.add(bodyDimensionZ: bodyDimensionZ, &fbb)
    Bus_Full.add(payloadDimensionX: payloadDimensionX, &fbb)
    Bus_Full.add(payloadDimensionY: payloadDimensionY, &fbb)
    Bus_Full.add(payloadDimensionZ: payloadDimensionZ, &fbb)
    Bus_Full.add(payloadVolume: payloadVolume, &fbb)
    Bus_Full.add(launchEnvelopeDimensionX: launchEnvelopeDimensionX, &fbb)
    Bus_Full.add(launchEnvelopeDimensionY: launchEnvelopeDimensionY, &fbb)
    Bus_Full.add(launchEnvelopeDimensionZ: launchEnvelopeDimensionZ, &fbb)
    Bus_Full.add(numOrbitType: numOrbitType, &fbb)
    Bus_Full.addVectorOf(orbitTypes: orbitTypes, &fbb)
    Bus_Full.add(telemetryTrackingManufacturerOrgId: telemetryTrackingManufacturerOrgId, &fbb)
    Bus_Full.add(mainComputerManufacturerOrgId: mainComputerManufacturerOrgId, &fbb)
    Bus_Full.add(manufacturerOrgId: manufacturerOrgId, &fbb)
    Bus_Full.add(busKitDesignerOrgId: busKitDesignerOrgId, &fbb)
    Bus_Full.add(countryCode: countryCode, &fbb)
    Bus_Full.add(massCategory: massCategory, &fbb)
    Bus_Full.add(powerCategory: powerCategory, &fbb)
    Bus_Full.add(generic: generic, &fbb)
    Bus_Full.add(description: description, &fbb)
    Bus_Full.add(aocsNotes: aocsNotes, &fbb)
    Bus_Full.add(source: source, &fbb)
    Bus_Full.add(origin: origin, &fbb)
    Bus_Full.add(origNetwork: origNetwork, &fbb)
    Bus_Full.add(dataMode: dataMode, &fbb)
    Bus_Full.add(createdAt: createdAt, &fbb)
    Bus_Full.add(createdBy: createdBy, &fbb)
    Bus_Full.add(updatedAt: updatedAt, &fbb)
    Bus_Full.add(updatedBy: updatedBy, &fbb)
    Bus_Full.add(entity: entity, &fbb)
    return Bus_Full.endBus_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idEntity.p, fieldName: "idEntity", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.maxLaunchMassLower.p, fieldName: "maxLaunchMassLower", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxLaunchMassUpper.p, fieldName: "maxLaunchMassUpper", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxBolstationMass.p, fieldName: "maxBolstationMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgPayloadMass.p, fieldName: "avgPayloadMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxPayloadMass.p, fieldName: "maxPayloadMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.minDryMass.p, fieldName: "minDryMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgDryMass.p, fieldName: "avgDryMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.medianDryMass.p, fieldName: "medianDryMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxDryMass.p, fieldName: "maxDryMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.minWetMass.p, fieldName: "minWetMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgWetMass.p, fieldName: "avgWetMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.medianWetMass.p, fieldName: "medianWetMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxWetMass.p, fieldName: "maxWetMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxBolpowerLower.p, fieldName: "maxBolpowerLower", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxBolpowerUpper.p, fieldName: "maxBolpowerUpper", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxEolpowerLower.p, fieldName: "maxEolpowerLower", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxEolpowerUpper.p, fieldName: "maxEolpowerUpper", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgSpacecraftPower.p, fieldName: "avgSpacecraftPower", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxSpacecraftPower.p, fieldName: "maxSpacecraftPower", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.oapSpacecraftPower.p, fieldName: "oapSpacecraftPower", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgPayloadPower.p, fieldName: "avgPayloadPower", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxPayloadPower.p, fieldName: "maxPayloadPower", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.oapPayloadPower.p, fieldName: "oapPayloadPower", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bodyDimensionX.p, fieldName: "bodyDimensionX", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bodyDimensionY.p, fieldName: "bodyDimensionY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bodyDimensionZ.p, fieldName: "bodyDimensionZ", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.payloadDimensionX.p, fieldName: "payloadDimensionX", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.payloadDimensionY.p, fieldName: "payloadDimensionY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.payloadDimensionZ.p, fieldName: "payloadDimensionZ", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.payloadVolume.p, fieldName: "payloadVolume", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.launchEnvelopeDimensionX.p, fieldName: "launchEnvelopeDimensionX", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.launchEnvelopeDimensionY.p, fieldName: "launchEnvelopeDimensionY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.launchEnvelopeDimensionZ.p, fieldName: "launchEnvelopeDimensionZ", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.numOrbitType.p, fieldName: "numOrbitType", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.orbitTypes.p, fieldName: "orbitTypes", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.telemetryTrackingManufacturerOrgId.p, fieldName: "telemetryTrackingManufacturerOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.mainComputerManufacturerOrgId.p, fieldName: "mainComputerManufacturerOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.manufacturerOrgId.p, fieldName: "manufacturerOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.busKitDesignerOrgId.p, fieldName: "busKitDesignerOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.countryCode.p, fieldName: "countryCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.massCategory.p, fieldName: "massCategory", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.powerCategory.p, fieldName: "powerCategory", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.generic.p, fieldName: "generic", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.description.p, fieldName: "description", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aocsNotes.p, fieldName: "aocsNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Bus_Full_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.entity.p, fieldName: "entity", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

