// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Object for data dissemination.
public struct ISRCollectionTransit_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ISRC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: ISRCollectionTransit_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case base = 6
    case duration = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Transit Unique Identifier.
  ///  Example: /// Example: ISRCOLLECTIONTRANSIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Military Base to transmit the dissemination of this data.
  ///  Example: /// Example: ENVOYS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var base: String? { let o = _accessor.offset(VTOFFSET.base.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var baseSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.base.v) }
  ///  Length of mission in milliseconds.
  ///  Example: /// Example: 200.23
  ///  Constraints: No constraints specified.
  public var duration: Double { let o = _accessor.offset(VTOFFSET.duration.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  public static func startISRCollectionTransit_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(base: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: base, at: VTOFFSET.base.p) }
  public static func add(duration: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: duration, def: 0.0, at: VTOFFSET.duration.p) }
  public static func endISRCollectionTransit_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createISRCollectionTransit_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    baseOffset base: Offset = Offset(),
    duration: Double = 0.0
  ) -> Offset {
    let __start = ISRCollectionTransit_Abridged.startISRCollectionTransit_Abridged(&fbb)
    ISRCollectionTransit_Abridged.add(id: id, &fbb)
    ISRCollectionTransit_Abridged.add(base: base, &fbb)
    ISRCollectionTransit_Abridged.add(duration: duration, &fbb)
    return ISRCollectionTransit_Abridged.endISRCollectionTransit_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.base.p, fieldName: "base", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.duration.p, fieldName: "duration", required: false, type: Double.self)
    _v.finish()
  }
}

