// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum EventEvolution_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: EventEvolution_Ingest_dataMode_Enum { return .exercise }
  public static var min: EventEvolution_Ingest_dataMode_Enum { return .real }
}


///  /// Event Evolution is a unique service supporting the association of UDL records of various data types to a common event or activity. The associations may be a one time summary, aggregating sources of a past event, or of an ongoing activity that evolves over a period of time.
public struct EventEvolution_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EVEN" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EventEvolution_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case eventId = 8
    case category = 10
    case summary = 12
    case startTime = 14
    case endTime = 16
    case status = 18
    case countryCode = 20
    case geoAdminLevel1 = 22
    case geoAdminLevel2 = 24
    case geoAdminLevel3 = 26
    case redact = 28
    case srcTyps = 30
    case srcIds = 32
    case dataDescription = 34
    case area = 36
    case atext = 38
    case agjson = 40
    case atype = 42
    case andims = 44
    case asrid = 46
    case url = 48
    case tags = 50
    case createdAt = 52
    case createdBy = 54
    case source = 56
    case origin = 58
    case origNetwork = 60
    case dataMode = 62
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: EVENT_EVOL_ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.
  ///  Example: /// Example: EVENT_ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var eventId: String? { let o = _accessor.offset(VTOFFSET.eventId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eventIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eventId.v) }
  ///  The activity or event type associated with this record (e.g. BREAKUP, DIRECT FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an event may incorporate records of various types, for example, a LAUNCH event may evolve into a BREAKUP event.
  ///  Example: /// Example: PROTEST
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var category: String? { let o = _accessor.offset(VTOFFSET.category.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var categorySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.category.v) }
  ///  Summary or description of the activity or event.
  ///  Example: /// Example: Example summary of the event.
  ///  Constraints: Minimum length = 1, Maximum length = 4096
  public var summary: String? { let o = _accessor.offset(VTOFFSET.summary.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var summarySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.summary.v) }
  ///  The actual or estimated start time of the activity or event, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-12-02T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var startTime: String? { let o = _accessor.offset(VTOFFSET.startTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.startTime.v) }
  ///  The actual or estimated start time of the activity or event, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-12-03T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var endTime: String? { let o = _accessor.offset(VTOFFSET.endTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var endTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.endTime.v) }
  ///  The status of this activity or event.  (ACTIVE, CONCLUDED, UNKNOWN).
  ///  Example: /// Example: UNKNOWN
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var status: String? { let o = _accessor.offset(VTOFFSET.status.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var statusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.status.v) }
  ///  The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var countryCode: String? { let o = _accessor.offset(VTOFFSET.countryCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var countryCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.countryCode.v) }
  ///  Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the state/province in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.
  ///  Example: /// Example: Colorado
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var geoAdminLevel1: String? { let o = _accessor.offset(VTOFFSET.geoAdminLevel1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var geoAdminLevel1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.geoAdminLevel1.v) }
  ///  Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the city/district in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.
  ///  Example: /// Example: El Paso County
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var geoAdminLevel2: String? { let o = _accessor.offset(VTOFFSET.geoAdminLevel2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var geoAdminLevel2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.geoAdminLevel2.v) }
  ///  Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body.
  ///  Example: /// Example: Colorado Springs
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var geoAdminLevel3: String? { let o = _accessor.offset(VTOFFSET.geoAdminLevel3.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var geoAdminLevel3SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.geoAdminLevel3.v) }
  ///  Flag indicating that this record is for the purpose of redacting one or more previously specified records from association with this activity or event.  If this flag is set then all records indicated in srcTyps/srcIds should be removed from event association.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var redact: Bool { let o = _accessor.offset(VTOFFSET.redact.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this activity or event. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['AIS', 'CONJUNCTION']
  ///  Constraints: No constraints specified.
  public var hasSrcTyps: Bool { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? false : true }
  public var srcTypsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcTyps(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of UUIDs of the UDL data records that are related to the determination of this activity or event. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
  ///  Example: /// Example: ['SRC_ID_1', 'SRC_ID_2']
  ///  Constraints: No constraints specified.
  public var hasSrcIds: Bool { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? false : true }
  public var srcIdsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcIds(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Optional description of the relationship between the records provided in the srcTyps/srcIds and the activity or event.
  ///  Example: /// Example: Description of relationship between srcTyps and srcIds
  ///  Constraints: Minimum length = 0, Maximum length = 2056
  public var dataDescription: String? { let o = _accessor.offset(VTOFFSET.dataDescription.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dataDescriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dataDescription.v) }
  ///  Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  public var area: String? { let o = _accessor.offset(VTOFFSET.area.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var areaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.area.v) }
  ///  Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  public var atext: String? { let o = _accessor.offset(VTOFFSET.atext.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var atextSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.atext.v) }
  ///  Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  ///  Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  ///  Constraints: No constraints specified.
  public var agjson: String? { let o = _accessor.offset(VTOFFSET.agjson.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var agjsonSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.agjson.v) }
  ///  Type of region as projected on the ground.
  ///  Example: /// Example: POLYGON
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var atype: String? { let o = _accessor.offset(VTOFFSET.atype.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var atypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.atype.v) }
  ///  Number of dimensions of the geometry depicted by region.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var andims: Int32 { let o = _accessor.offset(VTOFFSET.andims.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Geographical spatial_ref_sys for region.
  ///  Example: /// Example: 4326
  ///  Constraints: No constraints specified.
  public var asrid: Int32 { let o = _accessor.offset(VTOFFSET.asrid.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  List of URLs to before/after images of this point of interest entity.
  ///  Example: /// Example: ['URL1', 'URL2']
  ///  Constraints: No constraints specified.
  public var hasUrl: Bool { let o = _accessor.offset(VTOFFSET.url.v); return o == 0 ? false : true }
  public var urlCount: Int32 { let o = _accessor.offset(VTOFFSET.url.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func url(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.url.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  public var hasTags: Bool { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? false : true }
  public var tagsCount: Int32 { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func tags(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2021-12-02T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: EventEvolution_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : EventEvolution_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startEventEvolution_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 30) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(eventId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eventId, at: VTOFFSET.eventId.p) }
  public static func add(category: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: category, at: VTOFFSET.category.p) }
  public static func add(summary: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: summary, at: VTOFFSET.summary.p) }
  public static func add(startTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: startTime, at: VTOFFSET.startTime.p) }
  public static func add(endTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: endTime, at: VTOFFSET.endTime.p) }
  public static func add(status: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: status, at: VTOFFSET.status.p) }
  public static func add(countryCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: countryCode, at: VTOFFSET.countryCode.p) }
  public static func add(geoAdminLevel1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geoAdminLevel1, at: VTOFFSET.geoAdminLevel1.p) }
  public static func add(geoAdminLevel2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geoAdminLevel2, at: VTOFFSET.geoAdminLevel2.p) }
  public static func add(geoAdminLevel3: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geoAdminLevel3, at: VTOFFSET.geoAdminLevel3.p) }
  public static func add(redact: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: redact, def: false,
   at: VTOFFSET.redact.p) }
  public static func addVectorOf(srcTyps: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcTyps, at: VTOFFSET.srcTyps.p) }
  public static func addVectorOf(srcIds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcIds, at: VTOFFSET.srcIds.p) }
  public static func add(dataDescription: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dataDescription, at: VTOFFSET.dataDescription.p) }
  public static func add(area: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: area, at: VTOFFSET.area.p) }
  public static func add(atext: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: atext, at: VTOFFSET.atext.p) }
  public static func add(agjson: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: agjson, at: VTOFFSET.agjson.p) }
  public static func add(atype: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: atype, at: VTOFFSET.atype.p) }
  public static func add(andims: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: andims, def: 0, at: VTOFFSET.andims.p) }
  public static func add(asrid: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: asrid, def: 0, at: VTOFFSET.asrid.p) }
  public static func addVectorOf(url: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: url, at: VTOFFSET.url.p) }
  public static func addVectorOf(tags: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tags, at: VTOFFSET.tags.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: EventEvolution_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endEventEvolution_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEventEvolution_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    eventIdOffset eventId: Offset = Offset(),
    categoryOffset category: Offset = Offset(),
    summaryOffset summary: Offset = Offset(),
    startTimeOffset startTime: Offset = Offset(),
    endTimeOffset endTime: Offset = Offset(),
    statusOffset status: Offset = Offset(),
    countryCodeOffset countryCode: Offset = Offset(),
    geoAdminLevel1Offset geoAdminLevel1: Offset = Offset(),
    geoAdminLevel2Offset geoAdminLevel2: Offset = Offset(),
    geoAdminLevel3Offset geoAdminLevel3: Offset = Offset(),
    redact: Bool = false,
    srcTypsVectorOffset srcTyps: Offset = Offset(),
    srcIdsVectorOffset srcIds: Offset = Offset(),
    dataDescriptionOffset dataDescription: Offset = Offset(),
    areaOffset area: Offset = Offset(),
    atextOffset atext: Offset = Offset(),
    agjsonOffset agjson: Offset = Offset(),
    atypeOffset atype: Offset = Offset(),
    andims: Int32 = 0,
    asrid: Int32 = 0,
    urlVectorOffset url: Offset = Offset(),
    tagsVectorOffset tags: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: EventEvolution_Ingest_dataMode_Enum = .real
  ) -> Offset {
    let __start = EventEvolution_Ingest.startEventEvolution_Ingest(&fbb)
    EventEvolution_Ingest.add(id: id, &fbb)
    EventEvolution_Ingest.add(classificationMarking: classificationMarking, &fbb)
    EventEvolution_Ingest.add(eventId: eventId, &fbb)
    EventEvolution_Ingest.add(category: category, &fbb)
    EventEvolution_Ingest.add(summary: summary, &fbb)
    EventEvolution_Ingest.add(startTime: startTime, &fbb)
    EventEvolution_Ingest.add(endTime: endTime, &fbb)
    EventEvolution_Ingest.add(status: status, &fbb)
    EventEvolution_Ingest.add(countryCode: countryCode, &fbb)
    EventEvolution_Ingest.add(geoAdminLevel1: geoAdminLevel1, &fbb)
    EventEvolution_Ingest.add(geoAdminLevel2: geoAdminLevel2, &fbb)
    EventEvolution_Ingest.add(geoAdminLevel3: geoAdminLevel3, &fbb)
    EventEvolution_Ingest.add(redact: redact, &fbb)
    EventEvolution_Ingest.addVectorOf(srcTyps: srcTyps, &fbb)
    EventEvolution_Ingest.addVectorOf(srcIds: srcIds, &fbb)
    EventEvolution_Ingest.add(dataDescription: dataDescription, &fbb)
    EventEvolution_Ingest.add(area: area, &fbb)
    EventEvolution_Ingest.add(atext: atext, &fbb)
    EventEvolution_Ingest.add(agjson: agjson, &fbb)
    EventEvolution_Ingest.add(atype: atype, &fbb)
    EventEvolution_Ingest.add(andims: andims, &fbb)
    EventEvolution_Ingest.add(asrid: asrid, &fbb)
    EventEvolution_Ingest.addVectorOf(url: url, &fbb)
    EventEvolution_Ingest.addVectorOf(tags: tags, &fbb)
    EventEvolution_Ingest.add(createdAt: createdAt, &fbb)
    EventEvolution_Ingest.add(createdBy: createdBy, &fbb)
    EventEvolution_Ingest.add(source: source, &fbb)
    EventEvolution_Ingest.add(origin: origin, &fbb)
    EventEvolution_Ingest.add(origNetwork: origNetwork, &fbb)
    EventEvolution_Ingest.add(dataMode: dataMode, &fbb)
    return EventEvolution_Ingest.endEventEvolution_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eventId.p, fieldName: "eventId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.category.p, fieldName: "category", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.summary.p, fieldName: "summary", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.startTime.p, fieldName: "startTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.endTime.p, fieldName: "endTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.status.p, fieldName: "status", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.countryCode.p, fieldName: "countryCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.geoAdminLevel1.p, fieldName: "geoAdminLevel1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.geoAdminLevel2.p, fieldName: "geoAdminLevel2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.geoAdminLevel3.p, fieldName: "geoAdminLevel3", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.redact.p, fieldName: "redact", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.srcTyps.p, fieldName: "srcTyps", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.srcIds.p, fieldName: "srcIds", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.dataDescription.p, fieldName: "dataDescription", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.area.p, fieldName: "area", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.atext.p, fieldName: "atext", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.agjson.p, fieldName: "agjson", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.atype.p, fieldName: "atype", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.andims.p, fieldName: "andims", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.asrid.p, fieldName: "asrid", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.url.p, fieldName: "url", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.tags.p, fieldName: "tags", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: EventEvolution_Ingest_dataMode_Enum.self)
    _v.finish()
  }
}

