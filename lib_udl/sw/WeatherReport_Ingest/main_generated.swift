// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum WeatherReport_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: WeatherReport_Ingest_dataMode_Enum { return .exercise }
  public static var min: WeatherReport_Ingest_dataMode_Enum { return .real }
}


///  /// These services provide for posting and querying Weather Over Target information. The information contained within describes the current weather conditions over a target area or region to include navigational considerations such as altimeter settings, visibility, cloud heights etc.
public struct WeatherReport_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "WEAT" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: WeatherReport_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idSensor = 8
    case origSensorId = 10
    case weatherId = 12
    case idGroundImagery = 14
    case idSite = 16
    case idAirfield = 18
    case icao = 20
    case externalId = 22
    case externalLocationId = 24
    case reportType = 26
    case obTime = 28
    case forecastStartTime = 30
    case forecastEndTime = 32
    case lat = 34
    case lon = 36
    case alt = 38
    case geoPotentialAlt = 40
    case dataLevel = 42
    case area = 44
    case atext = 46
    case agjson = 48
    case atype = 50
    case andims = 52
    case asrid = 54
    case windSpd = 56
    case windSpdAvg = 58
    case windGust = 60
    case windGust10 = 62
    case vshear = 64
    case hshear = 66
    case radVel = 68
    case radVelBeam1 = 70
    case radVelBeam2 = 72
    case radVelBeam3 = 74
    case radVelBeam4 = 76
    case radVelBeam5 = 78
    case windDir = 80
    case windDirAvg = 82
    case windDirPeak = 84
    case windDirPeak10 = 86
    case windChill = 88
    case dirDev = 90
    case windVar = 92
    case windCov = 94
    case cloudCover = 96
    case cloudHght = 98
    case actWeather = 100
    case weatherDesc = 102
    case weatherInt = 104
    case rawMetar = 106
    case rawTaf = 108
    case qnh = 110
    case visibility = 112
    case temperature = 114
    case soilTemp = 116
    case barPress = 118
    case precipRate = 120
    case rainHour = 122
    case solarRad = 124
    case difRad = 126
    case refRad = 128
    case senlat = 130
    case senlon = 132
    case senalt = 134
    case dewPoint = 136
    case relHumidity = 138
    case indexRefraction = 140
    case soilMoisture = 142
    case surroundingWeather = 144
    case weatherAmp = 146
    case contrailHghtLower = 148
    case contrailHghtUpper = 150
    case icingUpperLimit = 152
    case icingLowerLimit = 154
    case enRouteWeather = 156
    case ccEvent = 158
    case srcTyps = 160
    case srcIds = 162
    case origNetwork = 164
    case createdAt = 166
    case createdBy = 168
    case source = 170
    case origin = 172
    case dataMode = 174
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: WEATHER-REPORT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the sensor making the weather measurement.
  ///  Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origSensorId: String? { let o = _accessor.offset(VTOFFSET.origSensorId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSensorIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSensorId.v) }
  ///  Identifier of the weather over target, which should remain the same on subsequent Weather Over Target records.
  ///  Example: /// Example: WEATHER-ID
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var weatherId: String? { let o = _accessor.offset(VTOFFSET.weatherId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var weatherIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.weatherId.v) }
  ///  Identifier of the ground imagery associated for this weather over target report.
  ///  Example: /// Example: GROUND-IMAGERY-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idGroundImagery: String? { let o = _accessor.offset(VTOFFSET.idGroundImagery.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idGroundImagerySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idGroundImagery.v) }
  ///  Identifier of the Site that is associated with this weather report.
  ///  Example: /// Example: AIRFIELD-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSite: String? { let o = _accessor.offset(VTOFFSET.idSite.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSiteSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSite.v) }
  ///  Identifier of the Airfield associated with this weather report.
  ///  Example: /// Example: 8fb38d6d-a3de-45dd-8974-4e3ed73e9449
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idAirfield: String? { let o = _accessor.offset(VTOFFSET.idAirfield.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idAirfieldSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idAirfield.v) }
  ///  The International Civil Aviation Organization (ICAO) code of the airfield associated with this weather report.
  ///  Example: /// Example: KAFF
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var icao: String? { let o = _accessor.offset(VTOFFSET.icao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var icaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.icao.v) }
  ///  Optional observation or forecast ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: GDSSMB022408301601304517
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var externalId: String? { let o = _accessor.offset(VTOFFSET.externalId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var externalIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.externalId.v) }
  ///  Optional location ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: TMDS060AD4OG03CC
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var externalLocationId: String? { let o = _accessor.offset(VTOFFSET.externalLocationId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var externalLocationIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.externalLocationId.v) }
  ///  Identifies the type of weather report (e.g. OBSERVATION, FORECAST, etc.).
  ///  Example: /// Example: FORECAST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var reportType: String? { let o = _accessor.offset(VTOFFSET.reportType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reportTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reportType.v) }
  ///  Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var obTime: String? { let o = _accessor.offset(VTOFFSET.obTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obTime.v) }
  ///  Valid start time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var forecastStartTime: String? { let o = _accessor.offset(VTOFFSET.forecastStartTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var forecastStartTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.forecastStartTime.v) }
  ///  Valid end time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T18:00:00.123Z
  ///  Constraints: No constraints specified.
  public var forecastEndTime: String? { let o = _accessor.offset(VTOFFSET.forecastEndTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var forecastEndTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.forecastEndTime.v) }
  ///  The central WGS-84 latitude of the weather report, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 56.12
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The central WGS-84 longitude of the weather report, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -156.6
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Point height above ellipsoid (WGS-84), in meters.
  ///  Example: /// Example: 123.12
  ///  Constraints: No constraints specified.
  public var alt: Double { let o = _accessor.offset(VTOFFSET.alt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Altitude of a pressure surface in the atmosphere above mean sea level, in meters.
  ///  Example: /// Example: 1000.0
  ///  Constraints: No constraints specified.
  public var geoPotentialAlt: Double { let o = _accessor.offset(VTOFFSET.geoPotentialAlt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Specific pressures or heights where measurements are taken, labeled as either MANDATORY or SIGNIFICANT levels. Mandatory levels are at particular pressures at geopotential heights. Significant levels are at particular geometric heights.
  ///  Example: /// Example: MANDATORY
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var dataLevel: String? { let o = _accessor.offset(VTOFFSET.dataLevel.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dataLevelSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dataLevel.v) }
  ///  Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  public var area: String? { let o = _accessor.offset(VTOFFSET.area.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var areaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.area.v) }
  ///  Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  public var atext: String? { let o = _accessor.offset(VTOFFSET.atext.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var atextSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.atext.v) }
  ///  Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  ///  Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  ///  Constraints: No constraints specified.
  public var agjson: String? { let o = _accessor.offset(VTOFFSET.agjson.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var agjsonSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.agjson.v) }
  ///  Type of region as projected on the ground.
  ///  Example: /// Example: ST_Polygon
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var atype: String? { let o = _accessor.offset(VTOFFSET.atype.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var atypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.atype.v) }
  ///  Number of dimensions of the geometry depicted by region.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var andims: Int32 { let o = _accessor.offset(VTOFFSET.andims.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Geographical spatial_ref_sys for region.
  ///  Example: /// Example: 4326
  ///  Constraints: No constraints specified.
  public var asrid: Int32 { let o = _accessor.offset(VTOFFSET.asrid.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Expresses the speed of the wind in meters/second.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var windSpd: Double { let o = _accessor.offset(VTOFFSET.windSpd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average wind speed over a 1 minute period, in meters/second.
  ///  Example: /// Example: 12.1
  ///  Constraints: No constraints specified.
  public var windSpdAvg: Double { let o = _accessor.offset(VTOFFSET.windSpdAvg.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Expresses the max gust speed of the wind, in meters/second.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var windGust: Double { let o = _accessor.offset(VTOFFSET.windGust.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Expresses the max gust speed of the wind recorded in a 10 minute period, in meters/second.
  ///  Example: /// Example: 13.2
  ///  Constraints: No constraints specified.
  public var windGust10: Double { let o = _accessor.offset(VTOFFSET.windGust10.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The change in wind speed between two different altitudes divided by the vertical distance between them, in units of 1/sec.
  ///  Example: /// Example: 3.8
  ///  Constraints: No constraints specified.
  public var vshear: Double { let o = _accessor.offset(VTOFFSET.vshear.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The change in wind speed between two different lateral positions at a given altitude divided by the horizontal distance between them, in units of 1/sec.
  ///  Example: /// Example: 3.8
  ///  Constraints: No constraints specified.
  public var hshear: Double { let o = _accessor.offset(VTOFFSET.hshear.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average radial velocity of wind as measured by radar with multi-beam configurations. Radial velocity is the component of wind velocity moving directly toward or away from a sensor's radar beam, in meters per second. Values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar).
  ///  Example: /// Example: -0.04
  ///  Constraints: No constraints specified.
  public var radVel: Double { let o = _accessor.offset(VTOFFSET.radVel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Component of wind velocity moving directly toward or away from radar beam 1, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
  ///  Example: /// Example: 4.4
  ///  Constraints: No constraints specified.
  public var radVelBeam1: Double { let o = _accessor.offset(VTOFFSET.radVelBeam1.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Component of wind velocity moving directly toward or away from radar beam 2, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
  ///  Example: /// Example: -0.2
  ///  Constraints: No constraints specified.
  public var radVelBeam2: Double { let o = _accessor.offset(VTOFFSET.radVelBeam2.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Component of wind velocity moving directly toward or away from radar beam 3, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
  ///  Example: /// Example: -0.2
  ///  Constraints: No constraints specified.
  public var radVelBeam3: Double { let o = _accessor.offset(VTOFFSET.radVelBeam3.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Component of wind velocity moving directly toward or away from radar beam 4, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
  ///  Example: /// Example: 11.4
  ///  Constraints: No constraints specified.
  public var radVelBeam4: Double { let o = _accessor.offset(VTOFFSET.radVelBeam4.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Component of wind velocity moving directly toward or away from radar beam 5, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
  ///  Example: /// Example: 4.1
  ///  Constraints: No constraints specified.
  public var radVelBeam5: Double { let o = _accessor.offset(VTOFFSET.radVelBeam5.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Direction the wind is blowing, in degrees clockwise from true north.
  ///  Example: /// Example: 75.1234
  ///  Constraints: No constraints specified.
  public var windDir: Double { let o = _accessor.offset(VTOFFSET.windDir.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average wind direction over a 1 minute period, in degrees clockwise from true north.
  ///  Example: /// Example: 57.1
  ///  Constraints: No constraints specified.
  public var windDirAvg: Double { let o = _accessor.offset(VTOFFSET.windDirAvg.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Wind direction corresponding to the peak wind speed during a 1 minute period, in degrees clockwise from true north.
  ///  Example: /// Example: 78.4
  ///  Constraints: No constraints specified.
  public var windDirPeak: Double { let o = _accessor.offset(VTOFFSET.windDirPeak.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Wind direction corresponding to the peak wind speed during a 10 minute period, in degrees clockwise from true north.
  ///  Example: /// Example: 44.5
  ///  Constraints: No constraints specified.
  public var windDirPeak10: Double { let o = _accessor.offset(VTOFFSET.windDirPeak10.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The perceived temperature in degrees C.
  ///  Example: /// Example: 15.6
  ///  Constraints: No constraints specified.
  public var windChill: Double { let o = _accessor.offset(VTOFFSET.windChill.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The difference in wind direction recorded over a period of time, in degrees.
  ///  Example: /// Example: 9.1
  ///  Constraints: No constraints specified.
  public var dirDev: Double { let o = _accessor.offset(VTOFFSET.dirDev.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Boolean describing whether or not the wind direction and/or speed is variable.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var windVar: Bool { let o = _accessor.offset(VTOFFSET.windVar.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Covariance matrix, in knots and second based units.  The array values represent the lower triangular half of the covariance matrix. The size of the covariance matrix is 2x2.  The covariance elements are position dependent within the array with values ordered as follows:
  ///  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y
  ///  x&nbsp;&nbsp;&nbsp;&nbsp;1
  ///  y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
  ///  The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
  ///  Example: /// Example: [1.1, 2.2]
  ///  Constraints: No constraints specified.
  public var hasWindCov: Bool { let o = _accessor.offset(VTOFFSET.windCov.v); return o == 0 ? false : true }
  public var windCovCount: Int32 { let o = _accessor.offset(VTOFFSET.windCov.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windCov(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.windCov.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of cloud cover descriptions - each element can be maximum of 16 characters long. Intended as, but not constrained to, MIL-STD-6016 cloud cover designations (e.g. SKY CLEAR, SCATTERED, BROKEN, OVERCAST, SKY OBSCURED). Each element of the array corresponds to the elements in the cloudHght array specified respectively.
  ///  Example: /// Example: ['OVERCAST', 'BROKEN']
  ///  Constraints: No constraints specified.
  public var hasCloudCover: Bool { let o = _accessor.offset(VTOFFSET.cloudCover.v); return o == 0 ? false : true }
  public var cloudCoverCount: Int32 { let o = _accessor.offset(VTOFFSET.cloudCover.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cloudCover(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.cloudCover.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of cloud base heights in meters described by the cloudHght array. Each element of the array corresponds to the elements in the cloudCover array specified respectively.
  ///  Example: /// Example: [1.2, 2.2]
  ///  Constraints: No constraints specified.
  public var hasCloudHght: Bool { let o = _accessor.offset(VTOFFSET.cloudHght.v); return o == 0 ? false : true }
  public var cloudHghtCount: Int32 { let o = _accessor.offset(VTOFFSET.cloudHght.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cloudHght(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.cloudHght.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Describes the actual weather at position. Intended as, but not constrained to, MIL-STD-6016 actual weather (e.g. NO STATEMENT, NO SIGNIFICANT WEATHER, DRIZZLE, RAIN, SNOW, SNOW GRAINS, DIAMOND DUST, ICE PELLETS, HAIL, SMALL HAIL, MIST, FOG, SMOKE, VOLCANIC ASH, WIDESPREAD DUST, SAND, HAZE, WELL DEVELOPED DUST, SQUALLS, FUNNEL CLOUDS, SANDSTORM, DUSTSTORM, LOW CLOUDS, CLOUDY, GROUND FOG, DUST, HEAVY RAIN, THUNDERSTORMS AWT, HEAVY THUNDERSTORMS, HURRICANE TYPHOON CYCLONE, TROPICAL STORM, TORNADO, HIGH WINDS, LIGHTNING, FREEZING DRIZZLE, FREEZING RAIN, HEAVY SNOW, ICING, SNOW OR RAIN AND SNOW MIXED, SHOWERS, CLEAR).
  ///  Example: /// Example: NO STATEMENT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var actWeather: String? { let o = _accessor.offset(VTOFFSET.actWeather.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actWeatherSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.actWeather.v) }
  ///  Used in conjunction with actWeather and weatherInt. Intended as, but not constrained to, MIL-STD-6016 actual weather descriptor (e.g. NO STATEMENT, SHALLOW, PATCHES, LOW DRIFTING, BLOWING, SHOWERS, THUNDERSTORMS, SUPERCOOLED).
  ///  Example: /// Example: NO STATEMENT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var weatherDesc: String? { let o = _accessor.offset(VTOFFSET.weatherDesc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var weatherDescSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.weatherDesc.v) }
  ///  Weather Intensity. Used in conjunction with actWeather and weatherDesc. Intended as, but not constrained to, MIL-STD-6016 weather intensity (e.g. NO STATEMENT, LIGHT, MODERATE, HEAVY, IN VICINITY).
  ///  Example: /// Example: NO STATEMENT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var weatherInt: String? { let o = _accessor.offset(VTOFFSET.weatherInt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var weatherIntSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.weatherInt.v) }
  ///  The Raw Meteorological Aerodrome Report (METAR) string.
  ///  Example: /// Example: KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var rawMetar: String? { let o = _accessor.offset(VTOFFSET.rawMetar.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rawMetarSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rawMetar.v) }
  ///  Terminal Aerodrome Forecast (TAF) containing detailed weather predictions for a specific airport or aerodrome.
  ///  Example: /// Example: KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z=
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var rawTaf: String? { let o = _accessor.offset(VTOFFSET.rawTaf.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rawTafSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rawTaf.v) }
  ///  Altimeter set to read zero at mean sea level in kilopascals.
  ///  Example: /// Example: 1234.456
  ///  Constraints: No constraints specified.
  public var qnh: Double { let o = _accessor.offset(VTOFFSET.qnh.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Visual distance in meters.
  ///  Example: /// Example: 1234.456
  ///  Constraints: No constraints specified.
  public var visibility: Double { let o = _accessor.offset(VTOFFSET.visibility.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The measurement of air temperature in degrees C.
  ///  Example: /// Example: 23.45
  ///  Constraints: No constraints specified.
  public var temperature: Double { let o = _accessor.offset(VTOFFSET.temperature.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The measurement of soil temperature in degrees C.
  ///  Example: /// Example: 22.4
  ///  Constraints: No constraints specified.
  public var soilTemp: Double { let o = _accessor.offset(VTOFFSET.soilTemp.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The measurement of air pressure in the atmosphere in kilopascals.
  ///  Example: /// Example: 101.2
  ///  Constraints: No constraints specified.
  public var barPress: Double { let o = _accessor.offset(VTOFFSET.barPress.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The speed at which water is being applied to a specific area in millimeters per hour.
  ///  Example: /// Example: 3.4
  ///  Constraints: No constraints specified.
  public var precipRate: Double { let o = _accessor.offset(VTOFFSET.precipRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The amount of rain that has fallen in the past hour, in centimeters.
  ///  Example: /// Example: 1.2
  ///  Constraints: No constraints specified.
  public var rainHour: Double { let o = _accessor.offset(VTOFFSET.rainHour.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The power per unit area received from the Sun in the form of electromagnetic radiation as measured in the wavelength range of the measuring instrument. The solar irradiance is measured in watt per square meter (W/m2).
  ///  Example: /// Example: 1234.456
  ///  Constraints: No constraints specified.
  public var solarRad: Double { let o = _accessor.offset(VTOFFSET.solarRad.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The amount of radiation that reaches earth's surface after being scattered by the atmosphere, in Watts per square meter.
  ///  Example: /// Example: 234.5
  ///  Constraints: No constraints specified.
  public var difRad: Double { let o = _accessor.offset(VTOFFSET.difRad.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The amount of radiation that changes direction as a function of atmospheric density, in Watts per square meter.
  ///  Example: /// Example: 56.7
  ///  Constraints: No constraints specified.
  public var refRad: Double { let o = _accessor.offset(VTOFFSET.refRad.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor WGS84 latitude at obTime in degrees. -90 to 90 degrees (negative values south of equator). This includes pilot reports or other means of weather observation.
  ///  Example: /// Example: 12.456
  ///  Constraints: No constraints specified.
  public var senlat: Double { let o = _accessor.offset(VTOFFSET.senlat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor WGS84 longitude at obTime in degrees. -180 to 180 degrees (negative values west of Prime Meridian). This includes pilot reports or other means of weather observation.
  ///  Example: /// Example: 123.456
  ///  Constraints: No constraints specified.
  public var senlon: Double { let o = _accessor.offset(VTOFFSET.senlon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor altitude at obTime in km. This includes pilot reports or other means of weather observation.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var senalt: Double { let o = _accessor.offset(VTOFFSET.senalt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The temperature at which air is saturated with water vapor, in degrees C.
  ///  Example: /// Example: 15.6
  ///  Constraints: No constraints specified.
  public var dewPoint: Double { let o = _accessor.offset(VTOFFSET.dewPoint.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The percentage of water vapor in the atmosphere.
  ///  Example: /// Example: 34.456
  ///  Constraints: No constraints specified.
  public var relHumidity: Double { let o = _accessor.offset(VTOFFSET.relHumidity.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  An indication of how much the atmosphere refracts light.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var indexRefraction: Double { let o = _accessor.offset(VTOFFSET.indexRefraction.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The volumetric percentage of soil water contained in a given volume of soil.
  ///  Example: /// Example: 3.5
  ///  Constraints: No constraints specified.
  public var soilMoisture: Double { let o = _accessor.offset(VTOFFSET.soilMoisture.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Describes in which direction (if any) that better weather conditions exist. Intended as, but not constrained to, MIL-STD-6016 surrounding weather designations (e.g. NO STATEMENT, BETTER TO NORTH, BETTER TO EAST, BETTER TO SOUTH, BETTER TO WEST).
  ///  Example: /// Example: NO STATEMENT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var surroundingWeather: String? { let o = _accessor.offset(VTOFFSET.surroundingWeather.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var surroundingWeatherSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.surroundingWeather.v) }
  ///  Amplifies the actual weather being reported. Intended as, but not constrained to, MIL-STD-6016 weather amplification designations (e.g. NO STATEMENT, NO SCATTERED BROKEN MEDIUM CLOUD, SCATTERED BROKEN MEDIUM CLOUDS, GUSTY WINDS AT SERVICE, FOG IN VALLEYS, HIGHER TERRAIN OBSCURED, SURFACE CONDITIONS VARIABLE, SURFACE WIND NE, SURFACE WIND SE, SURFACE WIND SW, SURFACE WIND NW, PRESENCE OF CUMULONIMBUS).
  ///  Example: /// Example: NO STATEMENT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var weatherAmp: String? { let o = _accessor.offset(VTOFFSET.weatherAmp.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var weatherAmpSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.weatherAmp.v) }
  ///  Reports the lowest altitude at which contrails are occurring, in meters.
  ///  Example: /// Example: 123.123
  ///  Constraints: No constraints specified.
  public var contrailHghtLower: Double { let o = _accessor.offset(VTOFFSET.contrailHghtLower.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Reports the highest altitude at which contrails are occurring, in meters.
  ///  Example: /// Example: 123.123
  ///  Constraints: No constraints specified.
  public var contrailHghtUpper: Double { let o = _accessor.offset(VTOFFSET.contrailHghtUpper.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Reports the highest altitude at which icing or freezing rain is occurring, in meters.
  ///  Example: /// Example: 123.123
  ///  Constraints: No constraints specified.
  public var icingUpperLimit: Double { let o = _accessor.offset(VTOFFSET.icingUpperLimit.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Reports the lowest altitude at which icing or freezing rain is occurring, in meters.
  ///  Example: /// Example: 123.123
  ///  Constraints: No constraints specified.
  public var icingLowerLimit: Double { let o = _accessor.offset(VTOFFSET.icingLowerLimit.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Describes the flight conditions in route to the target  (NO STATEMENT, MAINLY IFR, MAINLY VFR, THUNDERSTORMS).
  ///  MAINLY IFR:&nbsp;&nbsp;Predominantly Instrument Flight Rules.
  ///  MAINLY VFR:&nbsp;&nbsp;Predominantly Visual Flight Rules.
  ///  THUNDERSTORMS:&nbsp;&nbsp;Thunderstorms expected in route.
  ///  Example: /// Example: THUNDERSTORMS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var enRouteWeather: String? { let o = _accessor.offset(VTOFFSET.enRouteWeather.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var enRouteWeatherSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.enRouteWeather.v) }
  ///  Flag indicating detection of a cloud-to-cloud lightning event.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var ccEvent: Bool { let o = _accessor.offset(VTOFFSET.ccEvent.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Array of UDL record types (SENSOR, WEATHERDATA) that are related to this WeatherReport record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['SENSOR', 'WEATHERDATA']
  ///  Constraints: No constraints specified.
  public var hasSrcTyps: Bool { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? false : true }
  public var srcTypsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcTyps(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of UUID(s) of the UDL data record(s) that are related to this WeatherReport record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
  ///  Example: /// Example: ['e609a90d-4059-4043-9f1a-fd7b49a3e1d0', 'c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52']
  ///  Constraints: No constraints specified.
  public var hasSrcIds: Bool { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? false : true }
  public var srcIdsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcIds(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: WeatherReport_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : WeatherReport_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startWeatherReport_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 86) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(origSensorId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSensorId, at: VTOFFSET.origSensorId.p) }
  public static func add(weatherId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weatherId, at: VTOFFSET.weatherId.p) }
  public static func add(idGroundImagery: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idGroundImagery, at: VTOFFSET.idGroundImagery.p) }
  public static func add(idSite: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSite, at: VTOFFSET.idSite.p) }
  public static func add(idAirfield: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idAirfield, at: VTOFFSET.idAirfield.p) }
  public static func add(icao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: icao, at: VTOFFSET.icao.p) }
  public static func add(externalId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: externalId, at: VTOFFSET.externalId.p) }
  public static func add(externalLocationId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: externalLocationId, at: VTOFFSET.externalLocationId.p) }
  public static func add(reportType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reportType, at: VTOFFSET.reportType.p) }
  public static func add(obTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obTime, at: VTOFFSET.obTime.p) }
  public static func add(forecastStartTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: forecastStartTime, at: VTOFFSET.forecastStartTime.p) }
  public static func add(forecastEndTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: forecastEndTime, at: VTOFFSET.forecastEndTime.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(alt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: alt, def: 0.0, at: VTOFFSET.alt.p) }
  public static func add(geoPotentialAlt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: geoPotentialAlt, def: 0.0, at: VTOFFSET.geoPotentialAlt.p) }
  public static func add(dataLevel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dataLevel, at: VTOFFSET.dataLevel.p) }
  public static func add(area: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: area, at: VTOFFSET.area.p) }
  public static func add(atext: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: atext, at: VTOFFSET.atext.p) }
  public static func add(agjson: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: agjson, at: VTOFFSET.agjson.p) }
  public static func add(atype: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: atype, at: VTOFFSET.atype.p) }
  public static func add(andims: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: andims, def: 0, at: VTOFFSET.andims.p) }
  public static func add(asrid: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: asrid, def: 0, at: VTOFFSET.asrid.p) }
  public static func add(windSpd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windSpd, def: 0.0, at: VTOFFSET.windSpd.p) }
  public static func add(windSpdAvg: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windSpdAvg, def: 0.0, at: VTOFFSET.windSpdAvg.p) }
  public static func add(windGust: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windGust, def: 0.0, at: VTOFFSET.windGust.p) }
  public static func add(windGust10: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windGust10, def: 0.0, at: VTOFFSET.windGust10.p) }
  public static func add(vshear: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vshear, def: 0.0, at: VTOFFSET.vshear.p) }
  public static func add(hshear: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hshear, def: 0.0, at: VTOFFSET.hshear.p) }
  public static func add(radVel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: radVel, def: 0.0, at: VTOFFSET.radVel.p) }
  public static func add(radVelBeam1: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: radVelBeam1, def: 0.0, at: VTOFFSET.radVelBeam1.p) }
  public static func add(radVelBeam2: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: radVelBeam2, def: 0.0, at: VTOFFSET.radVelBeam2.p) }
  public static func add(radVelBeam3: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: radVelBeam3, def: 0.0, at: VTOFFSET.radVelBeam3.p) }
  public static func add(radVelBeam4: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: radVelBeam4, def: 0.0, at: VTOFFSET.radVelBeam4.p) }
  public static func add(radVelBeam5: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: radVelBeam5, def: 0.0, at: VTOFFSET.radVelBeam5.p) }
  public static func add(windDir: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windDir, def: 0.0, at: VTOFFSET.windDir.p) }
  public static func add(windDirAvg: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windDirAvg, def: 0.0, at: VTOFFSET.windDirAvg.p) }
  public static func add(windDirPeak: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windDirPeak, def: 0.0, at: VTOFFSET.windDirPeak.p) }
  public static func add(windDirPeak10: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windDirPeak10, def: 0.0, at: VTOFFSET.windDirPeak10.p) }
  public static func add(windChill: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windChill, def: 0.0, at: VTOFFSET.windChill.p) }
  public static func add(dirDev: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dirDev, def: 0.0, at: VTOFFSET.dirDev.p) }
  public static func add(windVar: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windVar, def: false,
   at: VTOFFSET.windVar.p) }
  public static func addVectorOf(windCov: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windCov, at: VTOFFSET.windCov.p) }
  public static func addVectorOf(cloudCover: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudCover, at: VTOFFSET.cloudCover.p) }
  public static func addVectorOf(cloudHght: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudHght, at: VTOFFSET.cloudHght.p) }
  public static func add(actWeather: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actWeather, at: VTOFFSET.actWeather.p) }
  public static func add(weatherDesc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weatherDesc, at: VTOFFSET.weatherDesc.p) }
  public static func add(weatherInt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weatherInt, at: VTOFFSET.weatherInt.p) }
  public static func add(rawMetar: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rawMetar, at: VTOFFSET.rawMetar.p) }
  public static func add(rawTaf: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rawTaf, at: VTOFFSET.rawTaf.p) }
  public static func add(qnh: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: qnh, def: 0.0, at: VTOFFSET.qnh.p) }
  public static func add(visibility: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: visibility, def: 0.0, at: VTOFFSET.visibility.p) }
  public static func add(temperature: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: temperature, def: 0.0, at: VTOFFSET.temperature.p) }
  public static func add(soilTemp: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilTemp, def: 0.0, at: VTOFFSET.soilTemp.p) }
  public static func add(barPress: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: barPress, def: 0.0, at: VTOFFSET.barPress.p) }
  public static func add(precipRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: precipRate, def: 0.0, at: VTOFFSET.precipRate.p) }
  public static func add(rainHour: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rainHour, def: 0.0, at: VTOFFSET.rainHour.p) }
  public static func add(solarRad: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: solarRad, def: 0.0, at: VTOFFSET.solarRad.p) }
  public static func add(difRad: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: difRad, def: 0.0, at: VTOFFSET.difRad.p) }
  public static func add(refRad: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: refRad, def: 0.0, at: VTOFFSET.refRad.p) }
  public static func add(senlat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senlat, def: 0.0, at: VTOFFSET.senlat.p) }
  public static func add(senlon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senlon, def: 0.0, at: VTOFFSET.senlon.p) }
  public static func add(senalt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senalt, def: 0.0, at: VTOFFSET.senalt.p) }
  public static func add(dewPoint: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dewPoint, def: 0.0, at: VTOFFSET.dewPoint.p) }
  public static func add(relHumidity: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: relHumidity, def: 0.0, at: VTOFFSET.relHumidity.p) }
  public static func add(indexRefraction: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: indexRefraction, def: 0.0, at: VTOFFSET.indexRefraction.p) }
  public static func add(soilMoisture: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilMoisture, def: 0.0, at: VTOFFSET.soilMoisture.p) }
  public static func add(surroundingWeather: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surroundingWeather, at: VTOFFSET.surroundingWeather.p) }
  public static func add(weatherAmp: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weatherAmp, at: VTOFFSET.weatherAmp.p) }
  public static func add(contrailHghtLower: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: contrailHghtLower, def: 0.0, at: VTOFFSET.contrailHghtLower.p) }
  public static func add(contrailHghtUpper: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: contrailHghtUpper, def: 0.0, at: VTOFFSET.contrailHghtUpper.p) }
  public static func add(icingUpperLimit: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: icingUpperLimit, def: 0.0, at: VTOFFSET.icingUpperLimit.p) }
  public static func add(icingLowerLimit: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: icingLowerLimit, def: 0.0, at: VTOFFSET.icingLowerLimit.p) }
  public static func add(enRouteWeather: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: enRouteWeather, at: VTOFFSET.enRouteWeather.p) }
  public static func add(ccEvent: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ccEvent, def: false,
   at: VTOFFSET.ccEvent.p) }
  public static func addVectorOf(srcTyps: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcTyps, at: VTOFFSET.srcTyps.p) }
  public static func addVectorOf(srcIds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcIds, at: VTOFFSET.srcIds.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: WeatherReport_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endWeatherReport_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createWeatherReport_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    origSensorIdOffset origSensorId: Offset = Offset(),
    weatherIdOffset weatherId: Offset = Offset(),
    idGroundImageryOffset idGroundImagery: Offset = Offset(),
    idSiteOffset idSite: Offset = Offset(),
    idAirfieldOffset idAirfield: Offset = Offset(),
    icaoOffset icao: Offset = Offset(),
    externalIdOffset externalId: Offset = Offset(),
    externalLocationIdOffset externalLocationId: Offset = Offset(),
    reportTypeOffset reportType: Offset = Offset(),
    obTimeOffset obTime: Offset = Offset(),
    forecastStartTimeOffset forecastStartTime: Offset = Offset(),
    forecastEndTimeOffset forecastEndTime: Offset = Offset(),
    lat: Double = 0.0,
    lon: Double = 0.0,
    alt: Double = 0.0,
    geoPotentialAlt: Double = 0.0,
    dataLevelOffset dataLevel: Offset = Offset(),
    areaOffset area: Offset = Offset(),
    atextOffset atext: Offset = Offset(),
    agjsonOffset agjson: Offset = Offset(),
    atypeOffset atype: Offset = Offset(),
    andims: Int32 = 0,
    asrid: Int32 = 0,
    windSpd: Double = 0.0,
    windSpdAvg: Double = 0.0,
    windGust: Double = 0.0,
    windGust10: Double = 0.0,
    vshear: Double = 0.0,
    hshear: Double = 0.0,
    radVel: Double = 0.0,
    radVelBeam1: Double = 0.0,
    radVelBeam2: Double = 0.0,
    radVelBeam3: Double = 0.0,
    radVelBeam4: Double = 0.0,
    radVelBeam5: Double = 0.0,
    windDir: Double = 0.0,
    windDirAvg: Double = 0.0,
    windDirPeak: Double = 0.0,
    windDirPeak10: Double = 0.0,
    windChill: Double = 0.0,
    dirDev: Double = 0.0,
    windVar: Bool = false,
    windCovVectorOffset windCov: Offset = Offset(),
    cloudCoverVectorOffset cloudCover: Offset = Offset(),
    cloudHghtVectorOffset cloudHght: Offset = Offset(),
    actWeatherOffset actWeather: Offset = Offset(),
    weatherDescOffset weatherDesc: Offset = Offset(),
    weatherIntOffset weatherInt: Offset = Offset(),
    rawMetarOffset rawMetar: Offset = Offset(),
    rawTafOffset rawTaf: Offset = Offset(),
    qnh: Double = 0.0,
    visibility: Double = 0.0,
    temperature: Double = 0.0,
    soilTemp: Double = 0.0,
    barPress: Double = 0.0,
    precipRate: Double = 0.0,
    rainHour: Double = 0.0,
    solarRad: Double = 0.0,
    difRad: Double = 0.0,
    refRad: Double = 0.0,
    senlat: Double = 0.0,
    senlon: Double = 0.0,
    senalt: Double = 0.0,
    dewPoint: Double = 0.0,
    relHumidity: Double = 0.0,
    indexRefraction: Double = 0.0,
    soilMoisture: Double = 0.0,
    surroundingWeatherOffset surroundingWeather: Offset = Offset(),
    weatherAmpOffset weatherAmp: Offset = Offset(),
    contrailHghtLower: Double = 0.0,
    contrailHghtUpper: Double = 0.0,
    icingUpperLimit: Double = 0.0,
    icingLowerLimit: Double = 0.0,
    enRouteWeatherOffset enRouteWeather: Offset = Offset(),
    ccEvent: Bool = false,
    srcTypsVectorOffset srcTyps: Offset = Offset(),
    srcIdsVectorOffset srcIds: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: WeatherReport_Ingest_dataMode_Enum = .real
  ) -> Offset {
    let __start = WeatherReport_Ingest.startWeatherReport_Ingest(&fbb)
    WeatherReport_Ingest.add(id: id, &fbb)
    WeatherReport_Ingest.add(classificationMarking: classificationMarking, &fbb)
    WeatherReport_Ingest.add(idSensor: idSensor, &fbb)
    WeatherReport_Ingest.add(origSensorId: origSensorId, &fbb)
    WeatherReport_Ingest.add(weatherId: weatherId, &fbb)
    WeatherReport_Ingest.add(idGroundImagery: idGroundImagery, &fbb)
    WeatherReport_Ingest.add(idSite: idSite, &fbb)
    WeatherReport_Ingest.add(idAirfield: idAirfield, &fbb)
    WeatherReport_Ingest.add(icao: icao, &fbb)
    WeatherReport_Ingest.add(externalId: externalId, &fbb)
    WeatherReport_Ingest.add(externalLocationId: externalLocationId, &fbb)
    WeatherReport_Ingest.add(reportType: reportType, &fbb)
    WeatherReport_Ingest.add(obTime: obTime, &fbb)
    WeatherReport_Ingest.add(forecastStartTime: forecastStartTime, &fbb)
    WeatherReport_Ingest.add(forecastEndTime: forecastEndTime, &fbb)
    WeatherReport_Ingest.add(lat: lat, &fbb)
    WeatherReport_Ingest.add(lon: lon, &fbb)
    WeatherReport_Ingest.add(alt: alt, &fbb)
    WeatherReport_Ingest.add(geoPotentialAlt: geoPotentialAlt, &fbb)
    WeatherReport_Ingest.add(dataLevel: dataLevel, &fbb)
    WeatherReport_Ingest.add(area: area, &fbb)
    WeatherReport_Ingest.add(atext: atext, &fbb)
    WeatherReport_Ingest.add(agjson: agjson, &fbb)
    WeatherReport_Ingest.add(atype: atype, &fbb)
    WeatherReport_Ingest.add(andims: andims, &fbb)
    WeatherReport_Ingest.add(asrid: asrid, &fbb)
    WeatherReport_Ingest.add(windSpd: windSpd, &fbb)
    WeatherReport_Ingest.add(windSpdAvg: windSpdAvg, &fbb)
    WeatherReport_Ingest.add(windGust: windGust, &fbb)
    WeatherReport_Ingest.add(windGust10: windGust10, &fbb)
    WeatherReport_Ingest.add(vshear: vshear, &fbb)
    WeatherReport_Ingest.add(hshear: hshear, &fbb)
    WeatherReport_Ingest.add(radVel: radVel, &fbb)
    WeatherReport_Ingest.add(radVelBeam1: radVelBeam1, &fbb)
    WeatherReport_Ingest.add(radVelBeam2: radVelBeam2, &fbb)
    WeatherReport_Ingest.add(radVelBeam3: radVelBeam3, &fbb)
    WeatherReport_Ingest.add(radVelBeam4: radVelBeam4, &fbb)
    WeatherReport_Ingest.add(radVelBeam5: radVelBeam5, &fbb)
    WeatherReport_Ingest.add(windDir: windDir, &fbb)
    WeatherReport_Ingest.add(windDirAvg: windDirAvg, &fbb)
    WeatherReport_Ingest.add(windDirPeak: windDirPeak, &fbb)
    WeatherReport_Ingest.add(windDirPeak10: windDirPeak10, &fbb)
    WeatherReport_Ingest.add(windChill: windChill, &fbb)
    WeatherReport_Ingest.add(dirDev: dirDev, &fbb)
    WeatherReport_Ingest.add(windVar: windVar, &fbb)
    WeatherReport_Ingest.addVectorOf(windCov: windCov, &fbb)
    WeatherReport_Ingest.addVectorOf(cloudCover: cloudCover, &fbb)
    WeatherReport_Ingest.addVectorOf(cloudHght: cloudHght, &fbb)
    WeatherReport_Ingest.add(actWeather: actWeather, &fbb)
    WeatherReport_Ingest.add(weatherDesc: weatherDesc, &fbb)
    WeatherReport_Ingest.add(weatherInt: weatherInt, &fbb)
    WeatherReport_Ingest.add(rawMetar: rawMetar, &fbb)
    WeatherReport_Ingest.add(rawTaf: rawTaf, &fbb)
    WeatherReport_Ingest.add(qnh: qnh, &fbb)
    WeatherReport_Ingest.add(visibility: visibility, &fbb)
    WeatherReport_Ingest.add(temperature: temperature, &fbb)
    WeatherReport_Ingest.add(soilTemp: soilTemp, &fbb)
    WeatherReport_Ingest.add(barPress: barPress, &fbb)
    WeatherReport_Ingest.add(precipRate: precipRate, &fbb)
    WeatherReport_Ingest.add(rainHour: rainHour, &fbb)
    WeatherReport_Ingest.add(solarRad: solarRad, &fbb)
    WeatherReport_Ingest.add(difRad: difRad, &fbb)
    WeatherReport_Ingest.add(refRad: refRad, &fbb)
    WeatherReport_Ingest.add(senlat: senlat, &fbb)
    WeatherReport_Ingest.add(senlon: senlon, &fbb)
    WeatherReport_Ingest.add(senalt: senalt, &fbb)
    WeatherReport_Ingest.add(dewPoint: dewPoint, &fbb)
    WeatherReport_Ingest.add(relHumidity: relHumidity, &fbb)
    WeatherReport_Ingest.add(indexRefraction: indexRefraction, &fbb)
    WeatherReport_Ingest.add(soilMoisture: soilMoisture, &fbb)
    WeatherReport_Ingest.add(surroundingWeather: surroundingWeather, &fbb)
    WeatherReport_Ingest.add(weatherAmp: weatherAmp, &fbb)
    WeatherReport_Ingest.add(contrailHghtLower: contrailHghtLower, &fbb)
    WeatherReport_Ingest.add(contrailHghtUpper: contrailHghtUpper, &fbb)
    WeatherReport_Ingest.add(icingUpperLimit: icingUpperLimit, &fbb)
    WeatherReport_Ingest.add(icingLowerLimit: icingLowerLimit, &fbb)
    WeatherReport_Ingest.add(enRouteWeather: enRouteWeather, &fbb)
    WeatherReport_Ingest.add(ccEvent: ccEvent, &fbb)
    WeatherReport_Ingest.addVectorOf(srcTyps: srcTyps, &fbb)
    WeatherReport_Ingest.addVectorOf(srcIds: srcIds, &fbb)
    WeatherReport_Ingest.add(origNetwork: origNetwork, &fbb)
    WeatherReport_Ingest.add(createdAt: createdAt, &fbb)
    WeatherReport_Ingest.add(createdBy: createdBy, &fbb)
    WeatherReport_Ingest.add(source: source, &fbb)
    WeatherReport_Ingest.add(origin: origin, &fbb)
    WeatherReport_Ingest.add(dataMode: dataMode, &fbb)
    return WeatherReport_Ingest.endWeatherReport_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSensorId.p, fieldName: "origSensorId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.weatherId.p, fieldName: "weatherId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idGroundImagery.p, fieldName: "idGroundImagery", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSite.p, fieldName: "idSite", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idAirfield.p, fieldName: "idAirfield", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.icao.p, fieldName: "icao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.externalId.p, fieldName: "externalId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.externalLocationId.p, fieldName: "externalLocationId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reportType.p, fieldName: "reportType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obTime.p, fieldName: "obTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.forecastStartTime.p, fieldName: "forecastStartTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.forecastEndTime.p, fieldName: "forecastEndTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.alt.p, fieldName: "alt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.geoPotentialAlt.p, fieldName: "geoPotentialAlt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dataLevel.p, fieldName: "dataLevel", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.area.p, fieldName: "area", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.atext.p, fieldName: "atext", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.agjson.p, fieldName: "agjson", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.atype.p, fieldName: "atype", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.andims.p, fieldName: "andims", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.asrid.p, fieldName: "asrid", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.windSpd.p, fieldName: "windSpd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.windSpdAvg.p, fieldName: "windSpdAvg", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.windGust.p, fieldName: "windGust", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.windGust10.p, fieldName: "windGust10", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.vshear.p, fieldName: "vshear", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.hshear.p, fieldName: "hshear", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.radVel.p, fieldName: "radVel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.radVelBeam1.p, fieldName: "radVelBeam1", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.radVelBeam2.p, fieldName: "radVelBeam2", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.radVelBeam3.p, fieldName: "radVelBeam3", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.radVelBeam4.p, fieldName: "radVelBeam4", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.radVelBeam5.p, fieldName: "radVelBeam5", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.windDir.p, fieldName: "windDir", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.windDirAvg.p, fieldName: "windDirAvg", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.windDirPeak.p, fieldName: "windDirPeak", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.windDirPeak10.p, fieldName: "windDirPeak10", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.windChill.p, fieldName: "windChill", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dirDev.p, fieldName: "dirDev", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.windVar.p, fieldName: "windVar", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.windCov.p, fieldName: "windCov", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.cloudCover.p, fieldName: "cloudCover", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.cloudHght.p, fieldName: "cloudHght", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.actWeather.p, fieldName: "actWeather", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.weatherDesc.p, fieldName: "weatherDesc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.weatherInt.p, fieldName: "weatherInt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rawMetar.p, fieldName: "rawMetar", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rawTaf.p, fieldName: "rawTaf", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.qnh.p, fieldName: "qnh", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.visibility.p, fieldName: "visibility", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.temperature.p, fieldName: "temperature", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.soilTemp.p, fieldName: "soilTemp", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.barPress.p, fieldName: "barPress", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.precipRate.p, fieldName: "precipRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rainHour.p, fieldName: "rainHour", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.solarRad.p, fieldName: "solarRad", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.difRad.p, fieldName: "difRad", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.refRad.p, fieldName: "refRad", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senlat.p, fieldName: "senlat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senlon.p, fieldName: "senlon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senalt.p, fieldName: "senalt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dewPoint.p, fieldName: "dewPoint", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.relHumidity.p, fieldName: "relHumidity", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.indexRefraction.p, fieldName: "indexRefraction", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.soilMoisture.p, fieldName: "soilMoisture", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.surroundingWeather.p, fieldName: "surroundingWeather", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.weatherAmp.p, fieldName: "weatherAmp", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.contrailHghtLower.p, fieldName: "contrailHghtLower", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.contrailHghtUpper.p, fieldName: "contrailHghtUpper", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.icingUpperLimit.p, fieldName: "icingUpperLimit", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.icingLowerLimit.p, fieldName: "icingLowerLimit", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.enRouteWeather.p, fieldName: "enRouteWeather", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ccEvent.p, fieldName: "ccEvent", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.srcTyps.p, fieldName: "srcTyps", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.srcIds.p, fieldName: "srcIds", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: WeatherReport_Ingest_dataMode_Enum.self)
    _v.finish()
  }
}

