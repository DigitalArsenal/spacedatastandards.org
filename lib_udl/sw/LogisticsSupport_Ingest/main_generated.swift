// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum LogisticsSupport_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: LogisticsSupport_Ingest_dataMode_Enum { return .exercise }
  public static var min: LogisticsSupport_Ingest_dataMode_Enum { return .real }
}


///  /// Comprehensive logistical details concerning the planned support of maintenance operations required by an aircraft, including transportation information, supplies coordination, and service personnel.
public struct LogisticsSupport_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "LOGI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: LogisticsSupport_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case extSystemId = 8
    case tailNumber = 10
    case aircraftMds = 12
    case currIcao = 14
    case suppIcao = 16
    case rptCreatedTime = 18
    case rptClosedTime = 20
    case meTime = 22
    case mcTime = 24
    case logisticAction = 26
    case logisticsRecordId = 28
    case etic = 30
    case etmc = 32
    case maintStatusCode = 34
    case reopenFlag = 36
    case owner = 38
    case logisticsRemarks = 40
    case logisticsDiscrepancyInfos = 42
    case logisticsTransportationPlans = 44
    case logisticsSupportItems = 46
    case origNetwork = 48
    case createdAt = 50
    case createdBy = 52
    case updatedAt = 54
    case updatedBy = 56
    case source = 58
    case origin = 60
    case dataMode = 62
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: LOGISTICS-SUPPORT-DETAILS UUID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Optional system identifier from external systs. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: GDSSBL012307131347070165
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var extSystemId: String? { let o = _accessor.offset(VTOFFSET.extSystemId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var extSystemIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.extSystemId.v) }
  ///  The tail number of the aircraft that is the subject of this LogisticsSupportDetails record.
  ///  Example: /// Example: 99290
  ///  Constraints: Minimum length = 0, Maximum length = 7
  public var tailNumber: String? { let o = _accessor.offset(VTOFFSET.tailNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tailNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tailNumber.v) }
  ///  The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  ///  Example: /// Example: CO17A
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var aircraftMds: String? { let o = _accessor.offset(VTOFFSET.aircraftMds.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aircraftMdsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aircraftMds.v) }
  ///  The current ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
  ///  Example: /// Example: KCOS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var currIcao: String? { let o = _accessor.offset(VTOFFSET.currIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var currIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.currIcao.v) }
  ///  The supplying ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
  ///  Example: /// Example: KCOS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var suppIcao: String? { let o = _accessor.offset(VTOFFSET.suppIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var suppIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.suppIcao.v) }
  ///  The time this report was created, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-13T13:47:00.123Z
  ///  Constraints: No constraints specified.
  public var rptCreatedTime: String? { let o = _accessor.offset(VTOFFSET.rptCreatedTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rptCreatedTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rptCreatedTime.v) }
  ///  The time this report was closed, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-13T13:47:00.123Z
  ///  Constraints: No constraints specified.
  public var rptClosedTime: String? { let o = _accessor.offset(VTOFFSET.rptClosedTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rptClosedTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rptClosedTime.v) }
  ///  The time indicating when a given aircraft breaks for a mission essential reason. This datetime should be in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-13T13:47:00.123Z
  ///  Constraints: No constraints specified.
  public var meTime: String? { let o = _accessor.offset(VTOFFSET.meTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var meTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.meTime.v) }
  ///  The time indicating when all mission essential problems with a given aircraft have been fixed and is mission capable. This datetime should be in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-13T13:47:00.123Z
  ///  Constraints: No constraints specified.
  public var mcTime: String? { let o = _accessor.offset(VTOFFSET.mcTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var mcTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.mcTime.v) }
  ///  This field identifies the pacing event for bringing the aircraft to Mission Capable status.  It is used in calculating the Estimated Time Mission Capable (ETMC) value.  Acceptable values are WA (Will Advise), INW (In Work), P+hhh.h (where P=parts and hhh.h is the number of hours up to 999 plus tenths of hours), EQ+hhh.h (EQ=equipment), MRT+hhh.h (MRT=maintenance recovery team).
  ///  Example: /// Example: WA
  ///  Constraints: Minimum length = 0, Maximum length = 9
  public var logisticAction: String? { let o = _accessor.offset(VTOFFSET.logisticAction.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var logisticActionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.logisticAction.v) }
  ///  The identifier that represents a Logistics Master Record.
  ///  Example: /// Example: L62017
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var logisticsRecordId: String? { let o = _accessor.offset(VTOFFSET.logisticsRecordId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var logisticsRecordIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.logisticsRecordId.v) }
  ///  The estimated time mission capable for the aircraft, in ISO 8601 UCT format with millisecond precision. This is the estimated time when the aircraft is mission ready.
  ///  Example: /// Example: 2023-07-13T13:47:00.123Z
  ///  Constraints: No constraints specified.
  public var etic: String? { let o = _accessor.offset(VTOFFSET.etic.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eticSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.etic.v) }
  ///  Logistics estimated time mission capable.
  ///  Example: /// Example: 2023-07-13T13:47:00.123Z
  ///  Constraints: No constraints specified.
  public var etmc: String? { let o = _accessor.offset(VTOFFSET.etmc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var etmcSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.etmc.v) }
  ///  The maintenance status code of the aircraft which may be based on pilot descriptions or evaluation codes. Contact the source provider for details.
  ///  Example: /// Example: NMCMU
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var maintStatusCode: String? { let o = _accessor.offset(VTOFFSET.maintStatusCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var maintStatusCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.maintStatusCode.v) }
  ///  This is used to indicate whether a closed master record has been reopened.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var reopenFlag: Bool { let o = _accessor.offset(VTOFFSET.reopenFlag.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The organization that owns this logistics record.
  ///  Example: /// Example: EXAMPLE_OWNER
  ///  Constraints: Minimum length = 0, Maximum length = 250
  public var owner: String? { let o = _accessor.offset(VTOFFSET.owner.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ownerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.owner.v) }
  ///  Remarks associated with this LogisticsSupport record.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasLogisticsRemarks: Bool { let o = _accessor.offset(VTOFFSET.logisticsRemarks.v); return o == 0 ? false : true }
  public var logisticsRemarksCount: Int32 { let o = _accessor.offset(VTOFFSET.logisticsRemarks.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func logisticsRemarks(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.logisticsRemarks.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Discrepancy information associated with this LogisticsSupport record.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasLogisticsDiscrepancyInfos: Bool { let o = _accessor.offset(VTOFFSET.logisticsDiscrepancyInfos.v); return o == 0 ? false : true }
  public var logisticsDiscrepancyInfosCount: Int32 { let o = _accessor.offset(VTOFFSET.logisticsDiscrepancyInfos.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func logisticsDiscrepancyInfos(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.logisticsDiscrepancyInfos.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasLogisticsTransportationPlans: Bool { let o = _accessor.offset(VTOFFSET.logisticsTransportationPlans.v); return o == 0 ? false : true }
  public var logisticsTransportationPlansCount: Int32 { let o = _accessor.offset(VTOFFSET.logisticsTransportationPlans.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func logisticsTransportationPlans(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.logisticsTransportationPlans.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Support items associated with this LogisticsSupport record.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasLogisticsSupportItems: Bool { let o = _accessor.offset(VTOFFSET.logisticsSupportItems.v); return o == 0 ? false : true }
  public var logisticsSupportItemsCount: Int32 { let o = _accessor.offset(VTOFFSET.logisticsSupportItems.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func logisticsSupportItems(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.logisticsSupportItems.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: LogisticsSupport_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : LogisticsSupport_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startLogisticsSupport_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 30) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(extSystemId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: extSystemId, at: VTOFFSET.extSystemId.p) }
  public static func add(tailNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tailNumber, at: VTOFFSET.tailNumber.p) }
  public static func add(aircraftMds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aircraftMds, at: VTOFFSET.aircraftMds.p) }
  public static func add(currIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: currIcao, at: VTOFFSET.currIcao.p) }
  public static func add(suppIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: suppIcao, at: VTOFFSET.suppIcao.p) }
  public static func add(rptCreatedTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rptCreatedTime, at: VTOFFSET.rptCreatedTime.p) }
  public static func add(rptClosedTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rptClosedTime, at: VTOFFSET.rptClosedTime.p) }
  public static func add(meTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: meTime, at: VTOFFSET.meTime.p) }
  public static func add(mcTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mcTime, at: VTOFFSET.mcTime.p) }
  public static func add(logisticAction: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: logisticAction, at: VTOFFSET.logisticAction.p) }
  public static func add(logisticsRecordId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: logisticsRecordId, at: VTOFFSET.logisticsRecordId.p) }
  public static func add(etic: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: etic, at: VTOFFSET.etic.p) }
  public static func add(etmc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: etmc, at: VTOFFSET.etmc.p) }
  public static func add(maintStatusCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: maintStatusCode, at: VTOFFSET.maintStatusCode.p) }
  public static func add(reopenFlag: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: reopenFlag, def: false,
   at: VTOFFSET.reopenFlag.p) }
  public static func add(owner: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: owner, at: VTOFFSET.owner.p) }
  public static func addVectorOf(logisticsRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: logisticsRemarks, at: VTOFFSET.logisticsRemarks.p) }
  public static func addVectorOf(logisticsDiscrepancyInfos: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: logisticsDiscrepancyInfos, at: VTOFFSET.logisticsDiscrepancyInfos.p) }
  public static func addVectorOf(logisticsTransportationPlans: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: logisticsTransportationPlans, at: VTOFFSET.logisticsTransportationPlans.p) }
  public static func addVectorOf(logisticsSupportItems: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: logisticsSupportItems, at: VTOFFSET.logisticsSupportItems.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: LogisticsSupport_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endLogisticsSupport_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createLogisticsSupport_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    extSystemIdOffset extSystemId: Offset = Offset(),
    tailNumberOffset tailNumber: Offset = Offset(),
    aircraftMdsOffset aircraftMds: Offset = Offset(),
    currIcaoOffset currIcao: Offset = Offset(),
    suppIcaoOffset suppIcao: Offset = Offset(),
    rptCreatedTimeOffset rptCreatedTime: Offset = Offset(),
    rptClosedTimeOffset rptClosedTime: Offset = Offset(),
    meTimeOffset meTime: Offset = Offset(),
    mcTimeOffset mcTime: Offset = Offset(),
    logisticActionOffset logisticAction: Offset = Offset(),
    logisticsRecordIdOffset logisticsRecordId: Offset = Offset(),
    eticOffset etic: Offset = Offset(),
    etmcOffset etmc: Offset = Offset(),
    maintStatusCodeOffset maintStatusCode: Offset = Offset(),
    reopenFlag: Bool = false,
    ownerOffset owner: Offset = Offset(),
    logisticsRemarksVectorOffset logisticsRemarks: Offset = Offset(),
    logisticsDiscrepancyInfosVectorOffset logisticsDiscrepancyInfos: Offset = Offset(),
    logisticsTransportationPlansVectorOffset logisticsTransportationPlans: Offset = Offset(),
    logisticsSupportItemsVectorOffset logisticsSupportItems: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: LogisticsSupport_Ingest_dataMode_Enum = .real
  ) -> Offset {
    let __start = LogisticsSupport_Ingest.startLogisticsSupport_Ingest(&fbb)
    LogisticsSupport_Ingest.add(id: id, &fbb)
    LogisticsSupport_Ingest.add(classificationMarking: classificationMarking, &fbb)
    LogisticsSupport_Ingest.add(extSystemId: extSystemId, &fbb)
    LogisticsSupport_Ingest.add(tailNumber: tailNumber, &fbb)
    LogisticsSupport_Ingest.add(aircraftMds: aircraftMds, &fbb)
    LogisticsSupport_Ingest.add(currIcao: currIcao, &fbb)
    LogisticsSupport_Ingest.add(suppIcao: suppIcao, &fbb)
    LogisticsSupport_Ingest.add(rptCreatedTime: rptCreatedTime, &fbb)
    LogisticsSupport_Ingest.add(rptClosedTime: rptClosedTime, &fbb)
    LogisticsSupport_Ingest.add(meTime: meTime, &fbb)
    LogisticsSupport_Ingest.add(mcTime: mcTime, &fbb)
    LogisticsSupport_Ingest.add(logisticAction: logisticAction, &fbb)
    LogisticsSupport_Ingest.add(logisticsRecordId: logisticsRecordId, &fbb)
    LogisticsSupport_Ingest.add(etic: etic, &fbb)
    LogisticsSupport_Ingest.add(etmc: etmc, &fbb)
    LogisticsSupport_Ingest.add(maintStatusCode: maintStatusCode, &fbb)
    LogisticsSupport_Ingest.add(reopenFlag: reopenFlag, &fbb)
    LogisticsSupport_Ingest.add(owner: owner, &fbb)
    LogisticsSupport_Ingest.addVectorOf(logisticsRemarks: logisticsRemarks, &fbb)
    LogisticsSupport_Ingest.addVectorOf(logisticsDiscrepancyInfos: logisticsDiscrepancyInfos, &fbb)
    LogisticsSupport_Ingest.addVectorOf(logisticsTransportationPlans: logisticsTransportationPlans, &fbb)
    LogisticsSupport_Ingest.addVectorOf(logisticsSupportItems: logisticsSupportItems, &fbb)
    LogisticsSupport_Ingest.add(origNetwork: origNetwork, &fbb)
    LogisticsSupport_Ingest.add(createdAt: createdAt, &fbb)
    LogisticsSupport_Ingest.add(createdBy: createdBy, &fbb)
    LogisticsSupport_Ingest.add(updatedAt: updatedAt, &fbb)
    LogisticsSupport_Ingest.add(updatedBy: updatedBy, &fbb)
    LogisticsSupport_Ingest.add(source: source, &fbb)
    LogisticsSupport_Ingest.add(origin: origin, &fbb)
    LogisticsSupport_Ingest.add(dataMode: dataMode, &fbb)
    return LogisticsSupport_Ingest.endLogisticsSupport_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.extSystemId.p, fieldName: "extSystemId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tailNumber.p, fieldName: "tailNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aircraftMds.p, fieldName: "aircraftMds", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.currIcao.p, fieldName: "currIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.suppIcao.p, fieldName: "suppIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rptCreatedTime.p, fieldName: "rptCreatedTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rptClosedTime.p, fieldName: "rptClosedTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.meTime.p, fieldName: "meTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.mcTime.p, fieldName: "mcTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.logisticAction.p, fieldName: "logisticAction", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.logisticsRecordId.p, fieldName: "logisticsRecordId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.etic.p, fieldName: "etic", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.etmc.p, fieldName: "etmc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.maintStatusCode.p, fieldName: "maintStatusCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reopenFlag.p, fieldName: "reopenFlag", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.owner.p, fieldName: "owner", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.logisticsRemarks.p, fieldName: "logisticsRemarks", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.logisticsDiscrepancyInfos.p, fieldName: "logisticsDiscrepancyInfos", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.logisticsTransportationPlans.p, fieldName: "logisticsTransportationPlans", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.logisticsSupportItems.p, fieldName: "logisticsSupportItems", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: LogisticsSupport_Ingest_dataMode_Enum.self)
    _v.finish()
  }
}

