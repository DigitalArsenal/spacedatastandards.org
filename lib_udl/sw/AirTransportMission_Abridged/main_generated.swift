// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum AirTransportMission_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: AirTransportMission_Abridged_dataMode_Enum { return .exercise }
  public static var min: AirTransportMission_Abridged_dataMode_Enum { return .real }
}


///  /// The information in an Air Transport Mission contains unique identification, description of the mission objective, aircraft and crew assignments, mission alias, embarkation/debarkation cargo locations, priority, and other mission characteristics.
public struct AirTransportMission_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRT" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AirTransportMission_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case origMissionId = 8
    case amcMissionId = 10
    case gdssMissionId = 12
    case prevMissionId = 14
    case prevAmcmissionId = 16
    case nextMissionId = 18
    case nextAmcmissionId = 20
    case objective = 22
    case purpose = 24
    case jcsPriority = 26
    case cw = 28
    case type = 30
    case firstPickUp = 32
    case lastDropOff = 34
    case alias = 36
    case callSign = 38
    case operation = 40
    case naf = 42
    case allocatedUnit = 44
    case loadCategoryType = 46
    case state = 48
    case sourceSysDeviation = 50
    case apacsId = 52
    case dipWorksheetName = 54
    case createdAt = 56
    case createdBy = 58
    case updatedAt = 60
    case updatedBy = 62
    case sourceDl = 64
    case source = 66
    case origin = 68
    case dataMode = 70
    case origNetwork = 72
    case requirements = 74
    case remarks = 76
    case hazMat = 78
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The mission identifier provided by the originating source.
  ///  Example: /// Example: 614bebb6-a62e-053c-ca51-e79f8a402b28
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origMissionId: String? { let o = _accessor.offset(VTOFFSET.origMissionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origMissionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origMissionId.v) }
  ///  Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) Encode/Decode procedures.
  ///  Example: /// Example: AJM7939B1123
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var amcMissionId: String? { let o = _accessor.offset(VTOFFSET.amcMissionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var amcMissionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.amcMissionId.v) }
  ///  Global Decision Support System (GDSS) mission unique identifier.
  ///  Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var gdssMissionId: String? { let o = _accessor.offset(VTOFFSET.gdssMissionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var gdssMissionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.gdssMissionId.v) }
  ///  Unique identifier of the previous air transport mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
  ///  Example: /// Example: a77055df-edc3-4047-a5fa-604f80b9fe3c
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var prevMissionId: String? { let o = _accessor.offset(VTOFFSET.prevMissionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var prevMissionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.prevMissionId.v) }
  ///  Air Mobility Command (AMC) mission identifier of the previous air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
  ///  Example: /// Example: AJM7939B1122
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var prevAmcmissionId: String? { let o = _accessor.offset(VTOFFSET.prevAmcmissionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var prevAmcmissionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.prevAmcmissionId.v) }
  ///  Unique identifier of the next mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
  ///  Example: /// Example: 186e5658-1079-45c0-bccc-02d2fa31b663
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var nextMissionId: String? { let o = _accessor.offset(VTOFFSET.nextMissionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nextMissionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.nextMissionId.v) }
  ///  Air Mobility Command (AMC) mission identifier of the next air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
  ///  Example: /// Example: AJM7939B1124
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var nextAmcmissionId: String? { let o = _accessor.offset(VTOFFSET.nextAmcmissionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nextAmcmissionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.nextAmcmissionId.v) }
  ///  A description of this mission's objective.
  ///  Example: /// Example: Deliver water to island X.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var objective: String? { let o = _accessor.offset(VTOFFSET.objective.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objectiveSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.objective.v) }
  ///  A description of this mission's purpose (e.g. why this mission needs to happen, what is the mission supporting, etc.).
  ///  Example: /// Example: People at island X need water ASAP. Two previous attempts failed due to weather.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var purpose: String? { let o = _accessor.offset(VTOFFSET.purpose.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var purposeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.purpose.v) }
  ///  Highest Joint Chiefs of Staff priority of this mission.
  ///  Example: /// Example: 1A3
  ///  Constraints: Minimum length = 3, Maximum length = 3
  public var jcsPriority: String? { let o = _accessor.offset(VTOFFSET.jcsPriority.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var jcsPrioritySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.jcsPriority.v) }
  ///  Flag indicating this is a close watch mission.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var cw: Bool { let o = _accessor.offset(VTOFFSET.cw.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The type of mission (e.g. SAAM, CHNL, etc.).
  ///  Example: /// Example: SAAM
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  The International Civil Aviation Organization (ICAO) site code of first cargo pick up.
  ///  Example: /// Example: KFAY
  ///  Constraints: Minimum length = 4, Maximum length = 4
  public var firstPickUp: String? { let o = _accessor.offset(VTOFFSET.firstPickUp.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var firstPickUpSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.firstPickUp.v) }
  ///  The International Civil Aviation Organization (ICAO) site code of last cargo drop off.
  ///  Example: /// Example: PGUA
  ///  Constraints: Minimum length = 4, Maximum length = 4
  public var lastDropOff: String? { let o = _accessor.offset(VTOFFSET.lastDropOff.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastDropOffSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastDropOff.v) }
  ///  Mission alias.
  ///  Example: /// Example: PACIFIC DEPLOY / CHAP 3 MOVEMENT
  ///  Constraints: Minimum length = 0, Maximum length = 48
  public var alias: String? { let o = _accessor.offset(VTOFFSET.alias.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aliasSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.alias.v) }
  ///  The call sign for this mission.
  ///  Example: /// Example: RCH123
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var callSign: String? { let o = _accessor.offset(VTOFFSET.callSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var callSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.callSign.v) }
  ///  The name of the operation that this mission supports.
  ///  Example: /// Example: Golden Eye
  ///  Constraints: Minimum length = 0, Maximum length = 100
  public var operation: String? { let o = _accessor.offset(VTOFFSET.operation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var operationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.operation.v) }
  ///  Numbered Air Force (NAF) organization that owns the mission.
  ///  Example: /// Example: 18AF
  ///  Constraints: Minimum length = 0, Maximum length = 100
  public var naf: String? { let o = _accessor.offset(VTOFFSET.naf.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nafSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.naf.v) }
  ///  The unit the mission is allocated to.
  ///  Example: /// Example: 437 AEW
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var allocatedUnit: String? { let o = _accessor.offset(VTOFFSET.allocatedUnit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var allocatedUnitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.allocatedUnit.v) }
  ///  Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
  ///  Example: /// Example: MIXED
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var loadCategoryType: String? { let o = _accessor.offset(VTOFFSET.loadCategoryType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var loadCategoryTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.loadCategoryType.v) }
  ///  Current state of the mission.
  ///  Example: /// Example: EXECUTION
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var state: String? { let o = _accessor.offset(VTOFFSET.state.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var stateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.state.v) }
  ///  The number of minutes a mission is off schedule based on the source system's business rules. Positive numbers are early, negative numbers are late.
  ///  Example: /// Example: -90.12
  ///  Constraints: No constraints specified.
  public var sourceSysDeviation: Double { let o = _accessor.offset(VTOFFSET.sourceSysDeviation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve clearance requests.
  ///  Example: /// Example: 1083034
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var apacsId: String? { let o = _accessor.offset(VTOFFSET.apacsId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var apacsIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.apacsId.v) }
  ///  Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
  ///  Example: /// Example: G2-182402-AB
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var dipWorksheetName: String? { let o = _accessor.offset(VTOFFSET.dipWorksheetName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dipWorksheetNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dipWorksheetName.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: AirTransportMission_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : AirTransportMission_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasRequirements: Bool { let o = _accessor.offset(VTOFFSET.requirements.v); return o == 0 ? false : true }
  public var requirementsCount: Int32 { let o = _accessor.offset(VTOFFSET.requirements.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func requirements(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.requirements.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasRemarks: Bool { let o = _accessor.offset(VTOFFSET.remarks.v); return o == 0 ? false : true }
  public var remarksCount: Int32 { let o = _accessor.offset(VTOFFSET.remarks.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func remarks(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.remarks.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Collection of Hazardous Material information associated with this Air Transport Mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasHazMat: Bool { let o = _accessor.offset(VTOFFSET.hazMat.v); return o == 0 ? false : true }
  public var hazMatCount: Int32 { let o = _accessor.offset(VTOFFSET.hazMat.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func hazMat(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.hazMat.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startAirTransportMission_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 38) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(origMissionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origMissionId, at: VTOFFSET.origMissionId.p) }
  public static func add(amcMissionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: amcMissionId, at: VTOFFSET.amcMissionId.p) }
  public static func add(gdssMissionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: gdssMissionId, at: VTOFFSET.gdssMissionId.p) }
  public static func add(prevMissionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: prevMissionId, at: VTOFFSET.prevMissionId.p) }
  public static func add(prevAmcmissionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: prevAmcmissionId, at: VTOFFSET.prevAmcmissionId.p) }
  public static func add(nextMissionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: nextMissionId, at: VTOFFSET.nextMissionId.p) }
  public static func add(nextAmcmissionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: nextAmcmissionId, at: VTOFFSET.nextAmcmissionId.p) }
  public static func add(objective: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: objective, at: VTOFFSET.objective.p) }
  public static func add(purpose: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: purpose, at: VTOFFSET.purpose.p) }
  public static func add(jcsPriority: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: jcsPriority, at: VTOFFSET.jcsPriority.p) }
  public static func add(cw: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cw, def: false,
   at: VTOFFSET.cw.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(firstPickUp: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: firstPickUp, at: VTOFFSET.firstPickUp.p) }
  public static func add(lastDropOff: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastDropOff, at: VTOFFSET.lastDropOff.p) }
  public static func add(alias: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: alias, at: VTOFFSET.alias.p) }
  public static func add(callSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callSign, at: VTOFFSET.callSign.p) }
  public static func add(operation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: operation, at: VTOFFSET.operation.p) }
  public static func add(naf: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: naf, at: VTOFFSET.naf.p) }
  public static func add(allocatedUnit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: allocatedUnit, at: VTOFFSET.allocatedUnit.p) }
  public static func add(loadCategoryType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: loadCategoryType, at: VTOFFSET.loadCategoryType.p) }
  public static func add(state: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: state, at: VTOFFSET.state.p) }
  public static func add(sourceSysDeviation: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sourceSysDeviation, def: 0.0, at: VTOFFSET.sourceSysDeviation.p) }
  public static func add(apacsId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apacsId, at: VTOFFSET.apacsId.p) }
  public static func add(dipWorksheetName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dipWorksheetName, at: VTOFFSET.dipWorksheetName.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: AirTransportMission_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func addVectorOf(requirements: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: requirements, at: VTOFFSET.requirements.p) }
  public static func addVectorOf(remarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: remarks, at: VTOFFSET.remarks.p) }
  public static func addVectorOf(hazMat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hazMat, at: VTOFFSET.hazMat.p) }
  public static func endAirTransportMission_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAirTransportMission_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    origMissionIdOffset origMissionId: Offset = Offset(),
    amcMissionIdOffset amcMissionId: Offset = Offset(),
    gdssMissionIdOffset gdssMissionId: Offset = Offset(),
    prevMissionIdOffset prevMissionId: Offset = Offset(),
    prevAmcmissionIdOffset prevAmcmissionId: Offset = Offset(),
    nextMissionIdOffset nextMissionId: Offset = Offset(),
    nextAmcmissionIdOffset nextAmcmissionId: Offset = Offset(),
    objectiveOffset objective: Offset = Offset(),
    purposeOffset purpose: Offset = Offset(),
    jcsPriorityOffset jcsPriority: Offset = Offset(),
    cw: Bool = false,
    typeOffset type: Offset = Offset(),
    firstPickUpOffset firstPickUp: Offset = Offset(),
    lastDropOffOffset lastDropOff: Offset = Offset(),
    aliasOffset alias: Offset = Offset(),
    callSignOffset callSign: Offset = Offset(),
    operationOffset operation: Offset = Offset(),
    nafOffset naf: Offset = Offset(),
    allocatedUnitOffset allocatedUnit: Offset = Offset(),
    loadCategoryTypeOffset loadCategoryType: Offset = Offset(),
    stateOffset state: Offset = Offset(),
    sourceSysDeviation: Double = 0.0,
    apacsIdOffset apacsId: Offset = Offset(),
    dipWorksheetNameOffset dipWorksheetName: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: AirTransportMission_Abridged_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset(),
    requirementsVectorOffset requirements: Offset = Offset(),
    remarksVectorOffset remarks: Offset = Offset(),
    hazMatVectorOffset hazMat: Offset = Offset()
  ) -> Offset {
    let __start = AirTransportMission_Abridged.startAirTransportMission_Abridged(&fbb)
    AirTransportMission_Abridged.add(id: id, &fbb)
    AirTransportMission_Abridged.add(classificationMarking: classificationMarking, &fbb)
    AirTransportMission_Abridged.add(origMissionId: origMissionId, &fbb)
    AirTransportMission_Abridged.add(amcMissionId: amcMissionId, &fbb)
    AirTransportMission_Abridged.add(gdssMissionId: gdssMissionId, &fbb)
    AirTransportMission_Abridged.add(prevMissionId: prevMissionId, &fbb)
    AirTransportMission_Abridged.add(prevAmcmissionId: prevAmcmissionId, &fbb)
    AirTransportMission_Abridged.add(nextMissionId: nextMissionId, &fbb)
    AirTransportMission_Abridged.add(nextAmcmissionId: nextAmcmissionId, &fbb)
    AirTransportMission_Abridged.add(objective: objective, &fbb)
    AirTransportMission_Abridged.add(purpose: purpose, &fbb)
    AirTransportMission_Abridged.add(jcsPriority: jcsPriority, &fbb)
    AirTransportMission_Abridged.add(cw: cw, &fbb)
    AirTransportMission_Abridged.add(type: type, &fbb)
    AirTransportMission_Abridged.add(firstPickUp: firstPickUp, &fbb)
    AirTransportMission_Abridged.add(lastDropOff: lastDropOff, &fbb)
    AirTransportMission_Abridged.add(alias: alias, &fbb)
    AirTransportMission_Abridged.add(callSign: callSign, &fbb)
    AirTransportMission_Abridged.add(operation: operation, &fbb)
    AirTransportMission_Abridged.add(naf: naf, &fbb)
    AirTransportMission_Abridged.add(allocatedUnit: allocatedUnit, &fbb)
    AirTransportMission_Abridged.add(loadCategoryType: loadCategoryType, &fbb)
    AirTransportMission_Abridged.add(state: state, &fbb)
    AirTransportMission_Abridged.add(sourceSysDeviation: sourceSysDeviation, &fbb)
    AirTransportMission_Abridged.add(apacsId: apacsId, &fbb)
    AirTransportMission_Abridged.add(dipWorksheetName: dipWorksheetName, &fbb)
    AirTransportMission_Abridged.add(createdAt: createdAt, &fbb)
    AirTransportMission_Abridged.add(createdBy: createdBy, &fbb)
    AirTransportMission_Abridged.add(updatedAt: updatedAt, &fbb)
    AirTransportMission_Abridged.add(updatedBy: updatedBy, &fbb)
    AirTransportMission_Abridged.add(sourceDl: sourceDl, &fbb)
    AirTransportMission_Abridged.add(source: source, &fbb)
    AirTransportMission_Abridged.add(origin: origin, &fbb)
    AirTransportMission_Abridged.add(dataMode: dataMode, &fbb)
    AirTransportMission_Abridged.add(origNetwork: origNetwork, &fbb)
    AirTransportMission_Abridged.addVectorOf(requirements: requirements, &fbb)
    AirTransportMission_Abridged.addVectorOf(remarks: remarks, &fbb)
    AirTransportMission_Abridged.addVectorOf(hazMat: hazMat, &fbb)
    return AirTransportMission_Abridged.endAirTransportMission_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origMissionId.p, fieldName: "origMissionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.amcMissionId.p, fieldName: "amcMissionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.gdssMissionId.p, fieldName: "gdssMissionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.prevMissionId.p, fieldName: "prevMissionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.prevAmcmissionId.p, fieldName: "prevAmcmissionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.nextMissionId.p, fieldName: "nextMissionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.nextAmcmissionId.p, fieldName: "nextAmcmissionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objective.p, fieldName: "objective", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.purpose.p, fieldName: "purpose", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.jcsPriority.p, fieldName: "jcsPriority", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cw.p, fieldName: "cw", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.firstPickUp.p, fieldName: "firstPickUp", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lastDropOff.p, fieldName: "lastDropOff", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.alias.p, fieldName: "alias", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.callSign.p, fieldName: "callSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.operation.p, fieldName: "operation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.naf.p, fieldName: "naf", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.allocatedUnit.p, fieldName: "allocatedUnit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.loadCategoryType.p, fieldName: "loadCategoryType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.state.p, fieldName: "state", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceSysDeviation.p, fieldName: "sourceSysDeviation", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.apacsId.p, fieldName: "apacsId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dipWorksheetName.p, fieldName: "dipWorksheetName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: AirTransportMission_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.requirements.p, fieldName: "requirements", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.remarks.p, fieldName: "remarks", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.hazMat.p, fieldName: "hazMat", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

