// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Describes the E, F1, and F2 layers as parabolic-shape segments.
public struct IonoObservationDensityProfileParabolicItem_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "IONO" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: IonoObservationDensityProfileParabolicItem_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case layer = 4
    case f = 6
    case z = 8
    case y = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Ionospheric plasma layer (E, F1, or F2).
  ///  Example: /// Example: E
  ///  Constraints: No constraints specified.
  public var layer: String? { let o = _accessor.offset(VTOFFSET.layer.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var layerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.layer.v) }
  ///  Plasma frequency at the layer peak, in MHz.
  ///  Example: /// Example: 3.621
  ///  Constraints: No constraints specified.
  public var f: Double { let o = _accessor.offset(VTOFFSET.f.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Height of the layer peak, in kilometers.
  ///  Example: /// Example: 110.2
  ///  Constraints: No constraints specified.
  public var z: Double { let o = _accessor.offset(VTOFFSET.z.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Half-thickness of the layer, in kilometers.
  ///  Example: /// Example: 11.1
  ///  Constraints: No constraints specified.
  public var y: Double { let o = _accessor.offset(VTOFFSET.y.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  public static func startIonoObservationDensityProfileParabolicItem_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(layer: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: layer, at: VTOFFSET.layer.p) }
  public static func add(f: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: f, def: 0.0, at: VTOFFSET.f.p) }
  public static func add(z: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: z, def: 0.0, at: VTOFFSET.z.p) }
  public static func add(y: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: y, def: 0.0, at: VTOFFSET.y.p) }
  public static func endIonoObservationDensityProfileParabolicItem_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createIonoObservationDensityProfileParabolicItem_Full(
    _ fbb: inout FlatBufferBuilder,
    layerOffset layer: Offset = Offset(),
    f: Double = 0.0,
    z: Double = 0.0,
    y: Double = 0.0
  ) -> Offset {
    let __start = IonoObservationDensityProfileParabolicItem_Full.startIonoObservationDensityProfileParabolicItem_Full(&fbb)
    IonoObservationDensityProfileParabolicItem_Full.add(layer: layer, &fbb)
    IonoObservationDensityProfileParabolicItem_Full.add(f: f, &fbb)
    IonoObservationDensityProfileParabolicItem_Full.add(z: z, &fbb)
    IonoObservationDensityProfileParabolicItem_Full.add(y: y, &fbb)
    return IonoObservationDensityProfileParabolicItem_Full.endIonoObservationDensityProfileParabolicItem_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.layer.p, fieldName: "layer", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.f.p, fieldName: "f", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.z.p, fieldName: "z", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.y.p, fieldName: "y", required: false, type: Double.self)
    _v.finish()
  }
}

