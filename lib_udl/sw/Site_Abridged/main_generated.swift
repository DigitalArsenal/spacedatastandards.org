// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Site_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Site_Abridged_dataMode_Enum { return .exercise }
  public static var min: Site_Abridged_dataMode_Enum { return .real }
}


///  /// Properties and characteristics of a site entity, such as an airbase, airfield, naval station, etc.
public struct Site_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SITE" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Site_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case idEntity = 6
    case idParentSite = 8
    case classificationMarking = 10
    case origSiteId = 12
    case origLzId = 14
    case pin = 16
    case type = 18
    case usage = 20
    case lzUsage = 22
    case name = 24
    case coordDatum = 26
    case coord = 28
    case coordDerivAcc = 30
    case osuffix = 32
    case iata = 34
    case icao = 36
    case faa = 38
    case airDefArea = 40
    case utm = 42
    case milGridSys = 44
    case milGrid = 46
    case catCode = 48
    case catText = 50
    case wac = 52
    case polSubdiv = 54
    case geoArea = 56
    case geoidalMslSep = 58
    case allegiance = 60
    case altAllegiance = 62
    case classRating = 64
    case fpa = 66
    case beNumber = 68
    case runways = 70
    case maxRunwayLength = 72
    case condition = 74
    case conditionAvail = 76
    case operStatus = 78
    case grade = 80
    case activity = 82
    case functPrimary = 84
    case msnPrimary = 86
    case msnPrimarySpec = 88
    case nucCap = 90
    case ident = 92
    case elevMsl = 94
    case elevMslConfLvl = 96
    case elevMslDerivAcc = 98
    case vegHt = 100
    case vegType = 102
    case popArea = 104
    case popAreaProx = 106
    case notes = 108
    case resProd = 110
    case eval = 112
    case reviewDate = 114
    case recStatus = 116
    case symCode = 118
    case referenceDoc = 120
    case createdAt = 122
    case createdBy = 124
    case source = 126
    case origin = 128
    case origNetwork = 130
    case dataMode = 132
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SITE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Unique identifier of the parent entity. idEntity is required for Put.
  ///  Example: /// Example: ENTITY-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idEntity: String? { let o = _accessor.offset(VTOFFSET.idEntity.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idEntitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idEntity.v) }
  ///  Unique identifier of the Parent Site record associated with this Site record.
  ///  Example: /// Example: ID-Parent-Site
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idParentSite: String? { let o = _accessor.offset(VTOFFSET.idParentSite.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idParentSiteSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idParentSite.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the Site record from the originating system.
  ///  Example: /// Example: ORIG-SITE-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origSiteId: String? { let o = _accessor.offset(VTOFFSET.origSiteId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSiteIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSiteId.v) }
  ///  Unique identifier of the LZ record from the originating system.
  ///  Example: /// Example: ORIG-LZ-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origLzId: String? { let o = _accessor.offset(VTOFFSET.origLzId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origLzIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origLzId.v) }
  ///  Site number of a specific electronic site or its associated equipment.
  ///  Example: /// Example: 25200
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var pin: String? { let o = _accessor.offset(VTOFFSET.pin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pinSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pin.v) }
  ///  The type of this site (AIRBASE, AIRFIELD, AIRPORT, NAVAL STATION, etc.).
  ///  Example: /// Example: AIRBASE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  The use authorization type of this site (e.g MILITARY, CIVIL, JOINT-USE, etc.).
  ///  Example: /// Example: MILITARY
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var usage: String? { let o = _accessor.offset(VTOFFSET.usage.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var usageSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.usage.v) }
  ///  Indicates the normal usage of the Landing Zone (LZ).  Intended as, but not constrained to MIDB Helocopter Landing Area usage value definitions:
  ///  AF - Airfield
  ///  FD - Field
  ///  HC - High Crop.  1 meter and over.
  ///  HY - Highway
  ///  LB - Lake Bed
  ///  LC - Low Crop.  0-1 meters
  ///  O - Other. Explain In Remarks.
  ///  PD - Paddy
  ///  PK - Park
  ///  PS - Pasture
  ///  RB - Riverbed
  ///  SP - Sport Field
  ///  U - Unknown
  ///  Z - Inconclusive Analysis.
  ///  Example: /// Example: AF
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var lzUsage: String? { let o = _accessor.offset(VTOFFSET.lzUsage.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lzUsageSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lzUsage.v) }
  ///  The name of this site.
  ///  Example: /// Example: Site Name
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  A mathematical model of the earth used to calculate coordinates on a map. US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums. The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: WGS
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var coordDatum: String? { let o = _accessor.offset(VTOFFSET.coordDatum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var coordDatumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.coordDatum.v) }
  ///  Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
  ///  Pos. 1-2.  Latitude Degrees     [00-90]
  ///  Pos. 3-4.  Latitude Minutes     [00-59]
  ///  Pos. 5-6.  Latitude Seconds     [00-59]
  ///  Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
  ///  Pos. 10. Latitude Hemisphere       [NS] 
  ///  Pos. 11-13. Longitude Degrees     [00-180] 
  ///  Pos. 14-15. Longitude Minutes     [00-59] 
  ///  Pos. 16-17. Longitude Seconds     [00-59] 
  ///  Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
  ///  Pos. 21. Longitude Hemisphere     [EW]
  ///  Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U].
  ///  Example: /// Example: 340000000N0430000000E
  ///  Constraints: Minimum length = 0, Maximum length = 21
  public var coord: String? { let o = _accessor.offset(VTOFFSET.coord.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var coordSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.coord.v) }
  ///  Indicates the plus or minus error assessed against the method used to derive the coordinate.
  ///  Example: /// Example: 12.345
  ///  Constraints: No constraints specified.
  public var coordDerivAcc: Double { let o = _accessor.offset(VTOFFSET.coordDerivAcc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The O-suffix associated with this site. The O-suffix is a five-character alpha/numeric system used to identify a site, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the Site. The Installation beNumber and oSuffix are also used in conjunction with the catCode to classify the function or purpose of the facility.
  ///  Example: /// Example: BB002
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var osuffix: String? { let o = _accessor.offset(VTOFFSET.osuffix.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var osuffixSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.osuffix.v) }
  ///  The International Air Transport Association (IATA) code of this site, if applicable.
  ///  Example: /// Example: AAA
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var iata: String? { let o = _accessor.offset(VTOFFSET.iata.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var iataSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.iata.v) }
  ///  The International Civil Aviation Organization (ICAO) code of this site, if applicable.
  ///  Example: /// Example: ICA1
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var icao: String? { let o = _accessor.offset(VTOFFSET.icao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var icaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.icao.v) }
  ///  The Federal Aviation Administration (FAA) Location ID of this site, if applicable.
  ///  Example: /// Example: FAA1
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var faa: String? { let o = _accessor.offset(VTOFFSET.faa.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var faaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.faa.v) }
  ///  Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
  ///  Example: /// Example: AL006
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var airDefArea: String? { let o = _accessor.offset(VTOFFSET.airDefArea.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var airDefAreaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.airDefArea.v) }
  ///  Universal Transverse Mercator (UTM) grid coordinates.
  ///  Pos. 1-2, UTM Zone Column   [01-60
  ///  Pos. 3, UTM Zone Row   [C-HJ-NP-X]
  ///  Pos. 4, UTM False Easting   [0-9]
  ///  Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
  ///  Pos. 10-11, UTM False Northing    [0-9][0-9]
  ///  Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
  ///  Example: /// Example: 19P4390691376966
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var utm: String? { let o = _accessor.offset(VTOFFSET.utm.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var utmSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.utm.v) }
  ///  Indicates the grid system used in the development of the milGrid coordinates. Values are:
  ///  UPS - Universal Polar System
  ///  UTM - Universal Transverse Mercator.
  ///  Example: /// Example: UTM
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var milGridSys: String? { let o = _accessor.offset(VTOFFSET.milGridSys.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var milGridSysSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.milGridSys.v) }
  ///  The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
  ///  4Q (grid zone designator, GZD)
  ///  FJ (the 100,000-meter square identifier)
  ///  12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
  ///  Example: /// Example: 4QFJ12345678
  ///  Constraints: Minimum length = 0, Maximum length = 15
  public var milGrid: String? { let o = _accessor.offset(VTOFFSET.milGrid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var milGridSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.milGrid.v) }
  ///  The category code that represents the associated site purpose within the target system.
  ///  Example: /// Example: 20345
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var catCode: String? { let o = _accessor.offset(VTOFFSET.catCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var catCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.catCode.v) }
  ///  Textual Description of Site catCode.
  ///  Example: /// Example: Radar Facility, General
  ///  Constraints: Minimum length = 0, Maximum length = 148
  public var catText: String? { let o = _accessor.offset(VTOFFSET.catText.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var catTextSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.catText.v) }
  ///  World Aeronautical Chart identifier for the area in which a designated place is located.
  ///  Example: /// Example: 0427
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var wac: String? { let o = _accessor.offset(VTOFFSET.wac.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var wacSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.wac.v) }
  ///  Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: IZO7
  ///  Constraints: Minimum length = 0, Maximum length = 7
  public var polSubdiv: String? { let o = _accessor.offset(VTOFFSET.polSubdiv.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var polSubdivSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.polSubdiv.v) }
  ///  Geographical region code used by the Requirements Management System (RMS) as specified by National Geospatial Agency (NGA) in Flight Information Publications (FIPS) 10-4, Appendix 3 - Country Code and Geographic Region Codes. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: E2
  ///  Constraints: Minimum length = 0, Maximum length = 2
  public var geoArea: String? { let o = _accessor.offset(VTOFFSET.geoArea.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var geoAreaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.geoArea.v) }
  ///  The distance between Mean Sea Level and a referenced ellipsoid, in meters.
  ///  Example: /// Example: 12.34
  ///  Constraints: No constraints specified.
  public var geoidalMslSep: Double { let o = _accessor.offset(VTOFFSET.geoidalMslSep.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The DoD Standard Country Code designator for the country or political entity to which the site owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: OTHR
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var allegiance: String? { let o = _accessor.offset(VTOFFSET.allegiance.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var allegianceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.allegiance.v) }
  ///  Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
  ///  Example: /// Example: HL
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var altAllegiance: String? { let o = _accessor.offset(VTOFFSET.altAllegiance.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altAllegianceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altAllegiance.v) }
  ///  Indicates the importance of the entity to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
  ///  0 - Does not meet criteria above
  ///  1 - Primary importance to system
  ///  2 - Secondary importance to system
  ///  3 - Tertiary importance to system
  ///  O - Other. Explain in Remarks.
  ///  Example: /// Example: 1
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var classRating: String? { let o = _accessor.offset(VTOFFSET.classRating.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classRatingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classRating.v) }
  ///  Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: EOB
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var fpa: String? { let o = _accessor.offset(VTOFFSET.fpa.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fpaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fpa.v) }
  ///  The Basic Encyclopedia Number associated with the Site. Uniquely identifies the installation of a site. The beNumber is generated based on the value input for the COORD to determine the appropriate World Aeronautical Chart (WAC) location identifier, the system assigned record originator and a one-up-number.
  ///  Example: /// Example: 0427RT1030
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var beNumber: String? { let o = _accessor.offset(VTOFFSET.beNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var beNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.beNumber.v) }
  ///  The number of runways at the site, if applicable.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var runways: Int32 { let o = _accessor.offset(VTOFFSET.runways.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The length of the longest runway at this site, if applicable, in meters.
  ///  Example: /// Example: 1000
  ///  Constraints: No constraints specified.
  public var maxRunwayLength: Int32 { let o = _accessor.offset(VTOFFSET.maxRunwayLength.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The physical manner of being or state of existence of the entity. A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: RDY
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var condition: String? { let o = _accessor.offset(VTOFFSET.condition.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var conditionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.condition.v) }
  ///  Availability of the entity relative to its condition. Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var conditionAvail: String? { let o = _accessor.offset(VTOFFSET.conditionAvail.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var conditionAvailSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.conditionAvail.v) }
  ///  The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: OPR
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var operStatus: String? { let o = _accessor.offset(VTOFFSET.operStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var operStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.operStatus.v) }
  ///  Indicates the amount or degree of deviation from the horizontal represented as a percent.  Grade is determined by the formula: vertical distance (VD) divided by horizontal distance (HD) times 100. VD is the difference between the highest and  lowest elevation within the entity. HD is the linear distance between the highest and lowest elevation.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var grade: Int32 { let o = _accessor.offset(VTOFFSET.grade.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Indicates the function or mission of an entity, which that entity may or may not be engaged in at any particular time. Typically refers to a unit, organization, or installation/site performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: OCC
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var activity: String? { let o = _accessor.offset(VTOFFSET.activity.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var activitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.activity.v) }
  ///  Principal operational function being performed. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: JG
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var functPrimary: String? { let o = _accessor.offset(VTOFFSET.functPrimary.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var functPrimarySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.functPrimary.v) }
  ///  Indicates the principal type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: AA
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var msnPrimary: String? { let o = _accessor.offset(VTOFFSET.msnPrimary.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msnPrimarySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msnPrimary.v) }
  ///  Indicates the principal specialty type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: AB
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var msnPrimarySpec: String? { let o = _accessor.offset(VTOFFSET.msnPrimarySpec.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msnPrimarySpecSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msnPrimarySpec.v) }
  ///  A sites ability to conduct nuclear warfare. Valid Values are:
  ///  A - Nuclear Ammo Or Warheads Available
  ///  N - No Nuclear Offense
  ///  O - Other. Explain in Remarks
  ///  U - Unknown
  ///  W - Nuclear Weapons Available
  ///  Y - Nuclear Warfare Offensive Capability
  ///  Z - Inconclusive Analysis.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var nucCap: String? { let o = _accessor.offset(VTOFFSET.nucCap.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nucCapSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.nucCap.v) }
  ///  Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
  ///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  ///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  ///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  ///  FAKER: Friendly track, object, or entity acting as an exercise hostile.
  ///  JOKER: Friendly track, object, or entity acting as an exercise suspect.
  ///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  ///  PENDING: Track object which has not been evaluated.
  ///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  ///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  ///  Example: /// Example: FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var ident: String? { let o = _accessor.offset(VTOFFSET.ident.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var identSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ident.v) }
  ///  Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum, in meters.
  ///  Example: /// Example: 123.45
  ///  Constraints: No constraints specified.
  public var elevMsl: Double { let o = _accessor.offset(VTOFFSET.elevMsl.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
  ///  Example: /// Example: 50
  ///  Constraints: No constraints specified.
  public var elevMslConfLvl: Int32 { let o = _accessor.offset(VTOFFSET.elevMslConfLvl.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Indicates the plus or minus error assessed against the method used to derive the elevation.
  ///  Example: /// Example: 12.34
  ///  Constraints: No constraints specified.
  public var elevMslDerivAcc: Double { let o = _accessor.offset(VTOFFSET.elevMslDerivAcc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum expected height of the vegetation in the Landing Zone (LZ), in meters.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var vegHt: Double { let o = _accessor.offset(VTOFFSET.vegHt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The predominant vegetation found in the Landing Zone (LZ). The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: FR
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var vegType: String? { let o = _accessor.offset(VTOFFSET.vegType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var vegTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.vegType.v) }
  ///  Indicates whether the facility is in or outside of a populated area. True, the facility is in or within 5 NM of a populated area. False, the facility is outside a populated area.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var popArea: Bool { let o = _accessor.offset(VTOFFSET.popArea.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Indicates the distance to nearest populated area (over 1,000 people) in nautical miles.
  ///  Example: /// Example: 12.345
  ///  Constraints: No constraints specified.
  public var popAreaProx: Double { let o = _accessor.offset(VTOFFSET.popAreaProx.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional notes/comments for the site.
  ///  Example: /// Example: Example Notes
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  ///  Responsible Producer - Organization that is responsible for the maintenance of the record.
  ///  Example: /// Example: RT
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var resProd: String? { let o = _accessor.offset(VTOFFSET.resProd.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var resProdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.resProd.v) }
  ///  Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
  ///  Example: /// Example: 7
  ///  Constraints: No constraints specified.
  public var eval: Int32 { let o = _accessor.offset(VTOFFSET.eval.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency, in ISO8601 UTC format. This date cannot be greater than the current date.
  ///  Example: /// Example: 2008-06-10
  ///  Constraints: No constraints specified.
  public var reviewDate: String? { let o = _accessor.offset(VTOFFSET.reviewDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reviewDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reviewDate.v) }
  ///  Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs.
  ///  A - Active
  ///  I - Inactive
  ///  K - Acknowledged
  ///  L - Local
  ///  Q - A nominated (NOM) or Data Change Request (DCR) record
  ///  R - Production reduced by CMD decision
  ///  W - Working Record.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var recStatus: String? { let o = _accessor.offset(VTOFFSET.recStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var recStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.recStatus.v) }
  ///  A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element ident.
  ///  Example: /// Example: SOGPU----------
  ///  Constraints: Minimum length = 0, Maximum length = 15
  public var symCode: String? { let o = _accessor.offset(VTOFFSET.symCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var symCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.symCode.v) }
  ///  The reference documentation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: Provider Reference Documentation
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var referenceDoc: String? { let o = _accessor.offset(VTOFFSET.referenceDoc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var referenceDocSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.referenceDoc.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Site_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Site_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startSite_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 65) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(idEntity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idEntity, at: VTOFFSET.idEntity.p) }
  public static func add(idParentSite: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idParentSite, at: VTOFFSET.idParentSite.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(origSiteId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSiteId, at: VTOFFSET.origSiteId.p) }
  public static func add(origLzId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origLzId, at: VTOFFSET.origLzId.p) }
  public static func add(pin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pin, at: VTOFFSET.pin.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(usage: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usage, at: VTOFFSET.usage.p) }
  public static func add(lzUsage: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lzUsage, at: VTOFFSET.lzUsage.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(coordDatum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: coordDatum, at: VTOFFSET.coordDatum.p) }
  public static func add(coord: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: coord, at: VTOFFSET.coord.p) }
  public static func add(coordDerivAcc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: coordDerivAcc, def: 0.0, at: VTOFFSET.coordDerivAcc.p) }
  public static func add(osuffix: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: osuffix, at: VTOFFSET.osuffix.p) }
  public static func add(iata: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: iata, at: VTOFFSET.iata.p) }
  public static func add(icao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: icao, at: VTOFFSET.icao.p) }
  public static func add(faa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: faa, at: VTOFFSET.faa.p) }
  public static func add(airDefArea: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: airDefArea, at: VTOFFSET.airDefArea.p) }
  public static func add(utm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: utm, at: VTOFFSET.utm.p) }
  public static func add(milGridSys: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: milGridSys, at: VTOFFSET.milGridSys.p) }
  public static func add(milGrid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: milGrid, at: VTOFFSET.milGrid.p) }
  public static func add(catCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: catCode, at: VTOFFSET.catCode.p) }
  public static func add(catText: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: catText, at: VTOFFSET.catText.p) }
  public static func add(wac: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wac, at: VTOFFSET.wac.p) }
  public static func add(polSubdiv: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: polSubdiv, at: VTOFFSET.polSubdiv.p) }
  public static func add(geoArea: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geoArea, at: VTOFFSET.geoArea.p) }
  public static func add(geoidalMslSep: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: geoidalMslSep, def: 0.0, at: VTOFFSET.geoidalMslSep.p) }
  public static func add(allegiance: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: allegiance, at: VTOFFSET.allegiance.p) }
  public static func add(altAllegiance: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altAllegiance, at: VTOFFSET.altAllegiance.p) }
  public static func add(classRating: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classRating, at: VTOFFSET.classRating.p) }
  public static func add(fpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fpa, at: VTOFFSET.fpa.p) }
  public static func add(beNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: beNumber, at: VTOFFSET.beNumber.p) }
  public static func add(runways: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: runways, def: 0, at: VTOFFSET.runways.p) }
  public static func add(maxRunwayLength: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxRunwayLength, def: 0, at: VTOFFSET.maxRunwayLength.p) }
  public static func add(condition: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: condition, at: VTOFFSET.condition.p) }
  public static func add(conditionAvail: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: conditionAvail, at: VTOFFSET.conditionAvail.p) }
  public static func add(operStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: operStatus, at: VTOFFSET.operStatus.p) }
  public static func add(grade: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: grade, def: 0, at: VTOFFSET.grade.p) }
  public static func add(activity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: activity, at: VTOFFSET.activity.p) }
  public static func add(functPrimary: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: functPrimary, at: VTOFFSET.functPrimary.p) }
  public static func add(msnPrimary: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msnPrimary, at: VTOFFSET.msnPrimary.p) }
  public static func add(msnPrimarySpec: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msnPrimarySpec, at: VTOFFSET.msnPrimarySpec.p) }
  public static func add(nucCap: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: nucCap, at: VTOFFSET.nucCap.p) }
  public static func add(ident: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ident, at: VTOFFSET.ident.p) }
  public static func add(elevMsl: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevMsl, def: 0.0, at: VTOFFSET.elevMsl.p) }
  public static func add(elevMslConfLvl: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevMslConfLvl, def: 0, at: VTOFFSET.elevMslConfLvl.p) }
  public static func add(elevMslDerivAcc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevMslDerivAcc, def: 0.0, at: VTOFFSET.elevMslDerivAcc.p) }
  public static func add(vegHt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vegHt, def: 0.0, at: VTOFFSET.vegHt.p) }
  public static func add(vegType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vegType, at: VTOFFSET.vegType.p) }
  public static func add(popArea: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: popArea, def: false,
   at: VTOFFSET.popArea.p) }
  public static func add(popAreaProx: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: popAreaProx, def: 0.0, at: VTOFFSET.popAreaProx.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func add(resProd: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: resProd, at: VTOFFSET.resProd.p) }
  public static func add(eval: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: eval, def: 0, at: VTOFFSET.eval.p) }
  public static func add(reviewDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reviewDate, at: VTOFFSET.reviewDate.p) }
  public static func add(recStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: recStatus, at: VTOFFSET.recStatus.p) }
  public static func add(symCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: symCode, at: VTOFFSET.symCode.p) }
  public static func add(referenceDoc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: referenceDoc, at: VTOFFSET.referenceDoc.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: Site_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endSite_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSite_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    idEntityOffset idEntity: Offset = Offset(),
    idParentSiteOffset idParentSite: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    origSiteIdOffset origSiteId: Offset = Offset(),
    origLzIdOffset origLzId: Offset = Offset(),
    pinOffset pin: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    usageOffset usage: Offset = Offset(),
    lzUsageOffset lzUsage: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    coordDatumOffset coordDatum: Offset = Offset(),
    coordOffset coord: Offset = Offset(),
    coordDerivAcc: Double = 0.0,
    osuffixOffset osuffix: Offset = Offset(),
    iataOffset iata: Offset = Offset(),
    icaoOffset icao: Offset = Offset(),
    faaOffset faa: Offset = Offset(),
    airDefAreaOffset airDefArea: Offset = Offset(),
    utmOffset utm: Offset = Offset(),
    milGridSysOffset milGridSys: Offset = Offset(),
    milGridOffset milGrid: Offset = Offset(),
    catCodeOffset catCode: Offset = Offset(),
    catTextOffset catText: Offset = Offset(),
    wacOffset wac: Offset = Offset(),
    polSubdivOffset polSubdiv: Offset = Offset(),
    geoAreaOffset geoArea: Offset = Offset(),
    geoidalMslSep: Double = 0.0,
    allegianceOffset allegiance: Offset = Offset(),
    altAllegianceOffset altAllegiance: Offset = Offset(),
    classRatingOffset classRating: Offset = Offset(),
    fpaOffset fpa: Offset = Offset(),
    beNumberOffset beNumber: Offset = Offset(),
    runways: Int32 = 0,
    maxRunwayLength: Int32 = 0,
    conditionOffset condition: Offset = Offset(),
    conditionAvailOffset conditionAvail: Offset = Offset(),
    operStatusOffset operStatus: Offset = Offset(),
    grade: Int32 = 0,
    activityOffset activity: Offset = Offset(),
    functPrimaryOffset functPrimary: Offset = Offset(),
    msnPrimaryOffset msnPrimary: Offset = Offset(),
    msnPrimarySpecOffset msnPrimarySpec: Offset = Offset(),
    nucCapOffset nucCap: Offset = Offset(),
    identOffset ident: Offset = Offset(),
    elevMsl: Double = 0.0,
    elevMslConfLvl: Int32 = 0,
    elevMslDerivAcc: Double = 0.0,
    vegHt: Double = 0.0,
    vegTypeOffset vegType: Offset = Offset(),
    popArea: Bool = false,
    popAreaProx: Double = 0.0,
    notesOffset notes: Offset = Offset(),
    resProdOffset resProd: Offset = Offset(),
    eval: Int32 = 0,
    reviewDateOffset reviewDate: Offset = Offset(),
    recStatusOffset recStatus: Offset = Offset(),
    symCodeOffset symCode: Offset = Offset(),
    referenceDocOffset referenceDoc: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: Site_Abridged_dataMode_Enum = .real
  ) -> Offset {
    let __start = Site_Abridged.startSite_Abridged(&fbb)
    Site_Abridged.add(id: id, &fbb)
    Site_Abridged.add(idEntity: idEntity, &fbb)
    Site_Abridged.add(idParentSite: idParentSite, &fbb)
    Site_Abridged.add(classificationMarking: classificationMarking, &fbb)
    Site_Abridged.add(origSiteId: origSiteId, &fbb)
    Site_Abridged.add(origLzId: origLzId, &fbb)
    Site_Abridged.add(pin: pin, &fbb)
    Site_Abridged.add(type: type, &fbb)
    Site_Abridged.add(usage: usage, &fbb)
    Site_Abridged.add(lzUsage: lzUsage, &fbb)
    Site_Abridged.add(name: name, &fbb)
    Site_Abridged.add(coordDatum: coordDatum, &fbb)
    Site_Abridged.add(coord: coord, &fbb)
    Site_Abridged.add(coordDerivAcc: coordDerivAcc, &fbb)
    Site_Abridged.add(osuffix: osuffix, &fbb)
    Site_Abridged.add(iata: iata, &fbb)
    Site_Abridged.add(icao: icao, &fbb)
    Site_Abridged.add(faa: faa, &fbb)
    Site_Abridged.add(airDefArea: airDefArea, &fbb)
    Site_Abridged.add(utm: utm, &fbb)
    Site_Abridged.add(milGridSys: milGridSys, &fbb)
    Site_Abridged.add(milGrid: milGrid, &fbb)
    Site_Abridged.add(catCode: catCode, &fbb)
    Site_Abridged.add(catText: catText, &fbb)
    Site_Abridged.add(wac: wac, &fbb)
    Site_Abridged.add(polSubdiv: polSubdiv, &fbb)
    Site_Abridged.add(geoArea: geoArea, &fbb)
    Site_Abridged.add(geoidalMslSep: geoidalMslSep, &fbb)
    Site_Abridged.add(allegiance: allegiance, &fbb)
    Site_Abridged.add(altAllegiance: altAllegiance, &fbb)
    Site_Abridged.add(classRating: classRating, &fbb)
    Site_Abridged.add(fpa: fpa, &fbb)
    Site_Abridged.add(beNumber: beNumber, &fbb)
    Site_Abridged.add(runways: runways, &fbb)
    Site_Abridged.add(maxRunwayLength: maxRunwayLength, &fbb)
    Site_Abridged.add(condition: condition, &fbb)
    Site_Abridged.add(conditionAvail: conditionAvail, &fbb)
    Site_Abridged.add(operStatus: operStatus, &fbb)
    Site_Abridged.add(grade: grade, &fbb)
    Site_Abridged.add(activity: activity, &fbb)
    Site_Abridged.add(functPrimary: functPrimary, &fbb)
    Site_Abridged.add(msnPrimary: msnPrimary, &fbb)
    Site_Abridged.add(msnPrimarySpec: msnPrimarySpec, &fbb)
    Site_Abridged.add(nucCap: nucCap, &fbb)
    Site_Abridged.add(ident: ident, &fbb)
    Site_Abridged.add(elevMsl: elevMsl, &fbb)
    Site_Abridged.add(elevMslConfLvl: elevMslConfLvl, &fbb)
    Site_Abridged.add(elevMslDerivAcc: elevMslDerivAcc, &fbb)
    Site_Abridged.add(vegHt: vegHt, &fbb)
    Site_Abridged.add(vegType: vegType, &fbb)
    Site_Abridged.add(popArea: popArea, &fbb)
    Site_Abridged.add(popAreaProx: popAreaProx, &fbb)
    Site_Abridged.add(notes: notes, &fbb)
    Site_Abridged.add(resProd: resProd, &fbb)
    Site_Abridged.add(eval: eval, &fbb)
    Site_Abridged.add(reviewDate: reviewDate, &fbb)
    Site_Abridged.add(recStatus: recStatus, &fbb)
    Site_Abridged.add(symCode: symCode, &fbb)
    Site_Abridged.add(referenceDoc: referenceDoc, &fbb)
    Site_Abridged.add(createdAt: createdAt, &fbb)
    Site_Abridged.add(createdBy: createdBy, &fbb)
    Site_Abridged.add(source: source, &fbb)
    Site_Abridged.add(origin: origin, &fbb)
    Site_Abridged.add(origNetwork: origNetwork, &fbb)
    Site_Abridged.add(dataMode: dataMode, &fbb)
    return Site_Abridged.endSite_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idEntity.p, fieldName: "idEntity", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idParentSite.p, fieldName: "idParentSite", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSiteId.p, fieldName: "origSiteId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origLzId.p, fieldName: "origLzId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pin.p, fieldName: "pin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.usage.p, fieldName: "usage", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lzUsage.p, fieldName: "lzUsage", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.coordDatum.p, fieldName: "coordDatum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.coord.p, fieldName: "coord", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.coordDerivAcc.p, fieldName: "coordDerivAcc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.osuffix.p, fieldName: "osuffix", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.iata.p, fieldName: "iata", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.icao.p, fieldName: "icao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.faa.p, fieldName: "faa", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.airDefArea.p, fieldName: "airDefArea", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.utm.p, fieldName: "utm", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.milGridSys.p, fieldName: "milGridSys", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.milGrid.p, fieldName: "milGrid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.catCode.p, fieldName: "catCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.catText.p, fieldName: "catText", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.wac.p, fieldName: "wac", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.polSubdiv.p, fieldName: "polSubdiv", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.geoArea.p, fieldName: "geoArea", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.geoidalMslSep.p, fieldName: "geoidalMslSep", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.allegiance.p, fieldName: "allegiance", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altAllegiance.p, fieldName: "altAllegiance", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classRating.p, fieldName: "classRating", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fpa.p, fieldName: "fpa", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.beNumber.p, fieldName: "beNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.runways.p, fieldName: "runways", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.maxRunwayLength.p, fieldName: "maxRunwayLength", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.condition.p, fieldName: "condition", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.conditionAvail.p, fieldName: "conditionAvail", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.operStatus.p, fieldName: "operStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.grade.p, fieldName: "grade", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.activity.p, fieldName: "activity", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.functPrimary.p, fieldName: "functPrimary", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msnPrimary.p, fieldName: "msnPrimary", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msnPrimarySpec.p, fieldName: "msnPrimarySpec", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.nucCap.p, fieldName: "nucCap", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ident.p, fieldName: "ident", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.elevMsl.p, fieldName: "elevMsl", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevMslConfLvl.p, fieldName: "elevMslConfLvl", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.elevMslDerivAcc.p, fieldName: "elevMslDerivAcc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.vegHt.p, fieldName: "vegHt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.vegType.p, fieldName: "vegType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.popArea.p, fieldName: "popArea", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.popAreaProx.p, fieldName: "popAreaProx", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.resProd.p, fieldName: "resProd", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eval.p, fieldName: "eval", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.reviewDate.p, fieldName: "reviewDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.recStatus.p, fieldName: "recStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.symCode.p, fieldName: "symCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.referenceDoc.p, fieldName: "referenceDoc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Site_Abridged_dataMode_Enum.self)
    _v.finish()
  }
}

