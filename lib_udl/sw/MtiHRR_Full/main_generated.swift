// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Data on High-Range Resolution (HRR) targets or High Range Resolution Range Doppler Maps (RDM) for a specified area.
public struct MtiHRR_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "MTIH" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: MtiHRR_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case h2 = 4
    case h3 = 6
    case h4 = 8
    case h5 = 10
    case h6 = 12
    case h7 = 14
    case h8 = 16
    case h9 = 18
    case h10 = 20
    case h11 = 22
    case h12 = 24
    case h13 = 26
    case h14 = 28
    case h15 = 30
    case h16 = 32
    case h17 = 34
    case h18 = 36
    case h19 = 38
    case h20 = 40
    case h21 = 42
    case h22 = 44
    case h23 = 46
    case h24 = 48
    case h27 = 50
    case h28 = 52
    case h29 = 54
    case h30 = 56
    case h31 = 58
    case h32 = 60
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Sequential count of a revisit of the bounding area for a given job ID.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var h2: Int32 { let o = _accessor.offset(VTOFFSET.h2.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var h3: Int32 { let o = _accessor.offset(VTOFFSET.h3.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Flag to indicate the last dwell of the revisit.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var h4: Bool { let o = _accessor.offset(VTOFFSET.h4.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Sequential index of the associated MTI Report.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var h5: Int32 { let o = _accessor.offset(VTOFFSET.h5.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of Range Doppler pixels that exceed target scatterer threshold and are reported in this segment.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var h6: Int32 { let o = _accessor.offset(VTOFFSET.h6.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of Range Bins/Samples in a Range Doppler Chip.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var h7: Int32 { let o = _accessor.offset(VTOFFSET.h7.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of Doppler bins in a Range-Doppler chip.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var h8: Int32 { let o = _accessor.offset(VTOFFSET.h8.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The Peak Scatter returns the maximum power level (e.g. in milliwatts, or dBm) registered by the sensor.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var h9: Int32 { let o = _accessor.offset(VTOFFSET.h9.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Detection threshold used to isolate significant target scatterer pixels, expressed as power relative to clutter mean in negative quarter-decibels.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var h10: Int32 { let o = _accessor.offset(VTOFFSET.h10.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  3dB range impulse response of the radar, expressed in centimeters.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  public var h11: Double { let o = _accessor.offset(VTOFFSET.h11.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Slant Range pixel spacing after over sampling, expressed in centimeters.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  public var h12: Double { let o = _accessor.offset(VTOFFSET.h12.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  3dB Doppler resolution of the radar, expressed in Hertz.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  public var h13: Double { let o = _accessor.offset(VTOFFSET.h13.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Doppler pixel spacing after over sampling, expressed in Hertz.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  public var h14: Double { let o = _accessor.offset(VTOFFSET.h14.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Center Frequency of the radar in GHz.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  public var h15: Double { let o = _accessor.offset(VTOFFSET.h15.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Enumeration table denoting the compression technique used.
  ///  Example: /// Example: TABLE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var h16: String? { let o = _accessor.offset(VTOFFSET.h16.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var h16SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.h16.v) }
  ///  Enumeration table indicating the spectral weighting used in the range compression process.
  ///  Example: /// Example: TABLE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var h17: String? { let o = _accessor.offset(VTOFFSET.h17.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var h17SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.h17.v) }
  ///  Enumeration table indicating the spectral weighting used in the cross-range or Doppler compression process.
  ///  Example: /// Example: TABLE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var h18: String? { let o = _accessor.offset(VTOFFSET.h18.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var h18SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.h18.v) }
  ///  Initial power of the peak scatterer, expressed in dB.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  public var h19: Double { let o = _accessor.offset(VTOFFSET.h19.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  RCS of the peak scatterer, expressed in half-decibels (dB/2).
  ///  Example: /// Example: 117
  ///  Constraints: No constraints specified.
  public var h20: Int32 { let o = _accessor.offset(VTOFFSET.h20.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  When the RDM does not correlate to a single MTI report index or when the center range bin does not correlate to the center of the dwell; provide the range sample offset in meters from Dwell Center (positive is away from the sensor) of the first scatterer record.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var h21: Int32 { let o = _accessor.offset(VTOFFSET.h21.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  When the RDM does not correlate to a single MTI report index or the center doppler bin does not correlate to the doppler centroid of the dwell; Doppler sample value in Hz of the first scatterer record.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var h22: Int32 { let o = _accessor.offset(VTOFFSET.h22.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Enumeration field which designates the type of data being delivered.
  ///  Example: /// Example: FIELD
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var h23: String? { let o = _accessor.offset(VTOFFSET.h23.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var h23SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.h23.v) }
  ///  Flag field to indicate the additional signal processing techniques applied to the data.
  ///  Example: /// Example: FLAG
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var h24: String? { let o = _accessor.offset(VTOFFSET.h24.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var h24SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.h24.v) }
  ///  Number of pixels in the range dimension of the chip.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var h27: Int32 { let o = _accessor.offset(VTOFFSET.h27.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Distance from Range Bin to closest edge in the entire chip, expressed in centimeters.
  ///  Example: /// Example: 1234567890
  ///  Constraints: No constraints specified.
  public var h28: Int64 { let o = _accessor.offset(VTOFFSET.h28.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  ///  Relative velocity to skin line.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var h29: Int32 { let o = _accessor.offset(VTOFFSET.h29.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Computed object length based upon HRR profile, in meters.
  ///  Example: /// Example: 22
  ///  Constraints: No constraints specified.
  public var h30: Int32 { let o = _accessor.offset(VTOFFSET.h30.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Standard deviation of estimate of the object length, expressed in meters.
  ///  Example: /// Example: 55
  ///  Constraints: No constraints specified.
  public var h31: Int32 { let o = _accessor.offset(VTOFFSET.h31.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Standard deviation of estimate of the object length, expressed in meters.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasH32: Bool { let o = _accessor.offset(VTOFFSET.h32.v); return o == 0 ? false : true }
  public var h32Count: Int32 { let o = _accessor.offset(VTOFFSET.h32.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func h32(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.h32.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startMtiHRR_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 29) }
  public static func add(h2: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h2, def: 0, at: VTOFFSET.h2.p) }
  public static func add(h3: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h3, def: 0, at: VTOFFSET.h3.p) }
  public static func add(h4: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h4, def: false,
   at: VTOFFSET.h4.p) }
  public static func add(h5: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h5, def: 0, at: VTOFFSET.h5.p) }
  public static func add(h6: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h6, def: 0, at: VTOFFSET.h6.p) }
  public static func add(h7: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h7, def: 0, at: VTOFFSET.h7.p) }
  public static func add(h8: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h8, def: 0, at: VTOFFSET.h8.p) }
  public static func add(h9: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h9, def: 0, at: VTOFFSET.h9.p) }
  public static func add(h10: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h10, def: 0, at: VTOFFSET.h10.p) }
  public static func add(h11: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h11, def: 0.0, at: VTOFFSET.h11.p) }
  public static func add(h12: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h12, def: 0.0, at: VTOFFSET.h12.p) }
  public static func add(h13: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h13, def: 0.0, at: VTOFFSET.h13.p) }
  public static func add(h14: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h14, def: 0.0, at: VTOFFSET.h14.p) }
  public static func add(h15: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h15, def: 0.0, at: VTOFFSET.h15.p) }
  public static func add(h16: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: h16, at: VTOFFSET.h16.p) }
  public static func add(h17: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: h17, at: VTOFFSET.h17.p) }
  public static func add(h18: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: h18, at: VTOFFSET.h18.p) }
  public static func add(h19: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h19, def: 0.0, at: VTOFFSET.h19.p) }
  public static func add(h20: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h20, def: 0, at: VTOFFSET.h20.p) }
  public static func add(h21: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h21, def: 0, at: VTOFFSET.h21.p) }
  public static func add(h22: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h22, def: 0, at: VTOFFSET.h22.p) }
  public static func add(h23: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: h23, at: VTOFFSET.h23.p) }
  public static func add(h24: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: h24, at: VTOFFSET.h24.p) }
  public static func add(h27: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h27, def: 0, at: VTOFFSET.h27.p) }
  public static func add(h28: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h28, def: 0, at: VTOFFSET.h28.p) }
  public static func add(h29: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h29, def: 0, at: VTOFFSET.h29.p) }
  public static func add(h30: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h30, def: 0, at: VTOFFSET.h30.p) }
  public static func add(h31: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: h31, def: 0, at: VTOFFSET.h31.p) }
  public static func addVectorOf(h32: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: h32, at: VTOFFSET.h32.p) }
  public static func endMtiHRR_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMtiHRR_Full(
    _ fbb: inout FlatBufferBuilder,
    h2: Int32 = 0,
    h3: Int32 = 0,
    h4: Bool = false,
    h5: Int32 = 0,
    h6: Int32 = 0,
    h7: Int32 = 0,
    h8: Int32 = 0,
    h9: Int32 = 0,
    h10: Int32 = 0,
    h11: Double = 0.0,
    h12: Double = 0.0,
    h13: Double = 0.0,
    h14: Double = 0.0,
    h15: Double = 0.0,
    h16Offset h16: Offset = Offset(),
    h17Offset h17: Offset = Offset(),
    h18Offset h18: Offset = Offset(),
    h19: Double = 0.0,
    h20: Int32 = 0,
    h21: Int32 = 0,
    h22: Int32 = 0,
    h23Offset h23: Offset = Offset(),
    h24Offset h24: Offset = Offset(),
    h27: Int32 = 0,
    h28: Int64 = 0,
    h29: Int32 = 0,
    h30: Int32 = 0,
    h31: Int32 = 0,
    h32VectorOffset h32: Offset = Offset()
  ) -> Offset {
    let __start = MtiHRR_Full.startMtiHRR_Full(&fbb)
    MtiHRR_Full.add(h2: h2, &fbb)
    MtiHRR_Full.add(h3: h3, &fbb)
    MtiHRR_Full.add(h4: h4, &fbb)
    MtiHRR_Full.add(h5: h5, &fbb)
    MtiHRR_Full.add(h6: h6, &fbb)
    MtiHRR_Full.add(h7: h7, &fbb)
    MtiHRR_Full.add(h8: h8, &fbb)
    MtiHRR_Full.add(h9: h9, &fbb)
    MtiHRR_Full.add(h10: h10, &fbb)
    MtiHRR_Full.add(h11: h11, &fbb)
    MtiHRR_Full.add(h12: h12, &fbb)
    MtiHRR_Full.add(h13: h13, &fbb)
    MtiHRR_Full.add(h14: h14, &fbb)
    MtiHRR_Full.add(h15: h15, &fbb)
    MtiHRR_Full.add(h16: h16, &fbb)
    MtiHRR_Full.add(h17: h17, &fbb)
    MtiHRR_Full.add(h18: h18, &fbb)
    MtiHRR_Full.add(h19: h19, &fbb)
    MtiHRR_Full.add(h20: h20, &fbb)
    MtiHRR_Full.add(h21: h21, &fbb)
    MtiHRR_Full.add(h22: h22, &fbb)
    MtiHRR_Full.add(h23: h23, &fbb)
    MtiHRR_Full.add(h24: h24, &fbb)
    MtiHRR_Full.add(h27: h27, &fbb)
    MtiHRR_Full.add(h28: h28, &fbb)
    MtiHRR_Full.add(h29: h29, &fbb)
    MtiHRR_Full.add(h30: h30, &fbb)
    MtiHRR_Full.add(h31: h31, &fbb)
    MtiHRR_Full.addVectorOf(h32: h32, &fbb)
    return MtiHRR_Full.endMtiHRR_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.h2.p, fieldName: "h2", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h3.p, fieldName: "h3", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h4.p, fieldName: "h4", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.h5.p, fieldName: "h5", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h6.p, fieldName: "h6", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h7.p, fieldName: "h7", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h8.p, fieldName: "h8", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h9.p, fieldName: "h9", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h10.p, fieldName: "h10", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h11.p, fieldName: "h11", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.h12.p, fieldName: "h12", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.h13.p, fieldName: "h13", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.h14.p, fieldName: "h14", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.h15.p, fieldName: "h15", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.h16.p, fieldName: "h16", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.h17.p, fieldName: "h17", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.h18.p, fieldName: "h18", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.h19.p, fieldName: "h19", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.h20.p, fieldName: "h20", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h21.p, fieldName: "h21", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h22.p, fieldName: "h22", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h23.p, fieldName: "h23", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.h24.p, fieldName: "h24", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.h27.p, fieldName: "h27", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h28.p, fieldName: "h28", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.h29.p, fieldName: "h29", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h30.p, fieldName: "h30", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h31.p, fieldName: "h31", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.h32.p, fieldName: "h32", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

