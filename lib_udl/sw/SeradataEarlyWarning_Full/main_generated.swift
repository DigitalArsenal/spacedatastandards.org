// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum SeradataEarlyWarning_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: SeradataEarlyWarning_Full_dataMode_Enum { return .exercise }
  public static var min: SeradataEarlyWarning_Full_dataMode_Enum { return .real }
}


///  /// Details for an early warning payload from  Seradata.
public struct SeradataEarlyWarning_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SERA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: SeradataEarlyWarning_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idIr = 8
    case spacecraftId = 10
    case hostedForCompanyOrgId = 12
    case manufacturerOrgId = 14
    case name = 16
    case spectralBands = 18
    case frequencyLimits = 20
    case bestResolution = 22
    case groundStations = 24
    case groundStationLocations = 26
    case missileLaunchPhaseDetectionAbility = 28
    case earthPointing = 30
    case partnerSpacecraftId = 32
    case payloadNotes = 34
    case createdAt = 36
    case createdBy = 38
    case updatedAt = 40
    case updatedBy = 42
    case source = 44
    case origin = 46
    case origNetwork = 48
    case dataMode = 50
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SERADATAEARLYWARNING-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  UUID of the parent IR record.
  ///  Example: /// Example: idIR
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idIr: String? { let o = _accessor.offset(VTOFFSET.idIr.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idIrSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idIr.v) }
  ///  Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  ///  Example: /// Example: spacecraftId
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var spacecraftId: String? { let o = _accessor.offset(VTOFFSET.spacecraftId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var spacecraftIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.spacecraftId.v) }
  ///  Hosted for company/Organization Id.
  ///  Example: /// Example: hostedForCompanyOrgId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var hostedForCompanyOrgId: String? { let o = _accessor.offset(VTOFFSET.hostedForCompanyOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var hostedForCompanyOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.hostedForCompanyOrgId.v) }
  ///  Manufacturer Organization Id.
  ///  Example: /// Example: manufacturerOrgId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var manufacturerOrgId: String? { let o = _accessor.offset(VTOFFSET.manufacturerOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var manufacturerOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.manufacturerOrgId.v) }
  ///  Sensor name from Seradata, e.g. Infra red telescope, Schmidt Telescope, etc.
  ///  Example: /// Example: Infra red telescope
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  Spectral Bands, e.g. Infra-Red.
  ///  Example: /// Example: Infra-Red
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var spectralBands: String? { let o = _accessor.offset(VTOFFSET.spectralBands.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var spectralBandsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.spectralBands.v) }
  ///  Frequency Limits for this IR.
  ///  Example: /// Example: frequencyLimits
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var frequencyLimits: String? { let o = _accessor.offset(VTOFFSET.frequencyLimits.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var frequencyLimitsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.frequencyLimits.v) }
  ///  Best resolution for this IR in meters.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var bestResolution: Double { let o = _accessor.offset(VTOFFSET.bestResolution.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Ground Station info for this IR.
  ///  Example: /// Example: groundStations
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var groundStations: String? { let o = _accessor.offset(VTOFFSET.groundStations.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var groundStationsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.groundStations.v) }
  ///  Ground Station Locations for this IR.
  ///  Example: /// Example: groundStationLocations
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var groundStationLocations: String? { let o = _accessor.offset(VTOFFSET.groundStationLocations.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var groundStationLocationsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.groundStationLocations.v) }
  ///  Missile Launch Phase Detection Ability.
  ///  Example: /// Example: missileLaunchPhaseDetectionAbility
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var missileLaunchPhaseDetectionAbility: String? { let o = _accessor.offset(VTOFFSET.missileLaunchPhaseDetectionAbility.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var missileLaunchPhaseDetectionAbilitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.missileLaunchPhaseDetectionAbility.v) }
  ///  Is the sensor Earth Pointing.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var earthPointing: Bool { let o = _accessor.offset(VTOFFSET.earthPointing.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  ///  Example: /// Example: partnerSpacecraftId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var partnerSpacecraftId: String? { let o = _accessor.offset(VTOFFSET.partnerSpacecraftId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var partnerSpacecraftIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.partnerSpacecraftId.v) }
  ///  Payload notes.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  public var payloadNotes: String? { let o = _accessor.offset(VTOFFSET.payloadNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var payloadNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.payloadNotes.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: SeradataEarlyWarning_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : SeradataEarlyWarning_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startSeradataEarlyWarning_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 24) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idIr: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idIr, at: VTOFFSET.idIr.p) }
  public static func add(spacecraftId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: spacecraftId, at: VTOFFSET.spacecraftId.p) }
  public static func add(hostedForCompanyOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hostedForCompanyOrgId, at: VTOFFSET.hostedForCompanyOrgId.p) }
  public static func add(manufacturerOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: manufacturerOrgId, at: VTOFFSET.manufacturerOrgId.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(spectralBands: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: spectralBands, at: VTOFFSET.spectralBands.p) }
  public static func add(frequencyLimits: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: frequencyLimits, at: VTOFFSET.frequencyLimits.p) }
  public static func add(bestResolution: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bestResolution, def: 0.0, at: VTOFFSET.bestResolution.p) }
  public static func add(groundStations: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: groundStations, at: VTOFFSET.groundStations.p) }
  public static func add(groundStationLocations: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: groundStationLocations, at: VTOFFSET.groundStationLocations.p) }
  public static func add(missileLaunchPhaseDetectionAbility: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: missileLaunchPhaseDetectionAbility, at: VTOFFSET.missileLaunchPhaseDetectionAbility.p) }
  public static func add(earthPointing: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: earthPointing, def: false,
   at: VTOFFSET.earthPointing.p) }
  public static func add(partnerSpacecraftId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: partnerSpacecraftId, at: VTOFFSET.partnerSpacecraftId.p) }
  public static func add(payloadNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: payloadNotes, at: VTOFFSET.payloadNotes.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: SeradataEarlyWarning_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endSeradataEarlyWarning_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSeradataEarlyWarning_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idIrOffset idIr: Offset = Offset(),
    spacecraftIdOffset spacecraftId: Offset = Offset(),
    hostedForCompanyOrgIdOffset hostedForCompanyOrgId: Offset = Offset(),
    manufacturerOrgIdOffset manufacturerOrgId: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    spectralBandsOffset spectralBands: Offset = Offset(),
    frequencyLimitsOffset frequencyLimits: Offset = Offset(),
    bestResolution: Double = 0.0,
    groundStationsOffset groundStations: Offset = Offset(),
    groundStationLocationsOffset groundStationLocations: Offset = Offset(),
    missileLaunchPhaseDetectionAbilityOffset missileLaunchPhaseDetectionAbility: Offset = Offset(),
    earthPointing: Bool = false,
    partnerSpacecraftIdOffset partnerSpacecraftId: Offset = Offset(),
    payloadNotesOffset payloadNotes: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: SeradataEarlyWarning_Full_dataMode_Enum = .real
  ) -> Offset {
    let __start = SeradataEarlyWarning_Full.startSeradataEarlyWarning_Full(&fbb)
    SeradataEarlyWarning_Full.add(id: id, &fbb)
    SeradataEarlyWarning_Full.add(classificationMarking: classificationMarking, &fbb)
    SeradataEarlyWarning_Full.add(idIr: idIr, &fbb)
    SeradataEarlyWarning_Full.add(spacecraftId: spacecraftId, &fbb)
    SeradataEarlyWarning_Full.add(hostedForCompanyOrgId: hostedForCompanyOrgId, &fbb)
    SeradataEarlyWarning_Full.add(manufacturerOrgId: manufacturerOrgId, &fbb)
    SeradataEarlyWarning_Full.add(name: name, &fbb)
    SeradataEarlyWarning_Full.add(spectralBands: spectralBands, &fbb)
    SeradataEarlyWarning_Full.add(frequencyLimits: frequencyLimits, &fbb)
    SeradataEarlyWarning_Full.add(bestResolution: bestResolution, &fbb)
    SeradataEarlyWarning_Full.add(groundStations: groundStations, &fbb)
    SeradataEarlyWarning_Full.add(groundStationLocations: groundStationLocations, &fbb)
    SeradataEarlyWarning_Full.add(missileLaunchPhaseDetectionAbility: missileLaunchPhaseDetectionAbility, &fbb)
    SeradataEarlyWarning_Full.add(earthPointing: earthPointing, &fbb)
    SeradataEarlyWarning_Full.add(partnerSpacecraftId: partnerSpacecraftId, &fbb)
    SeradataEarlyWarning_Full.add(payloadNotes: payloadNotes, &fbb)
    SeradataEarlyWarning_Full.add(createdAt: createdAt, &fbb)
    SeradataEarlyWarning_Full.add(createdBy: createdBy, &fbb)
    SeradataEarlyWarning_Full.add(updatedAt: updatedAt, &fbb)
    SeradataEarlyWarning_Full.add(updatedBy: updatedBy, &fbb)
    SeradataEarlyWarning_Full.add(source: source, &fbb)
    SeradataEarlyWarning_Full.add(origin: origin, &fbb)
    SeradataEarlyWarning_Full.add(origNetwork: origNetwork, &fbb)
    SeradataEarlyWarning_Full.add(dataMode: dataMode, &fbb)
    return SeradataEarlyWarning_Full.endSeradataEarlyWarning_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idIr.p, fieldName: "idIr", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.spacecraftId.p, fieldName: "spacecraftId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.hostedForCompanyOrgId.p, fieldName: "hostedForCompanyOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.manufacturerOrgId.p, fieldName: "manufacturerOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.spectralBands.p, fieldName: "spectralBands", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.frequencyLimits.p, fieldName: "frequencyLimits", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.bestResolution.p, fieldName: "bestResolution", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.groundStations.p, fieldName: "groundStations", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.groundStationLocations.p, fieldName: "groundStationLocations", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.missileLaunchPhaseDetectionAbility.p, fieldName: "missileLaunchPhaseDetectionAbility", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.earthPointing.p, fieldName: "earthPointing", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.partnerSpacecraftId.p, fieldName: "partnerSpacecraftId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.payloadNotes.p, fieldName: "payloadNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: SeradataEarlyWarning_Full_dataMode_Enum.self)
    _v.finish()
  }
}

