// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
public struct AircraftMissionTasking_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AircraftMissionTasking_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case countryCode = 4
    case taskedService = 6
    case unitDesignator = 8
    case unitLocName = 10
    case resMsnInd = 12
    case amcMsnNum = 14
    case pkgId = 16
    case msnCommander = 18
    case msnNum = 20
    case priMsnType = 22
    case secMsnType = 24
    case alertStatus = 26
    case depLocName = 28
    case depLocUtm = 30
    case depLocLat = 32
    case depLocLon = 34
    case depTime = 36
    case rcvyLocName = 38
    case rcvyLocUtm = 40
    case rcvyLocLat = 42
    case rcvyLocLon = 44
    case rcvyTime = 46
    case indActasking = 48
    case acMsnLocSeg = 50
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The country code responsible for conducting this aircraft mission tasking for the exercise or operation.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 1, Maximum length = 4
  public var countryCode: String? { let o = _accessor.offset(VTOFFSET.countryCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var countryCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.countryCode.v) }
  ///  The service tasked with conducting this aircraft mission tasking for the exercise or operation.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 1, Maximum length = 1
  public var taskedService: String? { let o = _accessor.offset(VTOFFSET.taskedService.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskedServiceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskedService.v) }
  ///  The designator of the unit that is tasked to perform this aircraft mission tasking.
  ///  Example: /// Example: AMPHIB5DIV
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var unitDesignator: String? { let o = _accessor.offset(VTOFFSET.unitDesignator.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var unitDesignatorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.unitDesignator.v) }
  ///  The tasked units location expressed as an ICAO or a place name.
  ///  Example: /// Example: ICAO:KXXQ
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var unitLocName: String? { let o = _accessor.offset(VTOFFSET.unitLocName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var unitLocNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.unitLocName.v) }
  ///  An indicator of whether a mission is or will be a residual mission.
  ///  Example: /// Example: N
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var resMsnInd: String? { let o = _accessor.offset(VTOFFSET.resMsnInd.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var resMsnIndSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.resMsnInd.v) }
  ///  The AMC number assigned to identify one aircraft from another.
  ///  Example: /// Example: AMC:JJXD123HA045
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var amcMsnNum: String? { let o = _accessor.offset(VTOFFSET.amcMsnNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var amcMsnNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.amcMsnNum.v) }
  ///  The identifier for the composite set of missions for this operation/exercise.
  ///  Example: /// Example: ZZ
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var pkgId: String? { let o = _accessor.offset(VTOFFSET.pkgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pkgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pkgId.v) }
  ///  The commander responsible for the planning and execution of the forces necessary to achieve desired objectives.
  ///  Example: /// Example: MC
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var msnCommander: String? { let o = _accessor.offset(VTOFFSET.msnCommander.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msnCommanderSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msnCommander.v) }
  ///  The mission number assigned to this mission.
  ///  Example: /// Example: D123HA
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var msnNum: String? { let o = _accessor.offset(VTOFFSET.msnNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msnNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msnNum.v) }
  ///  The code for the preferred type or designator for a tasked air mission.
  ///  Example: /// Example: CAS
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var priMsnType: String? { let o = _accessor.offset(VTOFFSET.priMsnType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var priMsnTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.priMsnType.v) }
  ///  The code for the alternative type of a tasked air mission.
  ///  Example: /// Example: SEAD
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var secMsnType: String? { let o = _accessor.offset(VTOFFSET.secMsnType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var secMsnTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.secMsnType.v) }
  ///  The readiness status expressed in time (minutes) for an aircraft to be airborne after the launch order is received or the time required for a missile unit to assume battle stations.
  ///  Example: /// Example: 30
  ///  Constraints: No constraints specified.
  public var alertStatus: Int32 { let o = _accessor.offset(VTOFFSET.alertStatus.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The location or name specified for the departure of the tasked air mission.
  ///  Example: /// Example: ICAO:KBIF
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var depLocName: String? { let o = _accessor.offset(VTOFFSET.depLocName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var depLocNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.depLocName.v) }
  ///  The departure location specified in UTM (100 meter) coordinates for the tasked air mission.
  ///  Example: /// Example: 32WDL123123
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var depLocUtm: String? { let o = _accessor.offset(VTOFFSET.depLocUtm.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var depLocUtmSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.depLocUtm.v) }
  ///  WGS-84 latitude of the departure location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
  ///  Example: /// Example: 35.123
  ///  Constraints: No constraints specified.
  public var depLocLat: Double { let o = _accessor.offset(VTOFFSET.depLocLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 longitude of the departure location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
  ///  Example: /// Example: 79.2354
  ///  Constraints: No constraints specified.
  public var depLocLon: Double { let o = _accessor.offset(VTOFFSET.depLocLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The time of departure for the tasked air mission in ISO8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-10-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  public var depTime: String? { let o = _accessor.offset(VTOFFSET.depTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var depTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.depTime.v) }
  ///  An array of locations specified for the recovery of the tasked air mission represented by varying formats.
  ///  Example: /// Example: ['ARRLOC:KBIF', 'ARRLOC:KDZ7']
  ///  Constraints: No constraints specified.
  public var hasRcvyLocName: Bool { let o = _accessor.offset(VTOFFSET.rcvyLocName.v); return o == 0 ? false : true }
  public var rcvyLocNameCount: Int32 { let o = _accessor.offset(VTOFFSET.rcvyLocName.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func rcvyLocName(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.rcvyLocName.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  An array of recovery locations specified in UTM (100 meter) coordinates for the tasked air mission.
  ///  Example: /// Example: ['ARRUTMO:32WDL123123', 'ARRUTMO:32WDL321321']
  ///  Constraints: No constraints specified.
  public var hasRcvyLocUtm: Bool { let o = _accessor.offset(VTOFFSET.rcvyLocUtm.v); return o == 0 ? false : true }
  public var rcvyLocUtmCount: Int32 { let o = _accessor.offset(VTOFFSET.rcvyLocUtm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func rcvyLocUtm(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.rcvyLocUtm.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  An array of WGS-84 latitude of the recovery locations, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
  ///  Example: /// Example: [48.8584, 40.7554]
  ///  Constraints: No constraints specified.
  public var hasRcvyLocLat: Bool { let o = _accessor.offset(VTOFFSET.rcvyLocLat.v); return o == 0 ? false : true }
  public var rcvyLocLatCount: Int32 { let o = _accessor.offset(VTOFFSET.rcvyLocLat.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func rcvyLocLat(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.rcvyLocLat.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  An array of WGS-84 longitude of the recovery locations, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
  ///  Example: /// Example: [2.2945, -73.9866]
  ///  Constraints: No constraints specified.
  public var hasRcvyLocLon: Bool { let o = _accessor.offset(VTOFFSET.rcvyLocLon.v); return o == 0 ? false : true }
  public var rcvyLocLonCount: Int32 { let o = _accessor.offset(VTOFFSET.rcvyLocLon.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func rcvyLocLon(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.rcvyLocLon.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  An array of recovery times for the tasked air mission in ISO8601 UTC format with millisecond precision.
  ///  Example: /// Example: ['2021-10-25T16:00:00.234Z', '2021-10-26T16:00:00.234Z']
  ///  Constraints: No constraints specified.
  public var hasRcvyTime: Bool { let o = _accessor.offset(VTOFFSET.rcvyTime.v); return o == 0 ? false : true }
  public var rcvyTimeCount: Int32 { let o = _accessor.offset(VTOFFSET.rcvyTime.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func rcvyTime(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.rcvyTime.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  A collection of the individual aircraft assigned to this aircraft mission tasking.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasIndActasking: Bool { let o = _accessor.offset(VTOFFSET.indActasking.v); return o == 0 ? false : true }
  public var indActaskingCount: Int32 { let o = _accessor.offset(VTOFFSET.indActasking.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func indActasking(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.indActasking.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  A collection of aircraft mission location information for this aircraft mission tasking.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasAcMsnLocSeg: Bool { let o = _accessor.offset(VTOFFSET.acMsnLocSeg.v); return o == 0 ? false : true }
  public var acMsnLocSegCount: Int32 { let o = _accessor.offset(VTOFFSET.acMsnLocSeg.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func acMsnLocSeg(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.acMsnLocSeg.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startAircraftMissionTasking_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 24) }
  public static func add(countryCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: countryCode, at: VTOFFSET.countryCode.p) }
  public static func add(taskedService: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskedService, at: VTOFFSET.taskedService.p) }
  public static func add(unitDesignator: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: unitDesignator, at: VTOFFSET.unitDesignator.p) }
  public static func add(unitLocName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: unitLocName, at: VTOFFSET.unitLocName.p) }
  public static func add(resMsnInd: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: resMsnInd, at: VTOFFSET.resMsnInd.p) }
  public static func add(amcMsnNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: amcMsnNum, at: VTOFFSET.amcMsnNum.p) }
  public static func add(pkgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pkgId, at: VTOFFSET.pkgId.p) }
  public static func add(msnCommander: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msnCommander, at: VTOFFSET.msnCommander.p) }
  public static func add(msnNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msnNum, at: VTOFFSET.msnNum.p) }
  public static func add(priMsnType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: priMsnType, at: VTOFFSET.priMsnType.p) }
  public static func add(secMsnType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: secMsnType, at: VTOFFSET.secMsnType.p) }
  public static func add(alertStatus: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: alertStatus, def: 0, at: VTOFFSET.alertStatus.p) }
  public static func add(depLocName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: depLocName, at: VTOFFSET.depLocName.p) }
  public static func add(depLocUtm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: depLocUtm, at: VTOFFSET.depLocUtm.p) }
  public static func add(depLocLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: depLocLat, def: 0.0, at: VTOFFSET.depLocLat.p) }
  public static func add(depLocLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: depLocLon, def: 0.0, at: VTOFFSET.depLocLon.p) }
  public static func add(depTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: depTime, at: VTOFFSET.depTime.p) }
  public static func addVectorOf(rcvyLocName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rcvyLocName, at: VTOFFSET.rcvyLocName.p) }
  public static func addVectorOf(rcvyLocUtm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rcvyLocUtm, at: VTOFFSET.rcvyLocUtm.p) }
  public static func addVectorOf(rcvyLocLat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rcvyLocLat, at: VTOFFSET.rcvyLocLat.p) }
  public static func addVectorOf(rcvyLocLon: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rcvyLocLon, at: VTOFFSET.rcvyLocLon.p) }
  public static func addVectorOf(rcvyTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rcvyTime, at: VTOFFSET.rcvyTime.p) }
  public static func addVectorOf(indActasking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: indActasking, at: VTOFFSET.indActasking.p) }
  public static func addVectorOf(acMsnLocSeg: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: acMsnLocSeg, at: VTOFFSET.acMsnLocSeg.p) }
  public static func endAircraftMissionTasking_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAircraftMissionTasking_Abridged(
    _ fbb: inout FlatBufferBuilder,
    countryCodeOffset countryCode: Offset = Offset(),
    taskedServiceOffset taskedService: Offset = Offset(),
    unitDesignatorOffset unitDesignator: Offset = Offset(),
    unitLocNameOffset unitLocName: Offset = Offset(),
    resMsnIndOffset resMsnInd: Offset = Offset(),
    amcMsnNumOffset amcMsnNum: Offset = Offset(),
    pkgIdOffset pkgId: Offset = Offset(),
    msnCommanderOffset msnCommander: Offset = Offset(),
    msnNumOffset msnNum: Offset = Offset(),
    priMsnTypeOffset priMsnType: Offset = Offset(),
    secMsnTypeOffset secMsnType: Offset = Offset(),
    alertStatus: Int32 = 0,
    depLocNameOffset depLocName: Offset = Offset(),
    depLocUtmOffset depLocUtm: Offset = Offset(),
    depLocLat: Double = 0.0,
    depLocLon: Double = 0.0,
    depTimeOffset depTime: Offset = Offset(),
    rcvyLocNameVectorOffset rcvyLocName: Offset = Offset(),
    rcvyLocUtmVectorOffset rcvyLocUtm: Offset = Offset(),
    rcvyLocLatVectorOffset rcvyLocLat: Offset = Offset(),
    rcvyLocLonVectorOffset rcvyLocLon: Offset = Offset(),
    rcvyTimeVectorOffset rcvyTime: Offset = Offset(),
    indActaskingVectorOffset indActasking: Offset = Offset(),
    acMsnLocSegVectorOffset acMsnLocSeg: Offset = Offset()
  ) -> Offset {
    let __start = AircraftMissionTasking_Abridged.startAircraftMissionTasking_Abridged(&fbb)
    AircraftMissionTasking_Abridged.add(countryCode: countryCode, &fbb)
    AircraftMissionTasking_Abridged.add(taskedService: taskedService, &fbb)
    AircraftMissionTasking_Abridged.add(unitDesignator: unitDesignator, &fbb)
    AircraftMissionTasking_Abridged.add(unitLocName: unitLocName, &fbb)
    AircraftMissionTasking_Abridged.add(resMsnInd: resMsnInd, &fbb)
    AircraftMissionTasking_Abridged.add(amcMsnNum: amcMsnNum, &fbb)
    AircraftMissionTasking_Abridged.add(pkgId: pkgId, &fbb)
    AircraftMissionTasking_Abridged.add(msnCommander: msnCommander, &fbb)
    AircraftMissionTasking_Abridged.add(msnNum: msnNum, &fbb)
    AircraftMissionTasking_Abridged.add(priMsnType: priMsnType, &fbb)
    AircraftMissionTasking_Abridged.add(secMsnType: secMsnType, &fbb)
    AircraftMissionTasking_Abridged.add(alertStatus: alertStatus, &fbb)
    AircraftMissionTasking_Abridged.add(depLocName: depLocName, &fbb)
    AircraftMissionTasking_Abridged.add(depLocUtm: depLocUtm, &fbb)
    AircraftMissionTasking_Abridged.add(depLocLat: depLocLat, &fbb)
    AircraftMissionTasking_Abridged.add(depLocLon: depLocLon, &fbb)
    AircraftMissionTasking_Abridged.add(depTime: depTime, &fbb)
    AircraftMissionTasking_Abridged.addVectorOf(rcvyLocName: rcvyLocName, &fbb)
    AircraftMissionTasking_Abridged.addVectorOf(rcvyLocUtm: rcvyLocUtm, &fbb)
    AircraftMissionTasking_Abridged.addVectorOf(rcvyLocLat: rcvyLocLat, &fbb)
    AircraftMissionTasking_Abridged.addVectorOf(rcvyLocLon: rcvyLocLon, &fbb)
    AircraftMissionTasking_Abridged.addVectorOf(rcvyTime: rcvyTime, &fbb)
    AircraftMissionTasking_Abridged.addVectorOf(indActasking: indActasking, &fbb)
    AircraftMissionTasking_Abridged.addVectorOf(acMsnLocSeg: acMsnLocSeg, &fbb)
    return AircraftMissionTasking_Abridged.endAircraftMissionTasking_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.countryCode.p, fieldName: "countryCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskedService.p, fieldName: "taskedService", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.unitDesignator.p, fieldName: "unitDesignator", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.unitLocName.p, fieldName: "unitLocName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.resMsnInd.p, fieldName: "resMsnInd", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.amcMsnNum.p, fieldName: "amcMsnNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pkgId.p, fieldName: "pkgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msnCommander.p, fieldName: "msnCommander", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msnNum.p, fieldName: "msnNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.priMsnType.p, fieldName: "priMsnType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.secMsnType.p, fieldName: "secMsnType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.alertStatus.p, fieldName: "alertStatus", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.depLocName.p, fieldName: "depLocName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.depLocUtm.p, fieldName: "depLocUtm", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.depLocLat.p, fieldName: "depLocLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.depLocLon.p, fieldName: "depLocLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.depTime.p, fieldName: "depTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rcvyLocName.p, fieldName: "rcvyLocName", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.rcvyLocUtm.p, fieldName: "rcvyLocUtm", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.rcvyLocLat.p, fieldName: "rcvyLocLat", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.rcvyLocLon.p, fieldName: "rcvyLocLon", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.rcvyTime.p, fieldName: "rcvyTime", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.indActasking.p, fieldName: "indActasking", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.acMsnLocSeg.p, fieldName: "acMsnLocSeg", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

