// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Mti_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Mti_Abridged_dataMode_Enum { return .exercise }
  public static var min: Mti_Abridged_dataMode_Enum { return .real }
}


///  /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
public struct Mti_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "MTIA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Mti_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case classificationMarking = 4
    case source = 6
    case origin = 8
    case id = 10
    case dataMode = 12
    case createdBy = 14
    case createdAt = 16
    case p3 = 18
    case p6 = 20
    case p7 = 22
    case p8 = 24
    case p9 = 26
    case p10 = 28
    case missions = 30
    case dwells = 32
    case hrrs = 34
    case jobDefs = 36
    case freeTexts = 38
    case platformLocs = 40
    case jobRequests = 42
    case origNetwork = 44
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: MTI-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Mti_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Mti_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Nationality of the platform providing the data.
  ///  Example: /// Example: NATIONALITY
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var p3: String? { let o = _accessor.offset(VTOFFSET.p3.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var p3SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.p3.v) }
  ///  Control / handling marking.
  ///  Example: /// Example: MARKING
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var p6: String? { let o = _accessor.offset(VTOFFSET.p6.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var p6SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.p6.v) }
  ///  Data record exercise indicator.
  ///  Example: /// Example: INDICATOR
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var p7: String? { let o = _accessor.offset(VTOFFSET.p7.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var p7SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.p7.v) }
  ///  ID of the platform providing the data (tail number for air platform, name and numerical designator for space-based platforms).
  ///  Example: /// Example: P8-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var p8: String? { let o = _accessor.offset(VTOFFSET.p8.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var p8SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.p8.v) }
  ///  Integer field, assigned by the platform, that uniquely identifies the mission for the platform.
  ///  Example: /// Example: 45
  ///  Constraints: No constraints specified.
  public var p9: Int32 { let o = _accessor.offset(VTOFFSET.p9.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  ///  Example: /// Example: 45
  ///  Constraints: No constraints specified.
  public var p10: Int32 { let o = _accessor.offset(VTOFFSET.p10.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasMissions: Bool { let o = _accessor.offset(VTOFFSET.missions.v); return o == 0 ? false : true }
  public var missionsCount: Int32 { let o = _accessor.offset(VTOFFSET.missions.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func missions(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.missions.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasDwells: Bool { let o = _accessor.offset(VTOFFSET.dwells.v); return o == 0 ? false : true }
  public var dwellsCount: Int32 { let o = _accessor.offset(VTOFFSET.dwells.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func dwells(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.dwells.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasHrrs: Bool { let o = _accessor.offset(VTOFFSET.hrrs.v); return o == 0 ? false : true }
  public var hrrsCount: Int32 { let o = _accessor.offset(VTOFFSET.hrrs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func hrrs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.hrrs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasJobDefs: Bool { let o = _accessor.offset(VTOFFSET.jobDefs.v); return o == 0 ? false : true }
  public var jobDefsCount: Int32 { let o = _accessor.offset(VTOFFSET.jobDefs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func jobDefs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.jobDefs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasFreeTexts: Bool { let o = _accessor.offset(VTOFFSET.freeTexts.v); return o == 0 ? false : true }
  public var freeTextsCount: Int32 { let o = _accessor.offset(VTOFFSET.freeTexts.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func freeTexts(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.freeTexts.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasPlatformLocs: Bool { let o = _accessor.offset(VTOFFSET.platformLocs.v); return o == 0 ? false : true }
  public var platformLocsCount: Int32 { let o = _accessor.offset(VTOFFSET.platformLocs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func platformLocs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.platformLocs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasJobRequests: Bool { let o = _accessor.offset(VTOFFSET.jobRequests.v); return o == 0 ? false : true }
  public var jobRequestsCount: Int32 { let o = _accessor.offset(VTOFFSET.jobRequests.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func jobRequests(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.jobRequests.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startMti_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 21) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(dataMode: Mti_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(p3: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: p3, at: VTOFFSET.p3.p) }
  public static func add(p6: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: p6, at: VTOFFSET.p6.p) }
  public static func add(p7: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: p7, at: VTOFFSET.p7.p) }
  public static func add(p8: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: p8, at: VTOFFSET.p8.p) }
  public static func add(p9: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: p9, def: 0, at: VTOFFSET.p9.p) }
  public static func add(p10: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: p10, def: 0, at: VTOFFSET.p10.p) }
  public static func addVectorOf(missions: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: missions, at: VTOFFSET.missions.p) }
  public static func addVectorOf(dwells: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dwells, at: VTOFFSET.dwells.p) }
  public static func addVectorOf(hrrs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hrrs, at: VTOFFSET.hrrs.p) }
  public static func addVectorOf(jobDefs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: jobDefs, at: VTOFFSET.jobDefs.p) }
  public static func addVectorOf(freeTexts: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: freeTexts, at: VTOFFSET.freeTexts.p) }
  public static func addVectorOf(platformLocs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: platformLocs, at: VTOFFSET.platformLocs.p) }
  public static func addVectorOf(jobRequests: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: jobRequests, at: VTOFFSET.jobRequests.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endMti_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMti_Abridged(
    _ fbb: inout FlatBufferBuilder,
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    idOffset id: Offset = Offset(),
    dataMode: Mti_Abridged_dataMode_Enum = .real,
    createdByOffset createdBy: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    p3Offset p3: Offset = Offset(),
    p6Offset p6: Offset = Offset(),
    p7Offset p7: Offset = Offset(),
    p8Offset p8: Offset = Offset(),
    p9: Int32 = 0,
    p10: Int32 = 0,
    missionsVectorOffset missions: Offset = Offset(),
    dwellsVectorOffset dwells: Offset = Offset(),
    hrrsVectorOffset hrrs: Offset = Offset(),
    jobDefsVectorOffset jobDefs: Offset = Offset(),
    freeTextsVectorOffset freeTexts: Offset = Offset(),
    platformLocsVectorOffset platformLocs: Offset = Offset(),
    jobRequestsVectorOffset jobRequests: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = Mti_Abridged.startMti_Abridged(&fbb)
    Mti_Abridged.add(classificationMarking: classificationMarking, &fbb)
    Mti_Abridged.add(source: source, &fbb)
    Mti_Abridged.add(origin: origin, &fbb)
    Mti_Abridged.add(id: id, &fbb)
    Mti_Abridged.add(dataMode: dataMode, &fbb)
    Mti_Abridged.add(createdBy: createdBy, &fbb)
    Mti_Abridged.add(createdAt: createdAt, &fbb)
    Mti_Abridged.add(p3: p3, &fbb)
    Mti_Abridged.add(p6: p6, &fbb)
    Mti_Abridged.add(p7: p7, &fbb)
    Mti_Abridged.add(p8: p8, &fbb)
    Mti_Abridged.add(p9: p9, &fbb)
    Mti_Abridged.add(p10: p10, &fbb)
    Mti_Abridged.addVectorOf(missions: missions, &fbb)
    Mti_Abridged.addVectorOf(dwells: dwells, &fbb)
    Mti_Abridged.addVectorOf(hrrs: hrrs, &fbb)
    Mti_Abridged.addVectorOf(jobDefs: jobDefs, &fbb)
    Mti_Abridged.addVectorOf(freeTexts: freeTexts, &fbb)
    Mti_Abridged.addVectorOf(platformLocs: platformLocs, &fbb)
    Mti_Abridged.addVectorOf(jobRequests: jobRequests, &fbb)
    Mti_Abridged.add(origNetwork: origNetwork, &fbb)
    return Mti_Abridged.endMti_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Mti_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.p3.p, fieldName: "p3", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.p6.p, fieldName: "p6", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.p7.p, fieldName: "p7", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.p8.p, fieldName: "p8", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.p9.p, fieldName: "p9", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.p10.p, fieldName: "p10", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.missions.p, fieldName: "missions", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.dwells.p, fieldName: "dwells", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.hrrs.p, fieldName: "hrrs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.jobDefs.p, fieldName: "jobDefs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.freeTexts.p, fieldName: "freeTexts", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.platformLocs.p, fieldName: "platformLocs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.jobRequests.p, fieldName: "jobRequests", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

