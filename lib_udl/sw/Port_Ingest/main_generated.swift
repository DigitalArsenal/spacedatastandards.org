// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Port_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Port_Ingest_dataMode_Enum { return .exercise }
  public static var min: Port_Ingest_dataMode_Enum { return .real }
}


///  /// Properties and characteristics of a maritime port, which includes location, port identifiers, and remarks.
public struct Port_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "PORT" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Port_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idSite = 8
    case externalId = 10
    case locode = 12
    case portName = 14
    case harborType = 16
    case harborSize = 18
    case maxDraught = 20
    case avgDuration = 22
    case tideRange = 24
    case shelter = 26
    case pilotReqd = 28
    case lat = 30
    case lon = 32
    case countryCode = 34
    case createdAt = 36
    case createdBy = 38
    case source = 40
    case origin = 42
    case dataMode = 44
    case origNetwork = 46
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the Site Entity associated with the Port record.
  ///  Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSite: String? { let o = _accessor.offset(VTOFFSET.idSite.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSiteSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSite.v) }
  ///  Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var externalId: String? { let o = _accessor.offset(VTOFFSET.externalId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var externalIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.externalId.v) }
  ///  The five-character United Nations Code for Trade and Transport Locations (UN/LOCODE) of this port.  The first two letters of the code contains the ISO 3166-1 alpha-2 country designation of the port country. The three remaining characters identify a location within that country.  Letters are preferred, but if necessary digits 2 through 9 may be used, excluding "0" and "1" to avoid confusion with the letters "O" and "I" respectively.
  ///  Example: /// Example: CAVAN
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var locode: String? { let o = _accessor.offset(VTOFFSET.locode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var locodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.locode.v) }
  ///  The name of this port.
  ///  Example: /// Example: Vancouver
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var portName: String? { let o = _accessor.offset(VTOFFSET.portName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var portNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.portName.v) }
  ///  The type of harbor for this port. The harbor type refers to how a port is physically positioned.
  ///  COASTAL BREAKWATER (CB)
  ///  COASTAL NATURAL (CN)
  ///  COASTAL TIDE GATE  (CT)
  ///  LAKE OR CANAL (LC)
  ///  OPEN ROADSTEAD (OR)
  ///  RIVER BASIN (RB)
  ///  RIVER NATURAL (RN)
  ///  RIVER TIDE GATE (RT)
  ///  TYPHOON HARBOR  (TH).
  ///  Example: /// Example: COASTAL NATURAL
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var harborType: String? { let o = _accessor.offset(VTOFFSET.harborType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var harborTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.harborType.v) }
  ///  The size of the harbor for this port measured in square kilometers.
  ///  Example: /// Example: 160.1
  ///  Constraints: No constraints specified.
  public var harborSize: Double { let o = _accessor.offset(VTOFFSET.harborSize.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum allowed vessel draught. Draught is the principal dimensions of any waterborne vessel defined as the distance between the shipâ€™s keel and the waterline of the vessel measured in meters.
  ///  Example: /// Example: 18.1
  ///  Constraints: No constraints specified.
  public var maxDraught: Double { let o = _accessor.offset(VTOFFSET.maxDraught.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average time for a vessel at this port in hours.
  ///  Example: /// Example: 41.1
  ///  Constraints: No constraints specified.
  public var avgDuration: Double { let o = _accessor.offset(VTOFFSET.avgDuration.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The tide range of this port in meters.
  ///  Example: /// Example: 4.1
  ///  Constraints: No constraints specified.
  public var tideRange: Double { let o = _accessor.offset(VTOFFSET.tideRange.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The shelter afforded from wind, sea, and swell refers to the area where normal port operations are conducted, usually the wharf area. Shelter afforded by the anchorage area may be given for ports where cargo is handled by lighters. Values given are EXCELLENT, FAIR, GOOD, POOR, or NONE.
  ///  Example: /// Example: EXCELLENT
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var shelter: String? { let o = _accessor.offset(VTOFFSET.shelter.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var shelterSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.shelter.v) }
  ///  Flag indicating whether a pilot is required at this port.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var pilotReqd: Bool { let o = _accessor.offset(VTOFFSET.pilotReqd.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The country where this port is located.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var countryCode: String? { let o = _accessor.offset(VTOFFSET.countryCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var countryCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.countryCode.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var dataMode: Port_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Port_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startPort_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 22) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idSite: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSite, at: VTOFFSET.idSite.p) }
  public static func add(externalId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: externalId, at: VTOFFSET.externalId.p) }
  public static func add(locode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: locode, at: VTOFFSET.locode.p) }
  public static func add(portName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: portName, at: VTOFFSET.portName.p) }
  public static func add(harborType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: harborType, at: VTOFFSET.harborType.p) }
  public static func add(harborSize: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: harborSize, def: 0.0, at: VTOFFSET.harborSize.p) }
  public static func add(maxDraught: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxDraught, def: 0.0, at: VTOFFSET.maxDraught.p) }
  public static func add(avgDuration: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgDuration, def: 0.0, at: VTOFFSET.avgDuration.p) }
  public static func add(tideRange: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: tideRange, def: 0.0, at: VTOFFSET.tideRange.p) }
  public static func add(shelter: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shelter, at: VTOFFSET.shelter.p) }
  public static func add(pilotReqd: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pilotReqd, def: false,
   at: VTOFFSET.pilotReqd.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(countryCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: countryCode, at: VTOFFSET.countryCode.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: Port_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endPort_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createPort_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idSiteOffset idSite: Offset = Offset(),
    externalIdOffset externalId: Offset = Offset(),
    locodeOffset locode: Offset = Offset(),
    portNameOffset portName: Offset = Offset(),
    harborTypeOffset harborType: Offset = Offset(),
    harborSize: Double = 0.0,
    maxDraught: Double = 0.0,
    avgDuration: Double = 0.0,
    tideRange: Double = 0.0,
    shelterOffset shelter: Offset = Offset(),
    pilotReqd: Bool = false,
    lat: Double = 0.0,
    lon: Double = 0.0,
    countryCodeOffset countryCode: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: Port_Ingest_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = Port_Ingest.startPort_Ingest(&fbb)
    Port_Ingest.add(id: id, &fbb)
    Port_Ingest.add(classificationMarking: classificationMarking, &fbb)
    Port_Ingest.add(idSite: idSite, &fbb)
    Port_Ingest.add(externalId: externalId, &fbb)
    Port_Ingest.add(locode: locode, &fbb)
    Port_Ingest.add(portName: portName, &fbb)
    Port_Ingest.add(harborType: harborType, &fbb)
    Port_Ingest.add(harborSize: harborSize, &fbb)
    Port_Ingest.add(maxDraught: maxDraught, &fbb)
    Port_Ingest.add(avgDuration: avgDuration, &fbb)
    Port_Ingest.add(tideRange: tideRange, &fbb)
    Port_Ingest.add(shelter: shelter, &fbb)
    Port_Ingest.add(pilotReqd: pilotReqd, &fbb)
    Port_Ingest.add(lat: lat, &fbb)
    Port_Ingest.add(lon: lon, &fbb)
    Port_Ingest.add(countryCode: countryCode, &fbb)
    Port_Ingest.add(createdAt: createdAt, &fbb)
    Port_Ingest.add(createdBy: createdBy, &fbb)
    Port_Ingest.add(source: source, &fbb)
    Port_Ingest.add(origin: origin, &fbb)
    Port_Ingest.add(dataMode: dataMode, &fbb)
    Port_Ingest.add(origNetwork: origNetwork, &fbb)
    return Port_Ingest.endPort_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSite.p, fieldName: "idSite", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.externalId.p, fieldName: "externalId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.locode.p, fieldName: "locode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.portName.p, fieldName: "portName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.harborType.p, fieldName: "harborType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.harborSize.p, fieldName: "harborSize", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxDraught.p, fieldName: "maxDraught", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgDuration.p, fieldName: "avgDuration", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.tideRange.p, fieldName: "tideRange", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.shelter.p, fieldName: "shelter", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pilotReqd.p, fieldName: "pilotReqd", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.countryCode.p, fieldName: "countryCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Port_Ingest_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

