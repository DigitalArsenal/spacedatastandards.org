// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
public struct MtiJobRequest_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "MTIJ" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: MtiJobRequest_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case r1 = 4
    case r2 = 6
    case r3 = 8
    case r4 = 10
    case r5 = 12
    case r6 = 14
    case r7 = 16
    case r8 = 18
    case r9 = 20
    case r10 = 22
    case r11 = 24
    case r12 = 26
    case r13 = 28
    case r14 = 30
    case jobReqEst = 32
    case r21 = 34
    case r22 = 36
    case r23 = 38
    case r24 = 40
    case r25 = 42
    case r26 = 44
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The requestor of the sensor service.
  ///  Example: /// Example: REQUESTER
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var r1: String? { let o = _accessor.offset(VTOFFSET.r1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var r1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.r1.v) }
  ///  Identifier for the tasking message sent by the requesting station.
  ///  Example: /// Example: IDENTIFIER
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var r2: String? { let o = _accessor.offset(VTOFFSET.r2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var r2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.r2.v) }
  ///  The priority of the request relative to other requests originated by the requesting station.
  ///  Example: /// Example: 15
  ///  Constraints: No constraints specified.
  public var r3: Int32 { let o = _accessor.offset(VTOFFSET.r3.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  North-South position of the first corner (Point A) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var r4: Double { let o = _accessor.offset(VTOFFSET.r4.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  East-West position of the first corner (Point A) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var r5: Double { let o = _accessor.offset(VTOFFSET.r5.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  North-South position of the second corner (Point B) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var r6: Double { let o = _accessor.offset(VTOFFSET.r6.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  East-West position of the second corner (Point B) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var r7: Double { let o = _accessor.offset(VTOFFSET.r7.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  North-South position of the third corner (Point C) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var r8: Double { let o = _accessor.offset(VTOFFSET.r8.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  East-West position of the third corner (Point C) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var r9: Double { let o = _accessor.offset(VTOFFSET.r9.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  North-South position of the fourth corner (Point D) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var r10: Double { let o = _accessor.offset(VTOFFSET.r10.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  East-West position of the fourth corner (Point D) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var r11: Double { let o = _accessor.offset(VTOFFSET.r11.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Identifies the radar mode requested by the requestor.
  ///  Example: /// Example: MODE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var r12: String? { let o = _accessor.offset(VTOFFSET.r12.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var r12SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.r12.v) }
  ///  Specifies the radar range resolution requested by the requestor, expressed in centimeters.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var r13: Int32 { let o = _accessor.offset(VTOFFSET.r13.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Specifies the radar cross-range resolution requested by the requestor, expressed in decimeters.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  public var r14: Int32 { let o = _accessor.offset(VTOFFSET.r14.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Specifies the Earliest Start Time for which the service is requested.  Composite of fields R15-R20.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var jobReqEst: String? { let o = _accessor.offset(VTOFFSET.jobReqEst.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var jobReqEstSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.jobReqEst.v) }
  ///  Specifies the maximum time from the requested start time after which the request is to be abandoned, expressed in seconds.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var r21: Int32 { let o = _accessor.offset(VTOFFSET.r21.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Specifies the time duration for the radar job, measured from the actual start of the job, expressed in seconds.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var r22: Int32 { let o = _accessor.offset(VTOFFSET.r22.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Specifies the revisit interval for the radar job, expressed in deciseconds.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  public var r23: Int32 { let o = _accessor.offset(VTOFFSET.r23.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  the type of sensor or the platform.
  ///  Example: /// Example: TYPE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var r24: String? { let o = _accessor.offset(VTOFFSET.r24.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var r24SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.r24.v) }
  ///  The particular variant of the sensor type.
  ///  Example: /// Example: VARIANT
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var r25: String? { let o = _accessor.offset(VTOFFSET.r25.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var r25SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.r25.v) }
  ///  Flag field indicating that it is an initial request (flag = 0) or the desire of the requestor to cancel (flag = 1) the requested job.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var r26: Bool { let o = _accessor.offset(VTOFFSET.r26.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  public static func startMtiJobRequest_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 21) }
  public static func add(r1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: r1, at: VTOFFSET.r1.p) }
  public static func add(r2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: r2, at: VTOFFSET.r2.p) }
  public static func add(r3: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: r3, def: 0, at: VTOFFSET.r3.p) }
  public static func add(r4: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: r4, def: 0.0, at: VTOFFSET.r4.p) }
  public static func add(r5: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: r5, def: 0.0, at: VTOFFSET.r5.p) }
  public static func add(r6: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: r6, def: 0.0, at: VTOFFSET.r6.p) }
  public static func add(r7: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: r7, def: 0.0, at: VTOFFSET.r7.p) }
  public static func add(r8: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: r8, def: 0.0, at: VTOFFSET.r8.p) }
  public static func add(r9: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: r9, def: 0.0, at: VTOFFSET.r9.p) }
  public static func add(r10: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: r10, def: 0.0, at: VTOFFSET.r10.p) }
  public static func add(r11: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: r11, def: 0.0, at: VTOFFSET.r11.p) }
  public static func add(r12: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: r12, at: VTOFFSET.r12.p) }
  public static func add(r13: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: r13, def: 0, at: VTOFFSET.r13.p) }
  public static func add(r14: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: r14, def: 0, at: VTOFFSET.r14.p) }
  public static func add(jobReqEst: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: jobReqEst, at: VTOFFSET.jobReqEst.p) }
  public static func add(r21: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: r21, def: 0, at: VTOFFSET.r21.p) }
  public static func add(r22: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: r22, def: 0, at: VTOFFSET.r22.p) }
  public static func add(r23: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: r23, def: 0, at: VTOFFSET.r23.p) }
  public static func add(r24: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: r24, at: VTOFFSET.r24.p) }
  public static func add(r25: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: r25, at: VTOFFSET.r25.p) }
  public static func add(r26: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: r26, def: false,
   at: VTOFFSET.r26.p) }
  public static func endMtiJobRequest_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMtiJobRequest_Ingest(
    _ fbb: inout FlatBufferBuilder,
    r1Offset r1: Offset = Offset(),
    r2Offset r2: Offset = Offset(),
    r3: Int32 = 0,
    r4: Double = 0.0,
    r5: Double = 0.0,
    r6: Double = 0.0,
    r7: Double = 0.0,
    r8: Double = 0.0,
    r9: Double = 0.0,
    r10: Double = 0.0,
    r11: Double = 0.0,
    r12Offset r12: Offset = Offset(),
    r13: Int32 = 0,
    r14: Int32 = 0,
    jobReqEstOffset jobReqEst: Offset = Offset(),
    r21: Int32 = 0,
    r22: Int32 = 0,
    r23: Int32 = 0,
    r24Offset r24: Offset = Offset(),
    r25Offset r25: Offset = Offset(),
    r26: Bool = false
  ) -> Offset {
    let __start = MtiJobRequest_Ingest.startMtiJobRequest_Ingest(&fbb)
    MtiJobRequest_Ingest.add(r1: r1, &fbb)
    MtiJobRequest_Ingest.add(r2: r2, &fbb)
    MtiJobRequest_Ingest.add(r3: r3, &fbb)
    MtiJobRequest_Ingest.add(r4: r4, &fbb)
    MtiJobRequest_Ingest.add(r5: r5, &fbb)
    MtiJobRequest_Ingest.add(r6: r6, &fbb)
    MtiJobRequest_Ingest.add(r7: r7, &fbb)
    MtiJobRequest_Ingest.add(r8: r8, &fbb)
    MtiJobRequest_Ingest.add(r9: r9, &fbb)
    MtiJobRequest_Ingest.add(r10: r10, &fbb)
    MtiJobRequest_Ingest.add(r11: r11, &fbb)
    MtiJobRequest_Ingest.add(r12: r12, &fbb)
    MtiJobRequest_Ingest.add(r13: r13, &fbb)
    MtiJobRequest_Ingest.add(r14: r14, &fbb)
    MtiJobRequest_Ingest.add(jobReqEst: jobReqEst, &fbb)
    MtiJobRequest_Ingest.add(r21: r21, &fbb)
    MtiJobRequest_Ingest.add(r22: r22, &fbb)
    MtiJobRequest_Ingest.add(r23: r23, &fbb)
    MtiJobRequest_Ingest.add(r24: r24, &fbb)
    MtiJobRequest_Ingest.add(r25: r25, &fbb)
    MtiJobRequest_Ingest.add(r26: r26, &fbb)
    return MtiJobRequest_Ingest.endMtiJobRequest_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.r1.p, fieldName: "r1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.r2.p, fieldName: "r2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.r3.p, fieldName: "r3", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.r4.p, fieldName: "r4", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.r5.p, fieldName: "r5", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.r6.p, fieldName: "r6", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.r7.p, fieldName: "r7", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.r8.p, fieldName: "r8", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.r9.p, fieldName: "r9", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.r10.p, fieldName: "r10", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.r11.p, fieldName: "r11", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.r12.p, fieldName: "r12", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.r13.p, fieldName: "r13", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.r14.p, fieldName: "r14", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.jobReqEst.p, fieldName: "jobReqEst", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.r21.p, fieldName: "r21", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.r22.p, fieldName: "r22", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.r23.p, fieldName: "r23", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.r24.p, fieldName: "r24", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.r25.p, fieldName: "r25", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.r26.p, fieldName: "r26", required: false, type: Bool.self)
    _v.finish()
  }
}

