// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum WeatherData_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: WeatherData_Full_dataMode_Enum { return .exercise }
  public static var min: WeatherData_Full_dataMode_Enum { return .real }
}


///  /// These services provide for posting and querying Weather Data. Weather Data integrates dynamic data measured by Doppler/CG such as signal power and noise levels, to produce useful weather information.
public struct WeatherData_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "WEAT" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: WeatherData_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idSensor = 8
    case origSensorId = 10
    case obTime = 12
    case sigPwrs = 14
    case noiseLvls = 16
    case specWidths = 18
    case firstGuessAvgs = 20
    case qcValue = 22
    case fileCreation = 24
    case termAlt = 26
    case avgTxPwr = 28
    case avgRefPwr = 30
    case sectorNum = 32
    case numElements = 34
    case tdAvgSampleNums = 36
    case checksum = 38
    case coIntegs = 40
    case specAvgs = 42
    case interpulsePeriods = 44
    case doppVels = 46
    case consRecs = 48
    case snrs = 50
    case sigStrength = 52
    case semiMajorAxis = 54
    case semiMinorAxis = 56
    case angleOrientation = 58
    case lightEventNum = 60
    case lightDetSensors = 62
    case posConfidence = 64
    case srcTyps = 66
    case srcIds = 68
    case origNetwork = 70
    case createdAt = 72
    case createdBy = 74
    case source = 76
    case origin = 78
    case dataMode = 80
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: WEATHER-DATA-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the sensor making the weather measurement.
  ///  Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origSensorId: String? { let o = _accessor.offset(VTOFFSET.origSensorId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSensorIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSensorId.v) }
  ///  Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var obTime: String? { let o = _accessor.offset(VTOFFSET.obTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obTime.v) }
  ///  Array of signal power(s) measured by the sensor, in decibels. Users should consult the data provider for information on the signal powers array structure.
  ///  Example: /// Example: [116.5, 121.6]
  ///  Constraints: No constraints specified.
  public var hasSigPwrs: Bool { let o = _accessor.offset(VTOFFSET.sigPwrs.v); return o == 0 ? false : true }
  public var sigPwrsCount: Int32 { let o = _accessor.offset(VTOFFSET.sigPwrs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sigPwrs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.sigPwrs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of noise level(s) measured by radar, in decibels. Users should consult the data provider for information on the noise levels array structure.
  ///  Example: /// Example: [58.2, 58.3]
  ///  Constraints: No constraints specified.
  public var hasNoiseLvls: Bool { let o = _accessor.offset(VTOFFSET.noiseLvls.v); return o == 0 ? false : true }
  public var noiseLvlsCount: Int32 { let o = _accessor.offset(VTOFFSET.noiseLvls.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func noiseLvls(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.noiseLvls.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of width(s) of the distribution in Doppler velocity measured by radar, in meters/second. Spectral width depends on the particle size distribution, the wind shear across the radar beam, and turbulence. Users should consult the data provider for information on the spectral widths array structure.
  ///  Example: /// Example: [0.3, 0.6]
  ///  Constraints: No constraints specified.
  public var hasSpecWidths: Bool { let o = _accessor.offset(VTOFFSET.specWidths.v); return o == 0 ? false : true }
  public var specWidthsCount: Int32 { let o = _accessor.offset(VTOFFSET.specWidths.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func specWidths(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.specWidths.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of average maximum number(s) of consecutive instances in which the same first guess velocity is used in radar data processing to estimate wind speed. Users should consult the data provider for information on the first guess averages array structure.
  ///  Example: /// Example: [16, 1]
  ///  Constraints: No constraints specified.
  public var hasFirstGuessAvgs: Bool { let o = _accessor.offset(VTOFFSET.firstGuessAvgs.v); return o == 0 ? false : true }
  public var firstGuessAvgsCount: Int32 { let o = _accessor.offset(VTOFFSET.firstGuessAvgs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func firstGuessAvgs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.firstGuessAvgs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Quality control flag value, as defined by the data provider.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  public var qcValue: Int32 { let o = _accessor.offset(VTOFFSET.qcValue.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Datetime the system files were created.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var fileCreation: String? { let o = _accessor.offset(VTOFFSET.fileCreation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fileCreationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fileCreation.v) }
  ///  Last altitude with recorded measurements in this record, in meters.
  ///  Example: /// Example: 19505.1
  ///  Constraints: No constraints specified.
  public var termAlt: Double { let o = _accessor.offset(VTOFFSET.termAlt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average transmitted power of the radar, in kilowatts.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  public var avgTxPwr: Double { let o = _accessor.offset(VTOFFSET.avgTxPwr.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average power of the reflected signal received by the radar, in Watts.
  ///  Example: /// Example: 714.9
  ///  Constraints: No constraints specified.
  public var avgRefPwr: Double { let o = _accessor.offset(VTOFFSET.avgRefPwr.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Number of sectors within the radar coverage area, each containing a number of antennas.
  ///  Example: /// Example: 20
  ///  Constraints: No constraints specified.
  public var sectorNum: Int32 { let o = _accessor.offset(VTOFFSET.sectorNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of antennas across all sectors within the radar coverage area.
  ///  Example: /// Example: 640
  ///  Constraints: No constraints specified.
  public var numElements: Int32 { let o = _accessor.offset(VTOFFSET.numElements.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of the number(s) of radar samples used in time domain averaging for radar data processing. Time domain averaging improves the quality of the measured signal by reducing random noise and enhancing the signal-to-noise ratio. Users should consult the data provider for information on the time domain sample numbers array structure.
  ///  Example: /// Example: [32, 30]
  ///  Constraints: No constraints specified.
  public var hasTdAvgSampleNums: Bool { let o = _accessor.offset(VTOFFSET.tdAvgSampleNums.v); return o == 0 ? false : true }
  public var tdAvgSampleNumsCount: Int32 { let o = _accessor.offset(VTOFFSET.tdAvgSampleNums.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func tdAvgSampleNums(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.tdAvgSampleNums.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Checksum value for the data.
  ///  Example: /// Example: 133
  ///  Constraints: No constraints specified.
  public var checksum: Int32 { let o = _accessor.offset(VTOFFSET.checksum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of the number(s) of measurements used in coherent integrations used for radar data processing. Users should consult the data provider for information on the coherent integrations array structure.
  ///  Example: /// Example: [4, 3]
  ///  Constraints: No constraints specified.
  public var hasCoIntegs: Bool { let o = _accessor.offset(VTOFFSET.coIntegs.v); return o == 0 ? false : true }
  public var coIntegsCount: Int32 { let o = _accessor.offset(VTOFFSET.coIntegs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func coIntegs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.coIntegs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the number(s) of spectral averages used in radar data processing. Users should consult the data provider for information on the spectral averages array structure.
  ///  Example: /// Example: [4, 3]
  ///  Constraints: No constraints specified.
  public var hasSpecAvgs: Bool { let o = _accessor.offset(VTOFFSET.specAvgs.v); return o == 0 ? false : true }
  public var specAvgsCount: Int32 { let o = _accessor.offset(VTOFFSET.specAvgs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func specAvgs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.specAvgs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the elapsed time(s) from the beginning of one pulse to the beginning of the next pulse for a radar beam, in microseconds. Users should consult the data provider for information on the interpulse periods array structure.
  ///  Example: /// Example: [1000.3, 1000.2]
  ///  Constraints: No constraints specified.
  public var hasInterpulsePeriods: Bool { let o = _accessor.offset(VTOFFSET.interpulsePeriods.v); return o == 0 ? false : true }
  public var interpulsePeriodsCount: Int32 { let o = _accessor.offset(VTOFFSET.interpulsePeriods.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func interpulsePeriods(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.interpulsePeriods.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of full scale Nyquist Doppler velocities measured by radar, in meters per second. Nyquist velocity refers to the maximum velocity magnitude that the radar system can unambiguously detect. Doppler velocities with absolute values exceeding the Nyquist threshold suffer from aliasing at the time of collection. Users should consult the data provider for information on the doppler velocities array structure.
  ///  Example: /// Example: [44.4, 467.3]
  ///  Constraints: No constraints specified.
  public var hasDoppVels: Bool { let o = _accessor.offset(VTOFFSET.doppVels.v); return o == 0 ? false : true }
  public var doppVelsCount: Int32 { let o = _accessor.offset(VTOFFSET.doppVels.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func doppVels(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.doppVels.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the number(s) of records in consensus for a radar beam. Users should consult the data provider for information on the consensus records array structure.
  ///  Example: /// Example: [5, 2]
  ///  Constraints: No constraints specified.
  public var hasConsRecs: Bool { let o = _accessor.offset(VTOFFSET.consRecs.v); return o == 0 ? false : true }
  public var consRecsCount: Int32 { let o = _accessor.offset(VTOFFSET.consRecs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func consRecs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.consRecs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of signal to noise ratio(s) for a radar beam, in decibels. Users should consult the data provider for information on the signal to noise ratios array structure.
  ///  Example: /// Example: [14.5, -16.2]
  ///  Constraints: No constraints specified.
  public var hasSnrs: Bool { let o = _accessor.offset(VTOFFSET.snrs.v); return o == 0 ? false : true }
  public var snrsCount: Int32 { let o = _accessor.offset(VTOFFSET.snrs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func snrs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.snrs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Signal strength of the electromagnetic energy received due to a lightning event, in kiloamps.
  ///  Example: /// Example: 163.7
  ///  Constraints: No constraints specified.
  public var sigStrength: Double { let o = _accessor.offset(VTOFFSET.sigStrength.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Semi-major axis of the 50% positional confidence ellipse, in kilometers.
  ///  Example: /// Example: 3.4
  ///  Constraints: No constraints specified.
  public var semiMajorAxis: Double { let o = _accessor.offset(VTOFFSET.semiMajorAxis.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Semi-minor axis of the 50% positional confidence ellipse, in kilometers.
  ///  Example: /// Example: 0.3
  ///  Constraints: No constraints specified.
  public var semiMinorAxis: Double { let o = _accessor.offset(VTOFFSET.semiMinorAxis.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Angle of orientation of the 50% positional confidence ellipse, in degrees clockwise from true north.
  ///  Example: /// Example: 75.7
  ///  Constraints: No constraints specified.
  public var angleOrientation: Double { let o = _accessor.offset(VTOFFSET.angleOrientation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Number of sensors used in the lightning event location solution.
  ///  Example: /// Example: 9
  ///  Constraints: No constraints specified.
  public var lightEventNum: Int32 { let o = _accessor.offset(VTOFFSET.lightEventNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of sensor(s) that participated in the lightning event location determination.
  ///  Example: /// Example: [11, 28, 190]
  ///  Constraints: No constraints specified.
  public var hasLightDetSensors: Bool { let o = _accessor.offset(VTOFFSET.lightDetSensors.v); return o == 0 ? false : true }
  public var lightDetSensorsCount: Int32 { let o = _accessor.offset(VTOFFSET.lightDetSensors.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func lightDetSensors(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.lightDetSensors.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The positional confidence of the calculated lightning event location using the chi-square statistical method.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  public var posConfidence: Double { let o = _accessor.offset(VTOFFSET.posConfidence.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Array of UDL record types (SENSOR, WEATHERREPORT) that are related to this WeatherData record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['SENSOR', 'WEATHERREPORT']
  ///  Constraints: No constraints specified.
  public var hasSrcTyps: Bool { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? false : true }
  public var srcTypsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcTyps(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of UUID(s) of the UDL data record(s) that are related to this WeatherData record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
  ///  Example: /// Example: ['1b23ba93-0957-4654-b5ca-8c3703f3ec57', '32944ee4-0437-4d94-95ce-2f2823ffa001']
  ///  Constraints: No constraints specified.
  public var hasSrcIds: Bool { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? false : true }
  public var srcIdsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcIds(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: WeatherData_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : WeatherData_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startWeatherData_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 39) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(origSensorId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSensorId, at: VTOFFSET.origSensorId.p) }
  public static func add(obTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obTime, at: VTOFFSET.obTime.p) }
  public static func addVectorOf(sigPwrs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sigPwrs, at: VTOFFSET.sigPwrs.p) }
  public static func addVectorOf(noiseLvls: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: noiseLvls, at: VTOFFSET.noiseLvls.p) }
  public static func addVectorOf(specWidths: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: specWidths, at: VTOFFSET.specWidths.p) }
  public static func addVectorOf(firstGuessAvgs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: firstGuessAvgs, at: VTOFFSET.firstGuessAvgs.p) }
  public static func add(qcValue: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: qcValue, def: 0, at: VTOFFSET.qcValue.p) }
  public static func add(fileCreation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fileCreation, at: VTOFFSET.fileCreation.p) }
  public static func add(termAlt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: termAlt, def: 0.0, at: VTOFFSET.termAlt.p) }
  public static func add(avgTxPwr: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgTxPwr, def: 0.0, at: VTOFFSET.avgTxPwr.p) }
  public static func add(avgRefPwr: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgRefPwr, def: 0.0, at: VTOFFSET.avgRefPwr.p) }
  public static func add(sectorNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sectorNum, def: 0, at: VTOFFSET.sectorNum.p) }
  public static func add(numElements: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numElements, def: 0, at: VTOFFSET.numElements.p) }
  public static func addVectorOf(tdAvgSampleNums: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tdAvgSampleNums, at: VTOFFSET.tdAvgSampleNums.p) }
  public static func add(checksum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: checksum, def: 0, at: VTOFFSET.checksum.p) }
  public static func addVectorOf(coIntegs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: coIntegs, at: VTOFFSET.coIntegs.p) }
  public static func addVectorOf(specAvgs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: specAvgs, at: VTOFFSET.specAvgs.p) }
  public static func addVectorOf(interpulsePeriods: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: interpulsePeriods, at: VTOFFSET.interpulsePeriods.p) }
  public static func addVectorOf(doppVels: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: doppVels, at: VTOFFSET.doppVels.p) }
  public static func addVectorOf(consRecs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: consRecs, at: VTOFFSET.consRecs.p) }
  public static func addVectorOf(snrs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snrs, at: VTOFFSET.snrs.p) }
  public static func add(sigStrength: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sigStrength, def: 0.0, at: VTOFFSET.sigStrength.p) }
  public static func add(semiMajorAxis: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: semiMajorAxis, def: 0.0, at: VTOFFSET.semiMajorAxis.p) }
  public static func add(semiMinorAxis: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: semiMinorAxis, def: 0.0, at: VTOFFSET.semiMinorAxis.p) }
  public static func add(angleOrientation: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: angleOrientation, def: 0.0, at: VTOFFSET.angleOrientation.p) }
  public static func add(lightEventNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lightEventNum, def: 0, at: VTOFFSET.lightEventNum.p) }
  public static func addVectorOf(lightDetSensors: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lightDetSensors, at: VTOFFSET.lightDetSensors.p) }
  public static func add(posConfidence: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: posConfidence, def: 0.0, at: VTOFFSET.posConfidence.p) }
  public static func addVectorOf(srcTyps: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcTyps, at: VTOFFSET.srcTyps.p) }
  public static func addVectorOf(srcIds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcIds, at: VTOFFSET.srcIds.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: WeatherData_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endWeatherData_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createWeatherData_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    origSensorIdOffset origSensorId: Offset = Offset(),
    obTimeOffset obTime: Offset = Offset(),
    sigPwrsVectorOffset sigPwrs: Offset = Offset(),
    noiseLvlsVectorOffset noiseLvls: Offset = Offset(),
    specWidthsVectorOffset specWidths: Offset = Offset(),
    firstGuessAvgsVectorOffset firstGuessAvgs: Offset = Offset(),
    qcValue: Int32 = 0,
    fileCreationOffset fileCreation: Offset = Offset(),
    termAlt: Double = 0.0,
    avgTxPwr: Double = 0.0,
    avgRefPwr: Double = 0.0,
    sectorNum: Int32 = 0,
    numElements: Int32 = 0,
    tdAvgSampleNumsVectorOffset tdAvgSampleNums: Offset = Offset(),
    checksum: Int32 = 0,
    coIntegsVectorOffset coIntegs: Offset = Offset(),
    specAvgsVectorOffset specAvgs: Offset = Offset(),
    interpulsePeriodsVectorOffset interpulsePeriods: Offset = Offset(),
    doppVelsVectorOffset doppVels: Offset = Offset(),
    consRecsVectorOffset consRecs: Offset = Offset(),
    snrsVectorOffset snrs: Offset = Offset(),
    sigStrength: Double = 0.0,
    semiMajorAxis: Double = 0.0,
    semiMinorAxis: Double = 0.0,
    angleOrientation: Double = 0.0,
    lightEventNum: Int32 = 0,
    lightDetSensorsVectorOffset lightDetSensors: Offset = Offset(),
    posConfidence: Double = 0.0,
    srcTypsVectorOffset srcTyps: Offset = Offset(),
    srcIdsVectorOffset srcIds: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: WeatherData_Full_dataMode_Enum = .real
  ) -> Offset {
    let __start = WeatherData_Full.startWeatherData_Full(&fbb)
    WeatherData_Full.add(id: id, &fbb)
    WeatherData_Full.add(classificationMarking: classificationMarking, &fbb)
    WeatherData_Full.add(idSensor: idSensor, &fbb)
    WeatherData_Full.add(origSensorId: origSensorId, &fbb)
    WeatherData_Full.add(obTime: obTime, &fbb)
    WeatherData_Full.addVectorOf(sigPwrs: sigPwrs, &fbb)
    WeatherData_Full.addVectorOf(noiseLvls: noiseLvls, &fbb)
    WeatherData_Full.addVectorOf(specWidths: specWidths, &fbb)
    WeatherData_Full.addVectorOf(firstGuessAvgs: firstGuessAvgs, &fbb)
    WeatherData_Full.add(qcValue: qcValue, &fbb)
    WeatherData_Full.add(fileCreation: fileCreation, &fbb)
    WeatherData_Full.add(termAlt: termAlt, &fbb)
    WeatherData_Full.add(avgTxPwr: avgTxPwr, &fbb)
    WeatherData_Full.add(avgRefPwr: avgRefPwr, &fbb)
    WeatherData_Full.add(sectorNum: sectorNum, &fbb)
    WeatherData_Full.add(numElements: numElements, &fbb)
    WeatherData_Full.addVectorOf(tdAvgSampleNums: tdAvgSampleNums, &fbb)
    WeatherData_Full.add(checksum: checksum, &fbb)
    WeatherData_Full.addVectorOf(coIntegs: coIntegs, &fbb)
    WeatherData_Full.addVectorOf(specAvgs: specAvgs, &fbb)
    WeatherData_Full.addVectorOf(interpulsePeriods: interpulsePeriods, &fbb)
    WeatherData_Full.addVectorOf(doppVels: doppVels, &fbb)
    WeatherData_Full.addVectorOf(consRecs: consRecs, &fbb)
    WeatherData_Full.addVectorOf(snrs: snrs, &fbb)
    WeatherData_Full.add(sigStrength: sigStrength, &fbb)
    WeatherData_Full.add(semiMajorAxis: semiMajorAxis, &fbb)
    WeatherData_Full.add(semiMinorAxis: semiMinorAxis, &fbb)
    WeatherData_Full.add(angleOrientation: angleOrientation, &fbb)
    WeatherData_Full.add(lightEventNum: lightEventNum, &fbb)
    WeatherData_Full.addVectorOf(lightDetSensors: lightDetSensors, &fbb)
    WeatherData_Full.add(posConfidence: posConfidence, &fbb)
    WeatherData_Full.addVectorOf(srcTyps: srcTyps, &fbb)
    WeatherData_Full.addVectorOf(srcIds: srcIds, &fbb)
    WeatherData_Full.add(origNetwork: origNetwork, &fbb)
    WeatherData_Full.add(createdAt: createdAt, &fbb)
    WeatherData_Full.add(createdBy: createdBy, &fbb)
    WeatherData_Full.add(source: source, &fbb)
    WeatherData_Full.add(origin: origin, &fbb)
    WeatherData_Full.add(dataMode: dataMode, &fbb)
    return WeatherData_Full.endWeatherData_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSensorId.p, fieldName: "origSensorId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obTime.p, fieldName: "obTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sigPwrs.p, fieldName: "sigPwrs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.noiseLvls.p, fieldName: "noiseLvls", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.specWidths.p, fieldName: "specWidths", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.firstGuessAvgs.p, fieldName: "firstGuessAvgs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.qcValue.p, fieldName: "qcValue", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.fileCreation.p, fieldName: "fileCreation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.termAlt.p, fieldName: "termAlt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgTxPwr.p, fieldName: "avgTxPwr", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgRefPwr.p, fieldName: "avgRefPwr", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.sectorNum.p, fieldName: "sectorNum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numElements.p, fieldName: "numElements", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.tdAvgSampleNums.p, fieldName: "tdAvgSampleNums", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.checksum.p, fieldName: "checksum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.coIntegs.p, fieldName: "coIntegs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.specAvgs.p, fieldName: "specAvgs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.interpulsePeriods.p, fieldName: "interpulsePeriods", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.doppVels.p, fieldName: "doppVels", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.consRecs.p, fieldName: "consRecs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.snrs.p, fieldName: "snrs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.sigStrength.p, fieldName: "sigStrength", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.semiMajorAxis.p, fieldName: "semiMajorAxis", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.semiMinorAxis.p, fieldName: "semiMinorAxis", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.angleOrientation.p, fieldName: "angleOrientation", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lightEventNum.p, fieldName: "lightEventNum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.lightDetSensors.p, fieldName: "lightDetSensors", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.posConfidence.p, fieldName: "posConfidence", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.srcTyps.p, fieldName: "srcTyps", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.srcIds.p, fieldName: "srcIds", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: WeatherData_Full_dataMode_Enum.self)
    _v.finish()
  }
}

