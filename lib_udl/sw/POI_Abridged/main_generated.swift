// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum POI_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: POI_Abridged_dataMode_Enum { return .exercise }
  public static var min: POI_Abridged_dataMode_Enum { return .real }
}


///  /// A Point of Interest is loosely based on the MITRE CoT (Cursor on Target) schema (https://www.mitre.org/publications/technical-papers/cursorontarget-message-router-users-guide) and provides a simple way to specify a point on the earth for a variety of purposes (tasking, targeting, etc).
public struct POI_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "POIA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: POI_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case pps = 8
    case msnid = 10
    case pri = 12
    case trkid = 14
    case idWeatherReport = 16
    case poiid = 18
    case name = 20
    case desc = 22
    case spec = 24
    case ident = 26
    case env = 28
    case plat = 30
    case activity = 32
    case ts = 34
    case start = 36
    case stale = 38
    case how = 40
    case type = 42
    case lat = 44
    case lon = 46
    case alt = 48
    case az = 50
    case el = 52
    case le = 54
    case ce = 56
    case elle = 58
    case cntct = 60
    case conf = 62
    case urls = 64
    case atext = 66
    case agjson = 68
    case atype = 70
    case andims = 72
    case asrid = 74
    case createdAt = 76
    case createdBy = 78
    case sourceDl = 80
    case source = 82
    case dataMode = 84
    case origin = 86
    case groups = 88
    case asset = 90
    case beNumber = 92
    case orientation = 94
    case origNetwork = 96
    case transactionId = 98
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: POI-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The purpose of this Point of Interest record (e.g., BDA, EQPT, EVENT, GEOL, HZRD, PPLI, SHOTBOX, SURVL, TGT, TSK, WTHR).
  ///  Example: /// Example: BDA
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var pps: String? { let o = _accessor.offset(VTOFFSET.pps.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ppsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pps.v) }
  ///  Optional mission ID related to the POI.
  ///  Example: /// Example: MSN-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var msnid: String? { let o = _accessor.offset(VTOFFSET.msnid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msnidSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msnid.v) }
  ///  Priority of the  POI target object.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var pri: Int32 { let o = _accessor.offset(VTOFFSET.pri.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional ID of an associated track related to the POI object, if applicable. This track ID should correlate the Point of Interest to a track from the Track service.
  ///  Example: /// Example: TRK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var trkid: String? { let o = _accessor.offset(VTOFFSET.trkid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var trkidSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.trkid.v) }
  ///  Array of one or more unique identifiers of weather records associated with this POI. Each element in array must be 36 characters or less in length.
  ///  Example: /// Example: ['WEATHER-EVENT-ID1', 'WEATHER-EVENT-ID2']
  ///  Constraints: No constraints specified.
  public var hasIdWeatherReport: Bool { let o = _accessor.offset(VTOFFSET.idWeatherReport.v); return o == 0 ? false : true }
  public var idWeatherReportCount: Int32 { let o = _accessor.offset(VTOFFSET.idWeatherReport.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func idWeatherReport(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.idWeatherReport.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Identifier of the actual Point of Interest or target object, which should remain the same on subsequent POI records of the same Point of Interest.
  ///  Example: /// Example: POI-ID
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var poiid: String? { let o = _accessor.offset(VTOFFSET.poiid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var poiidSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.poiid.v) }
  ///  Name of the POI target object.
  ///  Example: /// Example: POI_NAME
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  Description of the POI target object.
  ///  Example: /// Example: Description of the object
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var desc: String? { let o = _accessor.offset(VTOFFSET.desc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.desc.v) }
  ///  Specific point/object type (e.g., 82/GROUND, LIGHT_TANK, etc.).
  ///  Example: /// Example: LIGHT_TANK
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var spec: String? { let o = _accessor.offset(VTOFFSET.spec.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var specSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.spec.v) }
  ///  Estimated identity of the point/object (e.g., FRIEND, HOSTILE, SUSPECT, ASSUMED_FRIEND, UNKNOWN, etc.).
  ///  Example: /// Example: FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var ident: String? { let o = _accessor.offset(VTOFFSET.ident.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var identSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ident.v) }
  ///  POI environment type (e.g., LAND, SURFACE, SUBSURFACE, UNKNOWN, etc.).
  ///  Example: /// Example: SURFACE
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var env: String? { let o = _accessor.offset(VTOFFSET.env.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var envSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.env.v) }
  ///  POI/object platform type (e.g., 14/GROUND, COMBAT_VEHICLE, etc.).
  ///  Example: /// Example: COMBAT_VEHICLE
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var plat: String? { let o = _accessor.offset(VTOFFSET.plat.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var platSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.plat.v) }
  ///  The activity in which the POI subject is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 30/LAND) or as the descriptive enumeration (e.g. TRAINING), which are equivalent.
  ///  Example: /// Example: TRAINING
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var activity: String? { let o = _accessor.offset(VTOFFSET.activity.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var activitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.activity.v) }
  ///  Activity/POI timestamp in ISO8601 UTC format.
  ///  Example: /// Example: 2020-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var ts: String? { let o = _accessor.offset(VTOFFSET.ts.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ts.v) }
  ///  Start time of event validity (optional), in ISO8601 UTC format.
  ///  Example: /// Example: 2020-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var start: String? { let o = _accessor.offset(VTOFFSET.start.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.start.v) }
  ///  Stale timestamp (optional), in ISO8601 UTC format.
  ///  Example: /// Example: 2020-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var stale: String? { let o = _accessor.offset(VTOFFSET.stale.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var staleSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.stale.v) }
  ///  How the event point was generated, in CoT object heirarchy notation (optional, CoT).
  ///  Example: /// Example: h-g-i-g-o
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var how: String? { let o = _accessor.offset(VTOFFSET.how.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var howSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.how.v) }
  ///  Event type, in CoT object heirarchy notation (optional, CoT).
  ///  Example: /// Example: a-h-G
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Point height above ellipsoid (WGS-84), in meters.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  public var alt: Double { let o = _accessor.offset(VTOFFSET.alt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Target object pointing azimuth angle, in degrees (for target with sensing or emitting capability).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var az: Double { let o = _accessor.offset(VTOFFSET.az.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Target object pointing elevation angle, in degrees (for target with sensing or emitting capability).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var el: Double { let o = _accessor.offset(VTOFFSET.el.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Height above lat/lon point, in meters (1-sigma, if representing linear error).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var le: Double { let o = _accessor.offset(VTOFFSET.le.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var ce: Double { let o = _accessor.offset(VTOFFSET.ce.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Elliptical area about the lat/lon point, specified as [semi-major axis (m), semi-minor axis (m), orientation (deg) off true North at POI].
  ///  Example: /// Example: [125.5, 85.1, 125.75]
  ///  Constraints: No constraints specified.
  public var hasElle: Bool { let o = _accessor.offset(VTOFFSET.elle.v); return o == 0 ? false : true }
  public var elleCount: Int32 { let o = _accessor.offset(VTOFFSET.elle.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func elle(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.elle.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
  ///  Example: /// Example: Contact Info
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var cntct: String? { let o = _accessor.offset(VTOFFSET.cntct.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cntctSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cntct.v) }
  ///  POI confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var conf: Double { let o = _accessor.offset(VTOFFSET.conf.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  List of URLs to before/after images of this Point of Interest entity.
  ///  Example: /// Example: ['URL1', 'URL2']
  ///  Constraints: No constraints specified.
  public var hasUrls: Bool { let o = _accessor.offset(VTOFFSET.urls.v); return o == 0 ? false : true }
  public var urlsCount: Int32 { let o = _accessor.offset(VTOFFSET.urls.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func urls(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.urls.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: No constraints specified.
  public var atext: String? { let o = _accessor.offset(VTOFFSET.atext.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var atextSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.atext.v) }
  ///  Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  ///  Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  ///  Constraints: No constraints specified.
  public var agjson: String? { let o = _accessor.offset(VTOFFSET.agjson.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var agjsonSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.agjson.v) }
  ///  Type of region as projected on the ground.
  ///  Example: /// Example: Type1
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var atype: String? { let o = _accessor.offset(VTOFFSET.atype.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var atypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.atype.v) }
  ///  Number of dimensions of the geometry depicted by region.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var andims: Int32 { let o = _accessor.offset(VTOFFSET.andims.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Geographical spatial_ref_sys for region.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var asrid: Int32 { let o = _accessor.offset(VTOFFSET.asrid.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: POI_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : POI_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Optional array of groups used when a POI msg originates from a TAK server. Each group must be no longer than 256 characters. Groups identify a set of users targeted by the cot/poi msg.
  ///  Example: /// Example: ['GROUP1', 'GROUP2']
  ///  Constraints: No constraints specified.
  public var hasGroups: Bool { let o = _accessor.offset(VTOFFSET.groups.v); return o == 0 ? false : true }
  public var groupsCount: Int32 { let o = _accessor.offset(VTOFFSET.groups.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func groups(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.groups.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  ID/name of the platform or entity providing the POI data.
  ///  Example: /// Example: PLATFORM_NAME
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var asset: String? { let o = _accessor.offset(VTOFFSET.asset.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var assetSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.asset.v) }
  ///  The Basic Encyclopedia Number associated with the POI, if applicable.
  ///  Example: /// Example: 0427RT1030
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var beNumber: String? { let o = _accessor.offset(VTOFFSET.beNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var beNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.beNumber.v) }
  ///  The orientation of a vehicle, platform or other entity described by the POI. The orientation is defined as the pointing direction of the front/nose of the object in degrees clockwise from true North at the object point.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var orientation: Double { let o = _accessor.offset(VTOFFSET.orientation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var transactionId: String? { let o = _accessor.offset(VTOFFSET.transactionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transactionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transactionId.v) }
  public static func startPOI_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 48) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(pps: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pps, at: VTOFFSET.pps.p) }
  public static func add(msnid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msnid, at: VTOFFSET.msnid.p) }
  public static func add(pri: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pri, def: 0, at: VTOFFSET.pri.p) }
  public static func add(trkid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trkid, at: VTOFFSET.trkid.p) }
  public static func addVectorOf(idWeatherReport: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idWeatherReport, at: VTOFFSET.idWeatherReport.p) }
  public static func add(poiid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: poiid, at: VTOFFSET.poiid.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(desc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: desc, at: VTOFFSET.desc.p) }
  public static func add(spec: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: spec, at: VTOFFSET.spec.p) }
  public static func add(ident: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ident, at: VTOFFSET.ident.p) }
  public static func add(env: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: env, at: VTOFFSET.env.p) }
  public static func add(plat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: plat, at: VTOFFSET.plat.p) }
  public static func add(activity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: activity, at: VTOFFSET.activity.p) }
  public static func add(ts: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ts, at: VTOFFSET.ts.p) }
  public static func add(start: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: start, at: VTOFFSET.start.p) }
  public static func add(stale: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: stale, at: VTOFFSET.stale.p) }
  public static func add(how: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: how, at: VTOFFSET.how.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(alt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: alt, def: 0.0, at: VTOFFSET.alt.p) }
  public static func add(az: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: az, def: 0.0, at: VTOFFSET.az.p) }
  public static func add(el: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: el, def: 0.0, at: VTOFFSET.el.p) }
  public static func add(le: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: le, def: 0.0, at: VTOFFSET.le.p) }
  public static func add(ce: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ce, def: 0.0, at: VTOFFSET.ce.p) }
  public static func addVectorOf(elle: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: elle, at: VTOFFSET.elle.p) }
  public static func add(cntct: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cntct, at: VTOFFSET.cntct.p) }
  public static func add(conf: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: conf, def: 0.0, at: VTOFFSET.conf.p) }
  public static func addVectorOf(urls: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: urls, at: VTOFFSET.urls.p) }
  public static func add(atext: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: atext, at: VTOFFSET.atext.p) }
  public static func add(agjson: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: agjson, at: VTOFFSET.agjson.p) }
  public static func add(atype: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: atype, at: VTOFFSET.atype.p) }
  public static func add(andims: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: andims, def: 0, at: VTOFFSET.andims.p) }
  public static func add(asrid: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: asrid, def: 0, at: VTOFFSET.asrid.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(dataMode: POI_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func addVectorOf(groups: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: groups, at: VTOFFSET.groups.p) }
  public static func add(asset: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: asset, at: VTOFFSET.asset.p) }
  public static func add(beNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: beNumber, at: VTOFFSET.beNumber.p) }
  public static func add(orientation: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: orientation, def: 0.0, at: VTOFFSET.orientation.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(transactionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transactionId, at: VTOFFSET.transactionId.p) }
  public static func endPOI_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createPOI_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    ppsOffset pps: Offset = Offset(),
    msnidOffset msnid: Offset = Offset(),
    pri: Int32 = 0,
    trkidOffset trkid: Offset = Offset(),
    idWeatherReportVectorOffset idWeatherReport: Offset = Offset(),
    poiidOffset poiid: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    descOffset desc: Offset = Offset(),
    specOffset spec: Offset = Offset(),
    identOffset ident: Offset = Offset(),
    envOffset env: Offset = Offset(),
    platOffset plat: Offset = Offset(),
    activityOffset activity: Offset = Offset(),
    tsOffset ts: Offset = Offset(),
    startOffset start: Offset = Offset(),
    staleOffset stale: Offset = Offset(),
    howOffset how: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    lat: Double = 0.0,
    lon: Double = 0.0,
    alt: Double = 0.0,
    az: Double = 0.0,
    el: Double = 0.0,
    le: Double = 0.0,
    ce: Double = 0.0,
    elleVectorOffset elle: Offset = Offset(),
    cntctOffset cntct: Offset = Offset(),
    conf: Double = 0.0,
    urlsVectorOffset urls: Offset = Offset(),
    atextOffset atext: Offset = Offset(),
    agjsonOffset agjson: Offset = Offset(),
    atypeOffset atype: Offset = Offset(),
    andims: Int32 = 0,
    asrid: Int32 = 0,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    dataMode: POI_Abridged_dataMode_Enum = .real,
    originOffset origin: Offset = Offset(),
    groupsVectorOffset groups: Offset = Offset(),
    assetOffset asset: Offset = Offset(),
    beNumberOffset beNumber: Offset = Offset(),
    orientation: Double = 0.0,
    origNetworkOffset origNetwork: Offset = Offset(),
    transactionIdOffset transactionId: Offset = Offset()
  ) -> Offset {
    let __start = POI_Abridged.startPOI_Abridged(&fbb)
    POI_Abridged.add(id: id, &fbb)
    POI_Abridged.add(classificationMarking: classificationMarking, &fbb)
    POI_Abridged.add(pps: pps, &fbb)
    POI_Abridged.add(msnid: msnid, &fbb)
    POI_Abridged.add(pri: pri, &fbb)
    POI_Abridged.add(trkid: trkid, &fbb)
    POI_Abridged.addVectorOf(idWeatherReport: idWeatherReport, &fbb)
    POI_Abridged.add(poiid: poiid, &fbb)
    POI_Abridged.add(name: name, &fbb)
    POI_Abridged.add(desc: desc, &fbb)
    POI_Abridged.add(spec: spec, &fbb)
    POI_Abridged.add(ident: ident, &fbb)
    POI_Abridged.add(env: env, &fbb)
    POI_Abridged.add(plat: plat, &fbb)
    POI_Abridged.add(activity: activity, &fbb)
    POI_Abridged.add(ts: ts, &fbb)
    POI_Abridged.add(start: start, &fbb)
    POI_Abridged.add(stale: stale, &fbb)
    POI_Abridged.add(how: how, &fbb)
    POI_Abridged.add(type: type, &fbb)
    POI_Abridged.add(lat: lat, &fbb)
    POI_Abridged.add(lon: lon, &fbb)
    POI_Abridged.add(alt: alt, &fbb)
    POI_Abridged.add(az: az, &fbb)
    POI_Abridged.add(el: el, &fbb)
    POI_Abridged.add(le: le, &fbb)
    POI_Abridged.add(ce: ce, &fbb)
    POI_Abridged.addVectorOf(elle: elle, &fbb)
    POI_Abridged.add(cntct: cntct, &fbb)
    POI_Abridged.add(conf: conf, &fbb)
    POI_Abridged.addVectorOf(urls: urls, &fbb)
    POI_Abridged.add(atext: atext, &fbb)
    POI_Abridged.add(agjson: agjson, &fbb)
    POI_Abridged.add(atype: atype, &fbb)
    POI_Abridged.add(andims: andims, &fbb)
    POI_Abridged.add(asrid: asrid, &fbb)
    POI_Abridged.add(createdAt: createdAt, &fbb)
    POI_Abridged.add(createdBy: createdBy, &fbb)
    POI_Abridged.add(sourceDl: sourceDl, &fbb)
    POI_Abridged.add(source: source, &fbb)
    POI_Abridged.add(dataMode: dataMode, &fbb)
    POI_Abridged.add(origin: origin, &fbb)
    POI_Abridged.addVectorOf(groups: groups, &fbb)
    POI_Abridged.add(asset: asset, &fbb)
    POI_Abridged.add(beNumber: beNumber, &fbb)
    POI_Abridged.add(orientation: orientation, &fbb)
    POI_Abridged.add(origNetwork: origNetwork, &fbb)
    POI_Abridged.add(transactionId: transactionId, &fbb)
    return POI_Abridged.endPOI_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pps.p, fieldName: "pps", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msnid.p, fieldName: "msnid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pri.p, fieldName: "pri", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.trkid.p, fieldName: "trkid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idWeatherReport.p, fieldName: "idWeatherReport", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.poiid.p, fieldName: "poiid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.desc.p, fieldName: "desc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.spec.p, fieldName: "spec", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ident.p, fieldName: "ident", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.env.p, fieldName: "env", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.plat.p, fieldName: "plat", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.activity.p, fieldName: "activity", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ts.p, fieldName: "ts", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.start.p, fieldName: "start", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.stale.p, fieldName: "stale", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.how.p, fieldName: "how", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.alt.p, fieldName: "alt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.az.p, fieldName: "az", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.el.p, fieldName: "el", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.le.p, fieldName: "le", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ce.p, fieldName: "ce", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elle.p, fieldName: "elle", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.cntct.p, fieldName: "cntct", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.conf.p, fieldName: "conf", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.urls.p, fieldName: "urls", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.atext.p, fieldName: "atext", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.agjson.p, fieldName: "agjson", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.atype.p, fieldName: "atype", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.andims.p, fieldName: "andims", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.asrid.p, fieldName: "asrid", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: POI_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.groups.p, fieldName: "groups", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.asset.p, fieldName: "asset", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.beNumber.p, fieldName: "beNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.orientation.p, fieldName: "orientation", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.transactionId.p, fieldName: "transactionId", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

