// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection of Requirements associated with this Air Transport Mission.
public struct AircraftMissionRequirements_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AircraftMissionRequirements_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case gdssReqId = 4
    case onloadId = 6
    case onloadLocode = 8
    case offloadId = 10
    case offloadLocode = 12
    case uln = 14
    case transReqNum = 16
    case projName = 18
    case oplan = 20
    case numPax = 22
    case numLitter = 24
    case numAmbulatory = 26
    case numAttendant = 28
    case bulkWeight = 30
    case oversizeWeight = 32
    case outsizeWeight = 34
    case ead = 36
    case lad = 38
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Global Decision Support System (GDSS) mission requirement identifier.
  ///  Example: /// Example: 23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var gdssReqId: String? { let o = _accessor.offset(VTOFFSET.gdssReqId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var gdssReqIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.gdssReqId.v) }
  ///  Identifier of the onload itinerary location.
  ///  Example: /// Example: 200
  ///  Constraints: No constraints specified.
  public var onloadId: Int32 { let o = _accessor.offset(VTOFFSET.onloadId.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Onload location code.
  ///  Example: /// Example: KCHS
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var onloadLocode: String? { let o = _accessor.offset(VTOFFSET.onloadLocode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var onloadLocodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.onloadLocode.v) }
  ///  Identifier of the offload itinerary location.
  ///  Example: /// Example: 300
  ///  Constraints: No constraints specified.
  public var offloadId: Int32 { let o = _accessor.offset(VTOFFSET.offloadId.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Offload location code.
  ///  Example: /// Example: KHOP
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var offloadLocode: String? { let o = _accessor.offset(VTOFFSET.offloadLocode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var offloadLocodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.offloadLocode.v) }
  ///  Unit line number.
  ///  Example: /// Example: T01ME01
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var uln: String? { let o = _accessor.offset(VTOFFSET.uln.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ulnSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.uln.v) }
  ///  Transportation requirement number.
  ///  Example: /// Example: T01ME01
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var transReqNum: String? { let o = _accessor.offset(VTOFFSET.transReqNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transReqNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transReqNum.v) }
  ///  Project name.
  ///  Example: /// Example: CENTINTRA21
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var projName: String? { let o = _accessor.offset(VTOFFSET.projName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var projNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.projName.v) }
  ///  Identification number of the Operation Plan (OPLAN) associated with this mission.
  ///  Example: /// Example: 5027
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var oplan: String? { let o = _accessor.offset(VTOFFSET.oplan.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var oplanSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.oplan.v) }
  ///  Number of passengers associated with the mission.
  ///  Example: /// Example: 44
  ///  Constraints: No constraints specified.
  public var numPax: Int32 { let o = _accessor.offset(VTOFFSET.numPax.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of litter patients tasked for the mission.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var numLitter: Int32 { let o = _accessor.offset(VTOFFSET.numLitter.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of ambulatory patients tasked for the mission.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var numAmbulatory: Int32 { let o = _accessor.offset(VTOFFSET.numAmbulatory.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of attendants tasked for the mission.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var numAttendant: Int32 { let o = _accessor.offset(VTOFFSET.numAttendant.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Total weight of the bulk cargo, in kilograms.
  ///  Example: /// Example: 1.3
  ///  Constraints: No constraints specified.
  public var bulkWeight: Double { let o = _accessor.offset(VTOFFSET.bulkWeight.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Total weight of the oversized cargo, in kilograms.
  ///  Example: /// Example: 1.3
  ///  Constraints: No constraints specified.
  public var oversizeWeight: Double { let o = _accessor.offset(VTOFFSET.oversizeWeight.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Total weight of the outsize cargo, in kilograms.
  ///  Example: /// Example: 1.3
  ///  Constraints: No constraints specified.
  public var outsizeWeight: Double { let o = _accessor.offset(VTOFFSET.outsizeWeight.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Earliest available date the cargo can be picked up.
  ///  Example: /// Example: 2024-01-01T16:00:00Z
  ///  Constraints: No constraints specified.
  public var ead: String? { let o = _accessor.offset(VTOFFSET.ead.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eadSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ead.v) }
  ///  Latest available date the cargo may be delivered.
  ///  Example: /// Example: 2024-01-01T16:00:00Z
  ///  Constraints: No constraints specified.
  public var lad: String? { let o = _accessor.offset(VTOFFSET.lad.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ladSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lad.v) }
  public static func startAircraftMissionRequirements_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 18) }
  public static func add(gdssReqId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: gdssReqId, at: VTOFFSET.gdssReqId.p) }
  public static func add(onloadId: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: onloadId, def: 0, at: VTOFFSET.onloadId.p) }
  public static func add(onloadLocode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: onloadLocode, at: VTOFFSET.onloadLocode.p) }
  public static func add(offloadId: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: offloadId, def: 0, at: VTOFFSET.offloadId.p) }
  public static func add(offloadLocode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: offloadLocode, at: VTOFFSET.offloadLocode.p) }
  public static func add(uln: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uln, at: VTOFFSET.uln.p) }
  public static func add(transReqNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transReqNum, at: VTOFFSET.transReqNum.p) }
  public static func add(projName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: projName, at: VTOFFSET.projName.p) }
  public static func add(oplan: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: oplan, at: VTOFFSET.oplan.p) }
  public static func add(numPax: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numPax, def: 0, at: VTOFFSET.numPax.p) }
  public static func add(numLitter: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numLitter, def: 0, at: VTOFFSET.numLitter.p) }
  public static func add(numAmbulatory: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numAmbulatory, def: 0, at: VTOFFSET.numAmbulatory.p) }
  public static func add(numAttendant: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numAttendant, def: 0, at: VTOFFSET.numAttendant.p) }
  public static func add(bulkWeight: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bulkWeight, def: 0.0, at: VTOFFSET.bulkWeight.p) }
  public static func add(oversizeWeight: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: oversizeWeight, def: 0.0, at: VTOFFSET.oversizeWeight.p) }
  public static func add(outsizeWeight: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: outsizeWeight, def: 0.0, at: VTOFFSET.outsizeWeight.p) }
  public static func add(ead: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ead, at: VTOFFSET.ead.p) }
  public static func add(lad: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lad, at: VTOFFSET.lad.p) }
  public static func endAircraftMissionRequirements_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAircraftMissionRequirements_Abridged(
    _ fbb: inout FlatBufferBuilder,
    gdssReqIdOffset gdssReqId: Offset = Offset(),
    onloadId: Int32 = 0,
    onloadLocodeOffset onloadLocode: Offset = Offset(),
    offloadId: Int32 = 0,
    offloadLocodeOffset offloadLocode: Offset = Offset(),
    ulnOffset uln: Offset = Offset(),
    transReqNumOffset transReqNum: Offset = Offset(),
    projNameOffset projName: Offset = Offset(),
    oplanOffset oplan: Offset = Offset(),
    numPax: Int32 = 0,
    numLitter: Int32 = 0,
    numAmbulatory: Int32 = 0,
    numAttendant: Int32 = 0,
    bulkWeight: Double = 0.0,
    oversizeWeight: Double = 0.0,
    outsizeWeight: Double = 0.0,
    eadOffset ead: Offset = Offset(),
    ladOffset lad: Offset = Offset()
  ) -> Offset {
    let __start = AircraftMissionRequirements_Abridged.startAircraftMissionRequirements_Abridged(&fbb)
    AircraftMissionRequirements_Abridged.add(gdssReqId: gdssReqId, &fbb)
    AircraftMissionRequirements_Abridged.add(onloadId: onloadId, &fbb)
    AircraftMissionRequirements_Abridged.add(onloadLocode: onloadLocode, &fbb)
    AircraftMissionRequirements_Abridged.add(offloadId: offloadId, &fbb)
    AircraftMissionRequirements_Abridged.add(offloadLocode: offloadLocode, &fbb)
    AircraftMissionRequirements_Abridged.add(uln: uln, &fbb)
    AircraftMissionRequirements_Abridged.add(transReqNum: transReqNum, &fbb)
    AircraftMissionRequirements_Abridged.add(projName: projName, &fbb)
    AircraftMissionRequirements_Abridged.add(oplan: oplan, &fbb)
    AircraftMissionRequirements_Abridged.add(numPax: numPax, &fbb)
    AircraftMissionRequirements_Abridged.add(numLitter: numLitter, &fbb)
    AircraftMissionRequirements_Abridged.add(numAmbulatory: numAmbulatory, &fbb)
    AircraftMissionRequirements_Abridged.add(numAttendant: numAttendant, &fbb)
    AircraftMissionRequirements_Abridged.add(bulkWeight: bulkWeight, &fbb)
    AircraftMissionRequirements_Abridged.add(oversizeWeight: oversizeWeight, &fbb)
    AircraftMissionRequirements_Abridged.add(outsizeWeight: outsizeWeight, &fbb)
    AircraftMissionRequirements_Abridged.add(ead: ead, &fbb)
    AircraftMissionRequirements_Abridged.add(lad: lad, &fbb)
    return AircraftMissionRequirements_Abridged.endAircraftMissionRequirements_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.gdssReqId.p, fieldName: "gdssReqId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.onloadId.p, fieldName: "onloadId", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.onloadLocode.p, fieldName: "onloadLocode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.offloadId.p, fieldName: "offloadId", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.offloadLocode.p, fieldName: "offloadLocode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.uln.p, fieldName: "uln", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.transReqNum.p, fieldName: "transReqNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.projName.p, fieldName: "projName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.oplan.p, fieldName: "oplan", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numPax.p, fieldName: "numPax", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numLitter.p, fieldName: "numLitter", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numAmbulatory.p, fieldName: "numAmbulatory", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numAttendant.p, fieldName: "numAttendant", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.bulkWeight.p, fieldName: "bulkWeight", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.oversizeWeight.p, fieldName: "oversizeWeight", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.outsizeWeight.p, fieldName: "outsizeWeight", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ead.p, fieldName: "ead", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lad.p, fieldName: "lad", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

