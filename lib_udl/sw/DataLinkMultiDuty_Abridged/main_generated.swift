// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
public struct DataLinkMultiDuty_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "DATA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: DataLinkMultiDuty_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case unitDes = 4
    case name = 6
    case rank = 8
    case duty = 10
    case dutyTeleFreqNums = 12
    case multiDutyVoiceCoord = 14
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Designated force of unit specified by ship name, unit call sign, or unit designator.
  ///  Example: /// Example: SHIP:STENNIS
  ///  Constraints: Minimum length = 0, Maximum length = 38
  public var unitDes: String? { let o = _accessor.offset(VTOFFSET.unitDes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var unitDesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.unitDes.v) }
  ///  The name of the person to be contacted for multilink coordination.
  ///  Example: /// Example: POPOVICH
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  The rank or position of the person to be contacted for multilink coordination.
  ///  Example: /// Example: LCDR
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var rank: String? { let o = _accessor.offset(VTOFFSET.rank.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rankSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rank.v) }
  ///  Specific duties assigned for multilink coordination (e.g. ICO, RICO, SICO).
  ///  Example: /// Example: SICO
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var duty: String? { let o = _accessor.offset(VTOFFSET.duty.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dutySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.duty.v) }
  ///  Array of telephone numbers or the frequency values for radio transmission of the person to be contacted for multilink coordination.
  ///  Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
  ///  Constraints: No constraints specified.
  public var hasDutyTeleFreqNums: Bool { let o = _accessor.offset(VTOFFSET.dutyTeleFreqNums.v); return o == 0 ? false : true }
  public var dutyTeleFreqNumsCount: Int32 { let o = _accessor.offset(VTOFFSET.dutyTeleFreqNums.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func dutyTeleFreqNums(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.dutyTeleFreqNums.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasMultiDutyVoiceCoord: Bool { let o = _accessor.offset(VTOFFSET.multiDutyVoiceCoord.v); return o == 0 ? false : true }
  public var multiDutyVoiceCoordCount: Int32 { let o = _accessor.offset(VTOFFSET.multiDutyVoiceCoord.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func multiDutyVoiceCoord(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.multiDutyVoiceCoord.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startDataLinkMultiDuty_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 6) }
  public static func add(unitDes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: unitDes, at: VTOFFSET.unitDes.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(rank: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rank, at: VTOFFSET.rank.p) }
  public static func add(duty: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: duty, at: VTOFFSET.duty.p) }
  public static func addVectorOf(dutyTeleFreqNums: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dutyTeleFreqNums, at: VTOFFSET.dutyTeleFreqNums.p) }
  public static func addVectorOf(multiDutyVoiceCoord: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: multiDutyVoiceCoord, at: VTOFFSET.multiDutyVoiceCoord.p) }
  public static func endDataLinkMultiDuty_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createDataLinkMultiDuty_Abridged(
    _ fbb: inout FlatBufferBuilder,
    unitDesOffset unitDes: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    rankOffset rank: Offset = Offset(),
    dutyOffset duty: Offset = Offset(),
    dutyTeleFreqNumsVectorOffset dutyTeleFreqNums: Offset = Offset(),
    multiDutyVoiceCoordVectorOffset multiDutyVoiceCoord: Offset = Offset()
  ) -> Offset {
    let __start = DataLinkMultiDuty_Abridged.startDataLinkMultiDuty_Abridged(&fbb)
    DataLinkMultiDuty_Abridged.add(unitDes: unitDes, &fbb)
    DataLinkMultiDuty_Abridged.add(name: name, &fbb)
    DataLinkMultiDuty_Abridged.add(rank: rank, &fbb)
    DataLinkMultiDuty_Abridged.add(duty: duty, &fbb)
    DataLinkMultiDuty_Abridged.addVectorOf(dutyTeleFreqNums: dutyTeleFreqNums, &fbb)
    DataLinkMultiDuty_Abridged.addVectorOf(multiDutyVoiceCoord: multiDutyVoiceCoord, &fbb)
    return DataLinkMultiDuty_Abridged.endDataLinkMultiDuty_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.unitDes.p, fieldName: "unitDes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rank.p, fieldName: "rank", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.duty.p, fieldName: "duty", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dutyTeleFreqNums.p, fieldName: "dutyTeleFreqNums", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.multiDutyVoiceCoord.p, fieldName: "multiDutyVoiceCoord", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

