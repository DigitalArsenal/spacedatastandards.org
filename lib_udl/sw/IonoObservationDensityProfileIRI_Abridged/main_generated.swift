// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Full set of the IRI formalism coefficients.
public struct IonoObservationDensityProfileIRI_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "IONO" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: IonoObservationDensityProfileIRI_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case description = 4
    case nmF2 = 6
    case hmF2 = 8
    case b0 = 10
    case b1 = 12
    case nmF1 = 14
    case hmF1 = 16
    case d1 = 18
    case hz = 20
    case hValTop = 22
    case nValB = 24
    case nmE = 26
    case hmE = 28
    case hdx = 30
    case nmD = 32
    case hmD = 34
    case ha = 36
    case fp1 = 38
    case fp2 = 40
    case fp30 = 42
    case fp3U = 44
    case chi = 46
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Description of IRI implementation.
  ///  Example: /// Example: Full altitude range of 1D vertical plasma density profile for D, E, and F regions of the ionosphere provided by IRI, in which model parameters are replaced with observed ionogram-derived data where available.
  ///  Constraints: No constraints specified.
  public var description: String? { let o = _accessor.offset(VTOFFSET.description.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.description.v) }
  ///  Peak density of F2 layer, in grams per cubic centimeter.
  ///  Example: /// Example: 313283.1
  ///  Constraints: No constraints specified.
  public var nmF2: Double { let o = _accessor.offset(VTOFFSET.nmF2.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Peak height of F2 layer, in kilometers.
  ///  Example: /// Example: 265.42
  ///  Constraints: No constraints specified.
  public var hmF2: Double { let o = _accessor.offset(VTOFFSET.hmF2.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  B0 parameter of the F2 layer shape.
  ///  Example: /// Example: 245.1
  ///  Constraints: No constraints specified.
  public var b0: Double { let o = _accessor.offset(VTOFFSET.b0.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  B1 parameter of the F2 layer shape.
  ///  Example: /// Example: 3.45
  ///  Constraints: No constraints specified.
  public var b1: Double { let o = _accessor.offset(VTOFFSET.b1.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Peak density of the F1 layer, in grams per cubic centimeter.
  ///  Example: /// Example: 210486
  ///  Constraints: No constraints specified.
  public var nmF1: Double { let o = _accessor.offset(VTOFFSET.nmF1.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Peak height of the F1 layer, in kilometers.
  ///  Example: /// Example: 210.3
  ///  Constraints: No constraints specified.
  public var hmF1: Double { let o = _accessor.offset(VTOFFSET.hmF1.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  D1 parameter of the F1 layer shape.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  public var d1: Double { let o = _accessor.offset(VTOFFSET.d1.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Height HZ of the interim layer, in kilometers.
  ///  Example: /// Example: 142.7
  ///  Constraints: No constraints specified.
  public var hz: Double { let o = _accessor.offset(VTOFFSET.hz.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The valley height, in kilometers.
  ///  Example: /// Example: 116.2
  ///  Constraints: No constraints specified.
  public var hValTop: Double { let o = _accessor.offset(VTOFFSET.hValTop.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The valley depth, in grams per cubic centimeter.
  ///  Example: /// Example: 147025.1
  ///  Constraints: No constraints specified.
  public var nValB: Double { let o = _accessor.offset(VTOFFSET.nValB.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Peak density of the E layer, in per cubic centimeter.
  ///  Example: /// Example: 154164.1
  ///  Constraints: No constraints specified.
  public var nmE: Double { let o = _accessor.offset(VTOFFSET.nmE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Peak height of the F2 layer, in kilometers.
  ///  Example: /// Example: 99.8
  ///  Constraints: No constraints specified.
  public var hmE: Double { let o = _accessor.offset(VTOFFSET.hmE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Height of the intermediate region at the top of D region, in kilometers.
  ///  Example: /// Example: 85.6
  ///  Constraints: No constraints specified.
  public var hdx: Double { let o = _accessor.offset(VTOFFSET.hdx.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Peak density of the D layer, in per cubic centimeter.
  ///  Example: /// Example: 937543116.1
  ///  Constraints: No constraints specified.
  public var nmD: Double { let o = _accessor.offset(VTOFFSET.nmD.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Peak height of the D layer, in kilometers.
  ///  Example: /// Example: 81.1
  ///  Constraints: No constraints specified.
  public var hmD: Double { let o = _accessor.offset(VTOFFSET.hmD.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Starting height of the D layer, in kilometers.
  ///  Example: /// Example: 50.1
  ///  Constraints: No constraints specified.
  public var ha: Double { let o = _accessor.offset(VTOFFSET.ha.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  TBD.
  ///  Example: /// Example: 0.0474732023322638
  ///  Constraints: No constraints specified.
  public var fp1: Double { let o = _accessor.offset(VTOFFSET.fp1.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  TBD.
  ///  Example: /// Example: -0.00112685246984002
  ///  Constraints: No constraints specified.
  public var fp2: Double { let o = _accessor.offset(VTOFFSET.fp2.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  TBD.
  ///  Example: /// Example: 0.00827559450035957
  ///  Constraints: No constraints specified.
  public var fp30: Double { let o = _accessor.offset(VTOFFSET.fp30.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  TBD.
  ///  Example: /// Example: 0.000201178475411428
  ///  Constraints: No constraints specified.
  public var fp3U: Double { let o = _accessor.offset(VTOFFSET.fp3U.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.
  ///  Example: /// Example: 35.1
  ///  Constraints: No constraints specified.
  public var chi: Double { let o = _accessor.offset(VTOFFSET.chi.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  public static func startIonoObservationDensityProfileIRI_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 22) }
  public static func add(description: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: description, at: VTOFFSET.description.p) }
  public static func add(nmF2: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nmF2, def: 0.0, at: VTOFFSET.nmF2.p) }
  public static func add(hmF2: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hmF2, def: 0.0, at: VTOFFSET.hmF2.p) }
  public static func add(b0: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: b0, def: 0.0, at: VTOFFSET.b0.p) }
  public static func add(b1: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: b1, def: 0.0, at: VTOFFSET.b1.p) }
  public static func add(nmF1: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nmF1, def: 0.0, at: VTOFFSET.nmF1.p) }
  public static func add(hmF1: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hmF1, def: 0.0, at: VTOFFSET.hmF1.p) }
  public static func add(d1: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d1, def: 0.0, at: VTOFFSET.d1.p) }
  public static func add(hz: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hz, def: 0.0, at: VTOFFSET.hz.p) }
  public static func add(hValTop: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hValTop, def: 0.0, at: VTOFFSET.hValTop.p) }
  public static func add(nValB: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nValB, def: 0.0, at: VTOFFSET.nValB.p) }
  public static func add(nmE: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nmE, def: 0.0, at: VTOFFSET.nmE.p) }
  public static func add(hmE: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hmE, def: 0.0, at: VTOFFSET.hmE.p) }
  public static func add(hdx: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hdx, def: 0.0, at: VTOFFSET.hdx.p) }
  public static func add(nmD: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nmD, def: 0.0, at: VTOFFSET.nmD.p) }
  public static func add(hmD: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hmD, def: 0.0, at: VTOFFSET.hmD.p) }
  public static func add(ha: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ha, def: 0.0, at: VTOFFSET.ha.p) }
  public static func add(fp1: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fp1, def: 0.0, at: VTOFFSET.fp1.p) }
  public static func add(fp2: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fp2, def: 0.0, at: VTOFFSET.fp2.p) }
  public static func add(fp30: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fp30, def: 0.0, at: VTOFFSET.fp30.p) }
  public static func add(fp3U: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fp3U, def: 0.0, at: VTOFFSET.fp3U.p) }
  public static func add(chi: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: chi, def: 0.0, at: VTOFFSET.chi.p) }
  public static func endIonoObservationDensityProfileIRI_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createIonoObservationDensityProfileIRI_Abridged(
    _ fbb: inout FlatBufferBuilder,
    descriptionOffset description: Offset = Offset(),
    nmF2: Double = 0.0,
    hmF2: Double = 0.0,
    b0: Double = 0.0,
    b1: Double = 0.0,
    nmF1: Double = 0.0,
    hmF1: Double = 0.0,
    d1: Double = 0.0,
    hz: Double = 0.0,
    hValTop: Double = 0.0,
    nValB: Double = 0.0,
    nmE: Double = 0.0,
    hmE: Double = 0.0,
    hdx: Double = 0.0,
    nmD: Double = 0.0,
    hmD: Double = 0.0,
    ha: Double = 0.0,
    fp1: Double = 0.0,
    fp2: Double = 0.0,
    fp30: Double = 0.0,
    fp3U: Double = 0.0,
    chi: Double = 0.0
  ) -> Offset {
    let __start = IonoObservationDensityProfileIRI_Abridged.startIonoObservationDensityProfileIRI_Abridged(&fbb)
    IonoObservationDensityProfileIRI_Abridged.add(description: description, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(nmF2: nmF2, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(hmF2: hmF2, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(b0: b0, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(b1: b1, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(nmF1: nmF1, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(hmF1: hmF1, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(d1: d1, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(hz: hz, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(hValTop: hValTop, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(nValB: nValB, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(nmE: nmE, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(hmE: hmE, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(hdx: hdx, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(nmD: nmD, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(hmD: hmD, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(ha: ha, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(fp1: fp1, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(fp2: fp2, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(fp30: fp30, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(fp3U: fp3U, &fbb)
    IonoObservationDensityProfileIRI_Abridged.add(chi: chi, &fbb)
    return IonoObservationDensityProfileIRI_Abridged.endIonoObservationDensityProfileIRI_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.description.p, fieldName: "description", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.nmF2.p, fieldName: "nmF2", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.hmF2.p, fieldName: "hmF2", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.b0.p, fieldName: "b0", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.b1.p, fieldName: "b1", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.nmF1.p, fieldName: "nmF1", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.hmF1.p, fieldName: "hmF1", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d1.p, fieldName: "d1", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.hz.p, fieldName: "hz", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.hValTop.p, fieldName: "hValTop", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.nValB.p, fieldName: "nValB", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.nmE.p, fieldName: "nmE", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.hmE.p, fieldName: "hmE", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.hdx.p, fieldName: "hdx", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.nmD.p, fieldName: "nmD", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.hmD.p, fieldName: "hmD", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ha.p, fieldName: "ha", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fp1.p, fieldName: "fp1", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fp2.p, fieldName: "fp2", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fp30.p, fieldName: "fp30", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fp3U.p, fieldName: "fp3U", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.chi.p, fieldName: "chi", required: false, type: Double.self)
    _v.finish()
  }
}

