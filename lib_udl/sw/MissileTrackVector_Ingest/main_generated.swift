// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Schema for Missile Track Vector data.
public struct MissileTrackVector_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "MISS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: MissileTrackVector_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case type = 4
    case object = 6
    case epoch = 8
    case idSensor = 10
    case origSensorId = 12
    case pos = 14
    case vel = 16
    case accel = 18
    case course = 20
    case spd = 22
    case referenceFrame = 24
    case cov = 26
    case covReferenceFrame = 28
    case vectorLat = 30
    case vectorLon = 32
    case vectorAlt = 34
    case confidence = 36
    case status = 38
    case timeSource = 40
    case quat = 42
    case flightAz = 44
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Type of vector represented (e.g. LOS, PREDICTED, STATE).
  ///  Example: /// Example: STATE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Object to which this vector applies.
  ///  Example: /// Example: TARGET
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var object: String? { let o = _accessor.offset(VTOFFSET.object.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objectSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.object.v) }
  ///  Vector timestamp in ISO8601 UTC format, with microsecond precision.
  ///  Example: /// Example: 2024-03-30T15:02:39.346768Z
  ///  Constraints: No constraints specified.
  public var epoch: String? { let o = _accessor.offset(VTOFFSET.epoch.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var epochSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.epoch.v) }
  ///  Unique identifier of the reporting sensor of the object.
  ///  Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Optional identifier provided by the source to indicate the reporting sensor of the object. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 46
  public var origSensorId: String? { let o = _accessor.offset(VTOFFSET.origSensorId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSensorIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSensorId.v) }
  ///  Three element array, expressing the cartesian position vector of the target object, in kilometers, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x, y, z].
  ///  Example: /// Example: [-1456.91592, -2883.54041, 6165.55186]
  ///  Constraints: No constraints specified.
  public var hasPos: Bool { let o = _accessor.offset(VTOFFSET.pos.v); return o == 0 ? false : true }
  public var posCount: Int32 { let o = _accessor.offset(VTOFFSET.pos.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func pos(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.pos.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Three element array, expressing the cartesian velocity vector of the target object, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x', y', z'].
  ///  Example: /// Example: [-1.21981, -6.60208, -3.36515]
  ///  Constraints: No constraints specified.
  public var hasVel: Bool { let o = _accessor.offset(VTOFFSET.vel.v); return o == 0 ? false : true }
  public var velCount: Int32 { let o = _accessor.offset(VTOFFSET.vel.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func vel(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.vel.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Three element array, expressing the cartesian acceleration vector of the target object, in kilometers/second^2, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x'', y'', z''].
  ///  Example: /// Example: [0.59236, -0.03537, 0.35675]
  ///  Constraints: No constraints specified.
  public var hasAccel: Bool { let o = _accessor.offset(VTOFFSET.accel.v); return o == 0 ? false : true }
  public var accelCount: Int32 { let o = _accessor.offset(VTOFFSET.accel.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func accel(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.accel.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Track object course, in degrees clockwise from true north.
  ///  Example: /// Example: 7.3580153
  ///  Constraints: No constraints specified.
  public var course: Double { let o = _accessor.offset(VTOFFSET.course.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Track object speed, in kilometers/sec.
  ///  Example: /// Example: 15.03443
  ///  Constraints: No constraints specified.
  public var spd: Double { let o = _accessor.offset(VTOFFSET.spd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The reference frame of the cartesian vector (ECEF, J2000). If the referenceFrame is null it is assumed to be ECEF.
  ///  Example: /// Example: ECEF
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var referenceFrame: String? { let o = _accessor.offset(VTOFFSET.referenceFrame.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var referenceFrameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.referenceFrame.v) }
  ///  Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.
  ///  If the covReferenceFrame is null it is assumed to be UVW. The array values (1-45) represent the upper triangular half of the position-velocity-acceleration covariance matrix.
  ///  The covariance elements are position dependent within the array with values ordered as follows:
  ///  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x"&nbsp;&nbsp;&nbsp;&nbsp;y"&nbsp;&nbsp;&nbsp;&nbsp;z"
  ///  x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9
  ///  y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp;&nbsp;13&nbsp;&nbsp;&nbsp;14&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;&nbsp;17
  ///  z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;18&nbsp;&nbsp;&nbsp;19&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;&nbsp;23&nbsp;&nbsp;&nbsp;24
  ///  x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25&nbsp;&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;&nbsp;30
  ///  y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;31&nbsp;&nbsp;&nbsp;32&nbsp;&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;35
  ///  z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;&nbsp;38&nbsp;&nbsp;&nbsp;39
  ///  x"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;40&nbsp;&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42
  ///  y"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;44
  ///  z"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45
  ///  The cov array should contain only the upper right triangle values from top left down to bottom right, in order.
  ///  Example: /// Example: [1.1, 2.2, 3.3]
  ///  Constraints: No constraints specified.
  public var hasCov: Bool { let o = _accessor.offset(VTOFFSET.cov.v); return o == 0 ? false : true }
  public var covCount: Int32 { let o = _accessor.offset(VTOFFSET.cov.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cov(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.cov.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The reference frame of the covariance elements (ECEF, J2000, UVW). If the referenceFrame is null it is assumed to be UVW.
  ///  Example: /// Example: ECEF
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var covReferenceFrame: String? { let o = _accessor.offset(VTOFFSET.covReferenceFrame.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var covReferenceFrameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.covReferenceFrame.v) }
  ///  WGS-84 object latitude subpoint at epoch, represented as -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.0
  ///  Constraints: No constraints specified.
  public var vectorLat: Double { let o = _accessor.offset(VTOFFSET.vectorLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 object longitude subpoint at epoch, represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 150.0
  ///  Constraints: No constraints specified.
  public var vectorLon: Double { let o = _accessor.offset(VTOFFSET.vectorLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Object altitude at epoch, expressed in kilometers above WGS-84 ellipsoid.
  ///  Example: /// Example: 25.0
  ///  Constraints: No constraints specified.
  public var vectorAlt: Double { let o = _accessor.offset(VTOFFSET.vectorAlt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Confidence of the vector, 0-100.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  public var confidence: Int32 { let o = _accessor.offset(VTOFFSET.confidence.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Status of the vector (e.g. INITIAL, UPDATE).
  ///  Example: /// Example: INITIAL
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var status: String? { let o = _accessor.offset(VTOFFSET.status.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var statusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.status.v) }
  ///  Source of the time value.
  ///  Example: /// Example: Sensor 1
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var timeSource: String? { let o = _accessor.offset(VTOFFSET.timeSource.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timeSourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timeSource.v) }
  ///  The quaternion describing the attitude of the spacecraft with respect to the reference frame listed in the 'referenceFrame' field. The array element order convention is the three vector components, followed by the scalar component.
  ///  Example: /// Example: [0.03, 0.02, 0.01, 0.012]
  ///  Constraints: No constraints specified.
  public var hasQuat: Bool { let o = _accessor.offset(VTOFFSET.quat.v); return o == 0 ? false : true }
  public var quatCount: Int32 { let o = _accessor.offset(VTOFFSET.quat.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func quat(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.quat.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The flight azimuth associated with the current state vector (0-360 degrees).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var flightAz: Double { let o = _accessor.offset(VTOFFSET.flightAz.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  public static func startMissileTrackVector_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 21) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(object: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: object, at: VTOFFSET.object.p) }
  public static func add(epoch: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: epoch, at: VTOFFSET.epoch.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(origSensorId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSensorId, at: VTOFFSET.origSensorId.p) }
  public static func addVectorOf(pos: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pos, at: VTOFFSET.pos.p) }
  public static func addVectorOf(vel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vel, at: VTOFFSET.vel.p) }
  public static func addVectorOf(accel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: accel, at: VTOFFSET.accel.p) }
  public static func add(course: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: course, def: 0.0, at: VTOFFSET.course.p) }
  public static func add(spd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: spd, def: 0.0, at: VTOFFSET.spd.p) }
  public static func add(referenceFrame: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: referenceFrame, at: VTOFFSET.referenceFrame.p) }
  public static func addVectorOf(cov: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cov, at: VTOFFSET.cov.p) }
  public static func add(covReferenceFrame: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: covReferenceFrame, at: VTOFFSET.covReferenceFrame.p) }
  public static func add(vectorLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vectorLat, def: 0.0, at: VTOFFSET.vectorLat.p) }
  public static func add(vectorLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vectorLon, def: 0.0, at: VTOFFSET.vectorLon.p) }
  public static func add(vectorAlt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vectorAlt, def: 0.0, at: VTOFFSET.vectorAlt.p) }
  public static func add(confidence: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: confidence, def: 0, at: VTOFFSET.confidence.p) }
  public static func add(status: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: status, at: VTOFFSET.status.p) }
  public static func add(timeSource: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timeSource, at: VTOFFSET.timeSource.p) }
  public static func addVectorOf(quat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: quat, at: VTOFFSET.quat.p) }
  public static func add(flightAz: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: flightAz, def: 0.0, at: VTOFFSET.flightAz.p) }
  public static func endMissileTrackVector_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMissileTrackVector_Ingest(
    _ fbb: inout FlatBufferBuilder,
    typeOffset type: Offset = Offset(),
    objectOffset object: Offset = Offset(),
    epochOffset epoch: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    origSensorIdOffset origSensorId: Offset = Offset(),
    posVectorOffset pos: Offset = Offset(),
    velVectorOffset vel: Offset = Offset(),
    accelVectorOffset accel: Offset = Offset(),
    course: Double = 0.0,
    spd: Double = 0.0,
    referenceFrameOffset referenceFrame: Offset = Offset(),
    covVectorOffset cov: Offset = Offset(),
    covReferenceFrameOffset covReferenceFrame: Offset = Offset(),
    vectorLat: Double = 0.0,
    vectorLon: Double = 0.0,
    vectorAlt: Double = 0.0,
    confidence: Int32 = 0,
    statusOffset status: Offset = Offset(),
    timeSourceOffset timeSource: Offset = Offset(),
    quatVectorOffset quat: Offset = Offset(),
    flightAz: Double = 0.0
  ) -> Offset {
    let __start = MissileTrackVector_Ingest.startMissileTrackVector_Ingest(&fbb)
    MissileTrackVector_Ingest.add(type: type, &fbb)
    MissileTrackVector_Ingest.add(object: object, &fbb)
    MissileTrackVector_Ingest.add(epoch: epoch, &fbb)
    MissileTrackVector_Ingest.add(idSensor: idSensor, &fbb)
    MissileTrackVector_Ingest.add(origSensorId: origSensorId, &fbb)
    MissileTrackVector_Ingest.addVectorOf(pos: pos, &fbb)
    MissileTrackVector_Ingest.addVectorOf(vel: vel, &fbb)
    MissileTrackVector_Ingest.addVectorOf(accel: accel, &fbb)
    MissileTrackVector_Ingest.add(course: course, &fbb)
    MissileTrackVector_Ingest.add(spd: spd, &fbb)
    MissileTrackVector_Ingest.add(referenceFrame: referenceFrame, &fbb)
    MissileTrackVector_Ingest.addVectorOf(cov: cov, &fbb)
    MissileTrackVector_Ingest.add(covReferenceFrame: covReferenceFrame, &fbb)
    MissileTrackVector_Ingest.add(vectorLat: vectorLat, &fbb)
    MissileTrackVector_Ingest.add(vectorLon: vectorLon, &fbb)
    MissileTrackVector_Ingest.add(vectorAlt: vectorAlt, &fbb)
    MissileTrackVector_Ingest.add(confidence: confidence, &fbb)
    MissileTrackVector_Ingest.add(status: status, &fbb)
    MissileTrackVector_Ingest.add(timeSource: timeSource, &fbb)
    MissileTrackVector_Ingest.addVectorOf(quat: quat, &fbb)
    MissileTrackVector_Ingest.add(flightAz: flightAz, &fbb)
    return MissileTrackVector_Ingest.endMissileTrackVector_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.object.p, fieldName: "object", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.epoch.p, fieldName: "epoch", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSensorId.p, fieldName: "origSensorId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pos.p, fieldName: "pos", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.vel.p, fieldName: "vel", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.accel.p, fieldName: "accel", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.course.p, fieldName: "course", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.spd.p, fieldName: "spd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.referenceFrame.p, fieldName: "referenceFrame", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cov.p, fieldName: "cov", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.covReferenceFrame.p, fieldName: "covReferenceFrame", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.vectorLat.p, fieldName: "vectorLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.vectorLon.p, fieldName: "vectorLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.vectorAlt.p, fieldName: "vectorAlt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.confidence.p, fieldName: "confidence", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.status.p, fieldName: "status", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timeSource.p, fieldName: "timeSource", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.quat.p, fieldName: "quat", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.flightAz.p, fieldName: "flightAz", required: false, type: Double.self)
    _v.finish()
  }
}

