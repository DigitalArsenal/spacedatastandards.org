// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Minimum and maximum altitude bounds for the track.
public struct AltitudeBlocks_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ALTI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AltitudeBlocks_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case altitudeSequenceId = 4
    case lowerAltitude = 6
    case upperAltitude = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Sequencing field for the altitude block.
  ///  Example: /// Example: A1
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var altitudeSequenceId: String? { let o = _accessor.offset(VTOFFSET.altitudeSequenceId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altitudeSequenceIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altitudeSequenceId.v) }
  ///  Lowest altitude of the track route altitude block above mean sea level in feet.
  ///  Example: /// Example: 27000.1
  ///  Constraints: No constraints specified.
  public var lowerAltitude: Double { let o = _accessor.offset(VTOFFSET.lowerAltitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Highest altitude of the track route altitude block above mean sea level in feet.
  ///  Example: /// Example: 27200.5
  ///  Constraints: No constraints specified.
  public var upperAltitude: Double { let o = _accessor.offset(VTOFFSET.upperAltitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  public static func startAltitudeBlocks_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(altitudeSequenceId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altitudeSequenceId, at: VTOFFSET.altitudeSequenceId.p) }
  public static func add(lowerAltitude: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lowerAltitude, def: 0.0, at: VTOFFSET.lowerAltitude.p) }
  public static func add(upperAltitude: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: upperAltitude, def: 0.0, at: VTOFFSET.upperAltitude.p) }
  public static func endAltitudeBlocks_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAltitudeBlocks_Full(
    _ fbb: inout FlatBufferBuilder,
    altitudeSequenceIdOffset altitudeSequenceId: Offset = Offset(),
    lowerAltitude: Double = 0.0,
    upperAltitude: Double = 0.0
  ) -> Offset {
    let __start = AltitudeBlocks_Full.startAltitudeBlocks_Full(&fbb)
    AltitudeBlocks_Full.add(altitudeSequenceId: altitudeSequenceId, &fbb)
    AltitudeBlocks_Full.add(lowerAltitude: lowerAltitude, &fbb)
    AltitudeBlocks_Full.add(upperAltitude: upperAltitude, &fbb)
    return AltitudeBlocks_Full.endAltitudeBlocks_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.altitudeSequenceId.p, fieldName: "altitudeSequenceId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lowerAltitude.p, fieldName: "lowerAltitude", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.upperAltitude.p, fieldName: "upperAltitude", required: false, type: Double.self)
    _v.finish()
  }
}

