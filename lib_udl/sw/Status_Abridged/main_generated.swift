// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Status_Abridged_state_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case unknown = 0
  ///  No description available.
  case dead = 1
  ///  No description available.
  case active = 2
  ///  No description available.
  case rfActive = 3
  ///  No description available.
  case standby = 4

  public static var max: Status_Abridged_state_Enum { return .standby }
  public static var min: Status_Abridged_state_Enum { return .unknown }
}


public enum Status_Abridged_sysCap_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case fmc = 0
  ///  No description available.
  case nmc = 1
  ///  No description available.
  case pmc = 2
  ///  No description available.
  case unk = 3

  public static var max: Status_Abridged_sysCap_Enum { return .unk }
  public static var min: Status_Abridged_sysCap_Enum { return .fmc }
}


public enum Status_Abridged_opsCap_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case fmc = 0
  ///  No description available.
  case nmc = 1
  ///  No description available.
  case pmc = 2
  ///  No description available.
  case unk = 3

  public static var max: Status_Abridged_opsCap_Enum { return .unk }
  public static var min: Status_Abridged_opsCap_Enum { return .fmc }
}


public enum Status_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Status_Abridged_dataMode_Enum { return .exercise }
  public static var min: Status_Abridged_dataMode_Enum { return .real }
}


///  /// Status for a particular Entity. An entity may have multiple status records collected by various sources.
public struct Status_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "STAT" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Status_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case derivedFrom = 8
    case declassificationDate = 10
    case declassificationString = 12
    case idEntity = 14
    case state = 16
    case sysCap = 18
    case opsCap = 20
    case source = 22
    case subStatusCollection = 24
    case dataMode = 26
    case notes = 28
    case createdAt = 30
    case createdBy = 32
    case origin = 34
    case origNetwork = 36
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: STATUS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The sources or SCG references from which the classification of this data is derived.
  ///  Example: /// Example: SOME_SOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var derivedFrom: String? { let o = _accessor.offset(VTOFFSET.derivedFrom.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var derivedFromSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.derivedFrom.v) }
  ///  The declassification date of this data, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:02:02.123Z
  ///  Constraints: No constraints specified.
  public var declassificationDate: String? { let o = _accessor.offset(VTOFFSET.declassificationDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var declassificationDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.declassificationDate.v) }
  ///  Declassification string of this data.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var declassificationString: String? { let o = _accessor.offset(VTOFFSET.declassificationString.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var declassificationStringSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.declassificationString.v) }
  ///  Unique identifier of the parent entity.
  ///  Example: /// Example: ENTITY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idEntity: String? { let o = _accessor.offset(VTOFFSET.idEntity.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idEntitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idEntity.v) }
  ///  Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).
  ///  Example: /// Example: ACTIVE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var state: Status_Abridged_state_Enum { let o = _accessor.offset(VTOFFSET.state.v); return o == 0 ? .unknown : Status_Abridged_state_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .unknown }
  ///  System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
  ///  Example: /// Example: FMC
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var sysCap: Status_Abridged_sysCap_Enum { let o = _accessor.offset(VTOFFSET.sysCap.v); return o == 0 ? .fmc : Status_Abridged_sysCap_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .fmc }
  ///  Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
  ///  Example: /// Example: FMC
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var opsCap: Status_Abridged_opsCap_Enum { let o = _accessor.offset(VTOFFSET.opsCap.v); return o == 0 ? .fmc : Status_Abridged_opsCap_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .fmc }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasSubStatusCollection: Bool { let o = _accessor.offset(VTOFFSET.subStatusCollection.v); return o == 0 ? false : true }
  public var subStatusCollectionCount: Int32 { let o = _accessor.offset(VTOFFSET.subStatusCollection.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func subStatusCollection(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.subStatusCollection.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Status_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Status_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Comments describing the status creation and or updates to an entity.
  ///  Example: /// Example: Example Notes
  ///  Constraints: No constraints specified.
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: TST1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startStatus_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 17) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(derivedFrom: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: derivedFrom, at: VTOFFSET.derivedFrom.p) }
  public static func add(declassificationDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: declassificationDate, at: VTOFFSET.declassificationDate.p) }
  public static func add(declassificationString: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: declassificationString, at: VTOFFSET.declassificationString.p) }
  public static func add(idEntity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idEntity, at: VTOFFSET.idEntity.p) }
  public static func add(state: Status_Abridged_state_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: state.rawValue, def: 0, at: VTOFFSET.state.p) }
  public static func add(sysCap: Status_Abridged_sysCap_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sysCap.rawValue, def: 0, at: VTOFFSET.sysCap.p) }
  public static func add(opsCap: Status_Abridged_opsCap_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: opsCap.rawValue, def: 0, at: VTOFFSET.opsCap.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func addVectorOf(subStatusCollection: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: subStatusCollection, at: VTOFFSET.subStatusCollection.p) }
  public static func add(dataMode: Status_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endStatus_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createStatus_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    derivedFromOffset derivedFrom: Offset = Offset(),
    declassificationDateOffset declassificationDate: Offset = Offset(),
    declassificationStringOffset declassificationString: Offset = Offset(),
    idEntityOffset idEntity: Offset = Offset(),
    state: Status_Abridged_state_Enum = .unknown,
    sysCap: Status_Abridged_sysCap_Enum = .fmc,
    opsCap: Status_Abridged_opsCap_Enum = .fmc,
    sourceOffset source: Offset = Offset(),
    subStatusCollectionVectorOffset subStatusCollection: Offset = Offset(),
    dataMode: Status_Abridged_dataMode_Enum = .real,
    notesOffset notes: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = Status_Abridged.startStatus_Abridged(&fbb)
    Status_Abridged.add(id: id, &fbb)
    Status_Abridged.add(classificationMarking: classificationMarking, &fbb)
    Status_Abridged.add(derivedFrom: derivedFrom, &fbb)
    Status_Abridged.add(declassificationDate: declassificationDate, &fbb)
    Status_Abridged.add(declassificationString: declassificationString, &fbb)
    Status_Abridged.add(idEntity: idEntity, &fbb)
    Status_Abridged.add(state: state, &fbb)
    Status_Abridged.add(sysCap: sysCap, &fbb)
    Status_Abridged.add(opsCap: opsCap, &fbb)
    Status_Abridged.add(source: source, &fbb)
    Status_Abridged.addVectorOf(subStatusCollection: subStatusCollection, &fbb)
    Status_Abridged.add(dataMode: dataMode, &fbb)
    Status_Abridged.add(notes: notes, &fbb)
    Status_Abridged.add(createdAt: createdAt, &fbb)
    Status_Abridged.add(createdBy: createdBy, &fbb)
    Status_Abridged.add(origin: origin, &fbb)
    Status_Abridged.add(origNetwork: origNetwork, &fbb)
    return Status_Abridged.endStatus_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.derivedFrom.p, fieldName: "derivedFrom", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.declassificationDate.p, fieldName: "declassificationDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.declassificationString.p, fieldName: "declassificationString", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idEntity.p, fieldName: "idEntity", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.state.p, fieldName: "state", required: false, type: Status_Abridged_state_Enum.self)
    try _v.visit(field: VTOFFSET.sysCap.p, fieldName: "sysCap", required: false, type: Status_Abridged_sysCap_Enum.self)
    try _v.visit(field: VTOFFSET.opsCap.p, fieldName: "opsCap", required: false, type: Status_Abridged_opsCap_Enum.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.subStatusCollection.p, fieldName: "subStatusCollection", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Status_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

