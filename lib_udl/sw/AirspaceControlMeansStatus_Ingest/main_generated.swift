// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
public struct AirspaceControlMeansStatus_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AirspaceControlMeansStatus_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case cmStat = 4
    case cmStatId = 6
    case airspaceControlMeans = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Status of Airspace Control Means. Must be ADD, CHANGE, or DELETE.
  ///  Example: /// Example: ADD
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var cmStat: String? { let o = _accessor.offset(VTOFFSET.cmStat.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cmStatSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cmStat.v) }
  ///  Airspace control means name or designator. Mandatory if acmStat equals "DELETE," otherwise this field is prohibited.
  ///  Example: /// Example: ['DESIGN:B35', 'NAME:ERMA', 'RANG:C21-C25']
  ///  Constraints: No constraints specified.
  public var hasCmStatId: Bool { let o = _accessor.offset(VTOFFSET.cmStatId.v); return o == 0 ? false : true }
  public var cmStatIdCount: Int32 { let o = _accessor.offset(VTOFFSET.cmStatId.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cmStatId(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.cmStatId.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  A conditional nested segment to report multiple airspace control means within a particular airspace control means status.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasAirspaceControlMeans: Bool { let o = _accessor.offset(VTOFFSET.airspaceControlMeans.v); return o == 0 ? false : true }
  public var airspaceControlMeansCount: Int32 { let o = _accessor.offset(VTOFFSET.airspaceControlMeans.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func airspaceControlMeans(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.airspaceControlMeans.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startAirspaceControlMeansStatus_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(cmStat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cmStat, at: VTOFFSET.cmStat.p) }
  public static func addVectorOf(cmStatId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cmStatId, at: VTOFFSET.cmStatId.p) }
  public static func addVectorOf(airspaceControlMeans: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: airspaceControlMeans, at: VTOFFSET.airspaceControlMeans.p) }
  public static func endAirspaceControlMeansStatus_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAirspaceControlMeansStatus_Ingest(
    _ fbb: inout FlatBufferBuilder,
    cmStatOffset cmStat: Offset = Offset(),
    cmStatIdVectorOffset cmStatId: Offset = Offset(),
    airspaceControlMeansVectorOffset airspaceControlMeans: Offset = Offset()
  ) -> Offset {
    let __start = AirspaceControlMeansStatus_Ingest.startAirspaceControlMeansStatus_Ingest(&fbb)
    AirspaceControlMeansStatus_Ingest.add(cmStat: cmStat, &fbb)
    AirspaceControlMeansStatus_Ingest.addVectorOf(cmStatId: cmStatId, &fbb)
    AirspaceControlMeansStatus_Ingest.addVectorOf(airspaceControlMeans: airspaceControlMeans, &fbb)
    return AirspaceControlMeansStatus_Ingest.endAirspaceControlMeansStatus_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.cmStat.p, fieldName: "cmStat", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cmStatId.p, fieldName: "cmStatId", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.airspaceControlMeans.p, fieldName: "airspaceControlMeans", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

