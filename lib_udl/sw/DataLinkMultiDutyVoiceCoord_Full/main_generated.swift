// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
public struct DataLinkMultiDutyVoiceCoord_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "DATA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: DataLinkMultiDutyVoiceCoord_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case multiVoiceNetDes = 4
    case multiFreqDes = 6
    case multiCommPri = 8
    case multiTeleFreqNums = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Designator assigned to a voice interface control and coordination net for multilink coordination (e.g. ADCCN, DCN, VPN, etc.).
  ///  Example: /// Example: VPN
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var multiVoiceNetDes: String? { let o = _accessor.offset(VTOFFSET.multiVoiceNetDes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var multiVoiceNetDesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.multiVoiceNetDes.v) }
  ///  Designator used in nonsecure communications to refer to a radio frequency for multilink coordination.
  ///  Example: /// Example: ST300A
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var multiFreqDes: String? { let o = _accessor.offset(VTOFFSET.multiFreqDes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var multiFreqDesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.multiFreqDes.v) }
  ///  Priority of a communication circuit, channel or frequency for multilink coordination (e.g. P - Primary, M - Monitor).
  ///  Example: /// Example: P
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var multiCommPri: String? { let o = _accessor.offset(VTOFFSET.multiCommPri.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var multiCommPriSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.multiCommPri.v) }
  ///  Array of telephone numbers or contact frequencies used for interface control for multilink coordination.
  ///  Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
  ///  Constraints: No constraints specified.
  public var hasMultiTeleFreqNums: Bool { let o = _accessor.offset(VTOFFSET.multiTeleFreqNums.v); return o == 0 ? false : true }
  public var multiTeleFreqNumsCount: Int32 { let o = _accessor.offset(VTOFFSET.multiTeleFreqNums.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func multiTeleFreqNums(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.multiTeleFreqNums.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startDataLinkMultiDutyVoiceCoord_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(multiVoiceNetDes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: multiVoiceNetDes, at: VTOFFSET.multiVoiceNetDes.p) }
  public static func add(multiFreqDes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: multiFreqDes, at: VTOFFSET.multiFreqDes.p) }
  public static func add(multiCommPri: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: multiCommPri, at: VTOFFSET.multiCommPri.p) }
  public static func addVectorOf(multiTeleFreqNums: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: multiTeleFreqNums, at: VTOFFSET.multiTeleFreqNums.p) }
  public static func endDataLinkMultiDutyVoiceCoord_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createDataLinkMultiDutyVoiceCoord_Full(
    _ fbb: inout FlatBufferBuilder,
    multiVoiceNetDesOffset multiVoiceNetDes: Offset = Offset(),
    multiFreqDesOffset multiFreqDes: Offset = Offset(),
    multiCommPriOffset multiCommPri: Offset = Offset(),
    multiTeleFreqNumsVectorOffset multiTeleFreqNums: Offset = Offset()
  ) -> Offset {
    let __start = DataLinkMultiDutyVoiceCoord_Full.startDataLinkMultiDutyVoiceCoord_Full(&fbb)
    DataLinkMultiDutyVoiceCoord_Full.add(multiVoiceNetDes: multiVoiceNetDes, &fbb)
    DataLinkMultiDutyVoiceCoord_Full.add(multiFreqDes: multiFreqDes, &fbb)
    DataLinkMultiDutyVoiceCoord_Full.add(multiCommPri: multiCommPri, &fbb)
    DataLinkMultiDutyVoiceCoord_Full.addVectorOf(multiTeleFreqNums: multiTeleFreqNums, &fbb)
    return DataLinkMultiDutyVoiceCoord_Full.endDataLinkMultiDutyVoiceCoord_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.multiVoiceNetDes.p, fieldName: "multiVoiceNetDes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.multiFreqDes.p, fieldName: "multiFreqDes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.multiCommPri.p, fieldName: "multiCommPri", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.multiTeleFreqNums.p, fieldName: "multiTeleFreqNums", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

