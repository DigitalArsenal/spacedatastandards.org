// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection of diplomatic clearance details.
public struct DiplomaticClearanceDetails_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "DIPL" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: DiplomaticClearanceDetails_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case idSortie = 4
    case legNum = 6
    case routeString = 8
    case validStartTime = 10
    case validEndTime = 12
    case clearanceId = 14
    case externalClearanceId = 16
    case clearedCallSign = 18
    case sequenceNum = 20
    case countryCode = 22
    case altCountryCode = 24
    case countryName = 26
    case validDesc = 28
    case windowRemark = 30
    case entryPoint = 32
    case entryNet = 34
    case exitPoint = 36
    case exitNlt = 38
    case reqIcao = 40
    case action = 42
    case status = 44
    case profile = 46
    case reqPoint = 48
    case clearanceRemark = 50
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the Aircraft Sortie associated with this diplomatic clearance record.
  ///  Example: /// Example: 207010e0-f97d-431c-8c00-7e46acfef0f5
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSortie: String? { let o = _accessor.offset(VTOFFSET.idSortie.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSortieSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSortie.v) }
  ///  Identifies the Itinerary point of a sortie where an air event occurs.
  ///  Example: /// Example: 825
  ///  Constraints: No constraints specified.
  public var legNum: Int32 { let o = _accessor.offset(VTOFFSET.legNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The 1801 fileable route of flight string associated with this diplomatic clearance. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
  ///  Example: /// Example: DCT DOH P430 BAYAN/M062F150 P430 RAMKI
  ///  Constraints: Minimum length = 0, Maximum length = 4000
  public var routeString: String? { let o = _accessor.offset(VTOFFSET.routeString.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var routeStringSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.routeString.v) }
  ///  The start time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var validStartTime: String? { let o = _accessor.offset(VTOFFSET.validStartTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var validStartTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.validStartTime.v) }
  ///  The end time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var validEndTime: String? { let o = _accessor.offset(VTOFFSET.validEndTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var validEndTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.validEndTime.v) }
  ///  Identifier of this diplomatic clearance issued by the host country.
  ///  Example: /// Example: MFMW225662GHQ
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var clearanceId: String? { let o = _accessor.offset(VTOFFSET.clearanceId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var clearanceIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.clearanceId.v) }
  ///  Optional clearance ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var externalClearanceId: String? { let o = _accessor.offset(VTOFFSET.externalClearanceId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var externalClearanceIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.externalClearanceId.v) }
  ///  The call sign of the sortie cleared with this diplomatic clearance.
  ///  Example: /// Example: FALCN09
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var clearedCallSign: String? { let o = _accessor.offset(VTOFFSET.clearedCallSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var clearedCallSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.clearedCallSign.v) }
  ///  The placement of this diplomatic clearance within a sequence of clearances used on a sortie. For example, a sequence value of 3 means that it is the third diplomatic clearance the aircraft will use.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var sequenceNum: Int32 { let o = _accessor.offset(VTOFFSET.sequenceNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: NL
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var countryCode: String? { let o = _accessor.offset(VTOFFSET.countryCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var countryCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.countryCode.v) }
  ///  Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
  ///  Example: /// Example: IZ
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var altCountryCode: String? { let o = _accessor.offset(VTOFFSET.altCountryCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altCountryCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altCountryCode.v) }
  ///  Name of the country issuing this diplomatic clearance.
  ///  Example: /// Example: NETHERLANDS
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var countryName: String? { let o = _accessor.offset(VTOFFSET.countryName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var countryNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.countryName.v) }
  ///  Description of when this diplomatic clearance is valid.
  ///  Example: /// Example: CY2023
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var validDesc: String? { let o = _accessor.offset(VTOFFSET.validDesc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var validDescSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.validDesc.v) }
  ///  Remarks concerning the valid diplomatic clearance window.
  ///  Example: /// Example: Period remarks
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var windowRemark: String? { let o = _accessor.offset(VTOFFSET.windowRemark.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var windowRemarkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.windowRemark.v) }
  ///  The navigation point name where the aircraft must enter the country.
  ///  Example: /// Example: LOMOS
  ///  Constraints: Minimum length = 0, Maximum length = 38
  public var entryPoint: String? { let o = _accessor.offset(VTOFFSET.entryPoint.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var entryPointSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.entryPoint.v) }
  ///  Earliest time the aircraft may enter the country, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var entryNet: String? { let o = _accessor.offset(VTOFFSET.entryNet.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var entryNetSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.entryNet.v) }
  ///  The navigation point name where the aircraft must exit the country.
  ///  Example: /// Example: BUDOP
  ///  Constraints: Minimum length = 0, Maximum length = 38
  public var exitPoint: String? { let o = _accessor.offset(VTOFFSET.exitPoint.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var exitPointSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.exitPoint.v) }
  ///  Latest time the aircraft may exit the country, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var exitNlt: String? { let o = _accessor.offset(VTOFFSET.exitNlt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var exitNltSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.exitNlt.v) }
  ///  Flag indicating whether the clearance request requires ICAO specific information.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var reqIcao: Bool { let o = _accessor.offset(VTOFFSET.reqIcao.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The type of action the aircraft can take with this diplomatic clearance (e.g. O for Overfly, L for Land, etc.).
  ///  Example: /// Example: O
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var action: String? { let o = _accessor.offset(VTOFFSET.action.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.action.v) }
  ///  Indicates the current status of the diplomatic clearance request.
  ///  Example: /// Example: IN WORK
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var status: String? { let o = _accessor.offset(VTOFFSET.status.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var statusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.status.v) }
  ///  The diplomatic clearance profile name used within clearance management systems.
  ///  Example: /// Example: T LAND/OFLY IATA COMPLIANT CARGO 23
  ///  Constraints: Minimum length = 0, Maximum length = 100
  public var profile: String? { let o = _accessor.offset(VTOFFSET.profile.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var profileSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.profile.v) }
  ///  Flag indicating whether entry/exit points are required for clearances.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var reqPoint: Bool { let o = _accessor.offset(VTOFFSET.reqPoint.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Remarks concerning this diplomatic clearance.
  ///  Example: /// Example: Clearance remarks
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var clearanceRemark: String? { let o = _accessor.offset(VTOFFSET.clearanceRemark.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var clearanceRemarkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.clearanceRemark.v) }
  public static func startDiplomaticClearanceDetails_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 24) }
  public static func add(idSortie: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSortie, at: VTOFFSET.idSortie.p) }
  public static func add(legNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: legNum, def: 0, at: VTOFFSET.legNum.p) }
  public static func add(routeString: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: routeString, at: VTOFFSET.routeString.p) }
  public static func add(validStartTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: validStartTime, at: VTOFFSET.validStartTime.p) }
  public static func add(validEndTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: validEndTime, at: VTOFFSET.validEndTime.p) }
  public static func add(clearanceId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: clearanceId, at: VTOFFSET.clearanceId.p) }
  public static func add(externalClearanceId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: externalClearanceId, at: VTOFFSET.externalClearanceId.p) }
  public static func add(clearedCallSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: clearedCallSign, at: VTOFFSET.clearedCallSign.p) }
  public static func add(sequenceNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sequenceNum, def: 0, at: VTOFFSET.sequenceNum.p) }
  public static func add(countryCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: countryCode, at: VTOFFSET.countryCode.p) }
  public static func add(altCountryCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altCountryCode, at: VTOFFSET.altCountryCode.p) }
  public static func add(countryName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: countryName, at: VTOFFSET.countryName.p) }
  public static func add(validDesc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: validDesc, at: VTOFFSET.validDesc.p) }
  public static func add(windowRemark: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windowRemark, at: VTOFFSET.windowRemark.p) }
  public static func add(entryPoint: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: entryPoint, at: VTOFFSET.entryPoint.p) }
  public static func add(entryNet: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: entryNet, at: VTOFFSET.entryNet.p) }
  public static func add(exitPoint: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: exitPoint, at: VTOFFSET.exitPoint.p) }
  public static func add(exitNlt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: exitNlt, at: VTOFFSET.exitNlt.p) }
  public static func add(reqIcao: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: reqIcao, def: false,
   at: VTOFFSET.reqIcao.p) }
  public static func add(action: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: action, at: VTOFFSET.action.p) }
  public static func add(status: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: status, at: VTOFFSET.status.p) }
  public static func add(profile: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: profile, at: VTOFFSET.profile.p) }
  public static func add(reqPoint: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: reqPoint, def: false,
   at: VTOFFSET.reqPoint.p) }
  public static func add(clearanceRemark: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: clearanceRemark, at: VTOFFSET.clearanceRemark.p) }
  public static func endDiplomaticClearanceDetails_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createDiplomaticClearanceDetails_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idSortieOffset idSortie: Offset = Offset(),
    legNum: Int32 = 0,
    routeStringOffset routeString: Offset = Offset(),
    validStartTimeOffset validStartTime: Offset = Offset(),
    validEndTimeOffset validEndTime: Offset = Offset(),
    clearanceIdOffset clearanceId: Offset = Offset(),
    externalClearanceIdOffset externalClearanceId: Offset = Offset(),
    clearedCallSignOffset clearedCallSign: Offset = Offset(),
    sequenceNum: Int32 = 0,
    countryCodeOffset countryCode: Offset = Offset(),
    altCountryCodeOffset altCountryCode: Offset = Offset(),
    countryNameOffset countryName: Offset = Offset(),
    validDescOffset validDesc: Offset = Offset(),
    windowRemarkOffset windowRemark: Offset = Offset(),
    entryPointOffset entryPoint: Offset = Offset(),
    entryNetOffset entryNet: Offset = Offset(),
    exitPointOffset exitPoint: Offset = Offset(),
    exitNltOffset exitNlt: Offset = Offset(),
    reqIcao: Bool = false,
    actionOffset action: Offset = Offset(),
    statusOffset status: Offset = Offset(),
    profileOffset profile: Offset = Offset(),
    reqPoint: Bool = false,
    clearanceRemarkOffset clearanceRemark: Offset = Offset()
  ) -> Offset {
    let __start = DiplomaticClearanceDetails_Abridged.startDiplomaticClearanceDetails_Abridged(&fbb)
    DiplomaticClearanceDetails_Abridged.add(idSortie: idSortie, &fbb)
    DiplomaticClearanceDetails_Abridged.add(legNum: legNum, &fbb)
    DiplomaticClearanceDetails_Abridged.add(routeString: routeString, &fbb)
    DiplomaticClearanceDetails_Abridged.add(validStartTime: validStartTime, &fbb)
    DiplomaticClearanceDetails_Abridged.add(validEndTime: validEndTime, &fbb)
    DiplomaticClearanceDetails_Abridged.add(clearanceId: clearanceId, &fbb)
    DiplomaticClearanceDetails_Abridged.add(externalClearanceId: externalClearanceId, &fbb)
    DiplomaticClearanceDetails_Abridged.add(clearedCallSign: clearedCallSign, &fbb)
    DiplomaticClearanceDetails_Abridged.add(sequenceNum: sequenceNum, &fbb)
    DiplomaticClearanceDetails_Abridged.add(countryCode: countryCode, &fbb)
    DiplomaticClearanceDetails_Abridged.add(altCountryCode: altCountryCode, &fbb)
    DiplomaticClearanceDetails_Abridged.add(countryName: countryName, &fbb)
    DiplomaticClearanceDetails_Abridged.add(validDesc: validDesc, &fbb)
    DiplomaticClearanceDetails_Abridged.add(windowRemark: windowRemark, &fbb)
    DiplomaticClearanceDetails_Abridged.add(entryPoint: entryPoint, &fbb)
    DiplomaticClearanceDetails_Abridged.add(entryNet: entryNet, &fbb)
    DiplomaticClearanceDetails_Abridged.add(exitPoint: exitPoint, &fbb)
    DiplomaticClearanceDetails_Abridged.add(exitNlt: exitNlt, &fbb)
    DiplomaticClearanceDetails_Abridged.add(reqIcao: reqIcao, &fbb)
    DiplomaticClearanceDetails_Abridged.add(action: action, &fbb)
    DiplomaticClearanceDetails_Abridged.add(status: status, &fbb)
    DiplomaticClearanceDetails_Abridged.add(profile: profile, &fbb)
    DiplomaticClearanceDetails_Abridged.add(reqPoint: reqPoint, &fbb)
    DiplomaticClearanceDetails_Abridged.add(clearanceRemark: clearanceRemark, &fbb)
    return DiplomaticClearanceDetails_Abridged.endDiplomaticClearanceDetails_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.idSortie.p, fieldName: "idSortie", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.legNum.p, fieldName: "legNum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.routeString.p, fieldName: "routeString", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.validStartTime.p, fieldName: "validStartTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.validEndTime.p, fieldName: "validEndTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.clearanceId.p, fieldName: "clearanceId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.externalClearanceId.p, fieldName: "externalClearanceId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.clearedCallSign.p, fieldName: "clearedCallSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sequenceNum.p, fieldName: "sequenceNum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.countryCode.p, fieldName: "countryCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altCountryCode.p, fieldName: "altCountryCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.countryName.p, fieldName: "countryName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.validDesc.p, fieldName: "validDesc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.windowRemark.p, fieldName: "windowRemark", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.entryPoint.p, fieldName: "entryPoint", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.entryNet.p, fieldName: "entryNet", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.exitPoint.p, fieldName: "exitPoint", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.exitNlt.p, fieldName: "exitNlt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reqIcao.p, fieldName: "reqIcao", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.action.p, fieldName: "action", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.status.p, fieldName: "status", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.profile.p, fieldName: "profile", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reqPoint.p, fieldName: "reqPoint", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.clearanceRemark.p, fieldName: "clearanceRemark", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

