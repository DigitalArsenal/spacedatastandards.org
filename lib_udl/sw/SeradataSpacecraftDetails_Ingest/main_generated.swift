// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum SeradataSpacecraftDetails_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: SeradataSpacecraftDetails_Ingest_dataMode_Enum { return .exercise }
  public static var min: SeradataSpacecraftDetails_Ingest_dataMode_Enum { return .real }
}


///  /// On-orbit spacecraft details compiled by Seradata for a particular satellite.
public struct SeradataSpacecraftDetails_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SERA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: SeradataSpacecraftDetails_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case idOnOrbit = 6
    case classificationMarking = 8
    case name = 10
    case description = 12
    case intlNumber = 14
    case sector = 16
    case apogee = 18
    case perigee = 20
    case period = 22
    case inclination = 24
    case primeManufacturerOrgId = 26
    case stabilizer = 28
    case designLife = 30
    case expectedLife = 32
    case insuredAtLaunch = 34
    case launchMass = 36
    case dryMass = 38
    case catalogNumber = 40
    case totalPayloadPower = 42
    case constellation = 44
    case orbitCategory = 46
    case orbitSubCategory = 48
    case launchCost = 50
    case launchCostEstimated = 52
    case costEstimated = 54
    case newCost = 56
    case combinedNewCost = 58
    case combinedCostEstimated = 60
    case insuredValueAtLaunch = 62
    case insuredValueLaunchEstimated = 64
    case annualInsuredDepreciationFactor = 66
    case annualInsuredDepreciationFactorEstimated = 68
    case insurancePremiumAtLaunch = 70
    case insurancePremiumAtLaunchEstimated = 72
    case numHumans = 74
    case cubesatDispenserType = 76
    case massCategory = 78
    case launchId = 80
    case launchVehicleId = 82
    case launchProviderFlightNumber = 84
    case launchSiteName = 86
    case launchSiteId = 88
    case launchCountry = 90
    case launchProvider = 92
    case launchProviderCountry = 94
    case commercialLaunch = 96
    case launchType = 98
    case launchCharacteristic = 100
    case launchNumber = 102
    case launchDate = 104
    case launchDateRemarks = 106
    case youtubeLaunchLink = 108
    case status = 110
    case owner = 112
    case ownerCountry = 114
    case operator_ = 116
    case operatorCountry = 118
    case leased = 120
    case orderDate = 122
    case capabilityLost = 124
    case capacityLost = 126
    case primaryMissionGroup = 128
    case additionalMissionsGroups = 130
    case totalClaims = 132
    case totalInjuries = 134
    case totalFatalities = 136
    case nameAtLaunch = 138
    case busId = 140
    case currentAge = 142
    case lifeLost = 144
    case geoPosition = 146
    case insuranceLossesTotal = 148
    case launchArranger = 150
    case launchArrangerCountry = 152
    case serialNumber = 154
    case programName = 156
    case reusedHullName = 158
    case dateOfObservation = 160
    case lat = 162
    case lon = 164
    case altitude = 166
    case collisionRiskMm = 168
    case collisionRiskCm = 170
    case quantity = 172
    case reusableFlights = 174
    case notes = 176
    case insuranceNotes = 178
    case launchNotes = 180
    case source = 182
    case origin = 184
    case origNetwork = 186
    case dataMode = 188
    case createdAt = 190
    case createdBy = 192
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SERADATASPACECRAFTDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  UUID of the parent Onorbit record, if available.
  ///  Example: /// Example: 503
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Spacecraft name.
  ///  Example: /// Example: name
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  Description associated with the spacecraft.
  ///  Example: /// Example: description
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  public var description: String? { let o = _accessor.offset(VTOFFSET.description.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.description.v) }
  ///  Seradata international number.
  ///  Example: /// Example: number
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var intlNumber: String? { let o = _accessor.offset(VTOFFSET.intlNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var intlNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.intlNumber.v) }
  ///  Seradata sector (e.g. Commercial, Military, Civil/Other).
  ///  Example: /// Example: Commercial
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var sector: String? { let o = _accessor.offset(VTOFFSET.sector.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sectorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sector.v) }
  ///  Apogee in km.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var apogee: Double { let o = _accessor.offset(VTOFFSET.apogee.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Perigee in km.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var perigee: Double { let o = _accessor.offset(VTOFFSET.perigee.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft period in minutes.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var period: Double { let o = _accessor.offset(VTOFFSET.period.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Seradata provided inclination in degrees.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var inclination: Double { let o = _accessor.offset(VTOFFSET.inclination.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  UUID of the prime manufacturer organization, if available.
  ///  Example: /// Example: 05c43360-382e-4aa2-b875-ed28945ff2e5
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var primeManufacturerOrgId: String? { let o = _accessor.offset(VTOFFSET.primeManufacturerOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var primeManufacturerOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.primeManufacturerOrgId.v) }
  ///  Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc).
  ///  Example: /// Example: 3-Axis
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var stabilizer: String? { let o = _accessor.offset(VTOFFSET.stabilizer.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var stabilizerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.stabilizer.v) }
  ///  Spacecraft design life in days.
  ///  Example: /// Example: 231
  ///  Constraints: No constraints specified.
  public var designLife: Int32 { let o = _accessor.offset(VTOFFSET.designLife.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Spacecraft expected life in days.
  ///  Example: /// Example: 231
  ///  Constraints: No constraints specified.
  public var expectedLife: Int32 { let o = _accessor.offset(VTOFFSET.expectedLife.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Boolean indicating if the spacecraft was insured at launch.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var insuredAtLaunch: Bool { let o = _accessor.offset(VTOFFSET.insuredAtLaunch.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Mass at launch in kg.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var launchMass: Double { let o = _accessor.offset(VTOFFSET.launchMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Mass dry in kg.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var dryMass: Double { let o = _accessor.offset(VTOFFSET.dryMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  NORAD satellite number if available.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var catalogNumber: Int32 { let o = _accessor.offset(VTOFFSET.catalogNumber.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Mass dry in kg.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var totalPayloadPower: Double { let o = _accessor.offset(VTOFFSET.totalPayloadPower.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft constellation.
  ///  Example: /// Example: GPS
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var constellation: String? { let o = _accessor.offset(VTOFFSET.constellation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var constellationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.constellation.v) }
  ///  Spacecraft orbit category (e.g GEO, LEO, etc).
  ///  Example: /// Example: GEO
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var orbitCategory: String? { let o = _accessor.offset(VTOFFSET.orbitCategory.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var orbitCategorySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.orbitCategory.v) }
  ///  Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc).
  ///  Example: /// Example: Geostationary
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var orbitSubCategory: String? { let o = _accessor.offset(VTOFFSET.orbitSubCategory.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var orbitSubCategorySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.orbitSubCategory.v) }
  ///  Cost of launch in M USD.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var launchCost: Double { let o = _accessor.offset(VTOFFSET.launchCost.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Boolean indicating if the spacecraft launch cost is estimated.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var launchCostEstimated: Bool { let o = _accessor.offset(VTOFFSET.launchCostEstimated.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Boolean indicating if the spacecraft cost is estimated.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var costEstimated: Bool { let o = _accessor.offset(VTOFFSET.costEstimated.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Cost of spacecraft at new in M USD.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var newCost: Double { let o = _accessor.offset(VTOFFSET.newCost.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Combined cost of spacecraft at new in M USD.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var combinedNewCost: Double { let o = _accessor.offset(VTOFFSET.combinedNewCost.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Boolean indicating if the spacecraft combined new cost is estimated.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var combinedCostEstimated: Bool { let o = _accessor.offset(VTOFFSET.combinedCostEstimated.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Insured value of spacecraft at launch in M USD.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var insuredValueAtLaunch: Double { let o = _accessor.offset(VTOFFSET.insuredValueAtLaunch.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Boolean indicating if the spacecraft insured value at launch is estimated.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var insuredValueLaunchEstimated: Bool { let o = _accessor.offset(VTOFFSET.insuredValueLaunchEstimated.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Annual insured depreciaion factor as a percent fraction.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var annualInsuredDepreciationFactor: Double { let o = _accessor.offset(VTOFFSET.annualInsuredDepreciationFactor.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Boolean indicating if the spacecraft annualInsuredDepreciationFactor is estimated.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var annualInsuredDepreciationFactorEstimated: Bool { let o = _accessor.offset(VTOFFSET.annualInsuredDepreciationFactorEstimated.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Insurance premium at launch in M USD.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var insurancePremiumAtLaunch: Double { let o = _accessor.offset(VTOFFSET.insurancePremiumAtLaunch.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var insurancePremiumAtLaunchEstimated: Bool { let o = _accessor.offset(VTOFFSET.insurancePremiumAtLaunchEstimated.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Number of humans carried on spacecraft.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var numHumans: Int32 { let o = _accessor.offset(VTOFFSET.numHumans.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Cubesat dispenser type.
  ///  Example: /// Example: cubesatDispenserType
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var cubesatDispenserType: String? { let o = _accessor.offset(VTOFFSET.cubesatDispenserType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cubesatDispenserTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cubesatDispenserType.v) }
  ///  Mass category (e.g.  2500 - 3500kg  - Large Satellite, 10 - 100 kg - Microsatellite, etc).
  ///  Example: /// Example: 2500 - 3500kg  - Large Satellite
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var massCategory: String? { let o = _accessor.offset(VTOFFSET.massCategory.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var massCategorySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.massCategory.v) }
  ///  Seradata launch ID.
  ///  Example: /// Example: 11573
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var launchId: String? { let o = _accessor.offset(VTOFFSET.launchId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchId.v) }
  ///  Seradata launch ID.
  ///  Example: /// Example: 123
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var launchVehicleId: String? { let o = _accessor.offset(VTOFFSET.launchVehicleId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchVehicleIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchVehicleId.v) }
  ///  Seradata launch vehicle family.
  ///  Example: /// Example: launchProviderFlightNumber
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var launchProviderFlightNumber: String? { let o = _accessor.offset(VTOFFSET.launchProviderFlightNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchProviderFlightNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchProviderFlightNumber.v) }
  ///  Launch Site Name.
  ///  Example: /// Example: launchSiteName
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var launchSiteName: String? { let o = _accessor.offset(VTOFFSET.launchSiteName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchSiteNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchSiteName.v) }
  ///  Seradata Launch Site ID.
  ///  Example: /// Example: 28
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var launchSiteId: String? { let o = _accessor.offset(VTOFFSET.launchSiteId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchSiteIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchSiteId.v) }
  ///  Seradata launch country.
  ///  Example: /// Example: USA
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var launchCountry: String? { let o = _accessor.offset(VTOFFSET.launchCountry.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchCountrySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchCountry.v) }
  ///  Seradata launch provider.
  ///  Example: /// Example: launchProvider
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var launchProvider: String? { let o = _accessor.offset(VTOFFSET.launchProvider.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchProviderSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchProvider.v) }
  ///  Seradata launch provider country.
  ///  Example: /// Example: USA
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var launchProviderCountry: String? { let o = _accessor.offset(VTOFFSET.launchProviderCountry.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchProviderCountrySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchProviderCountry.v) }
  ///  Boolean indicating if the launch was commercial.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var commercialLaunch: Bool { let o = _accessor.offset(VTOFFSET.commercialLaunch.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Seradata launch type (e.g. Launched, Future, etc).
  ///  Example: /// Example: Future
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var launchType: String? { let o = _accessor.offset(VTOFFSET.launchType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchType.v) }
  ///  Seradata launch characteristic (e.g. Expendable, Reusable (New), etc).
  ///  Example: /// Example: Expendable
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var launchCharacteristic: String? { let o = _accessor.offset(VTOFFSET.launchCharacteristic.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchCharacteristicSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchCharacteristic.v) }
  ///  Seradata launch number.
  ///  Example: /// Example: FN040
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var launchNumber: String? { let o = _accessor.offset(VTOFFSET.launchNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchNumber.v) }
  ///  Launch date.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var launchDate: String? { let o = _accessor.offset(VTOFFSET.launchDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchDate.v) }
  ///  Seradata remarks on launch date.
  ///  Example: /// Example: launchDateRemarks
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var launchDateRemarks: String? { let o = _accessor.offset(VTOFFSET.launchDateRemarks.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchDateRemarksSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchDateRemarks.v) }
  ///  Youtube link of launch.
  ///  Example: /// Example: youtubeLaunchLink
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var youtubeLaunchLink: String? { let o = _accessor.offset(VTOFFSET.youtubeLaunchLink.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var youtubeLaunchLinkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.youtubeLaunchLink.v) }
  ///  Spacecraft status (e.g. Inactive - Retired, Inactive - Re-entered, Active, etc).
  ///  Example: /// Example: Inactive - Retired
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var status: String? { let o = _accessor.offset(VTOFFSET.status.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var statusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.status.v) }
  ///  Spacecraft owner name.
  ///  Example: /// Example: owner
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var owner: String? { let o = _accessor.offset(VTOFFSET.owner.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ownerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.owner.v) }
  ///  Spacecraft owner country.
  ///  Example: /// Example: USA
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var ownerCountry: String? { let o = _accessor.offset(VTOFFSET.ownerCountry.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ownerCountrySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ownerCountry.v) }
  ///  Spacecraft operator name.
  ///  Example: /// Example: operator
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var operator_: String? { let o = _accessor.offset(VTOFFSET.operator_.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var operator_SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.operator_.v) }
  ///  Spacecraft operator country.
  ///  Example: /// Example: USA
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var operatorCountry: String? { let o = _accessor.offset(VTOFFSET.operatorCountry.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var operatorCountrySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.operatorCountry.v) }
  ///  Boolean indicating if the spacecraft was leased.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var leased: Bool { let o = _accessor.offset(VTOFFSET.leased.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Spacecraft order date.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var orderDate: String? { let o = _accessor.offset(VTOFFSET.orderDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var orderDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.orderDate.v) }
  ///  Total capability lost as a percent fraction.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var capabilityLost: Double { let o = _accessor.offset(VTOFFSET.capabilityLost.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Total capacity lost as a percent fraction.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var capacityLost: Double { let o = _accessor.offset(VTOFFSET.capacityLost.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft primary mission and group.
  ///  Example: /// Example: primaryMissionGroup
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var primaryMissionGroup: String? { let o = _accessor.offset(VTOFFSET.primaryMissionGroup.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var primaryMissionGroupSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.primaryMissionGroup.v) }
  ///  Spacecraft additional missions and groups.
  ///  Example: /// Example: additionalMissionsGroups
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var additionalMissionsGroups: String? { let o = _accessor.offset(VTOFFSET.additionalMissionsGroups.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var additionalMissionsGroupsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.additionalMissionsGroups.v) }
  ///  Number of insurance claims for this spacecraft.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var totalClaims: Int32 { let o = _accessor.offset(VTOFFSET.totalClaims.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of injuries related to this spacecraft.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var totalInjuries: Int32 { let o = _accessor.offset(VTOFFSET.totalInjuries.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of fatalities related to this spacecraft.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var totalFatalities: Int32 { let o = _accessor.offset(VTOFFSET.totalFatalities.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Spacecraft name at launch.
  ///  Example: /// Example: nameAtLaunch
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var nameAtLaunch: String? { let o = _accessor.offset(VTOFFSET.nameAtLaunch.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameAtLaunchSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.nameAtLaunch.v) }
  ///  Spacecraft Bus ID.
  ///  Example: /// Example: BUS-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var busId: String? { let o = _accessor.offset(VTOFFSET.busId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var busIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.busId.v) }
  ///  Current age in years.
  ///  Example: /// Example: 5.898630136986301
  ///  Constraints: No constraints specified.
  public var currentAge: Double { let o = _accessor.offset(VTOFFSET.currentAge.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft life lost as a percent fraction.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var lifeLost: Double { let o = _accessor.offset(VTOFFSET.lifeLost.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS84 longitude of the spacecraft’s latest GEO position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -8.23
  ///  Constraints: No constraints specified.
  public var geoPosition: Double { let o = _accessor.offset(VTOFFSET.geoPosition.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft total insurance losses as a fraction.
  ///  Example: /// Example: 0.393
  ///  Constraints: No constraints specified.
  public var insuranceLossesTotal: Double { let o = _accessor.offset(VTOFFSET.insuranceLossesTotal.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft launch arranger.
  ///  Example: /// Example: launchArranger
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var launchArranger: String? { let o = _accessor.offset(VTOFFSET.launchArranger.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchArrangerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchArranger.v) }
  ///  Spacecraft launch arranger country.
  ///  Example: /// Example: USA
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var launchArrangerCountry: String? { let o = _accessor.offset(VTOFFSET.launchArrangerCountry.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchArrangerCountrySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchArrangerCountry.v) }
  ///  Spacecraft serial number.
  ///  Example: /// Example: serialNumber
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var serialNumber: String? { let o = _accessor.offset(VTOFFSET.serialNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var serialNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.serialNumber.v) }
  ///  Spacecraft program name.
  ///  Example: /// Example: programName
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var programName: String? { let o = _accessor.offset(VTOFFSET.programName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var programNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.programName.v) }
  ///  Spacecraft reused hull name.
  ///  Example: /// Example: reusedHullName
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var reusedHullName: String? { let o = _accessor.offset(VTOFFSET.reusedHullName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reusedHullNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reusedHullName.v) }
  ///  Spacecraft date of observation.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var dateOfObservation: String? { let o = _accessor.offset(VTOFFSET.dateOfObservation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dateOfObservationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dateOfObservation.v) }
  ///  Spacecraft latest latitude in degrees.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft latest longitude in degrees.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft latest altitude in km.
  ///  Example: /// Example: 36036.6330576414
  ///  Constraints: No constraints specified.
  public var altitude: Double { let o = _accessor.offset(VTOFFSET.altitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft collision risk 1mm sqm latest.
  ///  Example: /// Example: 1.33
  ///  Constraints: No constraints specified.
  public var collisionRiskMm: Double { let o = _accessor.offset(VTOFFSET.collisionRiskMm.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft collision risk 1cm sqm latest.
  ///  Example: /// Example: 1.43
  ///  Constraints: No constraints specified.
  public var collisionRiskCm: Double { let o = _accessor.offset(VTOFFSET.collisionRiskCm.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft quantity.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var quantity: Int32 { let o = _accessor.offset(VTOFFSET.quantity.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Spacecraft reusable flights.
  ///  Example: /// Example: reusableFlights
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var reusableFlights: String? { let o = _accessor.offset(VTOFFSET.reusableFlights.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reusableFlightsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reusableFlights.v) }
  ///  Notes on the spacecraft.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  ///  Insurance notes for the spacecraft.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  public var insuranceNotes: String? { let o = _accessor.offset(VTOFFSET.insuranceNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var insuranceNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.insuranceNotes.v) }
  ///  Insurance notes for the spacecraft.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  public var launchNotes: String? { let o = _accessor.offset(VTOFFSET.launchNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchNotes.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: SeradataSpacecraftDetails_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : SeradataSpacecraftDetails_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  public static func startSeradataSpacecraftDetails_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 95) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(description: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: description, at: VTOFFSET.description.p) }
  public static func add(intlNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: intlNumber, at: VTOFFSET.intlNumber.p) }
  public static func add(sector: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sector, at: VTOFFSET.sector.p) }
  public static func add(apogee: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: apogee, def: 0.0, at: VTOFFSET.apogee.p) }
  public static func add(perigee: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: perigee, def: 0.0, at: VTOFFSET.perigee.p) }
  public static func add(period: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: period, def: 0.0, at: VTOFFSET.period.p) }
  public static func add(inclination: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: inclination, def: 0.0, at: VTOFFSET.inclination.p) }
  public static func add(primeManufacturerOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: primeManufacturerOrgId, at: VTOFFSET.primeManufacturerOrgId.p) }
  public static func add(stabilizer: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: stabilizer, at: VTOFFSET.stabilizer.p) }
  public static func add(designLife: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: designLife, def: 0, at: VTOFFSET.designLife.p) }
  public static func add(expectedLife: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: expectedLife, def: 0, at: VTOFFSET.expectedLife.p) }
  public static func add(insuredAtLaunch: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: insuredAtLaunch, def: false,
   at: VTOFFSET.insuredAtLaunch.p) }
  public static func add(launchMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: launchMass, def: 0.0, at: VTOFFSET.launchMass.p) }
  public static func add(dryMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dryMass, def: 0.0, at: VTOFFSET.dryMass.p) }
  public static func add(catalogNumber: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: catalogNumber, def: 0, at: VTOFFSET.catalogNumber.p) }
  public static func add(totalPayloadPower: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalPayloadPower, def: 0.0, at: VTOFFSET.totalPayloadPower.p) }
  public static func add(constellation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: constellation, at: VTOFFSET.constellation.p) }
  public static func add(orbitCategory: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: orbitCategory, at: VTOFFSET.orbitCategory.p) }
  public static func add(orbitSubCategory: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: orbitSubCategory, at: VTOFFSET.orbitSubCategory.p) }
  public static func add(launchCost: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: launchCost, def: 0.0, at: VTOFFSET.launchCost.p) }
  public static func add(launchCostEstimated: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: launchCostEstimated, def: false,
   at: VTOFFSET.launchCostEstimated.p) }
  public static func add(costEstimated: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: costEstimated, def: false,
   at: VTOFFSET.costEstimated.p) }
  public static func add(newCost: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: newCost, def: 0.0, at: VTOFFSET.newCost.p) }
  public static func add(combinedNewCost: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: combinedNewCost, def: 0.0, at: VTOFFSET.combinedNewCost.p) }
  public static func add(combinedCostEstimated: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: combinedCostEstimated, def: false,
   at: VTOFFSET.combinedCostEstimated.p) }
  public static func add(insuredValueAtLaunch: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: insuredValueAtLaunch, def: 0.0, at: VTOFFSET.insuredValueAtLaunch.p) }
  public static func add(insuredValueLaunchEstimated: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: insuredValueLaunchEstimated, def: false,
   at: VTOFFSET.insuredValueLaunchEstimated.p) }
  public static func add(annualInsuredDepreciationFactor: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: annualInsuredDepreciationFactor, def: 0.0, at: VTOFFSET.annualInsuredDepreciationFactor.p) }
  public static func add(annualInsuredDepreciationFactorEstimated: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: annualInsuredDepreciationFactorEstimated, def: false,
   at: VTOFFSET.annualInsuredDepreciationFactorEstimated.p) }
  public static func add(insurancePremiumAtLaunch: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: insurancePremiumAtLaunch, def: 0.0, at: VTOFFSET.insurancePremiumAtLaunch.p) }
  public static func add(insurancePremiumAtLaunchEstimated: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: insurancePremiumAtLaunchEstimated, def: false,
   at: VTOFFSET.insurancePremiumAtLaunchEstimated.p) }
  public static func add(numHumans: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numHumans, def: 0, at: VTOFFSET.numHumans.p) }
  public static func add(cubesatDispenserType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cubesatDispenserType, at: VTOFFSET.cubesatDispenserType.p) }
  public static func add(massCategory: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: massCategory, at: VTOFFSET.massCategory.p) }
  public static func add(launchId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchId, at: VTOFFSET.launchId.p) }
  public static func add(launchVehicleId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchVehicleId, at: VTOFFSET.launchVehicleId.p) }
  public static func add(launchProviderFlightNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchProviderFlightNumber, at: VTOFFSET.launchProviderFlightNumber.p) }
  public static func add(launchSiteName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchSiteName, at: VTOFFSET.launchSiteName.p) }
  public static func add(launchSiteId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchSiteId, at: VTOFFSET.launchSiteId.p) }
  public static func add(launchCountry: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchCountry, at: VTOFFSET.launchCountry.p) }
  public static func add(launchProvider: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchProvider, at: VTOFFSET.launchProvider.p) }
  public static func add(launchProviderCountry: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchProviderCountry, at: VTOFFSET.launchProviderCountry.p) }
  public static func add(commercialLaunch: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: commercialLaunch, def: false,
   at: VTOFFSET.commercialLaunch.p) }
  public static func add(launchType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchType, at: VTOFFSET.launchType.p) }
  public static func add(launchCharacteristic: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchCharacteristic, at: VTOFFSET.launchCharacteristic.p) }
  public static func add(launchNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchNumber, at: VTOFFSET.launchNumber.p) }
  public static func add(launchDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchDate, at: VTOFFSET.launchDate.p) }
  public static func add(launchDateRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchDateRemarks, at: VTOFFSET.launchDateRemarks.p) }
  public static func add(youtubeLaunchLink: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: youtubeLaunchLink, at: VTOFFSET.youtubeLaunchLink.p) }
  public static func add(status: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: status, at: VTOFFSET.status.p) }
  public static func add(owner: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: owner, at: VTOFFSET.owner.p) }
  public static func add(ownerCountry: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ownerCountry, at: VTOFFSET.ownerCountry.p) }
  public static func add(operator_: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: operator_, at: VTOFFSET.operator_.p) }
  public static func add(operatorCountry: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: operatorCountry, at: VTOFFSET.operatorCountry.p) }
  public static func add(leased: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: leased, def: false,
   at: VTOFFSET.leased.p) }
  public static func add(orderDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: orderDate, at: VTOFFSET.orderDate.p) }
  public static func add(capabilityLost: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: capabilityLost, def: 0.0, at: VTOFFSET.capabilityLost.p) }
  public static func add(capacityLost: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: capacityLost, def: 0.0, at: VTOFFSET.capacityLost.p) }
  public static func add(primaryMissionGroup: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: primaryMissionGroup, at: VTOFFSET.primaryMissionGroup.p) }
  public static func add(additionalMissionsGroups: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: additionalMissionsGroups, at: VTOFFSET.additionalMissionsGroups.p) }
  public static func add(totalClaims: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalClaims, def: 0, at: VTOFFSET.totalClaims.p) }
  public static func add(totalInjuries: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalInjuries, def: 0, at: VTOFFSET.totalInjuries.p) }
  public static func add(totalFatalities: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalFatalities, def: 0, at: VTOFFSET.totalFatalities.p) }
  public static func add(nameAtLaunch: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: nameAtLaunch, at: VTOFFSET.nameAtLaunch.p) }
  public static func add(busId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: busId, at: VTOFFSET.busId.p) }
  public static func add(currentAge: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: currentAge, def: 0.0, at: VTOFFSET.currentAge.p) }
  public static func add(lifeLost: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lifeLost, def: 0.0, at: VTOFFSET.lifeLost.p) }
  public static func add(geoPosition: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: geoPosition, def: 0.0, at: VTOFFSET.geoPosition.p) }
  public static func add(insuranceLossesTotal: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: insuranceLossesTotal, def: 0.0, at: VTOFFSET.insuranceLossesTotal.p) }
  public static func add(launchArranger: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchArranger, at: VTOFFSET.launchArranger.p) }
  public static func add(launchArrangerCountry: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchArrangerCountry, at: VTOFFSET.launchArrangerCountry.p) }
  public static func add(serialNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: serialNumber, at: VTOFFSET.serialNumber.p) }
  public static func add(programName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: programName, at: VTOFFSET.programName.p) }
  public static func add(reusedHullName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reusedHullName, at: VTOFFSET.reusedHullName.p) }
  public static func add(dateOfObservation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dateOfObservation, at: VTOFFSET.dateOfObservation.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(altitude: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: altitude, def: 0.0, at: VTOFFSET.altitude.p) }
  public static func add(collisionRiskMm: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: collisionRiskMm, def: 0.0, at: VTOFFSET.collisionRiskMm.p) }
  public static func add(collisionRiskCm: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: collisionRiskCm, def: 0.0, at: VTOFFSET.collisionRiskCm.p) }
  public static func add(quantity: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: quantity, def: 0, at: VTOFFSET.quantity.p) }
  public static func add(reusableFlights: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reusableFlights, at: VTOFFSET.reusableFlights.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func add(insuranceNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: insuranceNotes, at: VTOFFSET.insuranceNotes.p) }
  public static func add(launchNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchNotes, at: VTOFFSET.launchNotes.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: SeradataSpacecraftDetails_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func endSeradataSpacecraftDetails_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSeradataSpacecraftDetails_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    descriptionOffset description: Offset = Offset(),
    intlNumberOffset intlNumber: Offset = Offset(),
    sectorOffset sector: Offset = Offset(),
    apogee: Double = 0.0,
    perigee: Double = 0.0,
    period: Double = 0.0,
    inclination: Double = 0.0,
    primeManufacturerOrgIdOffset primeManufacturerOrgId: Offset = Offset(),
    stabilizerOffset stabilizer: Offset = Offset(),
    designLife: Int32 = 0,
    expectedLife: Int32 = 0,
    insuredAtLaunch: Bool = false,
    launchMass: Double = 0.0,
    dryMass: Double = 0.0,
    catalogNumber: Int32 = 0,
    totalPayloadPower: Double = 0.0,
    constellationOffset constellation: Offset = Offset(),
    orbitCategoryOffset orbitCategory: Offset = Offset(),
    orbitSubCategoryOffset orbitSubCategory: Offset = Offset(),
    launchCost: Double = 0.0,
    launchCostEstimated: Bool = false,
    costEstimated: Bool = false,
    newCost: Double = 0.0,
    combinedNewCost: Double = 0.0,
    combinedCostEstimated: Bool = false,
    insuredValueAtLaunch: Double = 0.0,
    insuredValueLaunchEstimated: Bool = false,
    annualInsuredDepreciationFactor: Double = 0.0,
    annualInsuredDepreciationFactorEstimated: Bool = false,
    insurancePremiumAtLaunch: Double = 0.0,
    insurancePremiumAtLaunchEstimated: Bool = false,
    numHumans: Int32 = 0,
    cubesatDispenserTypeOffset cubesatDispenserType: Offset = Offset(),
    massCategoryOffset massCategory: Offset = Offset(),
    launchIdOffset launchId: Offset = Offset(),
    launchVehicleIdOffset launchVehicleId: Offset = Offset(),
    launchProviderFlightNumberOffset launchProviderFlightNumber: Offset = Offset(),
    launchSiteNameOffset launchSiteName: Offset = Offset(),
    launchSiteIdOffset launchSiteId: Offset = Offset(),
    launchCountryOffset launchCountry: Offset = Offset(),
    launchProviderOffset launchProvider: Offset = Offset(),
    launchProviderCountryOffset launchProviderCountry: Offset = Offset(),
    commercialLaunch: Bool = false,
    launchTypeOffset launchType: Offset = Offset(),
    launchCharacteristicOffset launchCharacteristic: Offset = Offset(),
    launchNumberOffset launchNumber: Offset = Offset(),
    launchDateOffset launchDate: Offset = Offset(),
    launchDateRemarksOffset launchDateRemarks: Offset = Offset(),
    youtubeLaunchLinkOffset youtubeLaunchLink: Offset = Offset(),
    statusOffset status: Offset = Offset(),
    ownerOffset owner: Offset = Offset(),
    ownerCountryOffset ownerCountry: Offset = Offset(),
    operator_Offset operator_: Offset = Offset(),
    operatorCountryOffset operatorCountry: Offset = Offset(),
    leased: Bool = false,
    orderDateOffset orderDate: Offset = Offset(),
    capabilityLost: Double = 0.0,
    capacityLost: Double = 0.0,
    primaryMissionGroupOffset primaryMissionGroup: Offset = Offset(),
    additionalMissionsGroupsOffset additionalMissionsGroups: Offset = Offset(),
    totalClaims: Int32 = 0,
    totalInjuries: Int32 = 0,
    totalFatalities: Int32 = 0,
    nameAtLaunchOffset nameAtLaunch: Offset = Offset(),
    busIdOffset busId: Offset = Offset(),
    currentAge: Double = 0.0,
    lifeLost: Double = 0.0,
    geoPosition: Double = 0.0,
    insuranceLossesTotal: Double = 0.0,
    launchArrangerOffset launchArranger: Offset = Offset(),
    launchArrangerCountryOffset launchArrangerCountry: Offset = Offset(),
    serialNumberOffset serialNumber: Offset = Offset(),
    programNameOffset programName: Offset = Offset(),
    reusedHullNameOffset reusedHullName: Offset = Offset(),
    dateOfObservationOffset dateOfObservation: Offset = Offset(),
    lat: Double = 0.0,
    lon: Double = 0.0,
    altitude: Double = 0.0,
    collisionRiskMm: Double = 0.0,
    collisionRiskCm: Double = 0.0,
    quantity: Int32 = 0,
    reusableFlightsOffset reusableFlights: Offset = Offset(),
    notesOffset notes: Offset = Offset(),
    insuranceNotesOffset insuranceNotes: Offset = Offset(),
    launchNotesOffset launchNotes: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: SeradataSpacecraftDetails_Ingest_dataMode_Enum = .real,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset()
  ) -> Offset {
    let __start = SeradataSpacecraftDetails_Ingest.startSeradataSpacecraftDetails_Ingest(&fbb)
    SeradataSpacecraftDetails_Ingest.add(id: id, &fbb)
    SeradataSpacecraftDetails_Ingest.add(idOnOrbit: idOnOrbit, &fbb)
    SeradataSpacecraftDetails_Ingest.add(classificationMarking: classificationMarking, &fbb)
    SeradataSpacecraftDetails_Ingest.add(name: name, &fbb)
    SeradataSpacecraftDetails_Ingest.add(description: description, &fbb)
    SeradataSpacecraftDetails_Ingest.add(intlNumber: intlNumber, &fbb)
    SeradataSpacecraftDetails_Ingest.add(sector: sector, &fbb)
    SeradataSpacecraftDetails_Ingest.add(apogee: apogee, &fbb)
    SeradataSpacecraftDetails_Ingest.add(perigee: perigee, &fbb)
    SeradataSpacecraftDetails_Ingest.add(period: period, &fbb)
    SeradataSpacecraftDetails_Ingest.add(inclination: inclination, &fbb)
    SeradataSpacecraftDetails_Ingest.add(primeManufacturerOrgId: primeManufacturerOrgId, &fbb)
    SeradataSpacecraftDetails_Ingest.add(stabilizer: stabilizer, &fbb)
    SeradataSpacecraftDetails_Ingest.add(designLife: designLife, &fbb)
    SeradataSpacecraftDetails_Ingest.add(expectedLife: expectedLife, &fbb)
    SeradataSpacecraftDetails_Ingest.add(insuredAtLaunch: insuredAtLaunch, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchMass: launchMass, &fbb)
    SeradataSpacecraftDetails_Ingest.add(dryMass: dryMass, &fbb)
    SeradataSpacecraftDetails_Ingest.add(catalogNumber: catalogNumber, &fbb)
    SeradataSpacecraftDetails_Ingest.add(totalPayloadPower: totalPayloadPower, &fbb)
    SeradataSpacecraftDetails_Ingest.add(constellation: constellation, &fbb)
    SeradataSpacecraftDetails_Ingest.add(orbitCategory: orbitCategory, &fbb)
    SeradataSpacecraftDetails_Ingest.add(orbitSubCategory: orbitSubCategory, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchCost: launchCost, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchCostEstimated: launchCostEstimated, &fbb)
    SeradataSpacecraftDetails_Ingest.add(costEstimated: costEstimated, &fbb)
    SeradataSpacecraftDetails_Ingest.add(newCost: newCost, &fbb)
    SeradataSpacecraftDetails_Ingest.add(combinedNewCost: combinedNewCost, &fbb)
    SeradataSpacecraftDetails_Ingest.add(combinedCostEstimated: combinedCostEstimated, &fbb)
    SeradataSpacecraftDetails_Ingest.add(insuredValueAtLaunch: insuredValueAtLaunch, &fbb)
    SeradataSpacecraftDetails_Ingest.add(insuredValueLaunchEstimated: insuredValueLaunchEstimated, &fbb)
    SeradataSpacecraftDetails_Ingest.add(annualInsuredDepreciationFactor: annualInsuredDepreciationFactor, &fbb)
    SeradataSpacecraftDetails_Ingest.add(annualInsuredDepreciationFactorEstimated: annualInsuredDepreciationFactorEstimated, &fbb)
    SeradataSpacecraftDetails_Ingest.add(insurancePremiumAtLaunch: insurancePremiumAtLaunch, &fbb)
    SeradataSpacecraftDetails_Ingest.add(insurancePremiumAtLaunchEstimated: insurancePremiumAtLaunchEstimated, &fbb)
    SeradataSpacecraftDetails_Ingest.add(numHumans: numHumans, &fbb)
    SeradataSpacecraftDetails_Ingest.add(cubesatDispenserType: cubesatDispenserType, &fbb)
    SeradataSpacecraftDetails_Ingest.add(massCategory: massCategory, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchId: launchId, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchVehicleId: launchVehicleId, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchProviderFlightNumber: launchProviderFlightNumber, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchSiteName: launchSiteName, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchSiteId: launchSiteId, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchCountry: launchCountry, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchProvider: launchProvider, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchProviderCountry: launchProviderCountry, &fbb)
    SeradataSpacecraftDetails_Ingest.add(commercialLaunch: commercialLaunch, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchType: launchType, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchCharacteristic: launchCharacteristic, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchNumber: launchNumber, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchDate: launchDate, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchDateRemarks: launchDateRemarks, &fbb)
    SeradataSpacecraftDetails_Ingest.add(youtubeLaunchLink: youtubeLaunchLink, &fbb)
    SeradataSpacecraftDetails_Ingest.add(status: status, &fbb)
    SeradataSpacecraftDetails_Ingest.add(owner: owner, &fbb)
    SeradataSpacecraftDetails_Ingest.add(ownerCountry: ownerCountry, &fbb)
    SeradataSpacecraftDetails_Ingest.add(operator_: operator_, &fbb)
    SeradataSpacecraftDetails_Ingest.add(operatorCountry: operatorCountry, &fbb)
    SeradataSpacecraftDetails_Ingest.add(leased: leased, &fbb)
    SeradataSpacecraftDetails_Ingest.add(orderDate: orderDate, &fbb)
    SeradataSpacecraftDetails_Ingest.add(capabilityLost: capabilityLost, &fbb)
    SeradataSpacecraftDetails_Ingest.add(capacityLost: capacityLost, &fbb)
    SeradataSpacecraftDetails_Ingest.add(primaryMissionGroup: primaryMissionGroup, &fbb)
    SeradataSpacecraftDetails_Ingest.add(additionalMissionsGroups: additionalMissionsGroups, &fbb)
    SeradataSpacecraftDetails_Ingest.add(totalClaims: totalClaims, &fbb)
    SeradataSpacecraftDetails_Ingest.add(totalInjuries: totalInjuries, &fbb)
    SeradataSpacecraftDetails_Ingest.add(totalFatalities: totalFatalities, &fbb)
    SeradataSpacecraftDetails_Ingest.add(nameAtLaunch: nameAtLaunch, &fbb)
    SeradataSpacecraftDetails_Ingest.add(busId: busId, &fbb)
    SeradataSpacecraftDetails_Ingest.add(currentAge: currentAge, &fbb)
    SeradataSpacecraftDetails_Ingest.add(lifeLost: lifeLost, &fbb)
    SeradataSpacecraftDetails_Ingest.add(geoPosition: geoPosition, &fbb)
    SeradataSpacecraftDetails_Ingest.add(insuranceLossesTotal: insuranceLossesTotal, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchArranger: launchArranger, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchArrangerCountry: launchArrangerCountry, &fbb)
    SeradataSpacecraftDetails_Ingest.add(serialNumber: serialNumber, &fbb)
    SeradataSpacecraftDetails_Ingest.add(programName: programName, &fbb)
    SeradataSpacecraftDetails_Ingest.add(reusedHullName: reusedHullName, &fbb)
    SeradataSpacecraftDetails_Ingest.add(dateOfObservation: dateOfObservation, &fbb)
    SeradataSpacecraftDetails_Ingest.add(lat: lat, &fbb)
    SeradataSpacecraftDetails_Ingest.add(lon: lon, &fbb)
    SeradataSpacecraftDetails_Ingest.add(altitude: altitude, &fbb)
    SeradataSpacecraftDetails_Ingest.add(collisionRiskMm: collisionRiskMm, &fbb)
    SeradataSpacecraftDetails_Ingest.add(collisionRiskCm: collisionRiskCm, &fbb)
    SeradataSpacecraftDetails_Ingest.add(quantity: quantity, &fbb)
    SeradataSpacecraftDetails_Ingest.add(reusableFlights: reusableFlights, &fbb)
    SeradataSpacecraftDetails_Ingest.add(notes: notes, &fbb)
    SeradataSpacecraftDetails_Ingest.add(insuranceNotes: insuranceNotes, &fbb)
    SeradataSpacecraftDetails_Ingest.add(launchNotes: launchNotes, &fbb)
    SeradataSpacecraftDetails_Ingest.add(source: source, &fbb)
    SeradataSpacecraftDetails_Ingest.add(origin: origin, &fbb)
    SeradataSpacecraftDetails_Ingest.add(origNetwork: origNetwork, &fbb)
    SeradataSpacecraftDetails_Ingest.add(dataMode: dataMode, &fbb)
    SeradataSpacecraftDetails_Ingest.add(createdAt: createdAt, &fbb)
    SeradataSpacecraftDetails_Ingest.add(createdBy: createdBy, &fbb)
    return SeradataSpacecraftDetails_Ingest.endSeradataSpacecraftDetails_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.description.p, fieldName: "description", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.intlNumber.p, fieldName: "intlNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sector.p, fieldName: "sector", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.apogee.p, fieldName: "apogee", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.perigee.p, fieldName: "perigee", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.period.p, fieldName: "period", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.inclination.p, fieldName: "inclination", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.primeManufacturerOrgId.p, fieldName: "primeManufacturerOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.stabilizer.p, fieldName: "stabilizer", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.designLife.p, fieldName: "designLife", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.expectedLife.p, fieldName: "expectedLife", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.insuredAtLaunch.p, fieldName: "insuredAtLaunch", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.launchMass.p, fieldName: "launchMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dryMass.p, fieldName: "dryMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.catalogNumber.p, fieldName: "catalogNumber", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.totalPayloadPower.p, fieldName: "totalPayloadPower", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.constellation.p, fieldName: "constellation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.orbitCategory.p, fieldName: "orbitCategory", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.orbitSubCategory.p, fieldName: "orbitSubCategory", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchCost.p, fieldName: "launchCost", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.launchCostEstimated.p, fieldName: "launchCostEstimated", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.costEstimated.p, fieldName: "costEstimated", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.newCost.p, fieldName: "newCost", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.combinedNewCost.p, fieldName: "combinedNewCost", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.combinedCostEstimated.p, fieldName: "combinedCostEstimated", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.insuredValueAtLaunch.p, fieldName: "insuredValueAtLaunch", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.insuredValueLaunchEstimated.p, fieldName: "insuredValueLaunchEstimated", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.annualInsuredDepreciationFactor.p, fieldName: "annualInsuredDepreciationFactor", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.annualInsuredDepreciationFactorEstimated.p, fieldName: "annualInsuredDepreciationFactorEstimated", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.insurancePremiumAtLaunch.p, fieldName: "insurancePremiumAtLaunch", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.insurancePremiumAtLaunchEstimated.p, fieldName: "insurancePremiumAtLaunchEstimated", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.numHumans.p, fieldName: "numHumans", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.cubesatDispenserType.p, fieldName: "cubesatDispenserType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.massCategory.p, fieldName: "massCategory", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchId.p, fieldName: "launchId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchVehicleId.p, fieldName: "launchVehicleId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchProviderFlightNumber.p, fieldName: "launchProviderFlightNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchSiteName.p, fieldName: "launchSiteName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchSiteId.p, fieldName: "launchSiteId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchCountry.p, fieldName: "launchCountry", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchProvider.p, fieldName: "launchProvider", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchProviderCountry.p, fieldName: "launchProviderCountry", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.commercialLaunch.p, fieldName: "commercialLaunch", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.launchType.p, fieldName: "launchType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchCharacteristic.p, fieldName: "launchCharacteristic", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchNumber.p, fieldName: "launchNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchDate.p, fieldName: "launchDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchDateRemarks.p, fieldName: "launchDateRemarks", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.youtubeLaunchLink.p, fieldName: "youtubeLaunchLink", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.status.p, fieldName: "status", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.owner.p, fieldName: "owner", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ownerCountry.p, fieldName: "ownerCountry", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.operator_.p, fieldName: "operator_", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.operatorCountry.p, fieldName: "operatorCountry", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.leased.p, fieldName: "leased", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.orderDate.p, fieldName: "orderDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.capabilityLost.p, fieldName: "capabilityLost", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.capacityLost.p, fieldName: "capacityLost", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.primaryMissionGroup.p, fieldName: "primaryMissionGroup", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.additionalMissionsGroups.p, fieldName: "additionalMissionsGroups", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.totalClaims.p, fieldName: "totalClaims", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.totalInjuries.p, fieldName: "totalInjuries", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.totalFatalities.p, fieldName: "totalFatalities", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.nameAtLaunch.p, fieldName: "nameAtLaunch", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.busId.p, fieldName: "busId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.currentAge.p, fieldName: "currentAge", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lifeLost.p, fieldName: "lifeLost", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.geoPosition.p, fieldName: "geoPosition", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.insuranceLossesTotal.p, fieldName: "insuranceLossesTotal", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.launchArranger.p, fieldName: "launchArranger", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchArrangerCountry.p, fieldName: "launchArrangerCountry", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.serialNumber.p, fieldName: "serialNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.programName.p, fieldName: "programName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reusedHullName.p, fieldName: "reusedHullName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dateOfObservation.p, fieldName: "dateOfObservation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.altitude.p, fieldName: "altitude", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.collisionRiskMm.p, fieldName: "collisionRiskMm", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.collisionRiskCm.p, fieldName: "collisionRiskCm", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.quantity.p, fieldName: "quantity", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.reusableFlights.p, fieldName: "reusableFlights", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.insuranceNotes.p, fieldName: "insuranceNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchNotes.p, fieldName: "launchNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: SeradataSpacecraftDetails_Ingest_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

