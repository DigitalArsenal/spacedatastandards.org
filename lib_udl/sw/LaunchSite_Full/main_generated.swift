// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum LaunchSite_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: LaunchSite_Full_dataMode_Enum { return .exercise }
  public static var min: LaunchSite_Full_dataMode_Enum { return .real }
}


///  /// Model representation of known launch sites.
public struct LaunchSite_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "LAUN" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: LaunchSite_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case code = 8
    case shortCode = 10
    case altCode = 12
    case idSite = 14
    case name = 16
    case createdAt = 18
    case createdBy = 20
    case updatedAt = 22
    case updatedBy = 24
    case source = 26
    case origin = 28
    case origNetwork = 30
    case dataMode = 32
    case launchSiteDetails = 34
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: LAUNCHSITE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Launch site code.
  ///  Example: /// Example: SAN MARCO
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var code: String? { let o = _accessor.offset(VTOFFSET.code.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var codeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.code.v) }
  ///  Abbreviated short name for the launch site.
  ///  Example: /// Example: SNMLP
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var shortCode: String? { let o = _accessor.offset(VTOFFSET.shortCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var shortCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.shortCode.v) }
  ///  Alternate launch site code.
  ///  Example: /// Example: 35
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var altCode: String? { let o = _accessor.offset(VTOFFSET.altCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altCode.v) }
  ///  Unique identifier of the parent site associated with this launch site.
  ///  Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSite: String? { let o = _accessor.offset(VTOFFSET.idSite.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSiteSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSite.v) }
  ///  Launch site name.
  ///  Example: /// Example: Example launch site name
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: LaunchSite_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : LaunchSite_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Read-only collection of additional LaunchSiteDetails by various sources for this launch site, ignored on create/update. These details must be created separately via the /udl/launchsitedetails operations.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasLaunchSiteDetails: Bool { let o = _accessor.offset(VTOFFSET.launchSiteDetails.v); return o == 0 ? false : true }
  public var launchSiteDetailsCount: Int32 { let o = _accessor.offset(VTOFFSET.launchSiteDetails.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func launchSiteDetails(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.launchSiteDetails.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startLaunchSite_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 16) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(code: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: code, at: VTOFFSET.code.p) }
  public static func add(shortCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortCode, at: VTOFFSET.shortCode.p) }
  public static func add(altCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altCode, at: VTOFFSET.altCode.p) }
  public static func add(idSite: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSite, at: VTOFFSET.idSite.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: LaunchSite_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func addVectorOf(launchSiteDetails: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchSiteDetails, at: VTOFFSET.launchSiteDetails.p) }
  public static func endLaunchSite_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createLaunchSite_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    codeOffset code: Offset = Offset(),
    shortCodeOffset shortCode: Offset = Offset(),
    altCodeOffset altCode: Offset = Offset(),
    idSiteOffset idSite: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: LaunchSite_Full_dataMode_Enum = .real,
    launchSiteDetailsVectorOffset launchSiteDetails: Offset = Offset()
  ) -> Offset {
    let __start = LaunchSite_Full.startLaunchSite_Full(&fbb)
    LaunchSite_Full.add(id: id, &fbb)
    LaunchSite_Full.add(classificationMarking: classificationMarking, &fbb)
    LaunchSite_Full.add(code: code, &fbb)
    LaunchSite_Full.add(shortCode: shortCode, &fbb)
    LaunchSite_Full.add(altCode: altCode, &fbb)
    LaunchSite_Full.add(idSite: idSite, &fbb)
    LaunchSite_Full.add(name: name, &fbb)
    LaunchSite_Full.add(createdAt: createdAt, &fbb)
    LaunchSite_Full.add(createdBy: createdBy, &fbb)
    LaunchSite_Full.add(updatedAt: updatedAt, &fbb)
    LaunchSite_Full.add(updatedBy: updatedBy, &fbb)
    LaunchSite_Full.add(source: source, &fbb)
    LaunchSite_Full.add(origin: origin, &fbb)
    LaunchSite_Full.add(origNetwork: origNetwork, &fbb)
    LaunchSite_Full.add(dataMode: dataMode, &fbb)
    LaunchSite_Full.addVectorOf(launchSiteDetails: launchSiteDetails, &fbb)
    return LaunchSite_Full.endLaunchSite_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.code.p, fieldName: "code", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.shortCode.p, fieldName: "shortCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altCode.p, fieldName: "altCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSite.p, fieldName: "idSite", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: LaunchSite_Full_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.launchSiteDetails.p, fieldName: "launchSiteDetails", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

