// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Related document ids.
public struct RelatedDocument_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "RELA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: RelatedDocument_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case documentId = 4
    case dataSourceRefs = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The document id of the related document.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var documentId: String? { let o = _accessor.offset(VTOFFSET.documentId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var documentIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.documentId.v) }
  ///  List of data sources related to this document.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasDataSourceRefs: Bool { let o = _accessor.offset(VTOFFSET.dataSourceRefs.v); return o == 0 ? false : true }
  public var dataSourceRefsCount: Int32 { let o = _accessor.offset(VTOFFSET.dataSourceRefs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func dataSourceRefs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.dataSourceRefs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startRelatedDocument_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(documentId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: documentId, at: VTOFFSET.documentId.p) }
  public static func addVectorOf(dataSourceRefs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dataSourceRefs, at: VTOFFSET.dataSourceRefs.p) }
  public static func endRelatedDocument_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createRelatedDocument_Abridged(
    _ fbb: inout FlatBufferBuilder,
    documentIdOffset documentId: Offset = Offset(),
    dataSourceRefsVectorOffset dataSourceRefs: Offset = Offset()
  ) -> Offset {
    let __start = RelatedDocument_Abridged.startRelatedDocument_Abridged(&fbb)
    RelatedDocument_Abridged.add(documentId: documentId, &fbb)
    RelatedDocument_Abridged.addVectorOf(dataSourceRefs: dataSourceRefs, &fbb)
    return RelatedDocument_Abridged.endRelatedDocument_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.documentId.p, fieldName: "documentId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataSourceRefs.p, fieldName: "dataSourceRefs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

