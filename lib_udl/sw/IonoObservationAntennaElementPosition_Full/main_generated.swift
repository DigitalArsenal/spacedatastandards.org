// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// For phased arrays, a 2D array. 1st dimension spans the dimension antenna_element (see phase or amplitude). 2nd dimension spans 3 (x, y, z) Cartesian coordinates.
public struct IonoObservationAntennaElementPosition_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "IONO" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: IonoObservationAntennaElementPosition_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case dimensions = 4
    case dimensionName = 6
    case data = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Array of integers of the antenna_element dimensions.
  ///  Example: /// Example: [3, 4]
  ///  Constraints: No constraints specified.
  public var hasDimensions: Bool { let o = _accessor.offset(VTOFFSET.dimensions.v); return o == 0 ? false : true }
  public var dimensionsCount: Int32 { let o = _accessor.offset(VTOFFSET.dimensions.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func dimensions(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.dimensions.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of names for dimensions.
  ///  Example: /// Example: ['NAME1', 'NAME2']
  ///  Constraints: No constraints specified.
  public var hasDimensionName: Bool { let o = _accessor.offset(VTOFFSET.dimensionName.v); return o == 0 ? false : true }
  public var dimensionNameCount: Int32 { let o = _accessor.offset(VTOFFSET.dimensionName.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func dimensionName(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.dimensionName.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of 3-element tuples (x,y,z) in km.
  ///  Example: /// Example: [[1.23, 0.123]]
  ///  Constraints: No constraints specified.
  public var hasData: Bool { let o = _accessor.offset(VTOFFSET.data.v); return o == 0 ? false : true }
  public var dataCount: Int32 { let o = _accessor.offset(VTOFFSET.data.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func data(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.data.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startIonoObservationAntennaElementPosition_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func addVectorOf(dimensions: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dimensions, at: VTOFFSET.dimensions.p) }
  public static func addVectorOf(dimensionName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dimensionName, at: VTOFFSET.dimensionName.p) }
  public static func addVectorOf(data: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: data, at: VTOFFSET.data.p) }
  public static func endIonoObservationAntennaElementPosition_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createIonoObservationAntennaElementPosition_Full(
    _ fbb: inout FlatBufferBuilder,
    dimensionsVectorOffset dimensions: Offset = Offset(),
    dimensionNameVectorOffset dimensionName: Offset = Offset(),
    dataVectorOffset data: Offset = Offset()
  ) -> Offset {
    let __start = IonoObservationAntennaElementPosition_Full.startIonoObservationAntennaElementPosition_Full(&fbb)
    IonoObservationAntennaElementPosition_Full.addVectorOf(dimensions: dimensions, &fbb)
    IonoObservationAntennaElementPosition_Full.addVectorOf(dimensionName: dimensionName, &fbb)
    IonoObservationAntennaElementPosition_Full.addVectorOf(data: data, &fbb)
    return IonoObservationAntennaElementPosition_Full.endIonoObservationAntennaElementPosition_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.dimensions.p, fieldName: "dimensions", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.dimensionName.p, fieldName: "dimensionName", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.data.p, fieldName: "data", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

