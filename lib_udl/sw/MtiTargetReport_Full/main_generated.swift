// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
public struct MtiTargetReport_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "MTIT" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: MtiTargetReport_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case d321 = 4
    case d322 = 6
    case d323 = 8
    case d324 = 10
    case d325 = 12
    case d326 = 14
    case d327 = 16
    case d328 = 18
    case d329 = 20
    case d3210 = 22
    case d3211 = 24
    case d3212 = 26
    case d3213 = 28
    case d3214 = 30
    case d3215 = 32
    case d3216 = 34
    case d3217 = 36
    case d3218 = 38
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Sequential count of this MTI report within the dwell.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var d321: Int32 { let o = _accessor.offset(VTOFFSET.d321.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  public var d322: Double { let o = _accessor.offset(VTOFFSET.d322.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The East-West position of the reported detection, expressed as degrees East (positive) from the Prime Meridian.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  public var d323: Double { let o = _accessor.offset(VTOFFSET.d323.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) from the Dwell Area Center Latitude.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var d324: Int32 { let o = _accessor.offset(VTOFFSET.d324.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The East-West position of the reported detection, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian from the Dwell Area Center Longitude.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var d325: Int32 { let o = _accessor.offset(VTOFFSET.d325.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Height of the reported detection, referenced to its position above the WGS 84 ellipsoid, in meters.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var d326: Int32 { let o = _accessor.offset(VTOFFSET.d326.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The component of velocity for the reported detection, expressed in centimeters per second, corrected for platform motion, along the line of sight between the sensor and the reported detection, where the positive direction is away from the sensor.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var d327: Int32 { let o = _accessor.offset(VTOFFSET.d327.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The target wrap velocity permits trackers to un-wrap velocities for targets with line-of-sight components large enough to exceed the first velocity period.  Expressed in centimeters/sec.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var d328: Int32 { let o = _accessor.offset(VTOFFSET.d328.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Estimated signal-to-noise ratio (SNR) of the target return, in decibels.
  ///  Example: /// Example: 17
  ///  Constraints: No constraints specified.
  public var d329: Int32 { let o = _accessor.offset(VTOFFSET.d329.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The classification of the target (i.e. vehicle, aircraft, â€¦).
  ///  Example: /// Example: vehicle
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var d3210: String? { let o = _accessor.offset(VTOFFSET.d3210.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var d3210SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.d3210.v) }
  ///  Estimated probability that the target classification field is correctly classified.
  ///  Example: /// Example: 90
  ///  Constraints: No constraints specified.
  public var d3211: Int32 { let o = _accessor.offset(VTOFFSET.d3211.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Standard deviation of the estimated slant range of the reported detection, in centimeters.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var d3212: Int32 { let o = _accessor.offset(VTOFFSET.d3212.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Standard deviation of the position estimate, in the cross-range direction, of the reported detection, in decimeters.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var d3213: Int32 { let o = _accessor.offset(VTOFFSET.d3213.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Standard deviation of the estimated geodetic height, in meters.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var d3214: Int32 { let o = _accessor.offset(VTOFFSET.d3214.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Standard deviation of the measured line-of-sight velocity component, in centimeters per second.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var d3215: Int32 { let o = _accessor.offset(VTOFFSET.d3215.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The Truth Tag- Application is the Application Field truncated to 8 bits, from the Entity State Protocol Data Unit (PDU) used to generate the MTI Target.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var d3216: Int32 { let o = _accessor.offset(VTOFFSET.d3216.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The Truth Tag - Entity is the Entity Field from the Entity State PDU used to generate the MTI Target.
  ///  Example: /// Example: 1234567890
  ///  Constraints: No constraints specified.
  public var d3217: Int64 { let o = _accessor.offset(VTOFFSET.d3217.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  ///  Estimated radar cross section of the target return, in half-decibels.
  ///  Example: /// Example: 98
  ///  Constraints: No constraints specified.
  public var d3218: Int32 { let o = _accessor.offset(VTOFFSET.d3218.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public static func startMtiTargetReport_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 18) }
  public static func add(d321: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d321, def: 0, at: VTOFFSET.d321.p) }
  public static func add(d322: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d322, def: 0.0, at: VTOFFSET.d322.p) }
  public static func add(d323: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d323, def: 0.0, at: VTOFFSET.d323.p) }
  public static func add(d324: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d324, def: 0, at: VTOFFSET.d324.p) }
  public static func add(d325: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d325, def: 0, at: VTOFFSET.d325.p) }
  public static func add(d326: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d326, def: 0, at: VTOFFSET.d326.p) }
  public static func add(d327: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d327, def: 0, at: VTOFFSET.d327.p) }
  public static func add(d328: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d328, def: 0, at: VTOFFSET.d328.p) }
  public static func add(d329: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d329, def: 0, at: VTOFFSET.d329.p) }
  public static func add(d3210: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: d3210, at: VTOFFSET.d3210.p) }
  public static func add(d3211: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d3211, def: 0, at: VTOFFSET.d3211.p) }
  public static func add(d3212: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d3212, def: 0, at: VTOFFSET.d3212.p) }
  public static func add(d3213: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d3213, def: 0, at: VTOFFSET.d3213.p) }
  public static func add(d3214: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d3214, def: 0, at: VTOFFSET.d3214.p) }
  public static func add(d3215: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d3215, def: 0, at: VTOFFSET.d3215.p) }
  public static func add(d3216: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d3216, def: 0, at: VTOFFSET.d3216.p) }
  public static func add(d3217: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d3217, def: 0, at: VTOFFSET.d3217.p) }
  public static func add(d3218: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d3218, def: 0, at: VTOFFSET.d3218.p) }
  public static func endMtiTargetReport_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMtiTargetReport_Full(
    _ fbb: inout FlatBufferBuilder,
    d321: Int32 = 0,
    d322: Double = 0.0,
    d323: Double = 0.0,
    d324: Int32 = 0,
    d325: Int32 = 0,
    d326: Int32 = 0,
    d327: Int32 = 0,
    d328: Int32 = 0,
    d329: Int32 = 0,
    d3210Offset d3210: Offset = Offset(),
    d3211: Int32 = 0,
    d3212: Int32 = 0,
    d3213: Int32 = 0,
    d3214: Int32 = 0,
    d3215: Int32 = 0,
    d3216: Int32 = 0,
    d3217: Int64 = 0,
    d3218: Int32 = 0
  ) -> Offset {
    let __start = MtiTargetReport_Full.startMtiTargetReport_Full(&fbb)
    MtiTargetReport_Full.add(d321: d321, &fbb)
    MtiTargetReport_Full.add(d322: d322, &fbb)
    MtiTargetReport_Full.add(d323: d323, &fbb)
    MtiTargetReport_Full.add(d324: d324, &fbb)
    MtiTargetReport_Full.add(d325: d325, &fbb)
    MtiTargetReport_Full.add(d326: d326, &fbb)
    MtiTargetReport_Full.add(d327: d327, &fbb)
    MtiTargetReport_Full.add(d328: d328, &fbb)
    MtiTargetReport_Full.add(d329: d329, &fbb)
    MtiTargetReport_Full.add(d3210: d3210, &fbb)
    MtiTargetReport_Full.add(d3211: d3211, &fbb)
    MtiTargetReport_Full.add(d3212: d3212, &fbb)
    MtiTargetReport_Full.add(d3213: d3213, &fbb)
    MtiTargetReport_Full.add(d3214: d3214, &fbb)
    MtiTargetReport_Full.add(d3215: d3215, &fbb)
    MtiTargetReport_Full.add(d3216: d3216, &fbb)
    MtiTargetReport_Full.add(d3217: d3217, &fbb)
    MtiTargetReport_Full.add(d3218: d3218, &fbb)
    return MtiTargetReport_Full.endMtiTargetReport_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.d321.p, fieldName: "d321", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d322.p, fieldName: "d322", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d323.p, fieldName: "d323", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d324.p, fieldName: "d324", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d325.p, fieldName: "d325", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d326.p, fieldName: "d326", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d327.p, fieldName: "d327", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d328.p, fieldName: "d328", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d329.p, fieldName: "d329", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d3210.p, fieldName: "d3210", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.d3211.p, fieldName: "d3211", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d3212.p, fieldName: "d3212", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d3213.p, fieldName: "d3213", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d3214.p, fieldName: "d3214", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d3215.p, fieldName: "d3215", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d3216.p, fieldName: "d3216", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d3217.p, fieldName: "d3217", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.d3218.p, fieldName: "d3218", required: false, type: Int32.self)
    _v.finish()
  }
}

