// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum EngineDetails_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: EngineDetails_Abridged_dataMode_Enum { return .exercise }
  public static var min: EngineDetails_Abridged_dataMode_Enum { return .real }
}


///  /// Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.
public struct EngineDetails_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ENGI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EngineDetails_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case idEngine = 6
    case classificationMarking = 8
    case family = 10
    case cycleType = 12
    case characteristicType = 14
    case manufacturerOrgId = 16
    case specificImpulse = 18
    case burnTime = 20
    case seaLevelThrust = 22
    case vacuumThrust = 24
    case chamberPressure = 26
    case nozzleExpansionRatio = 28
    case maxFirings = 30
    case propellant = 32
    case oxidizer = 34
    case notes = 36
    case createdAt = 38
    case createdBy = 40
    case source = 42
    case origin = 44
    case origNetwork = 46
    case dataMode = 48
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ENGINEDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Identifier of the parent engine record.
  ///  Example: /// Example: ENGINE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idEngine: String? { let o = _accessor.offset(VTOFFSET.idEngine.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idEngineSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idEngine.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Engine type or family.
  ///  Example: /// Example: ENGINE_TYPE1
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var family: String? { let o = _accessor.offset(VTOFFSET.family.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var familySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.family.v) }
  ///  Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
  ///  Example: /// Example: Pressure Fed
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var cycleType: String? { let o = _accessor.offset(VTOFFSET.cycleType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cycleTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cycleType.v) }
  ///  Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).
  ///  Example: /// Example: Electric
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var characteristicType: String? { let o = _accessor.offset(VTOFFSET.characteristicType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var characteristicTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.characteristicType.v) }
  ///  Organization ID of the engine manufacturer.
  ///  Example: /// Example: MANUFACTURERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var manufacturerOrgId: String? { let o = _accessor.offset(VTOFFSET.manufacturerOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var manufacturerOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.manufacturerOrgId.v) }
  ///  Launch engine specific impulse in seconds.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var specificImpulse: Double { let o = _accessor.offset(VTOFFSET.specificImpulse.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Launch engine maximum burn time in seconds.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var burnTime: Double { let o = _accessor.offset(VTOFFSET.burnTime.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Engine maximum thrust at sea level in Kilo-Newtons.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var seaLevelThrust: Double { let o = _accessor.offset(VTOFFSET.seaLevelThrust.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Engine maximum thrust in a vacuum in Kilo-Newtons.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var vacuumThrust: Double { let o = _accessor.offset(VTOFFSET.vacuumThrust.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Engine chamber pressure in bars.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var chamberPressure: Double { let o = _accessor.offset(VTOFFSET.chamberPressure.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Engine nozzle expansion ratio.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var nozzleExpansionRatio: Double { let o = _accessor.offset(VTOFFSET.nozzleExpansionRatio.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Engine maximum number of firings.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var maxFirings: Int32 { let o = _accessor.offset(VTOFFSET.maxFirings.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).
  ///  Example: /// Example: Liquid
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var propellant: String? { let o = _accessor.offset(VTOFFSET.propellant.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var propellantSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.propellant.v) }
  ///  Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).
  ///  Example: /// Example: Liquid Oxygen
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var oxidizer: String? { let o = _accessor.offset(VTOFFSET.oxidizer.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var oxidizerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.oxidizer.v) }
  ///  Notes/Description of the engine.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: EngineDetails_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : EngineDetails_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startEngineDetails_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 23) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(idEngine: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idEngine, at: VTOFFSET.idEngine.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(family: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: family, at: VTOFFSET.family.p) }
  public static func add(cycleType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cycleType, at: VTOFFSET.cycleType.p) }
  public static func add(characteristicType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: characteristicType, at: VTOFFSET.characteristicType.p) }
  public static func add(manufacturerOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: manufacturerOrgId, at: VTOFFSET.manufacturerOrgId.p) }
  public static func add(specificImpulse: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: specificImpulse, def: 0.0, at: VTOFFSET.specificImpulse.p) }
  public static func add(burnTime: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: burnTime, def: 0.0, at: VTOFFSET.burnTime.p) }
  public static func add(seaLevelThrust: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: seaLevelThrust, def: 0.0, at: VTOFFSET.seaLevelThrust.p) }
  public static func add(vacuumThrust: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vacuumThrust, def: 0.0, at: VTOFFSET.vacuumThrust.p) }
  public static func add(chamberPressure: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: chamberPressure, def: 0.0, at: VTOFFSET.chamberPressure.p) }
  public static func add(nozzleExpansionRatio: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nozzleExpansionRatio, def: 0.0, at: VTOFFSET.nozzleExpansionRatio.p) }
  public static func add(maxFirings: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxFirings, def: 0, at: VTOFFSET.maxFirings.p) }
  public static func add(propellant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: propellant, at: VTOFFSET.propellant.p) }
  public static func add(oxidizer: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: oxidizer, at: VTOFFSET.oxidizer.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: EngineDetails_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endEngineDetails_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEngineDetails_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    idEngineOffset idEngine: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    familyOffset family: Offset = Offset(),
    cycleTypeOffset cycleType: Offset = Offset(),
    characteristicTypeOffset characteristicType: Offset = Offset(),
    manufacturerOrgIdOffset manufacturerOrgId: Offset = Offset(),
    specificImpulse: Double = 0.0,
    burnTime: Double = 0.0,
    seaLevelThrust: Double = 0.0,
    vacuumThrust: Double = 0.0,
    chamberPressure: Double = 0.0,
    nozzleExpansionRatio: Double = 0.0,
    maxFirings: Int32 = 0,
    propellantOffset propellant: Offset = Offset(),
    oxidizerOffset oxidizer: Offset = Offset(),
    notesOffset notes: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: EngineDetails_Abridged_dataMode_Enum = .real
  ) -> Offset {
    let __start = EngineDetails_Abridged.startEngineDetails_Abridged(&fbb)
    EngineDetails_Abridged.add(id: id, &fbb)
    EngineDetails_Abridged.add(idEngine: idEngine, &fbb)
    EngineDetails_Abridged.add(classificationMarking: classificationMarking, &fbb)
    EngineDetails_Abridged.add(family: family, &fbb)
    EngineDetails_Abridged.add(cycleType: cycleType, &fbb)
    EngineDetails_Abridged.add(characteristicType: characteristicType, &fbb)
    EngineDetails_Abridged.add(manufacturerOrgId: manufacturerOrgId, &fbb)
    EngineDetails_Abridged.add(specificImpulse: specificImpulse, &fbb)
    EngineDetails_Abridged.add(burnTime: burnTime, &fbb)
    EngineDetails_Abridged.add(seaLevelThrust: seaLevelThrust, &fbb)
    EngineDetails_Abridged.add(vacuumThrust: vacuumThrust, &fbb)
    EngineDetails_Abridged.add(chamberPressure: chamberPressure, &fbb)
    EngineDetails_Abridged.add(nozzleExpansionRatio: nozzleExpansionRatio, &fbb)
    EngineDetails_Abridged.add(maxFirings: maxFirings, &fbb)
    EngineDetails_Abridged.add(propellant: propellant, &fbb)
    EngineDetails_Abridged.add(oxidizer: oxidizer, &fbb)
    EngineDetails_Abridged.add(notes: notes, &fbb)
    EngineDetails_Abridged.add(createdAt: createdAt, &fbb)
    EngineDetails_Abridged.add(createdBy: createdBy, &fbb)
    EngineDetails_Abridged.add(source: source, &fbb)
    EngineDetails_Abridged.add(origin: origin, &fbb)
    EngineDetails_Abridged.add(origNetwork: origNetwork, &fbb)
    EngineDetails_Abridged.add(dataMode: dataMode, &fbb)
    return EngineDetails_Abridged.endEngineDetails_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idEngine.p, fieldName: "idEngine", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.family.p, fieldName: "family", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cycleType.p, fieldName: "cycleType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.characteristicType.p, fieldName: "characteristicType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.manufacturerOrgId.p, fieldName: "manufacturerOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.specificImpulse.p, fieldName: "specificImpulse", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.burnTime.p, fieldName: "burnTime", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.seaLevelThrust.p, fieldName: "seaLevelThrust", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.vacuumThrust.p, fieldName: "vacuumThrust", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.chamberPressure.p, fieldName: "chamberPressure", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.nozzleExpansionRatio.p, fieldName: "nozzleExpansionRatio", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxFirings.p, fieldName: "maxFirings", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.propellant.p, fieldName: "propellant", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.oxidizer.p, fieldName: "oxidizer", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: EngineDetails_Abridged_dataMode_Enum.self)
    _v.finish()
  }
}

