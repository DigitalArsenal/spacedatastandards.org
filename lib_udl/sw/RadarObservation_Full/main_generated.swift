// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum RadarObservation_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: RadarObservation_Full_dataMode_Enum { return .exercise }
  public static var min: RadarObservation_Full_dataMode_Enum { return .real }
}


public enum RadarObservation_Full_senReferenceFrame_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case j2000 = 0
  ///  No description available.
  case efgTdr = 1
  ///  No description available.
  case ecrEcef = 2
  ///  No description available.
  case teme = 3
  ///  No description available.
  case itrf = 4
  ///  No description available.
  case gcrf = 5

  public static var max: RadarObservation_Full_senReferenceFrame_Enum { return .gcrf }
  public static var min: RadarObservation_Full_senReferenceFrame_Enum { return .j2000 }
}


///  /// Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
public struct RadarObservation_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "RADA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: RadarObservation_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case obTime = 8
    case idOnOrbit = 10
    case idSensor = 12
    case satNo = 14
    case taskId = 16
    case transactionId = 18
    case trackId = 20
    case obPosition = 22
    case origObjectId = 24
    case origSensorId = 26
    case uct = 28
    case azimuth = 30
    case azimuthUnc = 32
    case azimuthBias = 34
    case azimuthRate = 36
    case elevation = 38
    case elevationUnc = 40
    case elevationBias = 42
    case elevationRate = 44
    case range = 46
    case rangeAccel = 48
    case rangeAccelUnc = 50
    case rangeUnc = 52
    case rangeBias = 54
    case rangeRate = 56
    case rangeRateUnc = 58
    case doppler = 60
    case dopplerUnc = 62
    case ra = 64
    case declination = 66
    case x = 68
    case y = 70
    case z = 72
    case xvel = 74
    case yvel = 76
    case zvel = 78
    case senx = 80
    case seny = 82
    case senz = 84
    case rcs = 86
    case rcsUnc = 88
    case orthogonalRcs = 90
    case orthogonalRcsUnc = 92
    case snr = 94
    case beam = 96
    case timingBias = 98
    case rawFileUri = 100
    case source = 102
    case origin = 104
    case dataMode = 106
    case tags = 108
    case createdAt = 110
    case createdBy = 112
    case onOrbit = 114
    case senReferenceFrame = 116
    case descriptor = 118
    case origNetwork = 120
    case sourceDl = 122
    case type = 124
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: RADAROBSERVATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Ob detection time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var obTime: String? { let o = _accessor.offset(VTOFFSET.obTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obTime.v) }
  ///  Unique identifier of the target on-orbit object, if correlated.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Unique identifier of the reporting sensor.
  ///  Example: /// Example: SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional identifier to indicate the specific tasking which produced this observation.
  ///  Example: /// Example: TASK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var taskId: String? { let o = _accessor.offset(VTOFFSET.taskId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskId.v) }
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var transactionId: String? { let o = _accessor.offset(VTOFFSET.transactionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transactionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transactionId.v) }
  ///  Optional identifier of the track to which this observation belongs.
  ///  Example: /// Example: TRACK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var trackId: String? { let o = _accessor.offset(VTOFFSET.trackId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var trackIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.trackId.v) }
  ///  The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
  ///  Example: /// Example: FIRST
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var obPosition: String? { let o = _accessor.offset(VTOFFSET.obPosition.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obPositionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obPosition.v) }
  ///  Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origSensorId: String? { let o = _accessor.offset(VTOFFSET.origSensorId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSensorIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSensorId.v) }
  ///  Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var uct: Bool { let o = _accessor.offset(VTOFFSET.uct.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  azimuth angle in degrees and topocentric frame.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var azimuth: Double { let o = _accessor.offset(VTOFFSET.azimuth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var azimuthUnc: Double { let o = _accessor.offset(VTOFFSET.azimuthUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor azimuth angle bias in degrees.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var azimuthBias: Double { let o = _accessor.offset(VTOFFSET.azimuthBias.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Rate of change of the line of sight azimuth in degrees per second.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var azimuthRate: Double { let o = _accessor.offset(VTOFFSET.azimuthRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line of sight elevation in degrees and topocentric frame.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var elevation: Double { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var elevationUnc: Double { let o = _accessor.offset(VTOFFSET.elevationUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor elevation bias in degrees.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var elevationBias: Double { let o = _accessor.offset(VTOFFSET.elevationBias.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Rate of change of the line of sight elevation in degrees per second.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var elevationRate: Double { let o = _accessor.offset(VTOFFSET.elevationRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Target range in km.
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  public var range: Double { let o = _accessor.offset(VTOFFSET.range.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Range accelaration in km/s2.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var rangeAccel: Double { let o = _accessor.offset(VTOFFSET.rangeAccel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var rangeAccelUnc: Double { let o = _accessor.offset(VTOFFSET.rangeAccelUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the range measurement, in kilometers.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var rangeUnc: Double { let o = _accessor.offset(VTOFFSET.rangeUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor range bias in km.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var rangeBias: Double { let o = _accessor.offset(VTOFFSET.rangeBias.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Rate of change of the line of sight range in km/sec.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var rangeRate: Double { let o = _accessor.offset(VTOFFSET.rangeRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the range rate measurement, in kilometers/second.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var rangeRateUnc: Double { let o = _accessor.offset(VTOFFSET.rangeRateUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Corrected doppler measurement in meters per second.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var doppler: Double { let o = _accessor.offset(VTOFFSET.doppler.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the corrected doppler measurement, in meters/second.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var dopplerUnc: Double { let o = _accessor.offset(VTOFFSET.dopplerUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line of sight right ascension in degrees and J2000 coordinate frame.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var ra: Double { let o = _accessor.offset(VTOFFSET.ra.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line of sight declination angle in degrees and J2000 coordinate frame.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var declination: Double { let o = _accessor.offset(VTOFFSET.declination.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  X position of target in km in J2000 coordinate frame.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  public var x: Double { let o = _accessor.offset(VTOFFSET.x.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Y position of target in km in J2000 coordinate frame.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  public var y: Double { let o = _accessor.offset(VTOFFSET.y.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Z position of target in km in J2000 coordinate frame.
  ///  Example: /// Example: 50.23
  ///  Constraints: No constraints specified.
  public var z: Double { let o = _accessor.offset(VTOFFSET.z.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  X velocity of target in km/sec in J2000 coordinate frame.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var xvel: Double { let o = _accessor.offset(VTOFFSET.xvel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Y velocity of target in km/sec in J2000 coordinate frame.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  public var yvel: Double { let o = _accessor.offset(VTOFFSET.yvel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Z velocity of target in km/sec in J2000 coordinate frame.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  public var zvel: Double { let o = _accessor.offset(VTOFFSET.zvel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var senx: Double { let o = _accessor.offset(VTOFFSET.senx.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
  ///  Example: /// Example: 40.23
  ///  Constraints: No constraints specified.
  public var seny: Double { let o = _accessor.offset(VTOFFSET.seny.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
  ///  Example: /// Example: 35.23
  ///  Constraints: No constraints specified.
  public var senz: Double { let o = _accessor.offset(VTOFFSET.senz.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Radar cross section in meters squared for polarization principal.
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  public var rcs: Double { let o = _accessor.offset(VTOFFSET.rcs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var rcsUnc: Double { let o = _accessor.offset(VTOFFSET.rcsUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Radar cross section in meters squared for orthogonal polarization.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var orthogonalRcs: Double { let o = _accessor.offset(VTOFFSET.orthogonalRcs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var orthogonalRcsUnc: Double { let o = _accessor.offset(VTOFFSET.orthogonalRcsUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Signal to noise ratio, in dB.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var snr: Double { let o = _accessor.offset(VTOFFSET.snr.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  ID of the beam that produced this observation.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var beam: Double { let o = _accessor.offset(VTOFFSET.beam.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor timing bias in seconds.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var timingBias: Double { let o = _accessor.offset(VTOFFSET.timingBias.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: rawFileURI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var rawFileUri: String? { let o = _accessor.offset(VTOFFSET.rawFileUri.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rawFileUriSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rawFileUri.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: RadarObservation_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : RadarObservation_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  public var hasTags: Bool { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? false : true }
  public var tagsCount: Int32 { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func tags(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var onOrbit: String? { let o = _accessor.offset(VTOFFSET.onOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var onOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.onOrbit.v) }
  ///  The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var senReferenceFrame: RadarObservation_Full_senReferenceFrame_Enum { let o = _accessor.offset(VTOFFSET.senReferenceFrame.v); return o == 0 ? .j2000 : RadarObservation_Full_senReferenceFrame_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .j2000 }
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: descriptor
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var descriptor: String? { let o = _accessor.offset(VTOFFSET.descriptor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.descriptor.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
  ///  Example: /// Example: RADAR
  ///  Constraints: No constraints specified.
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  public static func startRadarObservation_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 61) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(obTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obTime, at: VTOFFSET.obTime.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(taskId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskId, at: VTOFFSET.taskId.p) }
  public static func add(transactionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transactionId, at: VTOFFSET.transactionId.p) }
  public static func add(trackId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trackId, at: VTOFFSET.trackId.p) }
  public static func add(obPosition: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obPosition, at: VTOFFSET.obPosition.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(origSensorId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSensorId, at: VTOFFSET.origSensorId.p) }
  public static func add(uct: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: uct, def: false,
   at: VTOFFSET.uct.p) }
  public static func add(azimuth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuth, def: 0.0, at: VTOFFSET.azimuth.p) }
  public static func add(azimuthUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuthUnc, def: 0.0, at: VTOFFSET.azimuthUnc.p) }
  public static func add(azimuthBias: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuthBias, def: 0.0, at: VTOFFSET.azimuthBias.p) }
  public static func add(azimuthRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuthRate, def: 0.0, at: VTOFFSET.azimuthRate.p) }
  public static func add(elevation: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func add(elevationUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevationUnc, def: 0.0, at: VTOFFSET.elevationUnc.p) }
  public static func add(elevationBias: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevationBias, def: 0.0, at: VTOFFSET.elevationBias.p) }
  public static func add(elevationRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevationRate, def: 0.0, at: VTOFFSET.elevationRate.p) }
  public static func add(range: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: range, def: 0.0, at: VTOFFSET.range.p) }
  public static func add(rangeAccel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rangeAccel, def: 0.0, at: VTOFFSET.rangeAccel.p) }
  public static func add(rangeAccelUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rangeAccelUnc, def: 0.0, at: VTOFFSET.rangeAccelUnc.p) }
  public static func add(rangeUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rangeUnc, def: 0.0, at: VTOFFSET.rangeUnc.p) }
  public static func add(rangeBias: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rangeBias, def: 0.0, at: VTOFFSET.rangeBias.p) }
  public static func add(rangeRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rangeRate, def: 0.0, at: VTOFFSET.rangeRate.p) }
  public static func add(rangeRateUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rangeRateUnc, def: 0.0, at: VTOFFSET.rangeRateUnc.p) }
  public static func add(doppler: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: doppler, def: 0.0, at: VTOFFSET.doppler.p) }
  public static func add(dopplerUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dopplerUnc, def: 0.0, at: VTOFFSET.dopplerUnc.p) }
  public static func add(ra: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ra, def: 0.0, at: VTOFFSET.ra.p) }
  public static func add(declination: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: declination, def: 0.0, at: VTOFFSET.declination.p) }
  public static func add(x: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: x, def: 0.0, at: VTOFFSET.x.p) }
  public static func add(y: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: y, def: 0.0, at: VTOFFSET.y.p) }
  public static func add(z: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: z, def: 0.0, at: VTOFFSET.z.p) }
  public static func add(xvel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: xvel, def: 0.0, at: VTOFFSET.xvel.p) }
  public static func add(yvel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: yvel, def: 0.0, at: VTOFFSET.yvel.p) }
  public static func add(zvel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: zvel, def: 0.0, at: VTOFFSET.zvel.p) }
  public static func add(senx: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senx, def: 0.0, at: VTOFFSET.senx.p) }
  public static func add(seny: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: seny, def: 0.0, at: VTOFFSET.seny.p) }
  public static func add(senz: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senz, def: 0.0, at: VTOFFSET.senz.p) }
  public static func add(rcs: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rcs, def: 0.0, at: VTOFFSET.rcs.p) }
  public static func add(rcsUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rcsUnc, def: 0.0, at: VTOFFSET.rcsUnc.p) }
  public static func add(orthogonalRcs: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: orthogonalRcs, def: 0.0, at: VTOFFSET.orthogonalRcs.p) }
  public static func add(orthogonalRcsUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: orthogonalRcsUnc, def: 0.0, at: VTOFFSET.orthogonalRcsUnc.p) }
  public static func add(snr: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: snr, def: 0.0, at: VTOFFSET.snr.p) }
  public static func add(beam: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: beam, def: 0.0, at: VTOFFSET.beam.p) }
  public static func add(timingBias: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: timingBias, def: 0.0, at: VTOFFSET.timingBias.p) }
  public static func add(rawFileUri: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rawFileUri, at: VTOFFSET.rawFileUri.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: RadarObservation_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func addVectorOf(tags: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tags, at: VTOFFSET.tags.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(onOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: onOrbit, at: VTOFFSET.onOrbit.p) }
  public static func add(senReferenceFrame: RadarObservation_Full_senReferenceFrame_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senReferenceFrame.rawValue, def: 0, at: VTOFFSET.senReferenceFrame.p) }
  public static func add(descriptor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: descriptor, at: VTOFFSET.descriptor.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func endRadarObservation_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createRadarObservation_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    obTimeOffset obTime: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    satNo: Int32 = 0,
    taskIdOffset taskId: Offset = Offset(),
    transactionIdOffset transactionId: Offset = Offset(),
    trackIdOffset trackId: Offset = Offset(),
    obPositionOffset obPosition: Offset = Offset(),
    origObjectIdOffset origObjectId: Offset = Offset(),
    origSensorIdOffset origSensorId: Offset = Offset(),
    uct: Bool = false,
    azimuth: Double = 0.0,
    azimuthUnc: Double = 0.0,
    azimuthBias: Double = 0.0,
    azimuthRate: Double = 0.0,
    elevation: Double = 0.0,
    elevationUnc: Double = 0.0,
    elevationBias: Double = 0.0,
    elevationRate: Double = 0.0,
    range: Double = 0.0,
    rangeAccel: Double = 0.0,
    rangeAccelUnc: Double = 0.0,
    rangeUnc: Double = 0.0,
    rangeBias: Double = 0.0,
    rangeRate: Double = 0.0,
    rangeRateUnc: Double = 0.0,
    doppler: Double = 0.0,
    dopplerUnc: Double = 0.0,
    ra: Double = 0.0,
    declination: Double = 0.0,
    x: Double = 0.0,
    y: Double = 0.0,
    z: Double = 0.0,
    xvel: Double = 0.0,
    yvel: Double = 0.0,
    zvel: Double = 0.0,
    senx: Double = 0.0,
    seny: Double = 0.0,
    senz: Double = 0.0,
    rcs: Double = 0.0,
    rcsUnc: Double = 0.0,
    orthogonalRcs: Double = 0.0,
    orthogonalRcsUnc: Double = 0.0,
    snr: Double = 0.0,
    beam: Double = 0.0,
    timingBias: Double = 0.0,
    rawFileUriOffset rawFileUri: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: RadarObservation_Full_dataMode_Enum = .real,
    tagsVectorOffset tags: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    onOrbitOffset onOrbit: Offset = Offset(),
    senReferenceFrame: RadarObservation_Full_senReferenceFrame_Enum = .j2000,
    descriptorOffset descriptor: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    typeOffset type: Offset = Offset()
  ) -> Offset {
    let __start = RadarObservation_Full.startRadarObservation_Full(&fbb)
    RadarObservation_Full.add(id: id, &fbb)
    RadarObservation_Full.add(classificationMarking: classificationMarking, &fbb)
    RadarObservation_Full.add(obTime: obTime, &fbb)
    RadarObservation_Full.add(idOnOrbit: idOnOrbit, &fbb)
    RadarObservation_Full.add(idSensor: idSensor, &fbb)
    RadarObservation_Full.add(satNo: satNo, &fbb)
    RadarObservation_Full.add(taskId: taskId, &fbb)
    RadarObservation_Full.add(transactionId: transactionId, &fbb)
    RadarObservation_Full.add(trackId: trackId, &fbb)
    RadarObservation_Full.add(obPosition: obPosition, &fbb)
    RadarObservation_Full.add(origObjectId: origObjectId, &fbb)
    RadarObservation_Full.add(origSensorId: origSensorId, &fbb)
    RadarObservation_Full.add(uct: uct, &fbb)
    RadarObservation_Full.add(azimuth: azimuth, &fbb)
    RadarObservation_Full.add(azimuthUnc: azimuthUnc, &fbb)
    RadarObservation_Full.add(azimuthBias: azimuthBias, &fbb)
    RadarObservation_Full.add(azimuthRate: azimuthRate, &fbb)
    RadarObservation_Full.add(elevation: elevation, &fbb)
    RadarObservation_Full.add(elevationUnc: elevationUnc, &fbb)
    RadarObservation_Full.add(elevationBias: elevationBias, &fbb)
    RadarObservation_Full.add(elevationRate: elevationRate, &fbb)
    RadarObservation_Full.add(range: range, &fbb)
    RadarObservation_Full.add(rangeAccel: rangeAccel, &fbb)
    RadarObservation_Full.add(rangeAccelUnc: rangeAccelUnc, &fbb)
    RadarObservation_Full.add(rangeUnc: rangeUnc, &fbb)
    RadarObservation_Full.add(rangeBias: rangeBias, &fbb)
    RadarObservation_Full.add(rangeRate: rangeRate, &fbb)
    RadarObservation_Full.add(rangeRateUnc: rangeRateUnc, &fbb)
    RadarObservation_Full.add(doppler: doppler, &fbb)
    RadarObservation_Full.add(dopplerUnc: dopplerUnc, &fbb)
    RadarObservation_Full.add(ra: ra, &fbb)
    RadarObservation_Full.add(declination: declination, &fbb)
    RadarObservation_Full.add(x: x, &fbb)
    RadarObservation_Full.add(y: y, &fbb)
    RadarObservation_Full.add(z: z, &fbb)
    RadarObservation_Full.add(xvel: xvel, &fbb)
    RadarObservation_Full.add(yvel: yvel, &fbb)
    RadarObservation_Full.add(zvel: zvel, &fbb)
    RadarObservation_Full.add(senx: senx, &fbb)
    RadarObservation_Full.add(seny: seny, &fbb)
    RadarObservation_Full.add(senz: senz, &fbb)
    RadarObservation_Full.add(rcs: rcs, &fbb)
    RadarObservation_Full.add(rcsUnc: rcsUnc, &fbb)
    RadarObservation_Full.add(orthogonalRcs: orthogonalRcs, &fbb)
    RadarObservation_Full.add(orthogonalRcsUnc: orthogonalRcsUnc, &fbb)
    RadarObservation_Full.add(snr: snr, &fbb)
    RadarObservation_Full.add(beam: beam, &fbb)
    RadarObservation_Full.add(timingBias: timingBias, &fbb)
    RadarObservation_Full.add(rawFileUri: rawFileUri, &fbb)
    RadarObservation_Full.add(source: source, &fbb)
    RadarObservation_Full.add(origin: origin, &fbb)
    RadarObservation_Full.add(dataMode: dataMode, &fbb)
    RadarObservation_Full.addVectorOf(tags: tags, &fbb)
    RadarObservation_Full.add(createdAt: createdAt, &fbb)
    RadarObservation_Full.add(createdBy: createdBy, &fbb)
    RadarObservation_Full.add(onOrbit: onOrbit, &fbb)
    RadarObservation_Full.add(senReferenceFrame: senReferenceFrame, &fbb)
    RadarObservation_Full.add(descriptor: descriptor, &fbb)
    RadarObservation_Full.add(origNetwork: origNetwork, &fbb)
    RadarObservation_Full.add(sourceDl: sourceDl, &fbb)
    RadarObservation_Full.add(type: type, &fbb)
    return RadarObservation_Full.endRadarObservation_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obTime.p, fieldName: "obTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.taskId.p, fieldName: "taskId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.transactionId.p, fieldName: "transactionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.trackId.p, fieldName: "trackId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obPosition.p, fieldName: "obPosition", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSensorId.p, fieldName: "origSensorId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.uct.p, fieldName: "uct", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.azimuth.p, fieldName: "azimuth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.azimuthUnc.p, fieldName: "azimuthUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.azimuthBias.p, fieldName: "azimuthBias", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.azimuthRate.p, fieldName: "azimuthRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevationUnc.p, fieldName: "elevationUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevationBias.p, fieldName: "elevationBias", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevationRate.p, fieldName: "elevationRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.range.p, fieldName: "range", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rangeAccel.p, fieldName: "rangeAccel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rangeAccelUnc.p, fieldName: "rangeAccelUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rangeUnc.p, fieldName: "rangeUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rangeBias.p, fieldName: "rangeBias", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rangeRate.p, fieldName: "rangeRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rangeRateUnc.p, fieldName: "rangeRateUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.doppler.p, fieldName: "doppler", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dopplerUnc.p, fieldName: "dopplerUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ra.p, fieldName: "ra", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.declination.p, fieldName: "declination", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.x.p, fieldName: "x", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.y.p, fieldName: "y", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.z.p, fieldName: "z", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.xvel.p, fieldName: "xvel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.yvel.p, fieldName: "yvel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.zvel.p, fieldName: "zvel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senx.p, fieldName: "senx", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.seny.p, fieldName: "seny", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senz.p, fieldName: "senz", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rcs.p, fieldName: "rcs", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rcsUnc.p, fieldName: "rcsUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.orthogonalRcs.p, fieldName: "orthogonalRcs", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.orthogonalRcsUnc.p, fieldName: "orthogonalRcsUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.snr.p, fieldName: "snr", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.beam.p, fieldName: "beam", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.timingBias.p, fieldName: "timingBias", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rawFileUri.p, fieldName: "rawFileUri", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: RadarObservation_Full_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.tags.p, fieldName: "tags", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.onOrbit.p, fieldName: "onOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.senReferenceFrame.p, fieldName: "senReferenceFrame", required: false, type: RadarObservation_Full_senReferenceFrame_Enum.self)
    try _v.visit(field: VTOFFSET.descriptor.p, fieldName: "descriptor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

