// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum AircraftStatus_Ingest_airToAirStatus_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case operational = 0
  ///  No description available.
  case nonOperational = 1
  ///  No description available.
  case off = 2

  public static var max: AircraftStatus_Ingest_airToAirStatus_Enum { return .off }
  public static var min: AircraftStatus_Ingest_airToAirStatus_Enum { return .operational }
}


public enum AircraftStatus_Ingest_airToGroundStatus_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case operational = 0
  ///  No description available.
  case nonOperational = 1
  ///  No description available.
  case off = 2

  public static var max: AircraftStatus_Ingest_airToGroundStatus_Enum { return .off }
  public static var min: AircraftStatus_Ingest_airToGroundStatus_Enum { return .operational }
}


public enum AircraftStatus_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: AircraftStatus_Ingest_dataMode_Enum { return .exercise }
  public static var min: AircraftStatus_Ingest_dataMode_Enum { return .real }
}


///  /// Aircraft readiness and status data. Contains the dynamic data associated with the specific aircraft status, either in-flight or on-ground, including remaining fuel, mission readiness, and inventory, etc.
public struct AircraftStatus_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AircraftStatus_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idAircraft = 8
    case altAircraftId = 10
    case currentState = 12
    case idAirfield = 14
    case geoLoc = 16
    case previousIcao = 18
    case currentIcao = 20
    case nextIcao = 22
    case flightPhase = 24
    case taStartTime = 26
    case earliestTaendTime = 28
    case missionReadiness = 30
    case fuel = 32
    case fuelFunction = 34
    case gunCapable = 36
    case gunRdsType = 38
    case gunRdsMin = 40
    case gunRdsMax = 42
    case airToAirStatus = 44
    case airToGroundStatus = 46
    case inventory = 48
    case inventoryMin = 50
    case inventoryMax = 52
    case unavailableSys = 54
    case additionalSys = 56
    case notes = 58
    case mxRemark = 60
    case maintStatus = 62
    case maintStatusDriver = 64
    case maintPriority = 66
    case alphaStatusCode = 68
    case maintStatusUpdate = 70
    case lastInspectionDate = 72
    case maintPoc = 74
    case groundStatus = 76
    case contaminationStatus = 78
    case fuelStatus = 80
    case lastUpdatedBy = 82
    case troubleshootEtic = 84
    case etic = 86
    case parkLocation = 88
    case parkLocationSystem = 90
    case idPoi = 92
    case createdAt = 94
    case createdBy = 96
    case sourceDl = 98
    case source = 100
    case origin = 102
    case dataMode = 104
    case origNetwork = 106
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the aircraft.
  ///  Example: /// Example: 29232269-e4c2-45c9-aa21-039a33209340
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idAircraft: String? { let o = _accessor.offset(VTOFFSET.idAircraft.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idAircraftSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idAircraft.v) }
  ///  Alternate Aircraft Identifier provided by source.
  ///  Example: /// Example: ORIG-AIRCRAFT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var altAircraftId: String? { let o = _accessor.offset(VTOFFSET.altAircraftId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altAircraftIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altAircraftId.v) }
  ///  The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED, AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).
  ///  Example: /// Example: AVAILABLE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var currentState: String? { let o = _accessor.offset(VTOFFSET.currentState.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var currentStateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.currentState.v) }
  ///  If not airborne, the unique identifier of the installation currently hosting the aircraft.
  ///  Example: /// Example: b89430e3-97d9-408c-9c89-fd3840c4b84d
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idAirfield: String? { let o = _accessor.offset(VTOFFSET.idAirfield.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idAirfieldSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idAirfield.v) }
  ///  US Air Force geographic location code of the airfield where the aircraft is located.
  ///  Example: /// Example: AJJY
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var geoLoc: String? { let o = _accessor.offset(VTOFFSET.geoLoc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var geoLocSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.geoLoc.v) }
  ///  The International Civil Aviation Organization (ICAO) code at which this aircraft was previously located.
  ///  Example: /// Example: EGLL
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var previousIcao: String? { let o = _accessor.offset(VTOFFSET.previousIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var previousIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.previousIcao.v) }
  ///  The International Civil Aviation Organization (ICAO) code at which this aircraft is currently located or has most recently departed, if airborne.
  ///  Example: /// Example: KCHS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var currentIcao: String? { let o = _accessor.offset(VTOFFSET.currentIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var currentIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.currentIcao.v) }
  ///  The International Civil Aviation Organization (ICAO) code of the next destination of this aircraft.
  ///  Example: /// Example: PHNL
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var nextIcao: String? { let o = _accessor.offset(VTOFFSET.nextIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nextIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.nextIcao.v) }
  ///  Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the aircraft.
  ///  Example: /// Example: Landing
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var flightPhase: String? { let o = _accessor.offset(VTOFFSET.flightPhase.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var flightPhaseSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.flightPhase.v) }
  ///  The turnaround start time, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var taStartTime: String? { let o = _accessor.offset(VTOFFSET.taStartTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taStartTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taStartTime.v) }
  ///  The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var earliestTaendTime: String? { let o = _accessor.offset(VTOFFSET.earliestTaendTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var earliestTaendTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.earliestTaendTime.v) }
  ///  The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
  ///  Example: /// Example: ABLE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var missionReadiness: String? { let o = _accessor.offset(VTOFFSET.missionReadiness.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var missionReadinessSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.missionReadiness.v) }
  ///  The mass of fuel remaining on the aircraft, in kilograms.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var fuel: Int32 { let o = _accessor.offset(VTOFFSET.fuel.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Used in conjunction with the fuel field to indicate either burnable or offload fuel.
  ///  Example: /// Example: Burn
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var fuelFunction: String? { let o = _accessor.offset(VTOFFSET.fuelFunction.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fuelFunctionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fuelFunction.v) }
  ///  Flag indicating that the aircraft is capable of making at least one gun pass.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var gunCapable: Bool { let o = _accessor.offset(VTOFFSET.gunCapable.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
  ///  Example: /// Example: 7.62 MM
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var gunRdsType: String? { let o = _accessor.offset(VTOFFSET.gunRdsType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var gunRdsTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.gunRdsType.v) }
  ///  The lower bound of the estimated number of gun rounds available.
  ///  Example: /// Example: 150
  ///  Constraints: No constraints specified.
  public var gunRdsMin: Int32 { let o = _accessor.offset(VTOFFSET.gunRdsMin.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The upper bound of the estimated number of gun rounds available.
  ///  Example: /// Example: 550
  ///  Constraints: No constraints specified.
  public var gunRdsMax: Int32 { let o = _accessor.offset(VTOFFSET.gunRdsMax.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
  ///  Example: /// Example: OPERATIONAL
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var airToAirStatus: AircraftStatus_Ingest_airToAirStatus_Enum { let o = _accessor.offset(VTOFFSET.airToAirStatus.v); return o == 0 ? .operational : AircraftStatus_Ingest_airToAirStatus_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .operational }
  ///  The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
  ///  Example: /// Example: OPERATIONAL
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var airToGroundStatus: AircraftStatus_Ingest_airToGroundStatus_Enum { let o = _accessor.offset(VTOFFSET.airToGroundStatus.v); return o == 0 ? .operational : AircraftStatus_Ingest_airToGroundStatus_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .operational }
  ///  Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9 SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific/store type designations.  This array must be the same length as inventoryMin and inventoryMax.
  ///  Example: /// Example: ['AIM-9 SIDEWINDER', 'AIM-120 AMRAAM']
  ///  Constraints: No constraints specified.
  public var hasInventory: Bool { let o = _accessor.offset(VTOFFSET.inventory.v); return o == 0 ? false : true }
  public var inventoryCount: Int32 { let o = _accessor.offset(VTOFFSET.inventory.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func inventory(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.inventory.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the lower bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMax.
  ///  Example: /// Example: [1, 2]
  ///  Constraints: No constraints specified.
  public var hasInventoryMin: Bool { let o = _accessor.offset(VTOFFSET.inventoryMin.v); return o == 0 ? false : true }
  public var inventoryMinCount: Int32 { let o = _accessor.offset(VTOFFSET.inventoryMin.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func inventoryMin(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.inventoryMin.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the upper bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMin.
  ///  Example: /// Example: [2, 2]
  ///  Constraints: No constraints specified.
  public var hasInventoryMax: Bool { let o = _accessor.offset(VTOFFSET.inventoryMax.v); return o == 0 ? false : true }
  public var inventoryMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.inventoryMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func inventoryMax(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.inventoryMax.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  List of unavailable systems that would normally be on this aircraft.
  ///  Example: /// Example: ['CMDS', 'AOC']
  ///  Constraints: No constraints specified.
  public var hasUnavailableSys: Bool { let o = _accessor.offset(VTOFFSET.unavailableSys.v); return o == 0 ? false : true }
  public var unavailableSysCount: Int32 { let o = _accessor.offset(VTOFFSET.unavailableSys.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func unavailableSys(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.unavailableSys.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  List of additional operational systems on this aircraft beyond what is normally available.
  ///  Example: /// Example: ['ATOMS', 'TUDL', 'BLOS1']
  ///  Constraints: No constraints specified.
  public var hasAdditionalSys: Bool { let o = _accessor.offset(VTOFFSET.additionalSys.v); return o == 0 ? false : true }
  public var additionalSysCount: Int32 { let o = _accessor.offset(VTOFFSET.additionalSys.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func additionalSys(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.additionalSys.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Optional notes/comments concerning this aircraft status.
  ///  Example: /// Example: Some notes for aircraft A
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  ///  Maintenance pacing remarks assocociated with this aircraft.
  ///  Example: /// Example: COM2 INOP
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var mxRemark: String? { let o = _accessor.offset(VTOFFSET.mxRemark.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var mxRemarkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.mxRemark.v) }
  ///  The maintenance status of the aircraft.
  ///  Example: /// Example: maintenance status
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var maintStatus: String? { let o = _accessor.offset(VTOFFSET.maintStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var maintStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.maintStatus.v) }
  ///  Indicates the maintenance discrepancy that drives the current maintenance status.
  ///  Example: /// Example: SCREW STUCK IN LEFT NLG TIRE
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var maintStatusDriver: String? { let o = _accessor.offset(VTOFFSET.maintStatusDriver.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var maintStatusDriverSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.maintStatusDriver.v) }
  ///  Indicates the priority of the maintenance effort.
  ///  Example: /// Example: 1
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var maintPriority: String? { let o = _accessor.offset(VTOFFSET.maintPriority.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var maintPrioritySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.maintPriority.v) }
  ///  Aircraft alpha status code that indicates the aircraft maintenance status estimated by the pilot.
  ///  Example: /// Example: A2
  ///  Constraints: Minimum length = 0, Maximum length = 2
  public var alphaStatusCode: String? { let o = _accessor.offset(VTOFFSET.alphaStatusCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var alphaStatusCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.alphaStatusCode.v) }
  ///  The time of the last maintenance status update, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var maintStatusUpdate: String? { let o = _accessor.offset(VTOFFSET.maintStatusUpdate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var maintStatusUpdateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.maintStatusUpdate.v) }
  ///  Date when the military aircraft inspection was last performed, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-09-09T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var lastInspectionDate: String? { let o = _accessor.offset(VTOFFSET.lastInspectionDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastInspectionDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastInspectionDate.v) }
  ///  Military aircraft maintenance point of contact for this aircraft.
  ///  Example: /// Example: PSUP NIGHT SHIFT 800-555-4412
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var maintPoc: String? { let o = _accessor.offset(VTOFFSET.maintPoc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var maintPocSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.maintPoc.v) }
  ///  The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR, etc.).
  ///  Example: /// Example: ALERT
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var groundStatus: String? { let o = _accessor.offset(VTOFFSET.groundStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var groundStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.groundStatus.v) }
  ///  The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED, DECONTAMINATED, UNKNOWN, etc.).
  ///  Example: /// Example: CLEAR
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var contaminationStatus: String? { let o = _accessor.offset(VTOFFSET.contaminationStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var contaminationStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.contaminationStatus.v) }
  ///  The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL, OTHER, REQUESTED, etc.).
  ///  Example: /// Example: DELIVERED
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var fuelStatus: String? { let o = _accessor.offset(VTOFFSET.fuelStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fuelStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fuelStatus.v) }
  ///  The name or ID of the external user that updated this status.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var lastUpdatedBy: String? { let o = _accessor.offset(VTOFFSET.lastUpdatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastUpdatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastUpdatedBy.v) }
  ///  Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the course of action to resolve the issue will be determined.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var troubleshootEtic: String? { let o = _accessor.offset(VTOFFSET.troubleshootEtic.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var troubleshootEticSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.troubleshootEtic.v) }
  ///  The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the issue will be resolved.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var etic: String? { let o = _accessor.offset(VTOFFSET.etic.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eticSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.etic.v) }
  ///  The parking location of this aircraft.
  ///  Example: /// Example: B1
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var parkLocation: String? { let o = _accessor.offset(VTOFFSET.parkLocation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var parkLocationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.parkLocation.v) }
  ///  The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
  ///  Example: /// Example: GDSS
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var parkLocationSystem: String? { let o = _accessor.offset(VTOFFSET.parkLocationSystem.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var parkLocationSystemSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.parkLocationSystem.v) }
  ///  Unique identifier of the Point of Interest (POI) record related to this aircraft status. This will generally represent the location of an aircraft on the ground.
  ///  Example: /// Example: 0e52f081-a2e3-4b73-b822-88b882232691
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idPoi: String? { let o = _accessor.offset(VTOFFSET.idPoi.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idPoiSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idPoi.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: AircraftStatus_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : AircraftStatus_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startAircraftStatus_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 52) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idAircraft: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idAircraft, at: VTOFFSET.idAircraft.p) }
  public static func add(altAircraftId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altAircraftId, at: VTOFFSET.altAircraftId.p) }
  public static func add(currentState: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: currentState, at: VTOFFSET.currentState.p) }
  public static func add(idAirfield: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idAirfield, at: VTOFFSET.idAirfield.p) }
  public static func add(geoLoc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geoLoc, at: VTOFFSET.geoLoc.p) }
  public static func add(previousIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: previousIcao, at: VTOFFSET.previousIcao.p) }
  public static func add(currentIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: currentIcao, at: VTOFFSET.currentIcao.p) }
  public static func add(nextIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: nextIcao, at: VTOFFSET.nextIcao.p) }
  public static func add(flightPhase: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: flightPhase, at: VTOFFSET.flightPhase.p) }
  public static func add(taStartTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taStartTime, at: VTOFFSET.taStartTime.p) }
  public static func add(earliestTaendTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: earliestTaendTime, at: VTOFFSET.earliestTaendTime.p) }
  public static func add(missionReadiness: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: missionReadiness, at: VTOFFSET.missionReadiness.p) }
  public static func add(fuel: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fuel, def: 0, at: VTOFFSET.fuel.p) }
  public static func add(fuelFunction: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fuelFunction, at: VTOFFSET.fuelFunction.p) }
  public static func add(gunCapable: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gunCapable, def: false,
   at: VTOFFSET.gunCapable.p) }
  public static func add(gunRdsType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: gunRdsType, at: VTOFFSET.gunRdsType.p) }
  public static func add(gunRdsMin: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gunRdsMin, def: 0, at: VTOFFSET.gunRdsMin.p) }
  public static func add(gunRdsMax: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gunRdsMax, def: 0, at: VTOFFSET.gunRdsMax.p) }
  public static func add(airToAirStatus: AircraftStatus_Ingest_airToAirStatus_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: airToAirStatus.rawValue, def: 0, at: VTOFFSET.airToAirStatus.p) }
  public static func add(airToGroundStatus: AircraftStatus_Ingest_airToGroundStatus_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: airToGroundStatus.rawValue, def: 0, at: VTOFFSET.airToGroundStatus.p) }
  public static func addVectorOf(inventory: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: inventory, at: VTOFFSET.inventory.p) }
  public static func addVectorOf(inventoryMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: inventoryMin, at: VTOFFSET.inventoryMin.p) }
  public static func addVectorOf(inventoryMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: inventoryMax, at: VTOFFSET.inventoryMax.p) }
  public static func addVectorOf(unavailableSys: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: unavailableSys, at: VTOFFSET.unavailableSys.p) }
  public static func addVectorOf(additionalSys: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: additionalSys, at: VTOFFSET.additionalSys.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func add(mxRemark: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mxRemark, at: VTOFFSET.mxRemark.p) }
  public static func add(maintStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: maintStatus, at: VTOFFSET.maintStatus.p) }
  public static func add(maintStatusDriver: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: maintStatusDriver, at: VTOFFSET.maintStatusDriver.p) }
  public static func add(maintPriority: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: maintPriority, at: VTOFFSET.maintPriority.p) }
  public static func add(alphaStatusCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: alphaStatusCode, at: VTOFFSET.alphaStatusCode.p) }
  public static func add(maintStatusUpdate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: maintStatusUpdate, at: VTOFFSET.maintStatusUpdate.p) }
  public static func add(lastInspectionDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastInspectionDate, at: VTOFFSET.lastInspectionDate.p) }
  public static func add(maintPoc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: maintPoc, at: VTOFFSET.maintPoc.p) }
  public static func add(groundStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: groundStatus, at: VTOFFSET.groundStatus.p) }
  public static func add(contaminationStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: contaminationStatus, at: VTOFFSET.contaminationStatus.p) }
  public static func add(fuelStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fuelStatus, at: VTOFFSET.fuelStatus.p) }
  public static func add(lastUpdatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastUpdatedBy, at: VTOFFSET.lastUpdatedBy.p) }
  public static func add(troubleshootEtic: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: troubleshootEtic, at: VTOFFSET.troubleshootEtic.p) }
  public static func add(etic: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: etic, at: VTOFFSET.etic.p) }
  public static func add(parkLocation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: parkLocation, at: VTOFFSET.parkLocation.p) }
  public static func add(parkLocationSystem: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: parkLocationSystem, at: VTOFFSET.parkLocationSystem.p) }
  public static func add(idPoi: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idPoi, at: VTOFFSET.idPoi.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: AircraftStatus_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endAircraftStatus_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAircraftStatus_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idAircraftOffset idAircraft: Offset = Offset(),
    altAircraftIdOffset altAircraftId: Offset = Offset(),
    currentStateOffset currentState: Offset = Offset(),
    idAirfieldOffset idAirfield: Offset = Offset(),
    geoLocOffset geoLoc: Offset = Offset(),
    previousIcaoOffset previousIcao: Offset = Offset(),
    currentIcaoOffset currentIcao: Offset = Offset(),
    nextIcaoOffset nextIcao: Offset = Offset(),
    flightPhaseOffset flightPhase: Offset = Offset(),
    taStartTimeOffset taStartTime: Offset = Offset(),
    earliestTaendTimeOffset earliestTaendTime: Offset = Offset(),
    missionReadinessOffset missionReadiness: Offset = Offset(),
    fuel: Int32 = 0,
    fuelFunctionOffset fuelFunction: Offset = Offset(),
    gunCapable: Bool = false,
    gunRdsTypeOffset gunRdsType: Offset = Offset(),
    gunRdsMin: Int32 = 0,
    gunRdsMax: Int32 = 0,
    airToAirStatus: AircraftStatus_Ingest_airToAirStatus_Enum = .operational,
    airToGroundStatus: AircraftStatus_Ingest_airToGroundStatus_Enum = .operational,
    inventoryVectorOffset inventory: Offset = Offset(),
    inventoryMinVectorOffset inventoryMin: Offset = Offset(),
    inventoryMaxVectorOffset inventoryMax: Offset = Offset(),
    unavailableSysVectorOffset unavailableSys: Offset = Offset(),
    additionalSysVectorOffset additionalSys: Offset = Offset(),
    notesOffset notes: Offset = Offset(),
    mxRemarkOffset mxRemark: Offset = Offset(),
    maintStatusOffset maintStatus: Offset = Offset(),
    maintStatusDriverOffset maintStatusDriver: Offset = Offset(),
    maintPriorityOffset maintPriority: Offset = Offset(),
    alphaStatusCodeOffset alphaStatusCode: Offset = Offset(),
    maintStatusUpdateOffset maintStatusUpdate: Offset = Offset(),
    lastInspectionDateOffset lastInspectionDate: Offset = Offset(),
    maintPocOffset maintPoc: Offset = Offset(),
    groundStatusOffset groundStatus: Offset = Offset(),
    contaminationStatusOffset contaminationStatus: Offset = Offset(),
    fuelStatusOffset fuelStatus: Offset = Offset(),
    lastUpdatedByOffset lastUpdatedBy: Offset = Offset(),
    troubleshootEticOffset troubleshootEtic: Offset = Offset(),
    eticOffset etic: Offset = Offset(),
    parkLocationOffset parkLocation: Offset = Offset(),
    parkLocationSystemOffset parkLocationSystem: Offset = Offset(),
    idPoiOffset idPoi: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: AircraftStatus_Ingest_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = AircraftStatus_Ingest.startAircraftStatus_Ingest(&fbb)
    AircraftStatus_Ingest.add(id: id, &fbb)
    AircraftStatus_Ingest.add(classificationMarking: classificationMarking, &fbb)
    AircraftStatus_Ingest.add(idAircraft: idAircraft, &fbb)
    AircraftStatus_Ingest.add(altAircraftId: altAircraftId, &fbb)
    AircraftStatus_Ingest.add(currentState: currentState, &fbb)
    AircraftStatus_Ingest.add(idAirfield: idAirfield, &fbb)
    AircraftStatus_Ingest.add(geoLoc: geoLoc, &fbb)
    AircraftStatus_Ingest.add(previousIcao: previousIcao, &fbb)
    AircraftStatus_Ingest.add(currentIcao: currentIcao, &fbb)
    AircraftStatus_Ingest.add(nextIcao: nextIcao, &fbb)
    AircraftStatus_Ingest.add(flightPhase: flightPhase, &fbb)
    AircraftStatus_Ingest.add(taStartTime: taStartTime, &fbb)
    AircraftStatus_Ingest.add(earliestTaendTime: earliestTaendTime, &fbb)
    AircraftStatus_Ingest.add(missionReadiness: missionReadiness, &fbb)
    AircraftStatus_Ingest.add(fuel: fuel, &fbb)
    AircraftStatus_Ingest.add(fuelFunction: fuelFunction, &fbb)
    AircraftStatus_Ingest.add(gunCapable: gunCapable, &fbb)
    AircraftStatus_Ingest.add(gunRdsType: gunRdsType, &fbb)
    AircraftStatus_Ingest.add(gunRdsMin: gunRdsMin, &fbb)
    AircraftStatus_Ingest.add(gunRdsMax: gunRdsMax, &fbb)
    AircraftStatus_Ingest.add(airToAirStatus: airToAirStatus, &fbb)
    AircraftStatus_Ingest.add(airToGroundStatus: airToGroundStatus, &fbb)
    AircraftStatus_Ingest.addVectorOf(inventory: inventory, &fbb)
    AircraftStatus_Ingest.addVectorOf(inventoryMin: inventoryMin, &fbb)
    AircraftStatus_Ingest.addVectorOf(inventoryMax: inventoryMax, &fbb)
    AircraftStatus_Ingest.addVectorOf(unavailableSys: unavailableSys, &fbb)
    AircraftStatus_Ingest.addVectorOf(additionalSys: additionalSys, &fbb)
    AircraftStatus_Ingest.add(notes: notes, &fbb)
    AircraftStatus_Ingest.add(mxRemark: mxRemark, &fbb)
    AircraftStatus_Ingest.add(maintStatus: maintStatus, &fbb)
    AircraftStatus_Ingest.add(maintStatusDriver: maintStatusDriver, &fbb)
    AircraftStatus_Ingest.add(maintPriority: maintPriority, &fbb)
    AircraftStatus_Ingest.add(alphaStatusCode: alphaStatusCode, &fbb)
    AircraftStatus_Ingest.add(maintStatusUpdate: maintStatusUpdate, &fbb)
    AircraftStatus_Ingest.add(lastInspectionDate: lastInspectionDate, &fbb)
    AircraftStatus_Ingest.add(maintPoc: maintPoc, &fbb)
    AircraftStatus_Ingest.add(groundStatus: groundStatus, &fbb)
    AircraftStatus_Ingest.add(contaminationStatus: contaminationStatus, &fbb)
    AircraftStatus_Ingest.add(fuelStatus: fuelStatus, &fbb)
    AircraftStatus_Ingest.add(lastUpdatedBy: lastUpdatedBy, &fbb)
    AircraftStatus_Ingest.add(troubleshootEtic: troubleshootEtic, &fbb)
    AircraftStatus_Ingest.add(etic: etic, &fbb)
    AircraftStatus_Ingest.add(parkLocation: parkLocation, &fbb)
    AircraftStatus_Ingest.add(parkLocationSystem: parkLocationSystem, &fbb)
    AircraftStatus_Ingest.add(idPoi: idPoi, &fbb)
    AircraftStatus_Ingest.add(createdAt: createdAt, &fbb)
    AircraftStatus_Ingest.add(createdBy: createdBy, &fbb)
    AircraftStatus_Ingest.add(sourceDl: sourceDl, &fbb)
    AircraftStatus_Ingest.add(source: source, &fbb)
    AircraftStatus_Ingest.add(origin: origin, &fbb)
    AircraftStatus_Ingest.add(dataMode: dataMode, &fbb)
    AircraftStatus_Ingest.add(origNetwork: origNetwork, &fbb)
    return AircraftStatus_Ingest.endAircraftStatus_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idAircraft.p, fieldName: "idAircraft", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altAircraftId.p, fieldName: "altAircraftId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.currentState.p, fieldName: "currentState", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idAirfield.p, fieldName: "idAirfield", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.geoLoc.p, fieldName: "geoLoc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.previousIcao.p, fieldName: "previousIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.currentIcao.p, fieldName: "currentIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.nextIcao.p, fieldName: "nextIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.flightPhase.p, fieldName: "flightPhase", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taStartTime.p, fieldName: "taStartTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.earliestTaendTime.p, fieldName: "earliestTaendTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.missionReadiness.p, fieldName: "missionReadiness", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fuel.p, fieldName: "fuel", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.fuelFunction.p, fieldName: "fuelFunction", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.gunCapable.p, fieldName: "gunCapable", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.gunRdsType.p, fieldName: "gunRdsType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.gunRdsMin.p, fieldName: "gunRdsMin", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.gunRdsMax.p, fieldName: "gunRdsMax", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.airToAirStatus.p, fieldName: "airToAirStatus", required: false, type: AircraftStatus_Ingest_airToAirStatus_Enum.self)
    try _v.visit(field: VTOFFSET.airToGroundStatus.p, fieldName: "airToGroundStatus", required: false, type: AircraftStatus_Ingest_airToGroundStatus_Enum.self)
    try _v.visit(field: VTOFFSET.inventory.p, fieldName: "inventory", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.inventoryMin.p, fieldName: "inventoryMin", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.inventoryMax.p, fieldName: "inventoryMax", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.unavailableSys.p, fieldName: "unavailableSys", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.additionalSys.p, fieldName: "additionalSys", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.mxRemark.p, fieldName: "mxRemark", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.maintStatus.p, fieldName: "maintStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.maintStatusDriver.p, fieldName: "maintStatusDriver", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.maintPriority.p, fieldName: "maintPriority", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.alphaStatusCode.p, fieldName: "alphaStatusCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.maintStatusUpdate.p, fieldName: "maintStatusUpdate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lastInspectionDate.p, fieldName: "lastInspectionDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.maintPoc.p, fieldName: "maintPoc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.groundStatus.p, fieldName: "groundStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.contaminationStatus.p, fieldName: "contaminationStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fuelStatus.p, fieldName: "fuelStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lastUpdatedBy.p, fieldName: "lastUpdatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.troubleshootEtic.p, fieldName: "troubleshootEtic", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.etic.p, fieldName: "etic", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.parkLocation.p, fieldName: "parkLocation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.parkLocationSystem.p, fieldName: "parkLocationSystem", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idPoi.p, fieldName: "idPoi", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: AircraftStatus_Ingest_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

