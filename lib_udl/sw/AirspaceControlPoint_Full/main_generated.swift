// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// The controlPoint set describes any reference/controlling/rendevous point for a given airspace control means.
public struct AirspaceControlPoint_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AirspaceControlPoint_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case ctrlPtType = 4
    case ctrlPtName = 6
    case ctrlPtLocation = 8
    case ctrlPtAltitude = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  One of possible control point type codes, such as CP, ER, OT, etc.
  ///  Example: /// Example: CP
  ///  Constraints: Minimum length = 0, Maximum length = 2
  public var ctrlPtType: String? { let o = _accessor.offset(VTOFFSET.ctrlPtType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ctrlPtTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ctrlPtType.v) }
  ///  The name applied to the control point, used as a reference.
  ///  Example: /// Example: APPLE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var ctrlPtName: String? { let o = _accessor.offset(VTOFFSET.ctrlPtName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ctrlPtNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ctrlPtName.v) }
  ///  A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds) format that represents the location of the control point.
  ///  Example: /// Example: 203632N0594256E
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var ctrlPtLocation: String? { let o = _accessor.offset(VTOFFSET.ctrlPtLocation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ctrlPtLocationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ctrlPtLocation.v) }
  ///  The altitude of the control point.
  ///  Example: /// Example: BRFL:MSL-FL230
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var ctrlPtAltitude: String? { let o = _accessor.offset(VTOFFSET.ctrlPtAltitude.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ctrlPtAltitudeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ctrlPtAltitude.v) }
  public static func startAirspaceControlPoint_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(ctrlPtType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ctrlPtType, at: VTOFFSET.ctrlPtType.p) }
  public static func add(ctrlPtName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ctrlPtName, at: VTOFFSET.ctrlPtName.p) }
  public static func add(ctrlPtLocation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ctrlPtLocation, at: VTOFFSET.ctrlPtLocation.p) }
  public static func add(ctrlPtAltitude: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ctrlPtAltitude, at: VTOFFSET.ctrlPtAltitude.p) }
  public static func endAirspaceControlPoint_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAirspaceControlPoint_Full(
    _ fbb: inout FlatBufferBuilder,
    ctrlPtTypeOffset ctrlPtType: Offset = Offset(),
    ctrlPtNameOffset ctrlPtName: Offset = Offset(),
    ctrlPtLocationOffset ctrlPtLocation: Offset = Offset(),
    ctrlPtAltitudeOffset ctrlPtAltitude: Offset = Offset()
  ) -> Offset {
    let __start = AirspaceControlPoint_Full.startAirspaceControlPoint_Full(&fbb)
    AirspaceControlPoint_Full.add(ctrlPtType: ctrlPtType, &fbb)
    AirspaceControlPoint_Full.add(ctrlPtName: ctrlPtName, &fbb)
    AirspaceControlPoint_Full.add(ctrlPtLocation: ctrlPtLocation, &fbb)
    AirspaceControlPoint_Full.add(ctrlPtAltitude: ctrlPtAltitude, &fbb)
    return AirspaceControlPoint_Full.endAirspaceControlPoint_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.ctrlPtType.p, fieldName: "ctrlPtType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ctrlPtName.p, fieldName: "ctrlPtName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ctrlPtLocation.p, fieldName: "ctrlPtLocation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ctrlPtAltitude.p, fieldName: "ctrlPtAltitude", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

