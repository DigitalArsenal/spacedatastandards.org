// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum MonoRadar_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: MonoRadar_Abridged_dataMode_Enum { return .exercise }
  public static var min: MonoRadar_Abridged_dataMode_Enum { return .real }
}


///  /// A monoradar record contains the raw, and in some cases, processed target reports from primary and secondary air surveillance radars.  All target positions for monoradar reports are recorded as range and azimuth from geographical North relative to the detecting radar site.  In the case of secondary surveillance radars, interrogation response codes are provided as well as quality and validation characteristics, when available in the particular record type used to generate the record.
public struct MonoRadar_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "MONO" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: MonoRadar_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case tti = 8
    case idSensor = 10
    case senlat = 12
    case senlon = 14
    case senalt = 16
    case sac = 18
    case sic = 20
    case tgtid = 22
    case addr = 24
    case msgfmt = 26
    case msgtyp = 28
    case af = 30
    case faa = 32
    case spi = 34
    case aims = 36
    case mti = 38
    case bcnhits = 40
    case ts = 42
    case msgts = 44
    case rng = 46
    case az = 48
    case acp = 50
    case alt3d = 52
    case mc = 54
    case mcv = 56
    case mcg = 58
    case m1 = 60
    case m1v = 62
    case m1g = 64
    case m2 = 66
    case m2v = 68
    case m2xv = 70
    case m2g = 72
    case m3a = 74
    case m3av = 76
    case m3ag = 78
    case m3axv = 80
    case m4 = 82
    case m4v = 84
    case m4d1d2 = 86
    case mscommb = 88
    case milemrgcy = 90
    case code7500 = 92
    case code7600 = 94
    case code7700 = 96
    case grndspd = 98
    case hdng = 100
    case trknum = 102
    case rad = 104
    case mah = 106
    case cdm = 108
    case cartpos = 110
    case psrrl = 112
    case ssrl = 114
    case rngdelt = 116
    case azdelt = 118
    case wectc = 120
    case mrgrpt = 122
    case artsqual = 124
    case trkelig = 126
    case tgtconf = 128
    case tgtcorr = 130
    case tis = 132
    case tags = 134
    case origSensorId = 136
    case source = 138
    case origin = 140
    case dataMode = 142
    case createdAt = 144
    case createdBy = 146
    case origNetwork = 148
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: MONORADAR-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Test target indicator.
  ///  Example: /// Example: TTI
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var tti: String? { let o = _accessor.offset(VTOFFSET.tti.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ttiSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tti.v) }
  ///  ID of the radar site or station providing the data.
  ///  Example: /// Example: REF-SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var senlat: Double { let o = _accessor.offset(VTOFFSET.senlat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor WGS84 longitude, in degrees, at time of observation (ts).  -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var senlon: Double { let o = _accessor.offset(VTOFFSET.senlon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor altitude, in kilometers, at time of observation (ts).
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  public var senalt: Double { let o = _accessor.offset(VTOFFSET.senalt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  System Area Code.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var sac: Int32 { let o = _accessor.offset(VTOFFSET.sac.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  System Identification Code.
  ///  Example: /// Example: 40
  ///  Constraints: No constraints specified.
  public var sic: Int32 { let o = _accessor.offset(VTOFFSET.sic.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Aircraft identification from an aircraft equipped with a Mode S transponder.
  ///  Example: /// Example: TGT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var tgtid: String? { let o = _accessor.offset(VTOFFSET.tgtid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tgtidSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tgtid.v) }
  ///  Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.
  ///  Example: /// Example: ADDR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var addr: String? { let o = _accessor.offset(VTOFFSET.addr.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var addrSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.addr.v) }
  ///  Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).
  ///  Example: /// Example: CAT48
  ///  Constraints: Minimum length = 1, Maximum length = 16
  public var msgfmt: String? { let o = _accessor.offset(VTOFFSET.msgfmt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msgfmtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msgfmt.v) }
  ///  Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR', etc..).
  ///  Example: /// Example: BCN
  ///  Constraints: Minimum length = 1, Maximum length = 16
  public var msgtyp: String? { let o = _accessor.offset(VTOFFSET.msgtyp.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msgtypSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msgtyp.v) }
  ///  Flag indicating military message.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var af: Bool { let o = _accessor.offset(VTOFFSET.af.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Flag indicating FAA/Civ message.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var faa: Bool { let o = _accessor.offset(VTOFFSET.faa.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Flag indicating whether Special Position Indicator (SPI) present in interrogation response.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var spi: Bool { let o = _accessor.offset(VTOFFSET.spi.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Flag indicating whether AIMS present.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var aims: Bool { let o = _accessor.offset(VTOFFSET.aims.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Flag indicating that target was detected using data from an MTI receiver.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var mti: Bool { let o = _accessor.offset(VTOFFSET.mti.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Number of beacon hits received on the target.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var bcnhits: Int32 { let o = _accessor.offset(VTOFFSET.bcnhits.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Target detection time, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  public var ts: String? { let o = _accessor.offset(VTOFFSET.ts.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ts.v) }
  ///  Message time, in ISO 8601 UTC format with microsecond precision. This is the time that the data message was released from the site.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  public var msgts: String? { let o = _accessor.offset(VTOFFSET.msgts.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msgtsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msgts.v) }
  ///  Measured slant range to target from the observing site, in km.
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  public var rng: Double { let o = _accessor.offset(VTOFFSET.rng.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Target azimuth, measured from the observing site, in degrees from true North.  If Azimuth Change Pulse (acp) count is provided, az represents the computed angle.
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  public var az: Double { let o = _accessor.offset(VTOFFSET.az.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Azimuth Change Pulse count at target detection.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  public var acp: Int32 { let o = _accessor.offset(VTOFFSET.acp.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Measured height of the target, in km. (for 3D radars).
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  public var alt3d: Double { let o = _accessor.offset(VTOFFSET.alt3d.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Mode-C altitude (uncorrected pressure altitude), in km.
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  public var mc: Double { let o = _accessor.offset(VTOFFSET.mc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Status of the mode-C validity bit.
  ///  Example: /// Example: MCV
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var mcv: String? { let o = _accessor.offset(VTOFFSET.mcv.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var mcvSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.mcv.v) }
  ///  Indicator that the mode-C response was garbled.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var mcg: Bool { let o = _accessor.offset(VTOFFSET.mcg.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Mode-1 interrogation response (mission code).
  ///  Example: /// Example: MISSION_CODE
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var m1: String? { let o = _accessor.offset(VTOFFSET.m1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var m1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.m1.v) }
  ///  Status of the mode-1 validity bit.
  ///  Example: /// Example: M1V
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var m1v: String? { let o = _accessor.offset(VTOFFSET.m1v.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var m1vSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.m1v.v) }
  ///  Indicator that the mode-1 response was garbled.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var m1g: Bool { let o = _accessor.offset(VTOFFSET.m1g.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Mode-2 interrogation response (military identification code).
  ///  Example: /// Example: MILITARY_ID_CODE
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var m2: String? { let o = _accessor.offset(VTOFFSET.m2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var m2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.m2.v) }
  ///  Status of the mode-2 validity bit.
  ///  Example: /// Example: M2V
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var m2v: String? { let o = _accessor.offset(VTOFFSET.m2v.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var m2vSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.m2v.v) }
  ///  Status of the mode-2 X-Pulse response validation.
  ///  Example: /// Example: M2XV
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var m2xv: String? { let o = _accessor.offset(VTOFFSET.m2xv.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var m2xvSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.m2xv.v) }
  ///  Indicator that the mode-2 response was garbled.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var m2g: Bool { let o = _accessor.offset(VTOFFSET.m2g.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Mode-3/A interrogation response (aircraft identification).
  ///  Example: /// Example: AIRCRAFT_ID
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var m3a: String? { let o = _accessor.offset(VTOFFSET.m3a.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var m3aSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.m3a.v) }
  ///  Status of the mode-3/A validity bit.
  ///  Example: /// Example: M3AV
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var m3av: String? { let o = _accessor.offset(VTOFFSET.m3av.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var m3avSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.m3av.v) }
  ///  Indicator that the mode-3/A response was garbled.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var m3ag: Bool { let o = _accessor.offset(VTOFFSET.m3ag.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Status of the mode-3 X-Pulse response validation.
  ///  Example: /// Example: M3AXV
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var m3axv: String? { let o = _accessor.offset(VTOFFSET.m3axv.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var m3axvSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.m3axv.v) }
  ///  Mode-4 interrogation response (Identification Friend/Foe).
  ///  Example: /// Example: ID_FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var m4: String? { let o = _accessor.offset(VTOFFSET.m4.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var m4SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.m4.v) }
  ///  Status of the mode-4 validity bit.
  ///  Example: /// Example: M4V
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var m4v: String? { let o = _accessor.offset(VTOFFSET.m4v.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var m4vSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.m4v.v) }
  ///  Mode-4 D1 & D2 response status.
  ///  Example: /// Example: STATUS
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var m4d1d2: String? { let o = _accessor.offset(VTOFFSET.m4d1d2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var m4d1d2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.m4d1d2.v) }
  ///  Mode-S Comm B message data.
  ///  Example: /// Example: MSCOMMB
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var mscommb: String? { let o = _accessor.offset(VTOFFSET.mscommb.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var mscommbSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.mscommb.v) }
  ///  Flag indicating military emergency.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var milemrgcy: Bool { let o = _accessor.offset(VTOFFSET.milemrgcy.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  7500 squawk present (hijack).
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var code7500: Bool { let o = _accessor.offset(VTOFFSET.code7500.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  7600 squawk present (loss of comm).
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var code7600: Bool { let o = _accessor.offset(VTOFFSET.code7600.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  7700 squawk present (general emergency).
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var code7700: Bool { let o = _accessor.offset(VTOFFSET.code7700.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Target ground speed, in meters/second.
  ///  Example: /// Example: 30.23
  ///  Constraints: No constraints specified.
  public var grndspd: Double { let o = _accessor.offset(VTOFFSET.grndspd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Target heading, in degrees from true North at the target position.
  ///  Example: /// Example: 30.23
  ///  Constraints: No constraints specified.
  public var hdng: Double { let o = _accessor.offset(VTOFFSET.hdng.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Value representing a unique reference to a track record within a particular track file.  Included when the  radar station outputs tracks.
  ///  Example: /// Example: 30
  ///  Constraints: No constraints specified.
  public var trknum: Int32 { let o = _accessor.offset(VTOFFSET.trknum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Type of sensor(s) maintaining track.
  ///  Example: /// Example: RAD
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var rad: String? { let o = _accessor.offset(VTOFFSET.rad.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var radSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rad.v) }
  ///  Indication of Horizontal Maneuver detection.
  ///  Example: /// Example: MAH
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var mah: String? { let o = _accessor.offset(VTOFFSET.mah.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var mahSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.mah.v) }
  ///  Climbing/Descending mode indicator.
  ///  Example: /// Example: CDM
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var cdm: String? { let o = _accessor.offset(VTOFFSET.cdm.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cdmSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cdm.v) }
  ///  Array of local 2d-cartesian [x, y] coordinates of target, in km.
  ///  Example: /// Example: [1.2, 2.2]
  ///  Constraints: No constraints specified.
  public var hasCartpos: Bool { let o = _accessor.offset(VTOFFSET.cartpos.v); return o == 0 ? false : true }
  public var cartposCount: Int32 { let o = _accessor.offset(VTOFFSET.cartpos.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cartpos(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.cartpos.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Runlength of the primary surveillance radar track, in degrees.
  ///  Example: /// Example: 44.23
  ///  Constraints: No constraints specified.
  public var psrrl: Double { let o = _accessor.offset(VTOFFSET.psrrl.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Runlength of the secondary surveillance radar track, in degrees.
  ///  Example: /// Example: 44.23
  ///  Constraints: No constraints specified.
  public var ssrl: Double { let o = _accessor.offset(VTOFFSET.ssrl.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Target range delta between PSR and SSR (reference PSR-SSR), in km.
  ///  Example: /// Example: 44.23
  ///  Constraints: No constraints specified.
  public var rngdelt: Double { let o = _accessor.offset(VTOFFSET.rngdelt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.
  ///  Example: /// Example: 44.23
  ///  Constraints: No constraints specified.
  public var azdelt: Double { let o = _accessor.offset(VTOFFSET.azdelt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Warning/Error Conditions and Target Classification.
  ///  Example: /// Example: ['WARNING', 'WARNING']
  ///  Constraints: No constraints specified.
  public var hasWectc: Bool { let o = _accessor.offset(VTOFFSET.wectc.v); return o == 0 ? false : true }
  public var wectcCount: Int32 { let o = _accessor.offset(VTOFFSET.wectc.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func wectc(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.wectc.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Flag indicating report separated from different responses at same range.  Azimuth may have larger than normal error when present.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var mrgrpt: Bool { let o = _accessor.offset(VTOFFSET.mrgrpt.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  ARTS quality.
  ///  Example: /// Example: QUALITY
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var artsqual: String? { let o = _accessor.offset(VTOFFSET.artsqual.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var artsqualSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.artsqual.v) }
  ///  Track eligibility flag.
  ///  Example: /// Example: ELIGIBILITY
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var trkelig: String? { let o = _accessor.offset(VTOFFSET.trkelig.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var trkeligSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.trkelig.v) }
  ///  Target confidence.
  ///  Example: /// Example: CONFIDENCE
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var tgtconf: String? { let o = _accessor.offset(VTOFFSET.tgtconf.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tgtconfSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tgtconf.v) }
  ///  Target correlation flag.
  ///  Example: /// Example: CORRELATION
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var tgtcorr: String? { let o = _accessor.offset(VTOFFSET.tgtcorr.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tgtcorrSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tgtcorr.v) }
  ///  Data time-in-storage, in seconds. This is the amount of time elapsed between target detection and message transmission.
  ///  Example: /// Example: 0.4
  ///  Constraints: No constraints specified.
  public var tis: Double { let o = _accessor.offset(VTOFFSET.tis.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  public var hasTags: Bool { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? false : true }
  public var tagsCount: Int32 { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func tags(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Optional identifier provided by observation source to indicate the sensor identifier which produced this observation.This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origSensorId: String? { let o = _accessor.offset(VTOFFSET.origSensorId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSensorIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSensorId.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: MonoRadar_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : MonoRadar_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startMonoRadar_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 73) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(tti: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tti, at: VTOFFSET.tti.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(senlat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senlat, def: 0.0, at: VTOFFSET.senlat.p) }
  public static func add(senlon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senlon, def: 0.0, at: VTOFFSET.senlon.p) }
  public static func add(senalt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senalt, def: 0.0, at: VTOFFSET.senalt.p) }
  public static func add(sac: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sac, def: 0, at: VTOFFSET.sac.p) }
  public static func add(sic: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sic, def: 0, at: VTOFFSET.sic.p) }
  public static func add(tgtid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tgtid, at: VTOFFSET.tgtid.p) }
  public static func add(addr: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: addr, at: VTOFFSET.addr.p) }
  public static func add(msgfmt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msgfmt, at: VTOFFSET.msgfmt.p) }
  public static func add(msgtyp: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msgtyp, at: VTOFFSET.msgtyp.p) }
  public static func add(af: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: af, def: false,
   at: VTOFFSET.af.p) }
  public static func add(faa: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: faa, def: false,
   at: VTOFFSET.faa.p) }
  public static func add(spi: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: spi, def: false,
   at: VTOFFSET.spi.p) }
  public static func add(aims: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: aims, def: false,
   at: VTOFFSET.aims.p) }
  public static func add(mti: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: mti, def: false,
   at: VTOFFSET.mti.p) }
  public static func add(bcnhits: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bcnhits, def: 0, at: VTOFFSET.bcnhits.p) }
  public static func add(ts: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ts, at: VTOFFSET.ts.p) }
  public static func add(msgts: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msgts, at: VTOFFSET.msgts.p) }
  public static func add(rng: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rng, def: 0.0, at: VTOFFSET.rng.p) }
  public static func add(az: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: az, def: 0.0, at: VTOFFSET.az.p) }
  public static func add(acp: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: acp, def: 0, at: VTOFFSET.acp.p) }
  public static func add(alt3d: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: alt3d, def: 0.0, at: VTOFFSET.alt3d.p) }
  public static func add(mc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: mc, def: 0.0, at: VTOFFSET.mc.p) }
  public static func add(mcv: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mcv, at: VTOFFSET.mcv.p) }
  public static func add(mcg: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: mcg, def: false,
   at: VTOFFSET.mcg.p) }
  public static func add(m1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: m1, at: VTOFFSET.m1.p) }
  public static func add(m1v: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: m1v, at: VTOFFSET.m1v.p) }
  public static func add(m1g: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: m1g, def: false,
   at: VTOFFSET.m1g.p) }
  public static func add(m2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: m2, at: VTOFFSET.m2.p) }
  public static func add(m2v: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: m2v, at: VTOFFSET.m2v.p) }
  public static func add(m2xv: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: m2xv, at: VTOFFSET.m2xv.p) }
  public static func add(m2g: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: m2g, def: false,
   at: VTOFFSET.m2g.p) }
  public static func add(m3a: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: m3a, at: VTOFFSET.m3a.p) }
  public static func add(m3av: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: m3av, at: VTOFFSET.m3av.p) }
  public static func add(m3ag: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: m3ag, def: false,
   at: VTOFFSET.m3ag.p) }
  public static func add(m3axv: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: m3axv, at: VTOFFSET.m3axv.p) }
  public static func add(m4: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: m4, at: VTOFFSET.m4.p) }
  public static func add(m4v: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: m4v, at: VTOFFSET.m4v.p) }
  public static func add(m4d1d2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: m4d1d2, at: VTOFFSET.m4d1d2.p) }
  public static func add(mscommb: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mscommb, at: VTOFFSET.mscommb.p) }
  public static func add(milemrgcy: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: milemrgcy, def: false,
   at: VTOFFSET.milemrgcy.p) }
  public static func add(code7500: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: code7500, def: false,
   at: VTOFFSET.code7500.p) }
  public static func add(code7600: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: code7600, def: false,
   at: VTOFFSET.code7600.p) }
  public static func add(code7700: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: code7700, def: false,
   at: VTOFFSET.code7700.p) }
  public static func add(grndspd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: grndspd, def: 0.0, at: VTOFFSET.grndspd.p) }
  public static func add(hdng: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hdng, def: 0.0, at: VTOFFSET.hdng.p) }
  public static func add(trknum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: trknum, def: 0, at: VTOFFSET.trknum.p) }
  public static func add(rad: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rad, at: VTOFFSET.rad.p) }
  public static func add(mah: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mah, at: VTOFFSET.mah.p) }
  public static func add(cdm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cdm, at: VTOFFSET.cdm.p) }
  public static func addVectorOf(cartpos: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cartpos, at: VTOFFSET.cartpos.p) }
  public static func add(psrrl: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: psrrl, def: 0.0, at: VTOFFSET.psrrl.p) }
  public static func add(ssrl: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ssrl, def: 0.0, at: VTOFFSET.ssrl.p) }
  public static func add(rngdelt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rngdelt, def: 0.0, at: VTOFFSET.rngdelt.p) }
  public static func add(azdelt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azdelt, def: 0.0, at: VTOFFSET.azdelt.p) }
  public static func addVectorOf(wectc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wectc, at: VTOFFSET.wectc.p) }
  public static func add(mrgrpt: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: mrgrpt, def: false,
   at: VTOFFSET.mrgrpt.p) }
  public static func add(artsqual: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: artsqual, at: VTOFFSET.artsqual.p) }
  public static func add(trkelig: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trkelig, at: VTOFFSET.trkelig.p) }
  public static func add(tgtconf: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tgtconf, at: VTOFFSET.tgtconf.p) }
  public static func add(tgtcorr: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tgtcorr, at: VTOFFSET.tgtcorr.p) }
  public static func add(tis: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: tis, def: 0.0, at: VTOFFSET.tis.p) }
  public static func addVectorOf(tags: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tags, at: VTOFFSET.tags.p) }
  public static func add(origSensorId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSensorId, at: VTOFFSET.origSensorId.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: MonoRadar_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endMonoRadar_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMonoRadar_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    ttiOffset tti: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    senlat: Double = 0.0,
    senlon: Double = 0.0,
    senalt: Double = 0.0,
    sac: Int32 = 0,
    sic: Int32 = 0,
    tgtidOffset tgtid: Offset = Offset(),
    addrOffset addr: Offset = Offset(),
    msgfmtOffset msgfmt: Offset = Offset(),
    msgtypOffset msgtyp: Offset = Offset(),
    af: Bool = false,
    faa: Bool = false,
    spi: Bool = false,
    aims: Bool = false,
    mti: Bool = false,
    bcnhits: Int32 = 0,
    tsOffset ts: Offset = Offset(),
    msgtsOffset msgts: Offset = Offset(),
    rng: Double = 0.0,
    az: Double = 0.0,
    acp: Int32 = 0,
    alt3d: Double = 0.0,
    mc: Double = 0.0,
    mcvOffset mcv: Offset = Offset(),
    mcg: Bool = false,
    m1Offset m1: Offset = Offset(),
    m1vOffset m1v: Offset = Offset(),
    m1g: Bool = false,
    m2Offset m2: Offset = Offset(),
    m2vOffset m2v: Offset = Offset(),
    m2xvOffset m2xv: Offset = Offset(),
    m2g: Bool = false,
    m3aOffset m3a: Offset = Offset(),
    m3avOffset m3av: Offset = Offset(),
    m3ag: Bool = false,
    m3axvOffset m3axv: Offset = Offset(),
    m4Offset m4: Offset = Offset(),
    m4vOffset m4v: Offset = Offset(),
    m4d1d2Offset m4d1d2: Offset = Offset(),
    mscommbOffset mscommb: Offset = Offset(),
    milemrgcy: Bool = false,
    code7500: Bool = false,
    code7600: Bool = false,
    code7700: Bool = false,
    grndspd: Double = 0.0,
    hdng: Double = 0.0,
    trknum: Int32 = 0,
    radOffset rad: Offset = Offset(),
    mahOffset mah: Offset = Offset(),
    cdmOffset cdm: Offset = Offset(),
    cartposVectorOffset cartpos: Offset = Offset(),
    psrrl: Double = 0.0,
    ssrl: Double = 0.0,
    rngdelt: Double = 0.0,
    azdelt: Double = 0.0,
    wectcVectorOffset wectc: Offset = Offset(),
    mrgrpt: Bool = false,
    artsqualOffset artsqual: Offset = Offset(),
    trkeligOffset trkelig: Offset = Offset(),
    tgtconfOffset tgtconf: Offset = Offset(),
    tgtcorrOffset tgtcorr: Offset = Offset(),
    tis: Double = 0.0,
    tagsVectorOffset tags: Offset = Offset(),
    origSensorIdOffset origSensorId: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: MonoRadar_Abridged_dataMode_Enum = .real,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = MonoRadar_Abridged.startMonoRadar_Abridged(&fbb)
    MonoRadar_Abridged.add(id: id, &fbb)
    MonoRadar_Abridged.add(classificationMarking: classificationMarking, &fbb)
    MonoRadar_Abridged.add(tti: tti, &fbb)
    MonoRadar_Abridged.add(idSensor: idSensor, &fbb)
    MonoRadar_Abridged.add(senlat: senlat, &fbb)
    MonoRadar_Abridged.add(senlon: senlon, &fbb)
    MonoRadar_Abridged.add(senalt: senalt, &fbb)
    MonoRadar_Abridged.add(sac: sac, &fbb)
    MonoRadar_Abridged.add(sic: sic, &fbb)
    MonoRadar_Abridged.add(tgtid: tgtid, &fbb)
    MonoRadar_Abridged.add(addr: addr, &fbb)
    MonoRadar_Abridged.add(msgfmt: msgfmt, &fbb)
    MonoRadar_Abridged.add(msgtyp: msgtyp, &fbb)
    MonoRadar_Abridged.add(af: af, &fbb)
    MonoRadar_Abridged.add(faa: faa, &fbb)
    MonoRadar_Abridged.add(spi: spi, &fbb)
    MonoRadar_Abridged.add(aims: aims, &fbb)
    MonoRadar_Abridged.add(mti: mti, &fbb)
    MonoRadar_Abridged.add(bcnhits: bcnhits, &fbb)
    MonoRadar_Abridged.add(ts: ts, &fbb)
    MonoRadar_Abridged.add(msgts: msgts, &fbb)
    MonoRadar_Abridged.add(rng: rng, &fbb)
    MonoRadar_Abridged.add(az: az, &fbb)
    MonoRadar_Abridged.add(acp: acp, &fbb)
    MonoRadar_Abridged.add(alt3d: alt3d, &fbb)
    MonoRadar_Abridged.add(mc: mc, &fbb)
    MonoRadar_Abridged.add(mcv: mcv, &fbb)
    MonoRadar_Abridged.add(mcg: mcg, &fbb)
    MonoRadar_Abridged.add(m1: m1, &fbb)
    MonoRadar_Abridged.add(m1v: m1v, &fbb)
    MonoRadar_Abridged.add(m1g: m1g, &fbb)
    MonoRadar_Abridged.add(m2: m2, &fbb)
    MonoRadar_Abridged.add(m2v: m2v, &fbb)
    MonoRadar_Abridged.add(m2xv: m2xv, &fbb)
    MonoRadar_Abridged.add(m2g: m2g, &fbb)
    MonoRadar_Abridged.add(m3a: m3a, &fbb)
    MonoRadar_Abridged.add(m3av: m3av, &fbb)
    MonoRadar_Abridged.add(m3ag: m3ag, &fbb)
    MonoRadar_Abridged.add(m3axv: m3axv, &fbb)
    MonoRadar_Abridged.add(m4: m4, &fbb)
    MonoRadar_Abridged.add(m4v: m4v, &fbb)
    MonoRadar_Abridged.add(m4d1d2: m4d1d2, &fbb)
    MonoRadar_Abridged.add(mscommb: mscommb, &fbb)
    MonoRadar_Abridged.add(milemrgcy: milemrgcy, &fbb)
    MonoRadar_Abridged.add(code7500: code7500, &fbb)
    MonoRadar_Abridged.add(code7600: code7600, &fbb)
    MonoRadar_Abridged.add(code7700: code7700, &fbb)
    MonoRadar_Abridged.add(grndspd: grndspd, &fbb)
    MonoRadar_Abridged.add(hdng: hdng, &fbb)
    MonoRadar_Abridged.add(trknum: trknum, &fbb)
    MonoRadar_Abridged.add(rad: rad, &fbb)
    MonoRadar_Abridged.add(mah: mah, &fbb)
    MonoRadar_Abridged.add(cdm: cdm, &fbb)
    MonoRadar_Abridged.addVectorOf(cartpos: cartpos, &fbb)
    MonoRadar_Abridged.add(psrrl: psrrl, &fbb)
    MonoRadar_Abridged.add(ssrl: ssrl, &fbb)
    MonoRadar_Abridged.add(rngdelt: rngdelt, &fbb)
    MonoRadar_Abridged.add(azdelt: azdelt, &fbb)
    MonoRadar_Abridged.addVectorOf(wectc: wectc, &fbb)
    MonoRadar_Abridged.add(mrgrpt: mrgrpt, &fbb)
    MonoRadar_Abridged.add(artsqual: artsqual, &fbb)
    MonoRadar_Abridged.add(trkelig: trkelig, &fbb)
    MonoRadar_Abridged.add(tgtconf: tgtconf, &fbb)
    MonoRadar_Abridged.add(tgtcorr: tgtcorr, &fbb)
    MonoRadar_Abridged.add(tis: tis, &fbb)
    MonoRadar_Abridged.addVectorOf(tags: tags, &fbb)
    MonoRadar_Abridged.add(origSensorId: origSensorId, &fbb)
    MonoRadar_Abridged.add(source: source, &fbb)
    MonoRadar_Abridged.add(origin: origin, &fbb)
    MonoRadar_Abridged.add(dataMode: dataMode, &fbb)
    MonoRadar_Abridged.add(createdAt: createdAt, &fbb)
    MonoRadar_Abridged.add(createdBy: createdBy, &fbb)
    MonoRadar_Abridged.add(origNetwork: origNetwork, &fbb)
    return MonoRadar_Abridged.endMonoRadar_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tti.p, fieldName: "tti", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.senlat.p, fieldName: "senlat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senlon.p, fieldName: "senlon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senalt.p, fieldName: "senalt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.sac.p, fieldName: "sac", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.sic.p, fieldName: "sic", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.tgtid.p, fieldName: "tgtid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.addr.p, fieldName: "addr", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msgfmt.p, fieldName: "msgfmt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msgtyp.p, fieldName: "msgtyp", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.af.p, fieldName: "af", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.faa.p, fieldName: "faa", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.spi.p, fieldName: "spi", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.aims.p, fieldName: "aims", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.mti.p, fieldName: "mti", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.bcnhits.p, fieldName: "bcnhits", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.ts.p, fieldName: "ts", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msgts.p, fieldName: "msgts", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rng.p, fieldName: "rng", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.az.p, fieldName: "az", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.acp.p, fieldName: "acp", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.alt3d.p, fieldName: "alt3d", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.mc.p, fieldName: "mc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.mcv.p, fieldName: "mcv", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.mcg.p, fieldName: "mcg", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.m1.p, fieldName: "m1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.m1v.p, fieldName: "m1v", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.m1g.p, fieldName: "m1g", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.m2.p, fieldName: "m2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.m2v.p, fieldName: "m2v", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.m2xv.p, fieldName: "m2xv", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.m2g.p, fieldName: "m2g", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.m3a.p, fieldName: "m3a", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.m3av.p, fieldName: "m3av", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.m3ag.p, fieldName: "m3ag", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.m3axv.p, fieldName: "m3axv", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.m4.p, fieldName: "m4", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.m4v.p, fieldName: "m4v", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.m4d1d2.p, fieldName: "m4d1d2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.mscommb.p, fieldName: "mscommb", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.milemrgcy.p, fieldName: "milemrgcy", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.code7500.p, fieldName: "code7500", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.code7600.p, fieldName: "code7600", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.code7700.p, fieldName: "code7700", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.grndspd.p, fieldName: "grndspd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.hdng.p, fieldName: "hdng", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.trknum.p, fieldName: "trknum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.rad.p, fieldName: "rad", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.mah.p, fieldName: "mah", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cdm.p, fieldName: "cdm", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cartpos.p, fieldName: "cartpos", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.psrrl.p, fieldName: "psrrl", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ssrl.p, fieldName: "ssrl", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rngdelt.p, fieldName: "rngdelt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.azdelt.p, fieldName: "azdelt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.wectc.p, fieldName: "wectc", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.mrgrpt.p, fieldName: "mrgrpt", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.artsqual.p, fieldName: "artsqual", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.trkelig.p, fieldName: "trkelig", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tgtconf.p, fieldName: "tgtconf", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tgtcorr.p, fieldName: "tgtcorr", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tis.p, fieldName: "tis", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.tags.p, fieldName: "tags", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.origSensorId.p, fieldName: "origSensorId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: MonoRadar_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

