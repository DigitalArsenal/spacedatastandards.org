// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection of Hazardous Material information associated with this Air Transport Mission.
public struct AirTransportMissionHazMat_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRT" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AirTransportMissionHazMat_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case extHazMatId = 4
    case itemName = 6
    case unNum = 8
    case pieces = 10
    case weight = 12
    case netExpWt = 14
    case classDiv = 16
    case cgc = 18
    case cgn = 20
    case applicableNotes = 22
    case onItin = 24
    case onIcao = 26
    case offItin = 28
    case offIcao = 30
    case planned = 32
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The hazMat identifier provided by the originating source.
  ///  Example: /// Example: cb6289e0f38534e01291ab6421d42724
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var extHazMatId: String? { let o = _accessor.offset(VTOFFSET.extHazMatId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var extHazMatIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.extHazMatId.v) }
  ///  United Nations proper shipping name of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
  ///  Example: /// Example: LITHIUM METAL BATTERIES
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var itemName: String? { let o = _accessor.offset(VTOFFSET.itemName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var itemNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.itemName.v) }
  ///  United Nations number or North America number that identifies hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
  ///  Example: /// Example: 0181
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var unNum: String? { let o = _accessor.offset(VTOFFSET.unNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var unNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.unNum.v) }
  ///  Number of pieces of hazardous cargo.
  ///  Example: /// Example: 29
  ///  Constraints: No constraints specified.
  public var pieces: Int32 { let o = _accessor.offset(VTOFFSET.pieces.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Total weight of hazardous cargo, including non-explosive parts, in kilograms.
  ///  Example: /// Example: 22.1
  ///  Constraints: No constraints specified.
  public var weight: Double { let o = _accessor.offset(VTOFFSET.weight.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Net explosive weight of the hazardous material, in kilograms.
  ///  Example: /// Example: 12.1
  ///  Constraints: No constraints specified.
  public var netExpWt: Double { let o = _accessor.offset(VTOFFSET.netExpWt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Class and division of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var classDiv: Double { let o = _accessor.offset(VTOFFSET.classDiv.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Compatibility group code used to specify the controls for the transportation and storage of hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 2
  public var cgc: String? { let o = _accessor.offset(VTOFFSET.cgc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cgcSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cgc.v) }
  ///  Comma delimited list of Note IDs for compatibility groups, specific to GDSS systems.
  ///  Example: /// Example: 4,5,7,8
  ///  Constraints: Minimum length = 0, Maximum length = 100
  public var cgn: String? { let o = _accessor.offset(VTOFFSET.cgn.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cgnSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cgn.v) }
  ///  Comma delimited list of Note IDs for Item Class Segregation groups, specific to GDSS systems.
  ///  Example: /// Example: 11,12
  ///  Constraints: Minimum length = 0, Maximum length = 100
  public var applicableNotes: String? { let o = _accessor.offset(VTOFFSET.applicableNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var applicableNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.applicableNotes.v) }
  ///  Itinerary number that identifies where the hazardous material is loaded.
  ///  Example: /// Example: 50
  ///  Constraints: No constraints specified.
  public var onItin: Int32 { let o = _accessor.offset(VTOFFSET.onItin.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is loaded.
  ///  Example: /// Example: LIRQ
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var onIcao: String? { let o = _accessor.offset(VTOFFSET.onIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var onIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.onIcao.v) }
  ///  Itinerary number that identifies where the hazardous material is unloaded.
  ///  Example: /// Example: 300
  ///  Constraints: No constraints specified.
  public var offItin: Int32 { let o = _accessor.offset(VTOFFSET.offItin.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is unloaded.
  ///  Example: /// Example: MBPV
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var offIcao: String? { let o = _accessor.offset(VTOFFSET.offIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var offIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.offIcao.v) }
  ///  Flag indicating if hazardous material is associated with this air transport mission. Possible values are P (planned to be associated with the mission) or A (actually associated with the mission). Enum: [P, A].
  ///  Example: /// Example: P
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var planned: String? { let o = _accessor.offset(VTOFFSET.planned.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var plannedSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.planned.v) }
  public static func startAirTransportMissionHazMat_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 15) }
  public static func add(extHazMatId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: extHazMatId, at: VTOFFSET.extHazMatId.p) }
  public static func add(itemName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: itemName, at: VTOFFSET.itemName.p) }
  public static func add(unNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: unNum, at: VTOFFSET.unNum.p) }
  public static func add(pieces: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pieces, def: 0, at: VTOFFSET.pieces.p) }
  public static func add(weight: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: weight, def: 0.0, at: VTOFFSET.weight.p) }
  public static func add(netExpWt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: netExpWt, def: 0.0, at: VTOFFSET.netExpWt.p) }
  public static func add(classDiv: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: classDiv, def: 0.0, at: VTOFFSET.classDiv.p) }
  public static func add(cgc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cgc, at: VTOFFSET.cgc.p) }
  public static func add(cgn: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cgn, at: VTOFFSET.cgn.p) }
  public static func add(applicableNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: applicableNotes, at: VTOFFSET.applicableNotes.p) }
  public static func add(onItin: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: onItin, def: 0, at: VTOFFSET.onItin.p) }
  public static func add(onIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: onIcao, at: VTOFFSET.onIcao.p) }
  public static func add(offItin: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: offItin, def: 0, at: VTOFFSET.offItin.p) }
  public static func add(offIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: offIcao, at: VTOFFSET.offIcao.p) }
  public static func add(planned: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: planned, at: VTOFFSET.planned.p) }
  public static func endAirTransportMissionHazMat_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAirTransportMissionHazMat_Ingest(
    _ fbb: inout FlatBufferBuilder,
    extHazMatIdOffset extHazMatId: Offset = Offset(),
    itemNameOffset itemName: Offset = Offset(),
    unNumOffset unNum: Offset = Offset(),
    pieces: Int32 = 0,
    weight: Double = 0.0,
    netExpWt: Double = 0.0,
    classDiv: Double = 0.0,
    cgcOffset cgc: Offset = Offset(),
    cgnOffset cgn: Offset = Offset(),
    applicableNotesOffset applicableNotes: Offset = Offset(),
    onItin: Int32 = 0,
    onIcaoOffset onIcao: Offset = Offset(),
    offItin: Int32 = 0,
    offIcaoOffset offIcao: Offset = Offset(),
    plannedOffset planned: Offset = Offset()
  ) -> Offset {
    let __start = AirTransportMissionHazMat_Ingest.startAirTransportMissionHazMat_Ingest(&fbb)
    AirTransportMissionHazMat_Ingest.add(extHazMatId: extHazMatId, &fbb)
    AirTransportMissionHazMat_Ingest.add(itemName: itemName, &fbb)
    AirTransportMissionHazMat_Ingest.add(unNum: unNum, &fbb)
    AirTransportMissionHazMat_Ingest.add(pieces: pieces, &fbb)
    AirTransportMissionHazMat_Ingest.add(weight: weight, &fbb)
    AirTransportMissionHazMat_Ingest.add(netExpWt: netExpWt, &fbb)
    AirTransportMissionHazMat_Ingest.add(classDiv: classDiv, &fbb)
    AirTransportMissionHazMat_Ingest.add(cgc: cgc, &fbb)
    AirTransportMissionHazMat_Ingest.add(cgn: cgn, &fbb)
    AirTransportMissionHazMat_Ingest.add(applicableNotes: applicableNotes, &fbb)
    AirTransportMissionHazMat_Ingest.add(onItin: onItin, &fbb)
    AirTransportMissionHazMat_Ingest.add(onIcao: onIcao, &fbb)
    AirTransportMissionHazMat_Ingest.add(offItin: offItin, &fbb)
    AirTransportMissionHazMat_Ingest.add(offIcao: offIcao, &fbb)
    AirTransportMissionHazMat_Ingest.add(planned: planned, &fbb)
    return AirTransportMissionHazMat_Ingest.endAirTransportMissionHazMat_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.extHazMatId.p, fieldName: "extHazMatId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.itemName.p, fieldName: "itemName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.unNum.p, fieldName: "unNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pieces.p, fieldName: "pieces", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.weight.p, fieldName: "weight", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.netExpWt.p, fieldName: "netExpWt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.classDiv.p, fieldName: "classDiv", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.cgc.p, fieldName: "cgc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cgn.p, fieldName: "cgn", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.applicableNotes.p, fieldName: "applicableNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.onItin.p, fieldName: "onItin", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.onIcao.p, fieldName: "onIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.offItin.p, fieldName: "offItin", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.offIcao.p, fieldName: "offIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.planned.p, fieldName: "planned", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

