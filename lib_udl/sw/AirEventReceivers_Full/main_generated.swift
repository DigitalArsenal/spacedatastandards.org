// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection of receiver aircraft associated with this Air Event.
public struct AirEventReceivers_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRE" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AirEventReceivers_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case idReceiverSortie = 4
    case idReceiverMission = 6
    case idReceiverAirfield = 8
    case externalReceiverId = 10
    case receiverCoord = 12
    case receiverMds = 14
    case amcReceiverMissionId = 16
    case altReceiverMissionId = 18
    case receiverCallSign = 20
    case receiverOwner = 22
    case receiverPoc = 24
    case receiverLegNum = 26
    case receiverDeployedIcao = 28
    case receiverDeliveryMethod = 30
    case fuelOn = 32
    case receiverCellPosition = 34
    case sequenceNum = 36
    case recOrg = 38
    case numRecAircraft = 40
    case receiverFuelType = 42
    case receiverExercise = 44
    case packageId = 46
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The UDL ID of the aircraft sortie this receiver is associated with for this event.
  ///  Example: /// Example: 1d03e85a-1fb9-4f6e-86a0-593306b6e3f0
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idReceiverSortie: String? { let o = _accessor.offset(VTOFFSET.idReceiverSortie.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idReceiverSortieSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idReceiverSortie.v) }
  ///  The UDL ID of the mission this receiver is associated with for this event.
  ///  Example: /// Example: ce99757d-f733-461f-8939-3939d4f05946
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idReceiverMission: String? { let o = _accessor.offset(VTOFFSET.idReceiverMission.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idReceiverMissionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idReceiverMission.v) }
  ///  The UDL ID of the airfield this receiver is associated with for this event.
  ///  Example: /// Example: 96c4c2ba-a031-4e58-9b8e-3c6fb90a7534
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idReceiverAirfield: String? { let o = _accessor.offset(VTOFFSET.idReceiverAirfield.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idReceiverAirfieldSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idReceiverAirfield.v) }
  ///  Optional receiver identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: 3fb8169f-adc1-4667-acab-8415a012d766
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var externalReceiverId: String? { let o = _accessor.offset(VTOFFSET.externalReceiverId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var externalReceiverIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.externalReceiverId.v) }
  ///  Coordination record identifier of this receiver.
  ///  Example: /// Example: TTC601
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var receiverCoord: String? { let o = _accessor.offset(VTOFFSET.receiverCoord.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var receiverCoordSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.receiverCoord.v) }
  ///  The Model Design Series designation of this receiver.
  ///  Example: /// Example: KC135R
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var receiverMds: String? { let o = _accessor.offset(VTOFFSET.receiverMds.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var receiverMdsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.receiverMds.v) }
  ///  The Air Mobility Command (AMC) mission identifier of this receiver.
  ///  Example: /// Example: 8PH000B1S052
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var amcReceiverMissionId: String? { let o = _accessor.offset(VTOFFSET.amcReceiverMissionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var amcReceiverMissionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.amcReceiverMissionId.v) }
  ///  Alternate mission identifier of this receiver provided by source.
  ///  Example: /// Example: 1UN05201L121
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var altReceiverMissionId: String? { let o = _accessor.offset(VTOFFSET.altReceiverMissionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altReceiverMissionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altReceiverMissionId.v) }
  ///  The call sign assigned to this receiver.
  ///  Example: /// Example: BAKER
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var receiverCallSign: String? { let o = _accessor.offset(VTOFFSET.receiverCallSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var receiverCallSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.receiverCallSign.v) }
  ///  The wing or unit that owns this receiver.
  ///  Example: /// Example: 117ARW
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var receiverOwner: String? { let o = _accessor.offset(VTOFFSET.receiverOwner.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var receiverOwnerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.receiverOwner.v) }
  ///  The name and/or number of the point of contact for this receiver.
  ///  Example: /// Example: JOHN SMITH (555)555-5555
  ///  Constraints: Minimum length = 0, Maximum length = 68
  public var receiverPoc: String? { let o = _accessor.offset(VTOFFSET.receiverPoc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var receiverPocSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.receiverPoc.v) }
  ///  Identifies the itinerary point of a mission that this receiver is linked to.
  ///  Example: /// Example: 825
  ///  Constraints: No constraints specified.
  public var receiverLegNum: Int32 { let o = _accessor.offset(VTOFFSET.receiverLegNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Location the receiver is deployed to for an air refueling event.
  ///  Example: /// Example: KOFF
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var receiverDeployedIcao: String? { let o = _accessor.offset(VTOFFSET.receiverDeployedIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var receiverDeployedIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.receiverDeployedIcao.v) }
  ///  Type of fuel delivery method used by the receiver during an air refueling event (BOOM, DROGUE, BOTH).
  ///  Example: /// Example: DROGUE
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var receiverDeliveryMethod: String? { let o = _accessor.offset(VTOFFSET.receiverDeliveryMethod.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var receiverDeliveryMethodSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.receiverDeliveryMethod.v) }
  ///  Total weight of the fuel transferred to this receiver during an air refueling event, in pounds.
  ///  Example: /// Example: 15000000.1
  ///  Constraints: No constraints specified.
  public var fuelOn: Double { let o = _accessor.offset(VTOFFSET.fuelOn.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Position of this receiver within a group of receivers in an air refueling event.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var receiverCellPosition: Int32 { let o = _accessor.offset(VTOFFSET.receiverCellPosition.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Indicates the unique number by Unit ID, which identifies an air refueling event.
  ///  Example: /// Example: 1018
  ///  Constraints: Minimum length = 0, Maximum length = 15
  public var sequenceNum: String? { let o = _accessor.offset(VTOFFSET.sequenceNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sequenceNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sequenceNum.v) }
  ///  The major command level (MAJCOM) or foreign military sales (FMS) name of the receiver's organization. The tanker flying hours used for an air refueling event are logged against the receiver MAJCOM or foreign government being supported.
  ///  Example: /// Example: AMC
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var recOrg: String? { let o = _accessor.offset(VTOFFSET.recOrg.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var recOrgSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.recOrg.v) }
  ///  Number of aircraft contained within one receiver coordination record for an air refueling event.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var numRecAircraft: Int32 { let o = _accessor.offset(VTOFFSET.numRecAircraft.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Type of fuel being transferred to the receiver in an air refueling event.
  ///  Example: /// Example: JP8
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var receiverFuelType: String? { let o = _accessor.offset(VTOFFSET.receiverFuelType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var receiverFuelTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.receiverFuelType.v) }
  ///  Name of the receiver exercise associated with an air refueling event.
  ///  Example: /// Example: NATO19
  ///  Constraints: Minimum length = 0, Maximum length = 12
  public var receiverExercise: String? { let o = _accessor.offset(VTOFFSET.receiverExercise.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var receiverExerciseSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.receiverExercise.v) }
  ///  The package identifier for the receiver in an air refueling event.
  ///  Example: /// Example: 135
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var packageId: String? { let o = _accessor.offset(VTOFFSET.packageId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var packageIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.packageId.v) }
  public static func startAirEventReceivers_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 22) }
  public static func add(idReceiverSortie: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idReceiverSortie, at: VTOFFSET.idReceiverSortie.p) }
  public static func add(idReceiverMission: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idReceiverMission, at: VTOFFSET.idReceiverMission.p) }
  public static func add(idReceiverAirfield: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idReceiverAirfield, at: VTOFFSET.idReceiverAirfield.p) }
  public static func add(externalReceiverId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: externalReceiverId, at: VTOFFSET.externalReceiverId.p) }
  public static func add(receiverCoord: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: receiverCoord, at: VTOFFSET.receiverCoord.p) }
  public static func add(receiverMds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: receiverMds, at: VTOFFSET.receiverMds.p) }
  public static func add(amcReceiverMissionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: amcReceiverMissionId, at: VTOFFSET.amcReceiverMissionId.p) }
  public static func add(altReceiverMissionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altReceiverMissionId, at: VTOFFSET.altReceiverMissionId.p) }
  public static func add(receiverCallSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: receiverCallSign, at: VTOFFSET.receiverCallSign.p) }
  public static func add(receiverOwner: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: receiverOwner, at: VTOFFSET.receiverOwner.p) }
  public static func add(receiverPoc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: receiverPoc, at: VTOFFSET.receiverPoc.p) }
  public static func add(receiverLegNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: receiverLegNum, def: 0, at: VTOFFSET.receiverLegNum.p) }
  public static func add(receiverDeployedIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: receiverDeployedIcao, at: VTOFFSET.receiverDeployedIcao.p) }
  public static func add(receiverDeliveryMethod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: receiverDeliveryMethod, at: VTOFFSET.receiverDeliveryMethod.p) }
  public static func add(fuelOn: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fuelOn, def: 0.0, at: VTOFFSET.fuelOn.p) }
  public static func add(receiverCellPosition: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: receiverCellPosition, def: 0, at: VTOFFSET.receiverCellPosition.p) }
  public static func add(sequenceNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sequenceNum, at: VTOFFSET.sequenceNum.p) }
  public static func add(recOrg: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: recOrg, at: VTOFFSET.recOrg.p) }
  public static func add(numRecAircraft: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numRecAircraft, def: 0, at: VTOFFSET.numRecAircraft.p) }
  public static func add(receiverFuelType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: receiverFuelType, at: VTOFFSET.receiverFuelType.p) }
  public static func add(receiverExercise: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: receiverExercise, at: VTOFFSET.receiverExercise.p) }
  public static func add(packageId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: packageId, at: VTOFFSET.packageId.p) }
  public static func endAirEventReceivers_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAirEventReceivers_Full(
    _ fbb: inout FlatBufferBuilder,
    idReceiverSortieOffset idReceiverSortie: Offset = Offset(),
    idReceiverMissionOffset idReceiverMission: Offset = Offset(),
    idReceiverAirfieldOffset idReceiverAirfield: Offset = Offset(),
    externalReceiverIdOffset externalReceiverId: Offset = Offset(),
    receiverCoordOffset receiverCoord: Offset = Offset(),
    receiverMdsOffset receiverMds: Offset = Offset(),
    amcReceiverMissionIdOffset amcReceiverMissionId: Offset = Offset(),
    altReceiverMissionIdOffset altReceiverMissionId: Offset = Offset(),
    receiverCallSignOffset receiverCallSign: Offset = Offset(),
    receiverOwnerOffset receiverOwner: Offset = Offset(),
    receiverPocOffset receiverPoc: Offset = Offset(),
    receiverLegNum: Int32 = 0,
    receiverDeployedIcaoOffset receiverDeployedIcao: Offset = Offset(),
    receiverDeliveryMethodOffset receiverDeliveryMethod: Offset = Offset(),
    fuelOn: Double = 0.0,
    receiverCellPosition: Int32 = 0,
    sequenceNumOffset sequenceNum: Offset = Offset(),
    recOrgOffset recOrg: Offset = Offset(),
    numRecAircraft: Int32 = 0,
    receiverFuelTypeOffset receiverFuelType: Offset = Offset(),
    receiverExerciseOffset receiverExercise: Offset = Offset(),
    packageIdOffset packageId: Offset = Offset()
  ) -> Offset {
    let __start = AirEventReceivers_Full.startAirEventReceivers_Full(&fbb)
    AirEventReceivers_Full.add(idReceiverSortie: idReceiverSortie, &fbb)
    AirEventReceivers_Full.add(idReceiverMission: idReceiverMission, &fbb)
    AirEventReceivers_Full.add(idReceiverAirfield: idReceiverAirfield, &fbb)
    AirEventReceivers_Full.add(externalReceiverId: externalReceiverId, &fbb)
    AirEventReceivers_Full.add(receiverCoord: receiverCoord, &fbb)
    AirEventReceivers_Full.add(receiverMds: receiverMds, &fbb)
    AirEventReceivers_Full.add(amcReceiverMissionId: amcReceiverMissionId, &fbb)
    AirEventReceivers_Full.add(altReceiverMissionId: altReceiverMissionId, &fbb)
    AirEventReceivers_Full.add(receiverCallSign: receiverCallSign, &fbb)
    AirEventReceivers_Full.add(receiverOwner: receiverOwner, &fbb)
    AirEventReceivers_Full.add(receiverPoc: receiverPoc, &fbb)
    AirEventReceivers_Full.add(receiverLegNum: receiverLegNum, &fbb)
    AirEventReceivers_Full.add(receiverDeployedIcao: receiverDeployedIcao, &fbb)
    AirEventReceivers_Full.add(receiverDeliveryMethod: receiverDeliveryMethod, &fbb)
    AirEventReceivers_Full.add(fuelOn: fuelOn, &fbb)
    AirEventReceivers_Full.add(receiverCellPosition: receiverCellPosition, &fbb)
    AirEventReceivers_Full.add(sequenceNum: sequenceNum, &fbb)
    AirEventReceivers_Full.add(recOrg: recOrg, &fbb)
    AirEventReceivers_Full.add(numRecAircraft: numRecAircraft, &fbb)
    AirEventReceivers_Full.add(receiverFuelType: receiverFuelType, &fbb)
    AirEventReceivers_Full.add(receiverExercise: receiverExercise, &fbb)
    AirEventReceivers_Full.add(packageId: packageId, &fbb)
    return AirEventReceivers_Full.endAirEventReceivers_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.idReceiverSortie.p, fieldName: "idReceiverSortie", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idReceiverMission.p, fieldName: "idReceiverMission", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idReceiverAirfield.p, fieldName: "idReceiverAirfield", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.externalReceiverId.p, fieldName: "externalReceiverId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.receiverCoord.p, fieldName: "receiverCoord", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.receiverMds.p, fieldName: "receiverMds", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.amcReceiverMissionId.p, fieldName: "amcReceiverMissionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altReceiverMissionId.p, fieldName: "altReceiverMissionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.receiverCallSign.p, fieldName: "receiverCallSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.receiverOwner.p, fieldName: "receiverOwner", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.receiverPoc.p, fieldName: "receiverPoc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.receiverLegNum.p, fieldName: "receiverLegNum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.receiverDeployedIcao.p, fieldName: "receiverDeployedIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.receiverDeliveryMethod.p, fieldName: "receiverDeliveryMethod", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fuelOn.p, fieldName: "fuelOn", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.receiverCellPosition.p, fieldName: "receiverCellPosition", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.sequenceNum.p, fieldName: "sequenceNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.recOrg.p, fieldName: "recOrg", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numRecAircraft.p, fieldName: "numRecAircraft", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.receiverFuelType.p, fieldName: "receiverFuelType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.receiverExercise.p, fieldName: "receiverExercise", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.packageId.p, fieldName: "packageId", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

