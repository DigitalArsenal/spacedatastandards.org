// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Coefficients to describe profile shape as quasi-parabolic segments.
public struct IonoObservationDensityProfileQuasiParabolic_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "IONO" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: IonoObservationDensityProfileQuasiParabolic_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case description = 4
    case earthRadius = 6
    case quasiParabolicSegments = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  General description of the quasi-parabolic computation algorithm.
  ///  Example: /// Example: Array of the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C
  ///  Constraints: No constraints specified.
  public var description: String? { let o = _accessor.offset(VTOFFSET.description.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.description.v) }
  ///  Value of the Earth's radius, in kilometers, used for computations.
  ///  Example: /// Example: 6370.1
  ///  Constraints: No constraints specified.
  public var earthRadius: Double { let o = _accessor.offset(VTOFFSET.earthRadius.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Array of quasi-parabolic segments. Each segment is the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C”. Usually 3 groups for E, F1, and F2 layers, but additional segments may be used to improve accuracy.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasQuasiParabolicSegments: Bool { let o = _accessor.offset(VTOFFSET.quasiParabolicSegments.v); return o == 0 ? false : true }
  public var quasiParabolicSegmentsCount: Int32 { let o = _accessor.offset(VTOFFSET.quasiParabolicSegments.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func quasiParabolicSegments(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.quasiParabolicSegments.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startIonoObservationDensityProfileQuasiParabolic_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(description: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: description, at: VTOFFSET.description.p) }
  public static func add(earthRadius: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: earthRadius, def: 0.0, at: VTOFFSET.earthRadius.p) }
  public static func addVectorOf(quasiParabolicSegments: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: quasiParabolicSegments, at: VTOFFSET.quasiParabolicSegments.p) }
  public static func endIonoObservationDensityProfileQuasiParabolic_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createIonoObservationDensityProfileQuasiParabolic_Abridged(
    _ fbb: inout FlatBufferBuilder,
    descriptionOffset description: Offset = Offset(),
    earthRadius: Double = 0.0,
    quasiParabolicSegmentsVectorOffset quasiParabolicSegments: Offset = Offset()
  ) -> Offset {
    let __start = IonoObservationDensityProfileQuasiParabolic_Abridged.startIonoObservationDensityProfileQuasiParabolic_Abridged(&fbb)
    IonoObservationDensityProfileQuasiParabolic_Abridged.add(description: description, &fbb)
    IonoObservationDensityProfileQuasiParabolic_Abridged.add(earthRadius: earthRadius, &fbb)
    IonoObservationDensityProfileQuasiParabolic_Abridged.addVectorOf(quasiParabolicSegments: quasiParabolicSegments, &fbb)
    return IonoObservationDensityProfileQuasiParabolic_Abridged.endIonoObservationDensityProfileQuasiParabolic_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.description.p, fieldName: "description", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.earthRadius.p, fieldName: "earthRadius", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.quasiParabolicSegments.p, fieldName: "quasiParabolicSegments", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

