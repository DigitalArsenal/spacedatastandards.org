// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum OnboardNavigation_Full_referenceFrame_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case j2000 = 0
  ///  No description available.
  case efgTdr = 1
  ///  No description available.
  case ecrEcef = 2
  ///  No description available.
  case teme = 3
  ///  No description available.
  case itrf = 4
  ///  No description available.
  case gcrf = 5

  public static var max: OnboardNavigation_Full_referenceFrame_Enum { return .gcrf }
  public static var min: OnboardNavigation_Full_referenceFrame_Enum { return .j2000 }
}


public enum OnboardNavigation_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: OnboardNavigation_Full_dataMode_Enum { return .exercise }
  public static var min: OnboardNavigation_Full_dataMode_Enum { return .real }
}


///  /// These services provide spacecraft positional data derived from on-board navigational sensors.  Navigational points are provided in kilometers and in a user specified reference frame, with ECI J2K being preferred.
public struct OnboardNavigation_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ONBO" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: OnboardNavigation_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idOnOrbit = 8
    case satNo = 10
    case onOrbit = 12
    case origObjectId = 14
    case startTime = 16
    case endTime = 18
    case esId = 20
    case starCatName = 22
    case starCatLoadTime = 24
    case idStateVector = 26
    case ts = 28
    case referenceFrame = 30
    case sunSensor = 32
    case mag = 34
    case starTracker = 36
    case deltaPos = 38
    case createdAt = 40
    case createdBy = 42
    case source = 44
    case origin = 46
    case origNetwork = 48
    case dataMode = 50
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ONBOARD-NAVIGATION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the primary satellite on-orbit object.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 101
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var onOrbit: String? { let o = _accessor.offset(VTOFFSET.onOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var onOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.onOrbit.v) }
  ///  Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Start time of the sensor data, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-07-20T01:02:03.123456Z
  ///  Constraints: No constraints specified.
  public var startTime: String? { let o = _accessor.offset(VTOFFSET.startTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.startTime.v) }
  ///  End time of the sensor data, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-07-20T01:02:03.123456Z
  ///  Constraints: No constraints specified.
  public var endTime: String? { let o = _accessor.offset(VTOFFSET.endTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var endTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.endTime.v) }
  ///  Unique identifier of the parent EphemerisSet, if this data is correlated with an Ephemeris.  If multiple nav sensor records are required, this ID may be associated with each of those records if each is synced to the ephemeris points.
  ///  Example: /// Example: EPHEMERISSET-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var esId: String? { let o = _accessor.offset(VTOFFSET.esId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var esIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.esId.v) }
  ///  The name or identifier the star catalog in use.
  ///  Example: /// Example: STAR-CAT-NAME
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var starCatName: String? { let o = _accessor.offset(VTOFFSET.starCatName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var starCatNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.starCatName.v) }
  ///  The last load time of the current star catalog onboard this spacecraft.
  ///  Example: /// Example: 2021-07-21T01:02:03.123Z
  ///  Constraints: No constraints specified.
  public var starCatLoadTime: String? { let o = _accessor.offset(VTOFFSET.starCatLoadTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var starCatLoadTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.starCatLoadTime.v) }
  ///  Unique identifier of the last onboard state vector.
  ///  Example: /// Example: STATE-VECTOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idStateVector: String? { let o = _accessor.offset(VTOFFSET.idStateVector.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idStateVectorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idStateVector.v) }
  ///  Array of epochs of the observations, in ISO 8601 UTC format.  The epochs are assumed to correspond to all sensor data in this record.  If sensors do not share a common epoch then separate records should be generated.
  ///  Example: /// Example: ['2021-07-21T01:02:03.120003Z']
  ///  Constraints: No constraints specified.
  public var hasTs: Bool { let o = _accessor.offset(VTOFFSET.ts.v); return o == 0 ? false : true }
  public var tsCount: Int32 { let o = _accessor.offset(VTOFFSET.ts.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func ts(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.ts.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The reference frame in which the sensor derived positions are provided. If the referenceFrame is null it is assumed to be J2000.  Note that this frame is assumed to apply to all of the sensor data in this record.  If onboard sensors process positional estimates in different frames then separate records should be generated.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var referenceFrame: OnboardNavigation_Full_referenceFrame_Enum { let o = _accessor.offset(VTOFFSET.referenceFrame.v); return o == 0 ? .j2000 : OnboardNavigation_Full_referenceFrame_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .j2000 }
  ///  Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard sun sensor, at each epoch.
  ///  Example: /// Example: [[1.1, 2.2, 3.3]]
  ///  Constraints: No constraints specified.
  public var hasSunSensor: Bool { let o = _accessor.offset(VTOFFSET.sunSensor.v); return o == 0 ? false : true }
  public var sunSensorCount: Int32 { let o = _accessor.offset(VTOFFSET.sunSensor.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sunSensor(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.sunSensor.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard magnetometer, at each epoch.
  ///  Example: /// Example: [[1.1, 2.2, 3.3]]
  ///  Constraints: No constraints specified.
  public var hasMag: Bool { let o = _accessor.offset(VTOFFSET.mag.v); return o == 0 ? false : true }
  public var magCount: Int32 { let o = _accessor.offset(VTOFFSET.mag.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func mag(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.mag.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard star tracker, at each epoch.
  ///  Example: /// Example: [[1.1, 2.2, 3.3]]
  ///  Constraints: No constraints specified.
  public var hasStarTracker: Bool { let o = _accessor.offset(VTOFFSET.starTracker.v); return o == 0 ? false : true }
  public var starTrackerCount: Int32 { let o = _accessor.offset(VTOFFSET.starTracker.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func starTracker(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.starTracker.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Arrays of spacecraft delta position (X, Y, Z), in km, in the specified referenceFrame, between the onboard state and the last accepted sensor position.
  ///  Example: /// Example: [[1.1, 2.2, 3.3]]
  ///  Constraints: No constraints specified.
  public var hasDeltaPos: Bool { let o = _accessor.offset(VTOFFSET.deltaPos.v); return o == 0 ? false : true }
  public var deltaPosCount: Int32 { let o = _accessor.offset(VTOFFSET.deltaPos.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func deltaPos(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.deltaPos.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var dataMode: OnboardNavigation_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : OnboardNavigation_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startOnboardNavigation_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 24) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(onOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: onOrbit, at: VTOFFSET.onOrbit.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(startTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: startTime, at: VTOFFSET.startTime.p) }
  public static func add(endTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: endTime, at: VTOFFSET.endTime.p) }
  public static func add(esId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: esId, at: VTOFFSET.esId.p) }
  public static func add(starCatName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: starCatName, at: VTOFFSET.starCatName.p) }
  public static func add(starCatLoadTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: starCatLoadTime, at: VTOFFSET.starCatLoadTime.p) }
  public static func add(idStateVector: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idStateVector, at: VTOFFSET.idStateVector.p) }
  public static func addVectorOf(ts: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ts, at: VTOFFSET.ts.p) }
  public static func add(referenceFrame: OnboardNavigation_Full_referenceFrame_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: referenceFrame.rawValue, def: 0, at: VTOFFSET.referenceFrame.p) }
  public static func addVectorOf(sunSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sunSensor, at: VTOFFSET.sunSensor.p) }
  public static func addVectorOf(mag: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mag, at: VTOFFSET.mag.p) }
  public static func addVectorOf(starTracker: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: starTracker, at: VTOFFSET.starTracker.p) }
  public static func addVectorOf(deltaPos: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: deltaPos, at: VTOFFSET.deltaPos.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: OnboardNavigation_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endOnboardNavigation_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createOnboardNavigation_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    satNo: Int32 = 0,
    onOrbitOffset onOrbit: Offset = Offset(),
    origObjectIdOffset origObjectId: Offset = Offset(),
    startTimeOffset startTime: Offset = Offset(),
    endTimeOffset endTime: Offset = Offset(),
    esIdOffset esId: Offset = Offset(),
    starCatNameOffset starCatName: Offset = Offset(),
    starCatLoadTimeOffset starCatLoadTime: Offset = Offset(),
    idStateVectorOffset idStateVector: Offset = Offset(),
    tsVectorOffset ts: Offset = Offset(),
    referenceFrame: OnboardNavigation_Full_referenceFrame_Enum = .j2000,
    sunSensorVectorOffset sunSensor: Offset = Offset(),
    magVectorOffset mag: Offset = Offset(),
    starTrackerVectorOffset starTracker: Offset = Offset(),
    deltaPosVectorOffset deltaPos: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: OnboardNavigation_Full_dataMode_Enum = .real
  ) -> Offset {
    let __start = OnboardNavigation_Full.startOnboardNavigation_Full(&fbb)
    OnboardNavigation_Full.add(id: id, &fbb)
    OnboardNavigation_Full.add(classificationMarking: classificationMarking, &fbb)
    OnboardNavigation_Full.add(idOnOrbit: idOnOrbit, &fbb)
    OnboardNavigation_Full.add(satNo: satNo, &fbb)
    OnboardNavigation_Full.add(onOrbit: onOrbit, &fbb)
    OnboardNavigation_Full.add(origObjectId: origObjectId, &fbb)
    OnboardNavigation_Full.add(startTime: startTime, &fbb)
    OnboardNavigation_Full.add(endTime: endTime, &fbb)
    OnboardNavigation_Full.add(esId: esId, &fbb)
    OnboardNavigation_Full.add(starCatName: starCatName, &fbb)
    OnboardNavigation_Full.add(starCatLoadTime: starCatLoadTime, &fbb)
    OnboardNavigation_Full.add(idStateVector: idStateVector, &fbb)
    OnboardNavigation_Full.addVectorOf(ts: ts, &fbb)
    OnboardNavigation_Full.add(referenceFrame: referenceFrame, &fbb)
    OnboardNavigation_Full.addVectorOf(sunSensor: sunSensor, &fbb)
    OnboardNavigation_Full.addVectorOf(mag: mag, &fbb)
    OnboardNavigation_Full.addVectorOf(starTracker: starTracker, &fbb)
    OnboardNavigation_Full.addVectorOf(deltaPos: deltaPos, &fbb)
    OnboardNavigation_Full.add(createdAt: createdAt, &fbb)
    OnboardNavigation_Full.add(createdBy: createdBy, &fbb)
    OnboardNavigation_Full.add(source: source, &fbb)
    OnboardNavigation_Full.add(origin: origin, &fbb)
    OnboardNavigation_Full.add(origNetwork: origNetwork, &fbb)
    OnboardNavigation_Full.add(dataMode: dataMode, &fbb)
    return OnboardNavigation_Full.endOnboardNavigation_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.onOrbit.p, fieldName: "onOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.startTime.p, fieldName: "startTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.endTime.p, fieldName: "endTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.esId.p, fieldName: "esId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.starCatName.p, fieldName: "starCatName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.starCatLoadTime.p, fieldName: "starCatLoadTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idStateVector.p, fieldName: "idStateVector", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ts.p, fieldName: "ts", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.referenceFrame.p, fieldName: "referenceFrame", required: false, type: OnboardNavigation_Full_referenceFrame_Enum.self)
    try _v.visit(field: VTOFFSET.sunSensor.p, fieldName: "sunSensor", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.mag.p, fieldName: "mag", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.starTracker.p, fieldName: "starTracker", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.deltaPos.p, fieldName: "deltaPos", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: OnboardNavigation_Full_dataMode_Enum.self)
    _v.finish()
  }
}

