// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Information obtained for vital signs.
public struct EvacVitalSignData_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EVAC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EvacVitalSignData_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case vitalSign = 4
    case vitalSign1 = 6
    case vitalSign2 = 8
    case medConfFactor = 10
    case time = 12
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE, TEMPERATURE CORE, etc.).
  ///  Example: /// Example: HEART RATE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var vitalSign: String? { let o = _accessor.offset(VTOFFSET.vitalSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var vitalSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.vitalSign.v) }
  ///  Vital sign value 1.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
  ///  Example: /// Example: 120
  ///  Constraints: No constraints specified.
  public var vitalSign1: Double { let o = _accessor.offset(VTOFFSET.vitalSign1.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Vital sign value 2.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
  ///  Example: /// Example: 80
  ///  Constraints: No constraints specified.
  public var vitalSign2: Double { let o = _accessor.offset(VTOFFSET.vitalSign2.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Medical confidence factor.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var medConfFactor: Int32 { let o = _accessor.offset(VTOFFSET.medConfFactor.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
  ///  Example: /// Example: 2021-10-15T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var time: String? { let o = _accessor.offset(VTOFFSET.time.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.time.v) }
  public static func startEvacVitalSignData_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 5) }
  public static func add(vitalSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vitalSign, at: VTOFFSET.vitalSign.p) }
  public static func add(vitalSign1: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vitalSign1, def: 0.0, at: VTOFFSET.vitalSign1.p) }
  public static func add(vitalSign2: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vitalSign2, def: 0.0, at: VTOFFSET.vitalSign2.p) }
  public static func add(medConfFactor: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: medConfFactor, def: 0, at: VTOFFSET.medConfFactor.p) }
  public static func add(time: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: time, at: VTOFFSET.time.p) }
  public static func endEvacVitalSignData_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEvacVitalSignData_Ingest(
    _ fbb: inout FlatBufferBuilder,
    vitalSignOffset vitalSign: Offset = Offset(),
    vitalSign1: Double = 0.0,
    vitalSign2: Double = 0.0,
    medConfFactor: Int32 = 0,
    timeOffset time: Offset = Offset()
  ) -> Offset {
    let __start = EvacVitalSignData_Ingest.startEvacVitalSignData_Ingest(&fbb)
    EvacVitalSignData_Ingest.add(vitalSign: vitalSign, &fbb)
    EvacVitalSignData_Ingest.add(vitalSign1: vitalSign1, &fbb)
    EvacVitalSignData_Ingest.add(vitalSign2: vitalSign2, &fbb)
    EvacVitalSignData_Ingest.add(medConfFactor: medConfFactor, &fbb)
    EvacVitalSignData_Ingest.add(time: time, &fbb)
    return EvacVitalSignData_Ingest.endEvacVitalSignData_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.vitalSign.p, fieldName: "vitalSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.vitalSign1.p, fieldName: "vitalSign1", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.vitalSign2.p, fieldName: "vitalSign2", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.medConfFactor.p, fieldName: "medConfFactor", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

