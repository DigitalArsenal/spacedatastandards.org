// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Onorbit_Abridged_objectType_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case rocketBody = 0
  ///  No description available.
  case debris = 1
  ///  No description available.
  case payload = 2
  ///  No description available.
  case platform = 3
  ///  No description available.
  case manned = 4
  ///  No description available.
  case unknown = 5

  public static var max: Onorbit_Abridged_objectType_Enum { return .unknown }
  public static var min: Onorbit_Abridged_objectType_Enum { return .rocketBody }
}


public enum Onorbit_Abridged_category_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case unknown = 0
  ///  No description available.
  case onOrbit = 1
  ///  No description available.
  case decayed = 2
  ///  No description available.
  case catalogedWithoutState = 3
  ///  No description available.
  case launchNominal = 4
  ///  No description available.
  case analystSatellite = 5
  ///  No description available.
  case cislunar = 6
  ///  No description available.
  case lunar = 7
  ///  No description available.
  case hyperbolic = 8
  ///  No description available.
  case heliocentric = 9
  ///  No description available.
  case interplanetary = 10
  ///  No description available.
  case lagrangian = 11
  ///  No description available.
  case docked = 12

  public static var max: Onorbit_Abridged_category_Enum { return .docked }
  public static var min: Onorbit_Abridged_category_Enum { return .unknown }
}


public enum Onorbit_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Onorbit_Abridged_dataMode_Enum { return .exercise }
  public static var min: Onorbit_Abridged_dataMode_Enum { return .real }
}


///  /// Model object representing on-orbit objects or satellites in the system.
public struct Onorbit_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ONOR" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Onorbit_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case idOnOrbit = 4
    case classificationMarking = 6
    case satNo = 8
    case commonName = 10
    case constellation = 12
    case intlDes = 14
    case launchDate = 16
    case decayDate = 18
    case objectType = 20
    case origin = 22
    case missionNumber = 24
    case category = 26
    case lifetimeYears = 28
    case altName = 30
    case createdAt = 32
    case createdBy = 34
    case source = 36
    case dataMode = 38
    case launchSiteId = 40
    case countryCode = 42
    case origNetwork = 44
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Common name of the on-orbit object.
  ///  Example: /// Example: Example common name
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var commonName: String? { let o = _accessor.offset(VTOFFSET.commonName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var commonNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.commonName.v) }
  ///  Constellation to which this satellite belongs.
  ///  Example: /// Example: Big Dipper
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var constellation: String? { let o = _accessor.offset(VTOFFSET.constellation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var constellationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.constellation.v) }
  ///  International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.
  ///  Example: /// Example: 2021123ABC
  ///  Constraints: Minimum length = 0, Maximum length = 45
  public var intlDes: String? { let o = _accessor.offset(VTOFFSET.intlDes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var intlDesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.intlDes.v) }
  ///  Date of launch.
  ///  Example: /// Example: 2018-01-01
  ///  Constraints: No constraints specified.
  public var launchDate: String? { let o = _accessor.offset(VTOFFSET.launchDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchDate.v) }
  ///  Date of decay.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var decayDate: String? { let o = _accessor.offset(VTOFFSET.decayDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var decayDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.decayDate.v) }
  ///  Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.
  ///  Example: /// Example: PAYLOAD
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var objectType: Onorbit_Abridged_objectType_Enum { let o = _accessor.offset(VTOFFSET.objectType.v); return o == 0 ? .rocketBody : Onorbit_Abridged_objectType_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .rocketBody }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Mission number of the on-orbit object.
  ///  Example: /// Example: Expedition 1
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var missionNumber: String? { let o = _accessor.offset(VTOFFSET.missionNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var missionNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.missionNumber.v) }
  ///  Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).
  ///  Example: /// Example: Lunar
  ///  Constraints: Minimum length = 0, Maximum length = 45
  public var category: Onorbit_Abridged_category_Enum { let o = _accessor.offset(VTOFFSET.category.v); return o == 0 ? .unknown : Onorbit_Abridged_category_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .unknown }
  ///  Estimated lifetime of the on-orbit payload, if known.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var lifetimeYears: Int32 { let o = _accessor.offset(VTOFFSET.lifetimeYears.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Alternate name of the on-orbit object.
  ///  Example: /// Example: Alternate Name
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var altName: String? { let o = _accessor.offset(VTOFFSET.altName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altName.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Onorbit_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Onorbit_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Id of the associated launchSite entity.
  ///  Example: /// Example: LAUNCHSITE-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var launchSiteId: String? { let o = _accessor.offset(VTOFFSET.launchSiteId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchSiteIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchSiteId.v) }
  ///  The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: /// Example: US
  ///  Constraints: No constraints specified.
  public var countryCode: String? { let o = _accessor.offset(VTOFFSET.countryCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var countryCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.countryCode.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startOnorbit_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 21) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(commonName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: commonName, at: VTOFFSET.commonName.p) }
  public static func add(constellation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: constellation, at: VTOFFSET.constellation.p) }
  public static func add(intlDes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: intlDes, at: VTOFFSET.intlDes.p) }
  public static func add(launchDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchDate, at: VTOFFSET.launchDate.p) }
  public static func add(decayDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: decayDate, at: VTOFFSET.decayDate.p) }
  public static func add(objectType: Onorbit_Abridged_objectType_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: objectType.rawValue, def: 0, at: VTOFFSET.objectType.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(missionNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: missionNumber, at: VTOFFSET.missionNumber.p) }
  public static func add(category: Onorbit_Abridged_category_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: category.rawValue, def: 0, at: VTOFFSET.category.p) }
  public static func add(lifetimeYears: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lifetimeYears, def: 0, at: VTOFFSET.lifetimeYears.p) }
  public static func add(altName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altName, at: VTOFFSET.altName.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(dataMode: Onorbit_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(launchSiteId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchSiteId, at: VTOFFSET.launchSiteId.p) }
  public static func add(countryCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: countryCode, at: VTOFFSET.countryCode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endOnorbit_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createOnorbit_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    satNo: Int32 = 0,
    commonNameOffset commonName: Offset = Offset(),
    constellationOffset constellation: Offset = Offset(),
    intlDesOffset intlDes: Offset = Offset(),
    launchDateOffset launchDate: Offset = Offset(),
    decayDateOffset decayDate: Offset = Offset(),
    objectType: Onorbit_Abridged_objectType_Enum = .rocketBody,
    originOffset origin: Offset = Offset(),
    missionNumberOffset missionNumber: Offset = Offset(),
    category: Onorbit_Abridged_category_Enum = .unknown,
    lifetimeYears: Int32 = 0,
    altNameOffset altName: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    dataMode: Onorbit_Abridged_dataMode_Enum = .real,
    launchSiteIdOffset launchSiteId: Offset = Offset(),
    countryCodeOffset countryCode: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = Onorbit_Abridged.startOnorbit_Abridged(&fbb)
    Onorbit_Abridged.add(idOnOrbit: idOnOrbit, &fbb)
    Onorbit_Abridged.add(classificationMarking: classificationMarking, &fbb)
    Onorbit_Abridged.add(satNo: satNo, &fbb)
    Onorbit_Abridged.add(commonName: commonName, &fbb)
    Onorbit_Abridged.add(constellation: constellation, &fbb)
    Onorbit_Abridged.add(intlDes: intlDes, &fbb)
    Onorbit_Abridged.add(launchDate: launchDate, &fbb)
    Onorbit_Abridged.add(decayDate: decayDate, &fbb)
    Onorbit_Abridged.add(objectType: objectType, &fbb)
    Onorbit_Abridged.add(origin: origin, &fbb)
    Onorbit_Abridged.add(missionNumber: missionNumber, &fbb)
    Onorbit_Abridged.add(category: category, &fbb)
    Onorbit_Abridged.add(lifetimeYears: lifetimeYears, &fbb)
    Onorbit_Abridged.add(altName: altName, &fbb)
    Onorbit_Abridged.add(createdAt: createdAt, &fbb)
    Onorbit_Abridged.add(createdBy: createdBy, &fbb)
    Onorbit_Abridged.add(source: source, &fbb)
    Onorbit_Abridged.add(dataMode: dataMode, &fbb)
    Onorbit_Abridged.add(launchSiteId: launchSiteId, &fbb)
    Onorbit_Abridged.add(countryCode: countryCode, &fbb)
    Onorbit_Abridged.add(origNetwork: origNetwork, &fbb)
    return Onorbit_Abridged.endOnorbit_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.commonName.p, fieldName: "commonName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.constellation.p, fieldName: "constellation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.intlDes.p, fieldName: "intlDes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchDate.p, fieldName: "launchDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.decayDate.p, fieldName: "decayDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objectType.p, fieldName: "objectType", required: false, type: Onorbit_Abridged_objectType_Enum.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.missionNumber.p, fieldName: "missionNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.category.p, fieldName: "category", required: false, type: Onorbit_Abridged_category_Enum.self)
    try _v.visit(field: VTOFFSET.lifetimeYears.p, fieldName: "lifetimeYears", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.altName.p, fieldName: "altName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Onorbit_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.launchSiteId.p, fieldName: "launchSiteId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.countryCode.p, fieldName: "countryCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

