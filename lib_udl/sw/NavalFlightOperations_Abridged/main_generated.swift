// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection that specifies the naval flight operations for this ATO.
public struct NavalFlightOperations_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "NAVA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: NavalFlightOperations_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case shipName = 4
    case fltOpStart = 6
    case fltOpStop = 8
    case schdLaunchRcvyTime = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The name of a ship or maritime vessel. Specify UNKNOWN if name is not known.
  ///  Example: /// Example: USS WASP
  ///  Constraints: Minimum length = 1, Maximum length = 48
  public var shipName: String? { let o = _accessor.offset(VTOFFSET.shipName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var shipNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.shipName.v) }
  ///  The time when flight operations begin in ISO8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  public var fltOpStart: String? { let o = _accessor.offset(VTOFFSET.fltOpStart.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fltOpStartSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fltOpStart.v) }
  ///  The time when flight operations end in ISO8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  public var fltOpStop: String? { let o = _accessor.offset(VTOFFSET.fltOpStop.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fltOpStopSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fltOpStop.v) }
  ///  An array of times at which an aircraft will be launched and/or recovered in ISO8601 UTC format with millisecond precision.
  ///  Example: /// Example: ['2021-02-25T12:00:00.123Z']
  ///  Constraints: No constraints specified.
  public var hasSchdLaunchRcvyTime: Bool { let o = _accessor.offset(VTOFFSET.schdLaunchRcvyTime.v); return o == 0 ? false : true }
  public var schdLaunchRcvyTimeCount: Int32 { let o = _accessor.offset(VTOFFSET.schdLaunchRcvyTime.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func schdLaunchRcvyTime(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.schdLaunchRcvyTime.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startNavalFlightOperations_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(shipName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shipName, at: VTOFFSET.shipName.p) }
  public static func add(fltOpStart: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fltOpStart, at: VTOFFSET.fltOpStart.p) }
  public static func add(fltOpStop: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fltOpStop, at: VTOFFSET.fltOpStop.p) }
  public static func addVectorOf(schdLaunchRcvyTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: schdLaunchRcvyTime, at: VTOFFSET.schdLaunchRcvyTime.p) }
  public static func endNavalFlightOperations_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createNavalFlightOperations_Abridged(
    _ fbb: inout FlatBufferBuilder,
    shipNameOffset shipName: Offset = Offset(),
    fltOpStartOffset fltOpStart: Offset = Offset(),
    fltOpStopOffset fltOpStop: Offset = Offset(),
    schdLaunchRcvyTimeVectorOffset schdLaunchRcvyTime: Offset = Offset()
  ) -> Offset {
    let __start = NavalFlightOperations_Abridged.startNavalFlightOperations_Abridged(&fbb)
    NavalFlightOperations_Abridged.add(shipName: shipName, &fbb)
    NavalFlightOperations_Abridged.add(fltOpStart: fltOpStart, &fbb)
    NavalFlightOperations_Abridged.add(fltOpStop: fltOpStop, &fbb)
    NavalFlightOperations_Abridged.addVectorOf(schdLaunchRcvyTime: schdLaunchRcvyTime, &fbb)
    return NavalFlightOperations_Abridged.endNavalFlightOperations_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.shipName.p, fieldName: "shipName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fltOpStart.p, fieldName: "fltOpStart", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fltOpStop.p, fieldName: "fltOpStop", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.schdLaunchRcvyTime.p, fieldName: "schdLaunchRcvyTime", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

