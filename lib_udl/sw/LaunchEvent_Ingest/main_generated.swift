// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum LaunchEvent_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: LaunchEvent_Ingest_dataMode_Enum { return .exercise }
  public static var min: LaunchEvent_Ingest_dataMode_Enum { return .real }
}


///  /// Information on known launch events.
public struct LaunchEvent_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "LAUN" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: LaunchEvent_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case idOnOrbit = 6
    case origObjectId = 8
    case classificationMarking = 10
    case derivedFrom = 12
    case declassificationDate = 14
    case declassificationString = 16
    case msgCreateDate = 18
    case launchFailureCode = 20
    case launchDate = 22
    case beNumber = 24
    case oSuffix = 26
    case launchFacilityName = 28
    case createdAt = 30
    case createdBy = 32
    case origin = 34
    case source = 36
    case dataMode = 38
    case origNetwork = 40
    case satNo = 42
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: LAUNCHEVENT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Unique identifier of the target on-orbit object, if correlated.
  ///  Example: /// Example: REF-ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Optional target-id, if missing in UDL.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The sources or SCG references from which the classification of this data is derived.
  ///  Example: /// Example: Example source
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var derivedFrom: String? { let o = _accessor.offset(VTOFFSET.derivedFrom.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var derivedFromSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.derivedFrom.v) }
  ///  The declassification date of this data, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:02:02.123Z
  ///  Constraints: No constraints specified.
  public var declassificationDate: String? { let o = _accessor.offset(VTOFFSET.declassificationDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var declassificationDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.declassificationDate.v) }
  ///  Declassification string of this data.
  ///  Example: /// Example: Example Declassification
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var declassificationString: String? { let o = _accessor.offset(VTOFFSET.declassificationString.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var declassificationStringSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.declassificationString.v) }
  ///  Timestamp of the originating message in ISO8601 UTC format.
  ///  Example: /// Example: 2020-01-01T00:00:00.123Z
  ///  Constraints: No constraints specified.
  public var msgCreateDate: String? { let o = _accessor.offset(VTOFFSET.msgCreateDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msgCreateDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msgCreateDate.v) }
  ///  The DISOB launch Failure Code, if applicable.
  ///  Example: /// Example: Example failure code
  ///  Constraints: Minimum length = 0, Maximum length = 100
  public var launchFailureCode: String? { let o = _accessor.offset(VTOFFSET.launchFailureCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchFailureCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchFailureCode.v) }
  ///  The launch date, in ISO8601 UTC format.
  ///  Example: /// Example: 2020-01-01T00:00:00.123Z
  ///  Constraints: No constraints specified.
  public var launchDate: String? { let o = _accessor.offset(VTOFFSET.launchDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchDate.v) }
  ///  The Basic Encyclopedia Number, if applicable.
  ///  Example: /// Example: ENC-123
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var beNumber: String? { let o = _accessor.offset(VTOFFSET.beNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var beNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.beNumber.v) }
  ///  The OSuffix, if applicable.
  ///  Example: /// Example: oSuffix
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var oSuffix: String? { let o = _accessor.offset(VTOFFSET.oSuffix.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var oSuffixSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.oSuffix.v) }
  ///  The Launch facility name.
  ///  Example: /// Example: Example launch facility name
  ///  Constraints: Minimum length = 0, Maximum length = 100
  public var launchFacilityName: String? { let o = _accessor.offset(VTOFFSET.launchFacilityName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchFacilityNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchFacilityName.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: LaunchEvent_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : LaunchEvent_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public static func startLaunchEvent_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 20) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(derivedFrom: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: derivedFrom, at: VTOFFSET.derivedFrom.p) }
  public static func add(declassificationDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: declassificationDate, at: VTOFFSET.declassificationDate.p) }
  public static func add(declassificationString: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: declassificationString, at: VTOFFSET.declassificationString.p) }
  public static func add(msgCreateDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msgCreateDate, at: VTOFFSET.msgCreateDate.p) }
  public static func add(launchFailureCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchFailureCode, at: VTOFFSET.launchFailureCode.p) }
  public static func add(launchDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchDate, at: VTOFFSET.launchDate.p) }
  public static func add(beNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: beNumber, at: VTOFFSET.beNumber.p) }
  public static func add(oSuffix: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: oSuffix, at: VTOFFSET.oSuffix.p) }
  public static func add(launchFacilityName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchFacilityName, at: VTOFFSET.launchFacilityName.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(dataMode: LaunchEvent_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func endLaunchEvent_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createLaunchEvent_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    origObjectIdOffset origObjectId: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    derivedFromOffset derivedFrom: Offset = Offset(),
    declassificationDateOffset declassificationDate: Offset = Offset(),
    declassificationStringOffset declassificationString: Offset = Offset(),
    msgCreateDateOffset msgCreateDate: Offset = Offset(),
    launchFailureCodeOffset launchFailureCode: Offset = Offset(),
    launchDateOffset launchDate: Offset = Offset(),
    beNumberOffset beNumber: Offset = Offset(),
    oSuffixOffset oSuffix: Offset = Offset(),
    launchFacilityNameOffset launchFacilityName: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    dataMode: LaunchEvent_Ingest_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset(),
    satNo: Int32 = 0
  ) -> Offset {
    let __start = LaunchEvent_Ingest.startLaunchEvent_Ingest(&fbb)
    LaunchEvent_Ingest.add(id: id, &fbb)
    LaunchEvent_Ingest.add(idOnOrbit: idOnOrbit, &fbb)
    LaunchEvent_Ingest.add(origObjectId: origObjectId, &fbb)
    LaunchEvent_Ingest.add(classificationMarking: classificationMarking, &fbb)
    LaunchEvent_Ingest.add(derivedFrom: derivedFrom, &fbb)
    LaunchEvent_Ingest.add(declassificationDate: declassificationDate, &fbb)
    LaunchEvent_Ingest.add(declassificationString: declassificationString, &fbb)
    LaunchEvent_Ingest.add(msgCreateDate: msgCreateDate, &fbb)
    LaunchEvent_Ingest.add(launchFailureCode: launchFailureCode, &fbb)
    LaunchEvent_Ingest.add(launchDate: launchDate, &fbb)
    LaunchEvent_Ingest.add(beNumber: beNumber, &fbb)
    LaunchEvent_Ingest.add(oSuffix: oSuffix, &fbb)
    LaunchEvent_Ingest.add(launchFacilityName: launchFacilityName, &fbb)
    LaunchEvent_Ingest.add(createdAt: createdAt, &fbb)
    LaunchEvent_Ingest.add(createdBy: createdBy, &fbb)
    LaunchEvent_Ingest.add(origin: origin, &fbb)
    LaunchEvent_Ingest.add(source: source, &fbb)
    LaunchEvent_Ingest.add(dataMode: dataMode, &fbb)
    LaunchEvent_Ingest.add(origNetwork: origNetwork, &fbb)
    LaunchEvent_Ingest.add(satNo: satNo, &fbb)
    return LaunchEvent_Ingest.endLaunchEvent_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.derivedFrom.p, fieldName: "derivedFrom", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.declassificationDate.p, fieldName: "declassificationDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.declassificationString.p, fieldName: "declassificationString", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msgCreateDate.p, fieldName: "msgCreateDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchFailureCode.p, fieldName: "launchFailureCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchDate.p, fieldName: "launchDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.beNumber.p, fieldName: "beNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.oSuffix.p, fieldName: "oSuffix", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchFacilityName.p, fieldName: "launchFacilityName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: LaunchEvent_Ingest_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    _v.finish()
  }
}

