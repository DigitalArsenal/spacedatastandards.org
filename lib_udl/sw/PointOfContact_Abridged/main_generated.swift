// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Point of contacts for scheduling or modifying the route.
public struct PointOfContact_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "POIN" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: PointOfContact_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case pocSequenceId = 4
    case pocTypeName = 6
    case pocName = 8
    case office = 10
    case username = 12
    case rank = 14
    case pocOrg = 16
    case phone = 18
    case remark = 20
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Sequencing field for point of contact.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var pocSequenceId: Int32 { let o = _accessor.offset(VTOFFSET.pocSequenceId.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  A code or name that represents the contact's role in association to the track route (ex. Originator, Scheduler, Maintainer, etc.).
  ///  Example: /// Example: Originator
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var pocTypeName: String? { let o = _accessor.offset(VTOFFSET.pocTypeName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pocTypeNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pocTypeName.v) }
  ///  The name of the contact.
  ///  Example: /// Example: Fred Smith
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var pocName: String? { let o = _accessor.offset(VTOFFSET.pocName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pocNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pocName.v) }
  ///  Office name for which the contact belongs.
  ///  Example: /// Example: A34
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var office: String? { let o = _accessor.offset(VTOFFSET.office.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var officeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.office.v) }
  ///  The username of the contact.
  ///  Example: /// Example: fgsmith
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var username: String? { let o = _accessor.offset(VTOFFSET.username.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var usernameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.username.v) }
  ///  The rank of contact.
  ///  Example: /// Example: Capt
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var rank: String? { let o = _accessor.offset(VTOFFSET.rank.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rankSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rank.v) }
  ///  Organization name for which the contact belongs.
  ///  Example: /// Example: HQAF
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var pocOrg: String? { let o = _accessor.offset(VTOFFSET.pocOrg.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pocOrgSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pocOrg.v) }
  ///  Phone number of the contact.
  ///  Example: /// Example: 8675309
  ///  Constraints: Minimum length = 0, Maximum length = 45
  public var phone: String? { let o = _accessor.offset(VTOFFSET.phone.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var phoneSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.phone.v) }
  ///  Text of the remark.
  ///  Example: /// Example: POC remark.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var remark: String? { let o = _accessor.offset(VTOFFSET.remark.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var remarkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.remark.v) }
  public static func startPointOfContact_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 9) }
  public static func add(pocSequenceId: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pocSequenceId, def: 0, at: VTOFFSET.pocSequenceId.p) }
  public static func add(pocTypeName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pocTypeName, at: VTOFFSET.pocTypeName.p) }
  public static func add(pocName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pocName, at: VTOFFSET.pocName.p) }
  public static func add(office: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: office, at: VTOFFSET.office.p) }
  public static func add(username: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: username, at: VTOFFSET.username.p) }
  public static func add(rank: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rank, at: VTOFFSET.rank.p) }
  public static func add(pocOrg: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pocOrg, at: VTOFFSET.pocOrg.p) }
  public static func add(phone: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: phone, at: VTOFFSET.phone.p) }
  public static func add(remark: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: remark, at: VTOFFSET.remark.p) }
  public static func endPointOfContact_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createPointOfContact_Abridged(
    _ fbb: inout FlatBufferBuilder,
    pocSequenceId: Int32 = 0,
    pocTypeNameOffset pocTypeName: Offset = Offset(),
    pocNameOffset pocName: Offset = Offset(),
    officeOffset office: Offset = Offset(),
    usernameOffset username: Offset = Offset(),
    rankOffset rank: Offset = Offset(),
    pocOrgOffset pocOrg: Offset = Offset(),
    phoneOffset phone: Offset = Offset(),
    remarkOffset remark: Offset = Offset()
  ) -> Offset {
    let __start = PointOfContact_Abridged.startPointOfContact_Abridged(&fbb)
    PointOfContact_Abridged.add(pocSequenceId: pocSequenceId, &fbb)
    PointOfContact_Abridged.add(pocTypeName: pocTypeName, &fbb)
    PointOfContact_Abridged.add(pocName: pocName, &fbb)
    PointOfContact_Abridged.add(office: office, &fbb)
    PointOfContact_Abridged.add(username: username, &fbb)
    PointOfContact_Abridged.add(rank: rank, &fbb)
    PointOfContact_Abridged.add(pocOrg: pocOrg, &fbb)
    PointOfContact_Abridged.add(phone: phone, &fbb)
    PointOfContact_Abridged.add(remark: remark, &fbb)
    return PointOfContact_Abridged.endPointOfContact_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.pocSequenceId.p, fieldName: "pocSequenceId", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.pocTypeName.p, fieldName: "pocTypeName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pocName.p, fieldName: "pocName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.office.p, fieldName: "office", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.username.p, fieldName: "username", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rank.p, fieldName: "rank", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pocOrg.p, fieldName: "pocOrg", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.phone.p, fieldName: "phone", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.remark.p, fieldName: "remark", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

