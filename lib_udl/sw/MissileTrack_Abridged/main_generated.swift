// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum MissileTrack_Abridged_env_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
  case air = 0
  ///  On the surface of dry land.
  case land = 1
  ///  Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
  case space = 2
  ///  On the surface of a body of water.
  case surface = 3
  ///  Below the surface of a body of water.
  case subsurface = 4
  ///  Environment is not known.
  case unknown = 5

  public static var max: MissileTrack_Abridged_env_Enum { return .unknown }
  public static var min: MissileTrack_Abridged_env_Enum { return .air }
}


public enum MissileTrack_Abridged_objIdent_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  case assumedFriend = 0
  ///  Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  case friend = 1
  ///  Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  case hostile = 2
  ///  Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  case neutral = 3
  ///  Track object which has not been evaluated.
  case pending = 4
  ///  Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  case suspect = 5
  ///  Track object which has been evaluated and does not meet criteria for any standard identity.
  case unknown = 6

  public static var max: MissileTrack_Abridged_objIdent_Enum { return .unknown }
  public static var min: MissileTrack_Abridged_objIdent_Enum { return .assumedFriend }
}


public enum MissileTrack_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: MissileTrack_Abridged_dataMode_Enum { return .exercise }
  public static var min: MissileTrack_Abridged_dataMode_Enum { return .real }
}


///  /// These services provide operations for querying of all available missile track details and amplifying missile data. A missile track is a position and optionally a heading/velocity of an object across all environments at a particular timestamp. It also includes optional information regarding the identity/type of missile, impact location, launch location and other amplifying object data, if known.
public struct MissileTrack_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "MISS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: MissileTrack_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case msgType = 8
    case msgSubType = 10
    case msgCreateDate = 12
    case env = 14
    case objType = 16
    case objTypeConf = 18
    case objPlat = 20
    case objIdent = 22
    case spaceAmp = 24
    case objAct = 26
    case spaceSpecType = 28
    case acftSubType = 30
    case name = 32
    case callSign = 34
    case lostTrkInd = 36
    case trackId = 38
    case parentTrackId = 40
    case muidSrcTrk = 42
    case muidSrc = 44
    case alert = 46
    case mslStatus = 48
    case ts = 50
    case aouRptType = 52
    case aouRptData = 54
    case containment = 56
    case trkConf = 58
    case trkQual = 60
    case angElev = 62
    case senMode = 64
    case infoSource = 66
    case boosting = 68
    case polarSingLocLat = 70
    case polarSingLocLon = 72
    case emgInd = 74
    case dropPtInd = 76
    case spaceAmpConf = 78
    case launchTime = 80
    case launchLat = 82
    case launchLon = 84
    case azCorr = 86
    case burnoutAlt = 88
    case launchAouType = 90
    case launchAouData = 92
    case impactTime = 94
    case impactLat = 96
    case impactLon = 98
    case impactAouType = 100
    case impactAouData = 102
    case vectors = 104
    case origNetwork = 106
    case createdAt = 108
    case createdBy = 110
    case source = 112
    case origin = 114
    case dataMode = 116
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: MissileTrack_ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The type of external message from which this request originated.
  ///  Example: /// Example: MSG-TYPE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var msgType: String? { let o = _accessor.offset(VTOFFSET.msgType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msgTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msgType.v) }
  ///  The message subtype is a finer grain categorization of message types as many messages can contain a variety of data content within the same structure.  Examples include but are not limited to Initial, Final, Launch, Update, etc.  Users should consult the appropriate documentation, based on the message type, for the definitions of the subtypes that apply to that message.
  ///  Example: /// Example: Update
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var msgSubType: String? { let o = _accessor.offset(VTOFFSET.msgSubType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msgSubTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msgSubType.v) }
  ///  The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-04-25T08:17:01.346Z
  ///  Constraints: No constraints specified.
  public var msgCreateDate: String? { let o = _accessor.offset(VTOFFSET.msgCreateDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msgCreateDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msgCreateDate.v) }
  ///  The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
  ///   AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
  ///   LAND: On the surface of dry land.
  ///   SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
  ///   SURFACE: On the surface of a body of water.
  ///   SUBSURFACE: Below the surface of a body of water.
  ///   UNKNOWN: Environment is not known.
  ///  Example: /// Example: AIR
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var env: MissileTrack_Abridged_env_Enum { let o = _accessor.offset(VTOFFSET.env.v); return o == 0 ? .air : MissileTrack_Abridged_env_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .air }
  ///  The type of object to which this record refers. The object type may be updated in later records based on assessment of additional data.
  ///  Example: /// Example: Ballistic
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var objType: String? { let o = _accessor.offset(VTOFFSET.objType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.objType.v) }
  ///  Confidence of the object type, 0-100.
  ///  Example: /// Example: 90
  ///  Constraints: No constraints specified.
  public var objTypeConf: Int32 { let o = _accessor.offset(VTOFFSET.objTypeConf.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Space Platform field along with the Space Activity field further defines the identity of a Space track (examples: SATELLITE, WEAPON, PATROL). The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
  ///  Example: /// Example: WEAPON
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var objPlat: String? { let o = _accessor.offset(VTOFFSET.objPlat.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objPlatSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.objPlat.v) }
  ///  The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
  ///   ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  ///   FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  ///   HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  ///   NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  ///   PENDING: Track object which has not been evaluated.
  ///   SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  ///   UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  ///  Example: /// Example: FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var objIdent: MissileTrack_Abridged_objIdent_Enum { let o = _accessor.offset(VTOFFSET.objIdent.v); return o == 0 ? .assumedFriend : MissileTrack_Abridged_objIdent_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .assumedFriend }
  ///  Space amplification indicates additional information on the space environment being reported (examples: NUCLEAR WARHEAD, FUEL-AIR EXPLOSIVE WARHEAD, DEBRIS).
  ///  Example: /// Example: NUCLEAR WARHEAD
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var spaceAmp: String? { let o = _accessor.offset(VTOFFSET.spaceAmp.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var spaceAmpSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.spaceAmp.v) }
  ///  Space activity (examples: RECONNAISSANCE, ANTISPACE WARFARE, TELEVISION). The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
  ///  Example: /// Example: HOLDING
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var objAct: String? { let o = _accessor.offset(VTOFFSET.objAct.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objActSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.objAct.v) }
  ///  Specific type of point or track with an environment of space.
  ///  Example: /// Example: SS-21_MOD_2_CRBM
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var spaceSpecType: String? { let o = _accessor.offset(VTOFFSET.spaceSpecType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var spaceSpecTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.spaceSpecType.v) }
  ///  Subtype is a finer grain categorization of missile types. Examples include but are not limited to SRBM, MRBM, IRBM, LRBM, ICBM, SLBM. 
  ///  &nbsp;SRBM - Short-Range Ballistic Missile
  ///  &nbsp;MRBM - Medium-Range Ballistic Missile
  ///  &nbsp;IRBM - Intermediate-Range Ballistic Missile
  ///  &nbsp;LRBM - Long-Range Ballistic Missile
  ///  &nbsp;ICBM - Intercontinental Ballistic Missile
  ///  &nbsp;SLBM - Submarine-Launched Ballistic Missile.
  ///  Example: /// Example: SLBM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var acftSubType: String? { let o = _accessor.offset(VTOFFSET.acftSubType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var acftSubTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.acftSubType.v) }
  ///  Track name.
  ///  Example: /// Example: TRACK-NAME
  ///  Constraints: Minimum length = 0, Maximum length = 48
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  The call sign currently assigned to the track object.
  ///  Example: /// Example: Charlie
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var callSign: String? { let o = _accessor.offset(VTOFFSET.callSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var callSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.callSign.v) }
  ///  Indicates whether or not the missile is considered lost.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var lostTrkInd: Bool { let o = _accessor.offset(VTOFFSET.lostTrkInd.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Track ID within the originating system.
  ///  Example: /// Example: 102288
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var trackId: String? { let o = _accessor.offset(VTOFFSET.trackId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var trackIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.trackId.v) }
  ///  Track ID of the parent track, within the originating system, from which the track was developed.
  ///  Example: /// Example: 102288
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var parentTrackId: String? { let o = _accessor.offset(VTOFFSET.parentTrackId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var parentTrackIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.parentTrackId.v) }
  ///  Track ID for the source of the missile-unique identifier.
  ///  Example: /// Example: MUID-SRC-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var muidSrcTrk: String? { let o = _accessor.offset(VTOFFSET.muidSrcTrk.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var muidSrcTrkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.muidSrcTrk.v) }
  ///  Source of the missile-unique identifier (MUID).
  ///  Example: /// Example: MUID-SRC
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var muidSrc: String? { let o = _accessor.offset(VTOFFSET.muidSrc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var muidSrcSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.muidSrc.v) }
  ///  A track may be designated as a non-alert track or an alert track.
  ///  Examples include but are not limited to:
  ///  &nbsp;Non-alert tracks – choose None (Blank).
  ///  &nbsp;Alert tracks – enter the proper alert classification:
  ///  &nbsp;HIT - High Interest Track
  ///  &nbsp;TGT - Target
  ///  &nbsp;SUS - Suspect Carrier
  ///  &nbsp;NSP - Cleared Suspect.
  ///  Example: /// Example: HIT
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var alert: String? { let o = _accessor.offset(VTOFFSET.alert.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var alertSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.alert.v) }
  ///  Missile status enumeration examples include but are not limited to:
  ///  &nbsp;AT LAUNCH 
  ///  &nbsp;AT OBSERVATION 
  ///  &nbsp;FLYING 
  ///  &nbsp;IMPACTED 
  ///  &nbsp;LOST 
  ///  &nbsp;STALE
  ///  &nbsp;DEBRIS.
  ///  Example: /// Example: AT LAUNCH
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var mslStatus: String? { let o = _accessor.offset(VTOFFSET.mslStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var mslStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.mslStatus.v) }
  ///  The receipt time of the data by the processing system, in ISO8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var ts: String? { let o = _accessor.offset(VTOFFSET.ts.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ts.v) }
  ///  The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
  ///  Example: /// Example: ELLIPSE
  ///  Constraints: Minimum length = 0, Maximum length = 40
  public var aouRptType: String? { let o = _accessor.offset(VTOFFSET.aouRptType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aouRptTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aouRptType.v) }
  ///  Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
  ///  &nbsp;ELLIPSE:
  ///  &nbsp;&nbsp;brg - orientation in degrees of the ellipse
  ///  &nbsp;&nbsp;a1 - semi-major axis in kilometers
  ///  &nbsp;&nbsp;a2 - semi-minor axis in kilometers
  ///  &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
  ///  &nbsp;&nbsp;brg - orientation in degrees of the bearing box
  ///  &nbsp;&nbsp;a1 - length of bearing box in kilometers
  ///  &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
  ///  &nbsp;OTHER (All other type values):
  ///  &nbsp;&nbsp;brg - line of bearing in degrees true
  ///  &nbsp;&nbsp;a1 - bearing error in degrees
  ///  &nbsp;&nbsp;a2 - estimated range in kilometers.
  ///  Example: /// Example: [34.3, 26.5, 1.2]
  ///  Constraints: No constraints specified.
  public var hasAouRptData: Bool { let o = _accessor.offset(VTOFFSET.aouRptData.v); return o == 0 ? false : true }
  public var aouRptDataCount: Int32 { let o = _accessor.offset(VTOFFSET.aouRptData.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func aouRptData(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.aouRptData.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The percentage of time that the estimated AoU will "cover" the true position of the track.
  ///  Example: /// Example: 90.64
  ///  Constraints: No constraints specified.
  public var containment: Double { let o = _accessor.offset(VTOFFSET.containment.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
  ///  Example: /// Example: 0.95
  ///  Constraints: No constraints specified.
  public var trkConf: Double { let o = _accessor.offset(VTOFFSET.trkConf.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Track Quality is reported as an integer from 0-15. Track Quality specifies the reliability of the positional information of a reported track, with higher values indicating higher track quality; i.e., lower errors in reported position.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var trkQual: Int32 { let o = _accessor.offset(VTOFFSET.trkQual.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Angle of elevation/depression between observer and missile in degrees.
  ///  Example: /// Example: 15.2
  ///  Constraints: No constraints specified.
  public var angElev: Double { let o = _accessor.offset(VTOFFSET.angElev.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last report type received from the sensor (for example, OBSBO = observation burnout).
  ///  Example: /// Example: OBSBO
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var senMode: String? { let o = _accessor.offset(VTOFFSET.senMode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var senModeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.senMode.v) }
  ///  Source code for source of information used to detect track.
  ///  Example: /// Example: S1
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var infoSource: String? { let o = _accessor.offset(VTOFFSET.infoSource.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var infoSourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.infoSource.v) }
  ///  Indicates whether or not the missile is currently in a state of boosting.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var boosting: Bool { let o = _accessor.offset(VTOFFSET.boosting.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Azimuth corridor reference point latitude.
  ///  Example: /// Example: 19.88550102
  ///  Constraints: No constraints specified.
  public var polarSingLocLat: Double { let o = _accessor.offset(VTOFFSET.polarSingLocLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Azimuth corridor reference point longitude.
  ///  Example: /// Example: 46.74596844
  ///  Constraints: No constraints specified.
  public var polarSingLocLon: Double { let o = _accessor.offset(VTOFFSET.polarSingLocLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Indicates whether or not a track has an emergency.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var emgInd: Bool { let o = _accessor.offset(VTOFFSET.emgInd.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The drop-point indicator setting.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var dropPtInd: Bool { let o = _accessor.offset(VTOFFSET.dropPtInd.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Confidence level of the amplifying characteristics. Values range from 0 to 6.
  ///  Example: /// Example: 6
  ///  Constraints: No constraints specified.
  public var spaceAmpConf: Int32 { let o = _accessor.offset(VTOFFSET.spaceAmpConf.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Missile launch timestamp in ISO8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var launchTime: String? { let o = _accessor.offset(VTOFFSET.launchTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchTime.v) }
  ///  WGS-84 latitude of the missile launch point, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 19.88550102
  ///  Constraints: No constraints specified.
  public var launchLat: Double { let o = _accessor.offset(VTOFFSET.launchLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 longitude of the missile launch point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 46.74596844
  ///  Constraints: No constraints specified.
  public var launchLon: Double { let o = _accessor.offset(VTOFFSET.launchLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Missile azimuth corridor data.
  ///  Example: /// Example: 12.876
  ///  Constraints: No constraints specified.
  public var azCorr: Double { let o = _accessor.offset(VTOFFSET.azCorr.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Track point burnout altitude relative to WGS-84 ellipsoid, in kilometers.
  ///  Example: /// Example: 30567.452
  ///  Constraints: No constraints specified.
  public var burnoutAlt: Double { let o = _accessor.offset(VTOFFSET.burnoutAlt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
  ///  Example: /// Example: ELLIPSE
  ///  Constraints: Minimum length = 0, Maximum length = 40
  public var launchAouType: String? { let o = _accessor.offset(VTOFFSET.launchAouType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchAouTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchAouType.v) }
  ///  Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
  ///  &nbsp;ELLIPSE:
  ///  &nbsp;&nbsp;brg - orientation in degrees of the ellipse
  ///  &nbsp;&nbsp;a1 - semi-major axis in kilometers
  ///  &nbsp;&nbsp;a2 - semi-minor axis in kilometers
  ///  &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
  ///  &nbsp;&nbsp;brg - orientation in degrees of the bearing box
  ///  &nbsp;&nbsp;a1 - length of bearing box in kilometers
  ///  &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
  ///  &nbsp;OTHER (All other type values):
  ///  &nbsp;&nbsp;brg - line of bearing in degrees true
  ///  &nbsp;&nbsp;a1 - bearing error in degrees
  ///  &nbsp;&nbsp;a2 - estimated range in kilometers.
  ///  Example: /// Example: [1.23, 2.34, 3.45]
  ///  Constraints: No constraints specified.
  public var hasLaunchAouData: Bool { let o = _accessor.offset(VTOFFSET.launchAouData.v); return o == 0 ? false : true }
  public var launchAouDataCount: Int32 { let o = _accessor.offset(VTOFFSET.launchAouData.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func launchAouData(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.launchAouData.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Estimated time of impact timestamp in ISO8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var impactTime: String? { let o = _accessor.offset(VTOFFSET.impactTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var impactTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.impactTime.v) }
  ///  WGS-84 latitude of the missile object impact point, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 19.88550102
  ///  Constraints: No constraints specified.
  public var impactLat: Double { let o = _accessor.offset(VTOFFSET.impactLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 longitude of the missile object impact point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 46.74596844
  ///  Constraints: No constraints specified.
  public var impactLon: Double { let o = _accessor.offset(VTOFFSET.impactLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
  ///  Example: /// Example: ELLIPSE
  ///  Constraints: Minimum length = 0, Maximum length = 40
  public var impactAouType: String? { let o = _accessor.offset(VTOFFSET.impactAouType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var impactAouTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.impactAouType.v) }
  ///  Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
  ///  &nbsp;ELLIPSE:
  ///  &nbsp;&nbsp;brg - orientation in degrees of the ellipse
  ///  &nbsp;&nbsp;a1 - semi-major axis in kilometers
  ///  &nbsp;&nbsp;a2 - semi-minor axis in kilometers
  ///  &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
  ///  &nbsp;&nbsp;brg - orientation in degrees of the bearing box
  ///  &nbsp;&nbsp;a1 - length of bearing box in kilometers
  ///  &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
  ///  &nbsp;OTHER (All other type values):
  ///  &nbsp;&nbsp;brg - line of bearing in degrees true
  ///  &nbsp;&nbsp;a1 - bearing error in degrees
  ///  &nbsp;&nbsp;a2 - estimated range in kilometers.
  ///  Example: /// Example: [34.3, 26.5, 1.2]
  ///  Constraints: No constraints specified.
  public var hasImpactAouData: Bool { let o = _accessor.offset(VTOFFSET.impactAouData.v); return o == 0 ? false : true }
  public var impactAouDataCount: Int32 { let o = _accessor.offset(VTOFFSET.impactAouData.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func impactAouData(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.impactAouData.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of MissileTrackVector objects. Missile track vectors are cartesian vectors of position, velocity, and acceleration that, together with their time, 'epoch', uniquely determine the trajectory of the missile. ECEF is the preferred coordinate frame but in some cases data may be in another frame as specified by 'referenceFrame', depending on the provider.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasVectors: Bool { let o = _accessor.offset(VTOFFSET.vectors.v); return o == 0 ? false : true }
  public var vectorsCount: Int32 { let o = _accessor.offset(VTOFFSET.vectors.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func vectors(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.vectors.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2021-02-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: MissileTrack_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : MissileTrack_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startMissileTrack_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 57) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(msgType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msgType, at: VTOFFSET.msgType.p) }
  public static func add(msgSubType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msgSubType, at: VTOFFSET.msgSubType.p) }
  public static func add(msgCreateDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msgCreateDate, at: VTOFFSET.msgCreateDate.p) }
  public static func add(env: MissileTrack_Abridged_env_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: env.rawValue, def: 0, at: VTOFFSET.env.p) }
  public static func add(objType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: objType, at: VTOFFSET.objType.p) }
  public static func add(objTypeConf: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: objTypeConf, def: 0, at: VTOFFSET.objTypeConf.p) }
  public static func add(objPlat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: objPlat, at: VTOFFSET.objPlat.p) }
  public static func add(objIdent: MissileTrack_Abridged_objIdent_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: objIdent.rawValue, def: 0, at: VTOFFSET.objIdent.p) }
  public static func add(spaceAmp: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: spaceAmp, at: VTOFFSET.spaceAmp.p) }
  public static func add(objAct: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: objAct, at: VTOFFSET.objAct.p) }
  public static func add(spaceSpecType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: spaceSpecType, at: VTOFFSET.spaceSpecType.p) }
  public static func add(acftSubType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: acftSubType, at: VTOFFSET.acftSubType.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(callSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callSign, at: VTOFFSET.callSign.p) }
  public static func add(lostTrkInd: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lostTrkInd, def: false,
   at: VTOFFSET.lostTrkInd.p) }
  public static func add(trackId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trackId, at: VTOFFSET.trackId.p) }
  public static func add(parentTrackId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: parentTrackId, at: VTOFFSET.parentTrackId.p) }
  public static func add(muidSrcTrk: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: muidSrcTrk, at: VTOFFSET.muidSrcTrk.p) }
  public static func add(muidSrc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: muidSrc, at: VTOFFSET.muidSrc.p) }
  public static func add(alert: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: alert, at: VTOFFSET.alert.p) }
  public static func add(mslStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mslStatus, at: VTOFFSET.mslStatus.p) }
  public static func add(ts: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ts, at: VTOFFSET.ts.p) }
  public static func add(aouRptType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aouRptType, at: VTOFFSET.aouRptType.p) }
  public static func addVectorOf(aouRptData: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aouRptData, at: VTOFFSET.aouRptData.p) }
  public static func add(containment: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: containment, def: 0.0, at: VTOFFSET.containment.p) }
  public static func add(trkConf: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: trkConf, def: 0.0, at: VTOFFSET.trkConf.p) }
  public static func add(trkQual: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: trkQual, def: 0, at: VTOFFSET.trkQual.p) }
  public static func add(angElev: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: angElev, def: 0.0, at: VTOFFSET.angElev.p) }
  public static func add(senMode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: senMode, at: VTOFFSET.senMode.p) }
  public static func add(infoSource: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: infoSource, at: VTOFFSET.infoSource.p) }
  public static func add(boosting: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: boosting, def: false,
   at: VTOFFSET.boosting.p) }
  public static func add(polarSingLocLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: polarSingLocLat, def: 0.0, at: VTOFFSET.polarSingLocLat.p) }
  public static func add(polarSingLocLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: polarSingLocLon, def: 0.0, at: VTOFFSET.polarSingLocLon.p) }
  public static func add(emgInd: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: emgInd, def: false,
   at: VTOFFSET.emgInd.p) }
  public static func add(dropPtInd: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dropPtInd, def: false,
   at: VTOFFSET.dropPtInd.p) }
  public static func add(spaceAmpConf: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: spaceAmpConf, def: 0, at: VTOFFSET.spaceAmpConf.p) }
  public static func add(launchTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchTime, at: VTOFFSET.launchTime.p) }
  public static func add(launchLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: launchLat, def: 0.0, at: VTOFFSET.launchLat.p) }
  public static func add(launchLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: launchLon, def: 0.0, at: VTOFFSET.launchLon.p) }
  public static func add(azCorr: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azCorr, def: 0.0, at: VTOFFSET.azCorr.p) }
  public static func add(burnoutAlt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: burnoutAlt, def: 0.0, at: VTOFFSET.burnoutAlt.p) }
  public static func add(launchAouType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchAouType, at: VTOFFSET.launchAouType.p) }
  public static func addVectorOf(launchAouData: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchAouData, at: VTOFFSET.launchAouData.p) }
  public static func add(impactTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: impactTime, at: VTOFFSET.impactTime.p) }
  public static func add(impactLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: impactLat, def: 0.0, at: VTOFFSET.impactLat.p) }
  public static func add(impactLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: impactLon, def: 0.0, at: VTOFFSET.impactLon.p) }
  public static func add(impactAouType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: impactAouType, at: VTOFFSET.impactAouType.p) }
  public static func addVectorOf(impactAouData: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: impactAouData, at: VTOFFSET.impactAouData.p) }
  public static func addVectorOf(vectors: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vectors, at: VTOFFSET.vectors.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: MissileTrack_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endMissileTrack_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMissileTrack_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    msgTypeOffset msgType: Offset = Offset(),
    msgSubTypeOffset msgSubType: Offset = Offset(),
    msgCreateDateOffset msgCreateDate: Offset = Offset(),
    env: MissileTrack_Abridged_env_Enum = .air,
    objTypeOffset objType: Offset = Offset(),
    objTypeConf: Int32 = 0,
    objPlatOffset objPlat: Offset = Offset(),
    objIdent: MissileTrack_Abridged_objIdent_Enum = .assumedFriend,
    spaceAmpOffset spaceAmp: Offset = Offset(),
    objActOffset objAct: Offset = Offset(),
    spaceSpecTypeOffset spaceSpecType: Offset = Offset(),
    acftSubTypeOffset acftSubType: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    callSignOffset callSign: Offset = Offset(),
    lostTrkInd: Bool = false,
    trackIdOffset trackId: Offset = Offset(),
    parentTrackIdOffset parentTrackId: Offset = Offset(),
    muidSrcTrkOffset muidSrcTrk: Offset = Offset(),
    muidSrcOffset muidSrc: Offset = Offset(),
    alertOffset alert: Offset = Offset(),
    mslStatusOffset mslStatus: Offset = Offset(),
    tsOffset ts: Offset = Offset(),
    aouRptTypeOffset aouRptType: Offset = Offset(),
    aouRptDataVectorOffset aouRptData: Offset = Offset(),
    containment: Double = 0.0,
    trkConf: Double = 0.0,
    trkQual: Int32 = 0,
    angElev: Double = 0.0,
    senModeOffset senMode: Offset = Offset(),
    infoSourceOffset infoSource: Offset = Offset(),
    boosting: Bool = false,
    polarSingLocLat: Double = 0.0,
    polarSingLocLon: Double = 0.0,
    emgInd: Bool = false,
    dropPtInd: Bool = false,
    spaceAmpConf: Int32 = 0,
    launchTimeOffset launchTime: Offset = Offset(),
    launchLat: Double = 0.0,
    launchLon: Double = 0.0,
    azCorr: Double = 0.0,
    burnoutAlt: Double = 0.0,
    launchAouTypeOffset launchAouType: Offset = Offset(),
    launchAouDataVectorOffset launchAouData: Offset = Offset(),
    impactTimeOffset impactTime: Offset = Offset(),
    impactLat: Double = 0.0,
    impactLon: Double = 0.0,
    impactAouTypeOffset impactAouType: Offset = Offset(),
    impactAouDataVectorOffset impactAouData: Offset = Offset(),
    vectorsVectorOffset vectors: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: MissileTrack_Abridged_dataMode_Enum = .real
  ) -> Offset {
    let __start = MissileTrack_Abridged.startMissileTrack_Abridged(&fbb)
    MissileTrack_Abridged.add(id: id, &fbb)
    MissileTrack_Abridged.add(classificationMarking: classificationMarking, &fbb)
    MissileTrack_Abridged.add(msgType: msgType, &fbb)
    MissileTrack_Abridged.add(msgSubType: msgSubType, &fbb)
    MissileTrack_Abridged.add(msgCreateDate: msgCreateDate, &fbb)
    MissileTrack_Abridged.add(env: env, &fbb)
    MissileTrack_Abridged.add(objType: objType, &fbb)
    MissileTrack_Abridged.add(objTypeConf: objTypeConf, &fbb)
    MissileTrack_Abridged.add(objPlat: objPlat, &fbb)
    MissileTrack_Abridged.add(objIdent: objIdent, &fbb)
    MissileTrack_Abridged.add(spaceAmp: spaceAmp, &fbb)
    MissileTrack_Abridged.add(objAct: objAct, &fbb)
    MissileTrack_Abridged.add(spaceSpecType: spaceSpecType, &fbb)
    MissileTrack_Abridged.add(acftSubType: acftSubType, &fbb)
    MissileTrack_Abridged.add(name: name, &fbb)
    MissileTrack_Abridged.add(callSign: callSign, &fbb)
    MissileTrack_Abridged.add(lostTrkInd: lostTrkInd, &fbb)
    MissileTrack_Abridged.add(trackId: trackId, &fbb)
    MissileTrack_Abridged.add(parentTrackId: parentTrackId, &fbb)
    MissileTrack_Abridged.add(muidSrcTrk: muidSrcTrk, &fbb)
    MissileTrack_Abridged.add(muidSrc: muidSrc, &fbb)
    MissileTrack_Abridged.add(alert: alert, &fbb)
    MissileTrack_Abridged.add(mslStatus: mslStatus, &fbb)
    MissileTrack_Abridged.add(ts: ts, &fbb)
    MissileTrack_Abridged.add(aouRptType: aouRptType, &fbb)
    MissileTrack_Abridged.addVectorOf(aouRptData: aouRptData, &fbb)
    MissileTrack_Abridged.add(containment: containment, &fbb)
    MissileTrack_Abridged.add(trkConf: trkConf, &fbb)
    MissileTrack_Abridged.add(trkQual: trkQual, &fbb)
    MissileTrack_Abridged.add(angElev: angElev, &fbb)
    MissileTrack_Abridged.add(senMode: senMode, &fbb)
    MissileTrack_Abridged.add(infoSource: infoSource, &fbb)
    MissileTrack_Abridged.add(boosting: boosting, &fbb)
    MissileTrack_Abridged.add(polarSingLocLat: polarSingLocLat, &fbb)
    MissileTrack_Abridged.add(polarSingLocLon: polarSingLocLon, &fbb)
    MissileTrack_Abridged.add(emgInd: emgInd, &fbb)
    MissileTrack_Abridged.add(dropPtInd: dropPtInd, &fbb)
    MissileTrack_Abridged.add(spaceAmpConf: spaceAmpConf, &fbb)
    MissileTrack_Abridged.add(launchTime: launchTime, &fbb)
    MissileTrack_Abridged.add(launchLat: launchLat, &fbb)
    MissileTrack_Abridged.add(launchLon: launchLon, &fbb)
    MissileTrack_Abridged.add(azCorr: azCorr, &fbb)
    MissileTrack_Abridged.add(burnoutAlt: burnoutAlt, &fbb)
    MissileTrack_Abridged.add(launchAouType: launchAouType, &fbb)
    MissileTrack_Abridged.addVectorOf(launchAouData: launchAouData, &fbb)
    MissileTrack_Abridged.add(impactTime: impactTime, &fbb)
    MissileTrack_Abridged.add(impactLat: impactLat, &fbb)
    MissileTrack_Abridged.add(impactLon: impactLon, &fbb)
    MissileTrack_Abridged.add(impactAouType: impactAouType, &fbb)
    MissileTrack_Abridged.addVectorOf(impactAouData: impactAouData, &fbb)
    MissileTrack_Abridged.addVectorOf(vectors: vectors, &fbb)
    MissileTrack_Abridged.add(origNetwork: origNetwork, &fbb)
    MissileTrack_Abridged.add(createdAt: createdAt, &fbb)
    MissileTrack_Abridged.add(createdBy: createdBy, &fbb)
    MissileTrack_Abridged.add(source: source, &fbb)
    MissileTrack_Abridged.add(origin: origin, &fbb)
    MissileTrack_Abridged.add(dataMode: dataMode, &fbb)
    return MissileTrack_Abridged.endMissileTrack_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msgType.p, fieldName: "msgType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msgSubType.p, fieldName: "msgSubType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msgCreateDate.p, fieldName: "msgCreateDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.env.p, fieldName: "env", required: false, type: MissileTrack_Abridged_env_Enum.self)
    try _v.visit(field: VTOFFSET.objType.p, fieldName: "objType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objTypeConf.p, fieldName: "objTypeConf", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.objPlat.p, fieldName: "objPlat", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objIdent.p, fieldName: "objIdent", required: false, type: MissileTrack_Abridged_objIdent_Enum.self)
    try _v.visit(field: VTOFFSET.spaceAmp.p, fieldName: "spaceAmp", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objAct.p, fieldName: "objAct", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.spaceSpecType.p, fieldName: "spaceSpecType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.acftSubType.p, fieldName: "acftSubType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.callSign.p, fieldName: "callSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lostTrkInd.p, fieldName: "lostTrkInd", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.trackId.p, fieldName: "trackId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.parentTrackId.p, fieldName: "parentTrackId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.muidSrcTrk.p, fieldName: "muidSrcTrk", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.muidSrc.p, fieldName: "muidSrc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.alert.p, fieldName: "alert", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.mslStatus.p, fieldName: "mslStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ts.p, fieldName: "ts", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aouRptType.p, fieldName: "aouRptType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aouRptData.p, fieldName: "aouRptData", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.containment.p, fieldName: "containment", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.trkConf.p, fieldName: "trkConf", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.trkQual.p, fieldName: "trkQual", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.angElev.p, fieldName: "angElev", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senMode.p, fieldName: "senMode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.infoSource.p, fieldName: "infoSource", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.boosting.p, fieldName: "boosting", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.polarSingLocLat.p, fieldName: "polarSingLocLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.polarSingLocLon.p, fieldName: "polarSingLocLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.emgInd.p, fieldName: "emgInd", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.dropPtInd.p, fieldName: "dropPtInd", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.spaceAmpConf.p, fieldName: "spaceAmpConf", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.launchTime.p, fieldName: "launchTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchLat.p, fieldName: "launchLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.launchLon.p, fieldName: "launchLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.azCorr.p, fieldName: "azCorr", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.burnoutAlt.p, fieldName: "burnoutAlt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.launchAouType.p, fieldName: "launchAouType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchAouData.p, fieldName: "launchAouData", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.impactTime.p, fieldName: "impactTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.impactLat.p, fieldName: "impactLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.impactLon.p, fieldName: "impactLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.impactAouType.p, fieldName: "impactAouType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.impactAouData.p, fieldName: "impactAouData", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.vectors.p, fieldName: "vectors", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: MissileTrack_Abridged_dataMode_Enum.self)
    _v.finish()
  }
}

