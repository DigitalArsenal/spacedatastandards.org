// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum ManifoldElset_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: ManifoldElset_Full_dataMode_Enum { return .exercise }
  public static var min: ManifoldElset_Full_dataMode_Enum { return .real }
}


///  /// Theoretical Keplarian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.
public struct ManifoldElset_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "MANI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: ManifoldElset_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case idManifold = 6
    case classificationMarking = 8
    case tmpSatNo = 10
    case epoch = 12
    case meanMotion = 14
    case eccentricity = 16
    case inclination = 18
    case raan = 20
    case argOfPerigee = 22
    case meanAnomaly = 24
    case revNo = 26
    case bStar = 28
    case meanMotionDot = 30
    case meanMotionDdot = 32
    case semiMajorAxis = 34
    case period = 36
    case apogee = 38
    case perigee = 40
    case line1 = 42
    case line2 = 44
    case createdAt = 46
    case createdBy = 48
    case updatedAt = 50
    case updatedBy = 52
    case source = 54
    case origin = 56
    case dataMode = 58
    case origNetwork = 60
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: MANIFOLDELSET-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Identifier of the parent Manifold record.
  ///  Example: /// Example: REF-MANIFOLD-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idManifold: String? { let o = _accessor.offset(VTOFFSET.idManifold.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idManifoldSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idManifold.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  A placeholder satellite number and not a true NORAD catalog number.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var tmpSatNo: Int32 { let o = _accessor.offset(VTOFFSET.tmpSatNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Elset epoch time in ISO 8601 UTC format, with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  public var epoch: String? { let o = _accessor.offset(VTOFFSET.epoch.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var epochSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.epoch.v) }
  ///  The constant angular speed required for the body to complete one circular orbit in the same amount of time as the actual elliptical orbit with variable speed. Measured in revolutions per day.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var meanMotion: Double { let o = _accessor.offset(VTOFFSET.meanMotion.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var eccentricity: Double { let o = _accessor.offset(VTOFFSET.eccentricity.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
  ///  Example: /// Example: 90.23
  ///  Constraints: No constraints specified.
  public var inclination: Double { let o = _accessor.offset(VTOFFSET.inclination.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var raan: Double { let o = _accessor.offset(VTOFFSET.raan.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var argOfPerigee: Double { let o = _accessor.offset(VTOFFSET.argOfPerigee.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var meanAnomaly: Double { let o = _accessor.offset(VTOFFSET.meanAnomaly.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var revNo: Int32 { let o = _accessor.offset(VTOFFSET.revNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var bStar: Double { let o = _accessor.offset(VTOFFSET.bStar.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var meanMotionDot: Double { let o = _accessor.offset(VTOFFSET.meanMotionDot.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var meanMotionDdot: Double { let o = _accessor.offset(VTOFFSET.meanMotionDdot.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var semiMajorAxis: Double { let o = _accessor.offset(VTOFFSET.semiMajorAxis.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Period of the orbit equal to inverse of mean motion.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var period: Double { let o = _accessor.offset(VTOFFSET.period.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Orbit point furthest from the center of the earth in kilometers.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var apogee: Double { let o = _accessor.offset(VTOFFSET.apogee.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The orbit point nearest to the center of the earth in kilometers.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var perigee: Double { let o = _accessor.offset(VTOFFSET.perigee.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  ///  Example: /// Example: No example provided.
  ///  Constraints: Minimum length = 0, Maximum length = 69
  public var line1: String? { let o = _accessor.offset(VTOFFSET.line1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var line1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.line1.v) }
  ///  Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  ///  Example: /// Example: No example provided.
  ///  Constraints: Minimum length = 0, Maximum length = 69
  public var line2: String? { let o = _accessor.offset(VTOFFSET.line2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var line2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.line2.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Read-only time the row was updated in the database, set automatically by the system on update.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: ManifoldElset_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : ManifoldElset_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startManifoldElset_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 29) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(idManifold: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idManifold, at: VTOFFSET.idManifold.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(tmpSatNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: tmpSatNo, def: 0, at: VTOFFSET.tmpSatNo.p) }
  public static func add(epoch: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: epoch, at: VTOFFSET.epoch.p) }
  public static func add(meanMotion: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: meanMotion, def: 0.0, at: VTOFFSET.meanMotion.p) }
  public static func add(eccentricity: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: eccentricity, def: 0.0, at: VTOFFSET.eccentricity.p) }
  public static func add(inclination: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: inclination, def: 0.0, at: VTOFFSET.inclination.p) }
  public static func add(raan: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: raan, def: 0.0, at: VTOFFSET.raan.p) }
  public static func add(argOfPerigee: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: argOfPerigee, def: 0.0, at: VTOFFSET.argOfPerigee.p) }
  public static func add(meanAnomaly: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: meanAnomaly, def: 0.0, at: VTOFFSET.meanAnomaly.p) }
  public static func add(revNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: revNo, def: 0, at: VTOFFSET.revNo.p) }
  public static func add(bStar: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bStar, def: 0.0, at: VTOFFSET.bStar.p) }
  public static func add(meanMotionDot: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: meanMotionDot, def: 0.0, at: VTOFFSET.meanMotionDot.p) }
  public static func add(meanMotionDdot: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: meanMotionDdot, def: 0.0, at: VTOFFSET.meanMotionDdot.p) }
  public static func add(semiMajorAxis: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: semiMajorAxis, def: 0.0, at: VTOFFSET.semiMajorAxis.p) }
  public static func add(period: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: period, def: 0.0, at: VTOFFSET.period.p) }
  public static func add(apogee: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: apogee, def: 0.0, at: VTOFFSET.apogee.p) }
  public static func add(perigee: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: perigee, def: 0.0, at: VTOFFSET.perigee.p) }
  public static func add(line1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: line1, at: VTOFFSET.line1.p) }
  public static func add(line2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: line2, at: VTOFFSET.line2.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: ManifoldElset_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endManifoldElset_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createManifoldElset_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    idManifoldOffset idManifold: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    tmpSatNo: Int32 = 0,
    epochOffset epoch: Offset = Offset(),
    meanMotion: Double = 0.0,
    eccentricity: Double = 0.0,
    inclination: Double = 0.0,
    raan: Double = 0.0,
    argOfPerigee: Double = 0.0,
    meanAnomaly: Double = 0.0,
    revNo: Int32 = 0,
    bStar: Double = 0.0,
    meanMotionDot: Double = 0.0,
    meanMotionDdot: Double = 0.0,
    semiMajorAxis: Double = 0.0,
    period: Double = 0.0,
    apogee: Double = 0.0,
    perigee: Double = 0.0,
    line1Offset line1: Offset = Offset(),
    line2Offset line2: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: ManifoldElset_Full_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = ManifoldElset_Full.startManifoldElset_Full(&fbb)
    ManifoldElset_Full.add(id: id, &fbb)
    ManifoldElset_Full.add(idManifold: idManifold, &fbb)
    ManifoldElset_Full.add(classificationMarking: classificationMarking, &fbb)
    ManifoldElset_Full.add(tmpSatNo: tmpSatNo, &fbb)
    ManifoldElset_Full.add(epoch: epoch, &fbb)
    ManifoldElset_Full.add(meanMotion: meanMotion, &fbb)
    ManifoldElset_Full.add(eccentricity: eccentricity, &fbb)
    ManifoldElset_Full.add(inclination: inclination, &fbb)
    ManifoldElset_Full.add(raan: raan, &fbb)
    ManifoldElset_Full.add(argOfPerigee: argOfPerigee, &fbb)
    ManifoldElset_Full.add(meanAnomaly: meanAnomaly, &fbb)
    ManifoldElset_Full.add(revNo: revNo, &fbb)
    ManifoldElset_Full.add(bStar: bStar, &fbb)
    ManifoldElset_Full.add(meanMotionDot: meanMotionDot, &fbb)
    ManifoldElset_Full.add(meanMotionDdot: meanMotionDdot, &fbb)
    ManifoldElset_Full.add(semiMajorAxis: semiMajorAxis, &fbb)
    ManifoldElset_Full.add(period: period, &fbb)
    ManifoldElset_Full.add(apogee: apogee, &fbb)
    ManifoldElset_Full.add(perigee: perigee, &fbb)
    ManifoldElset_Full.add(line1: line1, &fbb)
    ManifoldElset_Full.add(line2: line2, &fbb)
    ManifoldElset_Full.add(createdAt: createdAt, &fbb)
    ManifoldElset_Full.add(createdBy: createdBy, &fbb)
    ManifoldElset_Full.add(updatedAt: updatedAt, &fbb)
    ManifoldElset_Full.add(updatedBy: updatedBy, &fbb)
    ManifoldElset_Full.add(source: source, &fbb)
    ManifoldElset_Full.add(origin: origin, &fbb)
    ManifoldElset_Full.add(dataMode: dataMode, &fbb)
    ManifoldElset_Full.add(origNetwork: origNetwork, &fbb)
    return ManifoldElset_Full.endManifoldElset_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idManifold.p, fieldName: "idManifold", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tmpSatNo.p, fieldName: "tmpSatNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.epoch.p, fieldName: "epoch", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.meanMotion.p, fieldName: "meanMotion", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.eccentricity.p, fieldName: "eccentricity", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.inclination.p, fieldName: "inclination", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.raan.p, fieldName: "raan", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.argOfPerigee.p, fieldName: "argOfPerigee", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.meanAnomaly.p, fieldName: "meanAnomaly", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.revNo.p, fieldName: "revNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.bStar.p, fieldName: "bStar", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.meanMotionDot.p, fieldName: "meanMotionDot", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.meanMotionDdot.p, fieldName: "meanMotionDdot", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.semiMajorAxis.p, fieldName: "semiMajorAxis", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.period.p, fieldName: "period", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.apogee.p, fieldName: "apogee", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.perigee.p, fieldName: "perigee", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.line1.p, fieldName: "line1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.line2.p, fieldName: "line2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: ManifoldElset_Full_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

