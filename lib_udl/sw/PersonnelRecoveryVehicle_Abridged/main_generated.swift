// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Information regarding the recovery vehicle.
public struct PersonnelRecoveryVehicle_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "PERS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: PersonnelRecoveryVehicle_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case callSign = 4
    case type = 6
    case primaryFreq = 8
    case strength = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The call sign of the recovery vehicle.
  ///  Example: /// Example: FALCO
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var callSign: String? { let o = _accessor.offset(VTOFFSET.callSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var callSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.callSign.v) }
  ///  The particular type of recovery vehicle to be used.
  ///  Example: /// Example: C17
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Primary contact frequency of the recovery vehicle.
  ///  Example: /// Example: 34.55
  ///  Constraints: No constraints specified.
  public var primaryFreq: Double { let o = _accessor.offset(VTOFFSET.primaryFreq.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The number of objects or units moving as a group and represented as a single entity in this recovery vehicle message. If null, the strength is assumed to represent a single object.  Note that if this recovery derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var strength: Int32 { let o = _accessor.offset(VTOFFSET.strength.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public static func startPersonnelRecoveryVehicle_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(callSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callSign, at: VTOFFSET.callSign.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(primaryFreq: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: primaryFreq, def: 0.0, at: VTOFFSET.primaryFreq.p) }
  public static func add(strength: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: strength, def: 0, at: VTOFFSET.strength.p) }
  public static func endPersonnelRecoveryVehicle_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createPersonnelRecoveryVehicle_Abridged(
    _ fbb: inout FlatBufferBuilder,
    callSignOffset callSign: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    primaryFreq: Double = 0.0,
    strength: Int32 = 0
  ) -> Offset {
    let __start = PersonnelRecoveryVehicle_Abridged.startPersonnelRecoveryVehicle_Abridged(&fbb)
    PersonnelRecoveryVehicle_Abridged.add(callSign: callSign, &fbb)
    PersonnelRecoveryVehicle_Abridged.add(type: type, &fbb)
    PersonnelRecoveryVehicle_Abridged.add(primaryFreq: primaryFreq, &fbb)
    PersonnelRecoveryVehicle_Abridged.add(strength: strength, &fbb)
    return PersonnelRecoveryVehicle_Abridged.endPersonnelRecoveryVehicle_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.callSign.p, fieldName: "callSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.primaryFreq.p, fieldName: "primaryFreq", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.strength.p, fieldName: "strength", required: false, type: Int32.self)
    _v.finish()
  }
}

