// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Schema for the CotPositionData to post.
public struct CotPositionData_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "COTP" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: CotPositionData_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case callSign = 4
    case teamRole = 6
    case team = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Name of the POI target Object.
  ///  Example: /// Example: POI_NAME
  ///  Constraints: Minimum length = 1, Maximum length = 2147483647
  public var callSign: String? { let o = _accessor.offset(VTOFFSET.callSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var callSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.callSign.v) }
  ///  Team role  (Team Member| Team Lead | HQ | Sniper | Medic | Forward Observer | RTO | K9).
  ///  Example: /// Example: Team Member
  ///  Constraints: Minimum length = 1, Maximum length = 2147483647
  public var teamRole: String? { let o = _accessor.offset(VTOFFSET.teamRole.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var teamRoleSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.teamRole.v) }
  ///  Description of the POI target Object.
  ///  Example: /// Example: Description of the object
  ///  Constraints: Minimum length = 1, Maximum length = 2147483647
  public var team: String? { let o = _accessor.offset(VTOFFSET.team.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var teamSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.team.v) }
  public static func startCotPositionData_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(callSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callSign, at: VTOFFSET.callSign.p) }
  public static func add(teamRole: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: teamRole, at: VTOFFSET.teamRole.p) }
  public static func add(team: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: team, at: VTOFFSET.team.p) }
  public static func endCotPositionData_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createCotPositionData_Ingest(
    _ fbb: inout FlatBufferBuilder,
    callSignOffset callSign: Offset = Offset(),
    teamRoleOffset teamRole: Offset = Offset(),
    teamOffset team: Offset = Offset()
  ) -> Offset {
    let __start = CotPositionData_Ingest.startCotPositionData_Ingest(&fbb)
    CotPositionData_Ingest.add(callSign: callSign, &fbb)
    CotPositionData_Ingest.add(teamRole: teamRole, &fbb)
    CotPositionData_Ingest.add(team: team, &fbb)
    return CotPositionData_Ingest.endCotPositionData_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.callSign.p, fieldName: "callSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.teamRole.p, fieldName: "teamRole", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.team.p, fieldName: "team", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

