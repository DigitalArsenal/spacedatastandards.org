// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Profile of electron densities in the ionosphere associated with an IonoObservation.
public struct IonoObservationDensityProfile_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "IONO" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: IonoObservationDensityProfile_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case parabolic = 4
    case quasiParabolic = 6
    case valleyModelDescription = 8
    case valleyModelCoeffs = 10
    case shiftedChebyshev = 12
    case topsideExtensionChapmanConst = 14
    case topsideExtensionVaryChap = 16
    case iri = 18
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var parabolic: String? { let o = _accessor.offset(VTOFFSET.parabolic.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var parabolicSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.parabolic.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var quasiParabolic: String? { let o = _accessor.offset(VTOFFSET.quasiParabolic.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var quasiParabolicSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.quasiParabolic.v) }
  ///  Description of the valley model and parameters.
  ///  Example: /// Example: 2-parameter UMLCAR model with width W in km and depth D in MHz, no fitting.
  ///  Constraints: No constraints specified.
  public var valleyModelDescription: String? { let o = _accessor.offset(VTOFFSET.valleyModelDescription.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var valleyModelDescriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.valleyModelDescription.v) }
  ///  Array of valley model coefficients.
  ///  Example: /// Example: [39.597, 0.1777]
  ///  Constraints: No constraints specified.
  public var hasValleyModelCoeffs: Bool { let o = _accessor.offset(VTOFFSET.valleyModelCoeffs.v); return o == 0 ? false : true }
  public var valleyModelCoeffsCount: Int32 { let o = _accessor.offset(VTOFFSET.valleyModelCoeffs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func valleyModelCoeffs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.valleyModelCoeffs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var shiftedChebyshev: String? { let o = _accessor.offset(VTOFFSET.shiftedChebyshev.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var shiftedChebyshevSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.shiftedChebyshev.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var topsideExtensionChapmanConst: String? { let o = _accessor.offset(VTOFFSET.topsideExtensionChapmanConst.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var topsideExtensionChapmanConstSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.topsideExtensionChapmanConst.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var topsideExtensionVaryChap: String? { let o = _accessor.offset(VTOFFSET.topsideExtensionVaryChap.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var topsideExtensionVaryChapSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.topsideExtensionVaryChap.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var iri: String? { let o = _accessor.offset(VTOFFSET.iri.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var iriSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.iri.v) }
  public static func startIonoObservationDensityProfile_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 8) }
  public static func add(parabolic: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: parabolic, at: VTOFFSET.parabolic.p) }
  public static func add(quasiParabolic: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: quasiParabolic, at: VTOFFSET.quasiParabolic.p) }
  public static func add(valleyModelDescription: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: valleyModelDescription, at: VTOFFSET.valleyModelDescription.p) }
  public static func addVectorOf(valleyModelCoeffs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: valleyModelCoeffs, at: VTOFFSET.valleyModelCoeffs.p) }
  public static func add(shiftedChebyshev: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shiftedChebyshev, at: VTOFFSET.shiftedChebyshev.p) }
  public static func add(topsideExtensionChapmanConst: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: topsideExtensionChapmanConst, at: VTOFFSET.topsideExtensionChapmanConst.p) }
  public static func add(topsideExtensionVaryChap: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: topsideExtensionVaryChap, at: VTOFFSET.topsideExtensionVaryChap.p) }
  public static func add(iri: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: iri, at: VTOFFSET.iri.p) }
  public static func endIonoObservationDensityProfile_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createIonoObservationDensityProfile_Ingest(
    _ fbb: inout FlatBufferBuilder,
    parabolicOffset parabolic: Offset = Offset(),
    quasiParabolicOffset quasiParabolic: Offset = Offset(),
    valleyModelDescriptionOffset valleyModelDescription: Offset = Offset(),
    valleyModelCoeffsVectorOffset valleyModelCoeffs: Offset = Offset(),
    shiftedChebyshevOffset shiftedChebyshev: Offset = Offset(),
    topsideExtensionChapmanConstOffset topsideExtensionChapmanConst: Offset = Offset(),
    topsideExtensionVaryChapOffset topsideExtensionVaryChap: Offset = Offset(),
    iriOffset iri: Offset = Offset()
  ) -> Offset {
    let __start = IonoObservationDensityProfile_Ingest.startIonoObservationDensityProfile_Ingest(&fbb)
    IonoObservationDensityProfile_Ingest.add(parabolic: parabolic, &fbb)
    IonoObservationDensityProfile_Ingest.add(quasiParabolic: quasiParabolic, &fbb)
    IonoObservationDensityProfile_Ingest.add(valleyModelDescription: valleyModelDescription, &fbb)
    IonoObservationDensityProfile_Ingest.addVectorOf(valleyModelCoeffs: valleyModelCoeffs, &fbb)
    IonoObservationDensityProfile_Ingest.add(shiftedChebyshev: shiftedChebyshev, &fbb)
    IonoObservationDensityProfile_Ingest.add(topsideExtensionChapmanConst: topsideExtensionChapmanConst, &fbb)
    IonoObservationDensityProfile_Ingest.add(topsideExtensionVaryChap: topsideExtensionVaryChap, &fbb)
    IonoObservationDensityProfile_Ingest.add(iri: iri, &fbb)
    return IonoObservationDensityProfile_Ingest.endIonoObservationDensityProfile_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.parabolic.p, fieldName: "parabolic", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.quasiParabolic.p, fieldName: "quasiParabolic", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.valleyModelDescription.p, fieldName: "valleyModelDescription", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.valleyModelCoeffs.p, fieldName: "valleyModelCoeffs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.shiftedChebyshev.p, fieldName: "shiftedChebyshev", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.topsideExtensionChapmanConst.p, fieldName: "topsideExtensionChapmanConst", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.topsideExtensionVaryChap.p, fieldName: "topsideExtensionVaryChap", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.iri.p, fieldName: "iri", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

