// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum SOIObservationSet_Ingest_type_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case optical = 0
  ///  No description available.
  case radar = 1

  public static var max: SOIObservationSet_Ingest_type_Enum { return .radar }
  public static var min: SOIObservationSet_Ingest_type_Enum { return .optical }
}


public enum SOIObservationSet_Ingest_referenceFrame_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case j2000 = 0
  ///  No description available.
  case efgTdr = 1
  ///  No description available.
  case ecrEcef = 2
  ///  No description available.
  case teme = 3
  ///  No description available.
  case itrf = 4
  ///  No description available.
  case gcrf = 5

  public static var max: SOIObservationSet_Ingest_referenceFrame_Enum { return .gcrf }
  public static var min: SOIObservationSet_Ingest_referenceFrame_Enum { return .j2000 }
}


public enum SOIObservationSet_Ingest_senReferenceFrame_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case j2000 = 0
  ///  No description available.
  case efgTdr = 1
  ///  No description available.
  case ecrEcef = 2
  ///  No description available.
  case teme = 3
  ///  No description available.
  case itrf = 4
  ///  No description available.
  case gcrf = 5

  public static var max: SOIObservationSet_Ingest_senReferenceFrame_Enum { return .gcrf }
  public static var min: SOIObservationSet_Ingest_senReferenceFrame_Enum { return .j2000 }
}


public enum SOIObservationSet_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: SOIObservationSet_Ingest_dataMode_Enum { return .exercise }
  public static var min: SOIObservationSet_Ingest_dataMode_Enum { return .real }
}


///  /// These services provide operations for posting space object idenfification observation sets.
public struct SOIObservationSet_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SOIO" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: SOIObservationSet_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case msgCreateDate = 8
    case idSensor = 10
    case origSensorId = 12
    case sensorAsId = 14
    case idOnOrbit = 16
    case satNo = 18
    case origObjectId = 20
    case senlat = 22
    case senlon = 24
    case senalt = 26
    case senx = 28
    case seny = 30
    case senz = 32
    case senvelx = 34
    case senvely = 36
    case senvelz = 38
    case idElset = 40
    case startTime = 42
    case endTime = 44
    case numObs = 46
    case type = 48
    case polarAngleStart = 50
    case polarAngleEnd = 52
    case referenceFrame = 54
    case senReferenceFrame = 56
    case losDeclinationStart = 58
    case losDeclinationEnd = 60
    case pointingAngleAzStart = 62
    case pointingAngleAzEnd = 64
    case pointingAngleElStart = 66
    case pointingAngleElEnd = 68
    case pixelArrayWidth = 70
    case pixelArrayHeight = 72
    case numSpectralFilters = 74
    case spectralFilters = 76
    case collectionMode = 78
    case gain = 80
    case binningHoriz = 82
    case binningVert = 84
    case solarMag = 86
    case pixelMin = 88
    case pixelMax = 90
    case softwareVersion = 92
    case satelliteName = 94
    case starCatName = 96
    case corrQuality = 98
    case uct = 100
    case validCalibrations = 102
    case calibrationType = 104
    case percentSatThreshold = 106
    case changeDetected = 108
    case periodicityChangeDetected = 110
    case brightnessVarianceChangeDetected = 112
    case solarPhaseAngleBrightnessChangeDetected = 114
    case changeConf = 116
    case collectionDensityConf = 118
    case periodicitySamplingConf = 120
    case periodicityDetectionConf = 122
    case collectionId = 124
    case calibrations = 126
    case tags = 128
    case transactionId = 130
    case opticalSoiobservationList = 132
    case radarSoiobservationList = 134
    case createdAt = 136
    case createdBy = 138
    case source = 140
    case origin = 142
    case origNetwork = 144
    case sourceDl = 146
    case dataMode = 148
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  SOI msgCreateDate time in ISO 8601 UTC time, with millisecond precision.
  ///  Example: /// Example: 2022-07-07T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var msgCreateDate: String? { let o = _accessor.offset(VTOFFSET.msgCreateDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msgCreateDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msgCreateDate.v) }
  ///  ID of the observing sensor.
  ///  Example: /// Example: SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies if this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origSensorId: String? { let o = _accessor.offset(VTOFFSET.origSensorId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSensorIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSensorId.v) }
  ///  ID of the AttitudeSet record for the observing sensor.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var sensorAsId: String? { let o = _accessor.offset(VTOFFSET.sensorAsId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sensorAsIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sensorAsId.v) }
  ///  Unique identifier of the target on-orbit object, if correlated.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 101
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Sensor WGS84 latitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  public var senlat: Double { let o = _accessor.offset(VTOFFSET.senlat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor WGS84 longitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values south of equator).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  public var senlon: Double { let o = _accessor.offset(VTOFFSET.senlon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor altitude at startTime (if mobile/onorbit) in kilometers.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var senalt: Double { let o = _accessor.offset(VTOFFSET.senalt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian X position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var senx: Double { let o = _accessor.offset(VTOFFSET.senx.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian Y position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var seny: Double { let o = _accessor.offset(VTOFFSET.seny.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian Z position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var senz: Double { let o = _accessor.offset(VTOFFSET.senz.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian X velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var senvelx: Double { let o = _accessor.offset(VTOFFSET.senvelx.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian Y velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var senvely: Double { let o = _accessor.offset(VTOFFSET.senvely.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian Z velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var senvelz: Double { let o = _accessor.offset(VTOFFSET.senvelz.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  ID of the UDL Elset of the Space Object under observation.
  ///  Example: /// Example: REF-ELSET-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idElset: String? { let o = _accessor.offset(VTOFFSET.idElset.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idElsetSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idElset.v) }
  ///  Observation set detection start time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var startTime: String? { let o = _accessor.offset(VTOFFSET.startTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.startTime.v) }
  ///  Observation set detection end time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var endTime: String? { let o = _accessor.offset(VTOFFSET.endTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var endTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.endTime.v) }
  ///  The number of observation records in the set.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var numObs: Int32 { let o = _accessor.offset(VTOFFSET.numObs.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Observation type (OPTICAL, RADAR).
  ///  Example: /// Example: OPTICAL
  ///  Constraints: Minimum length = 1, Maximum length = 24
  public var type: SOIObservationSet_Ingest_type_Enum { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? .optical : SOIObservationSet_Ingest_type_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .optical }
  ///  Polar angle of the gimbal/mount at observation set detection start time in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var polarAngleStart: Double { let o = _accessor.offset(VTOFFSET.polarAngleStart.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Polar angle of the gimbal/mount at observation set detection end time in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var polarAngleEnd: Double { let o = _accessor.offset(VTOFFSET.polarAngleEnd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The reference frame of the observation measurements. If the referenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var referenceFrame: SOIObservationSet_Ingest_referenceFrame_Enum { let o = _accessor.offset(VTOFFSET.referenceFrame.v); return o == 0 ? .j2000 : SOIObservationSet_Ingest_referenceFrame_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .j2000 }
  ///  The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var senReferenceFrame: SOIObservationSet_Ingest_senReferenceFrame_Enum { let o = _accessor.offset(VTOFFSET.senReferenceFrame.v); return o == 0 ? .j2000 : SOIObservationSet_Ingest_senReferenceFrame_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .j2000 }
  ///  Line of sight declination at observation set detection start time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var losDeclinationStart: Double { let o = _accessor.offset(VTOFFSET.losDeclinationStart.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line of sight declination at observation set detection end time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var losDeclinationEnd: Double { let o = _accessor.offset(VTOFFSET.losDeclinationEnd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pointing angle of the Azimuth gimbal/mount at observation set detection start time. Specified in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var pointingAngleAzStart: Double { let o = _accessor.offset(VTOFFSET.pointingAngleAzStart.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pointing angle of the Azimuth gimbal/mount at observation set detection end time. Specified in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var pointingAngleAzEnd: Double { let o = _accessor.offset(VTOFFSET.pointingAngleAzEnd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pointing angle of the Elevation gimbal/mount at observation set detection start time. Specified in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var pointingAngleElStart: Double { let o = _accessor.offset(VTOFFSET.pointingAngleElStart.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pointing angle of the Elevation gimbal/mount at observation set detection end time. Specified in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var pointingAngleElEnd: Double { let o = _accessor.offset(VTOFFSET.pointingAngleElEnd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pixel array size (width) in pixels.
  ///  Example: /// Example: 32
  ///  Constraints: No constraints specified.
  public var pixelArrayWidth: Int32 { let o = _accessor.offset(VTOFFSET.pixelArrayWidth.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Pixel array size (height) in pixels.
  ///  Example: /// Example: 32
  ///  Constraints: No constraints specified.
  public var pixelArrayHeight: Int32 { let o = _accessor.offset(VTOFFSET.pixelArrayHeight.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The value is the number of spectral filters used.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var numSpectralFilters: Int32 { let o = _accessor.offset(VTOFFSET.numSpectralFilters.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  ///  Example: /// Example: ['Keyword1', 'Keyword2']
  ///  Constraints: No constraints specified.
  public var hasSpectralFilters: Bool { let o = _accessor.offset(VTOFFSET.spectralFilters.v); return o == 0 ? false : true }
  public var spectralFiltersCount: Int32 { let o = _accessor.offset(VTOFFSET.spectralFilters.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func spectralFilters(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.spectralFilters.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Mode indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
  ///  Example: /// Example: RATE TRACK
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var collectionMode: String? { let o = _accessor.offset(VTOFFSET.collectionMode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var collectionModeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.collectionMode.v) }
  ///  The gain used during the collection, in units of photoelectrons per analog-to-digital unit (e-/ADU). If no gain is used, the value = 1.
  ///  Example: /// Example: 234.2
  ///  Constraints: No constraints specified.
  public var gain: Double { let o = _accessor.offset(VTOFFSET.gain.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The number of pixels binned horizontally.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var binningHoriz: Int32 { let o = _accessor.offset(VTOFFSET.binningHoriz.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The number of pixels binned vertically.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var binningVert: Int32 { let o = _accessor.offset(VTOFFSET.binningVert.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The in-band solar magnitude at 1 A.U.
  ///  Example: /// Example: -26.91
  ///  Constraints: No constraints specified.
  public var solarMag: Double { let o = _accessor.offset(VTOFFSET.solarMag.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The minimum valid pixel value.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  public var pixelMin: Int32 { let o = _accessor.offset(VTOFFSET.pixelMin.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The maximum valid pixel value.
  ///  Example: /// Example: 16383
  ///  Constraints: No constraints specified.
  public var pixelMax: Int32 { let o = _accessor.offset(VTOFFSET.pixelMax.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Software Version used to Capture, Process, and Deliver the data.
  ///  Example: /// Example: GSV99/17-1
  ///  Constraints: Minimum length = 0, Maximum length = 70
  public var softwareVersion: String? { let o = _accessor.offset(VTOFFSET.softwareVersion.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var softwareVersionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.softwareVersion.v) }
  ///  Name of the target satellite.
  ///  Example: /// Example: TITAN 3C TRANSTAGE R/B
  ///  Constraints: Minimum length = 0, Maximum length = 70
  public var satelliteName: String? { let o = _accessor.offset(VTOFFSET.satelliteName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var satelliteNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.satelliteName.v) }
  ///  Name of the Star Catalog used for photometry and astrometry.
  ///  Example: /// Example: SSTRC5
  ///  Constraints: Minimum length = 0, Maximum length = 70
  public var starCatName: String? { let o = _accessor.offset(VTOFFSET.starCatName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var starCatNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.starCatName.v) }
  ///  Object Correlation Quality value. Measures how close the observed object's orbit is to matching an object in the catalog. The scale of this field may vary depending on provider. Users should consult the data provider to verify the meaning of the value (e.g. A value of 0.0 indicates a high/strong correlation, while a value closer to 1.0 indicates low/weak correlation).
  ///  Example: /// Example: 0.327
  ///  Constraints: No constraints specified.
  public var corrQuality: Double { let o = _accessor.offset(VTOFFSET.corrQuality.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Boolean indicating whether the target object was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var uct: Bool { let o = _accessor.offset(VTOFFSET.uct.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Key to indicate which, if any of, the pre/post photometer calibrations are valid for use when generating data for the EOSSA file. If the field is not populated, then the provided calibration data will be used when generating the EOSSA file (e.g. PRE, POST, BOTH, NONE).
  ///  Example: /// Example: BOTH
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var validCalibrations: String? { let o = _accessor.offset(VTOFFSET.validCalibrations.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var validCalibrationsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.validCalibrations.v) }
  ///  Type of calibration used by the Sensor (e.g. ALL SKY, DIFFERENTIAL, DEFAULT, NONE).
  ///  Example: /// Example: ALL SKY
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var calibrationType: String? { let o = _accessor.offset(VTOFFSET.calibrationType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var calibrationTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.calibrationType.v) }
  ///  A threshold for percent of pixels that make up object signal that are beyond the saturation point for the sensor that are removed in the EOSSA file, in range of 0 to 1.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  public var percentSatThreshold: Double { let o = _accessor.offset(VTOFFSET.percentSatThreshold.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Boolean indicating if any change event was detected, based on historical collection data for the object.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var changeDetected: Bool { let o = _accessor.offset(VTOFFSET.changeDetected.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Boolean indicating if a periodicity change event was detected, based on historical collection data for the object.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var periodicityChangeDetected: Bool { let o = _accessor.offset(VTOFFSET.periodicityChangeDetected.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Boolean indicating if a brightness variance change event was detected, based on historical collection data for the object.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var brightnessVarianceChangeDetected: Bool { let o = _accessor.offset(VTOFFSET.brightnessVarianceChangeDetected.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Boolean indicating if a solar phase angle brightness change event was detected, based on historical collection data for the object.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var solarPhaseAngleBrightnessChangeDetected: Bool { let o = _accessor.offset(VTOFFSET.solarPhaseAngleBrightnessChangeDetected.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Overall qualitative confidence assessment of change detection results (e.g. HIGH, MEDIUM, LOW).
  ///  Example: /// Example: MEDIUM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var changeConf: String? { let o = _accessor.offset(VTOFFSET.changeConf.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var changeConfSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.changeConf.v) }
  ///  Qualitative Collection Density assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
  ///  Example: /// Example: MEDIUM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var collectionDensityConf: String? { let o = _accessor.offset(VTOFFSET.collectionDensityConf.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var collectionDensityConfSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.collectionDensityConf.v) }
  ///  Qualitative Periodicity Sampling assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
  ///  Example: /// Example: MEDIUM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var periodicitySamplingConf: String? { let o = _accessor.offset(VTOFFSET.periodicitySamplingConf.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var periodicitySamplingConfSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.periodicitySamplingConf.v) }
  ///  Qualitative assessment of the periodicity detection results from the Attitude and Shape Retrieval (ASR) Periodicity Assessment (PA) Tool (e.g. HIGH, MEDIUM, LOW).
  ///  Example: /// Example: MEDIUM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var periodicityDetectionConf: String? { let o = _accessor.offset(VTOFFSET.periodicityDetectionConf.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var periodicityDetectionConfSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.periodicityDetectionConf.v) }
  ///  Universally Unique collection ID. Mechanism to correlate Single Point Photometry (SPP) JSON files to images.
  ///  Example: /// Example: b5133288-ab63-4b15-81f6-c7eec0cdb0c0
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var collectionId: String? { let o = _accessor.offset(VTOFFSET.collectionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var collectionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.collectionId.v) }
  ///  Array of SOI Calibrations associated with this SOIObservationSet.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasCalibrations: Bool { let o = _accessor.offset(VTOFFSET.calibrations.v); return o == 0 ? false : true }
  public var calibrationsCount: Int32 { let o = _accessor.offset(VTOFFSET.calibrations.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func calibrations(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.calibrations.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  public var hasTags: Bool { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? false : true }
  public var tagsCount: Int32 { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func tags(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var transactionId: String? { let o = _accessor.offset(VTOFFSET.transactionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transactionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transactionId.v) }
  ///  OpticalSOIObservations associated with this SOIObservationSet.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasOpticalSoiobservationList: Bool { let o = _accessor.offset(VTOFFSET.opticalSoiobservationList.v); return o == 0 ? false : true }
  public var opticalSoiobservationListCount: Int32 { let o = _accessor.offset(VTOFFSET.opticalSoiobservationList.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func opticalSoiobservationList(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.opticalSoiobservationList.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  RadarSOIObservations associated with this RadarSOIObservationSet.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasRadarSoiobservationList: Bool { let o = _accessor.offset(VTOFFSET.radarSoiobservationList.v); return o == 0 ? false : true }
  public var radarSoiobservationListCount: Int32 { let o = _accessor.offset(VTOFFSET.radarSoiobservationList.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func radarSoiobservationList(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.radarSoiobservationList.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: SOIObservationSet_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : SOIObservationSet_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startSOIObservationSet_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 73) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(msgCreateDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msgCreateDate, at: VTOFFSET.msgCreateDate.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(origSensorId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSensorId, at: VTOFFSET.origSensorId.p) }
  public static func add(sensorAsId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sensorAsId, at: VTOFFSET.sensorAsId.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(senlat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senlat, def: 0.0, at: VTOFFSET.senlat.p) }
  public static func add(senlon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senlon, def: 0.0, at: VTOFFSET.senlon.p) }
  public static func add(senalt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senalt, def: 0.0, at: VTOFFSET.senalt.p) }
  public static func add(senx: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senx, def: 0.0, at: VTOFFSET.senx.p) }
  public static func add(seny: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: seny, def: 0.0, at: VTOFFSET.seny.p) }
  public static func add(senz: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senz, def: 0.0, at: VTOFFSET.senz.p) }
  public static func add(senvelx: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senvelx, def: 0.0, at: VTOFFSET.senvelx.p) }
  public static func add(senvely: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senvely, def: 0.0, at: VTOFFSET.senvely.p) }
  public static func add(senvelz: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senvelz, def: 0.0, at: VTOFFSET.senvelz.p) }
  public static func add(idElset: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idElset, at: VTOFFSET.idElset.p) }
  public static func add(startTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: startTime, at: VTOFFSET.startTime.p) }
  public static func add(endTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: endTime, at: VTOFFSET.endTime.p) }
  public static func add(numObs: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numObs, def: 0, at: VTOFFSET.numObs.p) }
  public static func add(type: SOIObservationSet_Ingest_type_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: type.rawValue, def: 0, at: VTOFFSET.type.p) }
  public static func add(polarAngleStart: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: polarAngleStart, def: 0.0, at: VTOFFSET.polarAngleStart.p) }
  public static func add(polarAngleEnd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: polarAngleEnd, def: 0.0, at: VTOFFSET.polarAngleEnd.p) }
  public static func add(referenceFrame: SOIObservationSet_Ingest_referenceFrame_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: referenceFrame.rawValue, def: 0, at: VTOFFSET.referenceFrame.p) }
  public static func add(senReferenceFrame: SOIObservationSet_Ingest_senReferenceFrame_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senReferenceFrame.rawValue, def: 0, at: VTOFFSET.senReferenceFrame.p) }
  public static func add(losDeclinationStart: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: losDeclinationStart, def: 0.0, at: VTOFFSET.losDeclinationStart.p) }
  public static func add(losDeclinationEnd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: losDeclinationEnd, def: 0.0, at: VTOFFSET.losDeclinationEnd.p) }
  public static func add(pointingAngleAzStart: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pointingAngleAzStart, def: 0.0, at: VTOFFSET.pointingAngleAzStart.p) }
  public static func add(pointingAngleAzEnd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pointingAngleAzEnd, def: 0.0, at: VTOFFSET.pointingAngleAzEnd.p) }
  public static func add(pointingAngleElStart: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pointingAngleElStart, def: 0.0, at: VTOFFSET.pointingAngleElStart.p) }
  public static func add(pointingAngleElEnd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pointingAngleElEnd, def: 0.0, at: VTOFFSET.pointingAngleElEnd.p) }
  public static func add(pixelArrayWidth: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pixelArrayWidth, def: 0, at: VTOFFSET.pixelArrayWidth.p) }
  public static func add(pixelArrayHeight: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pixelArrayHeight, def: 0, at: VTOFFSET.pixelArrayHeight.p) }
  public static func add(numSpectralFilters: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numSpectralFilters, def: 0, at: VTOFFSET.numSpectralFilters.p) }
  public static func addVectorOf(spectralFilters: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: spectralFilters, at: VTOFFSET.spectralFilters.p) }
  public static func add(collectionMode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: collectionMode, at: VTOFFSET.collectionMode.p) }
  public static func add(gain: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gain, def: 0.0, at: VTOFFSET.gain.p) }
  public static func add(binningHoriz: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: binningHoriz, def: 0, at: VTOFFSET.binningHoriz.p) }
  public static func add(binningVert: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: binningVert, def: 0, at: VTOFFSET.binningVert.p) }
  public static func add(solarMag: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: solarMag, def: 0.0, at: VTOFFSET.solarMag.p) }
  public static func add(pixelMin: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pixelMin, def: 0, at: VTOFFSET.pixelMin.p) }
  public static func add(pixelMax: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pixelMax, def: 0, at: VTOFFSET.pixelMax.p) }
  public static func add(softwareVersion: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: softwareVersion, at: VTOFFSET.softwareVersion.p) }
  public static func add(satelliteName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: satelliteName, at: VTOFFSET.satelliteName.p) }
  public static func add(starCatName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: starCatName, at: VTOFFSET.starCatName.p) }
  public static func add(corrQuality: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: corrQuality, def: 0.0, at: VTOFFSET.corrQuality.p) }
  public static func add(uct: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: uct, def: false,
   at: VTOFFSET.uct.p) }
  public static func add(validCalibrations: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: validCalibrations, at: VTOFFSET.validCalibrations.p) }
  public static func add(calibrationType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: calibrationType, at: VTOFFSET.calibrationType.p) }
  public static func add(percentSatThreshold: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: percentSatThreshold, def: 0.0, at: VTOFFSET.percentSatThreshold.p) }
  public static func add(changeDetected: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: changeDetected, def: false,
   at: VTOFFSET.changeDetected.p) }
  public static func add(periodicityChangeDetected: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: periodicityChangeDetected, def: false,
   at: VTOFFSET.periodicityChangeDetected.p) }
  public static func add(brightnessVarianceChangeDetected: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: brightnessVarianceChangeDetected, def: false,
   at: VTOFFSET.brightnessVarianceChangeDetected.p) }
  public static func add(solarPhaseAngleBrightnessChangeDetected: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: solarPhaseAngleBrightnessChangeDetected, def: false,
   at: VTOFFSET.solarPhaseAngleBrightnessChangeDetected.p) }
  public static func add(changeConf: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: changeConf, at: VTOFFSET.changeConf.p) }
  public static func add(collectionDensityConf: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: collectionDensityConf, at: VTOFFSET.collectionDensityConf.p) }
  public static func add(periodicitySamplingConf: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: periodicitySamplingConf, at: VTOFFSET.periodicitySamplingConf.p) }
  public static func add(periodicityDetectionConf: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: periodicityDetectionConf, at: VTOFFSET.periodicityDetectionConf.p) }
  public static func add(collectionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: collectionId, at: VTOFFSET.collectionId.p) }
  public static func addVectorOf(calibrations: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: calibrations, at: VTOFFSET.calibrations.p) }
  public static func addVectorOf(tags: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tags, at: VTOFFSET.tags.p) }
  public static func add(transactionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transactionId, at: VTOFFSET.transactionId.p) }
  public static func addVectorOf(opticalSoiobservationList: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: opticalSoiobservationList, at: VTOFFSET.opticalSoiobservationList.p) }
  public static func addVectorOf(radarSoiobservationList: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: radarSoiobservationList, at: VTOFFSET.radarSoiobservationList.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(dataMode: SOIObservationSet_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endSOIObservationSet_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSOIObservationSet_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    msgCreateDateOffset msgCreateDate: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    origSensorIdOffset origSensorId: Offset = Offset(),
    sensorAsIdOffset sensorAsId: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    satNo: Int32 = 0,
    origObjectIdOffset origObjectId: Offset = Offset(),
    senlat: Double = 0.0,
    senlon: Double = 0.0,
    senalt: Double = 0.0,
    senx: Double = 0.0,
    seny: Double = 0.0,
    senz: Double = 0.0,
    senvelx: Double = 0.0,
    senvely: Double = 0.0,
    senvelz: Double = 0.0,
    idElsetOffset idElset: Offset = Offset(),
    startTimeOffset startTime: Offset = Offset(),
    endTimeOffset endTime: Offset = Offset(),
    numObs: Int32 = 0,
    type: SOIObservationSet_Ingest_type_Enum = .optical,
    polarAngleStart: Double = 0.0,
    polarAngleEnd: Double = 0.0,
    referenceFrame: SOIObservationSet_Ingest_referenceFrame_Enum = .j2000,
    senReferenceFrame: SOIObservationSet_Ingest_senReferenceFrame_Enum = .j2000,
    losDeclinationStart: Double = 0.0,
    losDeclinationEnd: Double = 0.0,
    pointingAngleAzStart: Double = 0.0,
    pointingAngleAzEnd: Double = 0.0,
    pointingAngleElStart: Double = 0.0,
    pointingAngleElEnd: Double = 0.0,
    pixelArrayWidth: Int32 = 0,
    pixelArrayHeight: Int32 = 0,
    numSpectralFilters: Int32 = 0,
    spectralFiltersVectorOffset spectralFilters: Offset = Offset(),
    collectionModeOffset collectionMode: Offset = Offset(),
    gain: Double = 0.0,
    binningHoriz: Int32 = 0,
    binningVert: Int32 = 0,
    solarMag: Double = 0.0,
    pixelMin: Int32 = 0,
    pixelMax: Int32 = 0,
    softwareVersionOffset softwareVersion: Offset = Offset(),
    satelliteNameOffset satelliteName: Offset = Offset(),
    starCatNameOffset starCatName: Offset = Offset(),
    corrQuality: Double = 0.0,
    uct: Bool = false,
    validCalibrationsOffset validCalibrations: Offset = Offset(),
    calibrationTypeOffset calibrationType: Offset = Offset(),
    percentSatThreshold: Double = 0.0,
    changeDetected: Bool = false,
    periodicityChangeDetected: Bool = false,
    brightnessVarianceChangeDetected: Bool = false,
    solarPhaseAngleBrightnessChangeDetected: Bool = false,
    changeConfOffset changeConf: Offset = Offset(),
    collectionDensityConfOffset collectionDensityConf: Offset = Offset(),
    periodicitySamplingConfOffset periodicitySamplingConf: Offset = Offset(),
    periodicityDetectionConfOffset periodicityDetectionConf: Offset = Offset(),
    collectionIdOffset collectionId: Offset = Offset(),
    calibrationsVectorOffset calibrations: Offset = Offset(),
    tagsVectorOffset tags: Offset = Offset(),
    transactionIdOffset transactionId: Offset = Offset(),
    opticalSoiobservationListVectorOffset opticalSoiobservationList: Offset = Offset(),
    radarSoiobservationListVectorOffset radarSoiobservationList: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    dataMode: SOIObservationSet_Ingest_dataMode_Enum = .real
  ) -> Offset {
    let __start = SOIObservationSet_Ingest.startSOIObservationSet_Ingest(&fbb)
    SOIObservationSet_Ingest.add(id: id, &fbb)
    SOIObservationSet_Ingest.add(classificationMarking: classificationMarking, &fbb)
    SOIObservationSet_Ingest.add(msgCreateDate: msgCreateDate, &fbb)
    SOIObservationSet_Ingest.add(idSensor: idSensor, &fbb)
    SOIObservationSet_Ingest.add(origSensorId: origSensorId, &fbb)
    SOIObservationSet_Ingest.add(sensorAsId: sensorAsId, &fbb)
    SOIObservationSet_Ingest.add(idOnOrbit: idOnOrbit, &fbb)
    SOIObservationSet_Ingest.add(satNo: satNo, &fbb)
    SOIObservationSet_Ingest.add(origObjectId: origObjectId, &fbb)
    SOIObservationSet_Ingest.add(senlat: senlat, &fbb)
    SOIObservationSet_Ingest.add(senlon: senlon, &fbb)
    SOIObservationSet_Ingest.add(senalt: senalt, &fbb)
    SOIObservationSet_Ingest.add(senx: senx, &fbb)
    SOIObservationSet_Ingest.add(seny: seny, &fbb)
    SOIObservationSet_Ingest.add(senz: senz, &fbb)
    SOIObservationSet_Ingest.add(senvelx: senvelx, &fbb)
    SOIObservationSet_Ingest.add(senvely: senvely, &fbb)
    SOIObservationSet_Ingest.add(senvelz: senvelz, &fbb)
    SOIObservationSet_Ingest.add(idElset: idElset, &fbb)
    SOIObservationSet_Ingest.add(startTime: startTime, &fbb)
    SOIObservationSet_Ingest.add(endTime: endTime, &fbb)
    SOIObservationSet_Ingest.add(numObs: numObs, &fbb)
    SOIObservationSet_Ingest.add(type: type, &fbb)
    SOIObservationSet_Ingest.add(polarAngleStart: polarAngleStart, &fbb)
    SOIObservationSet_Ingest.add(polarAngleEnd: polarAngleEnd, &fbb)
    SOIObservationSet_Ingest.add(referenceFrame: referenceFrame, &fbb)
    SOIObservationSet_Ingest.add(senReferenceFrame: senReferenceFrame, &fbb)
    SOIObservationSet_Ingest.add(losDeclinationStart: losDeclinationStart, &fbb)
    SOIObservationSet_Ingest.add(losDeclinationEnd: losDeclinationEnd, &fbb)
    SOIObservationSet_Ingest.add(pointingAngleAzStart: pointingAngleAzStart, &fbb)
    SOIObservationSet_Ingest.add(pointingAngleAzEnd: pointingAngleAzEnd, &fbb)
    SOIObservationSet_Ingest.add(pointingAngleElStart: pointingAngleElStart, &fbb)
    SOIObservationSet_Ingest.add(pointingAngleElEnd: pointingAngleElEnd, &fbb)
    SOIObservationSet_Ingest.add(pixelArrayWidth: pixelArrayWidth, &fbb)
    SOIObservationSet_Ingest.add(pixelArrayHeight: pixelArrayHeight, &fbb)
    SOIObservationSet_Ingest.add(numSpectralFilters: numSpectralFilters, &fbb)
    SOIObservationSet_Ingest.addVectorOf(spectralFilters: spectralFilters, &fbb)
    SOIObservationSet_Ingest.add(collectionMode: collectionMode, &fbb)
    SOIObservationSet_Ingest.add(gain: gain, &fbb)
    SOIObservationSet_Ingest.add(binningHoriz: binningHoriz, &fbb)
    SOIObservationSet_Ingest.add(binningVert: binningVert, &fbb)
    SOIObservationSet_Ingest.add(solarMag: solarMag, &fbb)
    SOIObservationSet_Ingest.add(pixelMin: pixelMin, &fbb)
    SOIObservationSet_Ingest.add(pixelMax: pixelMax, &fbb)
    SOIObservationSet_Ingest.add(softwareVersion: softwareVersion, &fbb)
    SOIObservationSet_Ingest.add(satelliteName: satelliteName, &fbb)
    SOIObservationSet_Ingest.add(starCatName: starCatName, &fbb)
    SOIObservationSet_Ingest.add(corrQuality: corrQuality, &fbb)
    SOIObservationSet_Ingest.add(uct: uct, &fbb)
    SOIObservationSet_Ingest.add(validCalibrations: validCalibrations, &fbb)
    SOIObservationSet_Ingest.add(calibrationType: calibrationType, &fbb)
    SOIObservationSet_Ingest.add(percentSatThreshold: percentSatThreshold, &fbb)
    SOIObservationSet_Ingest.add(changeDetected: changeDetected, &fbb)
    SOIObservationSet_Ingest.add(periodicityChangeDetected: periodicityChangeDetected, &fbb)
    SOIObservationSet_Ingest.add(brightnessVarianceChangeDetected: brightnessVarianceChangeDetected, &fbb)
    SOIObservationSet_Ingest.add(solarPhaseAngleBrightnessChangeDetected: solarPhaseAngleBrightnessChangeDetected, &fbb)
    SOIObservationSet_Ingest.add(changeConf: changeConf, &fbb)
    SOIObservationSet_Ingest.add(collectionDensityConf: collectionDensityConf, &fbb)
    SOIObservationSet_Ingest.add(periodicitySamplingConf: periodicitySamplingConf, &fbb)
    SOIObservationSet_Ingest.add(periodicityDetectionConf: periodicityDetectionConf, &fbb)
    SOIObservationSet_Ingest.add(collectionId: collectionId, &fbb)
    SOIObservationSet_Ingest.addVectorOf(calibrations: calibrations, &fbb)
    SOIObservationSet_Ingest.addVectorOf(tags: tags, &fbb)
    SOIObservationSet_Ingest.add(transactionId: transactionId, &fbb)
    SOIObservationSet_Ingest.addVectorOf(opticalSoiobservationList: opticalSoiobservationList, &fbb)
    SOIObservationSet_Ingest.addVectorOf(radarSoiobservationList: radarSoiobservationList, &fbb)
    SOIObservationSet_Ingest.add(createdAt: createdAt, &fbb)
    SOIObservationSet_Ingest.add(createdBy: createdBy, &fbb)
    SOIObservationSet_Ingest.add(source: source, &fbb)
    SOIObservationSet_Ingest.add(origin: origin, &fbb)
    SOIObservationSet_Ingest.add(origNetwork: origNetwork, &fbb)
    SOIObservationSet_Ingest.add(sourceDl: sourceDl, &fbb)
    SOIObservationSet_Ingest.add(dataMode: dataMode, &fbb)
    return SOIObservationSet_Ingest.endSOIObservationSet_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msgCreateDate.p, fieldName: "msgCreateDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSensorId.p, fieldName: "origSensorId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sensorAsId.p, fieldName: "sensorAsId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.senlat.p, fieldName: "senlat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senlon.p, fieldName: "senlon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senalt.p, fieldName: "senalt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senx.p, fieldName: "senx", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.seny.p, fieldName: "seny", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senz.p, fieldName: "senz", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senvelx.p, fieldName: "senvelx", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senvely.p, fieldName: "senvely", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senvelz.p, fieldName: "senvelz", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.idElset.p, fieldName: "idElset", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.startTime.p, fieldName: "startTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.endTime.p, fieldName: "endTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numObs.p, fieldName: "numObs", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: SOIObservationSet_Ingest_type_Enum.self)
    try _v.visit(field: VTOFFSET.polarAngleStart.p, fieldName: "polarAngleStart", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.polarAngleEnd.p, fieldName: "polarAngleEnd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.referenceFrame.p, fieldName: "referenceFrame", required: false, type: SOIObservationSet_Ingest_referenceFrame_Enum.self)
    try _v.visit(field: VTOFFSET.senReferenceFrame.p, fieldName: "senReferenceFrame", required: false, type: SOIObservationSet_Ingest_senReferenceFrame_Enum.self)
    try _v.visit(field: VTOFFSET.losDeclinationStart.p, fieldName: "losDeclinationStart", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.losDeclinationEnd.p, fieldName: "losDeclinationEnd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pointingAngleAzStart.p, fieldName: "pointingAngleAzStart", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pointingAngleAzEnd.p, fieldName: "pointingAngleAzEnd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pointingAngleElStart.p, fieldName: "pointingAngleElStart", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pointingAngleElEnd.p, fieldName: "pointingAngleElEnd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pixelArrayWidth.p, fieldName: "pixelArrayWidth", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.pixelArrayHeight.p, fieldName: "pixelArrayHeight", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numSpectralFilters.p, fieldName: "numSpectralFilters", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.spectralFilters.p, fieldName: "spectralFilters", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.collectionMode.p, fieldName: "collectionMode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.gain.p, fieldName: "gain", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.binningHoriz.p, fieldName: "binningHoriz", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.binningVert.p, fieldName: "binningVert", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.solarMag.p, fieldName: "solarMag", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pixelMin.p, fieldName: "pixelMin", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.pixelMax.p, fieldName: "pixelMax", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.softwareVersion.p, fieldName: "softwareVersion", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satelliteName.p, fieldName: "satelliteName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.starCatName.p, fieldName: "starCatName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.corrQuality.p, fieldName: "corrQuality", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.uct.p, fieldName: "uct", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.validCalibrations.p, fieldName: "validCalibrations", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.calibrationType.p, fieldName: "calibrationType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.percentSatThreshold.p, fieldName: "percentSatThreshold", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.changeDetected.p, fieldName: "changeDetected", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.periodicityChangeDetected.p, fieldName: "periodicityChangeDetected", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.brightnessVarianceChangeDetected.p, fieldName: "brightnessVarianceChangeDetected", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.solarPhaseAngleBrightnessChangeDetected.p, fieldName: "solarPhaseAngleBrightnessChangeDetected", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.changeConf.p, fieldName: "changeConf", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.collectionDensityConf.p, fieldName: "collectionDensityConf", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.periodicitySamplingConf.p, fieldName: "periodicitySamplingConf", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.periodicityDetectionConf.p, fieldName: "periodicityDetectionConf", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.collectionId.p, fieldName: "collectionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.calibrations.p, fieldName: "calibrations", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.tags.p, fieldName: "tags", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.transactionId.p, fieldName: "transactionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.opticalSoiobservationList.p, fieldName: "opticalSoiobservationList", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.radarSoiobservationList.p, fieldName: "radarSoiobservationList", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: SOIObservationSet_Ingest_dataMode_Enum.self)
    _v.finish()
  }
}

