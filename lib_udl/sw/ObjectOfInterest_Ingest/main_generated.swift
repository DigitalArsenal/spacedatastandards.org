// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum ObjectOfInterest_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: ObjectOfInterest_Ingest_dataMode_Enum { return .exercise }
  public static var min: ObjectOfInterest_Ingest_dataMode_Enum { return .real }
}


///  /// OnOrbit objects of interest, which include information about the last known state of the object.
public struct ObjectOfInterest_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "OBJE" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: ObjectOfInterest_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idOnOrbit = 8
    case satNo = 10
    case name = 12
    case sensorTaskingStartTime = 14
    case sensorTaskingStopTime = 16
    case priority = 18
    case status = 20
    case statusDate = 22
    case description = 24
    case lastObTime = 26
    case missedObTime = 28
    case deltaVs = 30
    case deltaTs = 32
    case svEpoch = 34
    case x = 36
    case y = 38
    case z = 40
    case xvel = 42
    case yvel = 44
    case zvel = 46
    case elsetEpoch = 48
    case meanMotion = 50
    case eccentricity = 52
    case inclination = 54
    case raan = 56
    case argOfPerigee = 58
    case meanAnomaly = 60
    case revNo = 62
    case bStar = 64
    case meanMotionDot = 66
    case meanMotionDdot = 68
    case semiMajorAxis = 70
    case period = 72
    case apogee = 74
    case perigee = 76
    case affectedObjects = 78
    case createdAt = 80
    case createdBy = 82
    case source = 84
    case origin = 86
    case origNetwork = 88
    case dataMode = 90
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: OBJECTOFINTEREST-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  UUID of the parent Onorbit record.
  ///  Example: /// Example: REF-ONORBIT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Unique name of the object of interest event.
  ///  Example: /// Example: Example_name
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  Sensor tasking start time for object of interest.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var sensorTaskingStartTime: String? { let o = _accessor.offset(VTOFFSET.sensorTaskingStartTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sensorTaskingStartTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sensorTaskingStartTime.v) }
  ///  Sensor tasking stop time for object of interest.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var sensorTaskingStopTime: String? { let o = _accessor.offset(VTOFFSET.sensorTaskingStopTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sensorTaskingStopTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sensorTaskingStopTime.v) }
  ///  Priority of the object of interest as an integer (1=highest priority).
  ///  Example: /// Example: 7
  ///  Constraints: No constraints specified.
  public var priority: Int32 { let o = _accessor.offset(VTOFFSET.priority.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).
  ///  Example: /// Example: OPEN
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var status: String? { let o = _accessor.offset(VTOFFSET.status.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var statusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.status.v) }
  ///  Time of last status change of the object of interest event.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var statusDate: String? { let o = _accessor.offset(VTOFFSET.statusDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var statusDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.statusDate.v) }
  ///  Description of the object of interest event.
  ///  Example: /// Example: Example description
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var description: String? { let o = _accessor.offset(VTOFFSET.description.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.description.v) }
  ///  Last reported observation time in ISO 8601 UTC time, with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  public var lastObTime: String? { let o = _accessor.offset(VTOFFSET.lastObTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastObTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastObTime.v) }
  ///  The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  public var missedObTime: String? { let o = _accessor.offset(VTOFFSET.missedObTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var missedObTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.missedObTime.v) }
  ///  Possible delta V applications for the object of interest, in km/sec.
  ///  Example: /// Example: [1.1, 2.2, 3.3]
  ///  Constraints: No constraints specified.
  public var hasDeltaVs: Bool { let o = _accessor.offset(VTOFFSET.deltaVs.v); return o == 0 ? false : true }
  public var deltaVsCount: Int32 { let o = _accessor.offset(VTOFFSET.deltaVs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func deltaVs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.deltaVs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Possible delta time applications for the object of interest, in seconds.
  ///  Example: /// Example: [1.1, 2.2, 3.3]
  ///  Constraints: No constraints specified.
  public var hasDeltaTs: Bool { let o = _accessor.offset(VTOFFSET.deltaTs.v); return o == 0 ? false : true }
  public var deltaTsCount: Int32 { let o = _accessor.offset(VTOFFSET.deltaTs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func deltaTs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.deltaTs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  public var svEpoch: String? { let o = _accessor.offset(VTOFFSET.svEpoch.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var svEpochSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.svEpoch.v) }
  ///  Last reported x position of the object in km, in J2000 coordinates.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var x: Double { let o = _accessor.offset(VTOFFSET.x.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported y position of the object in km, in J2000 coordinates.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var y: Double { let o = _accessor.offset(VTOFFSET.y.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported z position of the object in km, in J2000 coordinates.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var z: Double { let o = _accessor.offset(VTOFFSET.z.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported x velocity of the object in km/sec, in J2000 coordinates.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var xvel: Double { let o = _accessor.offset(VTOFFSET.xvel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported y velocity of the object in km/sec, in J2000 coordinates.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var yvel: Double { let o = _accessor.offset(VTOFFSET.yvel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported z velocity of the object in km/sec, in J2000 coordinates.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var zvel: Double { let o = _accessor.offset(VTOFFSET.zvel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  public var elsetEpoch: String? { let o = _accessor.offset(VTOFFSET.elsetEpoch.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var elsetEpochSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.elsetEpoch.v) }
  ///  Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var meanMotion: Double { let o = _accessor.offset(VTOFFSET.meanMotion.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var eccentricity: Double { let o = _accessor.offset(VTOFFSET.eccentricity.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var inclination: Double { let o = _accessor.offset(VTOFFSET.inclination.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var raan: Double { let o = _accessor.offset(VTOFFSET.raan.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var argOfPerigee: Double { let o = _accessor.offset(VTOFFSET.argOfPerigee.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var meanAnomaly: Double { let o = _accessor.offset(VTOFFSET.meanAnomaly.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var revNo: Int32 { let o = _accessor.offset(VTOFFSET.revNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var bStar: Double { let o = _accessor.offset(VTOFFSET.bStar.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var meanMotionDot: Double { let o = _accessor.offset(VTOFFSET.meanMotionDot.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var meanMotionDdot: Double { let o = _accessor.offset(VTOFFSET.meanMotionDdot.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var semiMajorAxis: Double { let o = _accessor.offset(VTOFFSET.semiMajorAxis.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported orbit period. Period of the orbit is equal to inverse of mean motion.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var period: Double { let o = _accessor.offset(VTOFFSET.period.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var apogee: Double { let o = _accessor.offset(VTOFFSET.apogee.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Last reported perigee. The orbit point nearest to the center of the earth in kilometers.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var perigee: Double { let o = _accessor.offset(VTOFFSET.perigee.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional array of Onorbit IDs (idOnOrbit) representing satellites potentially affected by this object of interest.
  ///  Example: /// Example: ['AFFECTEDOBJECT1-ID', 'AFFECTEDOBJECT2-ID']
  ///  Constraints: No constraints specified.
  public var hasAffectedObjects: Bool { let o = _accessor.offset(VTOFFSET.affectedObjects.v); return o == 0 ? false : true }
  public var affectedObjectsCount: Int32 { let o = _accessor.offset(VTOFFSET.affectedObjects.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func affectedObjects(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.affectedObjects.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: ObjectOfInterest_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : ObjectOfInterest_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startObjectOfInterest_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 44) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(sensorTaskingStartTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sensorTaskingStartTime, at: VTOFFSET.sensorTaskingStartTime.p) }
  public static func add(sensorTaskingStopTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sensorTaskingStopTime, at: VTOFFSET.sensorTaskingStopTime.p) }
  public static func add(priority: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: priority, def: 0, at: VTOFFSET.priority.p) }
  public static func add(status: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: status, at: VTOFFSET.status.p) }
  public static func add(statusDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: statusDate, at: VTOFFSET.statusDate.p) }
  public static func add(description: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: description, at: VTOFFSET.description.p) }
  public static func add(lastObTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastObTime, at: VTOFFSET.lastObTime.p) }
  public static func add(missedObTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: missedObTime, at: VTOFFSET.missedObTime.p) }
  public static func addVectorOf(deltaVs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: deltaVs, at: VTOFFSET.deltaVs.p) }
  public static func addVectorOf(deltaTs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: deltaTs, at: VTOFFSET.deltaTs.p) }
  public static func add(svEpoch: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: svEpoch, at: VTOFFSET.svEpoch.p) }
  public static func add(x: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: x, def: 0.0, at: VTOFFSET.x.p) }
  public static func add(y: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: y, def: 0.0, at: VTOFFSET.y.p) }
  public static func add(z: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: z, def: 0.0, at: VTOFFSET.z.p) }
  public static func add(xvel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: xvel, def: 0.0, at: VTOFFSET.xvel.p) }
  public static func add(yvel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: yvel, def: 0.0, at: VTOFFSET.yvel.p) }
  public static func add(zvel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: zvel, def: 0.0, at: VTOFFSET.zvel.p) }
  public static func add(elsetEpoch: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: elsetEpoch, at: VTOFFSET.elsetEpoch.p) }
  public static func add(meanMotion: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: meanMotion, def: 0.0, at: VTOFFSET.meanMotion.p) }
  public static func add(eccentricity: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: eccentricity, def: 0.0, at: VTOFFSET.eccentricity.p) }
  public static func add(inclination: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: inclination, def: 0.0, at: VTOFFSET.inclination.p) }
  public static func add(raan: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: raan, def: 0.0, at: VTOFFSET.raan.p) }
  public static func add(argOfPerigee: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: argOfPerigee, def: 0.0, at: VTOFFSET.argOfPerigee.p) }
  public static func add(meanAnomaly: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: meanAnomaly, def: 0.0, at: VTOFFSET.meanAnomaly.p) }
  public static func add(revNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: revNo, def: 0, at: VTOFFSET.revNo.p) }
  public static func add(bStar: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bStar, def: 0.0, at: VTOFFSET.bStar.p) }
  public static func add(meanMotionDot: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: meanMotionDot, def: 0.0, at: VTOFFSET.meanMotionDot.p) }
  public static func add(meanMotionDdot: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: meanMotionDdot, def: 0.0, at: VTOFFSET.meanMotionDdot.p) }
  public static func add(semiMajorAxis: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: semiMajorAxis, def: 0.0, at: VTOFFSET.semiMajorAxis.p) }
  public static func add(period: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: period, def: 0.0, at: VTOFFSET.period.p) }
  public static func add(apogee: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: apogee, def: 0.0, at: VTOFFSET.apogee.p) }
  public static func add(perigee: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: perigee, def: 0.0, at: VTOFFSET.perigee.p) }
  public static func addVectorOf(affectedObjects: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: affectedObjects, at: VTOFFSET.affectedObjects.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: ObjectOfInterest_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endObjectOfInterest_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createObjectOfInterest_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    satNo: Int32 = 0,
    nameOffset name: Offset = Offset(),
    sensorTaskingStartTimeOffset sensorTaskingStartTime: Offset = Offset(),
    sensorTaskingStopTimeOffset sensorTaskingStopTime: Offset = Offset(),
    priority: Int32 = 0,
    statusOffset status: Offset = Offset(),
    statusDateOffset statusDate: Offset = Offset(),
    descriptionOffset description: Offset = Offset(),
    lastObTimeOffset lastObTime: Offset = Offset(),
    missedObTimeOffset missedObTime: Offset = Offset(),
    deltaVsVectorOffset deltaVs: Offset = Offset(),
    deltaTsVectorOffset deltaTs: Offset = Offset(),
    svEpochOffset svEpoch: Offset = Offset(),
    x: Double = 0.0,
    y: Double = 0.0,
    z: Double = 0.0,
    xvel: Double = 0.0,
    yvel: Double = 0.0,
    zvel: Double = 0.0,
    elsetEpochOffset elsetEpoch: Offset = Offset(),
    meanMotion: Double = 0.0,
    eccentricity: Double = 0.0,
    inclination: Double = 0.0,
    raan: Double = 0.0,
    argOfPerigee: Double = 0.0,
    meanAnomaly: Double = 0.0,
    revNo: Int32 = 0,
    bStar: Double = 0.0,
    meanMotionDot: Double = 0.0,
    meanMotionDdot: Double = 0.0,
    semiMajorAxis: Double = 0.0,
    period: Double = 0.0,
    apogee: Double = 0.0,
    perigee: Double = 0.0,
    affectedObjectsVectorOffset affectedObjects: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: ObjectOfInterest_Ingest_dataMode_Enum = .real
  ) -> Offset {
    let __start = ObjectOfInterest_Ingest.startObjectOfInterest_Ingest(&fbb)
    ObjectOfInterest_Ingest.add(id: id, &fbb)
    ObjectOfInterest_Ingest.add(classificationMarking: classificationMarking, &fbb)
    ObjectOfInterest_Ingest.add(idOnOrbit: idOnOrbit, &fbb)
    ObjectOfInterest_Ingest.add(satNo: satNo, &fbb)
    ObjectOfInterest_Ingest.add(name: name, &fbb)
    ObjectOfInterest_Ingest.add(sensorTaskingStartTime: sensorTaskingStartTime, &fbb)
    ObjectOfInterest_Ingest.add(sensorTaskingStopTime: sensorTaskingStopTime, &fbb)
    ObjectOfInterest_Ingest.add(priority: priority, &fbb)
    ObjectOfInterest_Ingest.add(status: status, &fbb)
    ObjectOfInterest_Ingest.add(statusDate: statusDate, &fbb)
    ObjectOfInterest_Ingest.add(description: description, &fbb)
    ObjectOfInterest_Ingest.add(lastObTime: lastObTime, &fbb)
    ObjectOfInterest_Ingest.add(missedObTime: missedObTime, &fbb)
    ObjectOfInterest_Ingest.addVectorOf(deltaVs: deltaVs, &fbb)
    ObjectOfInterest_Ingest.addVectorOf(deltaTs: deltaTs, &fbb)
    ObjectOfInterest_Ingest.add(svEpoch: svEpoch, &fbb)
    ObjectOfInterest_Ingest.add(x: x, &fbb)
    ObjectOfInterest_Ingest.add(y: y, &fbb)
    ObjectOfInterest_Ingest.add(z: z, &fbb)
    ObjectOfInterest_Ingest.add(xvel: xvel, &fbb)
    ObjectOfInterest_Ingest.add(yvel: yvel, &fbb)
    ObjectOfInterest_Ingest.add(zvel: zvel, &fbb)
    ObjectOfInterest_Ingest.add(elsetEpoch: elsetEpoch, &fbb)
    ObjectOfInterest_Ingest.add(meanMotion: meanMotion, &fbb)
    ObjectOfInterest_Ingest.add(eccentricity: eccentricity, &fbb)
    ObjectOfInterest_Ingest.add(inclination: inclination, &fbb)
    ObjectOfInterest_Ingest.add(raan: raan, &fbb)
    ObjectOfInterest_Ingest.add(argOfPerigee: argOfPerigee, &fbb)
    ObjectOfInterest_Ingest.add(meanAnomaly: meanAnomaly, &fbb)
    ObjectOfInterest_Ingest.add(revNo: revNo, &fbb)
    ObjectOfInterest_Ingest.add(bStar: bStar, &fbb)
    ObjectOfInterest_Ingest.add(meanMotionDot: meanMotionDot, &fbb)
    ObjectOfInterest_Ingest.add(meanMotionDdot: meanMotionDdot, &fbb)
    ObjectOfInterest_Ingest.add(semiMajorAxis: semiMajorAxis, &fbb)
    ObjectOfInterest_Ingest.add(period: period, &fbb)
    ObjectOfInterest_Ingest.add(apogee: apogee, &fbb)
    ObjectOfInterest_Ingest.add(perigee: perigee, &fbb)
    ObjectOfInterest_Ingest.addVectorOf(affectedObjects: affectedObjects, &fbb)
    ObjectOfInterest_Ingest.add(createdAt: createdAt, &fbb)
    ObjectOfInterest_Ingest.add(createdBy: createdBy, &fbb)
    ObjectOfInterest_Ingest.add(source: source, &fbb)
    ObjectOfInterest_Ingest.add(origin: origin, &fbb)
    ObjectOfInterest_Ingest.add(origNetwork: origNetwork, &fbb)
    ObjectOfInterest_Ingest.add(dataMode: dataMode, &fbb)
    return ObjectOfInterest_Ingest.endObjectOfInterest_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sensorTaskingStartTime.p, fieldName: "sensorTaskingStartTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sensorTaskingStopTime.p, fieldName: "sensorTaskingStopTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.priority.p, fieldName: "priority", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.status.p, fieldName: "status", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.statusDate.p, fieldName: "statusDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.description.p, fieldName: "description", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lastObTime.p, fieldName: "lastObTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.missedObTime.p, fieldName: "missedObTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.deltaVs.p, fieldName: "deltaVs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.deltaTs.p, fieldName: "deltaTs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.svEpoch.p, fieldName: "svEpoch", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.x.p, fieldName: "x", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.y.p, fieldName: "y", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.z.p, fieldName: "z", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.xvel.p, fieldName: "xvel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.yvel.p, fieldName: "yvel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.zvel.p, fieldName: "zvel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elsetEpoch.p, fieldName: "elsetEpoch", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.meanMotion.p, fieldName: "meanMotion", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.eccentricity.p, fieldName: "eccentricity", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.inclination.p, fieldName: "inclination", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.raan.p, fieldName: "raan", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.argOfPerigee.p, fieldName: "argOfPerigee", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.meanAnomaly.p, fieldName: "meanAnomaly", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.revNo.p, fieldName: "revNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.bStar.p, fieldName: "bStar", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.meanMotionDot.p, fieldName: "meanMotionDot", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.meanMotionDdot.p, fieldName: "meanMotionDdot", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.semiMajorAxis.p, fieldName: "semiMajorAxis", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.period.p, fieldName: "period", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.apogee.p, fieldName: "apogee", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.perigee.p, fieldName: "perigee", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.affectedObjects.p, fieldName: "affectedObjects", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: ObjectOfInterest_Ingest_dataMode_Enum.self)
    _v.finish()
  }
}

