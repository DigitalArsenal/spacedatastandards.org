// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Information about the Point of Contact (POC) for this ISR Collection.
public struct ISRCollectionPOC_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ISRC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: ISRCollectionPOC_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case name = 6
    case callsign = 8
    case unit = 10
    case email = 12
    case phone = 14
    case radioFrequency = 16
    case chatSystem = 18
    case chatName = 20
    case notes = 22
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the collection requirement POC.
  ///  Example: /// Example: ISRCOLLECTIONPOC-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Name of the POC.
  ///  Example: /// Example: NAME
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  Callsign of the POC.
  ///  Example: /// Example: CALLSIGN
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var callsign: String? { let o = _accessor.offset(VTOFFSET.callsign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var callsignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.callsign.v) }
  ///  Unit the POC belongs to.
  ///  Example: /// Example: UNIT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var unit: String? { let o = _accessor.offset(VTOFFSET.unit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var unitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.unit.v) }
  ///  Email address of the POC.
  ///  Example: /// Example: EMAIL
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var email: String? { let o = _accessor.offset(VTOFFSET.email.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var emailSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.email.v) }
  ///  Phone number of the POC.
  ///  Example: /// Example: PHONE
  ///  Constraints: Minimum length = 0, Maximum length = 45
  public var phone: String? { let o = _accessor.offset(VTOFFSET.phone.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var phoneSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.phone.v) }
  ///  Radio Frequency the POC is on.
  ///  Example: /// Example: 123.23
  ///  Constraints: No constraints specified.
  public var radioFrequency: Double { let o = _accessor.offset(VTOFFSET.radioFrequency.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Chat system the POC is accessing.
  ///  Example: /// Example: CHAT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var chatSystem: String? { let o = _accessor.offset(VTOFFSET.chatSystem.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var chatSystemSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.chatSystem.v) }
  ///  Chat name of the POC.
  ///  Example: /// Example: CHAT_NAME
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var chatName: String? { let o = _accessor.offset(VTOFFSET.chatName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var chatNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.chatName.v) }
  ///  Amplifying notes about the POC.
  ///  Example: /// Example: NOTES
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  public static func startISRCollectionPOC_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 10) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(callsign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callsign, at: VTOFFSET.callsign.p) }
  public static func add(unit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: unit, at: VTOFFSET.unit.p) }
  public static func add(email: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: email, at: VTOFFSET.email.p) }
  public static func add(phone: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: phone, at: VTOFFSET.phone.p) }
  public static func add(radioFrequency: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: radioFrequency, def: 0.0, at: VTOFFSET.radioFrequency.p) }
  public static func add(chatSystem: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: chatSystem, at: VTOFFSET.chatSystem.p) }
  public static func add(chatName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: chatName, at: VTOFFSET.chatName.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func endISRCollectionPOC_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createISRCollectionPOC_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    callsignOffset callsign: Offset = Offset(),
    unitOffset unit: Offset = Offset(),
    emailOffset email: Offset = Offset(),
    phoneOffset phone: Offset = Offset(),
    radioFrequency: Double = 0.0,
    chatSystemOffset chatSystem: Offset = Offset(),
    chatNameOffset chatName: Offset = Offset(),
    notesOffset notes: Offset = Offset()
  ) -> Offset {
    let __start = ISRCollectionPOC_Ingest.startISRCollectionPOC_Ingest(&fbb)
    ISRCollectionPOC_Ingest.add(id: id, &fbb)
    ISRCollectionPOC_Ingest.add(name: name, &fbb)
    ISRCollectionPOC_Ingest.add(callsign: callsign, &fbb)
    ISRCollectionPOC_Ingest.add(unit: unit, &fbb)
    ISRCollectionPOC_Ingest.add(email: email, &fbb)
    ISRCollectionPOC_Ingest.add(phone: phone, &fbb)
    ISRCollectionPOC_Ingest.add(radioFrequency: radioFrequency, &fbb)
    ISRCollectionPOC_Ingest.add(chatSystem: chatSystem, &fbb)
    ISRCollectionPOC_Ingest.add(chatName: chatName, &fbb)
    ISRCollectionPOC_Ingest.add(notes: notes, &fbb)
    return ISRCollectionPOC_Ingest.endISRCollectionPOC_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.callsign.p, fieldName: "callsign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.unit.p, fieldName: "unit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.email.p, fieldName: "email", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.phone.p, fieldName: "phone", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.radioFrequency.p, fieldName: "radioFrequency", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.chatSystem.p, fieldName: "chatSystem", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.chatName.p, fieldName: "chatName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

