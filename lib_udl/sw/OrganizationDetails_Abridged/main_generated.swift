// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum OrganizationDetails_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: OrganizationDetails_Abridged_dataMode_Enum { return .exercise }
  public static var min: OrganizationDetails_Abridged_dataMode_Enum { return .real }
}


///  /// Model representation of additional detailed organization data as collected by a particular source.
public struct OrganizationDetails_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ORGA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: OrganizationDetails_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case idOrganization = 6
    case classificationMarking = 8
    case name = 10
    case email = 12
    case address1 = 14
    case address2 = 16
    case address3 = 18
    case geoAdminLevel1 = 20
    case geoAdminLevel2 = 22
    case geoAdminLevel3 = 24
    case postalCode = 26
    case description = 28
    case formerOrgId = 30
    case parentOrgId = 32
    case financialYearEndDate = 34
    case revenue = 36
    case profit = 38
    case ebitda = 40
    case ftes = 42
    case broker = 44
    case ceo = 46
    case cfo = 48
    case cto = 50
    case riskManager = 52
    case massRanking = 54
    case revenueRanking = 56
    case financialNotes = 58
    case servicesNotes = 60
    case fleetPlanNotes = 62
    case source = 64
    case origin = 66
    case dataMode = 68
    case createdAt = 70
    case createdBy = 72
    case origNetwork = 74
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ORGANIZATIONDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Unique identifier of the parent organization.
  ///  Example: /// Example: ORGANIZATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idOrganization: String? { let o = _accessor.offset(VTOFFSET.idOrganization.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOrganizationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOrganization.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Organization details name.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  Listed contact email address for the organization.
  ///  Example: /// Example: some_organization@organization.com
  ///  Constraints: Minimum length = 0, Maximum length = 320
  public var email: String? { let o = _accessor.offset(VTOFFSET.email.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var emailSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.email.v) }
  ///  Street number of the organization.
  ///  Example: /// Example: 123 Main Street
  ///  Constraints: Minimum length = 0, Maximum length = 120
  public var address1: String? { let o = _accessor.offset(VTOFFSET.address1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var address1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.address1.v) }
  ///  Field for additional organization address information such as PO Box and unit number.
  ///  Example: /// Example: Apt 4B
  ///  Constraints: Minimum length = 0, Maximum length = 120
  public var address2: String? { let o = _accessor.offset(VTOFFSET.address2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var address2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.address2.v) }
  ///  Contains the third line of address information for an organization.
  ///  Example: /// Example: Colorado Springs CO, 80903
  ///  Constraints: Minimum length = 0, Maximum length = 120
  public var address3: String? { let o = _accessor.offset(VTOFFSET.address3.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var address3SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.address3.v) }
  ///  Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.
  ///  Example: /// Example: Colorado
  ///  Constraints: Minimum length = 0, Maximum length = 120
  public var geoAdminLevel1: String? { let o = _accessor.offset(VTOFFSET.geoAdminLevel1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var geoAdminLevel1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.geoAdminLevel1.v) }
  ///  Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.
  ///  Example: /// Example: El Paso County
  ///  Constraints: Minimum length = 0, Maximum length = 120
  public var geoAdminLevel2: String? { let o = _accessor.offset(VTOFFSET.geoAdminLevel2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var geoAdminLevel2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.geoAdminLevel2.v) }
  ///  Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.
  ///  Example: /// Example: Colorado Springs
  ///  Constraints: Minimum length = 0, Maximum length = 120
  public var geoAdminLevel3: String? { let o = _accessor.offset(VTOFFSET.geoAdminLevel3.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var geoAdminLevel3SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.geoAdminLevel3.v) }
  ///  A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.
  ///  Example: /// Example: 80903
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var postalCode: String? { let o = _accessor.offset(VTOFFSET.postalCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var postalCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.postalCode.v) }
  ///  Organization description.
  ///  Example: /// Example: Example description
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  public var description: String? { let o = _accessor.offset(VTOFFSET.description.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.description.v) }
  ///  Former organization ID (if this organization previously existed as another organization).
  ///  Example: /// Example: FORMERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var formerOrgId: String? { let o = _accessor.offset(VTOFFSET.formerOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var formerOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.formerOrgId.v) }
  ///  Parent organization ID of this organization if it is a child organization.
  ///  Example: /// Example: PARENTORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var parentOrgId: String? { let o = _accessor.offset(VTOFFSET.parentOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var parentOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.parentOrgId.v) }
  ///  For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var financialYearEndDate: String? { let o = _accessor.offset(VTOFFSET.financialYearEndDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var financialYearEndDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.financialYearEndDate.v) }
  ///  For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var revenue: Double { let o = _accessor.offset(VTOFFSET.revenue.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var profit: Double { let o = _accessor.offset(VTOFFSET.profit.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var ebitda: Double { let o = _accessor.offset(VTOFFSET.ebitda.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Total number of FTEs in this organization.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var ftes: Int32 { let o = _accessor.offset(VTOFFSET.ftes.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Designated broker for this organization.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var broker: String? { let o = _accessor.offset(VTOFFSET.broker.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var brokerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.broker.v) }
  ///  For organizations of type CORPORATION, the name of the Chief Executive Officer.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var ceo: String? { let o = _accessor.offset(VTOFFSET.ceo.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ceoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ceo.v) }
  ///  For organizations of type CORPORATION, the name of the Chief Financial Officer.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var cfo: String? { let o = _accessor.offset(VTOFFSET.cfo.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cfoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cfo.v) }
  ///  For organizations of type CORPORATION, the name of the Chief Technology Officer.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var cto: String? { let o = _accessor.offset(VTOFFSET.cto.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ctoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cto.v) }
  ///  The name of the risk manager for the organization.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var riskManager: String? { let o = _accessor.offset(VTOFFSET.riskManager.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var riskManagerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.riskManager.v) }
  ///  Mass ranking for this organization.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var massRanking: Int32 { let o = _accessor.offset(VTOFFSET.massRanking.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Revenue ranking for this organization.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var revenueRanking: Int32 { let o = _accessor.offset(VTOFFSET.revenueRanking.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  For organizations of type CORPORATION, notes on company financials.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  public var financialNotes: String? { let o = _accessor.offset(VTOFFSET.financialNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var financialNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.financialNotes.v) }
  ///  Notes on the services provided by the organization.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  public var servicesNotes: String? { let o = _accessor.offset(VTOFFSET.servicesNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var servicesNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.servicesNotes.v) }
  ///  Satellite fleet planning notes for this organization.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  public var fleetPlanNotes: String? { let o = _accessor.offset(VTOFFSET.fleetPlanNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fleetPlanNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fleetPlanNotes.v) }
  ///  Source of the data.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: OrganizationDetails_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : OrganizationDetails_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startOrganizationDetails_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 36) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(idOrganization: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOrganization, at: VTOFFSET.idOrganization.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(email: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: email, at: VTOFFSET.email.p) }
  public static func add(address1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: address1, at: VTOFFSET.address1.p) }
  public static func add(address2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: address2, at: VTOFFSET.address2.p) }
  public static func add(address3: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: address3, at: VTOFFSET.address3.p) }
  public static func add(geoAdminLevel1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geoAdminLevel1, at: VTOFFSET.geoAdminLevel1.p) }
  public static func add(geoAdminLevel2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geoAdminLevel2, at: VTOFFSET.geoAdminLevel2.p) }
  public static func add(geoAdminLevel3: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geoAdminLevel3, at: VTOFFSET.geoAdminLevel3.p) }
  public static func add(postalCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: postalCode, at: VTOFFSET.postalCode.p) }
  public static func add(description: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: description, at: VTOFFSET.description.p) }
  public static func add(formerOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: formerOrgId, at: VTOFFSET.formerOrgId.p) }
  public static func add(parentOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: parentOrgId, at: VTOFFSET.parentOrgId.p) }
  public static func add(financialYearEndDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: financialYearEndDate, at: VTOFFSET.financialYearEndDate.p) }
  public static func add(revenue: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: revenue, def: 0.0, at: VTOFFSET.revenue.p) }
  public static func add(profit: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: profit, def: 0.0, at: VTOFFSET.profit.p) }
  public static func add(ebitda: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ebitda, def: 0.0, at: VTOFFSET.ebitda.p) }
  public static func add(ftes: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ftes, def: 0, at: VTOFFSET.ftes.p) }
  public static func add(broker: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: broker, at: VTOFFSET.broker.p) }
  public static func add(ceo: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ceo, at: VTOFFSET.ceo.p) }
  public static func add(cfo: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cfo, at: VTOFFSET.cfo.p) }
  public static func add(cto: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cto, at: VTOFFSET.cto.p) }
  public static func add(riskManager: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: riskManager, at: VTOFFSET.riskManager.p) }
  public static func add(massRanking: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: massRanking, def: 0, at: VTOFFSET.massRanking.p) }
  public static func add(revenueRanking: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: revenueRanking, def: 0, at: VTOFFSET.revenueRanking.p) }
  public static func add(financialNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: financialNotes, at: VTOFFSET.financialNotes.p) }
  public static func add(servicesNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: servicesNotes, at: VTOFFSET.servicesNotes.p) }
  public static func add(fleetPlanNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fleetPlanNotes, at: VTOFFSET.fleetPlanNotes.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: OrganizationDetails_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endOrganizationDetails_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createOrganizationDetails_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    idOrganizationOffset idOrganization: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    emailOffset email: Offset = Offset(),
    address1Offset address1: Offset = Offset(),
    address2Offset address2: Offset = Offset(),
    address3Offset address3: Offset = Offset(),
    geoAdminLevel1Offset geoAdminLevel1: Offset = Offset(),
    geoAdminLevel2Offset geoAdminLevel2: Offset = Offset(),
    geoAdminLevel3Offset geoAdminLevel3: Offset = Offset(),
    postalCodeOffset postalCode: Offset = Offset(),
    descriptionOffset description: Offset = Offset(),
    formerOrgIdOffset formerOrgId: Offset = Offset(),
    parentOrgIdOffset parentOrgId: Offset = Offset(),
    financialYearEndDateOffset financialYearEndDate: Offset = Offset(),
    revenue: Double = 0.0,
    profit: Double = 0.0,
    ebitda: Double = 0.0,
    ftes: Int32 = 0,
    brokerOffset broker: Offset = Offset(),
    ceoOffset ceo: Offset = Offset(),
    cfoOffset cfo: Offset = Offset(),
    ctoOffset cto: Offset = Offset(),
    riskManagerOffset riskManager: Offset = Offset(),
    massRanking: Int32 = 0,
    revenueRanking: Int32 = 0,
    financialNotesOffset financialNotes: Offset = Offset(),
    servicesNotesOffset servicesNotes: Offset = Offset(),
    fleetPlanNotesOffset fleetPlanNotes: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: OrganizationDetails_Abridged_dataMode_Enum = .real,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = OrganizationDetails_Abridged.startOrganizationDetails_Abridged(&fbb)
    OrganizationDetails_Abridged.add(id: id, &fbb)
    OrganizationDetails_Abridged.add(idOrganization: idOrganization, &fbb)
    OrganizationDetails_Abridged.add(classificationMarking: classificationMarking, &fbb)
    OrganizationDetails_Abridged.add(name: name, &fbb)
    OrganizationDetails_Abridged.add(email: email, &fbb)
    OrganizationDetails_Abridged.add(address1: address1, &fbb)
    OrganizationDetails_Abridged.add(address2: address2, &fbb)
    OrganizationDetails_Abridged.add(address3: address3, &fbb)
    OrganizationDetails_Abridged.add(geoAdminLevel1: geoAdminLevel1, &fbb)
    OrganizationDetails_Abridged.add(geoAdminLevel2: geoAdminLevel2, &fbb)
    OrganizationDetails_Abridged.add(geoAdminLevel3: geoAdminLevel3, &fbb)
    OrganizationDetails_Abridged.add(postalCode: postalCode, &fbb)
    OrganizationDetails_Abridged.add(description: description, &fbb)
    OrganizationDetails_Abridged.add(formerOrgId: formerOrgId, &fbb)
    OrganizationDetails_Abridged.add(parentOrgId: parentOrgId, &fbb)
    OrganizationDetails_Abridged.add(financialYearEndDate: financialYearEndDate, &fbb)
    OrganizationDetails_Abridged.add(revenue: revenue, &fbb)
    OrganizationDetails_Abridged.add(profit: profit, &fbb)
    OrganizationDetails_Abridged.add(ebitda: ebitda, &fbb)
    OrganizationDetails_Abridged.add(ftes: ftes, &fbb)
    OrganizationDetails_Abridged.add(broker: broker, &fbb)
    OrganizationDetails_Abridged.add(ceo: ceo, &fbb)
    OrganizationDetails_Abridged.add(cfo: cfo, &fbb)
    OrganizationDetails_Abridged.add(cto: cto, &fbb)
    OrganizationDetails_Abridged.add(riskManager: riskManager, &fbb)
    OrganizationDetails_Abridged.add(massRanking: massRanking, &fbb)
    OrganizationDetails_Abridged.add(revenueRanking: revenueRanking, &fbb)
    OrganizationDetails_Abridged.add(financialNotes: financialNotes, &fbb)
    OrganizationDetails_Abridged.add(servicesNotes: servicesNotes, &fbb)
    OrganizationDetails_Abridged.add(fleetPlanNotes: fleetPlanNotes, &fbb)
    OrganizationDetails_Abridged.add(source: source, &fbb)
    OrganizationDetails_Abridged.add(origin: origin, &fbb)
    OrganizationDetails_Abridged.add(dataMode: dataMode, &fbb)
    OrganizationDetails_Abridged.add(createdAt: createdAt, &fbb)
    OrganizationDetails_Abridged.add(createdBy: createdBy, &fbb)
    OrganizationDetails_Abridged.add(origNetwork: origNetwork, &fbb)
    return OrganizationDetails_Abridged.endOrganizationDetails_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOrganization.p, fieldName: "idOrganization", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.email.p, fieldName: "email", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.address1.p, fieldName: "address1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.address2.p, fieldName: "address2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.address3.p, fieldName: "address3", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.geoAdminLevel1.p, fieldName: "geoAdminLevel1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.geoAdminLevel2.p, fieldName: "geoAdminLevel2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.geoAdminLevel3.p, fieldName: "geoAdminLevel3", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.postalCode.p, fieldName: "postalCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.description.p, fieldName: "description", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.formerOrgId.p, fieldName: "formerOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.parentOrgId.p, fieldName: "parentOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.financialYearEndDate.p, fieldName: "financialYearEndDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.revenue.p, fieldName: "revenue", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.profit.p, fieldName: "profit", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ebitda.p, fieldName: "ebitda", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ftes.p, fieldName: "ftes", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.broker.p, fieldName: "broker", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ceo.p, fieldName: "ceo", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cfo.p, fieldName: "cfo", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cto.p, fieldName: "cto", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.riskManager.p, fieldName: "riskManager", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.massRanking.p, fieldName: "massRanking", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.revenueRanking.p, fieldName: "revenueRanking", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.financialNotes.p, fieldName: "financialNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.servicesNotes.p, fieldName: "servicesNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fleetPlanNotes.p, fieldName: "fleetPlanNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: OrganizationDetails_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

