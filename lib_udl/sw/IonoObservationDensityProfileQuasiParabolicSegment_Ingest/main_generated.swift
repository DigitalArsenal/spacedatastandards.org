// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// A quasi-parabolic segment is the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C”. Usually 3 groups for E, F1, and F2 layers, but additional segments may be used to improve accuracy.
public struct IonoObservationDensityProfileQuasiParabolicSegment_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "IONO" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: IonoObservationDensityProfileQuasiParabolicSegment_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case index = 4
    case rb = 6
    case re = 8
    case a = 10
    case b = 12
    case c = 14
    case error = 16
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The index of this segment in the list, from 1 to NumSegments.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var index: Int32 { let o = _accessor.offset(VTOFFSET.index.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Starting range of the segment, in kilometers from the Earth's center.
  ///  Example: /// Example: 6460.1
  ///  Constraints: No constraints specified.
  public var rb: Double { let o = _accessor.offset(VTOFFSET.rb.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Ending range of the segment, in kilometers from the Earth's center.
  ///  Example: /// Example: 6480.001
  ///  Constraints: No constraints specified.
  public var re: Double { let o = _accessor.offset(VTOFFSET.re.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Coefficient A.
  ///  Example: /// Example: -550273940000
  ///  Constraints: No constraints specified.
  public var a: Double { let o = _accessor.offset(VTOFFSET.a.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Coefficient B.
  ///  Example: /// Example: 169837632
  ///  Constraints: No constraints specified.
  public var b: Double { let o = _accessor.offset(VTOFFSET.b.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Coefficient C.
  ///  Example: /// Example: 13104.63
  ///  Constraints: No constraints specified.
  public var c: Double { let o = _accessor.offset(VTOFFSET.c.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Best-fit error.
  ///  Example: /// Example: 0.0016
  ///  Constraints: No constraints specified.
  public var error: Double { let o = _accessor.offset(VTOFFSET.error.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  public static func startIonoObservationDensityProfileQuasiParabolicSegment_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 7) }
  public static func add(index: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: index, def: 0, at: VTOFFSET.index.p) }
  public static func add(rb: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rb, def: 0.0, at: VTOFFSET.rb.p) }
  public static func add(re: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: re, def: 0.0, at: VTOFFSET.re.p) }
  public static func add(a: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: a, def: 0.0, at: VTOFFSET.a.p) }
  public static func add(b: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: b, def: 0.0, at: VTOFFSET.b.p) }
  public static func add(c: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c, def: 0.0, at: VTOFFSET.c.p) }
  public static func add(error: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: error, def: 0.0, at: VTOFFSET.error.p) }
  public static func endIonoObservationDensityProfileQuasiParabolicSegment_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createIonoObservationDensityProfileQuasiParabolicSegment_Ingest(
    _ fbb: inout FlatBufferBuilder,
    index: Int32 = 0,
    rb: Double = 0.0,
    re: Double = 0.0,
    a: Double = 0.0,
    b: Double = 0.0,
    c: Double = 0.0,
    error: Double = 0.0
  ) -> Offset {
    let __start = IonoObservationDensityProfileQuasiParabolicSegment_Ingest.startIonoObservationDensityProfileQuasiParabolicSegment_Ingest(&fbb)
    IonoObservationDensityProfileQuasiParabolicSegment_Ingest.add(index: index, &fbb)
    IonoObservationDensityProfileQuasiParabolicSegment_Ingest.add(rb: rb, &fbb)
    IonoObservationDensityProfileQuasiParabolicSegment_Ingest.add(re: re, &fbb)
    IonoObservationDensityProfileQuasiParabolicSegment_Ingest.add(a: a, &fbb)
    IonoObservationDensityProfileQuasiParabolicSegment_Ingest.add(b: b, &fbb)
    IonoObservationDensityProfileQuasiParabolicSegment_Ingest.add(c: c, &fbb)
    IonoObservationDensityProfileQuasiParabolicSegment_Ingest.add(error: error, &fbb)
    return IonoObservationDensityProfileQuasiParabolicSegment_Ingest.endIonoObservationDensityProfileQuasiParabolicSegment_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.index.p, fieldName: "index", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.rb.p, fieldName: "rb", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.re.p, fieldName: "re", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.a.p, fieldName: "a", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.b.p, fieldName: "b", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.c.p, fieldName: "c", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.error.p, fieldName: "error", required: false, type: Double.self)
    _v.finish()
  }
}

