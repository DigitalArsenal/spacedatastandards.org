// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Array of point data for this Point Group.
public struct FlightPlanPoints_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "FLIG" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: FlightPlanPoints_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case pointName = 4
    case fppLat = 6
    case fppLon = 8
    case fppEta = 10
    case fppReqFuel = 12
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Name of this point.
  ///  Example: /// Example: CRUISE ALTITUDE ETP
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var pointName: String? { let o = _accessor.offset(VTOFFSET.pointName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pointNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pointName.v) }
  ///  WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var fppLat: Double { let o = _accessor.offset(VTOFFSET.fppLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  public var fppLon: Double { let o = _accessor.offset(VTOFFSET.fppLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2023-09-09T01:00:00.123Z
  ///  Constraints: No constraints specified.
  public var fppEta: String? { let o = _accessor.offset(VTOFFSET.fppEta.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fppEtaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fppEta.v) }
  ///  Fuel required at this point to execute an Equal Time Point (ETP) or Extended Operations (ETOPS) plan in pounds.
  ///  Example: /// Example: 4250.1
  ///  Constraints: No constraints specified.
  public var fppReqFuel: Double { let o = _accessor.offset(VTOFFSET.fppReqFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  public static func startFlightPlanPoints_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 5) }
  public static func add(pointName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pointName, at: VTOFFSET.pointName.p) }
  public static func add(fppLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fppLat, def: 0.0, at: VTOFFSET.fppLat.p) }
  public static func add(fppLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fppLon, def: 0.0, at: VTOFFSET.fppLon.p) }
  public static func add(fppEta: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fppEta, at: VTOFFSET.fppEta.p) }
  public static func add(fppReqFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fppReqFuel, def: 0.0, at: VTOFFSET.fppReqFuel.p) }
  public static func endFlightPlanPoints_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createFlightPlanPoints_Abridged(
    _ fbb: inout FlatBufferBuilder,
    pointNameOffset pointName: Offset = Offset(),
    fppLat: Double = 0.0,
    fppLon: Double = 0.0,
    fppEtaOffset fppEta: Offset = Offset(),
    fppReqFuel: Double = 0.0
  ) -> Offset {
    let __start = FlightPlanPoints_Abridged.startFlightPlanPoints_Abridged(&fbb)
    FlightPlanPoints_Abridged.add(pointName: pointName, &fbb)
    FlightPlanPoints_Abridged.add(fppLat: fppLat, &fbb)
    FlightPlanPoints_Abridged.add(fppLon: fppLon, &fbb)
    FlightPlanPoints_Abridged.add(fppEta: fppEta, &fbb)
    FlightPlanPoints_Abridged.add(fppReqFuel: fppReqFuel, &fbb)
    return FlightPlanPoints_Abridged.endFlightPlanPoints_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.pointName.p, fieldName: "pointName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fppLat.p, fieldName: "fppLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fppLon.p, fieldName: "fppLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fppEta.p, fieldName: "fppEta", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fppReqFuel.p, fieldName: "fppReqFuel", required: false, type: Double.self)
    _v.finish()
  }
}

