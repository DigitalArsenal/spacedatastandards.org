// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Stage_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Stage_Ingest_dataMode_Enum { return .exercise }
  public static var min: Stage_Ingest_dataMode_Enum { return .real }
}


///  /// Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.
public struct Stage_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "STAG" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Stage_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case idLaunchVehicle = 6
    case idEngine = 8
    case classificationMarking = 10
    case stageNumber = 12
    case type = 14
    case manufacturerOrgId = 16
    case numEngines = 18
    case length = 20
    case diameter = 22
    case mass = 24
    case vernier = 26
    case numVernier = 28
    case mainEngineThrustSeaLevel = 30
    case mainEngineThrustVacuum = 32
    case thrustSeaLevel = 34
    case thrustVacuum = 36
    case burnTime = 38
    case numBurns = 40
    case vernierBurnTime = 42
    case vernierNumBurns = 44
    case vernierThrustSeaLevel = 46
    case vernierThrustVacuum = 48
    case numStageElements = 50
    case reusable = 52
    case restartable = 54
    case controlThruster1 = 56
    case numControlThruster1 = 58
    case controlThruster2 = 60
    case numControlThruster2 = 62
    case photoUrls = 64
    case notes = 66
    case avionicsNotes = 68
    case tags = 70
    case createdAt = 72
    case createdBy = 74
    case source = 76
    case origin = 78
    case origNetwork = 80
    case dataMode = 82
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: STAGE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Identifier of the launch vehicle record for this stage.
  ///  Example: /// Example: LAUNCHVEHICLE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idLaunchVehicle: String? { let o = _accessor.offset(VTOFFSET.idLaunchVehicle.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idLaunchVehicleSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idLaunchVehicle.v) }
  ///  Identifier of the Engine record for this stage.
  ///  Example: /// Example: ENGINE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idEngine: String? { let o = _accessor.offset(VTOFFSET.idEngine.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idEngineSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idEngine.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The stage number of this launch stage.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var stageNumber: Int32 { let o = _accessor.offset(VTOFFSET.stageNumber.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
  ///  Example: /// Example: Electrostatic Ion
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  ID of the organization that manufactures this launch stage.
  ///  Example: /// Example: 5feed5d7-d131-57e5-a3fd-acc173bca736
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var manufacturerOrgId: String? { let o = _accessor.offset(VTOFFSET.manufacturerOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var manufacturerOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.manufacturerOrgId.v) }
  ///  The number of the specified engines on this launch stage.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var numEngines: Int32 { let o = _accessor.offset(VTOFFSET.numEngines.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Stage length in meters.
  ///  Example: /// Example: 25.13
  ///  Constraints: No constraints specified.
  public var length: Double { let o = _accessor.offset(VTOFFSET.length.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Stage maximum external diameter in meters.
  ///  Example: /// Example: 3.95
  ///  Constraints: No constraints specified.
  public var diameter: Double { let o = _accessor.offset(VTOFFSET.diameter.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Stage gross mass in kg.
  ///  Example: /// Example: 9956.1
  ///  Constraints: No constraints specified.
  public var mass: Double { let o = _accessor.offset(VTOFFSET.mass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Engine vernier or additional engine type.
  ///  Example: /// Example: vernier
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var vernier: String? { let o = _accessor.offset(VTOFFSET.vernier.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var vernierSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.vernier.v) }
  ///  Number of vernier or additional engines.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var numVernier: Int32 { let o = _accessor.offset(VTOFFSET.numVernier.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Thrust of the stage main engine at sea level in kN.
  ///  Example: /// Example: 733.4
  ///  Constraints: No constraints specified.
  public var mainEngineThrustSeaLevel: Double { let o = _accessor.offset(VTOFFSET.mainEngineThrustSeaLevel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Thrust of the stage main engine in a vacuum in kN.
  ///  Example: /// Example: 733.4
  ///  Constraints: No constraints specified.
  public var mainEngineThrustVacuum: Double { let o = _accessor.offset(VTOFFSET.mainEngineThrustVacuum.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Total thrust of the stage at sea level in kN.
  ///  Example: /// Example: 733.4
  ///  Constraints: No constraints specified.
  public var thrustSeaLevel: Double { let o = _accessor.offset(VTOFFSET.thrustSeaLevel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Total thrust of the stage in a vacuum in kN.
  ///  Example: /// Example: 733.4
  ///  Constraints: No constraints specified.
  public var thrustVacuum: Double { let o = _accessor.offset(VTOFFSET.thrustVacuum.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Total burn time of the stage engines in seconds.
  ///  Example: /// Example: 256.3
  ///  Constraints: No constraints specified.
  public var burnTime: Double { let o = _accessor.offset(VTOFFSET.burnTime.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Number of burns for the stage engines.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var numBurns: Int32 { let o = _accessor.offset(VTOFFSET.numBurns.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Total burn time of the vernier or additional stage engines in seconds.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var vernierBurnTime: Double { let o = _accessor.offset(VTOFFSET.vernierBurnTime.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Total number of burns of the vernier or additional stage engines.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  public var vernierNumBurns: Int32 { let o = _accessor.offset(VTOFFSET.vernierNumBurns.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Total thrust of one of the vernier or additional engines at sea level in kN.
  ///  Example: /// Example: 4.1
  ///  Constraints: No constraints specified.
  public var vernierThrustSeaLevel: Double { let o = _accessor.offset(VTOFFSET.vernierThrustSeaLevel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Total thrust of one of the vernier or additional engines in a vacuum in kN.
  ///  Example: /// Example: 3.2
  ///  Constraints: No constraints specified.
  public var vernierThrustVacuum: Double { let o = _accessor.offset(VTOFFSET.vernierThrustVacuum.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Number of launch stage elements used in this stage.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var numStageElements: Int32 { let o = _accessor.offset(VTOFFSET.numStageElements.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Boolean indicating if this launch stage is reusable.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var reusable: Bool { let o = _accessor.offset(VTOFFSET.reusable.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Boolean indicating if this launch stage can be restarted.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var restartable: Bool { let o = _accessor.offset(VTOFFSET.restartable.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Control thruster 1 type.
  ///  Example: /// Example: controlThruster1
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var controlThruster1: String? { let o = _accessor.offset(VTOFFSET.controlThruster1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var controlThruster1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.controlThruster1.v) }
  ///  Number of type control thruster 1.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var numControlThruster1: Int32 { let o = _accessor.offset(VTOFFSET.numControlThruster1.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Control thruster 2 type.
  ///  Example: /// Example: controlThruster2
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var controlThruster2: String? { let o = _accessor.offset(VTOFFSET.controlThruster2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var controlThruster2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.controlThruster2.v) }
  ///  Number of type control thruster 2.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var numControlThruster2: Int32 { let o = _accessor.offset(VTOFFSET.numControlThruster2.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of URLs of photos of the stage.
  ///  Example: /// Example: ['photoURL']
  ///  Constraints: No constraints specified.
  public var hasPhotoUrls: Bool { let o = _accessor.offset(VTOFFSET.photoUrls.v); return o == 0 ? false : true }
  public var photoUrlsCount: Int32 { let o = _accessor.offset(VTOFFSET.photoUrls.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func photoUrls(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.photoUrls.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Description/notes of the stage.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  ///  Description/notes of the stage avionics.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var avionicsNotes: String? { let o = _accessor.offset(VTOFFSET.avionicsNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var avionicsNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.avionicsNotes.v) }
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  public var hasTags: Bool { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? false : true }
  public var tagsCount: Int32 { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func tags(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Stage_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Stage_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startStage_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 40) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(idLaunchVehicle: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idLaunchVehicle, at: VTOFFSET.idLaunchVehicle.p) }
  public static func add(idEngine: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idEngine, at: VTOFFSET.idEngine.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(stageNumber: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: stageNumber, def: 0, at: VTOFFSET.stageNumber.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(manufacturerOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: manufacturerOrgId, at: VTOFFSET.manufacturerOrgId.p) }
  public static func add(numEngines: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numEngines, def: 0, at: VTOFFSET.numEngines.p) }
  public static func add(length: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: length, def: 0.0, at: VTOFFSET.length.p) }
  public static func add(diameter: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: diameter, def: 0.0, at: VTOFFSET.diameter.p) }
  public static func add(mass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: mass, def: 0.0, at: VTOFFSET.mass.p) }
  public static func add(vernier: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vernier, at: VTOFFSET.vernier.p) }
  public static func add(numVernier: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numVernier, def: 0, at: VTOFFSET.numVernier.p) }
  public static func add(mainEngineThrustSeaLevel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: mainEngineThrustSeaLevel, def: 0.0, at: VTOFFSET.mainEngineThrustSeaLevel.p) }
  public static func add(mainEngineThrustVacuum: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: mainEngineThrustVacuum, def: 0.0, at: VTOFFSET.mainEngineThrustVacuum.p) }
  public static func add(thrustSeaLevel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: thrustSeaLevel, def: 0.0, at: VTOFFSET.thrustSeaLevel.p) }
  public static func add(thrustVacuum: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: thrustVacuum, def: 0.0, at: VTOFFSET.thrustVacuum.p) }
  public static func add(burnTime: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: burnTime, def: 0.0, at: VTOFFSET.burnTime.p) }
  public static func add(numBurns: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numBurns, def: 0, at: VTOFFSET.numBurns.p) }
  public static func add(vernierBurnTime: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vernierBurnTime, def: 0.0, at: VTOFFSET.vernierBurnTime.p) }
  public static func add(vernierNumBurns: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vernierNumBurns, def: 0, at: VTOFFSET.vernierNumBurns.p) }
  public static func add(vernierThrustSeaLevel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vernierThrustSeaLevel, def: 0.0, at: VTOFFSET.vernierThrustSeaLevel.p) }
  public static func add(vernierThrustVacuum: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vernierThrustVacuum, def: 0.0, at: VTOFFSET.vernierThrustVacuum.p) }
  public static func add(numStageElements: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numStageElements, def: 0, at: VTOFFSET.numStageElements.p) }
  public static func add(reusable: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: reusable, def: false,
   at: VTOFFSET.reusable.p) }
  public static func add(restartable: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: restartable, def: false,
   at: VTOFFSET.restartable.p) }
  public static func add(controlThruster1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: controlThruster1, at: VTOFFSET.controlThruster1.p) }
  public static func add(numControlThruster1: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numControlThruster1, def: 0, at: VTOFFSET.numControlThruster1.p) }
  public static func add(controlThruster2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: controlThruster2, at: VTOFFSET.controlThruster2.p) }
  public static func add(numControlThruster2: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numControlThruster2, def: 0, at: VTOFFSET.numControlThruster2.p) }
  public static func addVectorOf(photoUrls: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: photoUrls, at: VTOFFSET.photoUrls.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func add(avionicsNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: avionicsNotes, at: VTOFFSET.avionicsNotes.p) }
  public static func addVectorOf(tags: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tags, at: VTOFFSET.tags.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: Stage_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endStage_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createStage_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    idLaunchVehicleOffset idLaunchVehicle: Offset = Offset(),
    idEngineOffset idEngine: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    stageNumber: Int32 = 0,
    typeOffset type: Offset = Offset(),
    manufacturerOrgIdOffset manufacturerOrgId: Offset = Offset(),
    numEngines: Int32 = 0,
    length: Double = 0.0,
    diameter: Double = 0.0,
    mass: Double = 0.0,
    vernierOffset vernier: Offset = Offset(),
    numVernier: Int32 = 0,
    mainEngineThrustSeaLevel: Double = 0.0,
    mainEngineThrustVacuum: Double = 0.0,
    thrustSeaLevel: Double = 0.0,
    thrustVacuum: Double = 0.0,
    burnTime: Double = 0.0,
    numBurns: Int32 = 0,
    vernierBurnTime: Double = 0.0,
    vernierNumBurns: Int32 = 0,
    vernierThrustSeaLevel: Double = 0.0,
    vernierThrustVacuum: Double = 0.0,
    numStageElements: Int32 = 0,
    reusable: Bool = false,
    restartable: Bool = false,
    controlThruster1Offset controlThruster1: Offset = Offset(),
    numControlThruster1: Int32 = 0,
    controlThruster2Offset controlThruster2: Offset = Offset(),
    numControlThruster2: Int32 = 0,
    photoUrlsVectorOffset photoUrls: Offset = Offset(),
    notesOffset notes: Offset = Offset(),
    avionicsNotesOffset avionicsNotes: Offset = Offset(),
    tagsVectorOffset tags: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: Stage_Ingest_dataMode_Enum = .real
  ) -> Offset {
    let __start = Stage_Ingest.startStage_Ingest(&fbb)
    Stage_Ingest.add(id: id, &fbb)
    Stage_Ingest.add(idLaunchVehicle: idLaunchVehicle, &fbb)
    Stage_Ingest.add(idEngine: idEngine, &fbb)
    Stage_Ingest.add(classificationMarking: classificationMarking, &fbb)
    Stage_Ingest.add(stageNumber: stageNumber, &fbb)
    Stage_Ingest.add(type: type, &fbb)
    Stage_Ingest.add(manufacturerOrgId: manufacturerOrgId, &fbb)
    Stage_Ingest.add(numEngines: numEngines, &fbb)
    Stage_Ingest.add(length: length, &fbb)
    Stage_Ingest.add(diameter: diameter, &fbb)
    Stage_Ingest.add(mass: mass, &fbb)
    Stage_Ingest.add(vernier: vernier, &fbb)
    Stage_Ingest.add(numVernier: numVernier, &fbb)
    Stage_Ingest.add(mainEngineThrustSeaLevel: mainEngineThrustSeaLevel, &fbb)
    Stage_Ingest.add(mainEngineThrustVacuum: mainEngineThrustVacuum, &fbb)
    Stage_Ingest.add(thrustSeaLevel: thrustSeaLevel, &fbb)
    Stage_Ingest.add(thrustVacuum: thrustVacuum, &fbb)
    Stage_Ingest.add(burnTime: burnTime, &fbb)
    Stage_Ingest.add(numBurns: numBurns, &fbb)
    Stage_Ingest.add(vernierBurnTime: vernierBurnTime, &fbb)
    Stage_Ingest.add(vernierNumBurns: vernierNumBurns, &fbb)
    Stage_Ingest.add(vernierThrustSeaLevel: vernierThrustSeaLevel, &fbb)
    Stage_Ingest.add(vernierThrustVacuum: vernierThrustVacuum, &fbb)
    Stage_Ingest.add(numStageElements: numStageElements, &fbb)
    Stage_Ingest.add(reusable: reusable, &fbb)
    Stage_Ingest.add(restartable: restartable, &fbb)
    Stage_Ingest.add(controlThruster1: controlThruster1, &fbb)
    Stage_Ingest.add(numControlThruster1: numControlThruster1, &fbb)
    Stage_Ingest.add(controlThruster2: controlThruster2, &fbb)
    Stage_Ingest.add(numControlThruster2: numControlThruster2, &fbb)
    Stage_Ingest.addVectorOf(photoUrls: photoUrls, &fbb)
    Stage_Ingest.add(notes: notes, &fbb)
    Stage_Ingest.add(avionicsNotes: avionicsNotes, &fbb)
    Stage_Ingest.addVectorOf(tags: tags, &fbb)
    Stage_Ingest.add(createdAt: createdAt, &fbb)
    Stage_Ingest.add(createdBy: createdBy, &fbb)
    Stage_Ingest.add(source: source, &fbb)
    Stage_Ingest.add(origin: origin, &fbb)
    Stage_Ingest.add(origNetwork: origNetwork, &fbb)
    Stage_Ingest.add(dataMode: dataMode, &fbb)
    return Stage_Ingest.endStage_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idLaunchVehicle.p, fieldName: "idLaunchVehicle", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idEngine.p, fieldName: "idEngine", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.stageNumber.p, fieldName: "stageNumber", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.manufacturerOrgId.p, fieldName: "manufacturerOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numEngines.p, fieldName: "numEngines", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.length.p, fieldName: "length", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.diameter.p, fieldName: "diameter", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.mass.p, fieldName: "mass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.vernier.p, fieldName: "vernier", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numVernier.p, fieldName: "numVernier", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.mainEngineThrustSeaLevel.p, fieldName: "mainEngineThrustSeaLevel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.mainEngineThrustVacuum.p, fieldName: "mainEngineThrustVacuum", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.thrustSeaLevel.p, fieldName: "thrustSeaLevel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.thrustVacuum.p, fieldName: "thrustVacuum", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.burnTime.p, fieldName: "burnTime", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.numBurns.p, fieldName: "numBurns", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.vernierBurnTime.p, fieldName: "vernierBurnTime", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.vernierNumBurns.p, fieldName: "vernierNumBurns", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.vernierThrustSeaLevel.p, fieldName: "vernierThrustSeaLevel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.vernierThrustVacuum.p, fieldName: "vernierThrustVacuum", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.numStageElements.p, fieldName: "numStageElements", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.reusable.p, fieldName: "reusable", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.restartable.p, fieldName: "restartable", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.controlThruster1.p, fieldName: "controlThruster1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numControlThruster1.p, fieldName: "numControlThruster1", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.controlThruster2.p, fieldName: "controlThruster2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numControlThruster2.p, fieldName: "numControlThruster2", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.photoUrls.p, fieldName: "photoUrls", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.avionicsNotes.p, fieldName: "avionicsNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tags.p, fieldName: "tags", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Stage_Ingest_dataMode_Enum.self)
    _v.finish()
  }
}

