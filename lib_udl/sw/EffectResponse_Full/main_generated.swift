// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum EffectResponse_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: EffectResponse_Full_dataMode_Enum { return .exercise }
  public static var min: EffectResponse_Full_dataMode_Enum { return .real }
}


///  /// A response for various effects on a target.
public struct EffectResponse_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EFFE" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EffectResponse_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idEffectRequest = 8
    case externalRequestId = 10
    case type = 12
    case actorSrcType = 14
    case actorSrcId = 16
    case munitionType = 18
    case munitionId = 20
    case shotsRequired = 22
    case probabilityOfKill = 24
    case collateralDamageEst = 26
    case actionsList = 28
    case externalActions = 30
    case coaMetrics = 32
    case redTimeToOverhead = 34
    case decisionDeadline = 36
    case redTargetSrcType = 38
    case redTargetSrcId = 40
    case createdAt = 42
    case createdBy = 44
    case source = 46
    case origin = 48
    case dataMode = 50
    case origNetwork = 52
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: EFFECTRESPONSE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the EffectRequest associated with this response.
  ///  Example: /// Example: EFFECTREQUEST-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idEffectRequest: String? { let o = _accessor.offset(VTOFFSET.idEffectRequest.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idEffectRequestSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idEffectRequest.v) }
  ///  The external system identifier of the associated effect request. A human readable unique id.
  ///  Example: /// Example: EXTERNALREQUEST-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var externalRequestId: String? { let o = _accessor.offset(VTOFFSET.externalRequestId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var externalRequestIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.externalRequestId.v) }
  ///  The type of response in this record (e.g. COA, SCORECARD, etc.).
  ///  Example: /// Example: COA
  ///  Constraints: Minimum length = 1, Maximum length = 24
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
  ///  Example: /// Example: AIRCRAFT
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var actorSrcType: String? { let o = _accessor.offset(VTOFFSET.actorSrcType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actorSrcTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.actorSrcType.v) }
  ///  The record ID, depending on the type identified in actorSrcType, of the requested asset.
  ///  Example: /// Example: RC-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var actorSrcId: String? { let o = _accessor.offset(VTOFFSET.actorSrcId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actorSrcIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.actorSrcId.v) }
  ///  The type of munition being fired.
  ///  Example: /// Example: Dummy
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var munitionType: String? { let o = _accessor.offset(VTOFFSET.munitionType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var munitionTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.munitionType.v) }
  ///  Unique identifier of the munition.
  ///  Example: /// Example: MUNITION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var munitionId: String? { let o = _accessor.offset(VTOFFSET.munitionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var munitionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.munitionId.v) }
  ///  The number of shots required to destroy target.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var shotsRequired: Int32 { let o = _accessor.offset(VTOFFSET.shotsRequired.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The probability of kill (0-1) of the target being destroyed.
  ///  Example: /// Example: 0.7
  ///  Constraints: No constraints specified.
  public var probabilityOfKill: Double { let o = _accessor.offset(VTOFFSET.probabilityOfKill.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The collateral damage estimate (CDE) of the munition being fired.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var collateralDamageEst: Double { let o = _accessor.offset(VTOFFSET.collateralDamageEst.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  List of actions associated with this effect response.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasActionsList: Bool { let o = _accessor.offset(VTOFFSET.actionsList.v); return o == 0 ? false : true }
  public var actionsListCount: Int32 { let o = _accessor.offset(VTOFFSET.actionsList.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func actionsList(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.actionsList.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  List of external actions to be executed as part of this task.
  ///  Example: /// Example: ['ACTION1', 'ACTION2']
  ///  Constraints: No constraints specified.
  public var hasExternalActions: Bool { let o = _accessor.offset(VTOFFSET.externalActions.v); return o == 0 ? false : true }
  public var externalActionsCount: Int32 { let o = _accessor.offset(VTOFFSET.externalActions.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func externalActions(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.externalActions.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  List of COA metrics associated with this effect response.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasCoaMetrics: Bool { let o = _accessor.offset(VTOFFSET.coaMetrics.v); return o == 0 ? false : true }
  public var coaMetricsCount: Int32 { let o = _accessor.offset(VTOFFSET.coaMetrics.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func coaMetrics(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.coaMetrics.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The time to overhead for the red force to be over their target, in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T00:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var redTimeToOverhead: String? { let o = _accessor.offset(VTOFFSET.redTimeToOverhead.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var redTimeToOverheadSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.redTimeToOverhead.v) }
  ///  The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T00:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var decisionDeadline: String? { let o = _accessor.offset(VTOFFSET.decisionDeadline.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var decisionDeadlineSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.decisionDeadline.v) }
  ///  The source type of the targetId identifier (POI, SITE, TRACK).
  ///  Example: /// Example: POI
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var redTargetSrcType: String? { let o = _accessor.offset(VTOFFSET.redTargetSrcType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var redTargetSrcTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.redTargetSrcType.v) }
  ///  The record ID, depending on the type identified in redTargetSrcType, of the red force target.  If the redTargetSrcType is POI or TRACK, then this identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
  ///  Example: /// Example: REDTARGETSRC-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var redTargetSrcId: String? { let o = _accessor.offset(VTOFFSET.redTargetSrcId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var redTargetSrcIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.redTargetSrcId.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2021-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: EffectResponse_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : EffectResponse_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startEffectResponse_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 25) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idEffectRequest: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idEffectRequest, at: VTOFFSET.idEffectRequest.p) }
  public static func add(externalRequestId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: externalRequestId, at: VTOFFSET.externalRequestId.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(actorSrcType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actorSrcType, at: VTOFFSET.actorSrcType.p) }
  public static func add(actorSrcId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actorSrcId, at: VTOFFSET.actorSrcId.p) }
  public static func add(munitionType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: munitionType, at: VTOFFSET.munitionType.p) }
  public static func add(munitionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: munitionId, at: VTOFFSET.munitionId.p) }
  public static func add(shotsRequired: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: shotsRequired, def: 0, at: VTOFFSET.shotsRequired.p) }
  public static func add(probabilityOfKill: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: probabilityOfKill, def: 0.0, at: VTOFFSET.probabilityOfKill.p) }
  public static func add(collateralDamageEst: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: collateralDamageEst, def: 0.0, at: VTOFFSET.collateralDamageEst.p) }
  public static func addVectorOf(actionsList: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actionsList, at: VTOFFSET.actionsList.p) }
  public static func addVectorOf(externalActions: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: externalActions, at: VTOFFSET.externalActions.p) }
  public static func addVectorOf(coaMetrics: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: coaMetrics, at: VTOFFSET.coaMetrics.p) }
  public static func add(redTimeToOverhead: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: redTimeToOverhead, at: VTOFFSET.redTimeToOverhead.p) }
  public static func add(decisionDeadline: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: decisionDeadline, at: VTOFFSET.decisionDeadline.p) }
  public static func add(redTargetSrcType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: redTargetSrcType, at: VTOFFSET.redTargetSrcType.p) }
  public static func add(redTargetSrcId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: redTargetSrcId, at: VTOFFSET.redTargetSrcId.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: EffectResponse_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endEffectResponse_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEffectResponse_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idEffectRequestOffset idEffectRequest: Offset = Offset(),
    externalRequestIdOffset externalRequestId: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    actorSrcTypeOffset actorSrcType: Offset = Offset(),
    actorSrcIdOffset actorSrcId: Offset = Offset(),
    munitionTypeOffset munitionType: Offset = Offset(),
    munitionIdOffset munitionId: Offset = Offset(),
    shotsRequired: Int32 = 0,
    probabilityOfKill: Double = 0.0,
    collateralDamageEst: Double = 0.0,
    actionsListVectorOffset actionsList: Offset = Offset(),
    externalActionsVectorOffset externalActions: Offset = Offset(),
    coaMetricsVectorOffset coaMetrics: Offset = Offset(),
    redTimeToOverheadOffset redTimeToOverhead: Offset = Offset(),
    decisionDeadlineOffset decisionDeadline: Offset = Offset(),
    redTargetSrcTypeOffset redTargetSrcType: Offset = Offset(),
    redTargetSrcIdOffset redTargetSrcId: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: EffectResponse_Full_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = EffectResponse_Full.startEffectResponse_Full(&fbb)
    EffectResponse_Full.add(id: id, &fbb)
    EffectResponse_Full.add(classificationMarking: classificationMarking, &fbb)
    EffectResponse_Full.add(idEffectRequest: idEffectRequest, &fbb)
    EffectResponse_Full.add(externalRequestId: externalRequestId, &fbb)
    EffectResponse_Full.add(type: type, &fbb)
    EffectResponse_Full.add(actorSrcType: actorSrcType, &fbb)
    EffectResponse_Full.add(actorSrcId: actorSrcId, &fbb)
    EffectResponse_Full.add(munitionType: munitionType, &fbb)
    EffectResponse_Full.add(munitionId: munitionId, &fbb)
    EffectResponse_Full.add(shotsRequired: shotsRequired, &fbb)
    EffectResponse_Full.add(probabilityOfKill: probabilityOfKill, &fbb)
    EffectResponse_Full.add(collateralDamageEst: collateralDamageEst, &fbb)
    EffectResponse_Full.addVectorOf(actionsList: actionsList, &fbb)
    EffectResponse_Full.addVectorOf(externalActions: externalActions, &fbb)
    EffectResponse_Full.addVectorOf(coaMetrics: coaMetrics, &fbb)
    EffectResponse_Full.add(redTimeToOverhead: redTimeToOverhead, &fbb)
    EffectResponse_Full.add(decisionDeadline: decisionDeadline, &fbb)
    EffectResponse_Full.add(redTargetSrcType: redTargetSrcType, &fbb)
    EffectResponse_Full.add(redTargetSrcId: redTargetSrcId, &fbb)
    EffectResponse_Full.add(createdAt: createdAt, &fbb)
    EffectResponse_Full.add(createdBy: createdBy, &fbb)
    EffectResponse_Full.add(source: source, &fbb)
    EffectResponse_Full.add(origin: origin, &fbb)
    EffectResponse_Full.add(dataMode: dataMode, &fbb)
    EffectResponse_Full.add(origNetwork: origNetwork, &fbb)
    return EffectResponse_Full.endEffectResponse_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idEffectRequest.p, fieldName: "idEffectRequest", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.externalRequestId.p, fieldName: "externalRequestId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.actorSrcType.p, fieldName: "actorSrcType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.actorSrcId.p, fieldName: "actorSrcId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.munitionType.p, fieldName: "munitionType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.munitionId.p, fieldName: "munitionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.shotsRequired.p, fieldName: "shotsRequired", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.probabilityOfKill.p, fieldName: "probabilityOfKill", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.collateralDamageEst.p, fieldName: "collateralDamageEst", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.actionsList.p, fieldName: "actionsList", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.externalActions.p, fieldName: "externalActions", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.coaMetrics.p, fieldName: "coaMetrics", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.redTimeToOverhead.p, fieldName: "redTimeToOverhead", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.decisionDeadline.p, fieldName: "decisionDeadline", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.redTargetSrcType.p, fieldName: "redTargetSrcType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.redTargetSrcId.p, fieldName: "redTargetSrcId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: EffectResponse_Full_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

