// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Remarks associated with this LogisticsSupport record.
public struct LogisticsRemarks_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "LOGI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: LogisticsRemarks_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case username = 4
    case remark = 6
    case lastChanged = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  User who published the remark.
  ///  Example: /// Example: JSMITH
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var username: String? { let o = _accessor.offset(VTOFFSET.username.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var usernameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.username.v) }
  ///  Text of the remark.
  ///  Example: /// Example: EXAMPLE REMARK
  ///  Constraints: Minimum length = 0, Maximum length = 4000
  public var remark: String? { let o = _accessor.offset(VTOFFSET.remark.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var remarkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.remark.v) }
  ///  Date the remark was published or updated, in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2023-07-17T10:30:00.123Z
  ///  Constraints: No constraints specified.
  public var lastChanged: String? { let o = _accessor.offset(VTOFFSET.lastChanged.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastChangedSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastChanged.v) }
  public static func startLogisticsRemarks_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(username: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: username, at: VTOFFSET.username.p) }
  public static func add(remark: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: remark, at: VTOFFSET.remark.p) }
  public static func add(lastChanged: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastChanged, at: VTOFFSET.lastChanged.p) }
  public static func endLogisticsRemarks_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createLogisticsRemarks_Ingest(
    _ fbb: inout FlatBufferBuilder,
    usernameOffset username: Offset = Offset(),
    remarkOffset remark: Offset = Offset(),
    lastChangedOffset lastChanged: Offset = Offset()
  ) -> Offset {
    let __start = LogisticsRemarks_Ingest.startLogisticsRemarks_Ingest(&fbb)
    LogisticsRemarks_Ingest.add(username: username, &fbb)
    LogisticsRemarks_Ingest.add(remark: remark, &fbb)
    LogisticsRemarks_Ingest.add(lastChanged: lastChanged, &fbb)
    return LogisticsRemarks_Ingest.endLogisticsRemarks_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.username.p, fieldName: "username", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.remark.p, fieldName: "remark", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lastChanged.p, fieldName: "lastChanged", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

