// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Schema for SOI Calibration data.
public struct SOICalibration_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SOIC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: SOICalibration_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case calExtinctionCoeff = 4
    case calSkyBg = 6
    case calBgIntensity = 8
    case calSpectralFilterSolarMag = 10
    case calZeroPoint = 12
    case calNumDetectedStars = 14
    case calNumCorrelatedStars = 16
    case calExtinctionCoeffUnc = 18
    case calExtinctionCoeffMaxUnc = 20
    case calTime = 22
    case calType = 24
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Coefficient value for how much signal would be lost to atmospheric attenuation for a star at zenith, in magnitudes per air mass.
  ///  Example: /// Example: 0.2
  ///  Constraints: No constraints specified.
  public var calExtinctionCoeff: Double { let o = _accessor.offset(VTOFFSET.calExtinctionCoeff.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average Sky Background signals in magnitudes, at calibration. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  ///  Example: /// Example: 30086.25
  ///  Constraints: No constraints specified.
  public var calSkyBg: Double { let o = _accessor.offset(VTOFFSET.calSkyBg.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Background intensity, at calibration, specified in kilowatts per steradian per micrometer.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var calBgIntensity: Double { let o = _accessor.offset(VTOFFSET.calBgIntensity.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  In-band solar magnitudes at 1 A.U, at calibration (e.g. -5.0 to 30.0).
  ///  Example: /// Example: 19.23664587
  ///  Constraints: No constraints specified.
  public var calSpectralFilterSolarMag: Double { let o = _accessor.offset(VTOFFSET.calSpectralFilterSolarMag.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Value representing the difference between the catalog magnitude and instrumental magnitude for a set of standard stars, at calibration (e.g. -5.0 to 30.0).
  ///  Example: /// Example: 25.15682157
  ///  Constraints: No constraints specified.
  public var calZeroPoint: Double { let o = _accessor.offset(VTOFFSET.calZeroPoint.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Number of detected stars in the FOV with the target object, at calibration. Helps identify frames with clouds.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var calNumDetectedStars: Int32 { let o = _accessor.offset(VTOFFSET.calNumDetectedStars.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of correlated stars in the FOV with the target object, at calibration. Can be 0 for narrow FOV sensors.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var calNumCorrelatedStars: Int32 { let o = _accessor.offset(VTOFFSET.calNumCorrelatedStars.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Extinction coefficient uncertainty in magnitudes, at calibration, which represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
  ///  Example: /// Example: 0.06474939
  ///  Constraints: No constraints specified.
  public var calExtinctionCoeffUnc: Double { let o = _accessor.offset(VTOFFSET.calExtinctionCoeffUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum extinction coefficient uncertainty in magnitudes, at calibration (e.g. -5.0 to 30.0).
  ///  Example: /// Example: 0.19708838
  ///  Constraints: No constraints specified.
  public var calExtinctionCoeffMaxUnc: Double { let o = _accessor.offset(VTOFFSET.calExtinctionCoeffMaxUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Start time of calibration in ISO 8601 UTC time, with millisecond precision.
  ///  Example: /// Example: 2023-01-02T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var calTime: String? { let o = _accessor.offset(VTOFFSET.calTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var calTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.calTime.v) }
  ///  Type of calibration (e.g. PRE, MID, POST).
  ///  Example: /// Example: PRE
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var calType: String? { let o = _accessor.offset(VTOFFSET.calType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var calTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.calType.v) }
  public static func startSOICalibration_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 11) }
  public static func add(calExtinctionCoeff: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: calExtinctionCoeff, def: 0.0, at: VTOFFSET.calExtinctionCoeff.p) }
  public static func add(calSkyBg: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: calSkyBg, def: 0.0, at: VTOFFSET.calSkyBg.p) }
  public static func add(calBgIntensity: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: calBgIntensity, def: 0.0, at: VTOFFSET.calBgIntensity.p) }
  public static func add(calSpectralFilterSolarMag: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: calSpectralFilterSolarMag, def: 0.0, at: VTOFFSET.calSpectralFilterSolarMag.p) }
  public static func add(calZeroPoint: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: calZeroPoint, def: 0.0, at: VTOFFSET.calZeroPoint.p) }
  public static func add(calNumDetectedStars: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: calNumDetectedStars, def: 0, at: VTOFFSET.calNumDetectedStars.p) }
  public static func add(calNumCorrelatedStars: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: calNumCorrelatedStars, def: 0, at: VTOFFSET.calNumCorrelatedStars.p) }
  public static func add(calExtinctionCoeffUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: calExtinctionCoeffUnc, def: 0.0, at: VTOFFSET.calExtinctionCoeffUnc.p) }
  public static func add(calExtinctionCoeffMaxUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: calExtinctionCoeffMaxUnc, def: 0.0, at: VTOFFSET.calExtinctionCoeffMaxUnc.p) }
  public static func add(calTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: calTime, at: VTOFFSET.calTime.p) }
  public static func add(calType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: calType, at: VTOFFSET.calType.p) }
  public static func endSOICalibration_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSOICalibration_Full(
    _ fbb: inout FlatBufferBuilder,
    calExtinctionCoeff: Double = 0.0,
    calSkyBg: Double = 0.0,
    calBgIntensity: Double = 0.0,
    calSpectralFilterSolarMag: Double = 0.0,
    calZeroPoint: Double = 0.0,
    calNumDetectedStars: Int32 = 0,
    calNumCorrelatedStars: Int32 = 0,
    calExtinctionCoeffUnc: Double = 0.0,
    calExtinctionCoeffMaxUnc: Double = 0.0,
    calTimeOffset calTime: Offset = Offset(),
    calTypeOffset calType: Offset = Offset()
  ) -> Offset {
    let __start = SOICalibration_Full.startSOICalibration_Full(&fbb)
    SOICalibration_Full.add(calExtinctionCoeff: calExtinctionCoeff, &fbb)
    SOICalibration_Full.add(calSkyBg: calSkyBg, &fbb)
    SOICalibration_Full.add(calBgIntensity: calBgIntensity, &fbb)
    SOICalibration_Full.add(calSpectralFilterSolarMag: calSpectralFilterSolarMag, &fbb)
    SOICalibration_Full.add(calZeroPoint: calZeroPoint, &fbb)
    SOICalibration_Full.add(calNumDetectedStars: calNumDetectedStars, &fbb)
    SOICalibration_Full.add(calNumCorrelatedStars: calNumCorrelatedStars, &fbb)
    SOICalibration_Full.add(calExtinctionCoeffUnc: calExtinctionCoeffUnc, &fbb)
    SOICalibration_Full.add(calExtinctionCoeffMaxUnc: calExtinctionCoeffMaxUnc, &fbb)
    SOICalibration_Full.add(calTime: calTime, &fbb)
    SOICalibration_Full.add(calType: calType, &fbb)
    return SOICalibration_Full.endSOICalibration_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.calExtinctionCoeff.p, fieldName: "calExtinctionCoeff", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.calSkyBg.p, fieldName: "calSkyBg", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.calBgIntensity.p, fieldName: "calBgIntensity", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.calSpectralFilterSolarMag.p, fieldName: "calSpectralFilterSolarMag", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.calZeroPoint.p, fieldName: "calZeroPoint", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.calNumDetectedStars.p, fieldName: "calNumDetectedStars", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.calNumCorrelatedStars.p, fieldName: "calNumCorrelatedStars", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.calExtinctionCoeffUnc.p, fieldName: "calExtinctionCoeffUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.calExtinctionCoeffMaxUnc.p, fieldName: "calExtinctionCoeffMaxUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.calTime.p, fieldName: "calTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.calType.p, fieldName: "calType", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

