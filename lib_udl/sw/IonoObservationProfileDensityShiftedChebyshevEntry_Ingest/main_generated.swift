// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Coefficients, using ‘shiftedChebyshev’ sub-field, to describe E, F1, and bottomside F2 profile shapes, or height uncertainty boundaries (upper and lower).
public struct IonoObservationProfileDensityShiftedChebyshevEntry_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "IONO" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case layer = 4
    case fstart = 6
    case fstop = 8
    case peakheight = 10
    case zhalfNm = 12
    case n = 14
    case coeffs = 16
    case error = 18
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The ionospheric plasma layer.
  ///  Example: /// Example: F2
  ///  Constraints: No constraints specified.
  public var layer: String? { let o = _accessor.offset(VTOFFSET.layer.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var layerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.layer.v) }
  ///  Start frequency of the layer, in MHz.
  ///  Example: /// Example: 0.2
  ///  Constraints: No constraints specified.
  public var fstart: Double { let o = _accessor.offset(VTOFFSET.fstart.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Stop frequency of the layer, in MHz.
  ///  Example: /// Example: 1.39
  ///  Constraints: No constraints specified.
  public var fstop: Double { let o = _accessor.offset(VTOFFSET.fstop.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Peak height of the layer, in kilometers.
  ///  Example: /// Example: 110.1
  ///  Constraints: No constraints specified.
  public var peakheight: Double { let o = _accessor.offset(VTOFFSET.peakheight.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Height at which density is half of the peak Nm, in kilometers.
  ///  Example: /// Example: 210.1
  ///  Constraints: No constraints specified.
  public var zhalfNm: Double { let o = _accessor.offset(VTOFFSET.zhalfNm.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Number of coefficients in the expansion.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var n: Int32 { let o = _accessor.offset(VTOFFSET.n.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of coefficients.
  ///  Example: /// Example: [-11.2, -10.536, 3.357, -0.888, 0.155]
  ///  Constraints: No constraints specified.
  public var hasCoeffs: Bool { let o = _accessor.offset(VTOFFSET.coeffs.v); return o == 0 ? false : true }
  public var coeffsCount: Int32 { let o = _accessor.offset(VTOFFSET.coeffs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func coeffs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.coeffs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Best fit error.
  ///  Example: /// Example: 0.02
  ///  Constraints: No constraints specified.
  public var error: Double { let o = _accessor.offset(VTOFFSET.error.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  public static func startIonoObservationProfileDensityShiftedChebyshevEntry_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 8) }
  public static func add(layer: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: layer, at: VTOFFSET.layer.p) }
  public static func add(fstart: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fstart, def: 0.0, at: VTOFFSET.fstart.p) }
  public static func add(fstop: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fstop, def: 0.0, at: VTOFFSET.fstop.p) }
  public static func add(peakheight: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: peakheight, def: 0.0, at: VTOFFSET.peakheight.p) }
  public static func add(zhalfNm: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: zhalfNm, def: 0.0, at: VTOFFSET.zhalfNm.p) }
  public static func add(n: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: n, def: 0, at: VTOFFSET.n.p) }
  public static func addVectorOf(coeffs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: coeffs, at: VTOFFSET.coeffs.p) }
  public static func add(error: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: error, def: 0.0, at: VTOFFSET.error.p) }
  public static func endIonoObservationProfileDensityShiftedChebyshevEntry_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createIonoObservationProfileDensityShiftedChebyshevEntry_Ingest(
    _ fbb: inout FlatBufferBuilder,
    layerOffset layer: Offset = Offset(),
    fstart: Double = 0.0,
    fstop: Double = 0.0,
    peakheight: Double = 0.0,
    zhalfNm: Double = 0.0,
    n: Int32 = 0,
    coeffsVectorOffset coeffs: Offset = Offset(),
    error: Double = 0.0
  ) -> Offset {
    let __start = IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.startIonoObservationProfileDensityShiftedChebyshevEntry_Ingest(&fbb)
    IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.add(layer: layer, &fbb)
    IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.add(fstart: fstart, &fbb)
    IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.add(fstop: fstop, &fbb)
    IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.add(peakheight: peakheight, &fbb)
    IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.add(zhalfNm: zhalfNm, &fbb)
    IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.add(n: n, &fbb)
    IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.addVectorOf(coeffs: coeffs, &fbb)
    IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.add(error: error, &fbb)
    return IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.endIonoObservationProfileDensityShiftedChebyshevEntry_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.layer.p, fieldName: "layer", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fstart.p, fieldName: "fstart", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fstop.p, fieldName: "fstop", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.peakheight.p, fieldName: "peakheight", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.zhalfNm.p, fieldName: "zhalfNm", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.n.p, fieldName: "n", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.coeffs.p, fieldName: "coeffs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.error.p, fieldName: "error", required: false, type: Double.self)
    _v.finish()
  }
}

