// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum ISRCollectionTaskings_Ingest_type_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case deliberate = 0
  ///  No description available.
  case dynamic_ = 1
  ///  No description available.
  case training = 2
  ///  No description available.
  case transit = 3

  public static var max: ISRCollectionTaskings_Ingest_type_Enum { return .transit }
  public static var min: ISRCollectionTaskings_Ingest_type_Enum { return .deliberate }
}


public enum ISRCollectionTaskings_Ingest_collectionType_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case simultaneous = 0
  ///  No description available.
  case sequential = 1
  ///  No description available.
  case operationally = 2
  ///  No description available.
  case driven = 3
  ///  No description available.
  case priority = 4
  ///  No description available.
  case order = 5

  public static var max: ISRCollectionTaskings_Ingest_collectionType_Enum { return .order }
  public static var min: ISRCollectionTaskings_Ingest_collectionType_Enum { return .simultaneous }
}


///  /// Individual taskings to complete the mission.
public struct ISRCollectionTaskings_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ISRC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: ISRCollectionTaskings_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case type = 6
    case collectionType = 8
    case taskingAor = 10
    case eightLine = 12
    case taskingPrimaryIntelDiscipline = 14
    case taskingPrimarySubCategory = 16
    case taskingSecondaryIntelDiscipline = 18
    case taskingSecondarySubCategory = 20
    case taskingRole = 22
    case taskingOperation = 24
    case taskingPriority = 26
    case taskingSupportedUnit = 28
    case taskingEmphasis = 30
    case taskingRetaskTime = 32
    case taskingStartPointLat = 34
    case taskingStartPointLong = 36
    case taskingCollectionArea = 38
    case taskingJoa = 40
    case taskingSyncMatrixBin = 42
    case taskingCountry = 44
    case taskingRegion = 46
    case taskingSubRegion = 48
    case sroTrack = 50
    case specialComGuidance = 52
    case collectionPeriods = 54
    case taskingCollectionRequirements = 56
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Tasking Unique Identifier.
  ///  Example: /// Example: ISRCOLLECTIONTASKINGS-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Type of tasking.
  ///  Example: /// Example: Deliberate
  ///  Constraints: Minimum length = 1, Maximum length = 16
  public var type: ISRCollectionTaskings_Ingest_type_Enum { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? .deliberate : ISRCollectionTaskings_Ingest_type_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .deliberate }
  ///  Type of collection tasked.
  ///  Example: /// Example: Simultaneous
  ///  Constraints: Minimum length = 1, Maximum length = 16
  public var collectionType: ISRCollectionTaskings_Ingest_collectionType_Enum { let o = _accessor.offset(VTOFFSET.collectionType.v); return o == 0 ? .simultaneous : ISRCollectionTaskings_Ingest_collectionType_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .simultaneous }
  ///  Human readable definition of this taskings Area Of Responsibility.
  ///  Example: /// Example: Kandahar
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var taskingAor: String? { let o = _accessor.offset(VTOFFSET.taskingAor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskingAorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskingAor.v) }
  ///  Eight line.
  ///  Example: /// Example: No example provided.
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var eightLine: String? { let o = _accessor.offset(VTOFFSET.eightLine.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eightLineSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eightLine.v) }
  ///  Primary type of intelligence to be collected during the mission.
  ///  Example: /// Example: Sig
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var taskingPrimaryIntelDiscipline: String? { let o = _accessor.offset(VTOFFSET.taskingPrimaryIntelDiscipline.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskingPrimaryIntelDisciplineSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskingPrimaryIntelDiscipline.v) }
  ///  Sub category of primary intelligence to be collected.
  ///  Example: /// Example: FMV
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var taskingPrimarySubCategory: String? { let o = _accessor.offset(VTOFFSET.taskingPrimarySubCategory.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskingPrimarySubCategorySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskingPrimarySubCategory.v) }
  ///  Type of tasking intelligence to be collected second.
  ///  Example: /// Example: Intelligence_2
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var taskingSecondaryIntelDiscipline: String? { let o = _accessor.offset(VTOFFSET.taskingSecondaryIntelDiscipline.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskingSecondaryIntelDisciplineSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskingSecondaryIntelDiscipline.v) }
  ///  Mission sub category for secondary intelligence discipline to be collected.
  ///  Example: /// Example: Convoy
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var taskingSecondarySubCategory: String? { let o = _accessor.offset(VTOFFSET.taskingSecondarySubCategory.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskingSecondarySubCategorySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskingSecondarySubCategory.v) }
  ///  What is the primary objective(Role) of this task.
  ///  Example: /// Example: Provide Targeting of Lead Vehicle
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var taskingRole: String? { let o = _accessor.offset(VTOFFSET.taskingRole.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskingRoleSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskingRole.v) }
  ///  Tasking operation name.
  ///  Example: /// Example: OP-HONEY-BADGER
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var taskingOperation: String? { let o = _accessor.offset(VTOFFSET.taskingOperation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskingOperationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskingOperation.v) }
  ///  Tasking Priority (1-n).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var taskingPriority: Double { let o = _accessor.offset(VTOFFSET.taskingPriority.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Military Base to transmit the dissemination of this data.
  ///  Example: /// Example: ENVOYS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var taskingSupportedUnit: String? { let o = _accessor.offset(VTOFFSET.taskingSupportedUnit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskingSupportedUnitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskingSupportedUnit.v) }
  ///  Tasking emphasis.
  ///  Example: /// Example: EMPHASIS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var taskingEmphasis: String? { let o = _accessor.offset(VTOFFSET.taskingEmphasis.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskingEmphasisSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskingEmphasis.v) }
  ///  Time of retasking, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-19T01:01:15.001Z
  ///  Constraints: No constraints specified.
  public var taskingRetaskTime: String? { let o = _accessor.offset(VTOFFSET.taskingRetaskTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskingRetaskTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskingRetaskTime.v) }
  ///  WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var taskingStartPointLat: Double { let o = _accessor.offset(VTOFFSET.taskingStartPointLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var taskingStartPointLong: Double { let o = _accessor.offset(VTOFFSET.taskingStartPointLong.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Tasking geographical collection area.
  ///  Example: /// Example: AREA
  ///  Constraints: No constraints specified.
  public var taskingCollectionArea: String? { let o = _accessor.offset(VTOFFSET.taskingCollectionArea.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskingCollectionAreaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskingCollectionArea.v) }
  ///  Joint Operations Area.
  ///  Example: /// Example: AREA
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var taskingJoa: String? { let o = _accessor.offset(VTOFFSET.taskingJoa.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskingJoaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskingJoa.v) }
  ///  A synchronization matrix is used to organize the logistics synchronization process during a mission.
  ///  Example: /// Example: MATRIX
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var taskingSyncMatrixBin: String? { let o = _accessor.offset(VTOFFSET.taskingSyncMatrixBin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskingSyncMatrixBinSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskingSyncMatrixBin.v) }
  ///  Country code of the tasking.  A Country may represent countries, multi-national consortiums, and international organizations.
  ///  Example: /// Example: CODE
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var taskingCountry: String? { let o = _accessor.offset(VTOFFSET.taskingCountry.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskingCountrySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskingCountry.v) }
  ///  Region of the tasking.
  ///  Example: /// Example: REGION
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var taskingRegion: String? { let o = _accessor.offset(VTOFFSET.taskingRegion.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskingRegionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskingRegion.v) }
  ///  Subregion of the tasking.
  ///  Example: /// Example: SUBREGION
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var taskingSubRegion: String? { let o = _accessor.offset(VTOFFSET.taskingSubRegion.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskingSubRegionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskingSubRegion.v) }
  ///  Value of the Sensitive Reconnaissance Operations Track.
  ///  Example: /// Example: SRO
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var sroTrack: String? { let o = _accessor.offset(VTOFFSET.sroTrack.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sroTrackSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sroTrack.v) }
  ///  Free text field for the user to specify special instructions needed for this collection.
  ///  Example: /// Example: TEXT
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var specialComGuidance: String? { let o = _accessor.offset(VTOFFSET.specialComGuidance.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var specialComGuidanceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.specialComGuidance.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var collectionPeriods: String? { let o = _accessor.offset(VTOFFSET.collectionPeriods.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var collectionPeriodsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.collectionPeriods.v) }
  ///  Tasking desired collection requirements.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasTaskingCollectionRequirements: Bool { let o = _accessor.offset(VTOFFSET.taskingCollectionRequirements.v); return o == 0 ? false : true }
  public var taskingCollectionRequirementsCount: Int32 { let o = _accessor.offset(VTOFFSET.taskingCollectionRequirements.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func taskingCollectionRequirements(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.taskingCollectionRequirements.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startISRCollectionTaskings_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 27) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(type: ISRCollectionTaskings_Ingest_type_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: type.rawValue, def: 0, at: VTOFFSET.type.p) }
  public static func add(collectionType: ISRCollectionTaskings_Ingest_collectionType_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: collectionType.rawValue, def: 0, at: VTOFFSET.collectionType.p) }
  public static func add(taskingAor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingAor, at: VTOFFSET.taskingAor.p) }
  public static func add(eightLine: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eightLine, at: VTOFFSET.eightLine.p) }
  public static func add(taskingPrimaryIntelDiscipline: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingPrimaryIntelDiscipline, at: VTOFFSET.taskingPrimaryIntelDiscipline.p) }
  public static func add(taskingPrimarySubCategory: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingPrimarySubCategory, at: VTOFFSET.taskingPrimarySubCategory.p) }
  public static func add(taskingSecondaryIntelDiscipline: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingSecondaryIntelDiscipline, at: VTOFFSET.taskingSecondaryIntelDiscipline.p) }
  public static func add(taskingSecondarySubCategory: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingSecondarySubCategory, at: VTOFFSET.taskingSecondarySubCategory.p) }
  public static func add(taskingRole: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingRole, at: VTOFFSET.taskingRole.p) }
  public static func add(taskingOperation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingOperation, at: VTOFFSET.taskingOperation.p) }
  public static func add(taskingPriority: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: taskingPriority, def: 0.0, at: VTOFFSET.taskingPriority.p) }
  public static func add(taskingSupportedUnit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingSupportedUnit, at: VTOFFSET.taskingSupportedUnit.p) }
  public static func add(taskingEmphasis: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingEmphasis, at: VTOFFSET.taskingEmphasis.p) }
  public static func add(taskingRetaskTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingRetaskTime, at: VTOFFSET.taskingRetaskTime.p) }
  public static func add(taskingStartPointLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: taskingStartPointLat, def: 0.0, at: VTOFFSET.taskingStartPointLat.p) }
  public static func add(taskingStartPointLong: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: taskingStartPointLong, def: 0.0, at: VTOFFSET.taskingStartPointLong.p) }
  public static func add(taskingCollectionArea: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingCollectionArea, at: VTOFFSET.taskingCollectionArea.p) }
  public static func add(taskingJoa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingJoa, at: VTOFFSET.taskingJoa.p) }
  public static func add(taskingSyncMatrixBin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingSyncMatrixBin, at: VTOFFSET.taskingSyncMatrixBin.p) }
  public static func add(taskingCountry: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingCountry, at: VTOFFSET.taskingCountry.p) }
  public static func add(taskingRegion: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingRegion, at: VTOFFSET.taskingRegion.p) }
  public static func add(taskingSubRegion: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingSubRegion, at: VTOFFSET.taskingSubRegion.p) }
  public static func add(sroTrack: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sroTrack, at: VTOFFSET.sroTrack.p) }
  public static func add(specialComGuidance: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: specialComGuidance, at: VTOFFSET.specialComGuidance.p) }
  public static func add(collectionPeriods: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: collectionPeriods, at: VTOFFSET.collectionPeriods.p) }
  public static func addVectorOf(taskingCollectionRequirements: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskingCollectionRequirements, at: VTOFFSET.taskingCollectionRequirements.p) }
  public static func endISRCollectionTaskings_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createISRCollectionTaskings_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    type: ISRCollectionTaskings_Ingest_type_Enum = .deliberate,
    collectionType: ISRCollectionTaskings_Ingest_collectionType_Enum = .simultaneous,
    taskingAorOffset taskingAor: Offset = Offset(),
    eightLineOffset eightLine: Offset = Offset(),
    taskingPrimaryIntelDisciplineOffset taskingPrimaryIntelDiscipline: Offset = Offset(),
    taskingPrimarySubCategoryOffset taskingPrimarySubCategory: Offset = Offset(),
    taskingSecondaryIntelDisciplineOffset taskingSecondaryIntelDiscipline: Offset = Offset(),
    taskingSecondarySubCategoryOffset taskingSecondarySubCategory: Offset = Offset(),
    taskingRoleOffset taskingRole: Offset = Offset(),
    taskingOperationOffset taskingOperation: Offset = Offset(),
    taskingPriority: Double = 0.0,
    taskingSupportedUnitOffset taskingSupportedUnit: Offset = Offset(),
    taskingEmphasisOffset taskingEmphasis: Offset = Offset(),
    taskingRetaskTimeOffset taskingRetaskTime: Offset = Offset(),
    taskingStartPointLat: Double = 0.0,
    taskingStartPointLong: Double = 0.0,
    taskingCollectionAreaOffset taskingCollectionArea: Offset = Offset(),
    taskingJoaOffset taskingJoa: Offset = Offset(),
    taskingSyncMatrixBinOffset taskingSyncMatrixBin: Offset = Offset(),
    taskingCountryOffset taskingCountry: Offset = Offset(),
    taskingRegionOffset taskingRegion: Offset = Offset(),
    taskingSubRegionOffset taskingSubRegion: Offset = Offset(),
    sroTrackOffset sroTrack: Offset = Offset(),
    specialComGuidanceOffset specialComGuidance: Offset = Offset(),
    collectionPeriodsOffset collectionPeriods: Offset = Offset(),
    taskingCollectionRequirementsVectorOffset taskingCollectionRequirements: Offset = Offset()
  ) -> Offset {
    let __start = ISRCollectionTaskings_Ingest.startISRCollectionTaskings_Ingest(&fbb)
    ISRCollectionTaskings_Ingest.add(id: id, &fbb)
    ISRCollectionTaskings_Ingest.add(type: type, &fbb)
    ISRCollectionTaskings_Ingest.add(collectionType: collectionType, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingAor: taskingAor, &fbb)
    ISRCollectionTaskings_Ingest.add(eightLine: eightLine, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingPrimaryIntelDiscipline: taskingPrimaryIntelDiscipline, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingPrimarySubCategory: taskingPrimarySubCategory, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingSecondaryIntelDiscipline: taskingSecondaryIntelDiscipline, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingSecondarySubCategory: taskingSecondarySubCategory, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingRole: taskingRole, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingOperation: taskingOperation, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingPriority: taskingPriority, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingSupportedUnit: taskingSupportedUnit, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingEmphasis: taskingEmphasis, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingRetaskTime: taskingRetaskTime, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingStartPointLat: taskingStartPointLat, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingStartPointLong: taskingStartPointLong, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingCollectionArea: taskingCollectionArea, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingJoa: taskingJoa, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingSyncMatrixBin: taskingSyncMatrixBin, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingCountry: taskingCountry, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingRegion: taskingRegion, &fbb)
    ISRCollectionTaskings_Ingest.add(taskingSubRegion: taskingSubRegion, &fbb)
    ISRCollectionTaskings_Ingest.add(sroTrack: sroTrack, &fbb)
    ISRCollectionTaskings_Ingest.add(specialComGuidance: specialComGuidance, &fbb)
    ISRCollectionTaskings_Ingest.add(collectionPeriods: collectionPeriods, &fbb)
    ISRCollectionTaskings_Ingest.addVectorOf(taskingCollectionRequirements: taskingCollectionRequirements, &fbb)
    return ISRCollectionTaskings_Ingest.endISRCollectionTaskings_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ISRCollectionTaskings_Ingest_type_Enum.self)
    try _v.visit(field: VTOFFSET.collectionType.p, fieldName: "collectionType", required: false, type: ISRCollectionTaskings_Ingest_collectionType_Enum.self)
    try _v.visit(field: VTOFFSET.taskingAor.p, fieldName: "taskingAor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eightLine.p, fieldName: "eightLine", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskingPrimaryIntelDiscipline.p, fieldName: "taskingPrimaryIntelDiscipline", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskingPrimarySubCategory.p, fieldName: "taskingPrimarySubCategory", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskingSecondaryIntelDiscipline.p, fieldName: "taskingSecondaryIntelDiscipline", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskingSecondarySubCategory.p, fieldName: "taskingSecondarySubCategory", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskingRole.p, fieldName: "taskingRole", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskingOperation.p, fieldName: "taskingOperation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskingPriority.p, fieldName: "taskingPriority", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.taskingSupportedUnit.p, fieldName: "taskingSupportedUnit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskingEmphasis.p, fieldName: "taskingEmphasis", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskingRetaskTime.p, fieldName: "taskingRetaskTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskingStartPointLat.p, fieldName: "taskingStartPointLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.taskingStartPointLong.p, fieldName: "taskingStartPointLong", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.taskingCollectionArea.p, fieldName: "taskingCollectionArea", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskingJoa.p, fieldName: "taskingJoa", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskingSyncMatrixBin.p, fieldName: "taskingSyncMatrixBin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskingCountry.p, fieldName: "taskingCountry", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskingRegion.p, fieldName: "taskingRegion", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskingSubRegion.p, fieldName: "taskingSubRegion", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sroTrack.p, fieldName: "sroTrack", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.specialComGuidance.p, fieldName: "specialComGuidance", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.collectionPeriods.p, fieldName: "collectionPeriods", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.taskingCollectionRequirements.p, fieldName: "taskingCollectionRequirements", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

