// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
public struct DataLinkOps_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "DATA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: DataLinkOps_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case linkName = 4
    case linkStartTime = 6
    case linkStopTime = 8
    case linkStopTimeMod = 10
    case linkDetails = 12
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Name of the data link.
  ///  Example: /// Example: Link-16
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var linkName: String? { let o = _accessor.offset(VTOFFSET.linkName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var linkNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.linkName.v) }
  ///  The start of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-07T13:55:43.123Z
  ///  Constraints: No constraints specified.
  public var linkStartTime: String? { let o = _accessor.offset(VTOFFSET.linkStartTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var linkStartTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.linkStartTime.v) }
  ///  The end of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-08T13:55:43.123Z
  ///  Constraints: No constraints specified.
  public var linkStopTime: String? { let o = _accessor.offset(VTOFFSET.linkStopTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var linkStopTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.linkStopTime.v) }
  ///  A qualifier for the end of the effective time period of this data link, such as AFTER, ASOF, NLT, etc. Used with field linkStopTimeMod to indicate a relative time.
  ///  Example: /// Example: AFTER
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var linkStopTimeMod: String? { let o = _accessor.offset(VTOFFSET.linkStopTimeMod.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var linkStopTimeModSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.linkStopTimeMod.v) }
  ///  Detailed characteristics of the data link.
  ///  Example: /// Example: Link details
  ///  Constraints: Minimum length = 0, Maximum length = 3000
  public var linkDetails: String? { let o = _accessor.offset(VTOFFSET.linkDetails.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var linkDetailsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.linkDetails.v) }
  public static func startDataLinkOps_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 5) }
  public static func add(linkName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: linkName, at: VTOFFSET.linkName.p) }
  public static func add(linkStartTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: linkStartTime, at: VTOFFSET.linkStartTime.p) }
  public static func add(linkStopTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: linkStopTime, at: VTOFFSET.linkStopTime.p) }
  public static func add(linkStopTimeMod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: linkStopTimeMod, at: VTOFFSET.linkStopTimeMod.p) }
  public static func add(linkDetails: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: linkDetails, at: VTOFFSET.linkDetails.p) }
  public static func endDataLinkOps_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createDataLinkOps_Abridged(
    _ fbb: inout FlatBufferBuilder,
    linkNameOffset linkName: Offset = Offset(),
    linkStartTimeOffset linkStartTime: Offset = Offset(),
    linkStopTimeOffset linkStopTime: Offset = Offset(),
    linkStopTimeModOffset linkStopTimeMod: Offset = Offset(),
    linkDetailsOffset linkDetails: Offset = Offset()
  ) -> Offset {
    let __start = DataLinkOps_Abridged.startDataLinkOps_Abridged(&fbb)
    DataLinkOps_Abridged.add(linkName: linkName, &fbb)
    DataLinkOps_Abridged.add(linkStartTime: linkStartTime, &fbb)
    DataLinkOps_Abridged.add(linkStopTime: linkStopTime, &fbb)
    DataLinkOps_Abridged.add(linkStopTimeMod: linkStopTimeMod, &fbb)
    DataLinkOps_Abridged.add(linkDetails: linkDetails, &fbb)
    return DataLinkOps_Abridged.endDataLinkOps_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.linkName.p, fieldName: "linkName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.linkStartTime.p, fieldName: "linkStartTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.linkStopTime.p, fieldName: "linkStopTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.linkStopTimeMod.p, fieldName: "linkStopTimeMod", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.linkDetails.p, fieldName: "linkDetails", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

