// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum EOObservationDetails_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: EOObservationDetails_Full_dataMode_Enum { return .exercise }
  public static var min: EOObservationDetails_Full_dataMode_Enum { return .real }
}


///  /// Model representation of additional detailed observation data for electro-optical based sensor phenomenologies.
public struct EOObservationDetails_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EOOB" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EOObservationDetails_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case idEoobservation = 4
    case classificationMarking = 6
    case obTime = 8
    case predictedRa = 10
    case predictedDeclination = 12
    case predictedAzimuth = 14
    case predictedElevation = 16
    case sunAzimuth = 18
    case sunElevation = 20
    case numSpectralFilters = 22
    case spectralFilters = 24
    case spectralZmfl = 26
    case spectralFilterSolarMag = 28
    case zeroPoints = 30
    case zeroPointsUnc = 32
    case extinctionCoeffs = 34
    case extinctionCoeffsUnc = 36
    case colorCoeffs = 38
    case numNeutralDensityFilters = 40
    case neutralDensityFilterNames = 42
    case neutralDensityFilterTransmissions = 44
    case neutralDensityFilterTransmissionsUnc = 46
    case gain = 48
    case ifov = 50
    case pixelArrayWidth = 52
    case pixelArrayHeight = 54
    case pixelMin = 56
    case pixelMax = 58
    case centroidRow = 60
    case centroidColumn = 62
    case rowVariance = 64
    case columnVariance = 66
    case rowColCov = 68
    case distFromStreakCenter = 70
    case surfBrightness = 72
    case surfBrightnessUnc = 74
    case timesUnc = 76
    case ccdTemp = 78
    case currentSpectralFilterNum = 80
    case currentNeutralDensityFilterNum = 82
    case binningHoriz = 84
    case binningVert = 86
    case pcalNumStars = 88
    case ccdObjPosX = 90
    case ccdObjPosY = 92
    case ccdObjWidth = 94
    case backgroundSignal = 96
    case backgroundSignalUnc = 98
    case peakApertureCount = 100
    case peakBackgroundCount = 102
    case snrEst = 104
    case magInstrumental = 106
    case magInstrumentalUnc = 108
    case opticalCrossSection = 110
    case opticalCrossSectionUnc = 112
    case sunStatePosX = 114
    case sunStatePosY = 116
    case sunStatePosZ = 118
    case sunStateVelX = 120
    case sunStateVelY = 122
    case sunStateVelZ = 124
    case numCatalogStars = 126
    case numDetectedStars = 128
    case numCorrelatedStars = 130
    case predictedRaUnc = 132
    case predictedDeclinationUnc = 134
    case raCov = 136
    case declinationCov = 138
    case raDeclinationCov = 140
    case acalCrPixX = 142
    case acalCrPixY = 144
    case acalCrValX = 146
    case acalCrValY = 148
    case acalNumStars = 150
    case objSunRange = 152
    case phaseAngBisect = 154
    case solarDiskFrac = 156
    case toes = 158
    case does = 160
    case source = 162
    case dataMode = 164
    case createdAt = 166
    case createdBy = 168
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the parent EOObservation.
  ///  Example: /// Example: EOOBSERVATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idEoobservation: String? { let o = _accessor.offset(VTOFFSET.idEoobservation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idEoobservationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idEoobservation.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format, will be set to EOObservation classificationMarking if blank.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Ob detection time in ISO 8601 UTC with microsecond precision, will be set to EOObservation obTime if blank.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var obTime: String? { let o = _accessor.offset(VTOFFSET.obTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obTime.v) }
  ///  Predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var predictedRa: Double { let o = _accessor.offset(VTOFFSET.predictedRa.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var predictedDeclination: Double { let o = _accessor.offset(VTOFFSET.predictedDeclination.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Predicted Azimuth angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var predictedAzimuth: Double { let o = _accessor.offset(VTOFFSET.predictedAzimuth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Predicted elevation angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var predictedElevation: Double { let o = _accessor.offset(VTOFFSET.predictedElevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Azimuth angle of the sun from a ground-based telescope (no atmospheric refraction correction required) the observer with aberration due to the observer velocity and light travel time applied.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var sunAzimuth: Double { let o = _accessor.offset(VTOFFSET.sunAzimuth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Elevation angle of the sun from a ground-based telescope (no atmospheric refraction correction required).
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var sunElevation: Double { let o = _accessor.offset(VTOFFSET.sunElevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The value is the number of spectral filters used.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var numSpectralFilters: Int32 { let o = _accessor.offset(VTOFFSET.numSpectralFilters.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  ///  Example: /// Example: ['Keyword1', 'Keyword2']
  ///  Constraints: No constraints specified.
  public var hasSpectralFilters: Bool { let o = _accessor.offset(VTOFFSET.spectralFilters.v); return o == 0 ? false : true }
  public var spectralFiltersCount: Int32 { let o = _accessor.offset(VTOFFSET.spectralFilters.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func spectralFilters(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.spectralFilters.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  This is the in-band average irradiance of a 0th mag source. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = W/m2/nm.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  public var hasSpectralZmfl: Bool { let o = _accessor.offset(VTOFFSET.spectralZmfl.v); return o == 0 ? false : true }
  public var spectralZmflCount: Int32 { let o = _accessor.offset(VTOFFSET.spectralZmfl.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func spectralZmfl(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.spectralZmfl.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = mag.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  public var hasSpectralFilterSolarMag: Bool { let o = _accessor.offset(VTOFFSET.spectralFilterSolarMag.v); return o == 0 ? false : true }
  public var spectralFilterSolarMagCount: Int32 { let o = _accessor.offset(VTOFFSET.spectralFilterSolarMag.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func spectralFilterSolarMag(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.spectralFilterSolarMag.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  This is the value for the zero-point calculated for each filter denoted in spectralFilters. It is the difference between the catalog mag and instrumental mag for a set of standard stars. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  public var hasZeroPoints: Bool { let o = _accessor.offset(VTOFFSET.zeroPoints.v); return o == 0 ? false : true }
  public var zeroPointsCount: Int32 { let o = _accessor.offset(VTOFFSET.zeroPoints.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func zeroPoints(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.zeroPoints.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  This is the uncertainty in the zero point for the filter denoted in spectralFilters. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  public var hasZeroPointsUnc: Bool { let o = _accessor.offset(VTOFFSET.zeroPointsUnc.v); return o == 0 ? false : true }
  public var zeroPointsUncCount: Int32 { let o = _accessor.offset(VTOFFSET.zeroPointsUnc.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func zeroPointsUnc(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.zeroPointsUnc.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The extinction coefficient computed for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. Units = mag/airmass.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  public var hasExtinctionCoeffs: Bool { let o = _accessor.offset(VTOFFSET.extinctionCoeffs.v); return o == 0 ? false : true }
  public var extinctionCoeffsCount: Int32 { let o = _accessor.offset(VTOFFSET.extinctionCoeffs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func extinctionCoeffs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.extinctionCoeffs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  This is the uncertainty in the extinction coefficient for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. -9999 for space-based sensors. Units = mag/airmass.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  public var hasExtinctionCoeffsUnc: Bool { let o = _accessor.offset(VTOFFSET.extinctionCoeffsUnc.v); return o == 0 ? false : true }
  public var extinctionCoeffsUncCount: Int32 { let o = _accessor.offset(VTOFFSET.extinctionCoeffsUnc.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func extinctionCoeffsUnc(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.extinctionCoeffsUnc.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Color coefficient for filter n for a space-based sensor where there is no atmospheric extinction. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  public var hasColorCoeffs: Bool { let o = _accessor.offset(VTOFFSET.colorCoeffs.v); return o == 0 ? false : true }
  public var colorCoeffsCount: Int32 { let o = _accessor.offset(VTOFFSET.colorCoeffs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func colorCoeffs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.colorCoeffs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The value is the number of neutral density filters used.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var numNeutralDensityFilters: Int32 { let o = _accessor.offset(VTOFFSET.numNeutralDensityFilters.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
  ///  Example: /// Example: ['numNeutralDensityFilters1', 'numNeutralDensityFilters2']
  ///  Constraints: No constraints specified.
  public var hasNeutralDensityFilterNames: Bool { let o = _accessor.offset(VTOFFSET.neutralDensityFilterNames.v); return o == 0 ? false : true }
  public var neutralDensityFilterNamesCount: Int32 { let o = _accessor.offset(VTOFFSET.neutralDensityFilterNames.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func neutralDensityFilterNames(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.neutralDensityFilterNames.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The transmission of the nth neutral density filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  public var hasNeutralDensityFilterTransmissions: Bool { let o = _accessor.offset(VTOFFSET.neutralDensityFilterTransmissions.v); return o == 0 ? false : true }
  public var neutralDensityFilterTransmissionsCount: Int32 { let o = _accessor.offset(VTOFFSET.neutralDensityFilterTransmissions.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func neutralDensityFilterTransmissions(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.neutralDensityFilterTransmissions.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  This is the uncertainty in the transmission for the nth filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
  ///  Example: /// Example: [1.1, 2.1, 3.1]
  ///  Constraints: No constraints specified.
  public var hasNeutralDensityFilterTransmissionsUnc: Bool { let o = _accessor.offset(VTOFFSET.neutralDensityFilterTransmissionsUnc.v); return o == 0 ? false : true }
  public var neutralDensityFilterTransmissionsUncCount: Int32 { let o = _accessor.offset(VTOFFSET.neutralDensityFilterTransmissionsUnc.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func neutralDensityFilterTransmissionsUnc(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.neutralDensityFilterTransmissionsUnc.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Some sensors have gain settings. This value is the gain used during the observation in units e-/ADU. If no gain is used, the value = 1.
  ///  Example: /// Example: 234.2
  ///  Constraints: No constraints specified.
  public var gain: Double { let o = _accessor.offset(VTOFFSET.gain.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor instantaneous field of view (ratio of pixel pitch to focal length).
  ///  Example: /// Example: 0.2
  ///  Constraints: No constraints specified.
  public var ifov: Double { let o = _accessor.offset(VTOFFSET.ifov.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pixel array size (width) in pixels.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var pixelArrayWidth: Int32 { let o = _accessor.offset(VTOFFSET.pixelArrayWidth.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Pixel array size (height) in pixels.
  ///  Example: /// Example: 23
  ///  Constraints: No constraints specified.
  public var pixelArrayHeight: Int32 { let o = _accessor.offset(VTOFFSET.pixelArrayHeight.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Minimum valid pixel value, this is typically 0.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var pixelMin: Int32 { let o = _accessor.offset(VTOFFSET.pixelMin.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8 = 256. This can represent the saturation value of the detector, but some sensors will saturate at a value significantly lower than full well depth. This is the analog-to-digital conversion (ADC) saturation value.
  ///  Example: /// Example: 256
  ///  Constraints: No constraints specified.
  public var pixelMax: Int32 { let o = _accessor.offset(VTOFFSET.pixelMax.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is center of pixels along top of image).
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  public var centroidRow: Double { let o = _accessor.offset(VTOFFSET.centroidRow.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Observed centroid column number on the focal plane in pixels (0 is left edge, 0.5 is center of pixels along left of image).
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var centroidColumn: Double { let o = _accessor.offset(VTOFFSET.centroidColumn.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spatial variance of image distribution in vertical direction measured in pixels squared.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  public var rowVariance: Double { let o = _accessor.offset(VTOFFSET.rowVariance.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spatial variance of image distribution in horizontal direction measured in pixels squared.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  public var columnVariance: Double { let o = _accessor.offset(VTOFFSET.columnVariance.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spatial covariance of image distribution across horizontal and vertical directions measured in pixels squared.
  ///  Example: /// Example: 0.01
  ///  Constraints: No constraints specified.
  public var rowColCov: Double { let o = _accessor.offset(VTOFFSET.rowColCov.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  An array of measurements that correspond to the distance from the streak center measured from the optical image in pixels that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
  ///  Example: /// Example: [-127.153, -126.153, -125.153]
  ///  Constraints: No constraints specified.
  public var hasDistFromStreakCenter: Bool { let o = _accessor.offset(VTOFFSET.distFromStreakCenter.v); return o == 0 ? false : true }
  public var distFromStreakCenterCount: Int32 { let o = _accessor.offset(VTOFFSET.distFromStreakCenter.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func distFromStreakCenter(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.distFromStreakCenter.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  An array of surface brightness measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
  ///  Example: /// Example: [21.01, 21.382, 21.725]
  ///  Constraints: No constraints specified.
  public var hasSurfBrightness: Bool { let o = _accessor.offset(VTOFFSET.surfBrightness.v); return o == 0 ? false : true }
  public var surfBrightnessCount: Int32 { let o = _accessor.offset(VTOFFSET.surfBrightness.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func surfBrightness(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.surfBrightness.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  An array of surface brightness uncertainty measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
  ///  Example: /// Example: [0.165, 0.165, 0.165]
  ///  Constraints: No constraints specified.
  public var hasSurfBrightnessUnc: Bool { let o = _accessor.offset(VTOFFSET.surfBrightnessUnc.v); return o == 0 ? false : true }
  public var surfBrightnessUncCount: Int32 { let o = _accessor.offset(VTOFFSET.surfBrightnessUnc.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func surfBrightnessUnc(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.surfBrightnessUnc.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Uncertainty in the times reported in UTC in seconds.
  ///  Example: /// Example: 13.1
  ///  Constraints: No constraints specified.
  public var timesUnc: Double { let o = _accessor.offset(VTOFFSET.timesUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Operating temperature of CCD recorded during exposure or measured during calibrations in K.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var ccdTemp: Double { let o = _accessor.offset(VTOFFSET.ccdTemp.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter given in the corresponding spectralFilterNames.
  ///  Example: /// Example: 23
  ///  Constraints: No constraints specified.
  public var currentSpectralFilterNum: Int32 { let o = _accessor.offset(VTOFFSET.currentSpectralFilterNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The reference number n, in neutralDensityFilters for the currently used neutral density filter.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var currentNeutralDensityFilterNum: Int32 { let o = _accessor.offset(VTOFFSET.currentNeutralDensityFilterNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The number of pixels binned horizontally.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var binningHoriz: Int32 { let o = _accessor.offset(VTOFFSET.binningHoriz.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The number of pixels binned vertically.
  ///  Example: /// Example: 14
  ///  Constraints: No constraints specified.
  public var binningVert: Int32 { let o = _accessor.offset(VTOFFSET.binningVert.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of stars used in photometric fit count.
  ///  Example: /// Example: 23
  ///  Constraints: No constraints specified.
  public var pcalNumStars: Int32 { let o = _accessor.offset(VTOFFSET.pcalNumStars.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The x centroid position on the CCD of the target object in pixels.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  public var ccdObjPosX: Double { let o = _accessor.offset(VTOFFSET.ccdObjPosX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The y centroid position on the CCD of the target object in pixels.
  ///  Example: /// Example: 321.4
  ///  Constraints: No constraints specified.
  public var ccdObjPosY: Double { let o = _accessor.offset(VTOFFSET.ccdObjPosY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  This is the pixel width of the target. This is either a frame-by-frame measurement or a constant point spread function or synthetic aperture used in the extraction.
  ///  Example: /// Example: 133.2
  ///  Constraints: No constraints specified.
  public var ccdObjWidth: Double { let o = _accessor.offset(VTOFFSET.ccdObjWidth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  This is the background signal at or in the vicinity of the radiometric source position. Specifically, this is the average background count level (DN/pixel) divided by the exposure time in seconds of the background pixels used in the photometric extraction. DN/pixel/sec.
  ///  Example: /// Example: 4134.1
  ///  Constraints: No constraints specified.
  public var backgroundSignal: Double { let o = _accessor.offset(VTOFFSET.backgroundSignal.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Estimated 1-sigma uncertainty in the background signal at or in the vicinity of the radiometric source position. DN/pixel/sec.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  public var backgroundSignalUnc: Double { let o = _accessor.offset(VTOFFSET.backgroundSignalUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic aperture containing the target signal.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  public var peakApertureCount: Double { let o = _accessor.offset(VTOFFSET.peakApertureCount.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Peak Background Raw Counts is the largest pixel value used in background signal.
  ///  Example: /// Example: 321
  ///  Constraints: No constraints specified.
  public var peakBackgroundCount: Int32 { let o = _accessor.offset(VTOFFSET.peakBackgroundCount.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under some algorithms, this can be a constant per target (not per observation). Note: this SNR applies to the total signal of the radiometric source (i.e., Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in the peak pixel (i.e., DN/pixel/sec).
  ///  Example: /// Example: 13.4
  ///  Constraints: No constraints specified.
  public var snrEst: Double { let o = _accessor.offset(VTOFFSET.snrEst.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Instrumental magnitude of a sensor before corrections are applied for atmosphere or to transform to standard magnitude scale.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  public var magInstrumental: Double { let o = _accessor.offset(VTOFFSET.magInstrumental.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Uncertainty in the instrumental magnitude.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  public var magInstrumentalUnc: Double { let o = _accessor.offset(VTOFFSET.magInstrumentalUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optical Cross Section computed in units m(2)/ster.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  public var opticalCrossSection: Double { let o = _accessor.offset(VTOFFSET.opticalCrossSection.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Uncertainty in Optical Cross Section computed in units m(2)/ster.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  public var opticalCrossSectionUnc: Double { let o = _accessor.offset(VTOFFSET.opticalCrossSectionUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sun state vector in ECI J2000 coordinate frame in km.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  public var sunStatePosX: Double { let o = _accessor.offset(VTOFFSET.sunStatePosX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sun state vector in ECI J2000 coordinate frame in km.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  public var sunStatePosY: Double { let o = _accessor.offset(VTOFFSET.sunStatePosY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sun state vector in ECI J2000 coordinate frame in km.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  public var sunStatePosZ: Double { let o = _accessor.offset(VTOFFSET.sunStatePosZ.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sun state vector in ECI J2000 coordinate frame in km/sec.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  public var sunStateVelX: Double { let o = _accessor.offset(VTOFFSET.sunStateVelX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sun state vector in ECI J2000 coordinate frame in km/sec.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  public var sunStateVelY: Double { let o = _accessor.offset(VTOFFSET.sunStateVelY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sun state vector in ECI J2000 coordinate frame in km/sec.
  ///  Example: /// Example: 123.3
  ///  Constraints: No constraints specified.
  public var sunStateVelZ: Double { let o = _accessor.offset(VTOFFSET.sunStateVelZ.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Number of catalog stars in the detector field of view (FOV) with the target object. Can be 0 for narrow FOV sensors.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var numCatalogStars: Int32 { let o = _accessor.offset(VTOFFSET.numCatalogStars.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of detected stars in the FOV with the target object. Helps identify frames with clouds.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var numDetectedStars: Int32 { let o = _accessor.offset(VTOFFSET.numDetectedStars.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of correlated stars in the FOV with the target object. Can be 0 for narrow FOV sensors.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var numCorrelatedStars: Int32 { let o = _accessor.offset(VTOFFSET.numCorrelatedStars.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Uncertainty of predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  public var predictedRaUnc: Double { let o = _accessor.offset(VTOFFSET.predictedRaUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Uncertainty of Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  public var predictedDeclinationUnc: Double { let o = _accessor.offset(VTOFFSET.predictedDeclinationUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance (x^2) in measured Right Ascension (X) in deg^2.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  public var raCov: Double { let o = _accessor.offset(VTOFFSET.raCov.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance (Y^2) in measured declination (Y) in deg^2.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  public var declinationCov: Double { let o = _accessor.offset(VTOFFSET.declinationCov.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance (XY) in measured ra/declination (XY) in deg^2.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  public var raDeclinationCov: Double { let o = _accessor.offset(VTOFFSET.raDeclinationCov.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  World Coordinate System (WCS) X pixel origin in astrometric fit.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  public var acalCrPixX: Double { let o = _accessor.offset(VTOFFSET.acalCrPixX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  World Coordinate System (WCS) Y pixel origin in astrometric fit.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  public var acalCrPixY: Double { let o = _accessor.offset(VTOFFSET.acalCrPixY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  World Coordinate System (WCS) equatorial coordinate X origin corresponding to CRPIX in astrometric fit in degrees.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  public var acalCrValX: Double { let o = _accessor.offset(VTOFFSET.acalCrValX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  World Coordinate System (WCS) equatorial coordinate Y origin corresponding to CRPIX in astrometric fit in degrees.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  public var acalCrValY: Double { let o = _accessor.offset(VTOFFSET.acalCrValY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Number of stars used in astrometric fit.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var acalNumStars: Int32 { let o = _accessor.offset(VTOFFSET.acalNumStars.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Distance from the target object to the sun during the observation in meters.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  public var objSunRange: Double { let o = _accessor.offset(VTOFFSET.objSunRange.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Solar phase angle bisector vector. The vector that bisects the solar phase angle. The phase angle bisector is the angle that is << of the value in #48. Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at this angle would intersect.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  public var phaseAngBisect: Double { let o = _accessor.offset(VTOFFSET.phaseAngBisect.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fraction of the sun that is illuminating the target object. This indicates if the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra and 1 when object is fully illuminated.).
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  public var solarDiskFrac: Double { let o = _accessor.offset(VTOFFSET.solarDiskFrac.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Time off element set.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  public var toes: Double { let o = _accessor.offset(VTOFFSET.toes.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Degrees Off Element Set.
  ///  Example: /// Example: 123.2
  ///  Constraints: No constraints specified.
  public var does: Double { let o = _accessor.offset(VTOFFSET.does.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Source of the data, will be set to EOObservation source if blank.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  , will be set to EOObservation dataMode if blank.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: EOObservationDetails_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : EOObservationDetails_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  public static func startEOObservationDetails_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 83) }
  public static func add(idEoobservation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idEoobservation, at: VTOFFSET.idEoobservation.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(obTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obTime, at: VTOFFSET.obTime.p) }
  public static func add(predictedRa: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: predictedRa, def: 0.0, at: VTOFFSET.predictedRa.p) }
  public static func add(predictedDeclination: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: predictedDeclination, def: 0.0, at: VTOFFSET.predictedDeclination.p) }
  public static func add(predictedAzimuth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: predictedAzimuth, def: 0.0, at: VTOFFSET.predictedAzimuth.p) }
  public static func add(predictedElevation: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: predictedElevation, def: 0.0, at: VTOFFSET.predictedElevation.p) }
  public static func add(sunAzimuth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sunAzimuth, def: 0.0, at: VTOFFSET.sunAzimuth.p) }
  public static func add(sunElevation: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sunElevation, def: 0.0, at: VTOFFSET.sunElevation.p) }
  public static func add(numSpectralFilters: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numSpectralFilters, def: 0, at: VTOFFSET.numSpectralFilters.p) }
  public static func addVectorOf(spectralFilters: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: spectralFilters, at: VTOFFSET.spectralFilters.p) }
  public static func addVectorOf(spectralZmfl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: spectralZmfl, at: VTOFFSET.spectralZmfl.p) }
  public static func addVectorOf(spectralFilterSolarMag: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: spectralFilterSolarMag, at: VTOFFSET.spectralFilterSolarMag.p) }
  public static func addVectorOf(zeroPoints: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: zeroPoints, at: VTOFFSET.zeroPoints.p) }
  public static func addVectorOf(zeroPointsUnc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: zeroPointsUnc, at: VTOFFSET.zeroPointsUnc.p) }
  public static func addVectorOf(extinctionCoeffs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: extinctionCoeffs, at: VTOFFSET.extinctionCoeffs.p) }
  public static func addVectorOf(extinctionCoeffsUnc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: extinctionCoeffsUnc, at: VTOFFSET.extinctionCoeffsUnc.p) }
  public static func addVectorOf(colorCoeffs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: colorCoeffs, at: VTOFFSET.colorCoeffs.p) }
  public static func add(numNeutralDensityFilters: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numNeutralDensityFilters, def: 0, at: VTOFFSET.numNeutralDensityFilters.p) }
  public static func addVectorOf(neutralDensityFilterNames: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: neutralDensityFilterNames, at: VTOFFSET.neutralDensityFilterNames.p) }
  public static func addVectorOf(neutralDensityFilterTransmissions: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: neutralDensityFilterTransmissions, at: VTOFFSET.neutralDensityFilterTransmissions.p) }
  public static func addVectorOf(neutralDensityFilterTransmissionsUnc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: neutralDensityFilterTransmissionsUnc, at: VTOFFSET.neutralDensityFilterTransmissionsUnc.p) }
  public static func add(gain: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gain, def: 0.0, at: VTOFFSET.gain.p) }
  public static func add(ifov: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ifov, def: 0.0, at: VTOFFSET.ifov.p) }
  public static func add(pixelArrayWidth: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pixelArrayWidth, def: 0, at: VTOFFSET.pixelArrayWidth.p) }
  public static func add(pixelArrayHeight: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pixelArrayHeight, def: 0, at: VTOFFSET.pixelArrayHeight.p) }
  public static func add(pixelMin: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pixelMin, def: 0, at: VTOFFSET.pixelMin.p) }
  public static func add(pixelMax: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pixelMax, def: 0, at: VTOFFSET.pixelMax.p) }
  public static func add(centroidRow: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: centroidRow, def: 0.0, at: VTOFFSET.centroidRow.p) }
  public static func add(centroidColumn: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: centroidColumn, def: 0.0, at: VTOFFSET.centroidColumn.p) }
  public static func add(rowVariance: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rowVariance, def: 0.0, at: VTOFFSET.rowVariance.p) }
  public static func add(columnVariance: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: columnVariance, def: 0.0, at: VTOFFSET.columnVariance.p) }
  public static func add(rowColCov: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rowColCov, def: 0.0, at: VTOFFSET.rowColCov.p) }
  public static func addVectorOf(distFromStreakCenter: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: distFromStreakCenter, at: VTOFFSET.distFromStreakCenter.p) }
  public static func addVectorOf(surfBrightness: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfBrightness, at: VTOFFSET.surfBrightness.p) }
  public static func addVectorOf(surfBrightnessUnc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfBrightnessUnc, at: VTOFFSET.surfBrightnessUnc.p) }
  public static func add(timesUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: timesUnc, def: 0.0, at: VTOFFSET.timesUnc.p) }
  public static func add(ccdTemp: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ccdTemp, def: 0.0, at: VTOFFSET.ccdTemp.p) }
  public static func add(currentSpectralFilterNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: currentSpectralFilterNum, def: 0, at: VTOFFSET.currentSpectralFilterNum.p) }
  public static func add(currentNeutralDensityFilterNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: currentNeutralDensityFilterNum, def: 0, at: VTOFFSET.currentNeutralDensityFilterNum.p) }
  public static func add(binningHoriz: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: binningHoriz, def: 0, at: VTOFFSET.binningHoriz.p) }
  public static func add(binningVert: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: binningVert, def: 0, at: VTOFFSET.binningVert.p) }
  public static func add(pcalNumStars: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pcalNumStars, def: 0, at: VTOFFSET.pcalNumStars.p) }
  public static func add(ccdObjPosX: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ccdObjPosX, def: 0.0, at: VTOFFSET.ccdObjPosX.p) }
  public static func add(ccdObjPosY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ccdObjPosY, def: 0.0, at: VTOFFSET.ccdObjPosY.p) }
  public static func add(ccdObjWidth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ccdObjWidth, def: 0.0, at: VTOFFSET.ccdObjWidth.p) }
  public static func add(backgroundSignal: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: backgroundSignal, def: 0.0, at: VTOFFSET.backgroundSignal.p) }
  public static func add(backgroundSignalUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: backgroundSignalUnc, def: 0.0, at: VTOFFSET.backgroundSignalUnc.p) }
  public static func add(peakApertureCount: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: peakApertureCount, def: 0.0, at: VTOFFSET.peakApertureCount.p) }
  public static func add(peakBackgroundCount: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: peakBackgroundCount, def: 0, at: VTOFFSET.peakBackgroundCount.p) }
  public static func add(snrEst: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: snrEst, def: 0.0, at: VTOFFSET.snrEst.p) }
  public static func add(magInstrumental: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: magInstrumental, def: 0.0, at: VTOFFSET.magInstrumental.p) }
  public static func add(magInstrumentalUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: magInstrumentalUnc, def: 0.0, at: VTOFFSET.magInstrumentalUnc.p) }
  public static func add(opticalCrossSection: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: opticalCrossSection, def: 0.0, at: VTOFFSET.opticalCrossSection.p) }
  public static func add(opticalCrossSectionUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: opticalCrossSectionUnc, def: 0.0, at: VTOFFSET.opticalCrossSectionUnc.p) }
  public static func add(sunStatePosX: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sunStatePosX, def: 0.0, at: VTOFFSET.sunStatePosX.p) }
  public static func add(sunStatePosY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sunStatePosY, def: 0.0, at: VTOFFSET.sunStatePosY.p) }
  public static func add(sunStatePosZ: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sunStatePosZ, def: 0.0, at: VTOFFSET.sunStatePosZ.p) }
  public static func add(sunStateVelX: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sunStateVelX, def: 0.0, at: VTOFFSET.sunStateVelX.p) }
  public static func add(sunStateVelY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sunStateVelY, def: 0.0, at: VTOFFSET.sunStateVelY.p) }
  public static func add(sunStateVelZ: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sunStateVelZ, def: 0.0, at: VTOFFSET.sunStateVelZ.p) }
  public static func add(numCatalogStars: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numCatalogStars, def: 0, at: VTOFFSET.numCatalogStars.p) }
  public static func add(numDetectedStars: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numDetectedStars, def: 0, at: VTOFFSET.numDetectedStars.p) }
  public static func add(numCorrelatedStars: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numCorrelatedStars, def: 0, at: VTOFFSET.numCorrelatedStars.p) }
  public static func add(predictedRaUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: predictedRaUnc, def: 0.0, at: VTOFFSET.predictedRaUnc.p) }
  public static func add(predictedDeclinationUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: predictedDeclinationUnc, def: 0.0, at: VTOFFSET.predictedDeclinationUnc.p) }
  public static func add(raCov: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: raCov, def: 0.0, at: VTOFFSET.raCov.p) }
  public static func add(declinationCov: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: declinationCov, def: 0.0, at: VTOFFSET.declinationCov.p) }
  public static func add(raDeclinationCov: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: raDeclinationCov, def: 0.0, at: VTOFFSET.raDeclinationCov.p) }
  public static func add(acalCrPixX: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: acalCrPixX, def: 0.0, at: VTOFFSET.acalCrPixX.p) }
  public static func add(acalCrPixY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: acalCrPixY, def: 0.0, at: VTOFFSET.acalCrPixY.p) }
  public static func add(acalCrValX: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: acalCrValX, def: 0.0, at: VTOFFSET.acalCrValX.p) }
  public static func add(acalCrValY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: acalCrValY, def: 0.0, at: VTOFFSET.acalCrValY.p) }
  public static func add(acalNumStars: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: acalNumStars, def: 0, at: VTOFFSET.acalNumStars.p) }
  public static func add(objSunRange: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: objSunRange, def: 0.0, at: VTOFFSET.objSunRange.p) }
  public static func add(phaseAngBisect: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: phaseAngBisect, def: 0.0, at: VTOFFSET.phaseAngBisect.p) }
  public static func add(solarDiskFrac: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: solarDiskFrac, def: 0.0, at: VTOFFSET.solarDiskFrac.p) }
  public static func add(toes: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: toes, def: 0.0, at: VTOFFSET.toes.p) }
  public static func add(does: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: does, def: 0.0, at: VTOFFSET.does.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(dataMode: EOObservationDetails_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func endEOObservationDetails_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEOObservationDetails_Full(
    _ fbb: inout FlatBufferBuilder,
    idEoobservationOffset idEoobservation: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    obTimeOffset obTime: Offset = Offset(),
    predictedRa: Double = 0.0,
    predictedDeclination: Double = 0.0,
    predictedAzimuth: Double = 0.0,
    predictedElevation: Double = 0.0,
    sunAzimuth: Double = 0.0,
    sunElevation: Double = 0.0,
    numSpectralFilters: Int32 = 0,
    spectralFiltersVectorOffset spectralFilters: Offset = Offset(),
    spectralZmflVectorOffset spectralZmfl: Offset = Offset(),
    spectralFilterSolarMagVectorOffset spectralFilterSolarMag: Offset = Offset(),
    zeroPointsVectorOffset zeroPoints: Offset = Offset(),
    zeroPointsUncVectorOffset zeroPointsUnc: Offset = Offset(),
    extinctionCoeffsVectorOffset extinctionCoeffs: Offset = Offset(),
    extinctionCoeffsUncVectorOffset extinctionCoeffsUnc: Offset = Offset(),
    colorCoeffsVectorOffset colorCoeffs: Offset = Offset(),
    numNeutralDensityFilters: Int32 = 0,
    neutralDensityFilterNamesVectorOffset neutralDensityFilterNames: Offset = Offset(),
    neutralDensityFilterTransmissionsVectorOffset neutralDensityFilterTransmissions: Offset = Offset(),
    neutralDensityFilterTransmissionsUncVectorOffset neutralDensityFilterTransmissionsUnc: Offset = Offset(),
    gain: Double = 0.0,
    ifov: Double = 0.0,
    pixelArrayWidth: Int32 = 0,
    pixelArrayHeight: Int32 = 0,
    pixelMin: Int32 = 0,
    pixelMax: Int32 = 0,
    centroidRow: Double = 0.0,
    centroidColumn: Double = 0.0,
    rowVariance: Double = 0.0,
    columnVariance: Double = 0.0,
    rowColCov: Double = 0.0,
    distFromStreakCenterVectorOffset distFromStreakCenter: Offset = Offset(),
    surfBrightnessVectorOffset surfBrightness: Offset = Offset(),
    surfBrightnessUncVectorOffset surfBrightnessUnc: Offset = Offset(),
    timesUnc: Double = 0.0,
    ccdTemp: Double = 0.0,
    currentSpectralFilterNum: Int32 = 0,
    currentNeutralDensityFilterNum: Int32 = 0,
    binningHoriz: Int32 = 0,
    binningVert: Int32 = 0,
    pcalNumStars: Int32 = 0,
    ccdObjPosX: Double = 0.0,
    ccdObjPosY: Double = 0.0,
    ccdObjWidth: Double = 0.0,
    backgroundSignal: Double = 0.0,
    backgroundSignalUnc: Double = 0.0,
    peakApertureCount: Double = 0.0,
    peakBackgroundCount: Int32 = 0,
    snrEst: Double = 0.0,
    magInstrumental: Double = 0.0,
    magInstrumentalUnc: Double = 0.0,
    opticalCrossSection: Double = 0.0,
    opticalCrossSectionUnc: Double = 0.0,
    sunStatePosX: Double = 0.0,
    sunStatePosY: Double = 0.0,
    sunStatePosZ: Double = 0.0,
    sunStateVelX: Double = 0.0,
    sunStateVelY: Double = 0.0,
    sunStateVelZ: Double = 0.0,
    numCatalogStars: Int32 = 0,
    numDetectedStars: Int32 = 0,
    numCorrelatedStars: Int32 = 0,
    predictedRaUnc: Double = 0.0,
    predictedDeclinationUnc: Double = 0.0,
    raCov: Double = 0.0,
    declinationCov: Double = 0.0,
    raDeclinationCov: Double = 0.0,
    acalCrPixX: Double = 0.0,
    acalCrPixY: Double = 0.0,
    acalCrValX: Double = 0.0,
    acalCrValY: Double = 0.0,
    acalNumStars: Int32 = 0,
    objSunRange: Double = 0.0,
    phaseAngBisect: Double = 0.0,
    solarDiskFrac: Double = 0.0,
    toes: Double = 0.0,
    does: Double = 0.0,
    sourceOffset source: Offset = Offset(),
    dataMode: EOObservationDetails_Full_dataMode_Enum = .real,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset()
  ) -> Offset {
    let __start = EOObservationDetails_Full.startEOObservationDetails_Full(&fbb)
    EOObservationDetails_Full.add(idEoobservation: idEoobservation, &fbb)
    EOObservationDetails_Full.add(classificationMarking: classificationMarking, &fbb)
    EOObservationDetails_Full.add(obTime: obTime, &fbb)
    EOObservationDetails_Full.add(predictedRa: predictedRa, &fbb)
    EOObservationDetails_Full.add(predictedDeclination: predictedDeclination, &fbb)
    EOObservationDetails_Full.add(predictedAzimuth: predictedAzimuth, &fbb)
    EOObservationDetails_Full.add(predictedElevation: predictedElevation, &fbb)
    EOObservationDetails_Full.add(sunAzimuth: sunAzimuth, &fbb)
    EOObservationDetails_Full.add(sunElevation: sunElevation, &fbb)
    EOObservationDetails_Full.add(numSpectralFilters: numSpectralFilters, &fbb)
    EOObservationDetails_Full.addVectorOf(spectralFilters: spectralFilters, &fbb)
    EOObservationDetails_Full.addVectorOf(spectralZmfl: spectralZmfl, &fbb)
    EOObservationDetails_Full.addVectorOf(spectralFilterSolarMag: spectralFilterSolarMag, &fbb)
    EOObservationDetails_Full.addVectorOf(zeroPoints: zeroPoints, &fbb)
    EOObservationDetails_Full.addVectorOf(zeroPointsUnc: zeroPointsUnc, &fbb)
    EOObservationDetails_Full.addVectorOf(extinctionCoeffs: extinctionCoeffs, &fbb)
    EOObservationDetails_Full.addVectorOf(extinctionCoeffsUnc: extinctionCoeffsUnc, &fbb)
    EOObservationDetails_Full.addVectorOf(colorCoeffs: colorCoeffs, &fbb)
    EOObservationDetails_Full.add(numNeutralDensityFilters: numNeutralDensityFilters, &fbb)
    EOObservationDetails_Full.addVectorOf(neutralDensityFilterNames: neutralDensityFilterNames, &fbb)
    EOObservationDetails_Full.addVectorOf(neutralDensityFilterTransmissions: neutralDensityFilterTransmissions, &fbb)
    EOObservationDetails_Full.addVectorOf(neutralDensityFilterTransmissionsUnc: neutralDensityFilterTransmissionsUnc, &fbb)
    EOObservationDetails_Full.add(gain: gain, &fbb)
    EOObservationDetails_Full.add(ifov: ifov, &fbb)
    EOObservationDetails_Full.add(pixelArrayWidth: pixelArrayWidth, &fbb)
    EOObservationDetails_Full.add(pixelArrayHeight: pixelArrayHeight, &fbb)
    EOObservationDetails_Full.add(pixelMin: pixelMin, &fbb)
    EOObservationDetails_Full.add(pixelMax: pixelMax, &fbb)
    EOObservationDetails_Full.add(centroidRow: centroidRow, &fbb)
    EOObservationDetails_Full.add(centroidColumn: centroidColumn, &fbb)
    EOObservationDetails_Full.add(rowVariance: rowVariance, &fbb)
    EOObservationDetails_Full.add(columnVariance: columnVariance, &fbb)
    EOObservationDetails_Full.add(rowColCov: rowColCov, &fbb)
    EOObservationDetails_Full.addVectorOf(distFromStreakCenter: distFromStreakCenter, &fbb)
    EOObservationDetails_Full.addVectorOf(surfBrightness: surfBrightness, &fbb)
    EOObservationDetails_Full.addVectorOf(surfBrightnessUnc: surfBrightnessUnc, &fbb)
    EOObservationDetails_Full.add(timesUnc: timesUnc, &fbb)
    EOObservationDetails_Full.add(ccdTemp: ccdTemp, &fbb)
    EOObservationDetails_Full.add(currentSpectralFilterNum: currentSpectralFilterNum, &fbb)
    EOObservationDetails_Full.add(currentNeutralDensityFilterNum: currentNeutralDensityFilterNum, &fbb)
    EOObservationDetails_Full.add(binningHoriz: binningHoriz, &fbb)
    EOObservationDetails_Full.add(binningVert: binningVert, &fbb)
    EOObservationDetails_Full.add(pcalNumStars: pcalNumStars, &fbb)
    EOObservationDetails_Full.add(ccdObjPosX: ccdObjPosX, &fbb)
    EOObservationDetails_Full.add(ccdObjPosY: ccdObjPosY, &fbb)
    EOObservationDetails_Full.add(ccdObjWidth: ccdObjWidth, &fbb)
    EOObservationDetails_Full.add(backgroundSignal: backgroundSignal, &fbb)
    EOObservationDetails_Full.add(backgroundSignalUnc: backgroundSignalUnc, &fbb)
    EOObservationDetails_Full.add(peakApertureCount: peakApertureCount, &fbb)
    EOObservationDetails_Full.add(peakBackgroundCount: peakBackgroundCount, &fbb)
    EOObservationDetails_Full.add(snrEst: snrEst, &fbb)
    EOObservationDetails_Full.add(magInstrumental: magInstrumental, &fbb)
    EOObservationDetails_Full.add(magInstrumentalUnc: magInstrumentalUnc, &fbb)
    EOObservationDetails_Full.add(opticalCrossSection: opticalCrossSection, &fbb)
    EOObservationDetails_Full.add(opticalCrossSectionUnc: opticalCrossSectionUnc, &fbb)
    EOObservationDetails_Full.add(sunStatePosX: sunStatePosX, &fbb)
    EOObservationDetails_Full.add(sunStatePosY: sunStatePosY, &fbb)
    EOObservationDetails_Full.add(sunStatePosZ: sunStatePosZ, &fbb)
    EOObservationDetails_Full.add(sunStateVelX: sunStateVelX, &fbb)
    EOObservationDetails_Full.add(sunStateVelY: sunStateVelY, &fbb)
    EOObservationDetails_Full.add(sunStateVelZ: sunStateVelZ, &fbb)
    EOObservationDetails_Full.add(numCatalogStars: numCatalogStars, &fbb)
    EOObservationDetails_Full.add(numDetectedStars: numDetectedStars, &fbb)
    EOObservationDetails_Full.add(numCorrelatedStars: numCorrelatedStars, &fbb)
    EOObservationDetails_Full.add(predictedRaUnc: predictedRaUnc, &fbb)
    EOObservationDetails_Full.add(predictedDeclinationUnc: predictedDeclinationUnc, &fbb)
    EOObservationDetails_Full.add(raCov: raCov, &fbb)
    EOObservationDetails_Full.add(declinationCov: declinationCov, &fbb)
    EOObservationDetails_Full.add(raDeclinationCov: raDeclinationCov, &fbb)
    EOObservationDetails_Full.add(acalCrPixX: acalCrPixX, &fbb)
    EOObservationDetails_Full.add(acalCrPixY: acalCrPixY, &fbb)
    EOObservationDetails_Full.add(acalCrValX: acalCrValX, &fbb)
    EOObservationDetails_Full.add(acalCrValY: acalCrValY, &fbb)
    EOObservationDetails_Full.add(acalNumStars: acalNumStars, &fbb)
    EOObservationDetails_Full.add(objSunRange: objSunRange, &fbb)
    EOObservationDetails_Full.add(phaseAngBisect: phaseAngBisect, &fbb)
    EOObservationDetails_Full.add(solarDiskFrac: solarDiskFrac, &fbb)
    EOObservationDetails_Full.add(toes: toes, &fbb)
    EOObservationDetails_Full.add(does: does, &fbb)
    EOObservationDetails_Full.add(source: source, &fbb)
    EOObservationDetails_Full.add(dataMode: dataMode, &fbb)
    EOObservationDetails_Full.add(createdAt: createdAt, &fbb)
    EOObservationDetails_Full.add(createdBy: createdBy, &fbb)
    return EOObservationDetails_Full.endEOObservationDetails_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.idEoobservation.p, fieldName: "idEoobservation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obTime.p, fieldName: "obTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.predictedRa.p, fieldName: "predictedRa", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.predictedDeclination.p, fieldName: "predictedDeclination", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.predictedAzimuth.p, fieldName: "predictedAzimuth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.predictedElevation.p, fieldName: "predictedElevation", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.sunAzimuth.p, fieldName: "sunAzimuth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.sunElevation.p, fieldName: "sunElevation", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.numSpectralFilters.p, fieldName: "numSpectralFilters", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.spectralFilters.p, fieldName: "spectralFilters", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.spectralZmfl.p, fieldName: "spectralZmfl", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.spectralFilterSolarMag.p, fieldName: "spectralFilterSolarMag", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.zeroPoints.p, fieldName: "zeroPoints", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.zeroPointsUnc.p, fieldName: "zeroPointsUnc", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.extinctionCoeffs.p, fieldName: "extinctionCoeffs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.extinctionCoeffsUnc.p, fieldName: "extinctionCoeffsUnc", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.colorCoeffs.p, fieldName: "colorCoeffs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.numNeutralDensityFilters.p, fieldName: "numNeutralDensityFilters", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.neutralDensityFilterNames.p, fieldName: "neutralDensityFilterNames", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.neutralDensityFilterTransmissions.p, fieldName: "neutralDensityFilterTransmissions", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.neutralDensityFilterTransmissionsUnc.p, fieldName: "neutralDensityFilterTransmissionsUnc", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.gain.p, fieldName: "gain", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ifov.p, fieldName: "ifov", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pixelArrayWidth.p, fieldName: "pixelArrayWidth", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.pixelArrayHeight.p, fieldName: "pixelArrayHeight", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.pixelMin.p, fieldName: "pixelMin", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.pixelMax.p, fieldName: "pixelMax", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.centroidRow.p, fieldName: "centroidRow", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.centroidColumn.p, fieldName: "centroidColumn", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rowVariance.p, fieldName: "rowVariance", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.columnVariance.p, fieldName: "columnVariance", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rowColCov.p, fieldName: "rowColCov", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.distFromStreakCenter.p, fieldName: "distFromStreakCenter", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.surfBrightness.p, fieldName: "surfBrightness", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.surfBrightnessUnc.p, fieldName: "surfBrightnessUnc", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.timesUnc.p, fieldName: "timesUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ccdTemp.p, fieldName: "ccdTemp", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.currentSpectralFilterNum.p, fieldName: "currentSpectralFilterNum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.currentNeutralDensityFilterNum.p, fieldName: "currentNeutralDensityFilterNum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.binningHoriz.p, fieldName: "binningHoriz", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.binningVert.p, fieldName: "binningVert", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.pcalNumStars.p, fieldName: "pcalNumStars", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.ccdObjPosX.p, fieldName: "ccdObjPosX", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ccdObjPosY.p, fieldName: "ccdObjPosY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ccdObjWidth.p, fieldName: "ccdObjWidth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.backgroundSignal.p, fieldName: "backgroundSignal", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.backgroundSignalUnc.p, fieldName: "backgroundSignalUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.peakApertureCount.p, fieldName: "peakApertureCount", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.peakBackgroundCount.p, fieldName: "peakBackgroundCount", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.snrEst.p, fieldName: "snrEst", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.magInstrumental.p, fieldName: "magInstrumental", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.magInstrumentalUnc.p, fieldName: "magInstrumentalUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.opticalCrossSection.p, fieldName: "opticalCrossSection", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.opticalCrossSectionUnc.p, fieldName: "opticalCrossSectionUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.sunStatePosX.p, fieldName: "sunStatePosX", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.sunStatePosY.p, fieldName: "sunStatePosY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.sunStatePosZ.p, fieldName: "sunStatePosZ", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.sunStateVelX.p, fieldName: "sunStateVelX", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.sunStateVelY.p, fieldName: "sunStateVelY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.sunStateVelZ.p, fieldName: "sunStateVelZ", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.numCatalogStars.p, fieldName: "numCatalogStars", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numDetectedStars.p, fieldName: "numDetectedStars", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numCorrelatedStars.p, fieldName: "numCorrelatedStars", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.predictedRaUnc.p, fieldName: "predictedRaUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.predictedDeclinationUnc.p, fieldName: "predictedDeclinationUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.raCov.p, fieldName: "raCov", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.declinationCov.p, fieldName: "declinationCov", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.raDeclinationCov.p, fieldName: "raDeclinationCov", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.acalCrPixX.p, fieldName: "acalCrPixX", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.acalCrPixY.p, fieldName: "acalCrPixY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.acalCrValX.p, fieldName: "acalCrValX", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.acalCrValY.p, fieldName: "acalCrValY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.acalNumStars.p, fieldName: "acalNumStars", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.objSunRange.p, fieldName: "objSunRange", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.phaseAngBisect.p, fieldName: "phaseAngBisect", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.solarDiskFrac.p, fieldName: "solarDiskFrac", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.toes.p, fieldName: "toes", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.does.p, fieldName: "does", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: EOObservationDetails_Full_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

