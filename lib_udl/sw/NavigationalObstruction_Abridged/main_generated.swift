// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum NavigationalObstruction_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: NavigationalObstruction_Abridged_dataMode_Enum { return .exercise }
  public static var min: NavigationalObstruction_Abridged_dataMode_Enum { return .real }
}


///  /// Beta Version Navigational Obstruction: Information describing navigational obstructions, such as applicable boundaries, locations, heights, data ownership, and currency.
public struct NavigationalObstruction_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "NAVI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: NavigationalObstruction_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case cycleDate = 8
    case obstacleType = 10
    case obstacleId = 12
    case externalId = 14
    case origId = 16
    case countryCode = 18
    case provinceCode = 20
    case pointLat = 22
    case pointLon = 24
    case lineNelon = 26
    case lineNelat = 28
    case lineSwlon = 30
    case lineSwlat = 32
    case segStartPoint = 34
    case segEndPoint = 36
    case segNum = 38
    case facc = 40
    case featureCode = 42
    case featureType = 44
    case featureName = 46
    case featureDescription = 48
    case wac = 50
    case wacInnr = 52
    case multObs = 54
    case numObs = 56
    case horizDatumCode = 58
    case heightAgl = 60
    case heightAglacc = 62
    case heightMsl = 64
    case heightMslacc = 66
    case elevation = 68
    case elevationAcc = 70
    case horizAcc = 72
    case quality = 74
    case lightingCode = 76
    case surfaceMatCode = 78
    case directivityCode = 80
    case validationCode = 82
    case transactionCode = 84
    case processCode = 86
    case actDelCode = 88
    case producer = 90
    case derivingOrg = 92
    case deletingOrg = 94
    case sourceDate = 96
    case revDate = 98
    case initRecordDate = 100
    case keys = 102
    case values = 104
    case obstacleRemarks = 106
    case nextCycleDate = 108
    case baselineCutoffDate = 110
    case cutoffDate = 112
    case airacCycle = 114
    case baseAiracCycle = 116
    case ownerCountryCode = 118
    case boundNelon = 120
    case boundNelat = 122
    case boundSwlon = 124
    case boundSwlat = 126
    case minHeightAgl = 128
    case numPoints = 130
    case numLines = 132
    case dataSetRemarks = 134
    case pointsFilename = 136
    case linesFilename = 138
    case vectorsFilename = 140
    case rawFileUri = 142
    case createdAt = 144
    case createdBy = 146
    case sourceDl = 148
    case source = 150
    case origin = 152
    case origNetwork = 154
    case dataMode = 156
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Start date of this obstruction data set's currency, in ISO 8601 date-only format.
  ///  Example: /// Example: 2024-06-13
  ///  Constraints: No constraints specified.
  public var cycleDate: String? { let o = _accessor.offset(VTOFFSET.cycleDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cycleDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cycleDate.v) }
  ///  Type of obstacle (e.g. P for point, V for vector, L for line).
  ///  Example: /// Example: V
  ///  Constraints: Minimum length = 1, Maximum length = 1
  public var obstacleType: String? { let o = _accessor.offset(VTOFFSET.obstacleType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obstacleTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obstacleType.v) }
  ///  The ID of this obstacle.
  ///  Example: /// Example: 359655
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var obstacleId: String? { let o = _accessor.offset(VTOFFSET.obstacleId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obstacleIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obstacleId.v) }
  ///  Optional obstacle ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: OU812
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var externalId: String? { let o = _accessor.offset(VTOFFSET.externalId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var externalIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.externalId.v) }
  ///  The original ID for this obstacle.
  ///  Example: /// Example: L0000002289
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origId: String? { let o = _accessor.offset(VTOFFSET.origId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origId.v) }
  ///  The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var countryCode: String? { let o = _accessor.offset(VTOFFSET.countryCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var countryCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.countryCode.v) }
  ///  The Federal Information Processing Standards (FIPS) state/province numeric code of this obstacle's location.
  ///  Example: /// Example: 23
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var provinceCode: String? { let o = _accessor.offset(VTOFFSET.provinceCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var provinceCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.provinceCode.v) }
  ///  WGS-84 latitude of this point obstacle, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 46.757211
  ///  Constraints: No constraints specified.
  public var pointLat: Double { let o = _accessor.offset(VTOFFSET.pointLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 longitude of this point obstacle, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -67.759494
  ///  Constraints: No constraints specified.
  public var pointLon: Double { let o = _accessor.offset(VTOFFSET.pointLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 longitude of the northeastern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -122.197891
  ///  Constraints: No constraints specified.
  public var lineNelon: Double { let o = _accessor.offset(VTOFFSET.lineNelon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 latitude of the northeastern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 49.000584
  ///  Constraints: No constraints specified.
  public var lineNelat: Double { let o = _accessor.offset(VTOFFSET.lineNelat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 longitude of the southwestern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -122.722946
  ///  Constraints: No constraints specified.
  public var lineSwlon: Double { let o = _accessor.offset(VTOFFSET.lineSwlon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 latitude of the southwestern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 48.507027
  ///  Constraints: No constraints specified.
  public var lineSwlat: Double { let o = _accessor.offset(VTOFFSET.lineSwlat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  ID of the starting point of a line segment.
  ///  Example: /// Example: 359655
  ///  Constraints: No constraints specified.
  public var segStartPoint: Int32 { let o = _accessor.offset(VTOFFSET.segStartPoint.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  ID of the end point of a line segment.
  ///  Example: /// Example: 359655
  ///  Constraints: No constraints specified.
  public var segEndPoint: Int32 { let o = _accessor.offset(VTOFFSET.segEndPoint.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Identifies the sequence number of a line segment.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var segNum: Int32 { let o = _accessor.offset(VTOFFSET.segNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  FACC (Feature and Attribute Coding Catalog) is a five-character code for encoding real-world entities and objects. The first letter of the code is an alphabetic value from "A" to "Z" which will map to a feature category. The second character will map to a subcategory. Characters three to five are numeric and range from 000 to 999. This value will provide a unit feature type identification within the categories.
  ///  Example: /// Example: AT040
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var facc: String? { let o = _accessor.offset(VTOFFSET.facc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var faccSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.facc.v) }
  ///  Identifying code for the type of this point obstacle.
  ///  Example: /// Example: 540
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var featureCode: String? { let o = _accessor.offset(VTOFFSET.featureCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var featureCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.featureCode.v) }
  ///  Identifying code for the type of this point obstacle.
  ///  Example: /// Example: 540
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var featureType: String? { let o = _accessor.offset(VTOFFSET.featureType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var featureTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.featureType.v) }
  ///  Type name of point obstacle.
  ///  Example: /// Example: PYLON
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var featureName: String? { let o = _accessor.offset(VTOFFSET.featureName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var featureNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.featureName.v) }
  ///  Description of this obstacle, corresponding to the FACC (Feature and Attribute Coding Catalog) value.
  ///  Example: /// Example: Powerline Pylon, General
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var featureDescription: String? { let o = _accessor.offset(VTOFFSET.featureDescription.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var featureDescriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.featureDescription.v) }
  ///  The World Aeronautical Chart (WAC) identifier for the area in which this obstacle is located.
  ///  Example: /// Example: 262
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var wac: String? { let o = _accessor.offset(VTOFFSET.wac.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var wacSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.wac.v) }
  ///  This obstacle's World Area Code installation number (WAC-INNR).
  ///  Example: /// Example: 0409-00039
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var wacInnr: String? { let o = _accessor.offset(VTOFFSET.wacInnr.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var wacInnrSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.wacInnr.v) }
  ///  Indicates if the feature has multiple obstructions (e.g. S = Single, M = Multiple, U = Undetermined).
  ///  Example: /// Example: S
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var multObs: String? { let o = _accessor.offset(VTOFFSET.multObs.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var multObsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.multObs.v) }
  ///  Indicates the number of obstructions associated with a feature.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var numObs: Int32 { let o = _accessor.offset(VTOFFSET.numObs.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Code representing the mathematical model of Earth used to calculate coordinates for this obstacle (e.g. WGS-84, U for undetermined, etc.).  US Forces use the World Geodetic System 1984 (WGS-84), but also use maps by allied countries with local datums.
  ///  Example: /// Example: WGS-84
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var horizDatumCode: String? { let o = _accessor.offset(VTOFFSET.horizDatumCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var horizDatumCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.horizDatumCode.v) }
  ///  The height Above Ground Level (AGL) of the point obstacle in feet.
  ///  Example: /// Example: 314.1
  ///  Constraints: No constraints specified.
  public var heightAgl: Double { let o = _accessor.offset(VTOFFSET.heightAgl.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The accuracy of the height Above Ground Level (AGL) AGL value for this point obstacle in feet.
  ///  Example: /// Example: 30.1
  ///  Constraints: No constraints specified.
  public var heightAglacc: Double { let o = _accessor.offset(VTOFFSET.heightAglacc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The height Above Mean Sea Level (AMSL) of the point obstacle in feet.
  ///  Example: /// Example: 1154.1
  ///  Constraints: No constraints specified.
  public var heightMsl: Double { let o = _accessor.offset(VTOFFSET.heightMsl.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The accuracy of the height Above Mean Sea Level (AMSL) value for this point obstacle in feet.
  ///  Example: /// Example: 34.1
  ///  Constraints: No constraints specified.
  public var heightMslacc: Double { let o = _accessor.offset(VTOFFSET.heightMslacc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The elevation at the point obstacle's location in feet.
  ///  Example: /// Example: 840.1
  ///  Constraints: No constraints specified.
  public var elevation: Double { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The difference between the assigned elevation of this point and its true elevation, in feet.
  ///  Example: /// Example: 17.1
  ///  Constraints: No constraints specified.
  public var elevationAcc: Double { let o = _accessor.offset(VTOFFSET.elevationAcc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The difference between the recorded horizontal coordinates of this point obstacle and its true position, in feet.
  ///  Example: /// Example: 8.1
  ///  Constraints: No constraints specified.
  public var horizAcc: Double { let o = _accessor.offset(VTOFFSET.horizAcc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  When horizontal and/or vertical accuracy requirements cannot be met because of inadequate source material, this code indicates the quality of the data.
  ///  Example: /// Example: 0
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var quality: String? { let o = _accessor.offset(VTOFFSET.quality.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var qualitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.quality.v) }
  ///  Code specifying if this obstacle is lit (e.g. Y = Yes, N = No, U = Unknown).
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var lightingCode: String? { let o = _accessor.offset(VTOFFSET.lightingCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lightingCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lightingCode.v) }
  ///  The surface material composition code of this point obstacle.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var surfaceMatCode: String? { let o = _accessor.offset(VTOFFSET.surfaceMatCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var surfaceMatCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.surfaceMatCode.v) }
  ///  The side or sides of this obstruction feature which produces the greatest reflectivity potential.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var directivityCode: Int32 { let o = _accessor.offset(VTOFFSET.directivityCode.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Method used to confirm the existence of this obstacle.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var validationCode: Int32 { let o = _accessor.offset(VTOFFSET.validationCode.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The transaction type/code for this obstacle (e.g. "D", "N", "R", "S", "V", "X").
  ///  Example: /// Example: V
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var transactionCode: String? { let o = _accessor.offset(VTOFFSET.transactionCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transactionCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transactionCode.v) }
  ///  Code denoting the action, review, or process that updated this obstacle.
  ///  Example: /// Example: OT
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var processCode: String? { let o = _accessor.offset(VTOFFSET.processCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var processCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.processCode.v) }
  ///  Indicates if this obstacle record is Active (A) or Deleted (D).
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var actDelCode: String? { let o = _accessor.offset(VTOFFSET.actDelCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actDelCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.actDelCode.v) }
  ///  Name of the agency that produced this obstruction data set.
  ///  Example: /// Example: ACME
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var producer: String? { let o = _accessor.offset(VTOFFSET.producer.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var producerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.producer.v) }
  ///  The organization that entered obstacle data other than the producer.
  ///  Example: /// Example: ACME
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var derivingOrg: String? { let o = _accessor.offset(VTOFFSET.derivingOrg.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var derivingOrgSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.derivingOrg.v) }
  ///  The organization that deleted this obstacle record.
  ///  Example: /// Example: ACME
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var deletingOrg: String? { let o = _accessor.offset(VTOFFSET.deletingOrg.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var deletingOrgSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.deletingOrg.v) }
  ///  Source date of this obstacle data, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  ///  Example: /// Example: 2016-04-01
  ///  Constraints: No constraints specified.
  public var sourceDate: String? { let o = _accessor.offset(VTOFFSET.sourceDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDate.v) }
  ///  Date this obstacle data was revised, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  ///  Example: /// Example: 2020-02-26
  ///  Constraints: No constraints specified.
  public var revDate: String? { let o = _accessor.offset(VTOFFSET.revDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var revDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.revDate.v) }
  ///  Date this obstacle was initially added to the data set, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  ///  Example: /// Example: 1991-03-28
  ///  Constraints: No constraints specified.
  public var initRecordDate: String? { let o = _accessor.offset(VTOFFSET.initRecordDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var initRecordDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.initRecordDate.v) }
  ///  This field provides an array of keys that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the values array. This array must be the same length as values.
  ///  Example: /// Example: ['key1', 'key2']
  ///  Constraints: No constraints specified.
  public var hasKeys: Bool { let o = _accessor.offset(VTOFFSET.keys.v); return o == 0 ? false : true }
  public var keysCount: Int32 { let o = _accessor.offset(VTOFFSET.keys.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func keys(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.keys.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  This field provides an array of values that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
  ///  Example: /// Example: ['value1', 'value2']
  ///  Constraints: No constraints specified.
  public var hasValues: Bool { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? false : true }
  public var valuesCount: Int32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func values(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Remarks regarding this obstacle.
  ///  Example: /// Example: Obstacle remarks
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var obstacleRemarks: String? { let o = _accessor.offset(VTOFFSET.obstacleRemarks.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obstacleRemarksSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obstacleRemarks.v) }
  ///  The date after which this obstruction data set’s currency is stale and should be refreshed, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
  ///  Example: /// Example: 2024-07-11
  ///  Constraints: No constraints specified.
  public var nextCycleDate: String? { let o = _accessor.offset(VTOFFSET.nextCycleDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nextCycleDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.nextCycleDate.v) }
  ///  Earliest record date possible in this obstruction data set (not the earliest data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD). If null, this data set is assumed to be a full data pull of holdings until the cutoffDate.  If this field is populated, this data set only contains updates since the last baseline data set.
  ///  Example: /// Example: 2024-04-23
  ///  Constraints: No constraints specified.
  public var baselineCutoffDate: String? { let o = _accessor.offset(VTOFFSET.baselineCutoffDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var baselineCutoffDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.baselineCutoffDate.v) }
  ///  Latest record date possible in this obstruction data set (not the most recent data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD).
  ///  Example: /// Example: 2024-05-21
  ///  Constraints: No constraints specified.
  public var cutoffDate: String? { let o = _accessor.offset(VTOFFSET.cutoffDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cutoffDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cutoffDate.v) }
  ///  The Aeronautical Information Regulation and Control (AIRAC) cycle of this obstruction data set. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
  ///  Example: /// Example: 2406
  ///  Constraints: No constraints specified.
  public var airacCycle: Int32 { let o = _accessor.offset(VTOFFSET.airacCycle.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The baseline Aeronautical Information Regulation and Control (AIRAC) cycle for change sets only. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
  ///  Example: /// Example: 2405
  ///  Constraints: No constraints specified.
  public var baseAiracCycle: Int32 { let o = _accessor.offset(VTOFFSET.baseAiracCycle.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The DoD Standard Country Code designator for the country or political entity that owns the data set associated with this obstruction. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var ownerCountryCode: String? { let o = _accessor.offset(VTOFFSET.ownerCountryCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ownerCountryCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ownerCountryCode.v) }
  ///  WGS-84 longitude of the northeastern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 99.1
  ///  Constraints: No constraints specified.
  public var boundNelon: Double { let o = _accessor.offset(VTOFFSET.boundNelon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 latitude of the northeastern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 29.1
  ///  Constraints: No constraints specified.
  public var boundNelat: Double { let o = _accessor.offset(VTOFFSET.boundNelat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 longitude of the southwestern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -144.1
  ///  Constraints: No constraints specified.
  public var boundSwlon: Double { let o = _accessor.offset(VTOFFSET.boundSwlon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 latitude of the southwestern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: -44.1
  ///  Constraints: No constraints specified.
  public var boundSwlat: Double { let o = _accessor.offset(VTOFFSET.boundSwlat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The minimum height Above Ground Level (AGL) of the shortest obstruction contained in this data set, in feet.
  ///  Example: /// Example: 20.1
  ///  Constraints: No constraints specified.
  public var minHeightAgl: Double { let o = _accessor.offset(VTOFFSET.minHeightAgl.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The number of point features associated with this obstruction data set.
  ///  Example: /// Example: 21830590
  ///  Constraints: No constraints specified.
  public var numPoints: Int32 { let o = _accessor.offset(VTOFFSET.numPoints.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The number of line features associated with this obstruction data set.
  ///  Example: /// Example: 45993
  ///  Constraints: No constraints specified.
  public var numLines: Int32 { let o = _accessor.offset(VTOFFSET.numLines.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Remarks concerning this obstruction's data set.
  ///  Example: /// Example: Data set remarks
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var dataSetRemarks: String? { let o = _accessor.offset(VTOFFSET.dataSetRemarks.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dataSetRemarksSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dataSetRemarks.v) }
  ///  The name of the point file associated with this obstruction data set.
  ///  Example: /// Example: points.txt
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var pointsFilename: String? { let o = _accessor.offset(VTOFFSET.pointsFilename.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pointsFilenameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pointsFilename.v) }
  ///  The name of the line file associated with this obstruction data set.
  ///  Example: /// Example: lines.txt
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var linesFilename: String? { let o = _accessor.offset(VTOFFSET.linesFilename.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var linesFilenameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.linesFilename.v) }
  ///  The name of the vector file associated with this obstruction data set.
  ///  Example: /// Example: vectors.txt
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var vectorsFilename: String? { let o = _accessor.offset(VTOFFSET.vectorsFilename.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var vectorsFilenameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.vectorsFilename.v) }
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var rawFileUri: String? { let o = _accessor.offset(VTOFFSET.rawFileUri.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rawFileUriSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rawFileUri.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: NavigationalObstruction_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : NavigationalObstruction_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startNavigationalObstruction_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 77) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(cycleDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cycleDate, at: VTOFFSET.cycleDate.p) }
  public static func add(obstacleType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obstacleType, at: VTOFFSET.obstacleType.p) }
  public static func add(obstacleId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obstacleId, at: VTOFFSET.obstacleId.p) }
  public static func add(externalId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: externalId, at: VTOFFSET.externalId.p) }
  public static func add(origId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origId, at: VTOFFSET.origId.p) }
  public static func add(countryCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: countryCode, at: VTOFFSET.countryCode.p) }
  public static func add(provinceCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: provinceCode, at: VTOFFSET.provinceCode.p) }
  public static func add(pointLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pointLat, def: 0.0, at: VTOFFSET.pointLat.p) }
  public static func add(pointLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pointLon, def: 0.0, at: VTOFFSET.pointLon.p) }
  public static func add(lineNelon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lineNelon, def: 0.0, at: VTOFFSET.lineNelon.p) }
  public static func add(lineNelat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lineNelat, def: 0.0, at: VTOFFSET.lineNelat.p) }
  public static func add(lineSwlon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lineSwlon, def: 0.0, at: VTOFFSET.lineSwlon.p) }
  public static func add(lineSwlat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lineSwlat, def: 0.0, at: VTOFFSET.lineSwlat.p) }
  public static func add(segStartPoint: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: segStartPoint, def: 0, at: VTOFFSET.segStartPoint.p) }
  public static func add(segEndPoint: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: segEndPoint, def: 0, at: VTOFFSET.segEndPoint.p) }
  public static func add(segNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: segNum, def: 0, at: VTOFFSET.segNum.p) }
  public static func add(facc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: facc, at: VTOFFSET.facc.p) }
  public static func add(featureCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: featureCode, at: VTOFFSET.featureCode.p) }
  public static func add(featureType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: featureType, at: VTOFFSET.featureType.p) }
  public static func add(featureName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: featureName, at: VTOFFSET.featureName.p) }
  public static func add(featureDescription: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: featureDescription, at: VTOFFSET.featureDescription.p) }
  public static func add(wac: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wac, at: VTOFFSET.wac.p) }
  public static func add(wacInnr: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wacInnr, at: VTOFFSET.wacInnr.p) }
  public static func add(multObs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: multObs, at: VTOFFSET.multObs.p) }
  public static func add(numObs: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numObs, def: 0, at: VTOFFSET.numObs.p) }
  public static func add(horizDatumCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: horizDatumCode, at: VTOFFSET.horizDatumCode.p) }
  public static func add(heightAgl: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: heightAgl, def: 0.0, at: VTOFFSET.heightAgl.p) }
  public static func add(heightAglacc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: heightAglacc, def: 0.0, at: VTOFFSET.heightAglacc.p) }
  public static func add(heightMsl: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: heightMsl, def: 0.0, at: VTOFFSET.heightMsl.p) }
  public static func add(heightMslacc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: heightMslacc, def: 0.0, at: VTOFFSET.heightMslacc.p) }
  public static func add(elevation: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func add(elevationAcc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevationAcc, def: 0.0, at: VTOFFSET.elevationAcc.p) }
  public static func add(horizAcc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: horizAcc, def: 0.0, at: VTOFFSET.horizAcc.p) }
  public static func add(quality: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: quality, at: VTOFFSET.quality.p) }
  public static func add(lightingCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lightingCode, at: VTOFFSET.lightingCode.p) }
  public static func add(surfaceMatCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfaceMatCode, at: VTOFFSET.surfaceMatCode.p) }
  public static func add(directivityCode: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: directivityCode, def: 0, at: VTOFFSET.directivityCode.p) }
  public static func add(validationCode: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: validationCode, def: 0, at: VTOFFSET.validationCode.p) }
  public static func add(transactionCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transactionCode, at: VTOFFSET.transactionCode.p) }
  public static func add(processCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: processCode, at: VTOFFSET.processCode.p) }
  public static func add(actDelCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actDelCode, at: VTOFFSET.actDelCode.p) }
  public static func add(producer: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: producer, at: VTOFFSET.producer.p) }
  public static func add(derivingOrg: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: derivingOrg, at: VTOFFSET.derivingOrg.p) }
  public static func add(deletingOrg: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: deletingOrg, at: VTOFFSET.deletingOrg.p) }
  public static func add(sourceDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDate, at: VTOFFSET.sourceDate.p) }
  public static func add(revDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: revDate, at: VTOFFSET.revDate.p) }
  public static func add(initRecordDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: initRecordDate, at: VTOFFSET.initRecordDate.p) }
  public static func addVectorOf(keys: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: keys, at: VTOFFSET.keys.p) }
  public static func addVectorOf(values: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: values, at: VTOFFSET.values.p) }
  public static func add(obstacleRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obstacleRemarks, at: VTOFFSET.obstacleRemarks.p) }
  public static func add(nextCycleDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: nextCycleDate, at: VTOFFSET.nextCycleDate.p) }
  public static func add(baselineCutoffDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: baselineCutoffDate, at: VTOFFSET.baselineCutoffDate.p) }
  public static func add(cutoffDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cutoffDate, at: VTOFFSET.cutoffDate.p) }
  public static func add(airacCycle: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: airacCycle, def: 0, at: VTOFFSET.airacCycle.p) }
  public static func add(baseAiracCycle: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: baseAiracCycle, def: 0, at: VTOFFSET.baseAiracCycle.p) }
  public static func add(ownerCountryCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ownerCountryCode, at: VTOFFSET.ownerCountryCode.p) }
  public static func add(boundNelon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: boundNelon, def: 0.0, at: VTOFFSET.boundNelon.p) }
  public static func add(boundNelat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: boundNelat, def: 0.0, at: VTOFFSET.boundNelat.p) }
  public static func add(boundSwlon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: boundSwlon, def: 0.0, at: VTOFFSET.boundSwlon.p) }
  public static func add(boundSwlat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: boundSwlat, def: 0.0, at: VTOFFSET.boundSwlat.p) }
  public static func add(minHeightAgl: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: minHeightAgl, def: 0.0, at: VTOFFSET.minHeightAgl.p) }
  public static func add(numPoints: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numPoints, def: 0, at: VTOFFSET.numPoints.p) }
  public static func add(numLines: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numLines, def: 0, at: VTOFFSET.numLines.p) }
  public static func add(dataSetRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dataSetRemarks, at: VTOFFSET.dataSetRemarks.p) }
  public static func add(pointsFilename: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pointsFilename, at: VTOFFSET.pointsFilename.p) }
  public static func add(linesFilename: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: linesFilename, at: VTOFFSET.linesFilename.p) }
  public static func add(vectorsFilename: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vectorsFilename, at: VTOFFSET.vectorsFilename.p) }
  public static func add(rawFileUri: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rawFileUri, at: VTOFFSET.rawFileUri.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: NavigationalObstruction_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endNavigationalObstruction_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createNavigationalObstruction_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    cycleDateOffset cycleDate: Offset = Offset(),
    obstacleTypeOffset obstacleType: Offset = Offset(),
    obstacleIdOffset obstacleId: Offset = Offset(),
    externalIdOffset externalId: Offset = Offset(),
    origIdOffset origId: Offset = Offset(),
    countryCodeOffset countryCode: Offset = Offset(),
    provinceCodeOffset provinceCode: Offset = Offset(),
    pointLat: Double = 0.0,
    pointLon: Double = 0.0,
    lineNelon: Double = 0.0,
    lineNelat: Double = 0.0,
    lineSwlon: Double = 0.0,
    lineSwlat: Double = 0.0,
    segStartPoint: Int32 = 0,
    segEndPoint: Int32 = 0,
    segNum: Int32 = 0,
    faccOffset facc: Offset = Offset(),
    featureCodeOffset featureCode: Offset = Offset(),
    featureTypeOffset featureType: Offset = Offset(),
    featureNameOffset featureName: Offset = Offset(),
    featureDescriptionOffset featureDescription: Offset = Offset(),
    wacOffset wac: Offset = Offset(),
    wacInnrOffset wacInnr: Offset = Offset(),
    multObsOffset multObs: Offset = Offset(),
    numObs: Int32 = 0,
    horizDatumCodeOffset horizDatumCode: Offset = Offset(),
    heightAgl: Double = 0.0,
    heightAglacc: Double = 0.0,
    heightMsl: Double = 0.0,
    heightMslacc: Double = 0.0,
    elevation: Double = 0.0,
    elevationAcc: Double = 0.0,
    horizAcc: Double = 0.0,
    qualityOffset quality: Offset = Offset(),
    lightingCodeOffset lightingCode: Offset = Offset(),
    surfaceMatCodeOffset surfaceMatCode: Offset = Offset(),
    directivityCode: Int32 = 0,
    validationCode: Int32 = 0,
    transactionCodeOffset transactionCode: Offset = Offset(),
    processCodeOffset processCode: Offset = Offset(),
    actDelCodeOffset actDelCode: Offset = Offset(),
    producerOffset producer: Offset = Offset(),
    derivingOrgOffset derivingOrg: Offset = Offset(),
    deletingOrgOffset deletingOrg: Offset = Offset(),
    sourceDateOffset sourceDate: Offset = Offset(),
    revDateOffset revDate: Offset = Offset(),
    initRecordDateOffset initRecordDate: Offset = Offset(),
    keysVectorOffset keys: Offset = Offset(),
    valuesVectorOffset values: Offset = Offset(),
    obstacleRemarksOffset obstacleRemarks: Offset = Offset(),
    nextCycleDateOffset nextCycleDate: Offset = Offset(),
    baselineCutoffDateOffset baselineCutoffDate: Offset = Offset(),
    cutoffDateOffset cutoffDate: Offset = Offset(),
    airacCycle: Int32 = 0,
    baseAiracCycle: Int32 = 0,
    ownerCountryCodeOffset ownerCountryCode: Offset = Offset(),
    boundNelon: Double = 0.0,
    boundNelat: Double = 0.0,
    boundSwlon: Double = 0.0,
    boundSwlat: Double = 0.0,
    minHeightAgl: Double = 0.0,
    numPoints: Int32 = 0,
    numLines: Int32 = 0,
    dataSetRemarksOffset dataSetRemarks: Offset = Offset(),
    pointsFilenameOffset pointsFilename: Offset = Offset(),
    linesFilenameOffset linesFilename: Offset = Offset(),
    vectorsFilenameOffset vectorsFilename: Offset = Offset(),
    rawFileUriOffset rawFileUri: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: NavigationalObstruction_Abridged_dataMode_Enum = .real
  ) -> Offset {
    let __start = NavigationalObstruction_Abridged.startNavigationalObstruction_Abridged(&fbb)
    NavigationalObstruction_Abridged.add(id: id, &fbb)
    NavigationalObstruction_Abridged.add(classificationMarking: classificationMarking, &fbb)
    NavigationalObstruction_Abridged.add(cycleDate: cycleDate, &fbb)
    NavigationalObstruction_Abridged.add(obstacleType: obstacleType, &fbb)
    NavigationalObstruction_Abridged.add(obstacleId: obstacleId, &fbb)
    NavigationalObstruction_Abridged.add(externalId: externalId, &fbb)
    NavigationalObstruction_Abridged.add(origId: origId, &fbb)
    NavigationalObstruction_Abridged.add(countryCode: countryCode, &fbb)
    NavigationalObstruction_Abridged.add(provinceCode: provinceCode, &fbb)
    NavigationalObstruction_Abridged.add(pointLat: pointLat, &fbb)
    NavigationalObstruction_Abridged.add(pointLon: pointLon, &fbb)
    NavigationalObstruction_Abridged.add(lineNelon: lineNelon, &fbb)
    NavigationalObstruction_Abridged.add(lineNelat: lineNelat, &fbb)
    NavigationalObstruction_Abridged.add(lineSwlon: lineSwlon, &fbb)
    NavigationalObstruction_Abridged.add(lineSwlat: lineSwlat, &fbb)
    NavigationalObstruction_Abridged.add(segStartPoint: segStartPoint, &fbb)
    NavigationalObstruction_Abridged.add(segEndPoint: segEndPoint, &fbb)
    NavigationalObstruction_Abridged.add(segNum: segNum, &fbb)
    NavigationalObstruction_Abridged.add(facc: facc, &fbb)
    NavigationalObstruction_Abridged.add(featureCode: featureCode, &fbb)
    NavigationalObstruction_Abridged.add(featureType: featureType, &fbb)
    NavigationalObstruction_Abridged.add(featureName: featureName, &fbb)
    NavigationalObstruction_Abridged.add(featureDescription: featureDescription, &fbb)
    NavigationalObstruction_Abridged.add(wac: wac, &fbb)
    NavigationalObstruction_Abridged.add(wacInnr: wacInnr, &fbb)
    NavigationalObstruction_Abridged.add(multObs: multObs, &fbb)
    NavigationalObstruction_Abridged.add(numObs: numObs, &fbb)
    NavigationalObstruction_Abridged.add(horizDatumCode: horizDatumCode, &fbb)
    NavigationalObstruction_Abridged.add(heightAgl: heightAgl, &fbb)
    NavigationalObstruction_Abridged.add(heightAglacc: heightAglacc, &fbb)
    NavigationalObstruction_Abridged.add(heightMsl: heightMsl, &fbb)
    NavigationalObstruction_Abridged.add(heightMslacc: heightMslacc, &fbb)
    NavigationalObstruction_Abridged.add(elevation: elevation, &fbb)
    NavigationalObstruction_Abridged.add(elevationAcc: elevationAcc, &fbb)
    NavigationalObstruction_Abridged.add(horizAcc: horizAcc, &fbb)
    NavigationalObstruction_Abridged.add(quality: quality, &fbb)
    NavigationalObstruction_Abridged.add(lightingCode: lightingCode, &fbb)
    NavigationalObstruction_Abridged.add(surfaceMatCode: surfaceMatCode, &fbb)
    NavigationalObstruction_Abridged.add(directivityCode: directivityCode, &fbb)
    NavigationalObstruction_Abridged.add(validationCode: validationCode, &fbb)
    NavigationalObstruction_Abridged.add(transactionCode: transactionCode, &fbb)
    NavigationalObstruction_Abridged.add(processCode: processCode, &fbb)
    NavigationalObstruction_Abridged.add(actDelCode: actDelCode, &fbb)
    NavigationalObstruction_Abridged.add(producer: producer, &fbb)
    NavigationalObstruction_Abridged.add(derivingOrg: derivingOrg, &fbb)
    NavigationalObstruction_Abridged.add(deletingOrg: deletingOrg, &fbb)
    NavigationalObstruction_Abridged.add(sourceDate: sourceDate, &fbb)
    NavigationalObstruction_Abridged.add(revDate: revDate, &fbb)
    NavigationalObstruction_Abridged.add(initRecordDate: initRecordDate, &fbb)
    NavigationalObstruction_Abridged.addVectorOf(keys: keys, &fbb)
    NavigationalObstruction_Abridged.addVectorOf(values: values, &fbb)
    NavigationalObstruction_Abridged.add(obstacleRemarks: obstacleRemarks, &fbb)
    NavigationalObstruction_Abridged.add(nextCycleDate: nextCycleDate, &fbb)
    NavigationalObstruction_Abridged.add(baselineCutoffDate: baselineCutoffDate, &fbb)
    NavigationalObstruction_Abridged.add(cutoffDate: cutoffDate, &fbb)
    NavigationalObstruction_Abridged.add(airacCycle: airacCycle, &fbb)
    NavigationalObstruction_Abridged.add(baseAiracCycle: baseAiracCycle, &fbb)
    NavigationalObstruction_Abridged.add(ownerCountryCode: ownerCountryCode, &fbb)
    NavigationalObstruction_Abridged.add(boundNelon: boundNelon, &fbb)
    NavigationalObstruction_Abridged.add(boundNelat: boundNelat, &fbb)
    NavigationalObstruction_Abridged.add(boundSwlon: boundSwlon, &fbb)
    NavigationalObstruction_Abridged.add(boundSwlat: boundSwlat, &fbb)
    NavigationalObstruction_Abridged.add(minHeightAgl: minHeightAgl, &fbb)
    NavigationalObstruction_Abridged.add(numPoints: numPoints, &fbb)
    NavigationalObstruction_Abridged.add(numLines: numLines, &fbb)
    NavigationalObstruction_Abridged.add(dataSetRemarks: dataSetRemarks, &fbb)
    NavigationalObstruction_Abridged.add(pointsFilename: pointsFilename, &fbb)
    NavigationalObstruction_Abridged.add(linesFilename: linesFilename, &fbb)
    NavigationalObstruction_Abridged.add(vectorsFilename: vectorsFilename, &fbb)
    NavigationalObstruction_Abridged.add(rawFileUri: rawFileUri, &fbb)
    NavigationalObstruction_Abridged.add(createdAt: createdAt, &fbb)
    NavigationalObstruction_Abridged.add(createdBy: createdBy, &fbb)
    NavigationalObstruction_Abridged.add(sourceDl: sourceDl, &fbb)
    NavigationalObstruction_Abridged.add(source: source, &fbb)
    NavigationalObstruction_Abridged.add(origin: origin, &fbb)
    NavigationalObstruction_Abridged.add(origNetwork: origNetwork, &fbb)
    NavigationalObstruction_Abridged.add(dataMode: dataMode, &fbb)
    return NavigationalObstruction_Abridged.endNavigationalObstruction_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cycleDate.p, fieldName: "cycleDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obstacleType.p, fieldName: "obstacleType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obstacleId.p, fieldName: "obstacleId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.externalId.p, fieldName: "externalId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origId.p, fieldName: "origId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.countryCode.p, fieldName: "countryCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.provinceCode.p, fieldName: "provinceCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pointLat.p, fieldName: "pointLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pointLon.p, fieldName: "pointLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lineNelon.p, fieldName: "lineNelon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lineNelat.p, fieldName: "lineNelat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lineSwlon.p, fieldName: "lineSwlon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lineSwlat.p, fieldName: "lineSwlat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.segStartPoint.p, fieldName: "segStartPoint", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.segEndPoint.p, fieldName: "segEndPoint", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.segNum.p, fieldName: "segNum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.facc.p, fieldName: "facc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.featureCode.p, fieldName: "featureCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.featureType.p, fieldName: "featureType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.featureName.p, fieldName: "featureName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.featureDescription.p, fieldName: "featureDescription", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.wac.p, fieldName: "wac", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.wacInnr.p, fieldName: "wacInnr", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.multObs.p, fieldName: "multObs", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numObs.p, fieldName: "numObs", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.horizDatumCode.p, fieldName: "horizDatumCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.heightAgl.p, fieldName: "heightAgl", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.heightAglacc.p, fieldName: "heightAglacc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.heightMsl.p, fieldName: "heightMsl", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.heightMslacc.p, fieldName: "heightMslacc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevationAcc.p, fieldName: "elevationAcc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.horizAcc.p, fieldName: "horizAcc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.quality.p, fieldName: "quality", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lightingCode.p, fieldName: "lightingCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.surfaceMatCode.p, fieldName: "surfaceMatCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.directivityCode.p, fieldName: "directivityCode", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.validationCode.p, fieldName: "validationCode", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.transactionCode.p, fieldName: "transactionCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.processCode.p, fieldName: "processCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.actDelCode.p, fieldName: "actDelCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.producer.p, fieldName: "producer", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.derivingOrg.p, fieldName: "derivingOrg", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.deletingOrg.p, fieldName: "deletingOrg", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDate.p, fieldName: "sourceDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.revDate.p, fieldName: "revDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.initRecordDate.p, fieldName: "initRecordDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.keys.p, fieldName: "keys", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.values.p, fieldName: "values", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.obstacleRemarks.p, fieldName: "obstacleRemarks", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.nextCycleDate.p, fieldName: "nextCycleDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.baselineCutoffDate.p, fieldName: "baselineCutoffDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cutoffDate.p, fieldName: "cutoffDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.airacCycle.p, fieldName: "airacCycle", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.baseAiracCycle.p, fieldName: "baseAiracCycle", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.ownerCountryCode.p, fieldName: "ownerCountryCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.boundNelon.p, fieldName: "boundNelon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.boundNelat.p, fieldName: "boundNelat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.boundSwlon.p, fieldName: "boundSwlon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.boundSwlat.p, fieldName: "boundSwlat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.minHeightAgl.p, fieldName: "minHeightAgl", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.numPoints.p, fieldName: "numPoints", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numLines.p, fieldName: "numLines", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.dataSetRemarks.p, fieldName: "dataSetRemarks", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pointsFilename.p, fieldName: "pointsFilename", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.linesFilename.p, fieldName: "linesFilename", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.vectorsFilename.p, fieldName: "vectorsFilename", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rawFileUri.p, fieldName: "rawFileUri", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: NavigationalObstruction_Abridged_dataMode_Enum.self)
    _v.finish()
  }
}

