// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
public struct MtiDwell_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "MTID" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: MtiDwell_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case d2 = 4
    case d3 = 6
    case d4 = 8
    case d5 = 10
    case d6 = 12
    case d7 = 14
    case d8 = 16
    case d9 = 18
    case d10 = 20
    case d11 = 22
    case d12 = 24
    case d13 = 26
    case d14 = 28
    case d15 = 30
    case d16 = 32
    case d17 = 34
    case d18 = 36
    case d19 = 38
    case d20 = 40
    case d21 = 42
    case d22 = 44
    case d23 = 46
    case d24 = 48
    case d25 = 50
    case d26 = 52
    case d27 = 54
    case d28 = 56
    case d29 = 58
    case d30 = 60
    case d31 = 62
    case d32 = 64
    case dwellts = 66
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Sequential count of a revisit of the bounding area in the last sent Job Definition Segment, where a Revisit Index of '0' indicates the first revisit.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var d2: Int32 { let o = _accessor.offset(VTOFFSET.d2.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Temporally sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var d3: Int32 { let o = _accessor.offset(VTOFFSET.d3.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Flag indicating the last dwell of the revisit.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var d4: Bool { let o = _accessor.offset(VTOFFSET.d4.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Count of the total number of targets reported during this dwell and sent in this Dwell Segment.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var d5: Int32 { let o = _accessor.offset(VTOFFSET.d5.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields (missionRefTime) of the Mission Segment.
  ///  Example: /// Example: 1234567890
  ///  Constraints: No constraints specified.
  public var d6: Int64 { let o = _accessor.offset(VTOFFSET.d6.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  ///  North-South position of the sensor at the temporal center of the dwell, in degrees.
  ///  Example: /// Example: 1.2
  ///  Constraints: No constraints specified.
  public var d7: Double { let o = _accessor.offset(VTOFFSET.d7.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The East-West position of the sensor at the temporal center of the dwell, in degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var d8: Double { let o = _accessor.offset(VTOFFSET.d8.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The altitude of the sensor at temporal center of the dwell, above the WGS 84 ellipsoid, expressed in centimeters.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var d9: Int32 { let o = _accessor.offset(VTOFFSET.d9.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Factor which modifies the value of the reported target latitude (Delta Latitude, field D32.4).
  ///  Example: /// Example: 1.2
  ///  Constraints: No constraints specified.
  public var d10: Double { let o = _accessor.offset(VTOFFSET.d10.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Factor which modifies the value of the reported target longitude (Delta Longitude, field D32.5).
  ///  Example: /// Example: 1.2
  ///  Constraints: No constraints specified.
  public var d11: Double { let o = _accessor.offset(VTOFFSET.d11.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured along the sensor track direction (field D15), in centimeters.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var d12: Int32 { let o = _accessor.offset(VTOFFSET.d12.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured orthogonal to the sensor track direction (field D15), in centimeters.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var d13: Int32 { let o = _accessor.offset(VTOFFSET.d13.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Standard deviation of the sensor altitude estimate (field D9), in centimeters.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var d14: Int32 { let o = _accessor.offset(VTOFFSET.d14.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Ground track of the sensor at the time of the dwell, as the angle in degrees (clockwise) from True North.
  ///  Example: /// Example: 1.2
  ///  Constraints: No constraints specified.
  public var d15: Double { let o = _accessor.offset(VTOFFSET.d15.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Ground speed of the sensor at the time of the dwell, in millimeters per second.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var d16: Int32 { let o = _accessor.offset(VTOFFSET.d16.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Velocity of the sensor in the vertical direction, in decimeters per second.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var d17: Int32 { let o = _accessor.offset(VTOFFSET.d17.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Standard deviation of the estimate of the sensor track, in degrees.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var d18: Int32 { let o = _accessor.offset(VTOFFSET.d18.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Standard deviation of estimate of the sensor speed, in millimeters per second.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var d19: Int32 { let o = _accessor.offset(VTOFFSET.d19.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Standard deviation of estimate of the sensor vertical velocity, expressed in centimeters per second.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var d20: Int32 { let o = _accessor.offset(VTOFFSET.d20.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Heading of the platform at the time of the dwell, as the angle in degrees (clockwise) from True North to the roll axis of the platform.
  ///  Example: /// Example: 1.2
  ///  Constraints: No constraints specified.
  public var d21: Double { let o = _accessor.offset(VTOFFSET.d21.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Pitch angle of the platform at the time of the dwell, in degrees.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  public var d22: Double { let o = _accessor.offset(VTOFFSET.d22.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Roll angle of the platform at the time of the dwell, in degrees.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  public var d23: Double { let o = _accessor.offset(VTOFFSET.d23.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The North-South position of the center of the dwell area, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  public var d24: Double { let o = _accessor.offset(VTOFFSET.d24.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The East-West position of the center of the dwell area, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  public var d25: Double { let o = _accessor.offset(VTOFFSET.d25.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Distance on the earth surface, expressed in kilometers, from the near edge to the center of the dwell area.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  public var d26: Double { let o = _accessor.offset(VTOFFSET.d26.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  For dwell based radars, one-half of the 3-dB beamwidth.  For non-dwell based radars, the angle between the beginning of the dwell to the center of the dwell.  Measured in degrees.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  public var d27: Double { let o = _accessor.offset(VTOFFSET.d27.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Rotation of the sensor broadside face about the local vertical axis of the platform, in degrees.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  public var d28: Double { let o = _accessor.offset(VTOFFSET.d28.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  public var d29: Double { let o = _accessor.offset(VTOFFSET.d29.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
  ///  Example: /// Example: 12.23
  ///  Constraints: No constraints specified.
  public var d30: Double { let o = _accessor.offset(VTOFFSET.d30.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var d31: Int32 { let o = _accessor.offset(VTOFFSET.d31.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasD32: Bool { let o = _accessor.offset(VTOFFSET.d32.v); return o == 0 ? false : true }
  public var d32Count: Int32 { let o = _accessor.offset(VTOFFSET.d32.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func d32(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.d32.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Dwell timestamp in ISO8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var dwellts: String? { let o = _accessor.offset(VTOFFSET.dwellts.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dwelltsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dwellts.v) }
  public static func startMtiDwell_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 32) }
  public static func add(d2: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d2, def: 0, at: VTOFFSET.d2.p) }
  public static func add(d3: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d3, def: 0, at: VTOFFSET.d3.p) }
  public static func add(d4: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d4, def: false,
   at: VTOFFSET.d4.p) }
  public static func add(d5: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d5, def: 0, at: VTOFFSET.d5.p) }
  public static func add(d6: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d6, def: 0, at: VTOFFSET.d6.p) }
  public static func add(d7: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d7, def: 0.0, at: VTOFFSET.d7.p) }
  public static func add(d8: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d8, def: 0.0, at: VTOFFSET.d8.p) }
  public static func add(d9: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d9, def: 0, at: VTOFFSET.d9.p) }
  public static func add(d10: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d10, def: 0.0, at: VTOFFSET.d10.p) }
  public static func add(d11: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d11, def: 0.0, at: VTOFFSET.d11.p) }
  public static func add(d12: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d12, def: 0, at: VTOFFSET.d12.p) }
  public static func add(d13: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d13, def: 0, at: VTOFFSET.d13.p) }
  public static func add(d14: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d14, def: 0, at: VTOFFSET.d14.p) }
  public static func add(d15: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d15, def: 0.0, at: VTOFFSET.d15.p) }
  public static func add(d16: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d16, def: 0, at: VTOFFSET.d16.p) }
  public static func add(d17: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d17, def: 0, at: VTOFFSET.d17.p) }
  public static func add(d18: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d18, def: 0, at: VTOFFSET.d18.p) }
  public static func add(d19: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d19, def: 0, at: VTOFFSET.d19.p) }
  public static func add(d20: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d20, def: 0, at: VTOFFSET.d20.p) }
  public static func add(d21: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d21, def: 0.0, at: VTOFFSET.d21.p) }
  public static func add(d22: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d22, def: 0.0, at: VTOFFSET.d22.p) }
  public static func add(d23: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d23, def: 0.0, at: VTOFFSET.d23.p) }
  public static func add(d24: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d24, def: 0.0, at: VTOFFSET.d24.p) }
  public static func add(d25: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d25, def: 0.0, at: VTOFFSET.d25.p) }
  public static func add(d26: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d26, def: 0.0, at: VTOFFSET.d26.p) }
  public static func add(d27: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d27, def: 0.0, at: VTOFFSET.d27.p) }
  public static func add(d28: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d28, def: 0.0, at: VTOFFSET.d28.p) }
  public static func add(d29: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d29, def: 0.0, at: VTOFFSET.d29.p) }
  public static func add(d30: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d30, def: 0.0, at: VTOFFSET.d30.p) }
  public static func add(d31: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: d31, def: 0, at: VTOFFSET.d31.p) }
  public static func addVectorOf(d32: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: d32, at: VTOFFSET.d32.p) }
  public static func add(dwellts: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dwellts, at: VTOFFSET.dwellts.p) }
  public static func endMtiDwell_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMtiDwell_Abridged(
    _ fbb: inout FlatBufferBuilder,
    d2: Int32 = 0,
    d3: Int32 = 0,
    d4: Bool = false,
    d5: Int32 = 0,
    d6: Int64 = 0,
    d7: Double = 0.0,
    d8: Double = 0.0,
    d9: Int32 = 0,
    d10: Double = 0.0,
    d11: Double = 0.0,
    d12: Int32 = 0,
    d13: Int32 = 0,
    d14: Int32 = 0,
    d15: Double = 0.0,
    d16: Int32 = 0,
    d17: Int32 = 0,
    d18: Int32 = 0,
    d19: Int32 = 0,
    d20: Int32 = 0,
    d21: Double = 0.0,
    d22: Double = 0.0,
    d23: Double = 0.0,
    d24: Double = 0.0,
    d25: Double = 0.0,
    d26: Double = 0.0,
    d27: Double = 0.0,
    d28: Double = 0.0,
    d29: Double = 0.0,
    d30: Double = 0.0,
    d31: Int32 = 0,
    d32VectorOffset d32: Offset = Offset(),
    dwelltsOffset dwellts: Offset = Offset()
  ) -> Offset {
    let __start = MtiDwell_Abridged.startMtiDwell_Abridged(&fbb)
    MtiDwell_Abridged.add(d2: d2, &fbb)
    MtiDwell_Abridged.add(d3: d3, &fbb)
    MtiDwell_Abridged.add(d4: d4, &fbb)
    MtiDwell_Abridged.add(d5: d5, &fbb)
    MtiDwell_Abridged.add(d6: d6, &fbb)
    MtiDwell_Abridged.add(d7: d7, &fbb)
    MtiDwell_Abridged.add(d8: d8, &fbb)
    MtiDwell_Abridged.add(d9: d9, &fbb)
    MtiDwell_Abridged.add(d10: d10, &fbb)
    MtiDwell_Abridged.add(d11: d11, &fbb)
    MtiDwell_Abridged.add(d12: d12, &fbb)
    MtiDwell_Abridged.add(d13: d13, &fbb)
    MtiDwell_Abridged.add(d14: d14, &fbb)
    MtiDwell_Abridged.add(d15: d15, &fbb)
    MtiDwell_Abridged.add(d16: d16, &fbb)
    MtiDwell_Abridged.add(d17: d17, &fbb)
    MtiDwell_Abridged.add(d18: d18, &fbb)
    MtiDwell_Abridged.add(d19: d19, &fbb)
    MtiDwell_Abridged.add(d20: d20, &fbb)
    MtiDwell_Abridged.add(d21: d21, &fbb)
    MtiDwell_Abridged.add(d22: d22, &fbb)
    MtiDwell_Abridged.add(d23: d23, &fbb)
    MtiDwell_Abridged.add(d24: d24, &fbb)
    MtiDwell_Abridged.add(d25: d25, &fbb)
    MtiDwell_Abridged.add(d26: d26, &fbb)
    MtiDwell_Abridged.add(d27: d27, &fbb)
    MtiDwell_Abridged.add(d28: d28, &fbb)
    MtiDwell_Abridged.add(d29: d29, &fbb)
    MtiDwell_Abridged.add(d30: d30, &fbb)
    MtiDwell_Abridged.add(d31: d31, &fbb)
    MtiDwell_Abridged.addVectorOf(d32: d32, &fbb)
    MtiDwell_Abridged.add(dwellts: dwellts, &fbb)
    return MtiDwell_Abridged.endMtiDwell_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.d2.p, fieldName: "d2", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d3.p, fieldName: "d3", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d4.p, fieldName: "d4", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.d5.p, fieldName: "d5", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d6.p, fieldName: "d6", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.d7.p, fieldName: "d7", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d8.p, fieldName: "d8", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d9.p, fieldName: "d9", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d10.p, fieldName: "d10", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d11.p, fieldName: "d11", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d12.p, fieldName: "d12", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d13.p, fieldName: "d13", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d14.p, fieldName: "d14", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d15.p, fieldName: "d15", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d16.p, fieldName: "d16", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d17.p, fieldName: "d17", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d18.p, fieldName: "d18", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d19.p, fieldName: "d19", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d20.p, fieldName: "d20", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d21.p, fieldName: "d21", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d22.p, fieldName: "d22", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d23.p, fieldName: "d23", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d24.p, fieldName: "d24", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d25.p, fieldName: "d25", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d26.p, fieldName: "d26", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d27.p, fieldName: "d27", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d28.p, fieldName: "d28", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d29.p, fieldName: "d29", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d30.p, fieldName: "d30", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.d31.p, fieldName: "d31", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.d32.p, fieldName: "d32", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.dwellts.p, fieldName: "dwellts", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

