// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum DataLink_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: DataLink_Full_dataMode_Enum { return .exercise }
  public static var min: DataLink_Full_dataMode_Enum { return .real }
}


///  /// Beta Version DataLink: Detailed instructions regarding the operations of data links.
public struct DataLink_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "DATA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: DataLink_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case opExName = 8
    case originator = 10
    case startTime = 12
    case stopTime = 14
    case stopTimeMod = 16
    case planOrigNum = 18
    case opExInfo = 20
    case opExInfoAlt = 22
    case serialNum = 24
    case month = 26
    case qualifier = 28
    case qualSn = 30
    case references = 32
    case canxId = 34
    case canxOriginator = 36
    case canxTs = 38
    case canxSerialNum = 40
    case canxSpecialNotation = 42
    case canxSics = 44
    case pocName = 46
    case pocRank = 48
    case pocCallSign = 50
    case pocLocName = 52
    case pocLat = 54
    case pocLon = 56
    case pocNums = 58
    case geoDatum = 60
    case refPoints = 62
    case voiceCoord = 64
    case sysDefaultCode = 66
    case winSizeMult = 68
    case winSizeMin = 70
    case minTrackQual = 72
    case maxTrackQual = 74
    case resTrackQual = 76
    case courseDiff = 78
    case speedDiff = 80
    case altDiff = 82
    case minGeoPosQual = 84
    case maxGeoPosQual = 86
    case decorrWinMult = 88
    case consecDecorr = 90
    case multiDuty = 92
    case ops = 94
    case jreUnitDes = 96
    case jreCallSign = 98
    case jrePriAdd = 100
    case jreSecAdd = 102
    case jreDetails = 104
    case specTracks = 106
    case nonLinkUnitDes = 108
    case trackNumBlockLls = 110
    case trackNumBlocks = 112
    case mgmtCode = 114
    case mgmtCodeMeaning = 116
    case ackReq = 118
    case ackInstUnits = 120
    case classSource = 122
    case classReasons = 124
    case decInstDates = 126
    case decExemptCodes = 128
    case remarks = 130
    case rawFileUri = 132
    case createdAt = 134
    case createdBy = 136
    case updatedAt = 138
    case updatedBy = 140
    case sourceDl = 142
    case source = 144
    case origin = 146
    case origNetwork = 148
    case dataMode = 150
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
  ///  Example: /// Example: DESERT WIND
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var opExName: String? { let o = _accessor.offset(VTOFFSET.opExName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var opExNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.opExName.v) }
  ///  The identifier of the originator of this message.
  ///  Example: /// Example: USCENTCOM
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var originator: String? { let o = _accessor.offset(VTOFFSET.originator.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originatorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.originator.v) }
  ///  The start of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-07T13:55:43.123Z
  ///  Constraints: No constraints specified.
  public var startTime: String? { let o = _accessor.offset(VTOFFSET.startTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.startTime.v) }
  ///  The end of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision. This may be a relative stop time if used with stopTimeMod.
  ///  Example: /// Example: 2024-01-08T13:55:43.123Z
  ///  Constraints: No constraints specified.
  public var stopTime: String? { let o = _accessor.offset(VTOFFSET.stopTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var stopTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.stopTime.v) }
  ///  A qualifier for the end of the effective time period of this data link message, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
  ///  Example: /// Example: AFTER
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var stopTimeMod: String? { let o = _accessor.offset(VTOFFSET.stopTimeMod.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var stopTimeModSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.stopTimeMod.v) }
  ///  The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
  ///  Example: /// Example: SACEUR 106
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var planOrigNum: String? { let o = _accessor.offset(VTOFFSET.planOrigNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var planOrigNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.planOrigNum.v) }
  ///  Provides an additional caveat further identifying the exercise or modifies the exercise nickname.
  ///  Example: /// Example: CONTROL
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var opExInfo: String? { let o = _accessor.offset(VTOFFSET.opExInfo.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var opExInfoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.opExInfo.v) }
  ///  The secondary nickname of the option or the alternative of the operational plan or order.
  ///  Example: /// Example: ORANGE
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var opExInfoAlt: String? { let o = _accessor.offset(VTOFFSET.opExInfoAlt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var opExInfoAltSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.opExInfoAlt.v) }
  ///  The unique message identifier assigned by the originator.
  ///  Example: /// Example: 1201003
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var serialNum: String? { let o = _accessor.offset(VTOFFSET.serialNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var serialNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.serialNum.v) }
  ///  The month in which this message originated.
  ///  Example: /// Example: OCT
  ///  Constraints: Minimum length = 0, Maximum length = 12
  public var month: String? { let o = _accessor.offset(VTOFFSET.month.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var monthSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.month.v) }
  ///  The qualifier which caveats the message status such as AMP (Amplification), CHG (Change), etc.
  ///  Example: /// Example: CHG
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var qualifier: String? { let o = _accessor.offset(VTOFFSET.qualifier.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var qualifierSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.qualifier.v) }
  ///  The serial number associated with the message qualifier.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var qualSn: Int32 { let o = _accessor.offset(VTOFFSET.qualSn.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasReferences: Bool { let o = _accessor.offset(VTOFFSET.references.v); return o == 0 ? false : true }
  public var referencesCount: Int32 { let o = _accessor.offset(VTOFFSET.references.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func references(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.references.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The identifier for this data link message cancellation.
  ///  Example: /// Example: ABSTAT
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var canxId: String? { let o = _accessor.offset(VTOFFSET.canxId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var canxIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.canxId.v) }
  ///  The originator of this data link message cancellation.
  ///  Example: /// Example: 505 AOC
  ///  Constraints: Minimum length = 0, Maximum length = 30
  public var canxOriginator: String? { let o = _accessor.offset(VTOFFSET.canxOriginator.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var canxOriginatorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.canxOriginator.v) }
  ///  Timestamp of the data link message cancellation, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-07T13:55:43.123Z
  ///  Constraints: No constraints specified.
  public var canxTs: String? { let o = _accessor.offset(VTOFFSET.canxTs.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var canxTsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.canxTs.v) }
  ///  Serial number assigned to this data link message cancellation.
  ///  Example: /// Example: ABC1234567
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var canxSerialNum: String? { let o = _accessor.offset(VTOFFSET.canxSerialNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var canxSerialNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.canxSerialNum.v) }
  ///  Indicates any special actions, restrictions, guidance, or information relating to this data link message cancellation.
  ///  Example: /// Example: PASEP
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var canxSpecialNotation: String? { let o = _accessor.offset(VTOFFSET.canxSpecialNotation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var canxSpecialNotationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.canxSpecialNotation.v) }
  ///  Array of NATO Subject Indicator Codes (SIC) or filing numbers of this data link message or document being cancelled.
  ///  Example: /// Example: ['RDU', 'X234BS']
  ///  Constraints: No constraints specified.
  public var hasCanxSics: Bool { let o = _accessor.offset(VTOFFSET.canxSics.v); return o == 0 ? false : true }
  public var canxSicsCount: Int32 { let o = _accessor.offset(VTOFFSET.canxSics.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func canxSics(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.canxSics.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The name of the point of contact for this data link message.
  ///  Example: /// Example: F. BURNS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var pocName: String? { let o = _accessor.offset(VTOFFSET.pocName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pocNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pocName.v) }
  ///  The rank or position of the point of contact for this data link message in a military or civilian organization.
  ///  Example: /// Example: MAJ
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var pocRank: String? { let o = _accessor.offset(VTOFFSET.pocRank.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pocRankSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pocRank.v) }
  ///  The unit identifier or call sign of the point of contact for this data link message.
  ///  Example: /// Example: 4077 MASH
  ///  Constraints: Minimum length = 0, Maximum length = 38
  public var pocCallSign: String? { let o = _accessor.offset(VTOFFSET.pocCallSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pocCallSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pocCallSign.v) }
  ///  The location name of the point of contact for this data link message.
  ///  Example: /// Example: CAMP SWAMPY
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var pocLocName: String? { let o = _accessor.offset(VTOFFSET.pocLocName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pocLocNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pocLocName.v) }
  ///  WGS84 latitude of the point of contact for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var pocLat: Double { let o = _accessor.offset(VTOFFSET.pocLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS84 longitude of the point of contact for this data link message, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  public var pocLon: Double { let o = _accessor.offset(VTOFFSET.pocLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Array of telephone numbers, radio frequency values, or email addresses of the point of contact for this data link message.
  ///  Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
  ///  Constraints: No constraints specified.
  public var hasPocNums: Bool { let o = _accessor.offset(VTOFFSET.pocNums.v); return o == 0 ? false : true }
  public var pocNumsCount: Int32 { let o = _accessor.offset(VTOFFSET.pocNums.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func pocNums(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.pocNums.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The code for the point of reference from which the coordinates and networks are computed.
  ///  Example: /// Example: EUR-T
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var geoDatum: String? { let o = _accessor.offset(VTOFFSET.geoDatum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var geoDatumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.geoDatum.v) }
  ///  Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasRefPoints: Bool { let o = _accessor.offset(VTOFFSET.refPoints.v); return o == 0 ? false : true }
  public var refPointsCount: Int32 { let o = _accessor.offset(VTOFFSET.refPoints.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func refPoints(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.refPoints.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasVoiceCoord: Bool { let o = _accessor.offset(VTOFFSET.voiceCoord.v); return o == 0 ? false : true }
  public var voiceCoordCount: Int32 { let o = _accessor.offset(VTOFFSET.voiceCoord.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func voiceCoord(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.voiceCoord.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Indicates the data terminal settings the system defaults to, either automatic correlation/decorrelation (AUTO) or manual (MAN).
  ///  Example: /// Example: MAN
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var sysDefaultCode: String? { let o = _accessor.offset(VTOFFSET.sysDefaultCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sysDefaultCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sysDefaultCode.v) }
  ///  The correlation window size multiplier to stretch or reduce the window size. Required if sysDefaultCode field is "MAN". Allowable entries are 0.5 to 3.0 in increments of 0.1.
  ///  Example: /// Example: 2.1
  ///  Constraints: No constraints specified.
  public var winSizeMult: Double { let o = _accessor.offset(VTOFFSET.winSizeMult.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Number added to the basic window calculated from track qualities to ensure that windows still allow valid correlations. Required if sysDefaultCode field is "MAN". Allowable entries are 0.0 to 2.0 in increments of 0.25.
  ///  Example: /// Example: 1.25
  ///  Constraints: No constraints specified.
  public var winSizeMin: Double { let o = _accessor.offset(VTOFFSET.winSizeMin.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Track quality to prevent correlation windows from being unrealistically large. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 3 to 7.
  ///  Example: /// Example: 6
  ///  Constraints: No constraints specified.
  public var minTrackQual: Int32 { let o = _accessor.offset(VTOFFSET.minTrackQual.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Track quality to prevent correlation windows from being unrealistically small. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 8 to 15.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var maxTrackQual: Int32 { let o = _accessor.offset(VTOFFSET.maxTrackQual.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Track quality to enter if too many duals involving low track quality tracks are occurring. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 2 to 6.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var resTrackQual: Int32 { let o = _accessor.offset(VTOFFSET.resTrackQual.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Maximum difference between the reported course of the remote track and the calculated course of the local track. Required if sysDefaultCode field is "MAN". Allowable entries are 15 to 90 in increments of 15 degrees.
  ///  Example: /// Example: 60
  ///  Constraints: No constraints specified.
  public var courseDiff: Int32 { let o = _accessor.offset(VTOFFSET.courseDiff.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Maximum percentage the faster track speed may differ from the slower track speed. Required if sysDefaultCode field is "MAN". Allowable entries are 10 to 100 in increments of 10.
  ///  Example: /// Example: 50
  ///  Constraints: No constraints specified.
  public var speedDiff: Int32 { let o = _accessor.offset(VTOFFSET.speedDiff.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Maximum altitude difference between two air tracks, in thousands of feet. Required if sysDefaultCode field is "MAN". Allowable entires are 5 to 50 in increments of 5000 feet.
  ///  Example: /// Example: 20
  ///  Constraints: No constraints specified.
  public var altDiff: Int32 { let o = _accessor.offset(VTOFFSET.altDiff.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number used for minimum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var minGeoPosQual: Int32 { let o = _accessor.offset(VTOFFSET.minGeoPosQual.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number used for maximum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entires are integers from 1 to 15.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var maxGeoPosQual: Int32 { let o = _accessor.offset(VTOFFSET.maxGeoPosQual.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Distance between the common and remote track is to exceed the applicable correlation window for the two tracks in order to be decorrelated. Required if sysDefaultCode field is "MAN". Allowable entries are 1.0 to 2.0 in increments of 0.1.
  ///  Example: /// Example: 1.7
  ///  Constraints: No constraints specified.
  public var decorrWinMult: Double { let o = _accessor.offset(VTOFFSET.decorrWinMult.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Number of consecutive remote track reports that must meet the decorrelation criteria before the decorrelation is executed. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var consecDecorr: Int32 { let o = _accessor.offset(VTOFFSET.consecDecorr.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasMultiDuty: Bool { let o = _accessor.offset(VTOFFSET.multiDuty.v); return o == 0 ? false : true }
  public var multiDutyCount: Int32 { let o = _accessor.offset(VTOFFSET.multiDuty.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func multiDuty(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.multiDuty.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasOps: Bool { let o = _accessor.offset(VTOFFSET.ops.v); return o == 0 ? false : true }
  public var opsCount: Int32 { let o = _accessor.offset(VTOFFSET.ops.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func ops(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.ops.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Designator of the unit for Joint Range Extension (JRE).
  ///  Example: /// Example: CVN-72
  ///  Constraints: Minimum length = 0, Maximum length = 30
  public var jreUnitDes: String? { let o = _accessor.offset(VTOFFSET.jreUnitDes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var jreUnitDesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.jreUnitDes.v) }
  ///  Call sign which identifies one or more communications facilities, commands, authorities, or activities for Joint Range Extension (JRE) units.
  ///  Example: /// Example: CHARLIE ONE
  ///  Constraints: Minimum length = 0, Maximum length = 38
  public var jreCallSign: String? { let o = _accessor.offset(VTOFFSET.jreCallSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var jreCallSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.jreCallSign.v) }
  ///  Link-16 octal track number assigned as the primary JTIDS unit address.
  ///  Example: /// Example: 71777
  ///  Constraints: No constraints specified.
  public var jrePriAdd: Int32 { let o = _accessor.offset(VTOFFSET.jrePriAdd.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Link-16 octal track number assigned as the secondary JTIDS unit address.
  ///  Example: /// Example: 77771
  ///  Constraints: No constraints specified.
  public var jreSecAdd: Int32 { let o = _accessor.offset(VTOFFSET.jreSecAdd.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Joint Range Extension (JRE) unit details.
  ///  Example: /// Example: JRE details
  ///  Constraints: Minimum length = 0, Maximum length = 3000
  public var jreDetails: String? { let o = _accessor.offset(VTOFFSET.jreDetails.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var jreDetailsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.jreDetails.v) }
  ///  Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasSpecTracks: Bool { let o = _accessor.offset(VTOFFSET.specTracks.v); return o == 0 ? false : true }
  public var specTracksCount: Int32 { let o = _accessor.offset(VTOFFSET.specTracks.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func specTracks(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.specTracks.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of non-link specific data unit designators.
  ///  Example: /// Example: ['CS:GRAY GHOST', 'CS:WHITE WHALE']
  ///  Constraints: No constraints specified.
  public var hasNonLinkUnitDes: Bool { let o = _accessor.offset(VTOFFSET.nonLinkUnitDes.v); return o == 0 ? false : true }
  public var nonLinkUnitDesCount: Int32 { let o = _accessor.offset(VTOFFSET.nonLinkUnitDes.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func nonLinkUnitDes(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.nonLinkUnitDes.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of Link-16 octal track numbers used as the lower limit of a track block.
  ///  Example: /// Example: [1234, 2345]
  ///  Constraints: No constraints specified.
  public var hasTrackNumBlockLls: Bool { let o = _accessor.offset(VTOFFSET.trackNumBlockLls.v); return o == 0 ? false : true }
  public var trackNumBlockLlsCount: Int32 { let o = _accessor.offset(VTOFFSET.trackNumBlockLls.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func trackNumBlockLls(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.trackNumBlockLls.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of defined ranges of Link-11/11B track numbers assigned to a participating unit or reporting unit.
  ///  Example: /// Example: ['0200-0300', '0400-4412']
  ///  Constraints: No constraints specified.
  public var hasTrackNumBlocks: Bool { let o = _accessor.offset(VTOFFSET.trackNumBlocks.v); return o == 0 ? false : true }
  public var trackNumBlocksCount: Int32 { let o = _accessor.offset(VTOFFSET.trackNumBlocks.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func trackNumBlocks(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.trackNumBlocks.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Data link management code word.
  ///  Example: /// Example: VICTOR
  ///  Constraints: Minimum length = 0, Maximum length = 15
  public var mgmtCode: String? { let o = _accessor.offset(VTOFFSET.mgmtCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var mgmtCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.mgmtCode.v) }
  ///  Data link management code word meaning.
  ///  Example: /// Example: ORBIT AT POINT BRAVO
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var mgmtCodeMeaning: String? { let o = _accessor.offset(VTOFFSET.mgmtCodeMeaning.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var mgmtCodeMeaningSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.mgmtCodeMeaning.v) }
  ///  Flag Indicating if formal acknowledgement is required for the particular data link message being sent.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var ackReq: Bool { let o = _accessor.offset(VTOFFSET.ackReq.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Array of instructions for acknowledging and the force or units required to acknowledge the data link message being sent.
  ///  Example: /// Example: ['AOC EXT 2345', '317 AW']
  ///  Constraints: No constraints specified.
  public var hasAckInstUnits: Bool { let o = _accessor.offset(VTOFFSET.ackInstUnits.v); return o == 0 ? false : true }
  public var ackInstUnitsCount: Int32 { let o = _accessor.offset(VTOFFSET.ackInstUnits.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func ackInstUnits(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.ackInstUnits.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Markings that define the source material or the original classification authority for this data link message.
  ///  Example: /// Example: USJFCOM EXORD SOLID WASTE 98
  ///  Constraints: Minimum length = 0, Maximum length = 55
  public var classSource: String? { let o = _accessor.offset(VTOFFSET.classSource.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classSourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classSource.v) }
  ///  Array of codes that indicate the reasons material is classified.
  ///  Example: /// Example: ['15C', '15D']
  ///  Constraints: No constraints specified.
  public var hasClassReasons: Bool { let o = _accessor.offset(VTOFFSET.classReasons.v); return o == 0 ? false : true }
  public var classReasonsCount: Int32 { let o = _accessor.offset(VTOFFSET.classReasons.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func classReasons(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.classReasons.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of markings that provide the literal guidance or dates for the downgrading or declassification of this data link message.
  ///  Example: /// Example: ['AT EXERCISE ENDEX', 'DATE:25NOV1997']
  ///  Constraints: No constraints specified.
  public var hasDecInstDates: Bool { let o = _accessor.offset(VTOFFSET.decInstDates.v); return o == 0 ? false : true }
  public var decInstDatesCount: Int32 { let o = _accessor.offset(VTOFFSET.decInstDates.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func decInstDates(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.decInstDates.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of codes that provide justification for exemption from automatic downgrading or declassification.
  ///  Example: /// Example: ['X1', 'X2']
  ///  Constraints: No constraints specified.
  public var hasDecExemptCodes: Bool { let o = _accessor.offset(VTOFFSET.decExemptCodes.v); return o == 0 ? false : true }
  public var decExemptCodesCount: Int32 { let o = _accessor.offset(VTOFFSET.decExemptCodes.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func decExemptCodes(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.decExemptCodes.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Collection of remarks associated with this data link message.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasRemarks: Bool { let o = _accessor.offset(VTOFFSET.remarks.v); return o == 0 ? false : true }
  public var remarksCount: Int32 { let o = _accessor.offset(VTOFFSET.remarks.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func remarks(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.remarks.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var rawFileUri: String? { let o = _accessor.offset(VTOFFSET.rawFileUri.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rawFileUriSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rawFileUri.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: DataLink_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : DataLink_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startDataLink_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 74) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(opExName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: opExName, at: VTOFFSET.opExName.p) }
  public static func add(originator: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: originator, at: VTOFFSET.originator.p) }
  public static func add(startTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: startTime, at: VTOFFSET.startTime.p) }
  public static func add(stopTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: stopTime, at: VTOFFSET.stopTime.p) }
  public static func add(stopTimeMod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: stopTimeMod, at: VTOFFSET.stopTimeMod.p) }
  public static func add(planOrigNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: planOrigNum, at: VTOFFSET.planOrigNum.p) }
  public static func add(opExInfo: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: opExInfo, at: VTOFFSET.opExInfo.p) }
  public static func add(opExInfoAlt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: opExInfoAlt, at: VTOFFSET.opExInfoAlt.p) }
  public static func add(serialNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: serialNum, at: VTOFFSET.serialNum.p) }
  public static func add(month: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: month, at: VTOFFSET.month.p) }
  public static func add(qualifier: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: qualifier, at: VTOFFSET.qualifier.p) }
  public static func add(qualSn: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: qualSn, def: 0, at: VTOFFSET.qualSn.p) }
  public static func addVectorOf(references: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: references, at: VTOFFSET.references.p) }
  public static func add(canxId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: canxId, at: VTOFFSET.canxId.p) }
  public static func add(canxOriginator: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: canxOriginator, at: VTOFFSET.canxOriginator.p) }
  public static func add(canxTs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: canxTs, at: VTOFFSET.canxTs.p) }
  public static func add(canxSerialNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: canxSerialNum, at: VTOFFSET.canxSerialNum.p) }
  public static func add(canxSpecialNotation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: canxSpecialNotation, at: VTOFFSET.canxSpecialNotation.p) }
  public static func addVectorOf(canxSics: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: canxSics, at: VTOFFSET.canxSics.p) }
  public static func add(pocName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pocName, at: VTOFFSET.pocName.p) }
  public static func add(pocRank: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pocRank, at: VTOFFSET.pocRank.p) }
  public static func add(pocCallSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pocCallSign, at: VTOFFSET.pocCallSign.p) }
  public static func add(pocLocName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pocLocName, at: VTOFFSET.pocLocName.p) }
  public static func add(pocLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pocLat, def: 0.0, at: VTOFFSET.pocLat.p) }
  public static func add(pocLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pocLon, def: 0.0, at: VTOFFSET.pocLon.p) }
  public static func addVectorOf(pocNums: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pocNums, at: VTOFFSET.pocNums.p) }
  public static func add(geoDatum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geoDatum, at: VTOFFSET.geoDatum.p) }
  public static func addVectorOf(refPoints: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: refPoints, at: VTOFFSET.refPoints.p) }
  public static func addVectorOf(voiceCoord: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: voiceCoord, at: VTOFFSET.voiceCoord.p) }
  public static func add(sysDefaultCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sysDefaultCode, at: VTOFFSET.sysDefaultCode.p) }
  public static func add(winSizeMult: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: winSizeMult, def: 0.0, at: VTOFFSET.winSizeMult.p) }
  public static func add(winSizeMin: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: winSizeMin, def: 0.0, at: VTOFFSET.winSizeMin.p) }
  public static func add(minTrackQual: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: minTrackQual, def: 0, at: VTOFFSET.minTrackQual.p) }
  public static func add(maxTrackQual: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxTrackQual, def: 0, at: VTOFFSET.maxTrackQual.p) }
  public static func add(resTrackQual: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: resTrackQual, def: 0, at: VTOFFSET.resTrackQual.p) }
  public static func add(courseDiff: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: courseDiff, def: 0, at: VTOFFSET.courseDiff.p) }
  public static func add(speedDiff: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: speedDiff, def: 0, at: VTOFFSET.speedDiff.p) }
  public static func add(altDiff: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: altDiff, def: 0, at: VTOFFSET.altDiff.p) }
  public static func add(minGeoPosQual: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: minGeoPosQual, def: 0, at: VTOFFSET.minGeoPosQual.p) }
  public static func add(maxGeoPosQual: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxGeoPosQual, def: 0, at: VTOFFSET.maxGeoPosQual.p) }
  public static func add(decorrWinMult: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: decorrWinMult, def: 0.0, at: VTOFFSET.decorrWinMult.p) }
  public static func add(consecDecorr: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: consecDecorr, def: 0, at: VTOFFSET.consecDecorr.p) }
  public static func addVectorOf(multiDuty: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: multiDuty, at: VTOFFSET.multiDuty.p) }
  public static func addVectorOf(ops: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ops, at: VTOFFSET.ops.p) }
  public static func add(jreUnitDes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: jreUnitDes, at: VTOFFSET.jreUnitDes.p) }
  public static func add(jreCallSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: jreCallSign, at: VTOFFSET.jreCallSign.p) }
  public static func add(jrePriAdd: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: jrePriAdd, def: 0, at: VTOFFSET.jrePriAdd.p) }
  public static func add(jreSecAdd: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: jreSecAdd, def: 0, at: VTOFFSET.jreSecAdd.p) }
  public static func add(jreDetails: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: jreDetails, at: VTOFFSET.jreDetails.p) }
  public static func addVectorOf(specTracks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: specTracks, at: VTOFFSET.specTracks.p) }
  public static func addVectorOf(nonLinkUnitDes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: nonLinkUnitDes, at: VTOFFSET.nonLinkUnitDes.p) }
  public static func addVectorOf(trackNumBlockLls: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trackNumBlockLls, at: VTOFFSET.trackNumBlockLls.p) }
  public static func addVectorOf(trackNumBlocks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trackNumBlocks, at: VTOFFSET.trackNumBlocks.p) }
  public static func add(mgmtCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mgmtCode, at: VTOFFSET.mgmtCode.p) }
  public static func add(mgmtCodeMeaning: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mgmtCodeMeaning, at: VTOFFSET.mgmtCodeMeaning.p) }
  public static func add(ackReq: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ackReq, def: false,
   at: VTOFFSET.ackReq.p) }
  public static func addVectorOf(ackInstUnits: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ackInstUnits, at: VTOFFSET.ackInstUnits.p) }
  public static func add(classSource: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classSource, at: VTOFFSET.classSource.p) }
  public static func addVectorOf(classReasons: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classReasons, at: VTOFFSET.classReasons.p) }
  public static func addVectorOf(decInstDates: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: decInstDates, at: VTOFFSET.decInstDates.p) }
  public static func addVectorOf(decExemptCodes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: decExemptCodes, at: VTOFFSET.decExemptCodes.p) }
  public static func addVectorOf(remarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: remarks, at: VTOFFSET.remarks.p) }
  public static func add(rawFileUri: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rawFileUri, at: VTOFFSET.rawFileUri.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: DataLink_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endDataLink_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createDataLink_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    opExNameOffset opExName: Offset = Offset(),
    originatorOffset originator: Offset = Offset(),
    startTimeOffset startTime: Offset = Offset(),
    stopTimeOffset stopTime: Offset = Offset(),
    stopTimeModOffset stopTimeMod: Offset = Offset(),
    planOrigNumOffset planOrigNum: Offset = Offset(),
    opExInfoOffset opExInfo: Offset = Offset(),
    opExInfoAltOffset opExInfoAlt: Offset = Offset(),
    serialNumOffset serialNum: Offset = Offset(),
    monthOffset month: Offset = Offset(),
    qualifierOffset qualifier: Offset = Offset(),
    qualSn: Int32 = 0,
    referencesVectorOffset references: Offset = Offset(),
    canxIdOffset canxId: Offset = Offset(),
    canxOriginatorOffset canxOriginator: Offset = Offset(),
    canxTsOffset canxTs: Offset = Offset(),
    canxSerialNumOffset canxSerialNum: Offset = Offset(),
    canxSpecialNotationOffset canxSpecialNotation: Offset = Offset(),
    canxSicsVectorOffset canxSics: Offset = Offset(),
    pocNameOffset pocName: Offset = Offset(),
    pocRankOffset pocRank: Offset = Offset(),
    pocCallSignOffset pocCallSign: Offset = Offset(),
    pocLocNameOffset pocLocName: Offset = Offset(),
    pocLat: Double = 0.0,
    pocLon: Double = 0.0,
    pocNumsVectorOffset pocNums: Offset = Offset(),
    geoDatumOffset geoDatum: Offset = Offset(),
    refPointsVectorOffset refPoints: Offset = Offset(),
    voiceCoordVectorOffset voiceCoord: Offset = Offset(),
    sysDefaultCodeOffset sysDefaultCode: Offset = Offset(),
    winSizeMult: Double = 0.0,
    winSizeMin: Double = 0.0,
    minTrackQual: Int32 = 0,
    maxTrackQual: Int32 = 0,
    resTrackQual: Int32 = 0,
    courseDiff: Int32 = 0,
    speedDiff: Int32 = 0,
    altDiff: Int32 = 0,
    minGeoPosQual: Int32 = 0,
    maxGeoPosQual: Int32 = 0,
    decorrWinMult: Double = 0.0,
    consecDecorr: Int32 = 0,
    multiDutyVectorOffset multiDuty: Offset = Offset(),
    opsVectorOffset ops: Offset = Offset(),
    jreUnitDesOffset jreUnitDes: Offset = Offset(),
    jreCallSignOffset jreCallSign: Offset = Offset(),
    jrePriAdd: Int32 = 0,
    jreSecAdd: Int32 = 0,
    jreDetailsOffset jreDetails: Offset = Offset(),
    specTracksVectorOffset specTracks: Offset = Offset(),
    nonLinkUnitDesVectorOffset nonLinkUnitDes: Offset = Offset(),
    trackNumBlockLlsVectorOffset trackNumBlockLls: Offset = Offset(),
    trackNumBlocksVectorOffset trackNumBlocks: Offset = Offset(),
    mgmtCodeOffset mgmtCode: Offset = Offset(),
    mgmtCodeMeaningOffset mgmtCodeMeaning: Offset = Offset(),
    ackReq: Bool = false,
    ackInstUnitsVectorOffset ackInstUnits: Offset = Offset(),
    classSourceOffset classSource: Offset = Offset(),
    classReasonsVectorOffset classReasons: Offset = Offset(),
    decInstDatesVectorOffset decInstDates: Offset = Offset(),
    decExemptCodesVectorOffset decExemptCodes: Offset = Offset(),
    remarksVectorOffset remarks: Offset = Offset(),
    rawFileUriOffset rawFileUri: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: DataLink_Full_dataMode_Enum = .real
  ) -> Offset {
    let __start = DataLink_Full.startDataLink_Full(&fbb)
    DataLink_Full.add(id: id, &fbb)
    DataLink_Full.add(classificationMarking: classificationMarking, &fbb)
    DataLink_Full.add(opExName: opExName, &fbb)
    DataLink_Full.add(originator: originator, &fbb)
    DataLink_Full.add(startTime: startTime, &fbb)
    DataLink_Full.add(stopTime: stopTime, &fbb)
    DataLink_Full.add(stopTimeMod: stopTimeMod, &fbb)
    DataLink_Full.add(planOrigNum: planOrigNum, &fbb)
    DataLink_Full.add(opExInfo: opExInfo, &fbb)
    DataLink_Full.add(opExInfoAlt: opExInfoAlt, &fbb)
    DataLink_Full.add(serialNum: serialNum, &fbb)
    DataLink_Full.add(month: month, &fbb)
    DataLink_Full.add(qualifier: qualifier, &fbb)
    DataLink_Full.add(qualSn: qualSn, &fbb)
    DataLink_Full.addVectorOf(references: references, &fbb)
    DataLink_Full.add(canxId: canxId, &fbb)
    DataLink_Full.add(canxOriginator: canxOriginator, &fbb)
    DataLink_Full.add(canxTs: canxTs, &fbb)
    DataLink_Full.add(canxSerialNum: canxSerialNum, &fbb)
    DataLink_Full.add(canxSpecialNotation: canxSpecialNotation, &fbb)
    DataLink_Full.addVectorOf(canxSics: canxSics, &fbb)
    DataLink_Full.add(pocName: pocName, &fbb)
    DataLink_Full.add(pocRank: pocRank, &fbb)
    DataLink_Full.add(pocCallSign: pocCallSign, &fbb)
    DataLink_Full.add(pocLocName: pocLocName, &fbb)
    DataLink_Full.add(pocLat: pocLat, &fbb)
    DataLink_Full.add(pocLon: pocLon, &fbb)
    DataLink_Full.addVectorOf(pocNums: pocNums, &fbb)
    DataLink_Full.add(geoDatum: geoDatum, &fbb)
    DataLink_Full.addVectorOf(refPoints: refPoints, &fbb)
    DataLink_Full.addVectorOf(voiceCoord: voiceCoord, &fbb)
    DataLink_Full.add(sysDefaultCode: sysDefaultCode, &fbb)
    DataLink_Full.add(winSizeMult: winSizeMult, &fbb)
    DataLink_Full.add(winSizeMin: winSizeMin, &fbb)
    DataLink_Full.add(minTrackQual: minTrackQual, &fbb)
    DataLink_Full.add(maxTrackQual: maxTrackQual, &fbb)
    DataLink_Full.add(resTrackQual: resTrackQual, &fbb)
    DataLink_Full.add(courseDiff: courseDiff, &fbb)
    DataLink_Full.add(speedDiff: speedDiff, &fbb)
    DataLink_Full.add(altDiff: altDiff, &fbb)
    DataLink_Full.add(minGeoPosQual: minGeoPosQual, &fbb)
    DataLink_Full.add(maxGeoPosQual: maxGeoPosQual, &fbb)
    DataLink_Full.add(decorrWinMult: decorrWinMult, &fbb)
    DataLink_Full.add(consecDecorr: consecDecorr, &fbb)
    DataLink_Full.addVectorOf(multiDuty: multiDuty, &fbb)
    DataLink_Full.addVectorOf(ops: ops, &fbb)
    DataLink_Full.add(jreUnitDes: jreUnitDes, &fbb)
    DataLink_Full.add(jreCallSign: jreCallSign, &fbb)
    DataLink_Full.add(jrePriAdd: jrePriAdd, &fbb)
    DataLink_Full.add(jreSecAdd: jreSecAdd, &fbb)
    DataLink_Full.add(jreDetails: jreDetails, &fbb)
    DataLink_Full.addVectorOf(specTracks: specTracks, &fbb)
    DataLink_Full.addVectorOf(nonLinkUnitDes: nonLinkUnitDes, &fbb)
    DataLink_Full.addVectorOf(trackNumBlockLls: trackNumBlockLls, &fbb)
    DataLink_Full.addVectorOf(trackNumBlocks: trackNumBlocks, &fbb)
    DataLink_Full.add(mgmtCode: mgmtCode, &fbb)
    DataLink_Full.add(mgmtCodeMeaning: mgmtCodeMeaning, &fbb)
    DataLink_Full.add(ackReq: ackReq, &fbb)
    DataLink_Full.addVectorOf(ackInstUnits: ackInstUnits, &fbb)
    DataLink_Full.add(classSource: classSource, &fbb)
    DataLink_Full.addVectorOf(classReasons: classReasons, &fbb)
    DataLink_Full.addVectorOf(decInstDates: decInstDates, &fbb)
    DataLink_Full.addVectorOf(decExemptCodes: decExemptCodes, &fbb)
    DataLink_Full.addVectorOf(remarks: remarks, &fbb)
    DataLink_Full.add(rawFileUri: rawFileUri, &fbb)
    DataLink_Full.add(createdAt: createdAt, &fbb)
    DataLink_Full.add(createdBy: createdBy, &fbb)
    DataLink_Full.add(updatedAt: updatedAt, &fbb)
    DataLink_Full.add(updatedBy: updatedBy, &fbb)
    DataLink_Full.add(sourceDl: sourceDl, &fbb)
    DataLink_Full.add(source: source, &fbb)
    DataLink_Full.add(origin: origin, &fbb)
    DataLink_Full.add(origNetwork: origNetwork, &fbb)
    DataLink_Full.add(dataMode: dataMode, &fbb)
    return DataLink_Full.endDataLink_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.opExName.p, fieldName: "opExName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.originator.p, fieldName: "originator", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.startTime.p, fieldName: "startTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.stopTime.p, fieldName: "stopTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.stopTimeMod.p, fieldName: "stopTimeMod", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.planOrigNum.p, fieldName: "planOrigNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.opExInfo.p, fieldName: "opExInfo", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.opExInfoAlt.p, fieldName: "opExInfoAlt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.serialNum.p, fieldName: "serialNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.month.p, fieldName: "month", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.qualifier.p, fieldName: "qualifier", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.qualSn.p, fieldName: "qualSn", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.references.p, fieldName: "references", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.canxId.p, fieldName: "canxId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.canxOriginator.p, fieldName: "canxOriginator", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.canxTs.p, fieldName: "canxTs", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.canxSerialNum.p, fieldName: "canxSerialNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.canxSpecialNotation.p, fieldName: "canxSpecialNotation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.canxSics.p, fieldName: "canxSics", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.pocName.p, fieldName: "pocName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pocRank.p, fieldName: "pocRank", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pocCallSign.p, fieldName: "pocCallSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pocLocName.p, fieldName: "pocLocName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pocLat.p, fieldName: "pocLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pocLon.p, fieldName: "pocLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pocNums.p, fieldName: "pocNums", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.geoDatum.p, fieldName: "geoDatum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.refPoints.p, fieldName: "refPoints", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.voiceCoord.p, fieldName: "voiceCoord", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.sysDefaultCode.p, fieldName: "sysDefaultCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.winSizeMult.p, fieldName: "winSizeMult", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.winSizeMin.p, fieldName: "winSizeMin", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.minTrackQual.p, fieldName: "minTrackQual", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.maxTrackQual.p, fieldName: "maxTrackQual", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.resTrackQual.p, fieldName: "resTrackQual", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.courseDiff.p, fieldName: "courseDiff", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.speedDiff.p, fieldName: "speedDiff", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.altDiff.p, fieldName: "altDiff", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.minGeoPosQual.p, fieldName: "minGeoPosQual", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.maxGeoPosQual.p, fieldName: "maxGeoPosQual", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.decorrWinMult.p, fieldName: "decorrWinMult", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.consecDecorr.p, fieldName: "consecDecorr", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.multiDuty.p, fieldName: "multiDuty", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.ops.p, fieldName: "ops", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.jreUnitDes.p, fieldName: "jreUnitDes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.jreCallSign.p, fieldName: "jreCallSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.jrePriAdd.p, fieldName: "jrePriAdd", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.jreSecAdd.p, fieldName: "jreSecAdd", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.jreDetails.p, fieldName: "jreDetails", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.specTracks.p, fieldName: "specTracks", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.nonLinkUnitDes.p, fieldName: "nonLinkUnitDes", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.trackNumBlockLls.p, fieldName: "trackNumBlockLls", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.trackNumBlocks.p, fieldName: "trackNumBlocks", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.mgmtCode.p, fieldName: "mgmtCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.mgmtCodeMeaning.p, fieldName: "mgmtCodeMeaning", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ackReq.p, fieldName: "ackReq", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.ackInstUnits.p, fieldName: "ackInstUnits", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.classSource.p, fieldName: "classSource", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classReasons.p, fieldName: "classReasons", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.decInstDates.p, fieldName: "decInstDates", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.decExemptCodes.p, fieldName: "decExemptCodes", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.remarks.p, fieldName: "remarks", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.rawFileUri.p, fieldName: "rawFileUri", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: DataLink_Full_dataMode_Enum.self)
    _v.finish()
  }
}

