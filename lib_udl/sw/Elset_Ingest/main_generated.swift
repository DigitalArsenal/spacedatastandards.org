// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Elset_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Elset_Ingest_dataMode_Enum { return .exercise }
  public static var min: Elset_Ingest_dataMode_Enum { return .real }
}


public enum Elset_Ingest_sourcedDataTypes_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case eo = 0
  ///  No description available.
  case radar = 1
  ///  No description available.
  case rf = 2
  ///  No description available.
  case doa = 3
  ///  No description available.
  case elset = 4
  ///  No description available.
  case sv = 5

  public static var max: Elset_Ingest_sourcedDataTypes_Enum { return .sv }
  public static var min: Elset_Ingest_sourcedDataTypes_Enum { return .eo }
}


///  /// An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.
public struct Elset_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ELSE" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Elset_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case idElset = 4
    case classificationMarking = 6
    case satNo = 8
    case epoch = 10
    case meanMotion = 12
    case idOnOrbit = 14
    case uct = 16
    case eccentricity = 18
    case inclination = 20
    case raan = 22
    case argOfPerigee = 24
    case meanAnomaly = 26
    case revNo = 28
    case bStar = 30
    case agom = 32
    case ballisticCoeff = 34
    case meanMotionDot = 36
    case meanMotionDdot = 38
    case semiMajorAxis = 40
    case period = 42
    case apogee = 44
    case perigee = 46
    case origObjectId = 48
    case idOrbitDetermination = 50
    case line1 = 52
    case line2 = 54
    case descriptor = 56
    case createdAt = 58
    case createdBy = 60
    case rawFileUri = 62
    case origin = 64
    case sourceDl = 66
    case source = 68
    case dataMode = 70
    case tags = 72
    case algorithm = 74
    case sourcedData = 76
    case sourcedDataTypes = 78
    case transactionId = 80
    case ephemType = 82
    case origNetwork = 84
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ELSET-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idElset: String? { let o = _accessor.offset(VTOFFSET.idElset.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idElsetSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idElset.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Elset epoch time in ISO 8601 UTC format, with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var epoch: String? { let o = _accessor.offset(VTOFFSET.epoch.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var epochSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.epoch.v) }
  ///  Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var meanMotion: Double { let o = _accessor.offset(VTOFFSET.meanMotion.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var uct: Bool { let o = _accessor.offset(VTOFFSET.uct.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
  ///  Example: /// Example: 0.333
  ///  Constraints: No constraints specified.
  public var eccentricity: Double { let o = _accessor.offset(VTOFFSET.eccentricity.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  public var inclination: Double { let o = _accessor.offset(VTOFFSET.inclination.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var raan: Double { let o = _accessor.offset(VTOFFSET.raan.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var argOfPerigee: Double { let o = _accessor.offset(VTOFFSET.argOfPerigee.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  public var meanAnomaly: Double { let o = _accessor.offset(VTOFFSET.meanAnomaly.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
  ///  Example: /// Example: 111
  ///  Constraints: No constraints specified.
  public var revNo: Int32 { let o = _accessor.offset(VTOFFSET.revNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var bStar: Double { let o = _accessor.offset(VTOFFSET.bStar.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.
  ///  Example: /// Example: 0.0126
  ///  Constraints: No constraints specified.
  public var agom: Double { let o = _accessor.offset(VTOFFSET.agom.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.
  ///  Example: /// Example: 0.00815
  ///  Constraints: No constraints specified.
  public var ballisticCoeff: Double { let o = _accessor.offset(VTOFFSET.ballisticCoeff.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var meanMotionDot: Double { let o = _accessor.offset(VTOFFSET.meanMotionDot.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var meanMotionDdot: Double { let o = _accessor.offset(VTOFFSET.meanMotionDdot.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var semiMajorAxis: Double { let o = _accessor.offset(VTOFFSET.semiMajorAxis.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Period of the orbit equal to inverse of mean motion, in minutes.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var period: Double { let o = _accessor.offset(VTOFFSET.period.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var apogee: Double { let o = _accessor.offset(VTOFFSET.apogee.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var perigee: Double { let o = _accessor.offset(VTOFFSET.perigee.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOrbitDetermination: String? { let o = _accessor.offset(VTOFFSET.idOrbitDetermination.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOrbitDeterminationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOrbitDetermination.v) }
  ///  Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  ///  Example: /// Example: Example line1
  ///  Constraints: Minimum length = 0, Maximum length = 69
  public var line1: String? { let o = _accessor.offset(VTOFFSET.line1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var line1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.line1.v) }
  ///  Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  ///  Example: /// Example: Example line2
  ///  Constraints: Minimum length = 0, Maximum length = 69
  public var line2: String? { let o = _accessor.offset(VTOFFSET.line2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var line2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.line2.v) }
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: Example description
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var descriptor: String? { let o = _accessor.offset(VTOFFSET.descriptor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.descriptor.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var rawFileUri: String? { let o = _accessor.offset(VTOFFSET.rawFileUri.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rawFileUriSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rawFileUri.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Elset_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Elset_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  public var hasTags: Bool { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? false : true }
  public var tagsCount: Int32 { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func tags(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Optional algorithm used to produce this record.
  ///  Example: /// Example: Example algorithm
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var algorithm: String? { let o = _accessor.offset(VTOFFSET.algorithm.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var algorithmSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.algorithm.v) }
  ///  Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
  ///  Example: /// Example: ['OBSERVATION_UUID1', 'OBSERVATION_UUID2']
  ///  Constraints: No constraints specified.
  public var hasSourcedData: Bool { let o = _accessor.offset(VTOFFSET.sourcedData.v); return o == 0 ? false : true }
  public var sourcedDataCount: Int32 { let o = _accessor.offset(VTOFFSET.sourcedData.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sourcedData(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.sourcedData.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
  ///  Example: /// Example: ['RADAR', 'RF']
  ///  Constraints: No constraints specified.
  public var sourcedDataTypes: Elset_Ingest_sourcedDataTypes_Enum { let o = _accessor.offset(VTOFFSET.sourcedDataTypes.v); return o == 0 ? .eo : Elset_Ingest_sourcedDataTypes_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .eo }
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var transactionId: String? { let o = _accessor.offset(VTOFFSET.transactionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transactionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transactionId.v) }
  ///  The ephemeris type associated with this TLE:
  ///  0:&nbsp;SGP4 if orbital period&nbsp;&lt;&nbsp;225 minutes, and SDP4 otherwise
  ///  1:&nbsp;SGP
  ///  2:&nbsp;SGP4
  ///  3:&nbsp;SDP4
  ///  4:&nbsp;SGP8, also referred to as SGP4-XP
  ///  5:&nbsp;SDP8
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var ephemType: Int32 { let o = _accessor.offset(VTOFFSET.ephemType.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startElset_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 41) }
  public static func add(idElset: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idElset, at: VTOFFSET.idElset.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(epoch: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: epoch, at: VTOFFSET.epoch.p) }
  public static func add(meanMotion: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: meanMotion, def: 0.0, at: VTOFFSET.meanMotion.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(uct: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: uct, def: false,
   at: VTOFFSET.uct.p) }
  public static func add(eccentricity: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: eccentricity, def: 0.0, at: VTOFFSET.eccentricity.p) }
  public static func add(inclination: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: inclination, def: 0.0, at: VTOFFSET.inclination.p) }
  public static func add(raan: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: raan, def: 0.0, at: VTOFFSET.raan.p) }
  public static func add(argOfPerigee: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: argOfPerigee, def: 0.0, at: VTOFFSET.argOfPerigee.p) }
  public static func add(meanAnomaly: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: meanAnomaly, def: 0.0, at: VTOFFSET.meanAnomaly.p) }
  public static func add(revNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: revNo, def: 0, at: VTOFFSET.revNo.p) }
  public static func add(bStar: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bStar, def: 0.0, at: VTOFFSET.bStar.p) }
  public static func add(agom: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: agom, def: 0.0, at: VTOFFSET.agom.p) }
  public static func add(ballisticCoeff: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ballisticCoeff, def: 0.0, at: VTOFFSET.ballisticCoeff.p) }
  public static func add(meanMotionDot: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: meanMotionDot, def: 0.0, at: VTOFFSET.meanMotionDot.p) }
  public static func add(meanMotionDdot: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: meanMotionDdot, def: 0.0, at: VTOFFSET.meanMotionDdot.p) }
  public static func add(semiMajorAxis: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: semiMajorAxis, def: 0.0, at: VTOFFSET.semiMajorAxis.p) }
  public static func add(period: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: period, def: 0.0, at: VTOFFSET.period.p) }
  public static func add(apogee: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: apogee, def: 0.0, at: VTOFFSET.apogee.p) }
  public static func add(perigee: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: perigee, def: 0.0, at: VTOFFSET.perigee.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(idOrbitDetermination: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOrbitDetermination, at: VTOFFSET.idOrbitDetermination.p) }
  public static func add(line1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: line1, at: VTOFFSET.line1.p) }
  public static func add(line2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: line2, at: VTOFFSET.line2.p) }
  public static func add(descriptor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: descriptor, at: VTOFFSET.descriptor.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(rawFileUri: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rawFileUri, at: VTOFFSET.rawFileUri.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(dataMode: Elset_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func addVectorOf(tags: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tags, at: VTOFFSET.tags.p) }
  public static func add(algorithm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: algorithm, at: VTOFFSET.algorithm.p) }
  public static func addVectorOf(sourcedData: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourcedData, at: VTOFFSET.sourcedData.p) }
  public static func add(sourcedDataTypes: Elset_Ingest_sourcedDataTypes_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sourcedDataTypes.rawValue, def: 0, at: VTOFFSET.sourcedDataTypes.p) }
  public static func add(transactionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transactionId, at: VTOFFSET.transactionId.p) }
  public static func add(ephemType: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ephemType, def: 0, at: VTOFFSET.ephemType.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endElset_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createElset_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idElsetOffset idElset: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    satNo: Int32 = 0,
    epochOffset epoch: Offset = Offset(),
    meanMotion: Double = 0.0,
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    uct: Bool = false,
    eccentricity: Double = 0.0,
    inclination: Double = 0.0,
    raan: Double = 0.0,
    argOfPerigee: Double = 0.0,
    meanAnomaly: Double = 0.0,
    revNo: Int32 = 0,
    bStar: Double = 0.0,
    agom: Double = 0.0,
    ballisticCoeff: Double = 0.0,
    meanMotionDot: Double = 0.0,
    meanMotionDdot: Double = 0.0,
    semiMajorAxis: Double = 0.0,
    period: Double = 0.0,
    apogee: Double = 0.0,
    perigee: Double = 0.0,
    origObjectIdOffset origObjectId: Offset = Offset(),
    idOrbitDeterminationOffset idOrbitDetermination: Offset = Offset(),
    line1Offset line1: Offset = Offset(),
    line2Offset line2: Offset = Offset(),
    descriptorOffset descriptor: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    rawFileUriOffset rawFileUri: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    dataMode: Elset_Ingest_dataMode_Enum = .real,
    tagsVectorOffset tags: Offset = Offset(),
    algorithmOffset algorithm: Offset = Offset(),
    sourcedDataVectorOffset sourcedData: Offset = Offset(),
    sourcedDataTypes: Elset_Ingest_sourcedDataTypes_Enum = .eo,
    transactionIdOffset transactionId: Offset = Offset(),
    ephemType: Int32 = 0,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = Elset_Ingest.startElset_Ingest(&fbb)
    Elset_Ingest.add(idElset: idElset, &fbb)
    Elset_Ingest.add(classificationMarking: classificationMarking, &fbb)
    Elset_Ingest.add(satNo: satNo, &fbb)
    Elset_Ingest.add(epoch: epoch, &fbb)
    Elset_Ingest.add(meanMotion: meanMotion, &fbb)
    Elset_Ingest.add(idOnOrbit: idOnOrbit, &fbb)
    Elset_Ingest.add(uct: uct, &fbb)
    Elset_Ingest.add(eccentricity: eccentricity, &fbb)
    Elset_Ingest.add(inclination: inclination, &fbb)
    Elset_Ingest.add(raan: raan, &fbb)
    Elset_Ingest.add(argOfPerigee: argOfPerigee, &fbb)
    Elset_Ingest.add(meanAnomaly: meanAnomaly, &fbb)
    Elset_Ingest.add(revNo: revNo, &fbb)
    Elset_Ingest.add(bStar: bStar, &fbb)
    Elset_Ingest.add(agom: agom, &fbb)
    Elset_Ingest.add(ballisticCoeff: ballisticCoeff, &fbb)
    Elset_Ingest.add(meanMotionDot: meanMotionDot, &fbb)
    Elset_Ingest.add(meanMotionDdot: meanMotionDdot, &fbb)
    Elset_Ingest.add(semiMajorAxis: semiMajorAxis, &fbb)
    Elset_Ingest.add(period: period, &fbb)
    Elset_Ingest.add(apogee: apogee, &fbb)
    Elset_Ingest.add(perigee: perigee, &fbb)
    Elset_Ingest.add(origObjectId: origObjectId, &fbb)
    Elset_Ingest.add(idOrbitDetermination: idOrbitDetermination, &fbb)
    Elset_Ingest.add(line1: line1, &fbb)
    Elset_Ingest.add(line2: line2, &fbb)
    Elset_Ingest.add(descriptor: descriptor, &fbb)
    Elset_Ingest.add(createdAt: createdAt, &fbb)
    Elset_Ingest.add(createdBy: createdBy, &fbb)
    Elset_Ingest.add(rawFileUri: rawFileUri, &fbb)
    Elset_Ingest.add(origin: origin, &fbb)
    Elset_Ingest.add(sourceDl: sourceDl, &fbb)
    Elset_Ingest.add(source: source, &fbb)
    Elset_Ingest.add(dataMode: dataMode, &fbb)
    Elset_Ingest.addVectorOf(tags: tags, &fbb)
    Elset_Ingest.add(algorithm: algorithm, &fbb)
    Elset_Ingest.addVectorOf(sourcedData: sourcedData, &fbb)
    Elset_Ingest.add(sourcedDataTypes: sourcedDataTypes, &fbb)
    Elset_Ingest.add(transactionId: transactionId, &fbb)
    Elset_Ingest.add(ephemType: ephemType, &fbb)
    Elset_Ingest.add(origNetwork: origNetwork, &fbb)
    return Elset_Ingest.endElset_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.idElset.p, fieldName: "idElset", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.epoch.p, fieldName: "epoch", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.meanMotion.p, fieldName: "meanMotion", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.uct.p, fieldName: "uct", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.eccentricity.p, fieldName: "eccentricity", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.inclination.p, fieldName: "inclination", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.raan.p, fieldName: "raan", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.argOfPerigee.p, fieldName: "argOfPerigee", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.meanAnomaly.p, fieldName: "meanAnomaly", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.revNo.p, fieldName: "revNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.bStar.p, fieldName: "bStar", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.agom.p, fieldName: "agom", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ballisticCoeff.p, fieldName: "ballisticCoeff", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.meanMotionDot.p, fieldName: "meanMotionDot", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.meanMotionDdot.p, fieldName: "meanMotionDdot", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.semiMajorAxis.p, fieldName: "semiMajorAxis", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.period.p, fieldName: "period", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.apogee.p, fieldName: "apogee", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.perigee.p, fieldName: "perigee", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOrbitDetermination.p, fieldName: "idOrbitDetermination", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.line1.p, fieldName: "line1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.line2.p, fieldName: "line2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.descriptor.p, fieldName: "descriptor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rawFileUri.p, fieldName: "rawFileUri", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Elset_Ingest_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.tags.p, fieldName: "tags", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.algorithm.p, fieldName: "algorithm", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourcedData.p, fieldName: "sourcedData", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.sourcedDataTypes.p, fieldName: "sourcedDataTypes", required: false, type: Elset_Ingest_sourcedDataTypes_Enum.self)
    try _v.visit(field: VTOFFSET.transactionId.p, fieldName: "transactionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ephemType.p, fieldName: "ephemType", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

