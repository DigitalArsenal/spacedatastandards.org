// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// The ScalerInfo record describes the person or system who interpreted the ionogram in IonoObservation.
public struct IonoObservationScalerInfo_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "IONO" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: IonoObservationScalerInfo_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case type = 4
    case name = 6
    case organization = 8
    case version = 10
    case confidenceScore = 12
    case confidenceLevel = 14
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Scaler type (MANUAL, AUTOMATIC or UNKNOWN).
  ///  Example: /// Example: MANUAL
  ///  Constraints: Minimum length = 0, Maximum length = 9
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Scaler name.
  ///  Example: /// Example: ARTIST-4
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  Scaler organization.
  ///  Example: /// Example: UML
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var organization: String? { let o = _accessor.offset(VTOFFSET.organization.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var organizationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.organization.v) }
  ///  Scaler version.
  ///  Example: /// Example: 500200.1
  ///  Constraints: No constraints specified.
  public var version: Double { let o = _accessor.offset(VTOFFSET.version.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Scaler confidence score.
  ///  Example: /// Example: 75
  ///  Constraints: No constraints specified.
  public var confidenceScore: Int32 { let o = _accessor.offset(VTOFFSET.confidenceScore.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Scaler confidence level.
  ///  Example: /// Example: 11
  ///  Constraints: No constraints specified.
  public var confidenceLevel: Int32 { let o = _accessor.offset(VTOFFSET.confidenceLevel.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public static func startIonoObservationScalerInfo_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 6) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(organization: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: organization, at: VTOFFSET.organization.p) }
  public static func add(version: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: version, def: 0.0, at: VTOFFSET.version.p) }
  public static func add(confidenceScore: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: confidenceScore, def: 0, at: VTOFFSET.confidenceScore.p) }
  public static func add(confidenceLevel: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: confidenceLevel, def: 0, at: VTOFFSET.confidenceLevel.p) }
  public static func endIonoObservationScalerInfo_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createIonoObservationScalerInfo_Abridged(
    _ fbb: inout FlatBufferBuilder,
    typeOffset type: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    organizationOffset organization: Offset = Offset(),
    version: Double = 0.0,
    confidenceScore: Int32 = 0,
    confidenceLevel: Int32 = 0
  ) -> Offset {
    let __start = IonoObservationScalerInfo_Abridged.startIonoObservationScalerInfo_Abridged(&fbb)
    IonoObservationScalerInfo_Abridged.add(type: type, &fbb)
    IonoObservationScalerInfo_Abridged.add(name: name, &fbb)
    IonoObservationScalerInfo_Abridged.add(organization: organization, &fbb)
    IonoObservationScalerInfo_Abridged.add(version: version, &fbb)
    IonoObservationScalerInfo_Abridged.add(confidenceScore: confidenceScore, &fbb)
    IonoObservationScalerInfo_Abridged.add(confidenceLevel: confidenceLevel, &fbb)
    return IonoObservationScalerInfo_Abridged.endIonoObservationScalerInfo_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.organization.p, fieldName: "organization", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.version.p, fieldName: "version", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.confidenceScore.p, fieldName: "confidenceScore", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.confidenceLevel.p, fieldName: "confidenceLevel", required: false, type: Int32.self)
    _v.finish()
  }
}

