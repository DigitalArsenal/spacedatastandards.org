// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum LaunchVehicleDetails_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: LaunchVehicleDetails_Abridged_dataMode_Enum { return .exercise }
  public static var min: LaunchVehicleDetails_Abridged_dataMode_Enum { return .real }
}


///  /// Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.
public struct LaunchVehicleDetails_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "LAUN" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: LaunchVehicleDetails_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case idLaunchVehicle = 6
    case classificationMarking = 8
    case variant = 10
    case minorVariant = 12
    case category = 14
    case manufacturerOrgId = 16
    case launchPrefix = 18
    case family = 20
    case propellant = 22
    case oxidizer = 24
    case length = 26
    case diameter = 28
    case launchMass = 30
    case geoPayloadMass = 32
    case gtoPayloadMass = 34
    case leoPayloadMass = 36
    case ssoPayloadMass = 38
    case fairingLength = 40
    case fairingName = 42
    case fairingExternalDiameter = 44
    case fairingInternalDiameter = 46
    case fairingMass = 48
    case fairingMaterial = 50
    case maxAccelLoad = 52
    case maxPayloadFreqLat = 54
    case maxPayloadFreqLon = 56
    case maxAcousticLevel = 58
    case maxAcousticLevelRange = 60
    case soundPressureLevel = 62
    case maxFlightShockForce = 64
    case maxFlightShockFreq = 66
    case maxFairingPressureChange = 68
    case estLaunchPrice = 70
    case estLaunchPriceTypical = 72
    case gtoInj3SigAccuracyApogeeTarget = 74
    case gtoInj3SigAccuracyApogeeMargin = 76
    case gtoInj3SigAccuracyPerigeeTarget = 78
    case gtoInj3SigAccuracyPerigeeMargin = 80
    case gtoInj3SigAccuracyInclinationTarget = 82
    case gtoInj3SigAccuracyInclinationMargin = 84
    case attitudeAccuracy = 86
    case payloadSeparationRate = 88
    case deploymentRotationRate = 90
    case sourceUrl = 92
    case notes = 94
    case fairingNotes = 96
    case payloadNotes = 98
    case createdAt = 100
    case createdBy = 102
    case source = 104
    case origin = 106
    case origNetwork = 108
    case dataMode = 110
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: LAUNCHVEHICLEDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Identifier of the parent launch vehicle record.
  ///  Example: /// Example: LAUNCHVEHICLE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idLaunchVehicle: String? { let o = _accessor.offset(VTOFFSET.idLaunchVehicle.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idLaunchVehicleSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idLaunchVehicle.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Vehicle variant.
  ///  Example: /// Example: Example-variant
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var variant: String? { let o = _accessor.offset(VTOFFSET.variant.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var variantSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.variant.v) }
  ///  Vehicle minor variant.
  ///  Example: /// Example: Example-minor-variant
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var minorVariant: String? { let o = _accessor.offset(VTOFFSET.minorVariant.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var minorVariantSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.minorVariant.v) }
  ///  Vehicle category.
  ///  Example: /// Example: Example-category
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var category: String? { let o = _accessor.offset(VTOFFSET.category.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var categorySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.category.v) }
  ///  ID of the organization that manufactures the launch vehicle.
  ///  Example: /// Example: MANUFACTURERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var manufacturerOrgId: String? { let o = _accessor.offset(VTOFFSET.manufacturerOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var manufacturerOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.manufacturerOrgId.v) }
  ///  Vehicle launch prefix.
  ///  Example: /// Example: AX011
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var launchPrefix: String? { let o = _accessor.offset(VTOFFSET.launchPrefix.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var launchPrefixSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.launchPrefix.v) }
  ///  Vehicle family.
  ///  Example: /// Example: Example-family
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var family: String? { let o = _accessor.offset(VTOFFSET.family.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var familySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.family.v) }
  ///  Propellant type.
  ///  Example: /// Example: Nitrogen
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var propellant: String? { let o = _accessor.offset(VTOFFSET.propellant.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var propellantSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.propellant.v) }
  ///  Oxidizer type.
  ///  Example: /// Example: Bromine
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var oxidizer: String? { let o = _accessor.offset(VTOFFSET.oxidizer.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var oxidizerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.oxidizer.v) }
  ///  Vehicle length in meters.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var length: Double { let o = _accessor.offset(VTOFFSET.length.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Vehicle diameter in meters.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var diameter: Double { let o = _accessor.offset(VTOFFSET.diameter.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Vehicle total mass at launch time in kg (including all boosters).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var launchMass: Double { let o = _accessor.offset(VTOFFSET.launchMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum vehicle payload mass to GEO orbit in kg.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var geoPayloadMass: Double { let o = _accessor.offset(VTOFFSET.geoPayloadMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Max vehicle payload mass to Geo-Transfer Orbit in kg.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var gtoPayloadMass: Double { let o = _accessor.offset(VTOFFSET.gtoPayloadMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Max vehicle payload mass to LEO orbit in kg.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var leoPayloadMass: Double { let o = _accessor.offset(VTOFFSET.leoPayloadMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Max vehicle payload mass to Sun-Synchronous Orbit in kg.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var ssoPayloadMass: Double { let o = _accessor.offset(VTOFFSET.ssoPayloadMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Vehicle fairing length in meters.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var fairingLength: Double { let o = _accessor.offset(VTOFFSET.fairingLength.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Name of the fairing.
  ///  Example: /// Example: Example-fairing-name
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var fairingName: String? { let o = _accessor.offset(VTOFFSET.fairingName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fairingNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fairingName.v) }
  ///  Vehicle fairing maximum external diameter in meters.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var fairingExternalDiameter: Double { let o = _accessor.offset(VTOFFSET.fairingExternalDiameter.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Vehicle fairing maximum internal diameter in meters.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var fairingInternalDiameter: Double { let o = _accessor.offset(VTOFFSET.fairingInternalDiameter.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Vehicle fairing mass in kg.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var fairingMass: Double { let o = _accessor.offset(VTOFFSET.fairingMass.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fairing material.
  ///  Example: /// Example: Example-fairing-material
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var fairingMaterial: String? { let o = _accessor.offset(VTOFFSET.fairingMaterial.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fairingMaterialSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fairingMaterial.v) }
  ///  Vehicle maximum acceleration load in g.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var maxAccelLoad: Double { let o = _accessor.offset(VTOFFSET.maxAccelLoad.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Vehicle maximum payload lateral frequency in Hz.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var maxPayloadFreqLat: Double { let o = _accessor.offset(VTOFFSET.maxPayloadFreqLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Vehicle maximum payload longitudinal frequency in Hz.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var maxPayloadFreqLon: Double { let o = _accessor.offset(VTOFFSET.maxPayloadFreqLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Vehicle maximum acoustic level in dB.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var maxAcousticLevel: Double { let o = _accessor.offset(VTOFFSET.maxAcousticLevel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Vehicle maximum acoustic level range in Hz.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var maxAcousticLevelRange: Double { let o = _accessor.offset(VTOFFSET.maxAcousticLevelRange.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Vehicle overall sound pressure level in dB.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var soundPressureLevel: Double { let o = _accessor.offset(VTOFFSET.soundPressureLevel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Vehicle maximum flight shock force in g.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var maxFlightShockForce: Double { let o = _accessor.offset(VTOFFSET.maxFlightShockForce.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Vehicle maximum flight shock frequency in Hz.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var maxFlightShockFreq: Double { let o = _accessor.offset(VTOFFSET.maxFlightShockFreq.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Vehicle fairing maximum pressure change in kPa/sec.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var maxFairingPressureChange: Double { let o = _accessor.offset(VTOFFSET.maxFairingPressureChange.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Launch vehicle estimated launch price in US dollars.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var estLaunchPrice: Double { let o = _accessor.offset(VTOFFSET.estLaunchPrice.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Launch vehicle typical estimated launch price in US dollars.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var estLaunchPriceTypical: Double { let o = _accessor.offset(VTOFFSET.estLaunchPriceTypical.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var gtoInj3SigAccuracyApogeeTarget: Double { let o = _accessor.offset(VTOFFSET.gtoInj3SigAccuracyApogeeTarget.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var gtoInj3SigAccuracyApogeeMargin: Double { let o = _accessor.offset(VTOFFSET.gtoInj3SigAccuracyApogeeMargin.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var gtoInj3SigAccuracyPerigeeTarget: Double { let o = _accessor.offset(VTOFFSET.gtoInj3SigAccuracyPerigeeTarget.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var gtoInj3SigAccuracyPerigeeMargin: Double { let o = _accessor.offset(VTOFFSET.gtoInj3SigAccuracyPerigeeMargin.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var gtoInj3SigAccuracyInclinationTarget: Double { let o = _accessor.offset(VTOFFSET.gtoInj3SigAccuracyInclinationTarget.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var gtoInj3SigAccuracyInclinationMargin: Double { let o = _accessor.offset(VTOFFSET.gtoInj3SigAccuracyInclinationMargin.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Launch vehicle attitude accuracy (degrees).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var attitudeAccuracy: Double { let o = _accessor.offset(VTOFFSET.attitudeAccuracy.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Launch vehicle payload separation rate in m/s.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var payloadSeparationRate: Double { let o = _accessor.offset(VTOFFSET.payloadSeparationRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Launch vehicle deployment rotation rate in RPM.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var deploymentRotationRate: Double { let o = _accessor.offset(VTOFFSET.deploymentRotationRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional URL for additional information on the vehicle.
  ///  Example: /// Example: Example URL
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var sourceUrl: String? { let o = _accessor.offset(VTOFFSET.sourceUrl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceUrlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceUrl.v) }
  ///  Notes/Description of the launch vehicle.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  ///  Notes/Description of the launch vehicle fairing.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var fairingNotes: String? { let o = _accessor.offset(VTOFFSET.fairingNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fairingNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fairingNotes.v) }
  ///  Notes/Description of the launch vehicle payload.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var payloadNotes: String? { let o = _accessor.offset(VTOFFSET.payloadNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var payloadNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.payloadNotes.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: LaunchVehicleDetails_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : LaunchVehicleDetails_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startLaunchVehicleDetails_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 54) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(idLaunchVehicle: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idLaunchVehicle, at: VTOFFSET.idLaunchVehicle.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(variant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: variant, at: VTOFFSET.variant.p) }
  public static func add(minorVariant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: minorVariant, at: VTOFFSET.minorVariant.p) }
  public static func add(category: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: category, at: VTOFFSET.category.p) }
  public static func add(manufacturerOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: manufacturerOrgId, at: VTOFFSET.manufacturerOrgId.p) }
  public static func add(launchPrefix: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: launchPrefix, at: VTOFFSET.launchPrefix.p) }
  public static func add(family: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: family, at: VTOFFSET.family.p) }
  public static func add(propellant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: propellant, at: VTOFFSET.propellant.p) }
  public static func add(oxidizer: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: oxidizer, at: VTOFFSET.oxidizer.p) }
  public static func add(length: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: length, def: 0.0, at: VTOFFSET.length.p) }
  public static func add(diameter: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: diameter, def: 0.0, at: VTOFFSET.diameter.p) }
  public static func add(launchMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: launchMass, def: 0.0, at: VTOFFSET.launchMass.p) }
  public static func add(geoPayloadMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: geoPayloadMass, def: 0.0, at: VTOFFSET.geoPayloadMass.p) }
  public static func add(gtoPayloadMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gtoPayloadMass, def: 0.0, at: VTOFFSET.gtoPayloadMass.p) }
  public static func add(leoPayloadMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: leoPayloadMass, def: 0.0, at: VTOFFSET.leoPayloadMass.p) }
  public static func add(ssoPayloadMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ssoPayloadMass, def: 0.0, at: VTOFFSET.ssoPayloadMass.p) }
  public static func add(fairingLength: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fairingLength, def: 0.0, at: VTOFFSET.fairingLength.p) }
  public static func add(fairingName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fairingName, at: VTOFFSET.fairingName.p) }
  public static func add(fairingExternalDiameter: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fairingExternalDiameter, def: 0.0, at: VTOFFSET.fairingExternalDiameter.p) }
  public static func add(fairingInternalDiameter: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fairingInternalDiameter, def: 0.0, at: VTOFFSET.fairingInternalDiameter.p) }
  public static func add(fairingMass: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fairingMass, def: 0.0, at: VTOFFSET.fairingMass.p) }
  public static func add(fairingMaterial: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fairingMaterial, at: VTOFFSET.fairingMaterial.p) }
  public static func add(maxAccelLoad: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxAccelLoad, def: 0.0, at: VTOFFSET.maxAccelLoad.p) }
  public static func add(maxPayloadFreqLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxPayloadFreqLat, def: 0.0, at: VTOFFSET.maxPayloadFreqLat.p) }
  public static func add(maxPayloadFreqLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxPayloadFreqLon, def: 0.0, at: VTOFFSET.maxPayloadFreqLon.p) }
  public static func add(maxAcousticLevel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxAcousticLevel, def: 0.0, at: VTOFFSET.maxAcousticLevel.p) }
  public static func add(maxAcousticLevelRange: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxAcousticLevelRange, def: 0.0, at: VTOFFSET.maxAcousticLevelRange.p) }
  public static func add(soundPressureLevel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soundPressureLevel, def: 0.0, at: VTOFFSET.soundPressureLevel.p) }
  public static func add(maxFlightShockForce: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxFlightShockForce, def: 0.0, at: VTOFFSET.maxFlightShockForce.p) }
  public static func add(maxFlightShockFreq: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxFlightShockFreq, def: 0.0, at: VTOFFSET.maxFlightShockFreq.p) }
  public static func add(maxFairingPressureChange: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: maxFairingPressureChange, def: 0.0, at: VTOFFSET.maxFairingPressureChange.p) }
  public static func add(estLaunchPrice: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: estLaunchPrice, def: 0.0, at: VTOFFSET.estLaunchPrice.p) }
  public static func add(estLaunchPriceTypical: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: estLaunchPriceTypical, def: 0.0, at: VTOFFSET.estLaunchPriceTypical.p) }
  public static func add(gtoInj3SigAccuracyApogeeTarget: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gtoInj3SigAccuracyApogeeTarget, def: 0.0, at: VTOFFSET.gtoInj3SigAccuracyApogeeTarget.p) }
  public static func add(gtoInj3SigAccuracyApogeeMargin: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gtoInj3SigAccuracyApogeeMargin, def: 0.0, at: VTOFFSET.gtoInj3SigAccuracyApogeeMargin.p) }
  public static func add(gtoInj3SigAccuracyPerigeeTarget: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gtoInj3SigAccuracyPerigeeTarget, def: 0.0, at: VTOFFSET.gtoInj3SigAccuracyPerigeeTarget.p) }
  public static func add(gtoInj3SigAccuracyPerigeeMargin: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gtoInj3SigAccuracyPerigeeMargin, def: 0.0, at: VTOFFSET.gtoInj3SigAccuracyPerigeeMargin.p) }
  public static func add(gtoInj3SigAccuracyInclinationTarget: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gtoInj3SigAccuracyInclinationTarget, def: 0.0, at: VTOFFSET.gtoInj3SigAccuracyInclinationTarget.p) }
  public static func add(gtoInj3SigAccuracyInclinationMargin: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gtoInj3SigAccuracyInclinationMargin, def: 0.0, at: VTOFFSET.gtoInj3SigAccuracyInclinationMargin.p) }
  public static func add(attitudeAccuracy: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: attitudeAccuracy, def: 0.0, at: VTOFFSET.attitudeAccuracy.p) }
  public static func add(payloadSeparationRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: payloadSeparationRate, def: 0.0, at: VTOFFSET.payloadSeparationRate.p) }
  public static func add(deploymentRotationRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: deploymentRotationRate, def: 0.0, at: VTOFFSET.deploymentRotationRate.p) }
  public static func add(sourceUrl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceUrl, at: VTOFFSET.sourceUrl.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func add(fairingNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fairingNotes, at: VTOFFSET.fairingNotes.p) }
  public static func add(payloadNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: payloadNotes, at: VTOFFSET.payloadNotes.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: LaunchVehicleDetails_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endLaunchVehicleDetails_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createLaunchVehicleDetails_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    idLaunchVehicleOffset idLaunchVehicle: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    variantOffset variant: Offset = Offset(),
    minorVariantOffset minorVariant: Offset = Offset(),
    categoryOffset category: Offset = Offset(),
    manufacturerOrgIdOffset manufacturerOrgId: Offset = Offset(),
    launchPrefixOffset launchPrefix: Offset = Offset(),
    familyOffset family: Offset = Offset(),
    propellantOffset propellant: Offset = Offset(),
    oxidizerOffset oxidizer: Offset = Offset(),
    length: Double = 0.0,
    diameter: Double = 0.0,
    launchMass: Double = 0.0,
    geoPayloadMass: Double = 0.0,
    gtoPayloadMass: Double = 0.0,
    leoPayloadMass: Double = 0.0,
    ssoPayloadMass: Double = 0.0,
    fairingLength: Double = 0.0,
    fairingNameOffset fairingName: Offset = Offset(),
    fairingExternalDiameter: Double = 0.0,
    fairingInternalDiameter: Double = 0.0,
    fairingMass: Double = 0.0,
    fairingMaterialOffset fairingMaterial: Offset = Offset(),
    maxAccelLoad: Double = 0.0,
    maxPayloadFreqLat: Double = 0.0,
    maxPayloadFreqLon: Double = 0.0,
    maxAcousticLevel: Double = 0.0,
    maxAcousticLevelRange: Double = 0.0,
    soundPressureLevel: Double = 0.0,
    maxFlightShockForce: Double = 0.0,
    maxFlightShockFreq: Double = 0.0,
    maxFairingPressureChange: Double = 0.0,
    estLaunchPrice: Double = 0.0,
    estLaunchPriceTypical: Double = 0.0,
    gtoInj3SigAccuracyApogeeTarget: Double = 0.0,
    gtoInj3SigAccuracyApogeeMargin: Double = 0.0,
    gtoInj3SigAccuracyPerigeeTarget: Double = 0.0,
    gtoInj3SigAccuracyPerigeeMargin: Double = 0.0,
    gtoInj3SigAccuracyInclinationTarget: Double = 0.0,
    gtoInj3SigAccuracyInclinationMargin: Double = 0.0,
    attitudeAccuracy: Double = 0.0,
    payloadSeparationRate: Double = 0.0,
    deploymentRotationRate: Double = 0.0,
    sourceUrlOffset sourceUrl: Offset = Offset(),
    notesOffset notes: Offset = Offset(),
    fairingNotesOffset fairingNotes: Offset = Offset(),
    payloadNotesOffset payloadNotes: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: LaunchVehicleDetails_Abridged_dataMode_Enum = .real
  ) -> Offset {
    let __start = LaunchVehicleDetails_Abridged.startLaunchVehicleDetails_Abridged(&fbb)
    LaunchVehicleDetails_Abridged.add(id: id, &fbb)
    LaunchVehicleDetails_Abridged.add(idLaunchVehicle: idLaunchVehicle, &fbb)
    LaunchVehicleDetails_Abridged.add(classificationMarking: classificationMarking, &fbb)
    LaunchVehicleDetails_Abridged.add(variant: variant, &fbb)
    LaunchVehicleDetails_Abridged.add(minorVariant: minorVariant, &fbb)
    LaunchVehicleDetails_Abridged.add(category: category, &fbb)
    LaunchVehicleDetails_Abridged.add(manufacturerOrgId: manufacturerOrgId, &fbb)
    LaunchVehicleDetails_Abridged.add(launchPrefix: launchPrefix, &fbb)
    LaunchVehicleDetails_Abridged.add(family: family, &fbb)
    LaunchVehicleDetails_Abridged.add(propellant: propellant, &fbb)
    LaunchVehicleDetails_Abridged.add(oxidizer: oxidizer, &fbb)
    LaunchVehicleDetails_Abridged.add(length: length, &fbb)
    LaunchVehicleDetails_Abridged.add(diameter: diameter, &fbb)
    LaunchVehicleDetails_Abridged.add(launchMass: launchMass, &fbb)
    LaunchVehicleDetails_Abridged.add(geoPayloadMass: geoPayloadMass, &fbb)
    LaunchVehicleDetails_Abridged.add(gtoPayloadMass: gtoPayloadMass, &fbb)
    LaunchVehicleDetails_Abridged.add(leoPayloadMass: leoPayloadMass, &fbb)
    LaunchVehicleDetails_Abridged.add(ssoPayloadMass: ssoPayloadMass, &fbb)
    LaunchVehicleDetails_Abridged.add(fairingLength: fairingLength, &fbb)
    LaunchVehicleDetails_Abridged.add(fairingName: fairingName, &fbb)
    LaunchVehicleDetails_Abridged.add(fairingExternalDiameter: fairingExternalDiameter, &fbb)
    LaunchVehicleDetails_Abridged.add(fairingInternalDiameter: fairingInternalDiameter, &fbb)
    LaunchVehicleDetails_Abridged.add(fairingMass: fairingMass, &fbb)
    LaunchVehicleDetails_Abridged.add(fairingMaterial: fairingMaterial, &fbb)
    LaunchVehicleDetails_Abridged.add(maxAccelLoad: maxAccelLoad, &fbb)
    LaunchVehicleDetails_Abridged.add(maxPayloadFreqLat: maxPayloadFreqLat, &fbb)
    LaunchVehicleDetails_Abridged.add(maxPayloadFreqLon: maxPayloadFreqLon, &fbb)
    LaunchVehicleDetails_Abridged.add(maxAcousticLevel: maxAcousticLevel, &fbb)
    LaunchVehicleDetails_Abridged.add(maxAcousticLevelRange: maxAcousticLevelRange, &fbb)
    LaunchVehicleDetails_Abridged.add(soundPressureLevel: soundPressureLevel, &fbb)
    LaunchVehicleDetails_Abridged.add(maxFlightShockForce: maxFlightShockForce, &fbb)
    LaunchVehicleDetails_Abridged.add(maxFlightShockFreq: maxFlightShockFreq, &fbb)
    LaunchVehicleDetails_Abridged.add(maxFairingPressureChange: maxFairingPressureChange, &fbb)
    LaunchVehicleDetails_Abridged.add(estLaunchPrice: estLaunchPrice, &fbb)
    LaunchVehicleDetails_Abridged.add(estLaunchPriceTypical: estLaunchPriceTypical, &fbb)
    LaunchVehicleDetails_Abridged.add(gtoInj3SigAccuracyApogeeTarget: gtoInj3SigAccuracyApogeeTarget, &fbb)
    LaunchVehicleDetails_Abridged.add(gtoInj3SigAccuracyApogeeMargin: gtoInj3SigAccuracyApogeeMargin, &fbb)
    LaunchVehicleDetails_Abridged.add(gtoInj3SigAccuracyPerigeeTarget: gtoInj3SigAccuracyPerigeeTarget, &fbb)
    LaunchVehicleDetails_Abridged.add(gtoInj3SigAccuracyPerigeeMargin: gtoInj3SigAccuracyPerigeeMargin, &fbb)
    LaunchVehicleDetails_Abridged.add(gtoInj3SigAccuracyInclinationTarget: gtoInj3SigAccuracyInclinationTarget, &fbb)
    LaunchVehicleDetails_Abridged.add(gtoInj3SigAccuracyInclinationMargin: gtoInj3SigAccuracyInclinationMargin, &fbb)
    LaunchVehicleDetails_Abridged.add(attitudeAccuracy: attitudeAccuracy, &fbb)
    LaunchVehicleDetails_Abridged.add(payloadSeparationRate: payloadSeparationRate, &fbb)
    LaunchVehicleDetails_Abridged.add(deploymentRotationRate: deploymentRotationRate, &fbb)
    LaunchVehicleDetails_Abridged.add(sourceUrl: sourceUrl, &fbb)
    LaunchVehicleDetails_Abridged.add(notes: notes, &fbb)
    LaunchVehicleDetails_Abridged.add(fairingNotes: fairingNotes, &fbb)
    LaunchVehicleDetails_Abridged.add(payloadNotes: payloadNotes, &fbb)
    LaunchVehicleDetails_Abridged.add(createdAt: createdAt, &fbb)
    LaunchVehicleDetails_Abridged.add(createdBy: createdBy, &fbb)
    LaunchVehicleDetails_Abridged.add(source: source, &fbb)
    LaunchVehicleDetails_Abridged.add(origin: origin, &fbb)
    LaunchVehicleDetails_Abridged.add(origNetwork: origNetwork, &fbb)
    LaunchVehicleDetails_Abridged.add(dataMode: dataMode, &fbb)
    return LaunchVehicleDetails_Abridged.endLaunchVehicleDetails_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idLaunchVehicle.p, fieldName: "idLaunchVehicle", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.variant.p, fieldName: "variant", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.minorVariant.p, fieldName: "minorVariant", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.category.p, fieldName: "category", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.manufacturerOrgId.p, fieldName: "manufacturerOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.launchPrefix.p, fieldName: "launchPrefix", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.family.p, fieldName: "family", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.propellant.p, fieldName: "propellant", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.oxidizer.p, fieldName: "oxidizer", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.length.p, fieldName: "length", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.diameter.p, fieldName: "diameter", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.launchMass.p, fieldName: "launchMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.geoPayloadMass.p, fieldName: "geoPayloadMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gtoPayloadMass.p, fieldName: "gtoPayloadMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.leoPayloadMass.p, fieldName: "leoPayloadMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ssoPayloadMass.p, fieldName: "ssoPayloadMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fairingLength.p, fieldName: "fairingLength", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fairingName.p, fieldName: "fairingName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fairingExternalDiameter.p, fieldName: "fairingExternalDiameter", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fairingInternalDiameter.p, fieldName: "fairingInternalDiameter", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fairingMass.p, fieldName: "fairingMass", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fairingMaterial.p, fieldName: "fairingMaterial", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.maxAccelLoad.p, fieldName: "maxAccelLoad", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxPayloadFreqLat.p, fieldName: "maxPayloadFreqLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxPayloadFreqLon.p, fieldName: "maxPayloadFreqLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxAcousticLevel.p, fieldName: "maxAcousticLevel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxAcousticLevelRange.p, fieldName: "maxAcousticLevelRange", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.soundPressureLevel.p, fieldName: "soundPressureLevel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxFlightShockForce.p, fieldName: "maxFlightShockForce", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxFlightShockFreq.p, fieldName: "maxFlightShockFreq", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.maxFairingPressureChange.p, fieldName: "maxFairingPressureChange", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.estLaunchPrice.p, fieldName: "estLaunchPrice", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.estLaunchPriceTypical.p, fieldName: "estLaunchPriceTypical", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gtoInj3SigAccuracyApogeeTarget.p, fieldName: "gtoInj3SigAccuracyApogeeTarget", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gtoInj3SigAccuracyApogeeMargin.p, fieldName: "gtoInj3SigAccuracyApogeeMargin", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gtoInj3SigAccuracyPerigeeTarget.p, fieldName: "gtoInj3SigAccuracyPerigeeTarget", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gtoInj3SigAccuracyPerigeeMargin.p, fieldName: "gtoInj3SigAccuracyPerigeeMargin", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gtoInj3SigAccuracyInclinationTarget.p, fieldName: "gtoInj3SigAccuracyInclinationTarget", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gtoInj3SigAccuracyInclinationMargin.p, fieldName: "gtoInj3SigAccuracyInclinationMargin", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.attitudeAccuracy.p, fieldName: "attitudeAccuracy", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.payloadSeparationRate.p, fieldName: "payloadSeparationRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.deploymentRotationRate.p, fieldName: "deploymentRotationRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.sourceUrl.p, fieldName: "sourceUrl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fairingNotes.p, fieldName: "fairingNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.payloadNotes.p, fieldName: "payloadNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: LaunchVehicleDetails_Abridged_dataMode_Enum.self)
    _v.finish()
  }
}

