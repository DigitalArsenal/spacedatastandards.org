// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Evac_Full_type_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case request = 0
  ///  No description available.
  case response = 1

  public static var max: Evac_Full_type_Enum { return .response }
  public static var min: Evac_Full_type_Enum { return .request }
}


public enum Evac_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Evac_Full_dataMode_Enum { return .exercise }
  public static var min: Evac_Full_dataMode_Enum { return .real }
}


///  /// Casualty report and evacuation request. Used to report and request support to evacuate friendly and enemy casualties.
public struct Evac_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EVAC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Evac_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case medevacId = 8
    case type = 10
    case missionType = 12
    case idWeatherReport = 14
    case numKia = 16
    case numWia = 18
    case numLitter = 20
    case numAmbulatory = 22
    case medicReq = 24
    case reqNum = 26
    case reqTime = 28
    case reqCallSign = 30
    case pickupTime = 32
    case pickupLat = 34
    case pickupLon = 36
    case pickupAlt = 38
    case ce = 40
    case le = 42
    case terrain = 44
    case obstaclesRemarks = 46
    case terrainRemarks = 48
    case zoneName = 50
    case zoneMarking = 52
    case zoneSecurity = 54
    case zoneMarkingColor = 56
    case zoneHot = 58
    case cntctFreq = 60
    case zoneContrCallSign = 62
    case numCasualties = 64
    case comments = 66
    case casualtyInfo = 68
    case enemyData = 70
    case relatedDocs = 72
    case origNetwork = 74
    case createdAt = 76
    case createdBy = 78
    case source = 80
    case origin = 82
    case dataMode = 84
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: MEDEVACEVENT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  UUID identifying the medevac mission, which should remain the same on subsequent posts related to the same medevac mission.
  ///  Example: /// Example: MedEvac-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var medevacId: String? { let o = _accessor.offset(VTOFFSET.medevacId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var medevacIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.medevacId.v) }
  ///  The type of this medevac record (REQUEST, RESPONSE).
  ///  Example: /// Example: REQUEST
  ///  Constraints: Minimum length = 1, Maximum length = 8
  public var type: Evac_Full_type_Enum { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? .request : Evac_Full_type_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .request }
  ///  The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
  ///  Example: /// Example: GROUND
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var missionType: String? { let o = _accessor.offset(VTOFFSET.missionType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var missionTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.missionType.v) }
  ///  Unique identifier of a weather report associated with this evacuation.
  ///  Example: /// Example: WeatherReport-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idWeatherReport: String? { let o = _accessor.offset(VTOFFSET.idWeatherReport.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idWeatherReportSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idWeatherReport.v) }
  ///  Number of people Killed In Action.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  public var numKia: Int32 { let o = _accessor.offset(VTOFFSET.numKia.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of people Wounded In Action.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var numWia: Int32 { let o = _accessor.offset(VTOFFSET.numWia.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of littered personnel requiring evacuation.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  public var numLitter: Int32 { let o = _accessor.offset(VTOFFSET.numLitter.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of ambulatory personnel requiring evacuation.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var numAmbulatory: Int32 { let o = _accessor.offset(VTOFFSET.numAmbulatory.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Flag indicating whether the mission requires medical personnel.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var medicReq: Bool { let o = _accessor.offset(VTOFFSET.medicReq.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Externally provided Medevac request number (e.g. MED.1.223908).
  ///  Example: /// Example: MED.1.234567
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var reqNum: String? { let o = _accessor.offset(VTOFFSET.reqNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reqNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reqNum.v) }
  ///  The request time, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-10-15T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var reqTime: String? { let o = _accessor.offset(VTOFFSET.reqTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reqTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reqTime.v) }
  ///  The call sign of this medevac requestor.
  ///  Example: /// Example: Bravo
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var reqCallSign: String? { let o = _accessor.offset(VTOFFSET.reqCallSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reqCallSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reqCallSign.v) }
  ///  The expected pickup time, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-10-20T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var pickupTime: String? { let o = _accessor.offset(VTOFFSET.pickupTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pickupTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pickupTime.v) }
  ///  WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 75.1234
  ///  Constraints: No constraints specified.
  public var pickupLat: Double { let o = _accessor.offset(VTOFFSET.pickupLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 175.1234
  ///  Constraints: No constraints specified.
  public var pickupLon: Double { let o = _accessor.offset(VTOFFSET.pickupLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point height below ellipsoid.
  ///  Example: /// Example: 30.1234
  ///  Constraints: No constraints specified.
  public var pickupAlt: Double { let o = _accessor.offset(VTOFFSET.pickupAlt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
  ///  Example: /// Example: 10.1234
  ///  Constraints: No constraints specified.
  public var ce: Double { let o = _accessor.offset(VTOFFSET.ce.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Height above lat/lon point, in meters (1-sigma, if representing linear error).
  ///  Example: /// Example: 5.1234
  ///  Constraints: No constraints specified.
  public var le: Double { let o = _accessor.offset(VTOFFSET.le.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Short description of the terrain features of the pickup location (WOODS, TREES, PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL, SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
  ///  Example: /// Example: ROCKY
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var terrain: String? { let o = _accessor.offset(VTOFFSET.terrain.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var terrainSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.terrain.v) }
  ///  Amplifying data for the terrain describing important obstacles in or around the zone.
  ///  Example: /// Example: N/A
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var obstaclesRemarks: String? { let o = _accessor.offset(VTOFFSET.obstaclesRemarks.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obstaclesRemarksSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obstaclesRemarks.v) }
  ///  Amplifying data for the terrain describing any notable additional terrain features.
  ///  Example: /// Example: N/A
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var terrainRemarks: String? { let o = _accessor.offset(VTOFFSET.terrainRemarks.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var terrainRemarksSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.terrainRemarks.v) }
  ///  The name of the zone.
  ///  Example: /// Example: example-zone
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var zoneName: String? { let o = _accessor.offset(VTOFFSET.zoneName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var zoneNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.zoneName.v) }
  ///  The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES, MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER DESIGNATOR,  STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS, INFRARED, ILLUMINATION, FRATRICIDE FENCE).
  ///  Example: /// Example: ILLUMINATION
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var zoneMarking: String? { let o = _accessor.offset(VTOFFSET.zoneMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var zoneMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.zoneMarking.v) }
  ///  The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
  ///  Example: /// Example: NO ENEMY
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var zoneSecurity: String? { let o = _accessor.offset(VTOFFSET.zoneSecurity.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var zoneSecuritySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.zoneSecurity.v) }
  ///  Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE, BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
  ///  Example: /// Example: RED
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var zoneMarkingColor: String? { let o = _accessor.offset(VTOFFSET.zoneMarkingColor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var zoneMarkingColorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.zoneMarkingColor.v) }
  ///  Flag indicating that the pickup site is hot and hostiles are in the area.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var zoneHot: Bool { let o = _accessor.offset(VTOFFSET.zoneHot.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The contact frequency, in Hz, of the agency or zone controller.
  ///  Example: /// Example: 3.11
  ///  Constraints: No constraints specified.
  public var cntctFreq: Double { let o = _accessor.offset(VTOFFSET.cntctFreq.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The call sign of the zone controller.
  ///  Example: /// Example: Tango
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var zoneContrCallSign: String? { let o = _accessor.offset(VTOFFSET.zoneContrCallSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var zoneContrCallSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.zoneContrCallSign.v) }
  ///  The count of people requiring medevac.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var numCasualties: Int32 { let o = _accessor.offset(VTOFFSET.numCasualties.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Additional comments for the medevac mission.
  ///  Example: /// Example: Comments concerning mission
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var comments: String? { let o = _accessor.offset(VTOFFSET.comments.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var commentsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.comments.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasCasualtyInfo: Bool { let o = _accessor.offset(VTOFFSET.casualtyInfo.v); return o == 0 ? false : true }
  public var casualtyInfoCount: Int32 { let o = _accessor.offset(VTOFFSET.casualtyInfo.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func casualtyInfo(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.casualtyInfo.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasEnemyData: Bool { let o = _accessor.offset(VTOFFSET.enemyData.v); return o == 0 ? false : true }
  public var enemyDataCount: Int32 { let o = _accessor.offset(VTOFFSET.enemyData.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func enemyData(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.enemyData.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Related document ids.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasRelatedDocs: Bool { let o = _accessor.offset(VTOFFSET.relatedDocs.v); return o == 0 ? false : true }
  public var relatedDocsCount: Int32 { let o = _accessor.offset(VTOFFSET.relatedDocs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func relatedDocs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.relatedDocs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Evac_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Evac_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startEvac_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 41) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(medevacId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: medevacId, at: VTOFFSET.medevacId.p) }
  public static func add(type: Evac_Full_type_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: type.rawValue, def: 0, at: VTOFFSET.type.p) }
  public static func add(missionType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: missionType, at: VTOFFSET.missionType.p) }
  public static func add(idWeatherReport: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idWeatherReport, at: VTOFFSET.idWeatherReport.p) }
  public static func add(numKia: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numKia, def: 0, at: VTOFFSET.numKia.p) }
  public static func add(numWia: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numWia, def: 0, at: VTOFFSET.numWia.p) }
  public static func add(numLitter: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numLitter, def: 0, at: VTOFFSET.numLitter.p) }
  public static func add(numAmbulatory: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numAmbulatory, def: 0, at: VTOFFSET.numAmbulatory.p) }
  public static func add(medicReq: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: medicReq, def: false,
   at: VTOFFSET.medicReq.p) }
  public static func add(reqNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reqNum, at: VTOFFSET.reqNum.p) }
  public static func add(reqTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reqTime, at: VTOFFSET.reqTime.p) }
  public static func add(reqCallSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reqCallSign, at: VTOFFSET.reqCallSign.p) }
  public static func add(pickupTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pickupTime, at: VTOFFSET.pickupTime.p) }
  public static func add(pickupLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pickupLat, def: 0.0, at: VTOFFSET.pickupLat.p) }
  public static func add(pickupLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pickupLon, def: 0.0, at: VTOFFSET.pickupLon.p) }
  public static func add(pickupAlt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pickupAlt, def: 0.0, at: VTOFFSET.pickupAlt.p) }
  public static func add(ce: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ce, def: 0.0, at: VTOFFSET.ce.p) }
  public static func add(le: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: le, def: 0.0, at: VTOFFSET.le.p) }
  public static func add(terrain: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: terrain, at: VTOFFSET.terrain.p) }
  public static func add(obstaclesRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obstaclesRemarks, at: VTOFFSET.obstaclesRemarks.p) }
  public static func add(terrainRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: terrainRemarks, at: VTOFFSET.terrainRemarks.p) }
  public static func add(zoneName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: zoneName, at: VTOFFSET.zoneName.p) }
  public static func add(zoneMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: zoneMarking, at: VTOFFSET.zoneMarking.p) }
  public static func add(zoneSecurity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: zoneSecurity, at: VTOFFSET.zoneSecurity.p) }
  public static func add(zoneMarkingColor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: zoneMarkingColor, at: VTOFFSET.zoneMarkingColor.p) }
  public static func add(zoneHot: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: zoneHot, def: false,
   at: VTOFFSET.zoneHot.p) }
  public static func add(cntctFreq: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cntctFreq, def: 0.0, at: VTOFFSET.cntctFreq.p) }
  public static func add(zoneContrCallSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: zoneContrCallSign, at: VTOFFSET.zoneContrCallSign.p) }
  public static func add(numCasualties: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numCasualties, def: 0, at: VTOFFSET.numCasualties.p) }
  public static func add(comments: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: comments, at: VTOFFSET.comments.p) }
  public static func addVectorOf(casualtyInfo: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: casualtyInfo, at: VTOFFSET.casualtyInfo.p) }
  public static func addVectorOf(enemyData: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: enemyData, at: VTOFFSET.enemyData.p) }
  public static func addVectorOf(relatedDocs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relatedDocs, at: VTOFFSET.relatedDocs.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: Evac_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endEvac_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEvac_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    medevacIdOffset medevacId: Offset = Offset(),
    type: Evac_Full_type_Enum = .request,
    missionTypeOffset missionType: Offset = Offset(),
    idWeatherReportOffset idWeatherReport: Offset = Offset(),
    numKia: Int32 = 0,
    numWia: Int32 = 0,
    numLitter: Int32 = 0,
    numAmbulatory: Int32 = 0,
    medicReq: Bool = false,
    reqNumOffset reqNum: Offset = Offset(),
    reqTimeOffset reqTime: Offset = Offset(),
    reqCallSignOffset reqCallSign: Offset = Offset(),
    pickupTimeOffset pickupTime: Offset = Offset(),
    pickupLat: Double = 0.0,
    pickupLon: Double = 0.0,
    pickupAlt: Double = 0.0,
    ce: Double = 0.0,
    le: Double = 0.0,
    terrainOffset terrain: Offset = Offset(),
    obstaclesRemarksOffset obstaclesRemarks: Offset = Offset(),
    terrainRemarksOffset terrainRemarks: Offset = Offset(),
    zoneNameOffset zoneName: Offset = Offset(),
    zoneMarkingOffset zoneMarking: Offset = Offset(),
    zoneSecurityOffset zoneSecurity: Offset = Offset(),
    zoneMarkingColorOffset zoneMarkingColor: Offset = Offset(),
    zoneHot: Bool = false,
    cntctFreq: Double = 0.0,
    zoneContrCallSignOffset zoneContrCallSign: Offset = Offset(),
    numCasualties: Int32 = 0,
    commentsOffset comments: Offset = Offset(),
    casualtyInfoVectorOffset casualtyInfo: Offset = Offset(),
    enemyDataVectorOffset enemyData: Offset = Offset(),
    relatedDocsVectorOffset relatedDocs: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: Evac_Full_dataMode_Enum = .real
  ) -> Offset {
    let __start = Evac_Full.startEvac_Full(&fbb)
    Evac_Full.add(id: id, &fbb)
    Evac_Full.add(classificationMarking: classificationMarking, &fbb)
    Evac_Full.add(medevacId: medevacId, &fbb)
    Evac_Full.add(type: type, &fbb)
    Evac_Full.add(missionType: missionType, &fbb)
    Evac_Full.add(idWeatherReport: idWeatherReport, &fbb)
    Evac_Full.add(numKia: numKia, &fbb)
    Evac_Full.add(numWia: numWia, &fbb)
    Evac_Full.add(numLitter: numLitter, &fbb)
    Evac_Full.add(numAmbulatory: numAmbulatory, &fbb)
    Evac_Full.add(medicReq: medicReq, &fbb)
    Evac_Full.add(reqNum: reqNum, &fbb)
    Evac_Full.add(reqTime: reqTime, &fbb)
    Evac_Full.add(reqCallSign: reqCallSign, &fbb)
    Evac_Full.add(pickupTime: pickupTime, &fbb)
    Evac_Full.add(pickupLat: pickupLat, &fbb)
    Evac_Full.add(pickupLon: pickupLon, &fbb)
    Evac_Full.add(pickupAlt: pickupAlt, &fbb)
    Evac_Full.add(ce: ce, &fbb)
    Evac_Full.add(le: le, &fbb)
    Evac_Full.add(terrain: terrain, &fbb)
    Evac_Full.add(obstaclesRemarks: obstaclesRemarks, &fbb)
    Evac_Full.add(terrainRemarks: terrainRemarks, &fbb)
    Evac_Full.add(zoneName: zoneName, &fbb)
    Evac_Full.add(zoneMarking: zoneMarking, &fbb)
    Evac_Full.add(zoneSecurity: zoneSecurity, &fbb)
    Evac_Full.add(zoneMarkingColor: zoneMarkingColor, &fbb)
    Evac_Full.add(zoneHot: zoneHot, &fbb)
    Evac_Full.add(cntctFreq: cntctFreq, &fbb)
    Evac_Full.add(zoneContrCallSign: zoneContrCallSign, &fbb)
    Evac_Full.add(numCasualties: numCasualties, &fbb)
    Evac_Full.add(comments: comments, &fbb)
    Evac_Full.addVectorOf(casualtyInfo: casualtyInfo, &fbb)
    Evac_Full.addVectorOf(enemyData: enemyData, &fbb)
    Evac_Full.addVectorOf(relatedDocs: relatedDocs, &fbb)
    Evac_Full.add(origNetwork: origNetwork, &fbb)
    Evac_Full.add(createdAt: createdAt, &fbb)
    Evac_Full.add(createdBy: createdBy, &fbb)
    Evac_Full.add(source: source, &fbb)
    Evac_Full.add(origin: origin, &fbb)
    Evac_Full.add(dataMode: dataMode, &fbb)
    return Evac_Full.endEvac_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.medevacId.p, fieldName: "medevacId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: Evac_Full_type_Enum.self)
    try _v.visit(field: VTOFFSET.missionType.p, fieldName: "missionType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idWeatherReport.p, fieldName: "idWeatherReport", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numKia.p, fieldName: "numKia", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numWia.p, fieldName: "numWia", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numLitter.p, fieldName: "numLitter", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numAmbulatory.p, fieldName: "numAmbulatory", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.medicReq.p, fieldName: "medicReq", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.reqNum.p, fieldName: "reqNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reqTime.p, fieldName: "reqTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reqCallSign.p, fieldName: "reqCallSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pickupTime.p, fieldName: "pickupTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pickupLat.p, fieldName: "pickupLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pickupLon.p, fieldName: "pickupLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pickupAlt.p, fieldName: "pickupAlt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ce.p, fieldName: "ce", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.le.p, fieldName: "le", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.terrain.p, fieldName: "terrain", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obstaclesRemarks.p, fieldName: "obstaclesRemarks", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.terrainRemarks.p, fieldName: "terrainRemarks", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.zoneName.p, fieldName: "zoneName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.zoneMarking.p, fieldName: "zoneMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.zoneSecurity.p, fieldName: "zoneSecurity", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.zoneMarkingColor.p, fieldName: "zoneMarkingColor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.zoneHot.p, fieldName: "zoneHot", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.cntctFreq.p, fieldName: "cntctFreq", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.zoneContrCallSign.p, fieldName: "zoneContrCallSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numCasualties.p, fieldName: "numCasualties", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.comments.p, fieldName: "comments", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.casualtyInfo.p, fieldName: "casualtyInfo", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.enemyData.p, fieldName: "enemyData", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.relatedDocs.p, fieldName: "relatedDocs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Evac_Full_dataMode_Enum.self)
    _v.finish()
  }
}

