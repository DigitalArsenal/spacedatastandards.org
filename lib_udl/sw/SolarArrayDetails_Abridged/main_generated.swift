// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum SolarArrayDetails_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: SolarArrayDetails_Abridged_dataMode_Enum { return .exercise }
  public static var min: SolarArrayDetails_Abridged_dataMode_Enum { return .real }
}


///  /// Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.
public struct SolarArrayDetails_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SOLA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: SolarArrayDetails_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case idSolarArray = 6
    case classificationMarking = 8
    case type = 10
    case technology = 12
    case junctionTechnology = 14
    case manufacturerOrgId = 16
    case span = 18
    case area = 20
    case description = 22
    case createdAt = 24
    case createdBy = 26
    case source = 28
    case origin = 30
    case origNetwork = 32
    case dataMode = 34
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SOLARARRAYDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Unique identifier of the parent SolarArray.
  ///  Example: /// Example: SOLARARRAY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idSolarArray: String? { let o = _accessor.offset(VTOFFSET.idSolarArray.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSolarArraySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSolarArray.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Type of solar array (e.g. U Shaped).
  ///  Example: /// Example: U Shaped
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Solar array technology (e.g. Ga-As).
  ///  Example: /// Example: Ga-As
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var technology: String? { let o = _accessor.offset(VTOFFSET.technology.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var technologySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.technology.v) }
  ///  Solar array junction technology (e.g. Triple).
  ///  Example: /// Example: Triple
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var junctionTechnology: String? { let o = _accessor.offset(VTOFFSET.junctionTechnology.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var junctionTechnologySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.junctionTechnology.v) }
  ///  Unique identifier of the organization that manufactures the solar array.
  ///  Example: /// Example: MANUFACTURERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var manufacturerOrgId: String? { let o = _accessor.offset(VTOFFSET.manufacturerOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var manufacturerOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.manufacturerOrgId.v) }
  ///  Solar Array span in meters.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var span: Double { let o = _accessor.offset(VTOFFSET.span.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Solar Array area in square meters.
  ///  Example: /// Example: 123.4
  ///  Constraints: No constraints specified.
  public var area: Double { let o = _accessor.offset(VTOFFSET.area.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Solar array description/notes.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  public var description: String? { let o = _accessor.offset(VTOFFSET.description.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.description.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: SolarArrayDetails_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : SolarArrayDetails_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startSolarArrayDetails_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 16) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(idSolarArray: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSolarArray, at: VTOFFSET.idSolarArray.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(technology: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: technology, at: VTOFFSET.technology.p) }
  public static func add(junctionTechnology: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: junctionTechnology, at: VTOFFSET.junctionTechnology.p) }
  public static func add(manufacturerOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: manufacturerOrgId, at: VTOFFSET.manufacturerOrgId.p) }
  public static func add(span: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: span, def: 0.0, at: VTOFFSET.span.p) }
  public static func add(area: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: area, def: 0.0, at: VTOFFSET.area.p) }
  public static func add(description: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: description, at: VTOFFSET.description.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: SolarArrayDetails_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endSolarArrayDetails_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSolarArrayDetails_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    idSolarArrayOffset idSolarArray: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    technologyOffset technology: Offset = Offset(),
    junctionTechnologyOffset junctionTechnology: Offset = Offset(),
    manufacturerOrgIdOffset manufacturerOrgId: Offset = Offset(),
    span: Double = 0.0,
    area: Double = 0.0,
    descriptionOffset description: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: SolarArrayDetails_Abridged_dataMode_Enum = .real
  ) -> Offset {
    let __start = SolarArrayDetails_Abridged.startSolarArrayDetails_Abridged(&fbb)
    SolarArrayDetails_Abridged.add(id: id, &fbb)
    SolarArrayDetails_Abridged.add(idSolarArray: idSolarArray, &fbb)
    SolarArrayDetails_Abridged.add(classificationMarking: classificationMarking, &fbb)
    SolarArrayDetails_Abridged.add(type: type, &fbb)
    SolarArrayDetails_Abridged.add(technology: technology, &fbb)
    SolarArrayDetails_Abridged.add(junctionTechnology: junctionTechnology, &fbb)
    SolarArrayDetails_Abridged.add(manufacturerOrgId: manufacturerOrgId, &fbb)
    SolarArrayDetails_Abridged.add(span: span, &fbb)
    SolarArrayDetails_Abridged.add(area: area, &fbb)
    SolarArrayDetails_Abridged.add(description: description, &fbb)
    SolarArrayDetails_Abridged.add(createdAt: createdAt, &fbb)
    SolarArrayDetails_Abridged.add(createdBy: createdBy, &fbb)
    SolarArrayDetails_Abridged.add(source: source, &fbb)
    SolarArrayDetails_Abridged.add(origin: origin, &fbb)
    SolarArrayDetails_Abridged.add(origNetwork: origNetwork, &fbb)
    SolarArrayDetails_Abridged.add(dataMode: dataMode, &fbb)
    return SolarArrayDetails_Abridged.endSolarArrayDetails_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSolarArray.p, fieldName: "idSolarArray", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.technology.p, fieldName: "technology", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.junctionTechnology.p, fieldName: "junctionTechnology", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.manufacturerOrgId.p, fieldName: "manufacturerOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.span.p, fieldName: "span", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.area.p, fieldName: "area", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.description.p, fieldName: "description", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: SolarArrayDetails_Abridged_dataMode_Enum.self)
    _v.finish()
  }
}

