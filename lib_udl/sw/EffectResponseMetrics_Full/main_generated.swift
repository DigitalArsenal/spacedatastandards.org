// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// List of COA metrics associated with this effect response.
public struct EffectResponseMetrics_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EFFE" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EffectResponseMetrics_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case metricType = 4
    case domainValue = 6
    case relativeValue = 8
    case provenance = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost, Timeliness, Unavailable, etc.).
  ///  Example: /// Example: GoalAchievement
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var metricType: String? { let o = _accessor.offset(VTOFFSET.metricType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var metricTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.metricType.v) }
  ///  The metric score specific to its domain.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var domainValue: Double { let o = _accessor.offset(VTOFFSET.domainValue.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The metric score adjusted to be relative and comparable to other domains.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var relativeValue: Double { let o = _accessor.offset(VTOFFSET.relativeValue.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The metric that was used to score this task.
  ///  Example: /// Example: Example metric
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var provenance: String? { let o = _accessor.offset(VTOFFSET.provenance.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var provenanceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.provenance.v) }
  public static func startEffectResponseMetrics_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(metricType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: metricType, at: VTOFFSET.metricType.p) }
  public static func add(domainValue: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: domainValue, def: 0.0, at: VTOFFSET.domainValue.p) }
  public static func add(relativeValue: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: relativeValue, def: 0.0, at: VTOFFSET.relativeValue.p) }
  public static func add(provenance: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: provenance, at: VTOFFSET.provenance.p) }
  public static func endEffectResponseMetrics_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEffectResponseMetrics_Full(
    _ fbb: inout FlatBufferBuilder,
    metricTypeOffset metricType: Offset = Offset(),
    domainValue: Double = 0.0,
    relativeValue: Double = 0.0,
    provenanceOffset provenance: Offset = Offset()
  ) -> Offset {
    let __start = EffectResponseMetrics_Full.startEffectResponseMetrics_Full(&fbb)
    EffectResponseMetrics_Full.add(metricType: metricType, &fbb)
    EffectResponseMetrics_Full.add(domainValue: domainValue, &fbb)
    EffectResponseMetrics_Full.add(relativeValue: relativeValue, &fbb)
    EffectResponseMetrics_Full.add(provenance: provenance, &fbb)
    return EffectResponseMetrics_Full.endEffectResponseMetrics_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.metricType.p, fieldName: "metricType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.domainValue.p, fieldName: "domainValue", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.relativeValue.p, fieldName: "relativeValue", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.provenance.p, fieldName: "provenance", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

