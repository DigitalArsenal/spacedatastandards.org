// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum EOObservation_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: EOObservation_Abridged_dataMode_Enum { return .exercise }
  public static var min: EOObservation_Abridged_dataMode_Enum { return .real }
}


public enum EOObservation_Abridged_referenceFrame_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case j2000 = 0
  ///  No description available.
  case gcrf = 1
  ///  No description available.
  case itrf = 2
  ///  No description available.
  case teme = 3

  public static var max: EOObservation_Abridged_referenceFrame_Enum { return .teme }
  public static var min: EOObservation_Abridged_referenceFrame_Enum { return .j2000 }
}


public enum EOObservation_Abridged_senReferenceFrame_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case j2000 = 0
  ///  No description available.
  case efgTdr = 1
  ///  No description available.
  case ecrEcef = 2
  ///  No description available.
  case teme = 3
  ///  No description available.
  case itrf = 4
  ///  No description available.
  case gcrf = 5

  public static var max: EOObservation_Abridged_senReferenceFrame_Enum { return .gcrf }
  public static var min: EOObservation_Abridged_senReferenceFrame_Enum { return .j2000 }
}


///  /// Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.
public struct EOObservation_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EOOB" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EOObservation_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case obTime = 8
    case corrQuality = 10
    case idOnOrbit = 12
    case idSensor = 14
    case idSkyImagery = 16
    case collectMethod = 18
    case satNo = 20
    case taskId = 22
    case transactionId = 24
    case trackId = 26
    case obPosition = 28
    case origObjectId = 30
    case origSensorId = 32
    case uct = 34
    case azimuth = 36
    case azimuthUnc = 38
    case azimuthBias = 40
    case azimuthRate = 42
    case elevation = 44
    case elevationUnc = 46
    case elevationBias = 48
    case elevationRate = 50
    case range = 52
    case rangeUnc = 54
    case rangeBias = 56
    case rangeRate = 58
    case rangeRateUnc = 60
    case ra = 62
    case raRate = 64
    case raUnc = 66
    case raBias = 68
    case declination = 70
    case declinationRate = 72
    case declinationUnc = 74
    case declinationBias = 76
    case losx = 78
    case losy = 80
    case losz = 82
    case losUnc = 84
    case losxvel = 86
    case losyvel = 88
    case loszvel = 90
    case senlat = 92
    case senlon = 94
    case senalt = 96
    case senx = 98
    case seny = 100
    case senz = 102
    case senvelx = 104
    case senvely = 106
    case senvelz = 108
    case senQuat = 110
    case fovCount = 112
    case expDuration = 114
    case zeroptd = 116
    case netObjSig = 118
    case netObjSigUnc = 120
    case mag = 122
    case magUnc = 124
    case magNormRange = 126
    case geolat = 128
    case geolon = 130
    case geoalt = 132
    case georange = 134
    case skyBkgrnd = 136
    case primaryExtinction = 138
    case primaryExtinctionUnc = 140
    case solarPhaseAngle = 142
    case solarEqPhaseAngle = 144
    case solarDecAngle = 146
    case shutterDelay = 148
    case timingBias = 150
    case rawFileUri = 152
    case intensity = 154
    case bgIntensity = 156
    case descriptor = 158
    case source = 160
    case origin = 162
    case dataMode = 164
    case createdAt = 166
    case createdBy = 168
    case referenceFrame = 170
    case senReferenceFrame = 172
    case umbra = 174
    case penumbra = 176
    case origNetwork = 178
    case sourceDl = 180
    case type = 182
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: EOOBSERVATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Ob detection time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var obTime: String? { let o = _accessor.offset(VTOFFSET.obTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obTime.v) }
  ///  Object Correlation Quality value (non-standardized). Users should consult data providers regarding the expected range of values.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var corrQuality: Double { let o = _accessor.offset(VTOFFSET.corrQuality.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Unique identifier of the target on-orbit object, if correlated.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Unique identifier of the reporting sensor.
  ///  Example: /// Example: SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Unique identifier of the Sky Imagery.
  ///  Example: /// Example: SKYIMAGERY-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSkyImagery: String? { let o = _accessor.offset(VTOFFSET.idSkyImagery.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSkyImagerySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSkyImagery.v) }
  ///  Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
  ///  Example: /// Example: AUTOTRACK
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var collectMethod: String? { let o = _accessor.offset(VTOFFSET.collectMethod.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var collectMethodSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.collectMethod.v) }
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional identifier to indicate the specific tasking which produced this observation.
  ///  Example: /// Example: TASK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var taskId: String? { let o = _accessor.offset(VTOFFSET.taskId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var taskIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.taskId.v) }
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var transactionId: String? { let o = _accessor.offset(VTOFFSET.transactionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transactionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transactionId.v) }
  ///  Optional identifier of the track to which this observation belongs.
  ///  Example: /// Example: TRACK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var trackId: String? { let o = _accessor.offset(VTOFFSET.trackId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var trackIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.trackId.v) }
  ///  The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
  ///  Example: /// Example: FIRST
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var obPosition: String? { let o = _accessor.offset(VTOFFSET.obPosition.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obPositionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obPosition.v) }
  ///  Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origSensorId: String? { let o = _accessor.offset(VTOFFSET.origSensorId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSensorIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSensorId.v) }
  ///  Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var uct: Bool { let o = _accessor.offset(VTOFFSET.uct.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Line of sight azimuth angle in degrees and topocentric frame.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var azimuth: Double { let o = _accessor.offset(VTOFFSET.azimuth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the line of sight azimuth angle, in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var azimuthUnc: Double { let o = _accessor.offset(VTOFFSET.azimuthUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor line of sight azimuth angle bias in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var azimuthBias: Double { let o = _accessor.offset(VTOFFSET.azimuthBias.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Rate of change of the line of sight azimuth in degrees per second.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var azimuthRate: Double { let o = _accessor.offset(VTOFFSET.azimuthRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line of sight elevation in degrees and topocentric frame.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var elevation: Double { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the line of sight elevation angle, in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var elevationUnc: Double { let o = _accessor.offset(VTOFFSET.elevationUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor line of sight elevation bias in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var elevationBias: Double { let o = _accessor.offset(VTOFFSET.elevationBias.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Rate of change of the line of sight elevation in degrees per second.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var elevationRate: Double { let o = _accessor.offset(VTOFFSET.elevationRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line of sight range in km.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var range: Double { let o = _accessor.offset(VTOFFSET.range.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the line of sight range, in kilometers.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var rangeUnc: Double { let o = _accessor.offset(VTOFFSET.rangeUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor line of sight range bias in km.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var rangeBias: Double { let o = _accessor.offset(VTOFFSET.rangeBias.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Rate of change of the line of sight range in km/sec.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var rangeRate: Double { let o = _accessor.offset(VTOFFSET.rangeRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the line of sight range rate, in kilometers/second.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var rangeRateUnc: Double { let o = _accessor.offset(VTOFFSET.rangeRateUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line of sight right ascension, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var ra: Double { let o = _accessor.offset(VTOFFSET.ra.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var raRate: Double { let o = _accessor.offset(VTOFFSET.raRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the line of sight right ascension angle, in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var raUnc: Double { let o = _accessor.offset(VTOFFSET.raUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor line of sight right ascension bias in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var raBias: Double { let o = _accessor.offset(VTOFFSET.raBias.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line of sight declination, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var declination: Double { let o = _accessor.offset(VTOFFSET.declination.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var declinationRate: Double { let o = _accessor.offset(VTOFFSET.declinationRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the line of sight declination angle, in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var declinationUnc: Double { let o = _accessor.offset(VTOFFSET.declinationUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor line of sight declination angle bias in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var declinationBias: Double { let o = _accessor.offset(VTOFFSET.declinationBias.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var losx: Double { let o = _accessor.offset(VTOFFSET.losx.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var losy: Double { let o = _accessor.offset(VTOFFSET.losy.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var losz: Double { let o = _accessor.offset(VTOFFSET.losz.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One sigma uncertainty in the line of sight pointing in micro-radians.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var losUnc: Double { let o = _accessor.offset(VTOFFSET.losUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var losxvel: Double { let o = _accessor.offset(VTOFFSET.losxvel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var losyvel: Double { let o = _accessor.offset(VTOFFSET.losyvel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var loszvel: Double { let o = _accessor.offset(VTOFFSET.loszvel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  public var senlat: Double { let o = _accessor.offset(VTOFFSET.senlat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  public var senlon: Double { let o = _accessor.offset(VTOFFSET.senlon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor altitude at obTime (if mobile/onorbit) in km.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var senalt: Double { let o = _accessor.offset(VTOFFSET.senalt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var senx: Double { let o = _accessor.offset(VTOFFSET.senx.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var seny: Double { let o = _accessor.offset(VTOFFSET.seny.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var senz: Double { let o = _accessor.offset(VTOFFSET.senz.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var senvelx: Double { let o = _accessor.offset(VTOFFSET.senvelx.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var senvely: Double { let o = _accessor.offset(VTOFFSET.senvely.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var senvelz: Double { let o = _accessor.offset(VTOFFSET.senvelz.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).
  ///  Example: /// Example: [0.4492, 0.02, 0.8765, 0.2213]
  ///  Constraints: No constraints specified.
  public var hasSenQuat: Bool { let o = _accessor.offset(VTOFFSET.senQuat.v); return o == 0 ? false : true }
  public var senQuatCount: Int32 { let o = _accessor.offset(VTOFFSET.senQuat.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func senQuat(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.senQuat.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The number of RSOs detected in the sensor field of view.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var fovCount: Int32 { let o = _accessor.offset(VTOFFSET.fovCount.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Image exposure duration in seconds.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var expDuration: Double { let o = _accessor.offset(VTOFFSET.expDuration.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Formula: 2.5 * log_10 (zero_mag_counts / expDuration).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var zeroptd: Double { let o = _accessor.offset(VTOFFSET.zeroptd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Net object signature = counts / expDuration.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var netObjSig: Double { let o = _accessor.offset(VTOFFSET.netObjSig.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Net object signature uncertainty = counts uncertainty / expDuration.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var netObjSigUnc: Double { let o = _accessor.offset(VTOFFSET.netObjSigUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Calibrated magnitude in units of magnitudes.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var mag: Double { let o = _accessor.offset(VTOFFSET.mag.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Uncertainty of calibrated magnitude in units of magnitudes.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var magUnc: Double { let o = _accessor.offset(VTOFFSET.magUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Formula: mag - 5.0 * log_10(geo_range / 1000000.0).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var magNormRange: Double { let o = _accessor.offset(VTOFFSET.magNormRange.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  For GEO detections, the latitude in degrees north.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var geolat: Double { let o = _accessor.offset(VTOFFSET.geolat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  For GEO detections, the longitude in degrees east.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var geolon: Double { let o = _accessor.offset(VTOFFSET.geolon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  For GEO detections, the altitude in km.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var geoalt: Double { let o = _accessor.offset(VTOFFSET.geoalt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  For GEO detections, the range in km.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var georange: Double { let o = _accessor.offset(VTOFFSET.georange.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var skyBkgrnd: Double { let o = _accessor.offset(VTOFFSET.skyBkgrnd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var primaryExtinction: Double { let o = _accessor.offset(VTOFFSET.primaryExtinction.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Primary Extinction Coefficient Uncertainty, in Magnitudes.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var primaryExtinctionUnc: Double { let o = _accessor.offset(VTOFFSET.primaryExtinctionUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var solarPhaseAngle: Double { let o = _accessor.offset(VTOFFSET.solarPhaseAngle.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing and positive when opening.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var solarEqPhaseAngle: Double { let o = _accessor.offset(VTOFFSET.solarEqPhaseAngle.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Angle from the sun to the equatorial plane.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var solarDecAngle: Double { let o = _accessor.offset(VTOFFSET.solarDecAngle.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Shutter delay in seconds.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var shutterDelay: Double { let o = _accessor.offset(VTOFFSET.shutterDelay.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Sensor timing bias in seconds.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var timingBias: Double { let o = _accessor.offset(VTOFFSET.timingBias.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var rawFileUri: String? { let o = _accessor.offset(VTOFFSET.rawFileUri.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rawFileUriSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rawFileUri.v) }
  ///  Intensity of the target for IR observations, in kw/sr/um.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var intensity: Double { let o = _accessor.offset(VTOFFSET.intensity.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Background intensity for IR observations, in kw/sr/um.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  public var bgIntensity: Double { let o = _accessor.offset(VTOFFSET.bgIntensity.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: PROVIDED_DATA1
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var descriptor: String? { let o = _accessor.offset(VTOFFSET.descriptor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.descriptor.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: EOObservation_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : EOObservation_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var referenceFrame: EOObservation_Abridged_referenceFrame_Enum { let o = _accessor.offset(VTOFFSET.referenceFrame.v); return o == 0 ? .j2000 : EOObservation_Abridged_referenceFrame_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .j2000 }
  ///  The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var senReferenceFrame: EOObservation_Abridged_senReferenceFrame_Enum { let o = _accessor.offset(VTOFFSET.senReferenceFrame.v); return o == 0 ? .j2000 : EOObservation_Abridged_senReferenceFrame_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .j2000 }
  ///  Boolean indicating that the target object was in umbral eclipse at the time of this observation.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var umbra: Bool { let o = _accessor.offset(VTOFFSET.umbra.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var penumbra: Bool { let o = _accessor.offset(VTOFFSET.penumbra.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
  ///  Example: /// Example: OPTICAL
  ///  Constraints: No constraints specified.
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  public static func startEOObservation_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 90) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(obTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obTime, at: VTOFFSET.obTime.p) }
  public static func add(corrQuality: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: corrQuality, def: 0.0, at: VTOFFSET.corrQuality.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(idSkyImagery: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSkyImagery, at: VTOFFSET.idSkyImagery.p) }
  public static func add(collectMethod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: collectMethod, at: VTOFFSET.collectMethod.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(taskId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: taskId, at: VTOFFSET.taskId.p) }
  public static func add(transactionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transactionId, at: VTOFFSET.transactionId.p) }
  public static func add(trackId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trackId, at: VTOFFSET.trackId.p) }
  public static func add(obPosition: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obPosition, at: VTOFFSET.obPosition.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(origSensorId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSensorId, at: VTOFFSET.origSensorId.p) }
  public static func add(uct: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: uct, def: false,
   at: VTOFFSET.uct.p) }
  public static func add(azimuth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuth, def: 0.0, at: VTOFFSET.azimuth.p) }
  public static func add(azimuthUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuthUnc, def: 0.0, at: VTOFFSET.azimuthUnc.p) }
  public static func add(azimuthBias: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuthBias, def: 0.0, at: VTOFFSET.azimuthBias.p) }
  public static func add(azimuthRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuthRate, def: 0.0, at: VTOFFSET.azimuthRate.p) }
  public static func add(elevation: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func add(elevationUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevationUnc, def: 0.0, at: VTOFFSET.elevationUnc.p) }
  public static func add(elevationBias: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevationBias, def: 0.0, at: VTOFFSET.elevationBias.p) }
  public static func add(elevationRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevationRate, def: 0.0, at: VTOFFSET.elevationRate.p) }
  public static func add(range: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: range, def: 0.0, at: VTOFFSET.range.p) }
  public static func add(rangeUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rangeUnc, def: 0.0, at: VTOFFSET.rangeUnc.p) }
  public static func add(rangeBias: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rangeBias, def: 0.0, at: VTOFFSET.rangeBias.p) }
  public static func add(rangeRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rangeRate, def: 0.0, at: VTOFFSET.rangeRate.p) }
  public static func add(rangeRateUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rangeRateUnc, def: 0.0, at: VTOFFSET.rangeRateUnc.p) }
  public static func add(ra: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ra, def: 0.0, at: VTOFFSET.ra.p) }
  public static func add(raRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: raRate, def: 0.0, at: VTOFFSET.raRate.p) }
  public static func add(raUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: raUnc, def: 0.0, at: VTOFFSET.raUnc.p) }
  public static func add(raBias: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: raBias, def: 0.0, at: VTOFFSET.raBias.p) }
  public static func add(declination: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: declination, def: 0.0, at: VTOFFSET.declination.p) }
  public static func add(declinationRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: declinationRate, def: 0.0, at: VTOFFSET.declinationRate.p) }
  public static func add(declinationUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: declinationUnc, def: 0.0, at: VTOFFSET.declinationUnc.p) }
  public static func add(declinationBias: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: declinationBias, def: 0.0, at: VTOFFSET.declinationBias.p) }
  public static func add(losx: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: losx, def: 0.0, at: VTOFFSET.losx.p) }
  public static func add(losy: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: losy, def: 0.0, at: VTOFFSET.losy.p) }
  public static func add(losz: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: losz, def: 0.0, at: VTOFFSET.losz.p) }
  public static func add(losUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: losUnc, def: 0.0, at: VTOFFSET.losUnc.p) }
  public static func add(losxvel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: losxvel, def: 0.0, at: VTOFFSET.losxvel.p) }
  public static func add(losyvel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: losyvel, def: 0.0, at: VTOFFSET.losyvel.p) }
  public static func add(loszvel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: loszvel, def: 0.0, at: VTOFFSET.loszvel.p) }
  public static func add(senlat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senlat, def: 0.0, at: VTOFFSET.senlat.p) }
  public static func add(senlon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senlon, def: 0.0, at: VTOFFSET.senlon.p) }
  public static func add(senalt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senalt, def: 0.0, at: VTOFFSET.senalt.p) }
  public static func add(senx: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senx, def: 0.0, at: VTOFFSET.senx.p) }
  public static func add(seny: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: seny, def: 0.0, at: VTOFFSET.seny.p) }
  public static func add(senz: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senz, def: 0.0, at: VTOFFSET.senz.p) }
  public static func add(senvelx: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senvelx, def: 0.0, at: VTOFFSET.senvelx.p) }
  public static func add(senvely: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senvely, def: 0.0, at: VTOFFSET.senvely.p) }
  public static func add(senvelz: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senvelz, def: 0.0, at: VTOFFSET.senvelz.p) }
  public static func addVectorOf(senQuat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: senQuat, at: VTOFFSET.senQuat.p) }
  public static func add(fovCount: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fovCount, def: 0, at: VTOFFSET.fovCount.p) }
  public static func add(expDuration: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: expDuration, def: 0.0, at: VTOFFSET.expDuration.p) }
  public static func add(zeroptd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: zeroptd, def: 0.0, at: VTOFFSET.zeroptd.p) }
  public static func add(netObjSig: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: netObjSig, def: 0.0, at: VTOFFSET.netObjSig.p) }
  public static func add(netObjSigUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: netObjSigUnc, def: 0.0, at: VTOFFSET.netObjSigUnc.p) }
  public static func add(mag: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: mag, def: 0.0, at: VTOFFSET.mag.p) }
  public static func add(magUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: magUnc, def: 0.0, at: VTOFFSET.magUnc.p) }
  public static func add(magNormRange: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: magNormRange, def: 0.0, at: VTOFFSET.magNormRange.p) }
  public static func add(geolat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: geolat, def: 0.0, at: VTOFFSET.geolat.p) }
  public static func add(geolon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: geolon, def: 0.0, at: VTOFFSET.geolon.p) }
  public static func add(geoalt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: geoalt, def: 0.0, at: VTOFFSET.geoalt.p) }
  public static func add(georange: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: georange, def: 0.0, at: VTOFFSET.georange.p) }
  public static func add(skyBkgrnd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: skyBkgrnd, def: 0.0, at: VTOFFSET.skyBkgrnd.p) }
  public static func add(primaryExtinction: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: primaryExtinction, def: 0.0, at: VTOFFSET.primaryExtinction.p) }
  public static func add(primaryExtinctionUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: primaryExtinctionUnc, def: 0.0, at: VTOFFSET.primaryExtinctionUnc.p) }
  public static func add(solarPhaseAngle: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: solarPhaseAngle, def: 0.0, at: VTOFFSET.solarPhaseAngle.p) }
  public static func add(solarEqPhaseAngle: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: solarEqPhaseAngle, def: 0.0, at: VTOFFSET.solarEqPhaseAngle.p) }
  public static func add(solarDecAngle: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: solarDecAngle, def: 0.0, at: VTOFFSET.solarDecAngle.p) }
  public static func add(shutterDelay: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: shutterDelay, def: 0.0, at: VTOFFSET.shutterDelay.p) }
  public static func add(timingBias: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: timingBias, def: 0.0, at: VTOFFSET.timingBias.p) }
  public static func add(rawFileUri: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rawFileUri, at: VTOFFSET.rawFileUri.p) }
  public static func add(intensity: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: intensity, def: 0.0, at: VTOFFSET.intensity.p) }
  public static func add(bgIntensity: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bgIntensity, def: 0.0, at: VTOFFSET.bgIntensity.p) }
  public static func add(descriptor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: descriptor, at: VTOFFSET.descriptor.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: EOObservation_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(referenceFrame: EOObservation_Abridged_referenceFrame_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: referenceFrame.rawValue, def: 0, at: VTOFFSET.referenceFrame.p) }
  public static func add(senReferenceFrame: EOObservation_Abridged_senReferenceFrame_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senReferenceFrame.rawValue, def: 0, at: VTOFFSET.senReferenceFrame.p) }
  public static func add(umbra: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: umbra, def: false,
   at: VTOFFSET.umbra.p) }
  public static func add(penumbra: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: penumbra, def: false,
   at: VTOFFSET.penumbra.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func endEOObservation_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEOObservation_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    obTimeOffset obTime: Offset = Offset(),
    corrQuality: Double = 0.0,
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    idSkyImageryOffset idSkyImagery: Offset = Offset(),
    collectMethodOffset collectMethod: Offset = Offset(),
    satNo: Int32 = 0,
    taskIdOffset taskId: Offset = Offset(),
    transactionIdOffset transactionId: Offset = Offset(),
    trackIdOffset trackId: Offset = Offset(),
    obPositionOffset obPosition: Offset = Offset(),
    origObjectIdOffset origObjectId: Offset = Offset(),
    origSensorIdOffset origSensorId: Offset = Offset(),
    uct: Bool = false,
    azimuth: Double = 0.0,
    azimuthUnc: Double = 0.0,
    azimuthBias: Double = 0.0,
    azimuthRate: Double = 0.0,
    elevation: Double = 0.0,
    elevationUnc: Double = 0.0,
    elevationBias: Double = 0.0,
    elevationRate: Double = 0.0,
    range: Double = 0.0,
    rangeUnc: Double = 0.0,
    rangeBias: Double = 0.0,
    rangeRate: Double = 0.0,
    rangeRateUnc: Double = 0.0,
    ra: Double = 0.0,
    raRate: Double = 0.0,
    raUnc: Double = 0.0,
    raBias: Double = 0.0,
    declination: Double = 0.0,
    declinationRate: Double = 0.0,
    declinationUnc: Double = 0.0,
    declinationBias: Double = 0.0,
    losx: Double = 0.0,
    losy: Double = 0.0,
    losz: Double = 0.0,
    losUnc: Double = 0.0,
    losxvel: Double = 0.0,
    losyvel: Double = 0.0,
    loszvel: Double = 0.0,
    senlat: Double = 0.0,
    senlon: Double = 0.0,
    senalt: Double = 0.0,
    senx: Double = 0.0,
    seny: Double = 0.0,
    senz: Double = 0.0,
    senvelx: Double = 0.0,
    senvely: Double = 0.0,
    senvelz: Double = 0.0,
    senQuatVectorOffset senQuat: Offset = Offset(),
    fovCount: Int32 = 0,
    expDuration: Double = 0.0,
    zeroptd: Double = 0.0,
    netObjSig: Double = 0.0,
    netObjSigUnc: Double = 0.0,
    mag: Double = 0.0,
    magUnc: Double = 0.0,
    magNormRange: Double = 0.0,
    geolat: Double = 0.0,
    geolon: Double = 0.0,
    geoalt: Double = 0.0,
    georange: Double = 0.0,
    skyBkgrnd: Double = 0.0,
    primaryExtinction: Double = 0.0,
    primaryExtinctionUnc: Double = 0.0,
    solarPhaseAngle: Double = 0.0,
    solarEqPhaseAngle: Double = 0.0,
    solarDecAngle: Double = 0.0,
    shutterDelay: Double = 0.0,
    timingBias: Double = 0.0,
    rawFileUriOffset rawFileUri: Offset = Offset(),
    intensity: Double = 0.0,
    bgIntensity: Double = 0.0,
    descriptorOffset descriptor: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: EOObservation_Abridged_dataMode_Enum = .real,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    referenceFrame: EOObservation_Abridged_referenceFrame_Enum = .j2000,
    senReferenceFrame: EOObservation_Abridged_senReferenceFrame_Enum = .j2000,
    umbra: Bool = false,
    penumbra: Bool = false,
    origNetworkOffset origNetwork: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    typeOffset type: Offset = Offset()
  ) -> Offset {
    let __start = EOObservation_Abridged.startEOObservation_Abridged(&fbb)
    EOObservation_Abridged.add(id: id, &fbb)
    EOObservation_Abridged.add(classificationMarking: classificationMarking, &fbb)
    EOObservation_Abridged.add(obTime: obTime, &fbb)
    EOObservation_Abridged.add(corrQuality: corrQuality, &fbb)
    EOObservation_Abridged.add(idOnOrbit: idOnOrbit, &fbb)
    EOObservation_Abridged.add(idSensor: idSensor, &fbb)
    EOObservation_Abridged.add(idSkyImagery: idSkyImagery, &fbb)
    EOObservation_Abridged.add(collectMethod: collectMethod, &fbb)
    EOObservation_Abridged.add(satNo: satNo, &fbb)
    EOObservation_Abridged.add(taskId: taskId, &fbb)
    EOObservation_Abridged.add(transactionId: transactionId, &fbb)
    EOObservation_Abridged.add(trackId: trackId, &fbb)
    EOObservation_Abridged.add(obPosition: obPosition, &fbb)
    EOObservation_Abridged.add(origObjectId: origObjectId, &fbb)
    EOObservation_Abridged.add(origSensorId: origSensorId, &fbb)
    EOObservation_Abridged.add(uct: uct, &fbb)
    EOObservation_Abridged.add(azimuth: azimuth, &fbb)
    EOObservation_Abridged.add(azimuthUnc: azimuthUnc, &fbb)
    EOObservation_Abridged.add(azimuthBias: azimuthBias, &fbb)
    EOObservation_Abridged.add(azimuthRate: azimuthRate, &fbb)
    EOObservation_Abridged.add(elevation: elevation, &fbb)
    EOObservation_Abridged.add(elevationUnc: elevationUnc, &fbb)
    EOObservation_Abridged.add(elevationBias: elevationBias, &fbb)
    EOObservation_Abridged.add(elevationRate: elevationRate, &fbb)
    EOObservation_Abridged.add(range: range, &fbb)
    EOObservation_Abridged.add(rangeUnc: rangeUnc, &fbb)
    EOObservation_Abridged.add(rangeBias: rangeBias, &fbb)
    EOObservation_Abridged.add(rangeRate: rangeRate, &fbb)
    EOObservation_Abridged.add(rangeRateUnc: rangeRateUnc, &fbb)
    EOObservation_Abridged.add(ra: ra, &fbb)
    EOObservation_Abridged.add(raRate: raRate, &fbb)
    EOObservation_Abridged.add(raUnc: raUnc, &fbb)
    EOObservation_Abridged.add(raBias: raBias, &fbb)
    EOObservation_Abridged.add(declination: declination, &fbb)
    EOObservation_Abridged.add(declinationRate: declinationRate, &fbb)
    EOObservation_Abridged.add(declinationUnc: declinationUnc, &fbb)
    EOObservation_Abridged.add(declinationBias: declinationBias, &fbb)
    EOObservation_Abridged.add(losx: losx, &fbb)
    EOObservation_Abridged.add(losy: losy, &fbb)
    EOObservation_Abridged.add(losz: losz, &fbb)
    EOObservation_Abridged.add(losUnc: losUnc, &fbb)
    EOObservation_Abridged.add(losxvel: losxvel, &fbb)
    EOObservation_Abridged.add(losyvel: losyvel, &fbb)
    EOObservation_Abridged.add(loszvel: loszvel, &fbb)
    EOObservation_Abridged.add(senlat: senlat, &fbb)
    EOObservation_Abridged.add(senlon: senlon, &fbb)
    EOObservation_Abridged.add(senalt: senalt, &fbb)
    EOObservation_Abridged.add(senx: senx, &fbb)
    EOObservation_Abridged.add(seny: seny, &fbb)
    EOObservation_Abridged.add(senz: senz, &fbb)
    EOObservation_Abridged.add(senvelx: senvelx, &fbb)
    EOObservation_Abridged.add(senvely: senvely, &fbb)
    EOObservation_Abridged.add(senvelz: senvelz, &fbb)
    EOObservation_Abridged.addVectorOf(senQuat: senQuat, &fbb)
    EOObservation_Abridged.add(fovCount: fovCount, &fbb)
    EOObservation_Abridged.add(expDuration: expDuration, &fbb)
    EOObservation_Abridged.add(zeroptd: zeroptd, &fbb)
    EOObservation_Abridged.add(netObjSig: netObjSig, &fbb)
    EOObservation_Abridged.add(netObjSigUnc: netObjSigUnc, &fbb)
    EOObservation_Abridged.add(mag: mag, &fbb)
    EOObservation_Abridged.add(magUnc: magUnc, &fbb)
    EOObservation_Abridged.add(magNormRange: magNormRange, &fbb)
    EOObservation_Abridged.add(geolat: geolat, &fbb)
    EOObservation_Abridged.add(geolon: geolon, &fbb)
    EOObservation_Abridged.add(geoalt: geoalt, &fbb)
    EOObservation_Abridged.add(georange: georange, &fbb)
    EOObservation_Abridged.add(skyBkgrnd: skyBkgrnd, &fbb)
    EOObservation_Abridged.add(primaryExtinction: primaryExtinction, &fbb)
    EOObservation_Abridged.add(primaryExtinctionUnc: primaryExtinctionUnc, &fbb)
    EOObservation_Abridged.add(solarPhaseAngle: solarPhaseAngle, &fbb)
    EOObservation_Abridged.add(solarEqPhaseAngle: solarEqPhaseAngle, &fbb)
    EOObservation_Abridged.add(solarDecAngle: solarDecAngle, &fbb)
    EOObservation_Abridged.add(shutterDelay: shutterDelay, &fbb)
    EOObservation_Abridged.add(timingBias: timingBias, &fbb)
    EOObservation_Abridged.add(rawFileUri: rawFileUri, &fbb)
    EOObservation_Abridged.add(intensity: intensity, &fbb)
    EOObservation_Abridged.add(bgIntensity: bgIntensity, &fbb)
    EOObservation_Abridged.add(descriptor: descriptor, &fbb)
    EOObservation_Abridged.add(source: source, &fbb)
    EOObservation_Abridged.add(origin: origin, &fbb)
    EOObservation_Abridged.add(dataMode: dataMode, &fbb)
    EOObservation_Abridged.add(createdAt: createdAt, &fbb)
    EOObservation_Abridged.add(createdBy: createdBy, &fbb)
    EOObservation_Abridged.add(referenceFrame: referenceFrame, &fbb)
    EOObservation_Abridged.add(senReferenceFrame: senReferenceFrame, &fbb)
    EOObservation_Abridged.add(umbra: umbra, &fbb)
    EOObservation_Abridged.add(penumbra: penumbra, &fbb)
    EOObservation_Abridged.add(origNetwork: origNetwork, &fbb)
    EOObservation_Abridged.add(sourceDl: sourceDl, &fbb)
    EOObservation_Abridged.add(type: type, &fbb)
    return EOObservation_Abridged.endEOObservation_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obTime.p, fieldName: "obTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.corrQuality.p, fieldName: "corrQuality", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSkyImagery.p, fieldName: "idSkyImagery", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.collectMethod.p, fieldName: "collectMethod", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.taskId.p, fieldName: "taskId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.transactionId.p, fieldName: "transactionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.trackId.p, fieldName: "trackId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obPosition.p, fieldName: "obPosition", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSensorId.p, fieldName: "origSensorId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.uct.p, fieldName: "uct", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.azimuth.p, fieldName: "azimuth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.azimuthUnc.p, fieldName: "azimuthUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.azimuthBias.p, fieldName: "azimuthBias", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.azimuthRate.p, fieldName: "azimuthRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevationUnc.p, fieldName: "elevationUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevationBias.p, fieldName: "elevationBias", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevationRate.p, fieldName: "elevationRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.range.p, fieldName: "range", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rangeUnc.p, fieldName: "rangeUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rangeBias.p, fieldName: "rangeBias", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rangeRate.p, fieldName: "rangeRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rangeRateUnc.p, fieldName: "rangeRateUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ra.p, fieldName: "ra", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.raRate.p, fieldName: "raRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.raUnc.p, fieldName: "raUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.raBias.p, fieldName: "raBias", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.declination.p, fieldName: "declination", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.declinationRate.p, fieldName: "declinationRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.declinationUnc.p, fieldName: "declinationUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.declinationBias.p, fieldName: "declinationBias", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.losx.p, fieldName: "losx", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.losy.p, fieldName: "losy", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.losz.p, fieldName: "losz", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.losUnc.p, fieldName: "losUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.losxvel.p, fieldName: "losxvel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.losyvel.p, fieldName: "losyvel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.loszvel.p, fieldName: "loszvel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senlat.p, fieldName: "senlat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senlon.p, fieldName: "senlon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senalt.p, fieldName: "senalt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senx.p, fieldName: "senx", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.seny.p, fieldName: "seny", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senz.p, fieldName: "senz", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senvelx.p, fieldName: "senvelx", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senvely.p, fieldName: "senvely", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senvelz.p, fieldName: "senvelz", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senQuat.p, fieldName: "senQuat", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.fovCount.p, fieldName: "fovCount", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.expDuration.p, fieldName: "expDuration", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.zeroptd.p, fieldName: "zeroptd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.netObjSig.p, fieldName: "netObjSig", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.netObjSigUnc.p, fieldName: "netObjSigUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.mag.p, fieldName: "mag", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.magUnc.p, fieldName: "magUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.magNormRange.p, fieldName: "magNormRange", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.geolat.p, fieldName: "geolat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.geolon.p, fieldName: "geolon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.geoalt.p, fieldName: "geoalt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.georange.p, fieldName: "georange", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.skyBkgrnd.p, fieldName: "skyBkgrnd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.primaryExtinction.p, fieldName: "primaryExtinction", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.primaryExtinctionUnc.p, fieldName: "primaryExtinctionUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.solarPhaseAngle.p, fieldName: "solarPhaseAngle", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.solarEqPhaseAngle.p, fieldName: "solarEqPhaseAngle", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.solarDecAngle.p, fieldName: "solarDecAngle", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.shutterDelay.p, fieldName: "shutterDelay", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.timingBias.p, fieldName: "timingBias", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rawFileUri.p, fieldName: "rawFileUri", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.intensity.p, fieldName: "intensity", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bgIntensity.p, fieldName: "bgIntensity", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.descriptor.p, fieldName: "descriptor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: EOObservation_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.referenceFrame.p, fieldName: "referenceFrame", required: false, type: EOObservation_Abridged_referenceFrame_Enum.self)
    try _v.visit(field: VTOFFSET.senReferenceFrame.p, fieldName: "senReferenceFrame", required: false, type: EOObservation_Abridged_senReferenceFrame_Enum.self)
    try _v.visit(field: VTOFFSET.umbra.p, fieldName: "umbra", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.penumbra.p, fieldName: "penumbra", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

