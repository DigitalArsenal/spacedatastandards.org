// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// The group path from transmitter to receiver.
public struct EvacCondition_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EVAC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EvacCondition_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case type = 4
    case bodyPart = 6
    case time = 8
    case comments = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Health condition assessment.  Intended as, but not constrained to, K07.1 Condition Type Enumeration (e.g. ACTIVITY HIGH, ACTIVITY LOW, ACTIVITY MEDIUM, ACTIVITY NONE, AVPU ALERT, AVPU ALTERED MENTAL STATE, AVPU PAIN, AVPU UNRESPONSIVE, etc.).
  ///  Example: /// Example: ACTIVITY LOW
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Body part location or body part referenced in condition.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
  ///  Example: /// Example: ANKLE LEFT FRONT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var bodyPart: String? { let o = _accessor.offset(VTOFFSET.bodyPart.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var bodyPartSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.bodyPart.v) }
  ///  Datetime of the condition diagnosis in ISO 8601 UTC datetime format.
  ///  Example: /// Example: 2021-10-15T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var time: String? { let o = _accessor.offset(VTOFFSET.time.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.time.v) }
  ///  Additional comments on the patient's condition.
  ///  Example: /// Example: Comments on the patient's condition.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var comments: String? { let o = _accessor.offset(VTOFFSET.comments.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var commentsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.comments.v) }
  public static func startEvacCondition_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(bodyPart: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: bodyPart, at: VTOFFSET.bodyPart.p) }
  public static func add(time: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: time, at: VTOFFSET.time.p) }
  public static func add(comments: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: comments, at: VTOFFSET.comments.p) }
  public static func endEvacCondition_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEvacCondition_Ingest(
    _ fbb: inout FlatBufferBuilder,
    typeOffset type: Offset = Offset(),
    bodyPartOffset bodyPart: Offset = Offset(),
    timeOffset time: Offset = Offset(),
    commentsOffset comments: Offset = Offset()
  ) -> Offset {
    let __start = EvacCondition_Ingest.startEvacCondition_Ingest(&fbb)
    EvacCondition_Ingest.add(type: type, &fbb)
    EvacCondition_Ingest.add(bodyPart: bodyPart, &fbb)
    EvacCondition_Ingest.add(time: time, &fbb)
    EvacCondition_Ingest.add(comments: comments, &fbb)
    return EvacCondition_Ingest.endEvacCondition_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.bodyPart.p, fieldName: "bodyPart", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.comments.p, fieldName: "comments", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

