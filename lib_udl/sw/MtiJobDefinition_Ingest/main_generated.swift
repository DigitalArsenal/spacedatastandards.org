// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// The means for the platform to pass information pertaining to the sensor job that will be performed and details of the location parameters (terrain elevation model and geoid model) used in the measurement.
public struct MtiJobDefinition_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "MTIJ" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: MtiJobDefinition_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case j1 = 4
    case j2 = 6
    case j3 = 8
    case j4 = 10
    case j5 = 12
    case j6 = 14
    case j7 = 16
    case j8 = 18
    case j9 = 20
    case j10 = 22
    case j11 = 24
    case j12 = 26
    case j13 = 28
    case j14 = 30
    case j15 = 32
    case j16 = 34
    case j17 = 36
    case j18 = 38
    case j19 = 40
    case j20 = 42
    case j21 = 44
    case j22 = 46
    case j23 = 48
    case j24 = 50
    case j25 = 52
    case j26 = 54
    case j27 = 56
    case j28 = 58
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  A platform assigned number identifying the specific request or task to which the specific dwell pertains.
  ///  Example: /// Example: 1234567890
  ///  Constraints: No constraints specified.
  public var j1: Int64 { let o = _accessor.offset(VTOFFSET.j1.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  ///  The type of sensor or the platform.
  ///  Example: /// Example: TYPE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var j2: String? { let o = _accessor.offset(VTOFFSET.j2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var j2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.j2.v) }
  ///  Identifier of the particular variant of the sensor type.
  ///  Example: /// Example: J3-ID
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var j3: String? { let o = _accessor.offset(VTOFFSET.j3.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var j3SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.j3.v) }
  ///  Flag field indicating whether filtering has been applied to the targets detected within the dwell area.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var j4: Int32 { let o = _accessor.offset(VTOFFSET.j4.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Priority of this tasking request relative to all other active tasking requests scheduled for execution on the specified platform.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var j5: Int32 { let o = _accessor.offset(VTOFFSET.j5.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  North-South position of the first corner (Point A) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var j6: Double { let o = _accessor.offset(VTOFFSET.j6.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///   East-West position of the first corner (Point A) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var j7: Double { let o = _accessor.offset(VTOFFSET.j7.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///   North-South position of the second corner (Point B) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var j8: Double { let o = _accessor.offset(VTOFFSET.j8.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  East-West position of the second corner (Point B) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var j9: Double { let o = _accessor.offset(VTOFFSET.j9.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  North-South position of the third corner (Point C) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var j10: Double { let o = _accessor.offset(VTOFFSET.j10.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  East-West position of the third corner (Point C) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var j11: Double { let o = _accessor.offset(VTOFFSET.j11.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  North-South position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var j12: Double { let o = _accessor.offset(VTOFFSET.j12.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  East-West position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var j13: Double { let o = _accessor.offset(VTOFFSET.j13.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Mode in which the radar will operate for the given job ID.
  ///  Example: /// Example: MODE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var j14: String? { let o = _accessor.offset(VTOFFSET.j14.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var j14SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.j14.v) }
  ///  The nominal revisit interval for the job ID, expressed in deciseconds.  Value of zero, indicates that the sensor is not revisiting the previous area.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  public var j15: Int32 { let o = _accessor.offset(VTOFFSET.j15.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Nominal estimate of the standard deviation in the estimated horizontal (along track) sensor location, expressed in decimeters.   measured along the sensor track direction defined in the Dwell segment.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  public var j16: Int32 { let o = _accessor.offset(VTOFFSET.j16.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Nominal estimate of the standard deviation in the estimated horizontal sensor location, measured orthogonal to the track direction, expressed in decimeters.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  public var j17: Int32 { let o = _accessor.offset(VTOFFSET.j17.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Nominal estimate of the standard deviation of the measured sensor altitude, expressed in decimeters.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  public var j18: Int32 { let o = _accessor.offset(VTOFFSET.j18.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Standard deviation of the estimate of sensor track heading, expressed in degrees.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var j19: Int32 { let o = _accessor.offset(VTOFFSET.j19.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Nominal standard deviation of the estimate of sensor speed, expressed in millimeters per second.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var j20: Int32 { let o = _accessor.offset(VTOFFSET.j20.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Nominal standard deviation of the slant range of the reported detection, expressed in centimeters.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var j21: Int32 { let o = _accessor.offset(VTOFFSET.j21.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Nominal standard deviation of the measured cross angle to the reported detection, expressed in degrees.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var j22: Double { let o = _accessor.offset(VTOFFSET.j22.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Nominal standard deviation of the velocity line-of-sight component, expressed in centimeters per second.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var j23: Int32 { let o = _accessor.offset(VTOFFSET.j23.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Nominal minimum velocity component along the line of sight, which can be detected by the sensor, expressed in decimeters per second.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var j24: Int32 { let o = _accessor.offset(VTOFFSET.j24.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Nominal probability that an unobscured ten square-meter target will be detected within the given area of surveillance.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var j25: Int32 { let o = _accessor.offset(VTOFFSET.j25.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The expected density of False Alarms (FA), expressed as the negative of the decibel value.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var j26: Int32 { let o = _accessor.offset(VTOFFSET.j26.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The terrain elevation model used for developing the target reports.
  ///  Example: /// Example: MODEL
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var j27: String? { let o = _accessor.offset(VTOFFSET.j27.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var j27SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.j27.v) }
  ///  The geoid model used for developing the target reports.
  ///  Example: /// Example: MODEL
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var j28: String? { let o = _accessor.offset(VTOFFSET.j28.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var j28SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.j28.v) }
  public static func startMtiJobDefinition_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 28) }
  public static func add(j1: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j1, def: 0, at: VTOFFSET.j1.p) }
  public static func add(j2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: j2, at: VTOFFSET.j2.p) }
  public static func add(j3: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: j3, at: VTOFFSET.j3.p) }
  public static func add(j4: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j4, def: 0, at: VTOFFSET.j4.p) }
  public static func add(j5: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j5, def: 0, at: VTOFFSET.j5.p) }
  public static func add(j6: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j6, def: 0.0, at: VTOFFSET.j6.p) }
  public static func add(j7: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j7, def: 0.0, at: VTOFFSET.j7.p) }
  public static func add(j8: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j8, def: 0.0, at: VTOFFSET.j8.p) }
  public static func add(j9: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j9, def: 0.0, at: VTOFFSET.j9.p) }
  public static func add(j10: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j10, def: 0.0, at: VTOFFSET.j10.p) }
  public static func add(j11: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j11, def: 0.0, at: VTOFFSET.j11.p) }
  public static func add(j12: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j12, def: 0.0, at: VTOFFSET.j12.p) }
  public static func add(j13: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j13, def: 0.0, at: VTOFFSET.j13.p) }
  public static func add(j14: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: j14, at: VTOFFSET.j14.p) }
  public static func add(j15: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j15, def: 0, at: VTOFFSET.j15.p) }
  public static func add(j16: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j16, def: 0, at: VTOFFSET.j16.p) }
  public static func add(j17: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j17, def: 0, at: VTOFFSET.j17.p) }
  public static func add(j18: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j18, def: 0, at: VTOFFSET.j18.p) }
  public static func add(j19: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j19, def: 0, at: VTOFFSET.j19.p) }
  public static func add(j20: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j20, def: 0, at: VTOFFSET.j20.p) }
  public static func add(j21: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j21, def: 0, at: VTOFFSET.j21.p) }
  public static func add(j22: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j22, def: 0.0, at: VTOFFSET.j22.p) }
  public static func add(j23: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j23, def: 0, at: VTOFFSET.j23.p) }
  public static func add(j24: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j24, def: 0, at: VTOFFSET.j24.p) }
  public static func add(j25: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j25, def: 0, at: VTOFFSET.j25.p) }
  public static func add(j26: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: j26, def: 0, at: VTOFFSET.j26.p) }
  public static func add(j27: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: j27, at: VTOFFSET.j27.p) }
  public static func add(j28: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: j28, at: VTOFFSET.j28.p) }
  public static func endMtiJobDefinition_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMtiJobDefinition_Ingest(
    _ fbb: inout FlatBufferBuilder,
    j1: Int64 = 0,
    j2Offset j2: Offset = Offset(),
    j3Offset j3: Offset = Offset(),
    j4: Int32 = 0,
    j5: Int32 = 0,
    j6: Double = 0.0,
    j7: Double = 0.0,
    j8: Double = 0.0,
    j9: Double = 0.0,
    j10: Double = 0.0,
    j11: Double = 0.0,
    j12: Double = 0.0,
    j13: Double = 0.0,
    j14Offset j14: Offset = Offset(),
    j15: Int32 = 0,
    j16: Int32 = 0,
    j17: Int32 = 0,
    j18: Int32 = 0,
    j19: Int32 = 0,
    j20: Int32 = 0,
    j21: Int32 = 0,
    j22: Double = 0.0,
    j23: Int32 = 0,
    j24: Int32 = 0,
    j25: Int32 = 0,
    j26: Int32 = 0,
    j27Offset j27: Offset = Offset(),
    j28Offset j28: Offset = Offset()
  ) -> Offset {
    let __start = MtiJobDefinition_Ingest.startMtiJobDefinition_Ingest(&fbb)
    MtiJobDefinition_Ingest.add(j1: j1, &fbb)
    MtiJobDefinition_Ingest.add(j2: j2, &fbb)
    MtiJobDefinition_Ingest.add(j3: j3, &fbb)
    MtiJobDefinition_Ingest.add(j4: j4, &fbb)
    MtiJobDefinition_Ingest.add(j5: j5, &fbb)
    MtiJobDefinition_Ingest.add(j6: j6, &fbb)
    MtiJobDefinition_Ingest.add(j7: j7, &fbb)
    MtiJobDefinition_Ingest.add(j8: j8, &fbb)
    MtiJobDefinition_Ingest.add(j9: j9, &fbb)
    MtiJobDefinition_Ingest.add(j10: j10, &fbb)
    MtiJobDefinition_Ingest.add(j11: j11, &fbb)
    MtiJobDefinition_Ingest.add(j12: j12, &fbb)
    MtiJobDefinition_Ingest.add(j13: j13, &fbb)
    MtiJobDefinition_Ingest.add(j14: j14, &fbb)
    MtiJobDefinition_Ingest.add(j15: j15, &fbb)
    MtiJobDefinition_Ingest.add(j16: j16, &fbb)
    MtiJobDefinition_Ingest.add(j17: j17, &fbb)
    MtiJobDefinition_Ingest.add(j18: j18, &fbb)
    MtiJobDefinition_Ingest.add(j19: j19, &fbb)
    MtiJobDefinition_Ingest.add(j20: j20, &fbb)
    MtiJobDefinition_Ingest.add(j21: j21, &fbb)
    MtiJobDefinition_Ingest.add(j22: j22, &fbb)
    MtiJobDefinition_Ingest.add(j23: j23, &fbb)
    MtiJobDefinition_Ingest.add(j24: j24, &fbb)
    MtiJobDefinition_Ingest.add(j25: j25, &fbb)
    MtiJobDefinition_Ingest.add(j26: j26, &fbb)
    MtiJobDefinition_Ingest.add(j27: j27, &fbb)
    MtiJobDefinition_Ingest.add(j28: j28, &fbb)
    return MtiJobDefinition_Ingest.endMtiJobDefinition_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.j1.p, fieldName: "j1", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.j2.p, fieldName: "j2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.j3.p, fieldName: "j3", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.j4.p, fieldName: "j4", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.j5.p, fieldName: "j5", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.j6.p, fieldName: "j6", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.j7.p, fieldName: "j7", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.j8.p, fieldName: "j8", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.j9.p, fieldName: "j9", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.j10.p, fieldName: "j10", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.j11.p, fieldName: "j11", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.j12.p, fieldName: "j12", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.j13.p, fieldName: "j13", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.j14.p, fieldName: "j14", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.j15.p, fieldName: "j15", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.j16.p, fieldName: "j16", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.j17.p, fieldName: "j17", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.j18.p, fieldName: "j18", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.j19.p, fieldName: "j19", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.j20.p, fieldName: "j20", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.j21.p, fieldName: "j21", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.j22.p, fieldName: "j22", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.j23.p, fieldName: "j23", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.j24.p, fieldName: "j24", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.j25.p, fieldName: "j25", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.j26.p, fieldName: "j26", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.j27.p, fieldName: "j27", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.j28.p, fieldName: "j28", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

