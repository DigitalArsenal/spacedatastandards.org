// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum SigAct_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: SigAct_Abridged_dataMode_Enum { return .exercise }
  public static var min: SigAct_Abridged_dataMode_Enum { return .real }
}


///  /// Provides information on the dates, actors, locations, fatalities, and types of all reported political violence and protest events across the world.
public struct SigAct_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SIGA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: SigAct_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case sourceLanguage = 8
    case countryCode = 10
    case city = 12
    case district = 14
    case province = 16
    case lat = 18
    case lon = 20
    case milgrid = 22
    case theater = 24
    case atext = 26
    case agjson = 28
    case atype = 30
    case andims = 32
    case asrid = 34
    case eventStart = 36
    case eventEnd = 38
    case reportDate = 40
    case actors = 42
    case civAbd = 44
    case civDet = 46
    case civKia = 48
    case civWound = 50
    case coalAbd = 52
    case coalDet = 54
    case coalKia = 56
    case coalWound = 58
    case enemyAbd = 60
    case enemyDet = 62
    case enemyKia = 64
    case friendlyAbd = 66
    case friendlyDet = 68
    case friendlyKia = 70
    case friendlyWound = 72
    case hostNatAbd = 74
    case hostNatDet = 76
    case hostNatKia = 78
    case hostNatWound = 80
    case sideAabd = 82
    case sideAdet = 84
    case sideAkia = 86
    case sideAwound = 88
    case sideBabd = 90
    case sideBdet = 92
    case sideBkia = 94
    case sideBwound = 96
    case target = 98
    case eventDescription = 100
    case eventType = 102
    case typeOfAttack = 104
    case complexAttack = 106
    case idNumber = 108
    case confidence = 110
    case accuracy = 112
    case clarity = 114
    case cameoCode = 116
    case cameoBaseCode = 118
    case cameoRootCode = 120
    case goldstein = 122
    case documentSource = 124
    case documentFilename = 126
    case hasAttachment = 128
    case filesize = 130
    case checksumValue = 132
    case repUnit = 134
    case repUnitType = 136
    case repUnitActivity = 138
    case numMentions = 140
    case numSources = 142
    case numArticles = 144
    case avgTone = 146
    case sourceUrl = 148
    case relatedDocs = 150
    case summary = 152
    case notes = 154
    case createdAt = 156
    case createdBy = 158
    case source = 160
    case origin = 162
    case dataMode = 164
    case origNetwork = 166
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SIGACT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The source language of the significant event using the ISO 639-3, 3 character code definition.
  ///  Example: /// Example: eng
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var sourceLanguage: String? { let o = _accessor.offset(VTOFFSET.sourceLanguage.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceLanguageSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceLanguage.v) }
  ///  The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var countryCode: String? { let o = _accessor.offset(VTOFFSET.countryCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var countryCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.countryCode.v) }
  ///  The city in or near which this event occurred.
  ///  Example: /// Example: Austin
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var city: String? { let o = _accessor.offset(VTOFFSET.city.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var citySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.city.v) }
  ///  The district in which this event occurred.
  ///  Example: /// Example: district 12
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var district: String? { let o = _accessor.offset(VTOFFSET.district.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var districtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.district.v) }
  ///  The province in which this event occurred.
  ///  Example: /// Example: Province_Example
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var province: String? { let o = _accessor.offset(VTOFFSET.province.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var provinceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.province.v) }
  ///  WGS-84 centroid latitude of the event location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.31
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 centroid longitude of the event location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 90.23
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
  ///  &nbsp;&nbsp;4Q (grid zone designator, GZD)
  ///  &nbsp;&nbsp;FJ (the 100,000-meter square identifier)
  ///  &nbsp;&nbsp;12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
  ///  Example: /// Example: 4QFJ12345678
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var milgrid: String? { let o = _accessor.offset(VTOFFSET.milgrid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var milgridSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.milgrid.v) }
  ///  Area in which important military events occur or are progressing.  A theater can include the entirety of the airspace, land and sea area that is or that may potentially become involved in war operations.
  ///  Example: /// Example: Kabul
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var theater: String? { let o = _accessor.offset(VTOFFSET.theater.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var theaterSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.theater.v) }
  ///  Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var atext: String? { let o = _accessor.offset(VTOFFSET.atext.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var atextSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.atext.v) }
  ///  Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  ///  Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var agjson: String? { let o = _accessor.offset(VTOFFSET.agjson.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var agjsonSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.agjson.v) }
  ///  Type of region as projected on the ground.
  ///  Example: /// Example: Type1
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var atype: String? { let o = _accessor.offset(VTOFFSET.atype.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var atypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.atype.v) }
  ///  Number of dimensions of the geometry depicted by region.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var andims: Int32 { let o = _accessor.offset(VTOFFSET.andims.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Geographical spatial_ref_sys for region.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var asrid: Int32 { let o = _accessor.offset(VTOFFSET.asrid.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The approximate start time of the event, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:02:03.123Z
  ///  Constraints: No constraints specified.
  public var eventStart: String? { let o = _accessor.offset(VTOFFSET.eventStart.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eventStartSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eventStart.v) }
  ///  The approximate end time of the event, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:02:03.123Z
  ///  Constraints: No constraints specified.
  public var eventEnd: String? { let o = _accessor.offset(VTOFFSET.eventEnd.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eventEndSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eventEnd.v) }
  ///  Date of the report or filing.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var reportDate: String? { let o = _accessor.offset(VTOFFSET.reportDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reportDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reportDate.v) }
  ///  A list of one or more actors involved in the event.
  ///  Example: /// Example: ['US', 'CAN']
  ///  Constraints: No constraints specified.
  public var hasActors: Bool { let o = _accessor.offset(VTOFFSET.actors.v); return o == 0 ? false : true }
  public var actorsCount: Int32 { let o = _accessor.offset(VTOFFSET.actors.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func actors(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.actors.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Number of civilians abducted in the activity.
  ///  Example: /// Example: 423
  ///  Constraints: No constraints specified.
  public var civAbd: Int32 { let o = _accessor.offset(VTOFFSET.civAbd.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of civilians detained in the activity.
  ///  Example: /// Example: 234
  ///  Constraints: No constraints specified.
  public var civDet: Int32 { let o = _accessor.offset(VTOFFSET.civDet.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of civilians killed in the activity.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var civKia: Int32 { let o = _accessor.offset(VTOFFSET.civKia.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of civilians wounded in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var civWound: Int32 { let o = _accessor.offset(VTOFFSET.civWound.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of coalition members abducted in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var coalAbd: Int32 { let o = _accessor.offset(VTOFFSET.coalAbd.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of coalition members detained in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var coalDet: Int32 { let o = _accessor.offset(VTOFFSET.coalDet.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of coalition members killed in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var coalKia: Int32 { let o = _accessor.offset(VTOFFSET.coalKia.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of coalition members wounded in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var coalWound: Int32 { let o = _accessor.offset(VTOFFSET.coalWound.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of enemy combatants abducted in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var enemyAbd: Int32 { let o = _accessor.offset(VTOFFSET.enemyAbd.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of enemy combatants detained in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var enemyDet: Int32 { let o = _accessor.offset(VTOFFSET.enemyDet.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of enemy combatants killed in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var enemyKia: Int32 { let o = _accessor.offset(VTOFFSET.enemyKia.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of friendlies abducted in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var friendlyAbd: Int32 { let o = _accessor.offset(VTOFFSET.friendlyAbd.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of friendlies in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var friendlyDet: Int32 { let o = _accessor.offset(VTOFFSET.friendlyDet.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of friendlies killed in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var friendlyKia: Int32 { let o = _accessor.offset(VTOFFSET.friendlyKia.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of friendlies wounded in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var friendlyWound: Int32 { let o = _accessor.offset(VTOFFSET.friendlyWound.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of Host Nation members abducted in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var hostNatAbd: Int32 { let o = _accessor.offset(VTOFFSET.hostNatAbd.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of Host Nation members detained in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var hostNatDet: Int32 { let o = _accessor.offset(VTOFFSET.hostNatDet.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of Host Nation members killed in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var hostNatKia: Int32 { let o = _accessor.offset(VTOFFSET.hostNatKia.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of Host Nation members wounded in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var hostNatWound: Int32 { let o = _accessor.offset(VTOFFSET.hostNatWound.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of side A members abducted in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var sideAabd: Int32 { let o = _accessor.offset(VTOFFSET.sideAabd.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of side A members detained in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var sideAdet: Int32 { let o = _accessor.offset(VTOFFSET.sideAdet.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of side A members killed in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var sideAkia: Int32 { let o = _accessor.offset(VTOFFSET.sideAkia.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of side A members wounded in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var sideAwound: Int32 { let o = _accessor.offset(VTOFFSET.sideAwound.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of side B members abducted in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var sideBabd: Int32 { let o = _accessor.offset(VTOFFSET.sideBabd.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of side B members detained in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var sideBdet: Int32 { let o = _accessor.offset(VTOFFSET.sideBdet.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of side B members killed in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var sideBkia: Int32 { let o = _accessor.offset(VTOFFSET.sideBkia.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of side B members wounded in the activity.
  ///  Example: /// Example: 123
  ///  Constraints: No constraints specified.
  public var sideBwound: Int32 { let o = _accessor.offset(VTOFFSET.sideBwound.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The name of the target.  The target may be an individual, an entity, or a country/region.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var target: String? { let o = _accessor.offset(VTOFFSET.target.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var targetSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.target.v) }
  ///  A description of the event.
  ///  Example: /// Example: Example_Description
  ///  Constraints: Minimum length = 0, Maximum length = 4096
  public var eventDescription: String? { let o = _accessor.offset(VTOFFSET.eventDescription.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eventDescriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eventDescription.v) }
  ///  The type of event (e.g.  Military, Natural, Political, Social, etc.).
  ///  Example: /// Example: Military
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var eventType: String? { let o = _accessor.offset(VTOFFSET.eventType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eventTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eventType.v) }
  ///  The mode of this attack or event (e.g. Direct Fire, IED Explosion, etc.).
  ///  Example: /// Example: IED Explosion
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var typeOfAttack: String? { let o = _accessor.offset(VTOFFSET.typeOfAttack.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeOfAttackSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.typeOfAttack.v) }
  ///  Flag indicating that this attack was of a complex or coordinated nature.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var complexAttack: Bool { let o = _accessor.offset(VTOFFSET.complexAttack.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Unique identifier assigned to each event record that uniquely identifies it in the master dataset.  This ID is provided for convenience of mapping to external systems.
  ///  Example: /// Example: NUMBER-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var idNumber: String? { let o = _accessor.offset(VTOFFSET.idNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idNumber.v) }
  ///  Estimate of the confidence that this event occurred.
  ///  Example: /// Example: 13
  ///  Constraints: No constraints specified.
  public var confidence: Int32 { let o = _accessor.offset(VTOFFSET.confidence.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Estimate of the accuracy that this event occurred as described/reported.
  ///  Example: /// Example: 13
  ///  Constraints: No constraints specified.
  public var accuracy: Int32 { let o = _accessor.offset(VTOFFSET.accuracy.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  1 (high) for events where the reporting allows the coder to identify the event in full. That is, events where the individual happening is described by the original source in a sufficiently detailed way as to identify individual incidents, i.e. separate activities of fighting in a single location:
  ///  2 (lower) for events where an aggregation of information was already made by the source material that is impossible to undo in the coding process. Such events are described by the original source only as aggregates (totals) of multiple separate activities of fighting spanning over a longer period than a single, clearly defined day.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var clarity: Int32 { let o = _accessor.offset(VTOFFSET.clarity.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  This is the raw CAMEO action code describing the action that Actor1 performed upon Actor2.  Additional information about Cameo Codes can be obtained from the GDELT project documentation here: https://www.gdeltproject.org/data.html#documentation.
  ///  Example: /// Example: CAMEO_CODE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var cameoCode: String? { let o = _accessor.offset(VTOFFSET.cameoCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cameoCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cameoCode.v) }
  ///  CAMEO event codes are defined in a three-level taxonomy. For events at level three in the taxonomy, this yields its level two leaf root node. For example, code 0251 (Appeal for easing of administrative sanctions) would yield an EventBaseCode of 025 (Appeal to yield). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
  ///  Example: /// Example: Example_cameoBaseCode
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var cameoBaseCode: String? { let o = _accessor.offset(VTOFFSET.cameoBaseCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cameoBaseCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cameoBaseCode.v) }
  ///  Similar to EventBaseCode, this defines the root-level category the event code falls under. For example, code 0251 (Appeal for easing of administrative sanctions) has a root code of 02 (Appeal). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
  ///  Example: /// Example: Example_cameoRootCode
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var cameoRootCode: String? { let o = _accessor.offset(VTOFFSET.cameoRootCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cameoRootCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cameoRootCode.v) }
  ///  Each CAMEO event code is assigned a numeric score from -10 to +10, capturing the theoretical potential impact that type of event will have on the stability of a country. This is known as the Goldstein Scale. NOTE: this score is based on the type of event, not the specifics of the actual event record being recorded  thus two riots, one with 10 people and one with 10,000, will both receive the same Goldstein score. This can be aggregated to various levels of time resolution to yield an approximation of the stability of a location over time.
  ///  Example: /// Example: 9.32
  ///  Constraints: No constraints specified.
  public var goldstein: Double { let o = _accessor.offset(VTOFFSET.goldstein.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The source of the document or report.
  ///  Example: /// Example: Example_documentSource
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var documentSource: String? { let o = _accessor.offset(VTOFFSET.documentSource.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var documentSourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.documentSource.v) }
  ///  The filename of the document or report.
  ///  Example: /// Example: Example_documentFilename
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var documentFilename: String? { let o = _accessor.offset(VTOFFSET.documentFilename.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var documentFilenameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.documentFilename.v) }
  ///  Flag indicating this SigAct record has an associated txt file stored in the UDL. Retrieve the txt file by using the GET/udl/sigact/getFile/{id} where id is the same as the SigAct record id. The maximum file size for this service is 10,000,000 bytes (10MB). Files exceeding the maximum size will be rejected.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var hasAttachment: Bool { let o = _accessor.offset(VTOFFSET.hasAttachment.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Size of the associated text file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  public var filesize: Int64 { let o = _accessor.offset(VTOFFSET.filesize.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  ///  MD5 value of the file. The ingest/create operation will automatically generate the value.
  ///  Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var checksumValue: String? { let o = _accessor.offset(VTOFFSET.checksumValue.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var checksumValueSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.checksumValue.v) }
  ///  The reporting unit.
  ///  Example: /// Example: Unit_1
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var repUnit: String? { let o = _accessor.offset(VTOFFSET.repUnit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var repUnitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.repUnit.v) }
  ///  The reporting unit type.
  ///  Example: /// Example: Example_repUnitType
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var repUnitType: String? { let o = _accessor.offset(VTOFFSET.repUnitType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var repUnitTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.repUnitType.v) }
  ///  The activity the unit was engaged in.
  ///  Example: /// Example: Example_Activity
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var repUnitActivity: String? { let o = _accessor.offset(VTOFFSET.repUnitActivity.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var repUnitActivitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.repUnitActivity.v) }
  ///  This is the total number of mentions of this event across all source documents during the 15 minute update in which it was first seen. Multiple references to an event within a single document also contribute to this count. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
  ///  Example: /// Example: 8
  ///  Constraints: No constraints specified.
  public var numMentions: Int32 { let o = _accessor.offset(VTOFFSET.numMentions.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  This is the total number of information sources containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
  ///  Example: /// Example: 8
  ///  Constraints: No constraints specified.
  public var numSources: Int32 { let o = _accessor.offset(VTOFFSET.numSources.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  This is the total number of source documents containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
  ///  Example: /// Example: 8
  ///  Constraints: No constraints specified.
  public var numArticles: Int32 { let o = _accessor.offset(VTOFFSET.numArticles.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  This is the average tone of all documents containing one or more mentions of this event during the 15 minute update in which it was first seen. The score ranges from -100 (extremely negative) to +100 (extremely positive). Common values range between -10 and +10, with 0 indicating neutral.
  ///  Example: /// Example: 8.23
  ///  Constraints: No constraints specified.
  public var avgTone: Double { let o = _accessor.offset(VTOFFSET.avgTone.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  This field records the URL or citation of the first news report it found this event in. In most cases this is the first report it saw the article in, but due to the timing and flow of news reports through the processing pipeline, this may not always be the very first report, but is at least in the first few reports.
  ///  Example: /// Example: Example_URL
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var sourceUrl: String? { let o = _accessor.offset(VTOFFSET.sourceUrl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceUrlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceUrl.v) }
  ///  Related document ids.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasRelatedDocs: Bool { let o = _accessor.offset(VTOFFSET.relatedDocs.v); return o == 0 ? false : true }
  public var relatedDocsCount: Int32 { let o = _accessor.offset(VTOFFSET.relatedDocs.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func relatedDocs(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.relatedDocs.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  A summary of the event.
  ///  Example: /// Example: Example_Summary
  ///  Constraints: Minimum length = 0, Maximum length = 4096
  public var summary: String? { let o = _accessor.offset(VTOFFSET.summary.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var summarySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.summary.v) }
  ///  Notes related to the documents or event.
  ///  Example: /// Example: Example_Notes
  ///  Constraints: Minimum length = 0, Maximum length = 4096
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  ///  Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: No constraints specified.
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: SigAct_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : SigAct_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startSigAct_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 82) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(sourceLanguage: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceLanguage, at: VTOFFSET.sourceLanguage.p) }
  public static func add(countryCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: countryCode, at: VTOFFSET.countryCode.p) }
  public static func add(city: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: city, at: VTOFFSET.city.p) }
  public static func add(district: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: district, at: VTOFFSET.district.p) }
  public static func add(province: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: province, at: VTOFFSET.province.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(milgrid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: milgrid, at: VTOFFSET.milgrid.p) }
  public static func add(theater: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: theater, at: VTOFFSET.theater.p) }
  public static func add(atext: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: atext, at: VTOFFSET.atext.p) }
  public static func add(agjson: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: agjson, at: VTOFFSET.agjson.p) }
  public static func add(atype: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: atype, at: VTOFFSET.atype.p) }
  public static func add(andims: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: andims, def: 0, at: VTOFFSET.andims.p) }
  public static func add(asrid: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: asrid, def: 0, at: VTOFFSET.asrid.p) }
  public static func add(eventStart: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eventStart, at: VTOFFSET.eventStart.p) }
  public static func add(eventEnd: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eventEnd, at: VTOFFSET.eventEnd.p) }
  public static func add(reportDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reportDate, at: VTOFFSET.reportDate.p) }
  public static func addVectorOf(actors: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: actors, at: VTOFFSET.actors.p) }
  public static func add(civAbd: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: civAbd, def: 0, at: VTOFFSET.civAbd.p) }
  public static func add(civDet: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: civDet, def: 0, at: VTOFFSET.civDet.p) }
  public static func add(civKia: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: civKia, def: 0, at: VTOFFSET.civKia.p) }
  public static func add(civWound: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: civWound, def: 0, at: VTOFFSET.civWound.p) }
  public static func add(coalAbd: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: coalAbd, def: 0, at: VTOFFSET.coalAbd.p) }
  public static func add(coalDet: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: coalDet, def: 0, at: VTOFFSET.coalDet.p) }
  public static func add(coalKia: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: coalKia, def: 0, at: VTOFFSET.coalKia.p) }
  public static func add(coalWound: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: coalWound, def: 0, at: VTOFFSET.coalWound.p) }
  public static func add(enemyAbd: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: enemyAbd, def: 0, at: VTOFFSET.enemyAbd.p) }
  public static func add(enemyDet: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: enemyDet, def: 0, at: VTOFFSET.enemyDet.p) }
  public static func add(enemyKia: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: enemyKia, def: 0, at: VTOFFSET.enemyKia.p) }
  public static func add(friendlyAbd: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: friendlyAbd, def: 0, at: VTOFFSET.friendlyAbd.p) }
  public static func add(friendlyDet: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: friendlyDet, def: 0, at: VTOFFSET.friendlyDet.p) }
  public static func add(friendlyKia: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: friendlyKia, def: 0, at: VTOFFSET.friendlyKia.p) }
  public static func add(friendlyWound: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: friendlyWound, def: 0, at: VTOFFSET.friendlyWound.p) }
  public static func add(hostNatAbd: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hostNatAbd, def: 0, at: VTOFFSET.hostNatAbd.p) }
  public static func add(hostNatDet: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hostNatDet, def: 0, at: VTOFFSET.hostNatDet.p) }
  public static func add(hostNatKia: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hostNatKia, def: 0, at: VTOFFSET.hostNatKia.p) }
  public static func add(hostNatWound: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hostNatWound, def: 0, at: VTOFFSET.hostNatWound.p) }
  public static func add(sideAabd: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sideAabd, def: 0, at: VTOFFSET.sideAabd.p) }
  public static func add(sideAdet: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sideAdet, def: 0, at: VTOFFSET.sideAdet.p) }
  public static func add(sideAkia: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sideAkia, def: 0, at: VTOFFSET.sideAkia.p) }
  public static func add(sideAwound: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sideAwound, def: 0, at: VTOFFSET.sideAwound.p) }
  public static func add(sideBabd: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sideBabd, def: 0, at: VTOFFSET.sideBabd.p) }
  public static func add(sideBdet: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sideBdet, def: 0, at: VTOFFSET.sideBdet.p) }
  public static func add(sideBkia: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sideBkia, def: 0, at: VTOFFSET.sideBkia.p) }
  public static func add(sideBwound: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sideBwound, def: 0, at: VTOFFSET.sideBwound.p) }
  public static func add(target: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: target, at: VTOFFSET.target.p) }
  public static func add(eventDescription: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eventDescription, at: VTOFFSET.eventDescription.p) }
  public static func add(eventType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eventType, at: VTOFFSET.eventType.p) }
  public static func add(typeOfAttack: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: typeOfAttack, at: VTOFFSET.typeOfAttack.p) }
  public static func add(complexAttack: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: complexAttack, def: false,
   at: VTOFFSET.complexAttack.p) }
  public static func add(idNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idNumber, at: VTOFFSET.idNumber.p) }
  public static func add(confidence: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: confidence, def: 0, at: VTOFFSET.confidence.p) }
  public static func add(accuracy: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: accuracy, def: 0, at: VTOFFSET.accuracy.p) }
  public static func add(clarity: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: clarity, def: 0, at: VTOFFSET.clarity.p) }
  public static func add(cameoCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cameoCode, at: VTOFFSET.cameoCode.p) }
  public static func add(cameoBaseCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cameoBaseCode, at: VTOFFSET.cameoBaseCode.p) }
  public static func add(cameoRootCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cameoRootCode, at: VTOFFSET.cameoRootCode.p) }
  public static func add(goldstein: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: goldstein, def: 0.0, at: VTOFFSET.goldstein.p) }
  public static func add(documentSource: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: documentSource, at: VTOFFSET.documentSource.p) }
  public static func add(documentFilename: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: documentFilename, at: VTOFFSET.documentFilename.p) }
  public static func add(hasAttachment: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hasAttachment, def: false,
   at: VTOFFSET.hasAttachment.p) }
  public static func add(filesize: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: filesize, def: 0, at: VTOFFSET.filesize.p) }
  public static func add(checksumValue: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: checksumValue, at: VTOFFSET.checksumValue.p) }
  public static func add(repUnit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: repUnit, at: VTOFFSET.repUnit.p) }
  public static func add(repUnitType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: repUnitType, at: VTOFFSET.repUnitType.p) }
  public static func add(repUnitActivity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: repUnitActivity, at: VTOFFSET.repUnitActivity.p) }
  public static func add(numMentions: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numMentions, def: 0, at: VTOFFSET.numMentions.p) }
  public static func add(numSources: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numSources, def: 0, at: VTOFFSET.numSources.p) }
  public static func add(numArticles: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numArticles, def: 0, at: VTOFFSET.numArticles.p) }
  public static func add(avgTone: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgTone, def: 0.0, at: VTOFFSET.avgTone.p) }
  public static func add(sourceUrl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceUrl, at: VTOFFSET.sourceUrl.p) }
  public static func addVectorOf(relatedDocs: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relatedDocs, at: VTOFFSET.relatedDocs.p) }
  public static func add(summary: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: summary, at: VTOFFSET.summary.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: SigAct_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endSigAct_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSigAct_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    sourceLanguageOffset sourceLanguage: Offset = Offset(),
    countryCodeOffset countryCode: Offset = Offset(),
    cityOffset city: Offset = Offset(),
    districtOffset district: Offset = Offset(),
    provinceOffset province: Offset = Offset(),
    lat: Double = 0.0,
    lon: Double = 0.0,
    milgridOffset milgrid: Offset = Offset(),
    theaterOffset theater: Offset = Offset(),
    atextOffset atext: Offset = Offset(),
    agjsonOffset agjson: Offset = Offset(),
    atypeOffset atype: Offset = Offset(),
    andims: Int32 = 0,
    asrid: Int32 = 0,
    eventStartOffset eventStart: Offset = Offset(),
    eventEndOffset eventEnd: Offset = Offset(),
    reportDateOffset reportDate: Offset = Offset(),
    actorsVectorOffset actors: Offset = Offset(),
    civAbd: Int32 = 0,
    civDet: Int32 = 0,
    civKia: Int32 = 0,
    civWound: Int32 = 0,
    coalAbd: Int32 = 0,
    coalDet: Int32 = 0,
    coalKia: Int32 = 0,
    coalWound: Int32 = 0,
    enemyAbd: Int32 = 0,
    enemyDet: Int32 = 0,
    enemyKia: Int32 = 0,
    friendlyAbd: Int32 = 0,
    friendlyDet: Int32 = 0,
    friendlyKia: Int32 = 0,
    friendlyWound: Int32 = 0,
    hostNatAbd: Int32 = 0,
    hostNatDet: Int32 = 0,
    hostNatKia: Int32 = 0,
    hostNatWound: Int32 = 0,
    sideAabd: Int32 = 0,
    sideAdet: Int32 = 0,
    sideAkia: Int32 = 0,
    sideAwound: Int32 = 0,
    sideBabd: Int32 = 0,
    sideBdet: Int32 = 0,
    sideBkia: Int32 = 0,
    sideBwound: Int32 = 0,
    targetOffset target: Offset = Offset(),
    eventDescriptionOffset eventDescription: Offset = Offset(),
    eventTypeOffset eventType: Offset = Offset(),
    typeOfAttackOffset typeOfAttack: Offset = Offset(),
    complexAttack: Bool = false,
    idNumberOffset idNumber: Offset = Offset(),
    confidence: Int32 = 0,
    accuracy: Int32 = 0,
    clarity: Int32 = 0,
    cameoCodeOffset cameoCode: Offset = Offset(),
    cameoBaseCodeOffset cameoBaseCode: Offset = Offset(),
    cameoRootCodeOffset cameoRootCode: Offset = Offset(),
    goldstein: Double = 0.0,
    documentSourceOffset documentSource: Offset = Offset(),
    documentFilenameOffset documentFilename: Offset = Offset(),
    hasAttachment: Bool = false,
    filesize: Int64 = 0,
    checksumValueOffset checksumValue: Offset = Offset(),
    repUnitOffset repUnit: Offset = Offset(),
    repUnitTypeOffset repUnitType: Offset = Offset(),
    repUnitActivityOffset repUnitActivity: Offset = Offset(),
    numMentions: Int32 = 0,
    numSources: Int32 = 0,
    numArticles: Int32 = 0,
    avgTone: Double = 0.0,
    sourceUrlOffset sourceUrl: Offset = Offset(),
    relatedDocsVectorOffset relatedDocs: Offset = Offset(),
    summaryOffset summary: Offset = Offset(),
    notesOffset notes: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: SigAct_Abridged_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = SigAct_Abridged.startSigAct_Abridged(&fbb)
    SigAct_Abridged.add(id: id, &fbb)
    SigAct_Abridged.add(classificationMarking: classificationMarking, &fbb)
    SigAct_Abridged.add(sourceLanguage: sourceLanguage, &fbb)
    SigAct_Abridged.add(countryCode: countryCode, &fbb)
    SigAct_Abridged.add(city: city, &fbb)
    SigAct_Abridged.add(district: district, &fbb)
    SigAct_Abridged.add(province: province, &fbb)
    SigAct_Abridged.add(lat: lat, &fbb)
    SigAct_Abridged.add(lon: lon, &fbb)
    SigAct_Abridged.add(milgrid: milgrid, &fbb)
    SigAct_Abridged.add(theater: theater, &fbb)
    SigAct_Abridged.add(atext: atext, &fbb)
    SigAct_Abridged.add(agjson: agjson, &fbb)
    SigAct_Abridged.add(atype: atype, &fbb)
    SigAct_Abridged.add(andims: andims, &fbb)
    SigAct_Abridged.add(asrid: asrid, &fbb)
    SigAct_Abridged.add(eventStart: eventStart, &fbb)
    SigAct_Abridged.add(eventEnd: eventEnd, &fbb)
    SigAct_Abridged.add(reportDate: reportDate, &fbb)
    SigAct_Abridged.addVectorOf(actors: actors, &fbb)
    SigAct_Abridged.add(civAbd: civAbd, &fbb)
    SigAct_Abridged.add(civDet: civDet, &fbb)
    SigAct_Abridged.add(civKia: civKia, &fbb)
    SigAct_Abridged.add(civWound: civWound, &fbb)
    SigAct_Abridged.add(coalAbd: coalAbd, &fbb)
    SigAct_Abridged.add(coalDet: coalDet, &fbb)
    SigAct_Abridged.add(coalKia: coalKia, &fbb)
    SigAct_Abridged.add(coalWound: coalWound, &fbb)
    SigAct_Abridged.add(enemyAbd: enemyAbd, &fbb)
    SigAct_Abridged.add(enemyDet: enemyDet, &fbb)
    SigAct_Abridged.add(enemyKia: enemyKia, &fbb)
    SigAct_Abridged.add(friendlyAbd: friendlyAbd, &fbb)
    SigAct_Abridged.add(friendlyDet: friendlyDet, &fbb)
    SigAct_Abridged.add(friendlyKia: friendlyKia, &fbb)
    SigAct_Abridged.add(friendlyWound: friendlyWound, &fbb)
    SigAct_Abridged.add(hostNatAbd: hostNatAbd, &fbb)
    SigAct_Abridged.add(hostNatDet: hostNatDet, &fbb)
    SigAct_Abridged.add(hostNatKia: hostNatKia, &fbb)
    SigAct_Abridged.add(hostNatWound: hostNatWound, &fbb)
    SigAct_Abridged.add(sideAabd: sideAabd, &fbb)
    SigAct_Abridged.add(sideAdet: sideAdet, &fbb)
    SigAct_Abridged.add(sideAkia: sideAkia, &fbb)
    SigAct_Abridged.add(sideAwound: sideAwound, &fbb)
    SigAct_Abridged.add(sideBabd: sideBabd, &fbb)
    SigAct_Abridged.add(sideBdet: sideBdet, &fbb)
    SigAct_Abridged.add(sideBkia: sideBkia, &fbb)
    SigAct_Abridged.add(sideBwound: sideBwound, &fbb)
    SigAct_Abridged.add(target: target, &fbb)
    SigAct_Abridged.add(eventDescription: eventDescription, &fbb)
    SigAct_Abridged.add(eventType: eventType, &fbb)
    SigAct_Abridged.add(typeOfAttack: typeOfAttack, &fbb)
    SigAct_Abridged.add(complexAttack: complexAttack, &fbb)
    SigAct_Abridged.add(idNumber: idNumber, &fbb)
    SigAct_Abridged.add(confidence: confidence, &fbb)
    SigAct_Abridged.add(accuracy: accuracy, &fbb)
    SigAct_Abridged.add(clarity: clarity, &fbb)
    SigAct_Abridged.add(cameoCode: cameoCode, &fbb)
    SigAct_Abridged.add(cameoBaseCode: cameoBaseCode, &fbb)
    SigAct_Abridged.add(cameoRootCode: cameoRootCode, &fbb)
    SigAct_Abridged.add(goldstein: goldstein, &fbb)
    SigAct_Abridged.add(documentSource: documentSource, &fbb)
    SigAct_Abridged.add(documentFilename: documentFilename, &fbb)
    SigAct_Abridged.add(hasAttachment: hasAttachment, &fbb)
    SigAct_Abridged.add(filesize: filesize, &fbb)
    SigAct_Abridged.add(checksumValue: checksumValue, &fbb)
    SigAct_Abridged.add(repUnit: repUnit, &fbb)
    SigAct_Abridged.add(repUnitType: repUnitType, &fbb)
    SigAct_Abridged.add(repUnitActivity: repUnitActivity, &fbb)
    SigAct_Abridged.add(numMentions: numMentions, &fbb)
    SigAct_Abridged.add(numSources: numSources, &fbb)
    SigAct_Abridged.add(numArticles: numArticles, &fbb)
    SigAct_Abridged.add(avgTone: avgTone, &fbb)
    SigAct_Abridged.add(sourceUrl: sourceUrl, &fbb)
    SigAct_Abridged.addVectorOf(relatedDocs: relatedDocs, &fbb)
    SigAct_Abridged.add(summary: summary, &fbb)
    SigAct_Abridged.add(notes: notes, &fbb)
    SigAct_Abridged.add(createdAt: createdAt, &fbb)
    SigAct_Abridged.add(createdBy: createdBy, &fbb)
    SigAct_Abridged.add(source: source, &fbb)
    SigAct_Abridged.add(origin: origin, &fbb)
    SigAct_Abridged.add(dataMode: dataMode, &fbb)
    SigAct_Abridged.add(origNetwork: origNetwork, &fbb)
    return SigAct_Abridged.endSigAct_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceLanguage.p, fieldName: "sourceLanguage", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.countryCode.p, fieldName: "countryCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.city.p, fieldName: "city", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.district.p, fieldName: "district", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.province.p, fieldName: "province", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.milgrid.p, fieldName: "milgrid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.theater.p, fieldName: "theater", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.atext.p, fieldName: "atext", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.agjson.p, fieldName: "agjson", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.atype.p, fieldName: "atype", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.andims.p, fieldName: "andims", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.asrid.p, fieldName: "asrid", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.eventStart.p, fieldName: "eventStart", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eventEnd.p, fieldName: "eventEnd", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reportDate.p, fieldName: "reportDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.actors.p, fieldName: "actors", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.civAbd.p, fieldName: "civAbd", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.civDet.p, fieldName: "civDet", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.civKia.p, fieldName: "civKia", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.civWound.p, fieldName: "civWound", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.coalAbd.p, fieldName: "coalAbd", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.coalDet.p, fieldName: "coalDet", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.coalKia.p, fieldName: "coalKia", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.coalWound.p, fieldName: "coalWound", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.enemyAbd.p, fieldName: "enemyAbd", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.enemyDet.p, fieldName: "enemyDet", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.enemyKia.p, fieldName: "enemyKia", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.friendlyAbd.p, fieldName: "friendlyAbd", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.friendlyDet.p, fieldName: "friendlyDet", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.friendlyKia.p, fieldName: "friendlyKia", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.friendlyWound.p, fieldName: "friendlyWound", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.hostNatAbd.p, fieldName: "hostNatAbd", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.hostNatDet.p, fieldName: "hostNatDet", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.hostNatKia.p, fieldName: "hostNatKia", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.hostNatWound.p, fieldName: "hostNatWound", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.sideAabd.p, fieldName: "sideAabd", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.sideAdet.p, fieldName: "sideAdet", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.sideAkia.p, fieldName: "sideAkia", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.sideAwound.p, fieldName: "sideAwound", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.sideBabd.p, fieldName: "sideBabd", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.sideBdet.p, fieldName: "sideBdet", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.sideBkia.p, fieldName: "sideBkia", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.sideBwound.p, fieldName: "sideBwound", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.target.p, fieldName: "target", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eventDescription.p, fieldName: "eventDescription", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eventType.p, fieldName: "eventType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.typeOfAttack.p, fieldName: "typeOfAttack", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.complexAttack.p, fieldName: "complexAttack", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.idNumber.p, fieldName: "idNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.confidence.p, fieldName: "confidence", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.accuracy.p, fieldName: "accuracy", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.clarity.p, fieldName: "clarity", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.cameoCode.p, fieldName: "cameoCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cameoBaseCode.p, fieldName: "cameoBaseCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cameoRootCode.p, fieldName: "cameoRootCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.goldstein.p, fieldName: "goldstein", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.documentSource.p, fieldName: "documentSource", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.documentFilename.p, fieldName: "documentFilename", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.hasAttachment.p, fieldName: "hasAttachment", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.filesize.p, fieldName: "filesize", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.checksumValue.p, fieldName: "checksumValue", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.repUnit.p, fieldName: "repUnit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.repUnitType.p, fieldName: "repUnitType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.repUnitActivity.p, fieldName: "repUnitActivity", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numMentions.p, fieldName: "numMentions", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numSources.p, fieldName: "numSources", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numArticles.p, fieldName: "numArticles", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.avgTone.p, fieldName: "avgTone", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.sourceUrl.p, fieldName: "sourceUrl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.relatedDocs.p, fieldName: "relatedDocs", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.summary.p, fieldName: "summary", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: SigAct_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

