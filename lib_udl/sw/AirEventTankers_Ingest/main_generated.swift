// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection of tanker aircraft associated with this Air Event.
public struct AirEventTankers_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRE" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AirEventTankers_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case idTankerSortie = 4
    case idTankerMission = 6
    case idTankerAirfield = 8
    case externalTankerId = 10
    case tankerCoord = 12
    case tankerMds = 14
    case amcTankerMissionId = 16
    case altTankerMissionId = 18
    case tankerCallSign = 20
    case tankerOwner = 22
    case tankerPoc = 24
    case tankerLegNum = 26
    case tankerDeployedIcao = 28
    case tankerDeliveryMethod = 30
    case fuelOff = 32
    case tankerCellPosition = 34
    case tankerFuelType = 36
    case dualRole = 38
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The UDL ID of the aircraft sortie this tanker is associated with for this event.
  ///  Example: /// Example: d833a4bc-756b-41d5-8845-f146fe563387
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idTankerSortie: String? { let o = _accessor.offset(VTOFFSET.idTankerSortie.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idTankerSortieSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idTankerSortie.v) }
  ///  The UDL ID of the mission this tanker is associated with for this event.
  ///  Example: /// Example: edef700c-9917-4dbf-a153-89ffd4446fe9
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idTankerMission: String? { let o = _accessor.offset(VTOFFSET.idTankerMission.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idTankerMissionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idTankerMission.v) }
  ///  The UDL ID of the airfield this tanker is associated with for this event.
  ///  Example: /// Example: b33955d2-67d3-42be-8316-263e284ce6cc
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idTankerAirfield: String? { let o = _accessor.offset(VTOFFSET.idTankerAirfield.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idTankerAirfieldSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idTankerAirfield.v) }
  ///  Optional tanker identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: ca673c580fb949a5b733f0e0b67ffab2
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var externalTankerId: String? { let o = _accessor.offset(VTOFFSET.externalTankerId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var externalTankerIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.externalTankerId.v) }
  ///  Coordination record identifier of this tanker.
  ///  Example: /// Example: TTC601
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var tankerCoord: String? { let o = _accessor.offset(VTOFFSET.tankerCoord.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tankerCoordSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tankerCoord.v) }
  ///  The Model Design Series designation of this tanker.
  ///  Example: /// Example: KC135R
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var tankerMds: String? { let o = _accessor.offset(VTOFFSET.tankerMds.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tankerMdsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tankerMds.v) }
  ///  The Air Mobility Command (AMC) mission identifier of this tanker.
  ///  Example: /// Example: 8PH000B1S052
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var amcTankerMissionId: String? { let o = _accessor.offset(VTOFFSET.amcTankerMissionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var amcTankerMissionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.amcTankerMissionId.v) }
  ///  Alternate mission identifier of this tanker provided by source.
  ///  Example: /// Example: 1UN05201L121
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var altTankerMissionId: String? { let o = _accessor.offset(VTOFFSET.altTankerMissionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altTankerMissionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altTankerMissionId.v) }
  ///  The call sign assigned to this tanker.
  ///  Example: /// Example: BAKER
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var tankerCallSign: String? { let o = _accessor.offset(VTOFFSET.tankerCallSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tankerCallSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tankerCallSign.v) }
  ///  The wing or unit that owns this tanker.
  ///  Example: /// Example: 117ARW
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var tankerOwner: String? { let o = _accessor.offset(VTOFFSET.tankerOwner.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tankerOwnerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tankerOwner.v) }
  ///  The name and/or number of the point of contact for this tanker.
  ///  Example: /// Example: JOHN SMITH (555)555-5555
  ///  Constraints: Minimum length = 0, Maximum length = 68
  public var tankerPoc: String? { let o = _accessor.offset(VTOFFSET.tankerPoc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tankerPocSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tankerPoc.v) }
  ///  Identifies the itinerary point of a mission that this tanker is linked to.
  ///  Example: /// Example: 825
  ///  Constraints: No constraints specified.
  public var tankerLegNum: Int32 { let o = _accessor.offset(VTOFFSET.tankerLegNum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Location the tanker has been deployed to in preparation for an air refueling event.
  ///  Example: /// Example: KOFF
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var tankerDeployedIcao: String? { let o = _accessor.offset(VTOFFSET.tankerDeployedIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tankerDeployedIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tankerDeployedIcao.v) }
  ///  Type of fuel delivery method used by the tanker during an air refueling event (BOOM, DROGUE, BOTH).
  ///  Example: /// Example: DROGUE
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var tankerDeliveryMethod: String? { let o = _accessor.offset(VTOFFSET.tankerDeliveryMethod.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tankerDeliveryMethodSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tankerDeliveryMethod.v) }
  ///  Total weight of the fuel transferred from this tanker during an air refueling event, in pounds.
  ///  Example: /// Example: 15000000.1
  ///  Constraints: No constraints specified.
  public var fuelOff: Double { let o = _accessor.offset(VTOFFSET.fuelOff.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Position of this tanker within a group of tankers in an air refueling event.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var tankerCellPosition: Int32 { let o = _accessor.offset(VTOFFSET.tankerCellPosition.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Type of fuel being transferred from the tanker in an air refueling event.
  ///  Example: /// Example: JP8
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var tankerFuelType: String? { let o = _accessor.offset(VTOFFSET.tankerFuelType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tankerFuelTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tankerFuelType.v) }
  ///  Flag indicating that this tanker is flying a dual role mission in an air refueling event.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var dualRole: Bool { let o = _accessor.offset(VTOFFSET.dualRole.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  public static func startAirEventTankers_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 18) }
  public static func add(idTankerSortie: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idTankerSortie, at: VTOFFSET.idTankerSortie.p) }
  public static func add(idTankerMission: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idTankerMission, at: VTOFFSET.idTankerMission.p) }
  public static func add(idTankerAirfield: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idTankerAirfield, at: VTOFFSET.idTankerAirfield.p) }
  public static func add(externalTankerId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: externalTankerId, at: VTOFFSET.externalTankerId.p) }
  public static func add(tankerCoord: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tankerCoord, at: VTOFFSET.tankerCoord.p) }
  public static func add(tankerMds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tankerMds, at: VTOFFSET.tankerMds.p) }
  public static func add(amcTankerMissionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: amcTankerMissionId, at: VTOFFSET.amcTankerMissionId.p) }
  public static func add(altTankerMissionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altTankerMissionId, at: VTOFFSET.altTankerMissionId.p) }
  public static func add(tankerCallSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tankerCallSign, at: VTOFFSET.tankerCallSign.p) }
  public static func add(tankerOwner: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tankerOwner, at: VTOFFSET.tankerOwner.p) }
  public static func add(tankerPoc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tankerPoc, at: VTOFFSET.tankerPoc.p) }
  public static func add(tankerLegNum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: tankerLegNum, def: 0, at: VTOFFSET.tankerLegNum.p) }
  public static func add(tankerDeployedIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tankerDeployedIcao, at: VTOFFSET.tankerDeployedIcao.p) }
  public static func add(tankerDeliveryMethod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tankerDeliveryMethod, at: VTOFFSET.tankerDeliveryMethod.p) }
  public static func add(fuelOff: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fuelOff, def: 0.0, at: VTOFFSET.fuelOff.p) }
  public static func add(tankerCellPosition: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: tankerCellPosition, def: 0, at: VTOFFSET.tankerCellPosition.p) }
  public static func add(tankerFuelType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tankerFuelType, at: VTOFFSET.tankerFuelType.p) }
  public static func add(dualRole: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dualRole, def: false,
   at: VTOFFSET.dualRole.p) }
  public static func endAirEventTankers_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAirEventTankers_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idTankerSortieOffset idTankerSortie: Offset = Offset(),
    idTankerMissionOffset idTankerMission: Offset = Offset(),
    idTankerAirfieldOffset idTankerAirfield: Offset = Offset(),
    externalTankerIdOffset externalTankerId: Offset = Offset(),
    tankerCoordOffset tankerCoord: Offset = Offset(),
    tankerMdsOffset tankerMds: Offset = Offset(),
    amcTankerMissionIdOffset amcTankerMissionId: Offset = Offset(),
    altTankerMissionIdOffset altTankerMissionId: Offset = Offset(),
    tankerCallSignOffset tankerCallSign: Offset = Offset(),
    tankerOwnerOffset tankerOwner: Offset = Offset(),
    tankerPocOffset tankerPoc: Offset = Offset(),
    tankerLegNum: Int32 = 0,
    tankerDeployedIcaoOffset tankerDeployedIcao: Offset = Offset(),
    tankerDeliveryMethodOffset tankerDeliveryMethod: Offset = Offset(),
    fuelOff: Double = 0.0,
    tankerCellPosition: Int32 = 0,
    tankerFuelTypeOffset tankerFuelType: Offset = Offset(),
    dualRole: Bool = false
  ) -> Offset {
    let __start = AirEventTankers_Ingest.startAirEventTankers_Ingest(&fbb)
    AirEventTankers_Ingest.add(idTankerSortie: idTankerSortie, &fbb)
    AirEventTankers_Ingest.add(idTankerMission: idTankerMission, &fbb)
    AirEventTankers_Ingest.add(idTankerAirfield: idTankerAirfield, &fbb)
    AirEventTankers_Ingest.add(externalTankerId: externalTankerId, &fbb)
    AirEventTankers_Ingest.add(tankerCoord: tankerCoord, &fbb)
    AirEventTankers_Ingest.add(tankerMds: tankerMds, &fbb)
    AirEventTankers_Ingest.add(amcTankerMissionId: amcTankerMissionId, &fbb)
    AirEventTankers_Ingest.add(altTankerMissionId: altTankerMissionId, &fbb)
    AirEventTankers_Ingest.add(tankerCallSign: tankerCallSign, &fbb)
    AirEventTankers_Ingest.add(tankerOwner: tankerOwner, &fbb)
    AirEventTankers_Ingest.add(tankerPoc: tankerPoc, &fbb)
    AirEventTankers_Ingest.add(tankerLegNum: tankerLegNum, &fbb)
    AirEventTankers_Ingest.add(tankerDeployedIcao: tankerDeployedIcao, &fbb)
    AirEventTankers_Ingest.add(tankerDeliveryMethod: tankerDeliveryMethod, &fbb)
    AirEventTankers_Ingest.add(fuelOff: fuelOff, &fbb)
    AirEventTankers_Ingest.add(tankerCellPosition: tankerCellPosition, &fbb)
    AirEventTankers_Ingest.add(tankerFuelType: tankerFuelType, &fbb)
    AirEventTankers_Ingest.add(dualRole: dualRole, &fbb)
    return AirEventTankers_Ingest.endAirEventTankers_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.idTankerSortie.p, fieldName: "idTankerSortie", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idTankerMission.p, fieldName: "idTankerMission", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idTankerAirfield.p, fieldName: "idTankerAirfield", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.externalTankerId.p, fieldName: "externalTankerId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tankerCoord.p, fieldName: "tankerCoord", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tankerMds.p, fieldName: "tankerMds", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.amcTankerMissionId.p, fieldName: "amcTankerMissionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altTankerMissionId.p, fieldName: "altTankerMissionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tankerCallSign.p, fieldName: "tankerCallSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tankerOwner.p, fieldName: "tankerOwner", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tankerPoc.p, fieldName: "tankerPoc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tankerLegNum.p, fieldName: "tankerLegNum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.tankerDeployedIcao.p, fieldName: "tankerDeployedIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tankerDeliveryMethod.p, fieldName: "tankerDeliveryMethod", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fuelOff.p, fieldName: "fuelOff", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.tankerCellPosition.p, fieldName: "tankerCellPosition", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.tankerFuelType.p, fieldName: "tankerFuelType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dualRole.p, fieldName: "dualRole", required: false, type: Bool.self)
    _v.finish()
  }
}

