// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum SensorMaintenance_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: SensorMaintenance_Full_dataMode_Enum { return .exercise }
  public static var min: SensorMaintenance_Full_dataMode_Enum { return .real }
}


///  /// Maintenance schedule and operational status of Sensor.
public struct SensorMaintenance_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SENS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: SensorMaintenance_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case siteCode = 8
    case idSensor = 10
    case startTime = 12
    case endTime = 14
    case recall = 16
    case duration = 18
    case mwOpsCap = 20
    case ssOpsCap = 22
    case mdOpsCap = 24
    case impactedFaces = 26
    case equipStatus = 28
    case activity = 30
    case remark = 32
    case requestor = 34
    case changer = 36
    case approver = 38
    case eowId = 40
    case rev = 42
    case priority = 44
    case rel = 46
    case lineNumber = 48
    case resource = 50
    case inactiveDate = 52
    case createdAt = 54
    case createdBy = 56
    case source = 58
    case origin = 60
    case dataMode = 62
    case origNetwork = 64
    case updatedAt = 66
    case updatedBy = 68
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SENSORMAINTENANCE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The site to which this item applies.  NOTE - this site code is COLT specific and may not identically correspond to other UDL site IDs.
  ///  Example: /// Example: site01
  ///  Constraints: Minimum length = 1, Maximum length = 6
  public var siteCode: String? { let o = _accessor.offset(VTOFFSET.siteCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var siteCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.siteCode.v) }
  ///  UUID of the sensor.
  ///  Example: /// Example: idSensor
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  The planned outage start time in ISO8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var startTime: String? { let o = _accessor.offset(VTOFFSET.startTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.startTime.v) }
  ///  The planned outage end time in ISO8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var endTime: String? { let o = _accessor.offset(VTOFFSET.endTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var endTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.endTime.v) }
  ///  The minimum time required to recall this activity, expressed as ddd:hh:mm.
  ///  Example: /// Example: 128:16:52
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var recall: String? { let o = _accessor.offset(VTOFFSET.recall.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var recallSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.recall.v) }
  ///  The duration of the planned outage, expressed as ddd:hh:mm.
  ///  Example: /// Example: 128:16:52
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var duration: String? { let o = _accessor.offset(VTOFFSET.duration.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var durationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.duration.v) }
  ///  The Missile Warning operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
  ///  Example: /// Example: G
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var mwOpsCap: String? { let o = _accessor.offset(VTOFFSET.mwOpsCap.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var mwOpsCapSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.mwOpsCap.v) }
  ///  The Space Surveillance operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
  ///  Example: /// Example: Y
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var ssOpsCap: String? { let o = _accessor.offset(VTOFFSET.ssOpsCap.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ssOpsCapSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ssOpsCap.v) }
  ///  The Missile Defense operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
  ///  Example: /// Example: R
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var mdOpsCap: String? { let o = _accessor.offset(VTOFFSET.mdOpsCap.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var mdOpsCapSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.mdOpsCap.v) }
  ///  The sensor face(s) to which this COLT maintenance item applies, if applicable.
  ///  Example: /// Example: impactedFaces
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var impactedFaces: String? { let o = _accessor.offset(VTOFFSET.impactedFaces.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var impactedFacesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.impactedFaces.v) }
  ///  The mission capability status of the equipment (e.g. FMC, NMC, PMC, UNK, etc.).
  ///  Example: /// Example: FMC
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var equipStatus: String? { let o = _accessor.offset(VTOFFSET.equipStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var equipStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.equipStatus.v) }
  ///  Description of the activity taking place during this outage.
  ///  Example: /// Example: Activity Description
  ///  Constraints: No constraints specified.
  public var activity: String? { let o = _accessor.offset(VTOFFSET.activity.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var activitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.activity.v) }
  ///  Remarks concerning this outage.
  ///  Example: /// Example: Remarks
  ///  Constraints: No constraints specified.
  public var remark: String? { let o = _accessor.offset(VTOFFSET.remark.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var remarkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.remark.v) }
  ///  The name of the requestor.
  ///  Example: /// Example: requestor
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var requestor: String? { let o = _accessor.offset(VTOFFSET.requestor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var requestorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.requestor.v) }
  ///  The name of the changer, if applicable.
  ///  Example: /// Example: changer
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var changer: String? { let o = _accessor.offset(VTOFFSET.changer.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var changerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.changer.v) }
  ///  The name of the approver.
  ///  Example: /// Example: approver
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var approver: String? { let o = _accessor.offset(VTOFFSET.approver.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var approverSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.approver.v) }
  ///  COLT EOWID.
  ///  Example: /// Example: eowId
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var eowId: String? { let o = _accessor.offset(VTOFFSET.eowId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eowIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eowId.v) }
  ///  The revision number for this maintenance item.
  ///  Example: /// Example: rev
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var rev: String? { let o = _accessor.offset(VTOFFSET.rev.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var revSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rev.v) }
  ///  The priority of this maintenance item.
  ///  Example: /// Example: low
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var priority: String? { let o = _accessor.offset(VTOFFSET.priority.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var prioritySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.priority.v) }
  ///  Release.
  ///  Example: /// Example: rel
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var rel: String? { let o = _accessor.offset(VTOFFSET.rel.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var relSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rel.v) }
  ///  The internal COLT line number assigned to this item.
  ///  Example: /// Example: lineNumber
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var lineNumber: String? { let o = _accessor.offset(VTOFFSET.lineNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lineNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lineNumber.v) }
  ///  The name of the resource(s) affected by this maintenance item.
  ///  Example: /// Example: resource
  ///  Constraints: Minimum length = 0, Maximum length = 255
  public var resource: String? { let o = _accessor.offset(VTOFFSET.resource.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var resourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.resource.v) }
  ///  The date that this item became inactive in ISO8601 UTC format.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var inactiveDate: String? { let o = _accessor.offset(VTOFFSET.inactiveDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var inactiveDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.inactiveDate.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: SensorMaintenance_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : SensorMaintenance_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  public static func startSensorMaintenance_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 33) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(siteCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: siteCode, at: VTOFFSET.siteCode.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(startTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: startTime, at: VTOFFSET.startTime.p) }
  public static func add(endTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: endTime, at: VTOFFSET.endTime.p) }
  public static func add(recall: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: recall, at: VTOFFSET.recall.p) }
  public static func add(duration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: duration, at: VTOFFSET.duration.p) }
  public static func add(mwOpsCap: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mwOpsCap, at: VTOFFSET.mwOpsCap.p) }
  public static func add(ssOpsCap: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ssOpsCap, at: VTOFFSET.ssOpsCap.p) }
  public static func add(mdOpsCap: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mdOpsCap, at: VTOFFSET.mdOpsCap.p) }
  public static func add(impactedFaces: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: impactedFaces, at: VTOFFSET.impactedFaces.p) }
  public static func add(equipStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: equipStatus, at: VTOFFSET.equipStatus.p) }
  public static func add(activity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: activity, at: VTOFFSET.activity.p) }
  public static func add(remark: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: remark, at: VTOFFSET.remark.p) }
  public static func add(requestor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: requestor, at: VTOFFSET.requestor.p) }
  public static func add(changer: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: changer, at: VTOFFSET.changer.p) }
  public static func add(approver: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: approver, at: VTOFFSET.approver.p) }
  public static func add(eowId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eowId, at: VTOFFSET.eowId.p) }
  public static func add(rev: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rev, at: VTOFFSET.rev.p) }
  public static func add(priority: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: priority, at: VTOFFSET.priority.p) }
  public static func add(rel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rel, at: VTOFFSET.rel.p) }
  public static func add(lineNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lineNumber, at: VTOFFSET.lineNumber.p) }
  public static func add(resource: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: resource, at: VTOFFSET.resource.p) }
  public static func add(inactiveDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: inactiveDate, at: VTOFFSET.inactiveDate.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: SensorMaintenance_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func endSensorMaintenance_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSensorMaintenance_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    siteCodeOffset siteCode: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    startTimeOffset startTime: Offset = Offset(),
    endTimeOffset endTime: Offset = Offset(),
    recallOffset recall: Offset = Offset(),
    durationOffset duration: Offset = Offset(),
    mwOpsCapOffset mwOpsCap: Offset = Offset(),
    ssOpsCapOffset ssOpsCap: Offset = Offset(),
    mdOpsCapOffset mdOpsCap: Offset = Offset(),
    impactedFacesOffset impactedFaces: Offset = Offset(),
    equipStatusOffset equipStatus: Offset = Offset(),
    activityOffset activity: Offset = Offset(),
    remarkOffset remark: Offset = Offset(),
    requestorOffset requestor: Offset = Offset(),
    changerOffset changer: Offset = Offset(),
    approverOffset approver: Offset = Offset(),
    eowIdOffset eowId: Offset = Offset(),
    revOffset rev: Offset = Offset(),
    priorityOffset priority: Offset = Offset(),
    relOffset rel: Offset = Offset(),
    lineNumberOffset lineNumber: Offset = Offset(),
    resourceOffset resource: Offset = Offset(),
    inactiveDateOffset inactiveDate: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: SensorMaintenance_Full_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset()
  ) -> Offset {
    let __start = SensorMaintenance_Full.startSensorMaintenance_Full(&fbb)
    SensorMaintenance_Full.add(id: id, &fbb)
    SensorMaintenance_Full.add(classificationMarking: classificationMarking, &fbb)
    SensorMaintenance_Full.add(siteCode: siteCode, &fbb)
    SensorMaintenance_Full.add(idSensor: idSensor, &fbb)
    SensorMaintenance_Full.add(startTime: startTime, &fbb)
    SensorMaintenance_Full.add(endTime: endTime, &fbb)
    SensorMaintenance_Full.add(recall: recall, &fbb)
    SensorMaintenance_Full.add(duration: duration, &fbb)
    SensorMaintenance_Full.add(mwOpsCap: mwOpsCap, &fbb)
    SensorMaintenance_Full.add(ssOpsCap: ssOpsCap, &fbb)
    SensorMaintenance_Full.add(mdOpsCap: mdOpsCap, &fbb)
    SensorMaintenance_Full.add(impactedFaces: impactedFaces, &fbb)
    SensorMaintenance_Full.add(equipStatus: equipStatus, &fbb)
    SensorMaintenance_Full.add(activity: activity, &fbb)
    SensorMaintenance_Full.add(remark: remark, &fbb)
    SensorMaintenance_Full.add(requestor: requestor, &fbb)
    SensorMaintenance_Full.add(changer: changer, &fbb)
    SensorMaintenance_Full.add(approver: approver, &fbb)
    SensorMaintenance_Full.add(eowId: eowId, &fbb)
    SensorMaintenance_Full.add(rev: rev, &fbb)
    SensorMaintenance_Full.add(priority: priority, &fbb)
    SensorMaintenance_Full.add(rel: rel, &fbb)
    SensorMaintenance_Full.add(lineNumber: lineNumber, &fbb)
    SensorMaintenance_Full.add(resource: resource, &fbb)
    SensorMaintenance_Full.add(inactiveDate: inactiveDate, &fbb)
    SensorMaintenance_Full.add(createdAt: createdAt, &fbb)
    SensorMaintenance_Full.add(createdBy: createdBy, &fbb)
    SensorMaintenance_Full.add(source: source, &fbb)
    SensorMaintenance_Full.add(origin: origin, &fbb)
    SensorMaintenance_Full.add(dataMode: dataMode, &fbb)
    SensorMaintenance_Full.add(origNetwork: origNetwork, &fbb)
    SensorMaintenance_Full.add(updatedAt: updatedAt, &fbb)
    SensorMaintenance_Full.add(updatedBy: updatedBy, &fbb)
    return SensorMaintenance_Full.endSensorMaintenance_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.siteCode.p, fieldName: "siteCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.startTime.p, fieldName: "startTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.endTime.p, fieldName: "endTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.recall.p, fieldName: "recall", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.duration.p, fieldName: "duration", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.mwOpsCap.p, fieldName: "mwOpsCap", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ssOpsCap.p, fieldName: "ssOpsCap", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.mdOpsCap.p, fieldName: "mdOpsCap", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.impactedFaces.p, fieldName: "impactedFaces", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.equipStatus.p, fieldName: "equipStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.activity.p, fieldName: "activity", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.remark.p, fieldName: "remark", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.requestor.p, fieldName: "requestor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.changer.p, fieldName: "changer", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.approver.p, fieldName: "approver", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eowId.p, fieldName: "eowId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rev.p, fieldName: "rev", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.priority.p, fieldName: "priority", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rel.p, fieldName: "rel", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lineNumber.p, fieldName: "lineNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.resource.p, fieldName: "resource", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.inactiveDate.p, fieldName: "inactiveDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: SensorMaintenance_Full_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

