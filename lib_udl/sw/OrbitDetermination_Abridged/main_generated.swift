// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum OrbitDetermination_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: OrbitDetermination_Abridged_dataMode_Enum { return .exercise }
  public static var min: OrbitDetermination_Abridged_dataMode_Enum { return .real }
}


///  /// Model representation of orbit determination algorithm results describing General Perturbations or Special Perturbations orbital updates.
public struct OrbitDetermination_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ORBI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: OrbitDetermination_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case startTime = 8
    case endTime = 10
    case idOnOrbit = 12
    case origObjectId = 14
    case satNo = 16
    case aprioriIdElset = 18
    case aprioriElset = 20
    case aprioriIdStateVector = 22
    case aprioriStateVector = 24
    case initialOd = 26
    case lastObStart = 28
    case lastObEnd = 30
    case timeSpan = 32
    case effectiveFrom = 34
    case effectiveUntil = 36
    case wrms = 38
    case previousWrms = 40
    case firstPassWrms = 42
    case bestPassWrms = 44
    case errorGrowthRate = 46
    case edr = 48
    case method = 50
    case methodSource = 52
    case fitSpan = 54
    case ballisticCoeffEst = 56
    case ballisticCoeffModel = 58
    case agomEst = 60
    case agomModel = 62
    case rmsConvergenceCriteria = 64
    case numIterations = 66
    case acceptedObTyps = 68
    case acceptedObIds = 70
    case rejectedObTyps = 72
    case rejectedObIds = 74
    case sensorIds = 76
    case createdAt = 78
    case createdBy = 80
    case sourceDl = 82
    case source = 84
    case origin = 86
    case origNetwork = 88
    case dataMode = 90
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Start time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
  ///  Example: /// Example: 2023-08-28T11:20:21.247192Z
  ///  Constraints: No constraints specified.
  public var startTime: String? { let o = _accessor.offset(VTOFFSET.startTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.startTime.v) }
  ///  End time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
  ///  Example: /// Example: 2023-08-28T15:20:21.247192Z
  ///  Constraints: No constraints specified.
  public var endTime: String? { let o = _accessor.offset(VTOFFSET.endTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var endTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.endTime.v) }
  ///  Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
  ///  Example: /// Example: 54741
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Optional identifier provided by the OD source to indicate the target on-orbit object of this OD solution. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 54741
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Identifier of the element set used to seed this OD solution. This ID can be used to obtain additional information on an Elset object using the 'get by ID' operation (e.g. /udl/elset/{id}). For example, the Elset with idElset = abc would be queried as /udl/elset/abc.
  ///  Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var aprioriIdElset: String? { let o = _accessor.offset(VTOFFSET.aprioriIdElset.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aprioriIdElsetSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aprioriIdElset.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var aprioriElset: String? { let o = _accessor.offset(VTOFFSET.aprioriElset.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aprioriElsetSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aprioriElset.v) }
  ///  Identifier of the state vector used to seed this OD solution. This ID can be used to obtain additional information on a StateVector object using the 'get by ID' operation (e.g. /udl/statevector/{id}). For example, the StateVector with idStateVector = abc would be queried as /udl/statevector/abc.
  ///  Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var aprioriIdStateVector: String? { let o = _accessor.offset(VTOFFSET.aprioriIdStateVector.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aprioriIdStateVectorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aprioriIdStateVector.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var aprioriStateVector: String? { let o = _accessor.offset(VTOFFSET.aprioriStateVector.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aprioriStateVectorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aprioriStateVector.v) }
  ///  Flag indicating whether this is an initial orbit determination.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var initialOd: Bool { let o = _accessor.offset(VTOFFSET.initialOd.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
  ///  Example: /// Example: 2023-08-28T11:20:21.247192Z
  ///  Constraints: No constraints specified.
  public var lastObStart: String? { let o = _accessor.offset(VTOFFSET.lastObStart.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastObStartSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastObStart.v) }
  ///  The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
  ///  Example: /// Example: 2023-08-28T11:20:21.247192Z
  ///  Constraints: No constraints specified.
  public var lastObEnd: String? { let o = _accessor.offset(VTOFFSET.lastObEnd.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastObEndSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastObEnd.v) }
  ///  The time span used for the OD of the object, in days.
  ///  Example: /// Example: 3.5
  ///  Constraints: No constraints specified.
  public var timeSpan: Double { let o = _accessor.offset(VTOFFSET.timeSpan.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Optional start time at which this OD solution is accurate, in ISO 8601 UTC datetime format with microsecond precision.
  ///  Example: /// Example: 2023-08-28T11:20:21.247192Z
  ///  Constraints: No constraints specified.
  public var effectiveFrom: String? { let o = _accessor.offset(VTOFFSET.effectiveFrom.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var effectiveFromSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.effectiveFrom.v) }
  ///  Optional end time at which this OD solution may no longer be accurate, in ISO 8601 UTC datetime format with microsecond precision.
  ///  Example: /// Example: 2023-08-30T08:15:00.123456Z
  ///  Constraints: No constraints specified.
  public var effectiveUntil: String? { let o = _accessor.offset(VTOFFSET.effectiveUntil.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var effectiveUntilSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.effectiveUntil.v) }
  ///  The Weighted Root Mean Squared (RMS) of the differential correction of the target object that produced this OD state. WRMS is a quality indicator of the OD update, with a value of 1.00 being optimal. WRMS applies to batch least squares (BLS) processes.
  ///  Example: /// Example: 0.991
  ///  Constraints: No constraints specified.
  public var wrms: Double { let o = _accessor.offset(VTOFFSET.wrms.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Weighted Root Mean Squared (RMS) of the differential correction from the previous overhead pass of the satellite. Provides a point of comparison for assessing changes in the quality of the OD solution between consecutive passes.
  ///  Example: /// Example: 1.02
  ///  Constraints: No constraints specified.
  public var previousWrms: Double { let o = _accessor.offset(VTOFFSET.previousWrms.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Weighted Root Mean Squared (RMS) calculated for the first satellite pass in the observation span. Serves as the initial quality metric for the beginning of the observation period.
  ///  Example: /// Example: 0.985
  ///  Constraints: No constraints specified.
  public var firstPassWrms: Double { let o = _accessor.offset(VTOFFSET.firstPassWrms.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Lowest Weighted Root Mean Squared (RMS) value achieved for any single satellite pass during the observation span, indicating the pass with the highest quality OD solution.
  ///  Example: /// Example: 0.975
  ///  Constraints: No constraints specified.
  public var bestPassWrms: Double { let o = _accessor.offset(VTOFFSET.bestPassWrms.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Error growth rate of the OD solution in kilometers per day.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var errorGrowthRate: Double { let o = _accessor.offset(VTOFFSET.errorGrowthRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Model parameter value for energy dissipation rate (EDR) in watts per kilogram.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var edr: Double { let o = _accessor.offset(VTOFFSET.edr.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Orbit determination method used to produce this record (e.g. BLS, KF, UKF, etc.).
  ///  Example: /// Example: BLS
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var method: String? { let o = _accessor.offset(VTOFFSET.method.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var methodSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.method.v) }
  ///  Source of orbit determination method used to produce this record (e.g. ASW, ACTRAC, FreeFlyer, GEODYNE, GDTS, etc.).
  ///  Example: /// Example: ASW
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var methodSource: String? { let o = _accessor.offset(VTOFFSET.methodSource.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var methodSourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.methodSource.v) }
  ///  The fit span, in days, used in a Batch Least Squares (BLS) OD.
  ///  Example: /// Example: 0.6
  ///  Constraints: No constraints specified.
  public var fitSpan: Double { let o = _accessor.offset(VTOFFSET.fitSpan.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Flag indicating whether the ballistic coefficient was estimated during this OD solution.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var ballisticCoeffEst: Bool { let o = _accessor.offset(VTOFFSET.ballisticCoeffEst.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Model used to estimate the ballistic coefficient.
  ///  Example: /// Example: GaussMarkov
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var ballisticCoeffModel: String? { let o = _accessor.offset(VTOFFSET.ballisticCoeffModel.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ballisticCoeffModelSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ballisticCoeffModel.v) }
  ///  Flag indicating whether the AGOM was estimated during this OD solution.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var agomEst: Bool { let o = _accessor.offset(VTOFFSET.agomEst.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Model used to estimate the AGOM.
  ///  Example: /// Example: RandomWalk
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var agomModel: String? { let o = _accessor.offset(VTOFFSET.agomModel.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var agomModelSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.agomModel.v) }
  ///  OD parameter value for the Root Mean Square (RMS) convergence criteria to successfully close the OD solution.
  ///  Example: /// Example: 0.001
  ///  Constraints: No constraints specified.
  public var rmsConvergenceCriteria: Double { let o = _accessor.offset(VTOFFSET.rmsConvergenceCriteria.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The number of iterations taken for the algorithm to converge on an OD solution.
  ///  Example: /// Example: 8
  ///  Constraints: No constraints specified.
  public var numIterations: Int32 { let o = _accessor.offset(VTOFFSET.numIterations.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were accepted in this OD solution. See the associated acceptedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The acceptedObTyps and acceptedObIds arrays must match in size.
  ///  Example: /// Example: ['EO', 'RADAR']
  ///  Constraints: No constraints specified.
  public var hasAcceptedObTyps: Bool { let o = _accessor.offset(VTOFFSET.acceptedObTyps.v); return o == 0 ? false : true }
  public var acceptedObTypsCount: Int32 { let o = _accessor.offset(VTOFFSET.acceptedObTyps.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func acceptedObTyps(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.acceptedObTyps.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of UDL data (observation) UUIDs that were accepted in this OD solution. See the associated acceptedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
  ///  Example: /// Example: ['EOOBSERVATION-ID1', 'RADAROBSERVATION-ID1']
  ///  Constraints: No constraints specified.
  public var hasAcceptedObIds: Bool { let o = _accessor.offset(VTOFFSET.acceptedObIds.v); return o == 0 ? false : true }
  public var acceptedObIdsCount: Int32 { let o = _accessor.offset(VTOFFSET.acceptedObIds.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func acceptedObIds(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.acceptedObIds.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were rejected in this OD solution. See the associated rejectedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The rejectedObTyps and rejectedObIds arrays must match in size.
  ///  Example: /// Example: ['DOA', 'RF']
  ///  Constraints: No constraints specified.
  public var hasRejectedObTyps: Bool { let o = _accessor.offset(VTOFFSET.rejectedObTyps.v); return o == 0 ? false : true }
  public var rejectedObTypsCount: Int32 { let o = _accessor.offset(VTOFFSET.rejectedObTyps.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func rejectedObTyps(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.rejectedObTyps.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of UDL data (observation) UUIDs that were rejected in this OD solution. See the associated rejectedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
  ///  Example: /// Example: ['DIFFOFARRIVAL-ID2', 'RFOBSERVATION-ID2']
  ///  Constraints: No constraints specified.
  public var hasRejectedObIds: Bool { let o = _accessor.offset(VTOFFSET.rejectedObIds.v); return o == 0 ? false : true }
  public var rejectedObIdsCount: Int32 { let o = _accessor.offset(VTOFFSET.rejectedObIds.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func rejectedObIds(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.rejectedObIds.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of UDL UUIDs (idSensor) of the sensors that contributed observations in this OD solution.
  ///  Example: /// Example: ['SENSOR-ID1', 'SENSOR-ID2']
  ///  Constraints: No constraints specified.
  public var hasSensorIds: Bool { let o = _accessor.offset(VTOFFSET.sensorIds.v); return o == 0 ? false : true }
  public var sensorIdsCount: Int32 { let o = _accessor.offset(VTOFFSET.sensorIds.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sensorIds(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.sensorIds.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: OrbitDetermination_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : OrbitDetermination_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startOrbitDetermination_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 44) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(startTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: startTime, at: VTOFFSET.startTime.p) }
  public static func add(endTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: endTime, at: VTOFFSET.endTime.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(aprioriIdElset: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aprioriIdElset, at: VTOFFSET.aprioriIdElset.p) }
  public static func add(aprioriElset: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aprioriElset, at: VTOFFSET.aprioriElset.p) }
  public static func add(aprioriIdStateVector: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aprioriIdStateVector, at: VTOFFSET.aprioriIdStateVector.p) }
  public static func add(aprioriStateVector: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aprioriStateVector, at: VTOFFSET.aprioriStateVector.p) }
  public static func add(initialOd: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: initialOd, def: false,
   at: VTOFFSET.initialOd.p) }
  public static func add(lastObStart: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastObStart, at: VTOFFSET.lastObStart.p) }
  public static func add(lastObEnd: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastObEnd, at: VTOFFSET.lastObEnd.p) }
  public static func add(timeSpan: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: timeSpan, def: 0.0, at: VTOFFSET.timeSpan.p) }
  public static func add(effectiveFrom: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: effectiveFrom, at: VTOFFSET.effectiveFrom.p) }
  public static func add(effectiveUntil: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: effectiveUntil, at: VTOFFSET.effectiveUntil.p) }
  public static func add(wrms: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: wrms, def: 0.0, at: VTOFFSET.wrms.p) }
  public static func add(previousWrms: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: previousWrms, def: 0.0, at: VTOFFSET.previousWrms.p) }
  public static func add(firstPassWrms: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: firstPassWrms, def: 0.0, at: VTOFFSET.firstPassWrms.p) }
  public static func add(bestPassWrms: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bestPassWrms, def: 0.0, at: VTOFFSET.bestPassWrms.p) }
  public static func add(errorGrowthRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: errorGrowthRate, def: 0.0, at: VTOFFSET.errorGrowthRate.p) }
  public static func add(edr: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: edr, def: 0.0, at: VTOFFSET.edr.p) }
  public static func add(method: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: method, at: VTOFFSET.method.p) }
  public static func add(methodSource: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: methodSource, at: VTOFFSET.methodSource.p) }
  public static func add(fitSpan: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fitSpan, def: 0.0, at: VTOFFSET.fitSpan.p) }
  public static func add(ballisticCoeffEst: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ballisticCoeffEst, def: false,
   at: VTOFFSET.ballisticCoeffEst.p) }
  public static func add(ballisticCoeffModel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ballisticCoeffModel, at: VTOFFSET.ballisticCoeffModel.p) }
  public static func add(agomEst: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: agomEst, def: false,
   at: VTOFFSET.agomEst.p) }
  public static func add(agomModel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: agomModel, at: VTOFFSET.agomModel.p) }
  public static func add(rmsConvergenceCriteria: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rmsConvergenceCriteria, def: 0.0, at: VTOFFSET.rmsConvergenceCriteria.p) }
  public static func add(numIterations: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numIterations, def: 0, at: VTOFFSET.numIterations.p) }
  public static func addVectorOf(acceptedObTyps: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: acceptedObTyps, at: VTOFFSET.acceptedObTyps.p) }
  public static func addVectorOf(acceptedObIds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: acceptedObIds, at: VTOFFSET.acceptedObIds.p) }
  public static func addVectorOf(rejectedObTyps: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rejectedObTyps, at: VTOFFSET.rejectedObTyps.p) }
  public static func addVectorOf(rejectedObIds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rejectedObIds, at: VTOFFSET.rejectedObIds.p) }
  public static func addVectorOf(sensorIds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sensorIds, at: VTOFFSET.sensorIds.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: OrbitDetermination_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endOrbitDetermination_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createOrbitDetermination_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    startTimeOffset startTime: Offset = Offset(),
    endTimeOffset endTime: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    origObjectIdOffset origObjectId: Offset = Offset(),
    satNo: Int32 = 0,
    aprioriIdElsetOffset aprioriIdElset: Offset = Offset(),
    aprioriElsetOffset aprioriElset: Offset = Offset(),
    aprioriIdStateVectorOffset aprioriIdStateVector: Offset = Offset(),
    aprioriStateVectorOffset aprioriStateVector: Offset = Offset(),
    initialOd: Bool = false,
    lastObStartOffset lastObStart: Offset = Offset(),
    lastObEndOffset lastObEnd: Offset = Offset(),
    timeSpan: Double = 0.0,
    effectiveFromOffset effectiveFrom: Offset = Offset(),
    effectiveUntilOffset effectiveUntil: Offset = Offset(),
    wrms: Double = 0.0,
    previousWrms: Double = 0.0,
    firstPassWrms: Double = 0.0,
    bestPassWrms: Double = 0.0,
    errorGrowthRate: Double = 0.0,
    edr: Double = 0.0,
    methodOffset method: Offset = Offset(),
    methodSourceOffset methodSource: Offset = Offset(),
    fitSpan: Double = 0.0,
    ballisticCoeffEst: Bool = false,
    ballisticCoeffModelOffset ballisticCoeffModel: Offset = Offset(),
    agomEst: Bool = false,
    agomModelOffset agomModel: Offset = Offset(),
    rmsConvergenceCriteria: Double = 0.0,
    numIterations: Int32 = 0,
    acceptedObTypsVectorOffset acceptedObTyps: Offset = Offset(),
    acceptedObIdsVectorOffset acceptedObIds: Offset = Offset(),
    rejectedObTypsVectorOffset rejectedObTyps: Offset = Offset(),
    rejectedObIdsVectorOffset rejectedObIds: Offset = Offset(),
    sensorIdsVectorOffset sensorIds: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: OrbitDetermination_Abridged_dataMode_Enum = .real
  ) -> Offset {
    let __start = OrbitDetermination_Abridged.startOrbitDetermination_Abridged(&fbb)
    OrbitDetermination_Abridged.add(id: id, &fbb)
    OrbitDetermination_Abridged.add(classificationMarking: classificationMarking, &fbb)
    OrbitDetermination_Abridged.add(startTime: startTime, &fbb)
    OrbitDetermination_Abridged.add(endTime: endTime, &fbb)
    OrbitDetermination_Abridged.add(idOnOrbit: idOnOrbit, &fbb)
    OrbitDetermination_Abridged.add(origObjectId: origObjectId, &fbb)
    OrbitDetermination_Abridged.add(satNo: satNo, &fbb)
    OrbitDetermination_Abridged.add(aprioriIdElset: aprioriIdElset, &fbb)
    OrbitDetermination_Abridged.add(aprioriElset: aprioriElset, &fbb)
    OrbitDetermination_Abridged.add(aprioriIdStateVector: aprioriIdStateVector, &fbb)
    OrbitDetermination_Abridged.add(aprioriStateVector: aprioriStateVector, &fbb)
    OrbitDetermination_Abridged.add(initialOd: initialOd, &fbb)
    OrbitDetermination_Abridged.add(lastObStart: lastObStart, &fbb)
    OrbitDetermination_Abridged.add(lastObEnd: lastObEnd, &fbb)
    OrbitDetermination_Abridged.add(timeSpan: timeSpan, &fbb)
    OrbitDetermination_Abridged.add(effectiveFrom: effectiveFrom, &fbb)
    OrbitDetermination_Abridged.add(effectiveUntil: effectiveUntil, &fbb)
    OrbitDetermination_Abridged.add(wrms: wrms, &fbb)
    OrbitDetermination_Abridged.add(previousWrms: previousWrms, &fbb)
    OrbitDetermination_Abridged.add(firstPassWrms: firstPassWrms, &fbb)
    OrbitDetermination_Abridged.add(bestPassWrms: bestPassWrms, &fbb)
    OrbitDetermination_Abridged.add(errorGrowthRate: errorGrowthRate, &fbb)
    OrbitDetermination_Abridged.add(edr: edr, &fbb)
    OrbitDetermination_Abridged.add(method: method, &fbb)
    OrbitDetermination_Abridged.add(methodSource: methodSource, &fbb)
    OrbitDetermination_Abridged.add(fitSpan: fitSpan, &fbb)
    OrbitDetermination_Abridged.add(ballisticCoeffEst: ballisticCoeffEst, &fbb)
    OrbitDetermination_Abridged.add(ballisticCoeffModel: ballisticCoeffModel, &fbb)
    OrbitDetermination_Abridged.add(agomEst: agomEst, &fbb)
    OrbitDetermination_Abridged.add(agomModel: agomModel, &fbb)
    OrbitDetermination_Abridged.add(rmsConvergenceCriteria: rmsConvergenceCriteria, &fbb)
    OrbitDetermination_Abridged.add(numIterations: numIterations, &fbb)
    OrbitDetermination_Abridged.addVectorOf(acceptedObTyps: acceptedObTyps, &fbb)
    OrbitDetermination_Abridged.addVectorOf(acceptedObIds: acceptedObIds, &fbb)
    OrbitDetermination_Abridged.addVectorOf(rejectedObTyps: rejectedObTyps, &fbb)
    OrbitDetermination_Abridged.addVectorOf(rejectedObIds: rejectedObIds, &fbb)
    OrbitDetermination_Abridged.addVectorOf(sensorIds: sensorIds, &fbb)
    OrbitDetermination_Abridged.add(createdAt: createdAt, &fbb)
    OrbitDetermination_Abridged.add(createdBy: createdBy, &fbb)
    OrbitDetermination_Abridged.add(sourceDl: sourceDl, &fbb)
    OrbitDetermination_Abridged.add(source: source, &fbb)
    OrbitDetermination_Abridged.add(origin: origin, &fbb)
    OrbitDetermination_Abridged.add(origNetwork: origNetwork, &fbb)
    OrbitDetermination_Abridged.add(dataMode: dataMode, &fbb)
    return OrbitDetermination_Abridged.endOrbitDetermination_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.startTime.p, fieldName: "startTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.endTime.p, fieldName: "endTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.aprioriIdElset.p, fieldName: "aprioriIdElset", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aprioriElset.p, fieldName: "aprioriElset", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aprioriIdStateVector.p, fieldName: "aprioriIdStateVector", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aprioriStateVector.p, fieldName: "aprioriStateVector", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.initialOd.p, fieldName: "initialOd", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.lastObStart.p, fieldName: "lastObStart", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lastObEnd.p, fieldName: "lastObEnd", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timeSpan.p, fieldName: "timeSpan", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.effectiveFrom.p, fieldName: "effectiveFrom", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.effectiveUntil.p, fieldName: "effectiveUntil", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.wrms.p, fieldName: "wrms", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.previousWrms.p, fieldName: "previousWrms", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.firstPassWrms.p, fieldName: "firstPassWrms", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bestPassWrms.p, fieldName: "bestPassWrms", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.errorGrowthRate.p, fieldName: "errorGrowthRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.edr.p, fieldName: "edr", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.method.p, fieldName: "method", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.methodSource.p, fieldName: "methodSource", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fitSpan.p, fieldName: "fitSpan", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ballisticCoeffEst.p, fieldName: "ballisticCoeffEst", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.ballisticCoeffModel.p, fieldName: "ballisticCoeffModel", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.agomEst.p, fieldName: "agomEst", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.agomModel.p, fieldName: "agomModel", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rmsConvergenceCriteria.p, fieldName: "rmsConvergenceCriteria", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.numIterations.p, fieldName: "numIterations", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.acceptedObTyps.p, fieldName: "acceptedObTyps", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.acceptedObIds.p, fieldName: "acceptedObIds", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.rejectedObTyps.p, fieldName: "rejectedObTyps", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.rejectedObIds.p, fieldName: "rejectedObIds", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.sensorIds.p, fieldName: "sensorIds", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: OrbitDetermination_Abridged_dataMode_Enum.self)
    _v.finish()
  }
}

