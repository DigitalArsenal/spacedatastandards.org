// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum SpaceEnvObservation_Full_senReferenceFrame_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case j2000 = 0
  ///  No description available.
  case efgTdr = 1
  ///  No description available.
  case ecrEcef = 2
  ///  No description available.
  case teme = 3
  ///  No description available.
  case itrf = 4
  ///  No description available.
  case gcrf = 5

  public static var max: SpaceEnvObservation_Full_senReferenceFrame_Enum { return .gcrf }
  public static var min: SpaceEnvObservation_Full_senReferenceFrame_Enum { return .j2000 }
}


public enum SpaceEnvObservation_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: SpaceEnvObservation_Full_dataMode_Enum { return .exercise }
  public static var min: SpaceEnvObservation_Full_dataMode_Enum { return .real }
}


///  /// SpaceEnvObservation data.
public struct SpaceEnvObservation_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SPAC" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: SpaceEnvObservation_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case msgType = 8
    case genSystem = 10
    case externalId = 12
    case dataType = 14
    case genTime = 16
    case forecast = 18
    case derived = 20
    case idOnOrbit = 22
    case satNo = 24
    case origObjectId = 26
    case idSensor = 28
    case origSensorId = 30
    case observatoryType = 32
    case observatoryName = 34
    case observatoryNotes = 36
    case instrumentType = 38
    case lat = 40
    case lon = 42
    case alt = 44
    case senReferenceFrame = 46
    case senPos = 48
    case senVel = 50
    case measType = 52
    case senEnergyLevel = 54
    case obSetId = 56
    case particleType = 58
    case obTime = 60
    case seoList = 62
    case quality = 64
    case description = 66
    case descriptor = 68
    case srcTyps = 70
    case srcIds = 72
    case createdAt = 74
    case createdBy = 76
    case source = 78
    case origin = 80
    case dataMode = 82
    case origNetwork = 84
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: f13f82b8-5d2a-407a-b3f3-1fe30ca79eae
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The type of message associated with this record.
  ///  Example: /// Example: SODM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var msgType: String? { let o = _accessor.offset(VTOFFSET.msgType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msgTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msgType.v) }
  ///  The external system which generated the message, if applicable.
  ///  Example: /// Example: System Name
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var genSystem: String? { let o = _accessor.offset(VTOFFSET.genSystem.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var genSystemSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.genSystem.v) }
  ///  Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var externalId: String? { let o = _accessor.offset(VTOFFSET.externalId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var externalIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.externalId.v) }
  ///  The data type (e.g. AP, AURORAL FLUX, ECP, KINDEX, PROPAGATED SOLAR WIND, XRAY FLUX, etc.) of observations in this record.
  ///  Example: /// Example: ECP
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var dataType: String? { let o = _accessor.offset(VTOFFSET.dataType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dataTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dataType.v) }
  ///  The time at which the associated data message was generated, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-02-10T19:48:09.934Z
  ///  Constraints: No constraints specified.
  public var genTime: String? { let o = _accessor.offset(VTOFFSET.genTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var genTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.genTime.v) }
  ///  Flag indicating that this record contains forecast data.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var forecast: Bool { let o = _accessor.offset(VTOFFSET.forecast.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Flag indicating that this record contains derived data.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var derived: Bool { let o = _accessor.offset(VTOFFSET.derived.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Unique identifier of the on-orbit satellite hosting the sensor which produced this data.
  ///  Example: /// Example: 41866
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Satellite/catalog number of the on-orbit satellite hosting the sensor which produced this data.
  ///  Example: /// Example: 41866
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional identifier provided by the record source to indicate the satellite hosting the sensor which produced this data. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: 41866
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Unique identifier of the reporting sensor.
  ///  Example: /// Example: ECP-1
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ECP-1
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origSensorId: String? { let o = _accessor.offset(VTOFFSET.origSensorId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSensorIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSensorId.v) }
  ///  The type of observatory from which this data was collected (e.g. FACILITY, ONORBIT, NETWORK, etc.).
  ///  Example: /// Example: ONORBIT
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var observatoryType: String? { let o = _accessor.offset(VTOFFSET.observatoryType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var observatoryTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.observatoryType.v) }
  ///  The name of the observatory from which this data was collected.
  ///  Example: /// Example: GOES-16
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var observatoryName: String? { let o = _accessor.offset(VTOFFSET.observatoryName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var observatoryNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.observatoryName.v) }
  ///  Additional notes concerning the observatory.
  ///  Example: /// Example: Notes
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var observatoryNotes: String? { let o = _accessor.offset(VTOFFSET.observatoryNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var observatoryNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.observatoryNotes.v) }
  ///  The type of instrument from which this data was collected (e.g. ANTENNA, CHANNELTRON, INTERFEROMETER, MAGNETOMETER, RADIOMETER, etc.).
  ///  Example: /// Example: MAGNETOMETER
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var instrumentType: String? { let o = _accessor.offset(VTOFFSET.instrumentType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var instrumentTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.instrumentType.v) }
  ///  WGS-84 spacecraft/sensor latitude sub-point at observation time, represented as -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 38.8339
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 spacecraft/sensor longitude sub-point at observation time, represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: -104.8214
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft/sensor altitude at observation time, expressed in kilometers above WGS-84 ellipsoid.
  ///  Example: /// Example: 35785.3732
  ///  Constraints: No constraints specified.
  public var alt: Double { let o = _accessor.offset(VTOFFSET.alt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The reference frame of the observing spacecraft/sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var senReferenceFrame: SpaceEnvObservation_Full_senReferenceFrame_Enum { let o = _accessor.offset(VTOFFSET.senReferenceFrame.v); return o == 0 ? .j2000 : SpaceEnvObservation_Full_senReferenceFrame_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .j2000 }
  ///  Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].
  ///  Example: /// Example: [4174.78541785946, -9969.69867853067, 40733.9284531208]
  ///  Constraints: No constraints specified.
  public var hasSenPos: Bool { let o = _accessor.offset(VTOFFSET.senPos.v); return o == 0 ? false : true }
  public var senPosCount: Int32 { let o = _accessor.offset(VTOFFSET.senPos.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func senPos(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.senPos.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Three element array, expressing the observing spacecraft/sensor velocity vector components at observation time, in kilometers/second, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xvel, yvel, zvel].
  ///  Example: /// Example: [0.727059797295872, 0.298037087322647, 0.00157064850994095]
  ///  Constraints: No constraints specified.
  public var hasSenVel: Bool { let o = _accessor.offset(VTOFFSET.senVel.v); return o == 0 ? false : true }
  public var senVelCount: Int32 { let o = _accessor.offset(VTOFFSET.senVel.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func senVel(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.senVel.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The sensor measurement type of the observation data contained in this record.
  ///  Example: /// Example: ENERGETIC PARTICLES
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var measType: String? { let o = _accessor.offset(VTOFFSET.measType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var measTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.measType.v) }
  ///  The energy level bin of the sensor associated with this measurement.
  ///  Example: /// Example: 0500-700 keV
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var senEnergyLevel: String? { let o = _accessor.offset(VTOFFSET.senEnergyLevel.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var senEnergyLevelSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.senEnergyLevel.v) }
  ///  A user-defined name or ID of a set of observations, if applicable. Used for identifying multiple observation records as part of one observation set.
  ///  Example: /// Example: ECPOBSET-478125
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var obSetId: String? { let o = _accessor.offset(VTOFFSET.obSetId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obSetIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obSetId.v) }
  ///  The particle type (AEROSOL, ALPHA PARTICLE, ATOM, DUST, ELECTRON, ION, MOLECULE, NEUTRON, POSITRON, PROTON) associated with this measurement.
  ///  Example: /// Example: PROTON
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var particleType: String? { let o = _accessor.offset(VTOFFSET.particleType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var particleTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.particleType.v) }
  ///  Time of the observation, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-06-07T14:17:39.653Z
  ///  Constraints: No constraints specified.
  public var obTime: String? { let o = _accessor.offset(VTOFFSET.obTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obTime.v) }
  ///  A collection of individual space environment observations.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasSeoList: Bool { let o = _accessor.offset(VTOFFSET.seoList.v); return o == 0 ? false : true }
  public var seoListCount: Int32 { let o = _accessor.offset(VTOFFSET.seoList.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func seoList(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.seoList.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The quality of the overall data contained in this record. The quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the quality indicator.
  ///  Example: /// Example: GOOD
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var quality: String? { let o = _accessor.offset(VTOFFSET.quality.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var qualitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.quality.v) }
  ///  Descriptive or additional information associated with this observation record.
  ///  Example: /// Example: Observation Data Description Text
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var description: String? { let o = _accessor.offset(VTOFFSET.description.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.description.v) }
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: energetic charged particle
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var descriptor: String? { let o = _accessor.offset(VTOFFSET.descriptor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.descriptor.v) }
  ///  Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SGI, SIGACT, SKYIMAGE, SPACEENVOB, SV, TRACK) that are related to this observation record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['SPACEENVOB', 'SGI']
  ///  Constraints: No constraints specified.
  public var hasSrcTyps: Bool { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? false : true }
  public var srcTypsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcTyps(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of UUIDs of the UDL data records that are related to this observation record. See the associated 'srcTyps' array for specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element of the data type of the UUID and use the appropriate API operation to retrieve that object.
  ///  Example: /// Example: ['615236d7-d464-4b8c-9b0b-45994e017d80', '8a38e3d6-35fd-4bda-b883-e3724e6bc6b9']
  ///  Constraints: No constraints specified.
  public var hasSrcIds: Bool { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? false : true }
  public var srcIdsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcIds(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2023-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: SpaceEnvObservation_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : SpaceEnvObservation_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startSpaceEnvObservation_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 41) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(msgType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msgType, at: VTOFFSET.msgType.p) }
  public static func add(genSystem: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: genSystem, at: VTOFFSET.genSystem.p) }
  public static func add(externalId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: externalId, at: VTOFFSET.externalId.p) }
  public static func add(dataType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dataType, at: VTOFFSET.dataType.p) }
  public static func add(genTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: genTime, at: VTOFFSET.genTime.p) }
  public static func add(forecast: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: forecast, def: false,
   at: VTOFFSET.forecast.p) }
  public static func add(derived: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: derived, def: false,
   at: VTOFFSET.derived.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(origSensorId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSensorId, at: VTOFFSET.origSensorId.p) }
  public static func add(observatoryType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: observatoryType, at: VTOFFSET.observatoryType.p) }
  public static func add(observatoryName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: observatoryName, at: VTOFFSET.observatoryName.p) }
  public static func add(observatoryNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: observatoryNotes, at: VTOFFSET.observatoryNotes.p) }
  public static func add(instrumentType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: instrumentType, at: VTOFFSET.instrumentType.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(alt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: alt, def: 0.0, at: VTOFFSET.alt.p) }
  public static func add(senReferenceFrame: SpaceEnvObservation_Full_senReferenceFrame_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: senReferenceFrame.rawValue, def: 0, at: VTOFFSET.senReferenceFrame.p) }
  public static func addVectorOf(senPos: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: senPos, at: VTOFFSET.senPos.p) }
  public static func addVectorOf(senVel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: senVel, at: VTOFFSET.senVel.p) }
  public static func add(measType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: measType, at: VTOFFSET.measType.p) }
  public static func add(senEnergyLevel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: senEnergyLevel, at: VTOFFSET.senEnergyLevel.p) }
  public static func add(obSetId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obSetId, at: VTOFFSET.obSetId.p) }
  public static func add(particleType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: particleType, at: VTOFFSET.particleType.p) }
  public static func add(obTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obTime, at: VTOFFSET.obTime.p) }
  public static func addVectorOf(seoList: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: seoList, at: VTOFFSET.seoList.p) }
  public static func add(quality: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: quality, at: VTOFFSET.quality.p) }
  public static func add(description: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: description, at: VTOFFSET.description.p) }
  public static func add(descriptor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: descriptor, at: VTOFFSET.descriptor.p) }
  public static func addVectorOf(srcTyps: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcTyps, at: VTOFFSET.srcTyps.p) }
  public static func addVectorOf(srcIds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcIds, at: VTOFFSET.srcIds.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: SpaceEnvObservation_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endSpaceEnvObservation_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSpaceEnvObservation_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    msgTypeOffset msgType: Offset = Offset(),
    genSystemOffset genSystem: Offset = Offset(),
    externalIdOffset externalId: Offset = Offset(),
    dataTypeOffset dataType: Offset = Offset(),
    genTimeOffset genTime: Offset = Offset(),
    forecast: Bool = false,
    derived: Bool = false,
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    satNo: Int32 = 0,
    origObjectIdOffset origObjectId: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    origSensorIdOffset origSensorId: Offset = Offset(),
    observatoryTypeOffset observatoryType: Offset = Offset(),
    observatoryNameOffset observatoryName: Offset = Offset(),
    observatoryNotesOffset observatoryNotes: Offset = Offset(),
    instrumentTypeOffset instrumentType: Offset = Offset(),
    lat: Double = 0.0,
    lon: Double = 0.0,
    alt: Double = 0.0,
    senReferenceFrame: SpaceEnvObservation_Full_senReferenceFrame_Enum = .j2000,
    senPosVectorOffset senPos: Offset = Offset(),
    senVelVectorOffset senVel: Offset = Offset(),
    measTypeOffset measType: Offset = Offset(),
    senEnergyLevelOffset senEnergyLevel: Offset = Offset(),
    obSetIdOffset obSetId: Offset = Offset(),
    particleTypeOffset particleType: Offset = Offset(),
    obTimeOffset obTime: Offset = Offset(),
    seoListVectorOffset seoList: Offset = Offset(),
    qualityOffset quality: Offset = Offset(),
    descriptionOffset description: Offset = Offset(),
    descriptorOffset descriptor: Offset = Offset(),
    srcTypsVectorOffset srcTyps: Offset = Offset(),
    srcIdsVectorOffset srcIds: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: SpaceEnvObservation_Full_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = SpaceEnvObservation_Full.startSpaceEnvObservation_Full(&fbb)
    SpaceEnvObservation_Full.add(id: id, &fbb)
    SpaceEnvObservation_Full.add(classificationMarking: classificationMarking, &fbb)
    SpaceEnvObservation_Full.add(msgType: msgType, &fbb)
    SpaceEnvObservation_Full.add(genSystem: genSystem, &fbb)
    SpaceEnvObservation_Full.add(externalId: externalId, &fbb)
    SpaceEnvObservation_Full.add(dataType: dataType, &fbb)
    SpaceEnvObservation_Full.add(genTime: genTime, &fbb)
    SpaceEnvObservation_Full.add(forecast: forecast, &fbb)
    SpaceEnvObservation_Full.add(derived: derived, &fbb)
    SpaceEnvObservation_Full.add(idOnOrbit: idOnOrbit, &fbb)
    SpaceEnvObservation_Full.add(satNo: satNo, &fbb)
    SpaceEnvObservation_Full.add(origObjectId: origObjectId, &fbb)
    SpaceEnvObservation_Full.add(idSensor: idSensor, &fbb)
    SpaceEnvObservation_Full.add(origSensorId: origSensorId, &fbb)
    SpaceEnvObservation_Full.add(observatoryType: observatoryType, &fbb)
    SpaceEnvObservation_Full.add(observatoryName: observatoryName, &fbb)
    SpaceEnvObservation_Full.add(observatoryNotes: observatoryNotes, &fbb)
    SpaceEnvObservation_Full.add(instrumentType: instrumentType, &fbb)
    SpaceEnvObservation_Full.add(lat: lat, &fbb)
    SpaceEnvObservation_Full.add(lon: lon, &fbb)
    SpaceEnvObservation_Full.add(alt: alt, &fbb)
    SpaceEnvObservation_Full.add(senReferenceFrame: senReferenceFrame, &fbb)
    SpaceEnvObservation_Full.addVectorOf(senPos: senPos, &fbb)
    SpaceEnvObservation_Full.addVectorOf(senVel: senVel, &fbb)
    SpaceEnvObservation_Full.add(measType: measType, &fbb)
    SpaceEnvObservation_Full.add(senEnergyLevel: senEnergyLevel, &fbb)
    SpaceEnvObservation_Full.add(obSetId: obSetId, &fbb)
    SpaceEnvObservation_Full.add(particleType: particleType, &fbb)
    SpaceEnvObservation_Full.add(obTime: obTime, &fbb)
    SpaceEnvObservation_Full.addVectorOf(seoList: seoList, &fbb)
    SpaceEnvObservation_Full.add(quality: quality, &fbb)
    SpaceEnvObservation_Full.add(description: description, &fbb)
    SpaceEnvObservation_Full.add(descriptor: descriptor, &fbb)
    SpaceEnvObservation_Full.addVectorOf(srcTyps: srcTyps, &fbb)
    SpaceEnvObservation_Full.addVectorOf(srcIds: srcIds, &fbb)
    SpaceEnvObservation_Full.add(createdAt: createdAt, &fbb)
    SpaceEnvObservation_Full.add(createdBy: createdBy, &fbb)
    SpaceEnvObservation_Full.add(source: source, &fbb)
    SpaceEnvObservation_Full.add(origin: origin, &fbb)
    SpaceEnvObservation_Full.add(dataMode: dataMode, &fbb)
    SpaceEnvObservation_Full.add(origNetwork: origNetwork, &fbb)
    return SpaceEnvObservation_Full.endSpaceEnvObservation_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msgType.p, fieldName: "msgType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.genSystem.p, fieldName: "genSystem", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.externalId.p, fieldName: "externalId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataType.p, fieldName: "dataType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.genTime.p, fieldName: "genTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.forecast.p, fieldName: "forecast", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.derived.p, fieldName: "derived", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSensorId.p, fieldName: "origSensorId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.observatoryType.p, fieldName: "observatoryType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.observatoryName.p, fieldName: "observatoryName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.observatoryNotes.p, fieldName: "observatoryNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.instrumentType.p, fieldName: "instrumentType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.alt.p, fieldName: "alt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.senReferenceFrame.p, fieldName: "senReferenceFrame", required: false, type: SpaceEnvObservation_Full_senReferenceFrame_Enum.self)
    try _v.visit(field: VTOFFSET.senPos.p, fieldName: "senPos", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.senVel.p, fieldName: "senVel", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.measType.p, fieldName: "measType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.senEnergyLevel.p, fieldName: "senEnergyLevel", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obSetId.p, fieldName: "obSetId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.particleType.p, fieldName: "particleType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obTime.p, fieldName: "obTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.seoList.p, fieldName: "seoList", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.quality.p, fieldName: "quality", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.description.p, fieldName: "description", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.descriptor.p, fieldName: "descriptor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.srcTyps.p, fieldName: "srcTyps", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.srcIds.p, fieldName: "srcIds", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: SpaceEnvObservation_Full_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

