// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
public struct FlightPlanPointGroups_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "FLIG" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: FlightPlanPointGroups_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case pointGroupName = 4
    case worstFuelCase = 6
    case lsafName = 8
    case lsafDistance = 10
    case fsafDistance = 12
    case etopsDistance = 14
    case lsafTime = 16
    case fsafTime = 18
    case etopsTime = 20
    case lsafAvgWindFactor = 22
    case fsafAvgWindFactor = 24
    case etopsAvgWindFactor = 26
    case lsafTempDev = 28
    case fsafTempDev = 30
    case etopsTempDev = 32
    case lsafReqFuel = 34
    case fsafReqFuel = 36
    case etopsReqFuel = 38
    case fromTakeoffTime = 40
    case plannedFuel = 42
    case fuelCalcAlt = 44
    case fuelCalcSpd = 46
    case avgFuelFlow = 48
    case flightPlanPoints = 50
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Name of the point group, usually Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP) sections.
  ///  Example: /// Example: ETOPS_CF_POINT_1
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var pointGroupName: String? { let o = _accessor.offset(VTOFFSET.pointGroupName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pointGroupNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pointGroupName.v) }
  ///  Specifies which Point Group case requires the most fuel.
  ///  Example: /// Example: DEPRESSURIZED ENGINE OUT ETP
  ///  Constraints: Minimum length = 0, Maximum length = 48
  public var worstFuelCase: String? { let o = _accessor.offset(VTOFFSET.worstFuelCase.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var worstFuelCaseSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.worstFuelCase.v) }
  ///  Name of the last suitable airfield, International Civil Aviation Organization (ICAO) code preferred.
  ///  Example: /// Example: LPPD
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var lsafName: String? { let o = _accessor.offset(VTOFFSET.lsafName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lsafNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lsafName.v) }
  ///  Distance from the Equal Time Point (ETP) to the last suitable airfield in nautical miles.
  ///  Example: /// Example: 684.1
  ///  Constraints: No constraints specified.
  public var lsafDistance: Double { let o = _accessor.offset(VTOFFSET.lsafDistance.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Distance from the Equal Time Point (ETP) to the first suitable airfield in nautical miles.
  ///  Example: /// Example: 684.1
  ///  Constraints: No constraints specified.
  public var fsafDistance: Double { let o = _accessor.offset(VTOFFSET.fsafDistance.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Distance from the Extended Operations (ETOPS) point to the recovery airfield in nautical miles.
  ///  Example: /// Example: 684.1
  ///  Constraints: No constraints specified.
  public var etopsDistance: Double { let o = _accessor.offset(VTOFFSET.etopsDistance.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Time to fly from the Equal Time Point (ETP) to the last suitable airfield expressed in HH:MM format.
  ///  Example: /// Example: 01:23
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var lsafTime: String? { let o = _accessor.offset(VTOFFSET.lsafTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lsafTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lsafTime.v) }
  ///  Time to fly from the Equal Time Point (ETP) to the first suitable airfield expressed in HH:MM format.
  ///  Example: /// Example: 01:23
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var fsafTime: String? { let o = _accessor.offset(VTOFFSET.fsafTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fsafTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fsafTime.v) }
  ///  Time to fly from the Extended Operations (ETOPS) point to the recovery airfield expressed in HH:MM format.
  ///  Example: /// Example: 01:23
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var etopsTime: String? { let o = _accessor.offset(VTOFFSET.etopsTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var etopsTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.etopsTime.v) }
  ///  Average wind factor from the Equal Time Point (ETP) to the last suitable airfield in knots.
  ///  Example: /// Example: 13.1
  ///  Constraints: No constraints specified.
  public var lsafAvgWindFactor: Double { let o = _accessor.offset(VTOFFSET.lsafAvgWindFactor.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average wind factor from the Equal Time Point (ETP) to the first suitable airfield in knots.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var fsafAvgWindFactor: Double { let o = _accessor.offset(VTOFFSET.fsafAvgWindFactor.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average wind factor from the Extended Operations (ETOPS) point to the recovery airfield in knots.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  public var etopsAvgWindFactor: Double { let o = _accessor.offset(VTOFFSET.etopsAvgWindFactor.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Temperature deviation from the Equal Time Point (ETP) to the last suitable airfield in degrees Celsius.
  ///  Example: /// Example: 9.1
  ///  Constraints: No constraints specified.
  public var lsafTempDev: Double { let o = _accessor.offset(VTOFFSET.lsafTempDev.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Temperature deviation from the Equal Time Point (ETP) to the first suitable airfield in degrees Celsius.
  ///  Example: /// Example: 9.1
  ///  Constraints: No constraints specified.
  public var fsafTempDev: Double { let o = _accessor.offset(VTOFFSET.fsafTempDev.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Temperature deviation from the Extended Operations (ETOPS) point to the recovery airfield in degrees Celsius.
  ///  Example: /// Example: 9.1
  ///  Constraints: No constraints specified.
  public var etopsTempDev: Double { let o = _accessor.offset(VTOFFSET.etopsTempDev.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fuel required to fly from the Equal Time Point (ETP) to the last suitable airfield in pounds.
  ///  Example: /// Example: 50787.1
  ///  Constraints: No constraints specified.
  public var lsafReqFuel: Double { let o = _accessor.offset(VTOFFSET.lsafReqFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fuel required to fly from the Equal Time Point (ETP) to the first suitable airfield in pounds.
  ///  Example: /// Example: 50380.1
  ///  Constraints: No constraints specified.
  public var fsafReqFuel: Double { let o = _accessor.offset(VTOFFSET.fsafReqFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Fuel required to fly from the Extended Operations (ETOPS) point to the recovery airfield in pounds.
  ///  Example: /// Example: 4412.1
  ///  Constraints: No constraints specified.
  public var etopsReqFuel: Double { let o = _accessor.offset(VTOFFSET.etopsReqFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Total time from takeoff when the point is reached expressed in HH:MM format.
  ///  Example: /// Example: 07:29
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var fromTakeoffTime: String? { let o = _accessor.offset(VTOFFSET.fromTakeoffTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fromTakeoffTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fromTakeoffTime.v) }
  ///  Amount of planned fuel on board when the point is reached in pounds.
  ///  Example: /// Example: 190319.1
  ///  Constraints: No constraints specified.
  public var plannedFuel: Double { let o = _accessor.offset(VTOFFSET.plannedFuel.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Flight level of the point at which the fuel was calculated in feet.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  public var fuelCalcAlt: Double { let o = _accessor.offset(VTOFFSET.fuelCalcAlt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  True airspeed at which the fuel was calculated in knots.
  ///  Example: /// Example: 365.1
  ///  Constraints: No constraints specified.
  public var fuelCalcSpd: Double { let o = _accessor.offset(VTOFFSET.fuelCalcSpd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Average fuel flow at which the fuel was calculated in pounds per hour.
  ///  Example: /// Example: 19693.1
  ///  Constraints: No constraints specified.
  public var avgFuelFlow: Double { let o = _accessor.offset(VTOFFSET.avgFuelFlow.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Array of point data for this Point Group.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasFlightPlanPoints: Bool { let o = _accessor.offset(VTOFFSET.flightPlanPoints.v); return o == 0 ? false : true }
  public var flightPlanPointsCount: Int32 { let o = _accessor.offset(VTOFFSET.flightPlanPoints.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func flightPlanPoints(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.flightPlanPoints.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startFlightPlanPointGroups_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 24) }
  public static func add(pointGroupName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pointGroupName, at: VTOFFSET.pointGroupName.p) }
  public static func add(worstFuelCase: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: worstFuelCase, at: VTOFFSET.worstFuelCase.p) }
  public static func add(lsafName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lsafName, at: VTOFFSET.lsafName.p) }
  public static func add(lsafDistance: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lsafDistance, def: 0.0, at: VTOFFSET.lsafDistance.p) }
  public static func add(fsafDistance: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fsafDistance, def: 0.0, at: VTOFFSET.fsafDistance.p) }
  public static func add(etopsDistance: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: etopsDistance, def: 0.0, at: VTOFFSET.etopsDistance.p) }
  public static func add(lsafTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lsafTime, at: VTOFFSET.lsafTime.p) }
  public static func add(fsafTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fsafTime, at: VTOFFSET.fsafTime.p) }
  public static func add(etopsTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: etopsTime, at: VTOFFSET.etopsTime.p) }
  public static func add(lsafAvgWindFactor: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lsafAvgWindFactor, def: 0.0, at: VTOFFSET.lsafAvgWindFactor.p) }
  public static func add(fsafAvgWindFactor: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fsafAvgWindFactor, def: 0.0, at: VTOFFSET.fsafAvgWindFactor.p) }
  public static func add(etopsAvgWindFactor: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: etopsAvgWindFactor, def: 0.0, at: VTOFFSET.etopsAvgWindFactor.p) }
  public static func add(lsafTempDev: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lsafTempDev, def: 0.0, at: VTOFFSET.lsafTempDev.p) }
  public static func add(fsafTempDev: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fsafTempDev, def: 0.0, at: VTOFFSET.fsafTempDev.p) }
  public static func add(etopsTempDev: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: etopsTempDev, def: 0.0, at: VTOFFSET.etopsTempDev.p) }
  public static func add(lsafReqFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lsafReqFuel, def: 0.0, at: VTOFFSET.lsafReqFuel.p) }
  public static func add(fsafReqFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fsafReqFuel, def: 0.0, at: VTOFFSET.fsafReqFuel.p) }
  public static func add(etopsReqFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: etopsReqFuel, def: 0.0, at: VTOFFSET.etopsReqFuel.p) }
  public static func add(fromTakeoffTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fromTakeoffTime, at: VTOFFSET.fromTakeoffTime.p) }
  public static func add(plannedFuel: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: plannedFuel, def: 0.0, at: VTOFFSET.plannedFuel.p) }
  public static func add(fuelCalcAlt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fuelCalcAlt, def: 0.0, at: VTOFFSET.fuelCalcAlt.p) }
  public static func add(fuelCalcSpd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fuelCalcSpd, def: 0.0, at: VTOFFSET.fuelCalcSpd.p) }
  public static func add(avgFuelFlow: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: avgFuelFlow, def: 0.0, at: VTOFFSET.avgFuelFlow.p) }
  public static func addVectorOf(flightPlanPoints: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: flightPlanPoints, at: VTOFFSET.flightPlanPoints.p) }
  public static func endFlightPlanPointGroups_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createFlightPlanPointGroups_Abridged(
    _ fbb: inout FlatBufferBuilder,
    pointGroupNameOffset pointGroupName: Offset = Offset(),
    worstFuelCaseOffset worstFuelCase: Offset = Offset(),
    lsafNameOffset lsafName: Offset = Offset(),
    lsafDistance: Double = 0.0,
    fsafDistance: Double = 0.0,
    etopsDistance: Double = 0.0,
    lsafTimeOffset lsafTime: Offset = Offset(),
    fsafTimeOffset fsafTime: Offset = Offset(),
    etopsTimeOffset etopsTime: Offset = Offset(),
    lsafAvgWindFactor: Double = 0.0,
    fsafAvgWindFactor: Double = 0.0,
    etopsAvgWindFactor: Double = 0.0,
    lsafTempDev: Double = 0.0,
    fsafTempDev: Double = 0.0,
    etopsTempDev: Double = 0.0,
    lsafReqFuel: Double = 0.0,
    fsafReqFuel: Double = 0.0,
    etopsReqFuel: Double = 0.0,
    fromTakeoffTimeOffset fromTakeoffTime: Offset = Offset(),
    plannedFuel: Double = 0.0,
    fuelCalcAlt: Double = 0.0,
    fuelCalcSpd: Double = 0.0,
    avgFuelFlow: Double = 0.0,
    flightPlanPointsVectorOffset flightPlanPoints: Offset = Offset()
  ) -> Offset {
    let __start = FlightPlanPointGroups_Abridged.startFlightPlanPointGroups_Abridged(&fbb)
    FlightPlanPointGroups_Abridged.add(pointGroupName: pointGroupName, &fbb)
    FlightPlanPointGroups_Abridged.add(worstFuelCase: worstFuelCase, &fbb)
    FlightPlanPointGroups_Abridged.add(lsafName: lsafName, &fbb)
    FlightPlanPointGroups_Abridged.add(lsafDistance: lsafDistance, &fbb)
    FlightPlanPointGroups_Abridged.add(fsafDistance: fsafDistance, &fbb)
    FlightPlanPointGroups_Abridged.add(etopsDistance: etopsDistance, &fbb)
    FlightPlanPointGroups_Abridged.add(lsafTime: lsafTime, &fbb)
    FlightPlanPointGroups_Abridged.add(fsafTime: fsafTime, &fbb)
    FlightPlanPointGroups_Abridged.add(etopsTime: etopsTime, &fbb)
    FlightPlanPointGroups_Abridged.add(lsafAvgWindFactor: lsafAvgWindFactor, &fbb)
    FlightPlanPointGroups_Abridged.add(fsafAvgWindFactor: fsafAvgWindFactor, &fbb)
    FlightPlanPointGroups_Abridged.add(etopsAvgWindFactor: etopsAvgWindFactor, &fbb)
    FlightPlanPointGroups_Abridged.add(lsafTempDev: lsafTempDev, &fbb)
    FlightPlanPointGroups_Abridged.add(fsafTempDev: fsafTempDev, &fbb)
    FlightPlanPointGroups_Abridged.add(etopsTempDev: etopsTempDev, &fbb)
    FlightPlanPointGroups_Abridged.add(lsafReqFuel: lsafReqFuel, &fbb)
    FlightPlanPointGroups_Abridged.add(fsafReqFuel: fsafReqFuel, &fbb)
    FlightPlanPointGroups_Abridged.add(etopsReqFuel: etopsReqFuel, &fbb)
    FlightPlanPointGroups_Abridged.add(fromTakeoffTime: fromTakeoffTime, &fbb)
    FlightPlanPointGroups_Abridged.add(plannedFuel: plannedFuel, &fbb)
    FlightPlanPointGroups_Abridged.add(fuelCalcAlt: fuelCalcAlt, &fbb)
    FlightPlanPointGroups_Abridged.add(fuelCalcSpd: fuelCalcSpd, &fbb)
    FlightPlanPointGroups_Abridged.add(avgFuelFlow: avgFuelFlow, &fbb)
    FlightPlanPointGroups_Abridged.addVectorOf(flightPlanPoints: flightPlanPoints, &fbb)
    return FlightPlanPointGroups_Abridged.endFlightPlanPointGroups_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.pointGroupName.p, fieldName: "pointGroupName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.worstFuelCase.p, fieldName: "worstFuelCase", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lsafName.p, fieldName: "lsafName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lsafDistance.p, fieldName: "lsafDistance", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fsafDistance.p, fieldName: "fsafDistance", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.etopsDistance.p, fieldName: "etopsDistance", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lsafTime.p, fieldName: "lsafTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fsafTime.p, fieldName: "fsafTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.etopsTime.p, fieldName: "etopsTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lsafAvgWindFactor.p, fieldName: "lsafAvgWindFactor", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fsafAvgWindFactor.p, fieldName: "fsafAvgWindFactor", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.etopsAvgWindFactor.p, fieldName: "etopsAvgWindFactor", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lsafTempDev.p, fieldName: "lsafTempDev", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fsafTempDev.p, fieldName: "fsafTempDev", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.etopsTempDev.p, fieldName: "etopsTempDev", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lsafReqFuel.p, fieldName: "lsafReqFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fsafReqFuel.p, fieldName: "fsafReqFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.etopsReqFuel.p, fieldName: "etopsReqFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fromTakeoffTime.p, fieldName: "fromTakeoffTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.plannedFuel.p, fieldName: "plannedFuel", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fuelCalcAlt.p, fieldName: "fuelCalcAlt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fuelCalcSpd.p, fieldName: "fuelCalcSpd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.avgFuelFlow.p, fieldName: "avgFuelFlow", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.flightPlanPoints.p, fieldName: "flightPlanPoints", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

