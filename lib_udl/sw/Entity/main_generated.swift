// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Entity_type_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case aircraft = 0
  ///  No description available.
  case bus = 1
  ///  No description available.
  case comm = 2
  ///  No description available.
  case ir = 3
  ///  No description available.
  case navigation = 4
  ///  No description available.
  case onorbit = 5
  ///  No description available.
  case rfemitter = 6
  ///  No description available.
  case scientific = 7
  ///  No description available.
  case sensor = 8
  ///  No description available.
  case site = 9
  ///  No description available.
  case vessel = 10

  public static var max: Entity_type_Enum { return .vessel }
  public static var min: Entity_type_Enum { return .aircraft }
}


public enum Entity_ownerType_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case commercial = 0
  ///  No description available.
  case government = 1
  ///  No description available.
  case academic = 2
  ///  No description available.
  case consortium = 3
  ///  No description available.
  case other = 4

  public static var max: Entity_ownerType_Enum { return .other }
  public static var min: Entity_ownerType_Enum { return .commercial }
}


public enum Entity_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Entity_dataMode_Enum { return .exercise }
  public static var min: Entity_dataMode_Enum { return .real }
}


///  /// An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.
public struct Entity: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ENTI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Entity.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case idEntity = 4
    case name = 6
    case classificationMarking = 8
    case type = 10
    case idLocation = 12
    case countryCode = 14
    case ownerType = 16
    case taskable = 18
    case urls = 20
    case createdAt = 22
    case createdBy = 24
    case updatedAt = 26
    case updatedBy = 28
    case source = 30
    case origin = 32
    case dataMode = 34
    case location = 36
    case onOrbit = 38
    case idOnOrbit = 40
    case operatingUnit = 42
    case idOperatingUnit = 44
    case origNetwork = 46
    case statusCollection = 48
    case rfBands = 50
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record.
  ///  Example: /// Example: ENTITY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idEntity: String? { let o = _accessor.offset(VTOFFSET.idEntity.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idEntitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idEntity.v) }
  ///  Unique entity name.
  ///  Example: /// Example: Example name
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
  ///  Example: /// Example: ONORBIT
  ///  Constraints: Minimum length = 1, Maximum length = 45
  public var type: Entity_type_Enum { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? .aircraft : Entity_type_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .aircraft }
  ///  Unique identifier of the entity location, if terrestrial/fixed.
  ///  Example: /// Example: LOCATION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idLocation: String? { let o = _accessor.offset(VTOFFSET.idLocation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idLocationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idLocation.v) }
  ///  The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var countryCode: String? { let o = _accessor.offset(VTOFFSET.countryCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var countryCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.countryCode.v) }
  ///  Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).
  ///  Example: /// Example: Commercial
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var ownerType: Entity_ownerType_Enum { let o = _accessor.offset(VTOFFSET.ownerType.v); return o == 0 ? .commercial : Entity_ownerType_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .commercial }
  ///  Boolean indicating if this entity is taskable.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var taskable: Bool { let o = _accessor.offset(VTOFFSET.taskable.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  List of URLs to additional details/documents for this entity.
  ///  Example: /// Example: ['URL1', 'URL2']
  ///  Constraints: No constraints specified.
  public var hasUrls: Bool { let o = _accessor.offset(VTOFFSET.urls.v); return o == 0 ? false : true }
  public var urlsCount: Int32 { let o = _accessor.offset(VTOFFSET.urls.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func urls(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.urls.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Entity_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Entity_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var location: String? { let o = _accessor.offset(VTOFFSET.location.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var locationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.location.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var onOrbit: String? { let o = _accessor.offset(VTOFFSET.onOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var onOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.onOrbit.v) }
  ///  Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var operatingUnit: String? { let o = _accessor.offset(VTOFFSET.operatingUnit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var operatingUnitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.operatingUnit.v) }
  ///  Unique identifier of the associated operating unit object.
  ///  Example: /// Example: OPERATINGUNIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOperatingUnit: String? { let o = _accessor.offset(VTOFFSET.idOperatingUnit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOperatingUnitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOperatingUnit.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Read-only collection of statuses which can be collected by multiple sources.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasStatusCollection: Bool { let o = _accessor.offset(VTOFFSET.statusCollection.v); return o == 0 ? false : true }
  public var statusCollectionCount: Int32 { let o = _accessor.offset(VTOFFSET.statusCollection.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func statusCollection(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.statusCollection.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Read-only collection of RF bands utilized by this entity for communication and/or operation.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasRfBands: Bool { let o = _accessor.offset(VTOFFSET.rfBands.v); return o == 0 ? false : true }
  public var rfBandsCount: Int32 { let o = _accessor.offset(VTOFFSET.rfBands.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func rfBands(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.rfBands.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startEntity(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 24) }
  public static func add(idEntity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idEntity, at: VTOFFSET.idEntity.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(type: Entity_type_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: type.rawValue, def: 0, at: VTOFFSET.type.p) }
  public static func add(idLocation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idLocation, at: VTOFFSET.idLocation.p) }
  public static func add(countryCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: countryCode, at: VTOFFSET.countryCode.p) }
  public static func add(ownerType: Entity_ownerType_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ownerType.rawValue, def: 0, at: VTOFFSET.ownerType.p) }
  public static func add(taskable: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: taskable, def: false,
   at: VTOFFSET.taskable.p) }
  public static func addVectorOf(urls: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: urls, at: VTOFFSET.urls.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: Entity_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(location: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: location, at: VTOFFSET.location.p) }
  public static func add(onOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: onOrbit, at: VTOFFSET.onOrbit.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(operatingUnit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: operatingUnit, at: VTOFFSET.operatingUnit.p) }
  public static func add(idOperatingUnit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOperatingUnit, at: VTOFFSET.idOperatingUnit.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func addVectorOf(statusCollection: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: statusCollection, at: VTOFFSET.statusCollection.p) }
  public static func addVectorOf(rfBands: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rfBands, at: VTOFFSET.rfBands.p) }
  public static func endEntity(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEntity(
    _ fbb: inout FlatBufferBuilder,
    idEntityOffset idEntity: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    type: Entity_type_Enum = .aircraft,
    idLocationOffset idLocation: Offset = Offset(),
    countryCodeOffset countryCode: Offset = Offset(),
    ownerType: Entity_ownerType_Enum = .commercial,
    taskable: Bool = false,
    urlsVectorOffset urls: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: Entity_dataMode_Enum = .real,
    locationOffset location: Offset = Offset(),
    onOrbitOffset onOrbit: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    operatingUnitOffset operatingUnit: Offset = Offset(),
    idOperatingUnitOffset idOperatingUnit: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    statusCollectionVectorOffset statusCollection: Offset = Offset(),
    rfBandsVectorOffset rfBands: Offset = Offset()
  ) -> Offset {
    let __start = Entity.startEntity(&fbb)
    Entity.add(idEntity: idEntity, &fbb)
    Entity.add(name: name, &fbb)
    Entity.add(classificationMarking: classificationMarking, &fbb)
    Entity.add(type: type, &fbb)
    Entity.add(idLocation: idLocation, &fbb)
    Entity.add(countryCode: countryCode, &fbb)
    Entity.add(ownerType: ownerType, &fbb)
    Entity.add(taskable: taskable, &fbb)
    Entity.addVectorOf(urls: urls, &fbb)
    Entity.add(createdAt: createdAt, &fbb)
    Entity.add(createdBy: createdBy, &fbb)
    Entity.add(updatedAt: updatedAt, &fbb)
    Entity.add(updatedBy: updatedBy, &fbb)
    Entity.add(source: source, &fbb)
    Entity.add(origin: origin, &fbb)
    Entity.add(dataMode: dataMode, &fbb)
    Entity.add(location: location, &fbb)
    Entity.add(onOrbit: onOrbit, &fbb)
    Entity.add(idOnOrbit: idOnOrbit, &fbb)
    Entity.add(operatingUnit: operatingUnit, &fbb)
    Entity.add(idOperatingUnit: idOperatingUnit, &fbb)
    Entity.add(origNetwork: origNetwork, &fbb)
    Entity.addVectorOf(statusCollection: statusCollection, &fbb)
    Entity.addVectorOf(rfBands: rfBands, &fbb)
    return Entity.endEntity(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.idEntity.p, fieldName: "idEntity", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: Entity_type_Enum.self)
    try _v.visit(field: VTOFFSET.idLocation.p, fieldName: "idLocation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.countryCode.p, fieldName: "countryCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ownerType.p, fieldName: "ownerType", required: false, type: Entity_ownerType_Enum.self)
    try _v.visit(field: VTOFFSET.taskable.p, fieldName: "taskable", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.urls.p, fieldName: "urls", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Entity_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.location.p, fieldName: "location", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.onOrbit.p, fieldName: "onOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.operatingUnit.p, fieldName: "operatingUnit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOperatingUnit.p, fieldName: "idOperatingUnit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.statusCollection.p, fieldName: "statusCollection", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.rfBands.p, fieldName: "rfBands", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

