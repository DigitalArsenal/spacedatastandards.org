// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum GNSSObservationSet_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: GNSSObservationSet_Abridged_dataMode_Enum { return .exercise }
  public static var min: GNSSObservationSet_Abridged_dataMode_Enum { return .real }
}


///  /// Set of GNSSObservation data.
public struct GNSSObservationSet_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "GNSS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: GNSSObservationSet_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case markerType = 8
    case idOnOrbit = 10
    case satNo = 12
    case origObjectId = 14
    case ts = 16
    case outage = 18
    case gDop = 20
    case hDop = 22
    case pDop = 24
    case tDop = 26
    case vDop = 28
    case esId = 30
    case receiver = 32
    case boresight = 34
    case quat = 36
    case lat = 38
    case lon = 40
    case alt = 42
    case satVelocity = 44
    case obsCodes = 46
    case trackingStatus = 48
    case navigationStatus = 50
    case agcState = 52
    case srcTyps = 54
    case srcIds = 56
    case tags = 58
    case transactionId = 60
    case createdAt = 62
    case createdBy = 64
    case source = 66
    case origin = 68
    case dataMode = 70
    case origNetwork = 72
    case gnssObservationList = 74
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: GNSSObSet-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The marker type of the observing receiver (AIRBORNE, ANIMAL, BALLISTIC, FIXED BUOY, FLOATING BUOY, FLOATING ICE, GEODETIC, GLACIER, GROUNDCRAFT, HUMAN, NON GEODETIC, NON PHYSICAL, SPACEBORNE, WATERCRAFT).  Reference RINEX 3+ for further information concerning marker types.
  ///  Example: /// Example: SPACEBORNE
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var markerType: String? { let o = _accessor.offset(VTOFFSET.markerType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var markerTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.markerType.v) }
  ///  Unique identifier of the primary satellite on-orbit object.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Observation Time, in ISO8601 UTC format with microsecond precision.  This timestamp applies to all observations within the set.
  ///  Example: /// Example: 2022-01-01T00:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var ts: String? { let o = _accessor.offset(VTOFFSET.ts.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ts.v) }
  ///  Time, in seconds, that the receiver has been unable to compute a GNSS fix.
  ///  Example: /// Example: 200
  ///  Constraints: No constraints specified.
  public var outage: Int32 { let o = _accessor.offset(VTOFFSET.outage.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Geometric Dilution of Precision.
  ///  Example: /// Example: 0.33
  ///  Constraints: No constraints specified.
  public var gDop: Double { let o = _accessor.offset(VTOFFSET.gDop.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Horizontal Dilution of Precision.
  ///  Example: /// Example: 0.03
  ///  Constraints: No constraints specified.
  public var hDop: Double { let o = _accessor.offset(VTOFFSET.hDop.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Position Dilution of Precision.
  ///  Example: /// Example: 0.002
  ///  Constraints: No constraints specified.
  public var pDop: Double { let o = _accessor.offset(VTOFFSET.pDop.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Time Dilution of Precision.
  ///  Example: /// Example: 0.05
  ///  Constraints: No constraints specified.
  public var tDop: Double { let o = _accessor.offset(VTOFFSET.tDop.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Vertical Dilution of Precision.
  ///  Example: /// Example: 0.03
  ///  Constraints: No constraints specified.
  public var vDop: Double { let o = _accessor.offset(VTOFFSET.vDop.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris.  If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Observation records if each receiver is synced to the ephemeris points.
  ///  Example: /// Example: ES-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var esId: String? { let o = _accessor.offset(VTOFFSET.esId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var esIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.esId.v) }
  ///  The number or ID of the GNSS receiver associated with this data.  Each GNSS Observation Set is associated with only one receiver.  If reporting for multiple receivers a separate set should be generated for each.  A null value is assumed to indicate that only one receiver is present, or reported.
  ///  Example: /// Example: RECEIVER-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var receiver: String? { let o = _accessor.offset(VTOFFSET.receiver.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var receiverSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.receiver.v) }
  ///  unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
  ///  Example: /// Example: [1.23, 3.23]
  ///  Constraints: No constraints specified.
  public var hasBoresight: Bool { let o = _accessor.offset(VTOFFSET.boresight.v); return o == 0 ? false : true }
  public var boresightCount: Int32 { let o = _accessor.offset(VTOFFSET.boresight.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func boresight(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.boresight.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at observation time (ts). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
  ///  Example: /// Example: [0.03, 0.02, 0.01, 0.012]
  ///  Constraints: No constraints specified.
  public var hasQuat: Bool { let o = _accessor.offset(VTOFFSET.quat.v); return o == 0 ? false : true }
  public var quatCount: Int32 { let o = _accessor.offset(VTOFFSET.quat.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func quat(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.quat.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  WGS-84 spacecraft latitude sub-point at observation time (ts), represented as -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 32.021
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 spacecraft longitude sub-point at observation time (ts), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 125.123
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft altitude at observation time (ts), expressed in kilometers above WGS-84 ellipsoid.
  ///  Example: /// Example: 200
  ///  Constraints: No constraints specified.
  public var alt: Double { let o = _accessor.offset(VTOFFSET.alt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Three element array, expressing the ECI J2K spacecraft velocity components, in km/second, at observation time (ts).  The array element order is [xvel, yvel, zvel].
  ///  Example: /// Example: [2.03, 0.003, 0.12]
  ///  Constraints: No constraints specified.
  public var hasSatVelocity: Bool { let o = _accessor.offset(VTOFFSET.satVelocity.v); return o == 0 ? false : true }
  public var satVelocityCount: Int32 { let o = _accessor.offset(VTOFFSET.satVelocity.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func satVelocity(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.satVelocity.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the strings containing the individual observation code sets that are contained within this GNSS Observation set.  Each string is a three-character representation of the measurement type, the channel, and the coding, in compliance with the RINEX 3+ standard (Pseudorange (C), Carrier Phase (L), Doppler (D), Signal Strength C/No (S), or Channel Number (X)).  See the GNSS Observation ob field for the units of measure associated with each observation type.
  ///  Example: /// Example: ['ACL']
  ///  Constraints: No constraints specified.
  public var hasObsCodes: Bool { let o = _accessor.offset(VTOFFSET.obsCodes.v); return o == 0 ? false : true }
  public var obsCodesCount: Int32 { let o = _accessor.offset(VTOFFSET.obsCodes.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func obsCodes(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.obsCodes.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  public var trackingStatus: Int32 { let o = _accessor.offset(VTOFFSET.trackingStatus.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The current navigation status as defined by the data source. In general the navigation status specifies whether the signal is normal, degraded, or unavailable. For status value definitions please reach out to data source provider.
  ///  Example: /// Example: degraded
  ///  Constraints: No constraints specified.
  public var navigationStatus: String? { let o = _accessor.offset(VTOFFSET.navigationStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var navigationStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.navigationStatus.v) }
  ///  GNSS Automatic Gain Control State.
  ///  Example: /// Example: 20
  ///  Constraints: No constraints specified.
  public var agcState: Int32 { let o = _accessor.offset(VTOFFSET.agcState.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this GNSS Observation Set. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  ///  Example: /// Example: ['SV', 'SV']
  ///  Constraints: No constraints specified.
  public var hasSrcTyps: Bool { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? false : true }
  public var srcTypsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcTyps(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcTyps.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of UUIDs of the UDL data records that are related to this GNSS Observation Set. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/statevector/{uuid}).
  ///  Example: /// Example: ['SV_ID', 'SV_ID']
  ///  Constraints: No constraints specified.
  public var hasSrcIds: Bool { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? false : true }
  public var srcIdsCount: Int32 { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func srcIds(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.srcIds.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  public var hasTags: Bool { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? false : true }
  public var tagsCount: Int32 { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func tags(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.tags.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var transactionId: String? { let o = _accessor.offset(VTOFFSET.transactionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transactionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transactionId.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: GNSSObservationSet_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : GNSSObservationSet_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  GNSSObservations associated with this GNSSObservationSet.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasGnssObservationList: Bool { let o = _accessor.offset(VTOFFSET.gnssObservationList.v); return o == 0 ? false : true }
  public var gnssObservationListCount: Int32 { let o = _accessor.offset(VTOFFSET.gnssObservationList.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func gnssObservationList(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.gnssObservationList.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startGNSSObservationSet_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 36) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(markerType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: markerType, at: VTOFFSET.markerType.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(ts: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ts, at: VTOFFSET.ts.p) }
  public static func add(outage: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: outage, def: 0, at: VTOFFSET.outage.p) }
  public static func add(gDop: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gDop, def: 0.0, at: VTOFFSET.gDop.p) }
  public static func add(hDop: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hDop, def: 0.0, at: VTOFFSET.hDop.p) }
  public static func add(pDop: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pDop, def: 0.0, at: VTOFFSET.pDop.p) }
  public static func add(tDop: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: tDop, def: 0.0, at: VTOFFSET.tDop.p) }
  public static func add(vDop: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vDop, def: 0.0, at: VTOFFSET.vDop.p) }
  public static func add(esId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: esId, at: VTOFFSET.esId.p) }
  public static func add(receiver: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: receiver, at: VTOFFSET.receiver.p) }
  public static func addVectorOf(boresight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: boresight, at: VTOFFSET.boresight.p) }
  public static func addVectorOf(quat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: quat, at: VTOFFSET.quat.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(alt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: alt, def: 0.0, at: VTOFFSET.alt.p) }
  public static func addVectorOf(satVelocity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: satVelocity, at: VTOFFSET.satVelocity.p) }
  public static func addVectorOf(obsCodes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obsCodes, at: VTOFFSET.obsCodes.p) }
  public static func add(trackingStatus: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: trackingStatus, def: 0, at: VTOFFSET.trackingStatus.p) }
  public static func add(navigationStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: navigationStatus, at: VTOFFSET.navigationStatus.p) }
  public static func add(agcState: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: agcState, def: 0, at: VTOFFSET.agcState.p) }
  public static func addVectorOf(srcTyps: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcTyps, at: VTOFFSET.srcTyps.p) }
  public static func addVectorOf(srcIds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: srcIds, at: VTOFFSET.srcIds.p) }
  public static func addVectorOf(tags: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tags, at: VTOFFSET.tags.p) }
  public static func add(transactionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transactionId, at: VTOFFSET.transactionId.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: GNSSObservationSet_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func addVectorOf(gnssObservationList: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: gnssObservationList, at: VTOFFSET.gnssObservationList.p) }
  public static func endGNSSObservationSet_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createGNSSObservationSet_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    markerTypeOffset markerType: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    satNo: Int32 = 0,
    origObjectIdOffset origObjectId: Offset = Offset(),
    tsOffset ts: Offset = Offset(),
    outage: Int32 = 0,
    gDop: Double = 0.0,
    hDop: Double = 0.0,
    pDop: Double = 0.0,
    tDop: Double = 0.0,
    vDop: Double = 0.0,
    esIdOffset esId: Offset = Offset(),
    receiverOffset receiver: Offset = Offset(),
    boresightVectorOffset boresight: Offset = Offset(),
    quatVectorOffset quat: Offset = Offset(),
    lat: Double = 0.0,
    lon: Double = 0.0,
    alt: Double = 0.0,
    satVelocityVectorOffset satVelocity: Offset = Offset(),
    obsCodesVectorOffset obsCodes: Offset = Offset(),
    trackingStatus: Int32 = 0,
    navigationStatusOffset navigationStatus: Offset = Offset(),
    agcState: Int32 = 0,
    srcTypsVectorOffset srcTyps: Offset = Offset(),
    srcIdsVectorOffset srcIds: Offset = Offset(),
    tagsVectorOffset tags: Offset = Offset(),
    transactionIdOffset transactionId: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: GNSSObservationSet_Abridged_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset(),
    gnssObservationListVectorOffset gnssObservationList: Offset = Offset()
  ) -> Offset {
    let __start = GNSSObservationSet_Abridged.startGNSSObservationSet_Abridged(&fbb)
    GNSSObservationSet_Abridged.add(id: id, &fbb)
    GNSSObservationSet_Abridged.add(classificationMarking: classificationMarking, &fbb)
    GNSSObservationSet_Abridged.add(markerType: markerType, &fbb)
    GNSSObservationSet_Abridged.add(idOnOrbit: idOnOrbit, &fbb)
    GNSSObservationSet_Abridged.add(satNo: satNo, &fbb)
    GNSSObservationSet_Abridged.add(origObjectId: origObjectId, &fbb)
    GNSSObservationSet_Abridged.add(ts: ts, &fbb)
    GNSSObservationSet_Abridged.add(outage: outage, &fbb)
    GNSSObservationSet_Abridged.add(gDop: gDop, &fbb)
    GNSSObservationSet_Abridged.add(hDop: hDop, &fbb)
    GNSSObservationSet_Abridged.add(pDop: pDop, &fbb)
    GNSSObservationSet_Abridged.add(tDop: tDop, &fbb)
    GNSSObservationSet_Abridged.add(vDop: vDop, &fbb)
    GNSSObservationSet_Abridged.add(esId: esId, &fbb)
    GNSSObservationSet_Abridged.add(receiver: receiver, &fbb)
    GNSSObservationSet_Abridged.addVectorOf(boresight: boresight, &fbb)
    GNSSObservationSet_Abridged.addVectorOf(quat: quat, &fbb)
    GNSSObservationSet_Abridged.add(lat: lat, &fbb)
    GNSSObservationSet_Abridged.add(lon: lon, &fbb)
    GNSSObservationSet_Abridged.add(alt: alt, &fbb)
    GNSSObservationSet_Abridged.addVectorOf(satVelocity: satVelocity, &fbb)
    GNSSObservationSet_Abridged.addVectorOf(obsCodes: obsCodes, &fbb)
    GNSSObservationSet_Abridged.add(trackingStatus: trackingStatus, &fbb)
    GNSSObservationSet_Abridged.add(navigationStatus: navigationStatus, &fbb)
    GNSSObservationSet_Abridged.add(agcState: agcState, &fbb)
    GNSSObservationSet_Abridged.addVectorOf(srcTyps: srcTyps, &fbb)
    GNSSObservationSet_Abridged.addVectorOf(srcIds: srcIds, &fbb)
    GNSSObservationSet_Abridged.addVectorOf(tags: tags, &fbb)
    GNSSObservationSet_Abridged.add(transactionId: transactionId, &fbb)
    GNSSObservationSet_Abridged.add(createdAt: createdAt, &fbb)
    GNSSObservationSet_Abridged.add(createdBy: createdBy, &fbb)
    GNSSObservationSet_Abridged.add(source: source, &fbb)
    GNSSObservationSet_Abridged.add(origin: origin, &fbb)
    GNSSObservationSet_Abridged.add(dataMode: dataMode, &fbb)
    GNSSObservationSet_Abridged.add(origNetwork: origNetwork, &fbb)
    GNSSObservationSet_Abridged.addVectorOf(gnssObservationList: gnssObservationList, &fbb)
    return GNSSObservationSet_Abridged.endGNSSObservationSet_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.markerType.p, fieldName: "markerType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ts.p, fieldName: "ts", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.outage.p, fieldName: "outage", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.gDop.p, fieldName: "gDop", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.hDop.p, fieldName: "hDop", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pDop.p, fieldName: "pDop", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.tDop.p, fieldName: "tDop", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.vDop.p, fieldName: "vDop", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.esId.p, fieldName: "esId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.receiver.p, fieldName: "receiver", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.boresight.p, fieldName: "boresight", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.quat.p, fieldName: "quat", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.alt.p, fieldName: "alt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.satVelocity.p, fieldName: "satVelocity", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.obsCodes.p, fieldName: "obsCodes", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.trackingStatus.p, fieldName: "trackingStatus", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.navigationStatus.p, fieldName: "navigationStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.agcState.p, fieldName: "agcState", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.srcTyps.p, fieldName: "srcTyps", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.srcIds.p, fieldName: "srcIds", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.tags.p, fieldName: "tags", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.transactionId.p, fieldName: "transactionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: GNSSObservationSet_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.gnssObservationList.p, fieldName: "gnssObservationList", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

