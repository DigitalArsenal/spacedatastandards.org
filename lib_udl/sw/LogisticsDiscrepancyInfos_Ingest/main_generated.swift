// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Discrepancy information associated with this LogisticsSupport record.
public struct LogisticsDiscrepancyInfos_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "LOGI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: LogisticsDiscrepancyInfos_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case jcn = 4
    case discrepancyInfo = 6
    case jobStTime = 8
    case closureTime = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Job Control Number of the discrepancy.
  ///  Example: /// Example: 231942400
  ///  Constraints: Minimum length = 0, Maximum length = 12
  public var jcn: String? { let o = _accessor.offset(VTOFFSET.jcn.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var jcnSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.jcn.v) }
  ///  The aircraft discrepancy description.
  ///  Example: /// Example: PILOT WINDSHIELD PANEL ASSY CRACKED, AND ARCING REQ R2 IAW 56.11.10
  ///  Constraints: Minimum length = 0, Maximum length = 680
  public var discrepancyInfo: String? { let o = _accessor.offset(VTOFFSET.discrepancyInfo.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var discrepancyInfoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.discrepancyInfo.v) }
  ///  The job start time, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-17T10:30:00.123Z
  ///  Constraints: No constraints specified.
  public var jobStTime: String? { let o = _accessor.offset(VTOFFSET.jobStTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var jobStTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.jobStTime.v) }
  ///  The discrepancy closure time, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-17T10:30:00.123Z
  ///  Constraints: No constraints specified.
  public var closureTime: String? { let o = _accessor.offset(VTOFFSET.closureTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var closureTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.closureTime.v) }
  public static func startLogisticsDiscrepancyInfos_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(jcn: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: jcn, at: VTOFFSET.jcn.p) }
  public static func add(discrepancyInfo: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: discrepancyInfo, at: VTOFFSET.discrepancyInfo.p) }
  public static func add(jobStTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: jobStTime, at: VTOFFSET.jobStTime.p) }
  public static func add(closureTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: closureTime, at: VTOFFSET.closureTime.p) }
  public static func endLogisticsDiscrepancyInfos_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createLogisticsDiscrepancyInfos_Ingest(
    _ fbb: inout FlatBufferBuilder,
    jcnOffset jcn: Offset = Offset(),
    discrepancyInfoOffset discrepancyInfo: Offset = Offset(),
    jobStTimeOffset jobStTime: Offset = Offset(),
    closureTimeOffset closureTime: Offset = Offset()
  ) -> Offset {
    let __start = LogisticsDiscrepancyInfos_Ingest.startLogisticsDiscrepancyInfos_Ingest(&fbb)
    LogisticsDiscrepancyInfos_Ingest.add(jcn: jcn, &fbb)
    LogisticsDiscrepancyInfos_Ingest.add(discrepancyInfo: discrepancyInfo, &fbb)
    LogisticsDiscrepancyInfos_Ingest.add(jobStTime: jobStTime, &fbb)
    LogisticsDiscrepancyInfos_Ingest.add(closureTime: closureTime, &fbb)
    return LogisticsDiscrepancyInfos_Ingest.endLogisticsDiscrepancyInfos_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.jcn.p, fieldName: "jcn", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.discrepancyInfo.p, fieldName: "discrepancyInfo", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.jobStTime.p, fieldName: "jobStTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.closureTime.p, fieldName: "closureTime", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

