// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum AirfieldSlotConsumption_Abridged_status_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case requested = 0
  ///  No description available.
  case approved = 1
  ///  No description available.
  case denied = 2
  ///  No description available.
  case blocked = 3
  ///  No description available.
  case other = 4

  public static var max: AirfieldSlotConsumption_Abridged_status_Enum { return .other }
  public static var min: AirfieldSlotConsumption_Abridged_status_Enum { return .requested }
}


public enum AirfieldSlotConsumption_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: AirfieldSlotConsumption_Abridged_dataMode_Enum { return .exercise }
  public static var min: AirfieldSlotConsumption_Abridged_dataMode_Enum { return .real }
}


///  /// Airfield slot use data. Contains the dynamic data associated with the status and use of specific airfield slots.
public struct AirfieldSlotConsumption_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRF" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AirfieldSlotConsumption_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idAirfieldSlot = 8
    case status = 10
    case occupied = 12
    case consumer = 14
    case occAircraftMds = 16
    case occTailNumber = 18
    case callSigns = 20
    case missionId = 22
    case numAircraft = 24
    case occStartTime = 26
    case resAircraftMds = 28
    case resTailNumber = 30
    case resType = 32
    case resReason = 34
    case resMissionId = 36
    case startTime = 38
    case endTime = 40
    case targetTime = 42
    case idArrSortie = 44
    case idDepSortie = 46
    case altArrSortieId = 48
    case altDepSortieId = 50
    case reqComment = 52
    case appComment = 54
    case reqOrg = 56
    case reqInitials = 58
    case appOrg = 60
    case appInitials = 62
    case createdAt = 64
    case createdBy = 66
    case sourceDl = 68
    case source = 70
    case origin = 72
    case origNetwork = 74
    case dataMode = 76
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the airfield slot for which this slot consumption record is referencing.
  ///  Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idAirfieldSlot: String? { let o = _accessor.offset(VTOFFSET.idAirfieldSlot.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idAirfieldSlotSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idAirfieldSlot.v) }
  ///  Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).
  ///  Example: /// Example: APPROVED
  ///  Constraints: Minimum length = 0, Maximum length = 9
  public var status: AirfieldSlotConsumption_Abridged_status_Enum { let o = _accessor.offset(VTOFFSET.status.v); return o == 0 ? .requested : AirfieldSlotConsumption_Abridged_status_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .requested }
  ///  Flag indicating if the slot is occupied.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var occupied: Bool { let o = _accessor.offset(VTOFFSET.occupied.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Identifying name of the aircraft using this slot. Names are often Prior Permission Required (PPR) numbers or other similar human-readable identifiers.
  ///  Example: /// Example: APRON1-230401001
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var consumer: String? { let o = _accessor.offset(VTOFFSET.consumer.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var consumerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.consumer.v) }
  ///  The aircraft Model Design Series designation of the aircraft occupying this slot.
  ///  Example: /// Example: C017A
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var occAircraftMds: String? { let o = _accessor.offset(VTOFFSET.occAircraftMds.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var occAircraftMdsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.occAircraftMds.v) }
  ///  The tail number of the aircraft occupying this slot.
  ///  Example: /// Example: N702JG
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var occTailNumber: String? { let o = _accessor.offset(VTOFFSET.occTailNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var occTailNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.occTailNumber.v) }
  ///  Array of call signs of the aircraft using this slot.
  ///  Example: /// Example: ['RCH123', 'ABC123', 'LLS442']
  ///  Constraints: No constraints specified.
  public var hasCallSigns: Bool { let o = _accessor.offset(VTOFFSET.callSigns.v); return o == 0 ? false : true }
  public var callSignsCount: Int32 { let o = _accessor.offset(VTOFFSET.callSigns.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func callSigns(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.callSigns.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Mission identifier using this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
  ///  Example: /// Example: AJM123456123
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var missionId: String? { let o = _accessor.offset(VTOFFSET.missionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var missionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.missionId.v) }
  ///  Number of aircraft using this slot for this time.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var numAircraft: Int32 { let o = _accessor.offset(VTOFFSET.numAircraft.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Time the aircraft began occupying this slot, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-01-01T01:01:03.123Z
  ///  Constraints: No constraints specified.
  public var occStartTime: String? { let o = _accessor.offset(VTOFFSET.occStartTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var occStartTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.occStartTime.v) }
  ///  The aircraft Model Design Series designation of the aircraft this slot is reserved for.
  ///  Example: /// Example: C017A
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var resAircraftMds: String? { let o = _accessor.offset(VTOFFSET.resAircraftMds.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var resAircraftMdsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.resAircraftMds.v) }
  ///  The tail number of the aircraft this slot is reserved for.
  ///  Example: /// Example: N702JG
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var resTailNumber: String? { let o = _accessor.offset(VTOFFSET.resTailNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var resTailNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.resTailNumber.v) }
  ///  Indicates the type of reservation (e.g. M for Mission, A for Aircraft, O for Other).
  ///  Example: /// Example: M
  ///  Constraints: Minimum length = 0, Maximum length = 2
  public var resType: String? { let o = _accessor.offset(VTOFFSET.resType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var resTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.resType.v) }
  ///  The reason the slot reservation was made.
  ///  Example: /// Example: Maintenance needed
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var resReason: String? { let o = _accessor.offset(VTOFFSET.resReason.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var resReasonSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.resReason.v) }
  ///  Mission identifier reserving this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
  ///  Example: /// Example: AJM123456123
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var resMissionId: String? { let o = _accessor.offset(VTOFFSET.resMissionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var resMissionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.resMissionId.v) }
  ///  The start of the slot window, in ISO 8601 UTC format.
  ///  Example: /// Example: 2023-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var startTime: String? { let o = _accessor.offset(VTOFFSET.startTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.startTime.v) }
  ///  The end of the slot window, in ISO 8601 UTC format.
  ///  Example: /// Example: 2023-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var endTime: String? { let o = _accessor.offset(VTOFFSET.endTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var endTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.endTime.v) }
  ///  The desired time for aircraft action such as landing, take off, parking, etc., in ISO 8601 UTC format.
  ///  Example: /// Example: 2023-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var targetTime: String? { let o = _accessor.offset(VTOFFSET.targetTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var targetTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.targetTime.v) }
  ///  Unique identifier of the sortie arriving at the slot start time.
  ///  Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idArrSortie: String? { let o = _accessor.offset(VTOFFSET.idArrSortie.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idArrSortieSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idArrSortie.v) }
  ///  Unique identifier of the sortie departing at the slot end time.
  ///  Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idDepSortie: String? { let o = _accessor.offset(VTOFFSET.idDepSortie.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idDepSortieSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idDepSortie.v) }
  ///  Alternate identifier of the sortie arriving at the slot start time provided by the source.
  ///  Example: /// Example: ALT-SORTIE-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var altArrSortieId: String? { let o = _accessor.offset(VTOFFSET.altArrSortieId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altArrSortieIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altArrSortieId.v) }
  ///  Alternate identifier of the sortie departing at the slot end time provided by the source.
  ///  Example: /// Example: ALT-SORTIE-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var altDepSortieId: String? { let o = _accessor.offset(VTOFFSET.altDepSortieId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altDepSortieIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altDepSortieId.v) }
  ///  Comments from the requester.
  ///  Example: /// Example: Sorry for the late notice.
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var reqComment: String? { let o = _accessor.offset(VTOFFSET.reqComment.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reqCommentSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reqComment.v) }
  ///  Comments from the approver.
  ///  Example: /// Example: The request was denied due to inoperable fuel pumps.
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var appComment: String? { let o = _accessor.offset(VTOFFSET.appComment.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var appCommentSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.appComment.v) }
  ///  Short name of the organization requesting use of this slot.
  ///  Example: /// Example: TACC
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var reqOrg: String? { let o = _accessor.offset(VTOFFSET.reqOrg.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reqOrgSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reqOrg.v) }
  ///  Initials of the person requesting the use of this slot. Use SYSTEM if this request is auto-generated by an auto-planning system.
  ///  Example: /// Example: CB
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var reqInitials: String? { let o = _accessor.offset(VTOFFSET.reqInitials.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reqInitialsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reqInitials.v) }
  ///  Short name of the organization approving the use of this slot.
  ///  Example: /// Example: KCHS/BOPS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var appOrg: String? { let o = _accessor.offset(VTOFFSET.appOrg.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var appOrgSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.appOrg.v) }
  ///  Initials of the person approving the use of this slot. Use SYSTEM if auto-approved without human involvement.
  ///  Example: /// Example: CB
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var appInitials: String? { let o = _accessor.offset(VTOFFSET.appInitials.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var appInitialsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.appInitials.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: AirfieldSlotConsumption_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : AirfieldSlotConsumption_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startAirfieldSlotConsumption_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 37) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idAirfieldSlot: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idAirfieldSlot, at: VTOFFSET.idAirfieldSlot.p) }
  public static func add(status: AirfieldSlotConsumption_Abridged_status_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: status.rawValue, def: 0, at: VTOFFSET.status.p) }
  public static func add(occupied: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: occupied, def: false,
   at: VTOFFSET.occupied.p) }
  public static func add(consumer: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: consumer, at: VTOFFSET.consumer.p) }
  public static func add(occAircraftMds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: occAircraftMds, at: VTOFFSET.occAircraftMds.p) }
  public static func add(occTailNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: occTailNumber, at: VTOFFSET.occTailNumber.p) }
  public static func addVectorOf(callSigns: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callSigns, at: VTOFFSET.callSigns.p) }
  public static func add(missionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: missionId, at: VTOFFSET.missionId.p) }
  public static func add(numAircraft: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numAircraft, def: 0, at: VTOFFSET.numAircraft.p) }
  public static func add(occStartTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: occStartTime, at: VTOFFSET.occStartTime.p) }
  public static func add(resAircraftMds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: resAircraftMds, at: VTOFFSET.resAircraftMds.p) }
  public static func add(resTailNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: resTailNumber, at: VTOFFSET.resTailNumber.p) }
  public static func add(resType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: resType, at: VTOFFSET.resType.p) }
  public static func add(resReason: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: resReason, at: VTOFFSET.resReason.p) }
  public static func add(resMissionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: resMissionId, at: VTOFFSET.resMissionId.p) }
  public static func add(startTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: startTime, at: VTOFFSET.startTime.p) }
  public static func add(endTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: endTime, at: VTOFFSET.endTime.p) }
  public static func add(targetTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: targetTime, at: VTOFFSET.targetTime.p) }
  public static func add(idArrSortie: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idArrSortie, at: VTOFFSET.idArrSortie.p) }
  public static func add(idDepSortie: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idDepSortie, at: VTOFFSET.idDepSortie.p) }
  public static func add(altArrSortieId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altArrSortieId, at: VTOFFSET.altArrSortieId.p) }
  public static func add(altDepSortieId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altDepSortieId, at: VTOFFSET.altDepSortieId.p) }
  public static func add(reqComment: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reqComment, at: VTOFFSET.reqComment.p) }
  public static func add(appComment: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: appComment, at: VTOFFSET.appComment.p) }
  public static func add(reqOrg: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reqOrg, at: VTOFFSET.reqOrg.p) }
  public static func add(reqInitials: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reqInitials, at: VTOFFSET.reqInitials.p) }
  public static func add(appOrg: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: appOrg, at: VTOFFSET.appOrg.p) }
  public static func add(appInitials: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: appInitials, at: VTOFFSET.appInitials.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: AirfieldSlotConsumption_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endAirfieldSlotConsumption_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAirfieldSlotConsumption_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idAirfieldSlotOffset idAirfieldSlot: Offset = Offset(),
    status: AirfieldSlotConsumption_Abridged_status_Enum = .requested,
    occupied: Bool = false,
    consumerOffset consumer: Offset = Offset(),
    occAircraftMdsOffset occAircraftMds: Offset = Offset(),
    occTailNumberOffset occTailNumber: Offset = Offset(),
    callSignsVectorOffset callSigns: Offset = Offset(),
    missionIdOffset missionId: Offset = Offset(),
    numAircraft: Int32 = 0,
    occStartTimeOffset occStartTime: Offset = Offset(),
    resAircraftMdsOffset resAircraftMds: Offset = Offset(),
    resTailNumberOffset resTailNumber: Offset = Offset(),
    resTypeOffset resType: Offset = Offset(),
    resReasonOffset resReason: Offset = Offset(),
    resMissionIdOffset resMissionId: Offset = Offset(),
    startTimeOffset startTime: Offset = Offset(),
    endTimeOffset endTime: Offset = Offset(),
    targetTimeOffset targetTime: Offset = Offset(),
    idArrSortieOffset idArrSortie: Offset = Offset(),
    idDepSortieOffset idDepSortie: Offset = Offset(),
    altArrSortieIdOffset altArrSortieId: Offset = Offset(),
    altDepSortieIdOffset altDepSortieId: Offset = Offset(),
    reqCommentOffset reqComment: Offset = Offset(),
    appCommentOffset appComment: Offset = Offset(),
    reqOrgOffset reqOrg: Offset = Offset(),
    reqInitialsOffset reqInitials: Offset = Offset(),
    appOrgOffset appOrg: Offset = Offset(),
    appInitialsOffset appInitials: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: AirfieldSlotConsumption_Abridged_dataMode_Enum = .real
  ) -> Offset {
    let __start = AirfieldSlotConsumption_Abridged.startAirfieldSlotConsumption_Abridged(&fbb)
    AirfieldSlotConsumption_Abridged.add(id: id, &fbb)
    AirfieldSlotConsumption_Abridged.add(classificationMarking: classificationMarking, &fbb)
    AirfieldSlotConsumption_Abridged.add(idAirfieldSlot: idAirfieldSlot, &fbb)
    AirfieldSlotConsumption_Abridged.add(status: status, &fbb)
    AirfieldSlotConsumption_Abridged.add(occupied: occupied, &fbb)
    AirfieldSlotConsumption_Abridged.add(consumer: consumer, &fbb)
    AirfieldSlotConsumption_Abridged.add(occAircraftMds: occAircraftMds, &fbb)
    AirfieldSlotConsumption_Abridged.add(occTailNumber: occTailNumber, &fbb)
    AirfieldSlotConsumption_Abridged.addVectorOf(callSigns: callSigns, &fbb)
    AirfieldSlotConsumption_Abridged.add(missionId: missionId, &fbb)
    AirfieldSlotConsumption_Abridged.add(numAircraft: numAircraft, &fbb)
    AirfieldSlotConsumption_Abridged.add(occStartTime: occStartTime, &fbb)
    AirfieldSlotConsumption_Abridged.add(resAircraftMds: resAircraftMds, &fbb)
    AirfieldSlotConsumption_Abridged.add(resTailNumber: resTailNumber, &fbb)
    AirfieldSlotConsumption_Abridged.add(resType: resType, &fbb)
    AirfieldSlotConsumption_Abridged.add(resReason: resReason, &fbb)
    AirfieldSlotConsumption_Abridged.add(resMissionId: resMissionId, &fbb)
    AirfieldSlotConsumption_Abridged.add(startTime: startTime, &fbb)
    AirfieldSlotConsumption_Abridged.add(endTime: endTime, &fbb)
    AirfieldSlotConsumption_Abridged.add(targetTime: targetTime, &fbb)
    AirfieldSlotConsumption_Abridged.add(idArrSortie: idArrSortie, &fbb)
    AirfieldSlotConsumption_Abridged.add(idDepSortie: idDepSortie, &fbb)
    AirfieldSlotConsumption_Abridged.add(altArrSortieId: altArrSortieId, &fbb)
    AirfieldSlotConsumption_Abridged.add(altDepSortieId: altDepSortieId, &fbb)
    AirfieldSlotConsumption_Abridged.add(reqComment: reqComment, &fbb)
    AirfieldSlotConsumption_Abridged.add(appComment: appComment, &fbb)
    AirfieldSlotConsumption_Abridged.add(reqOrg: reqOrg, &fbb)
    AirfieldSlotConsumption_Abridged.add(reqInitials: reqInitials, &fbb)
    AirfieldSlotConsumption_Abridged.add(appOrg: appOrg, &fbb)
    AirfieldSlotConsumption_Abridged.add(appInitials: appInitials, &fbb)
    AirfieldSlotConsumption_Abridged.add(createdAt: createdAt, &fbb)
    AirfieldSlotConsumption_Abridged.add(createdBy: createdBy, &fbb)
    AirfieldSlotConsumption_Abridged.add(sourceDl: sourceDl, &fbb)
    AirfieldSlotConsumption_Abridged.add(source: source, &fbb)
    AirfieldSlotConsumption_Abridged.add(origin: origin, &fbb)
    AirfieldSlotConsumption_Abridged.add(origNetwork: origNetwork, &fbb)
    AirfieldSlotConsumption_Abridged.add(dataMode: dataMode, &fbb)
    return AirfieldSlotConsumption_Abridged.endAirfieldSlotConsumption_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idAirfieldSlot.p, fieldName: "idAirfieldSlot", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.status.p, fieldName: "status", required: false, type: AirfieldSlotConsumption_Abridged_status_Enum.self)
    try _v.visit(field: VTOFFSET.occupied.p, fieldName: "occupied", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.consumer.p, fieldName: "consumer", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.occAircraftMds.p, fieldName: "occAircraftMds", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.occTailNumber.p, fieldName: "occTailNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.callSigns.p, fieldName: "callSigns", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.missionId.p, fieldName: "missionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numAircraft.p, fieldName: "numAircraft", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.occStartTime.p, fieldName: "occStartTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.resAircraftMds.p, fieldName: "resAircraftMds", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.resTailNumber.p, fieldName: "resTailNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.resType.p, fieldName: "resType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.resReason.p, fieldName: "resReason", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.resMissionId.p, fieldName: "resMissionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.startTime.p, fieldName: "startTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.endTime.p, fieldName: "endTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.targetTime.p, fieldName: "targetTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idArrSortie.p, fieldName: "idArrSortie", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idDepSortie.p, fieldName: "idDepSortie", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altArrSortieId.p, fieldName: "altArrSortieId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altDepSortieId.p, fieldName: "altDepSortieId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reqComment.p, fieldName: "reqComment", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.appComment.p, fieldName: "appComment", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reqOrg.p, fieldName: "reqOrg", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reqInitials.p, fieldName: "reqInitials", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.appOrg.p, fieldName: "appOrg", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.appInitials.p, fieldName: "appInitials", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: AirfieldSlotConsumption_Abridged_dataMode_Enum.self)
    _v.finish()
  }
}

