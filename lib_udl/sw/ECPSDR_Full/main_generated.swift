// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum ECPSDR_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: ECPSDR_Full_dataMode_Enum { return .exercise }
  public static var min: ECPSDR_Full_dataMode_Enum { return .real }
}


///  /// Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle (ECP) Sensors.  SDR contains sensor status telemetry and raw dosimeter measurements of the space environment.
public struct ECPSDR_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ECPS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: ECPSDR_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idOnOrbit = 8
    case satNo = 10
    case origObjectId = 12
    case idSensor = 14
    case origSensorId = 16
    case type = 18
    case msgTime = 20
    case obTime = 22
    case retransmit = 24
    case senMode = 26
    case dosBias = 28
    case asl5VcurrMon = 30
    case dsl5VcurrMon = 32
    case psTempMon = 34
    case cdsPlateVmon = 36
    case cdsRefVmon = 38
    case mpTemp = 40
    case vRef = 42
    case pd1SigLev = 44
    case pd2SigLev = 46
    case esdTrigCountL = 48
    case esdTrigCountH = 50
    case lowLetL = 52
    case lowLetM = 54
    case medLet1L = 56
    case medLet1M = 58
    case medLet2L = 60
    case medLet2M = 62
    case medLet3L = 64
    case medLet3M = 66
    case medLet4L = 68
    case medLet4M = 70
    case hiLetL = 72
    case hiLetM = 74
    case surfDosL = 76
    case surfDosM = 78
    case surfDosH = 80
    case surfDosChargeL = 82
    case surfDosChargeH = 84
    case surfDosStat = 86
    case cdsThrottle = 88
    case cdsThreshold = 90
    case checksum = 92
    case transientData = 94
    case createdAt = 96
    case createdBy = 98
    case updatedAt = 100
    case updatedBy = 102
    case source = 104
    case origin = 106
    case origNetwork = 108
    case dataMode = 110
    case onOrbit = 112
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ECPSDR-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the on-orbit satellite hosting the sensor.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Satellite/catalog number of the on-orbit satellite hosting the sensor.
  ///  Example: /// Example: 101
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Unique identifier of the reporting sensor.
  ///  Example: /// Example: SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origSensorId: String? { let o = _accessor.offset(VTOFFSET.origSensorId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origSensorIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origSensorId.v) }
  ///  The type of data associated with this record (STANDARD, TRANSIENT).
  ///  Example: /// Example: STANDARD
  ///  Constraints: Minimum length = 1, Maximum length = 12
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var msgTime: String? { let o = _accessor.offset(VTOFFSET.msgTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msgTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msgTime.v) }
  ///  Time of the observation, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var obTime: String? { let o = _accessor.offset(VTOFFSET.obTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var obTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.obTime.v) }
  ///  Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var retransmit: Bool { let o = _accessor.offset(VTOFFSET.retransmit.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The sensor mode associated with this measurements (NORMAL, TEST).
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 0, Maximum length = 12
  public var senMode: String? { let o = _accessor.offset(VTOFFSET.senMode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var senModeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.senMode.v) }
  ///  Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var dosBias: Int32 { let o = _accessor.offset(VTOFFSET.dosBias.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var asl5VcurrMon: Int32 { let o = _accessor.offset(VTOFFSET.asl5VcurrMon.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var dsl5VcurrMon: Int32 { let o = _accessor.offset(VTOFFSET.dsl5VcurrMon.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Power supply temperature monitor.  This is sensor status telemetry.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var psTempMon: Int32 { let o = _accessor.offset(VTOFFSET.psTempMon.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var cdsPlateVmon: Int32 { let o = _accessor.offset(VTOFFSET.cdsPlateVmon.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  CDS reference voltage monitor.  See vRef for conversion factor to Volts.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var cdsRefVmon: Int32 { let o = _accessor.offset(VTOFFSET.cdsRefVmon.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Unitless sensor mounting plate temperature.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var mpTemp: Int32 { let o = _accessor.offset(VTOFFSET.mpTemp.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var vRef: Int32 { let o = _accessor.offset(VTOFFSET.vRef.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Photodiode 1 signal level.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var pd1SigLev: Int32 { let o = _accessor.offset(VTOFFSET.pd1SigLev.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Photodiode 2 signal level.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var pd2SigLev: Int32 { let o = _accessor.offset(VTOFFSET.pd2SigLev.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of ESD triggers, low byte of 2-byte counter.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var esdTrigCountL: Int32 { let o = _accessor.offset(VTOFFSET.esdTrigCountL.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of ESD triggers, high byte of 2-byte counter.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var esdTrigCountH: Int32 { let o = _accessor.offset(VTOFFSET.esdTrigCountH.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var lowLetL: Int32 { let o = _accessor.offset(VTOFFSET.lowLetL.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var lowLetM: Int32 { let o = _accessor.offset(VTOFFSET.lowLetM.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var medLet1L: Int32 { let o = _accessor.offset(VTOFFSET.medLet1L.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var medLet1M: Int32 { let o = _accessor.offset(VTOFFSET.medLet1M.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var medLet2L: Int32 { let o = _accessor.offset(VTOFFSET.medLet2L.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var medLet2M: Int32 { let o = _accessor.offset(VTOFFSET.medLet2M.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var medLet3L: Int32 { let o = _accessor.offset(VTOFFSET.medLet3L.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var medLet3M: Int32 { let o = _accessor.offset(VTOFFSET.medLet3M.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var medLet4L: Int32 { let o = _accessor.offset(VTOFFSET.medLet4L.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var medLet4M: Int32 { let o = _accessor.offset(VTOFFSET.medLet4M.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var hiLetL: Int32 { let o = _accessor.offset(VTOFFSET.hiLetL.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var hiLetM: Int32 { let o = _accessor.offset(VTOFFSET.hiLetM.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var surfDosL: Int32 { let o = _accessor.offset(VTOFFSET.surfDosL.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var surfDosM: Int32 { let o = _accessor.offset(VTOFFSET.surfDosM.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var surfDosH: Int32 { let o = _accessor.offset(VTOFFSET.surfDosH.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var surfDosChargeL: Int32 { let o = _accessor.offset(VTOFFSET.surfDosChargeL.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var surfDosChargeH: Int32 { let o = _accessor.offset(VTOFFSET.surfDosChargeH.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Surface dosimeter status byte.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var surfDosStat: Int32 { let o = _accessor.offset(VTOFFSET.surfDosStat.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  CDS throttle number of seconds between CDS transient capture readouts.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var cdsThrottle: Int32 { let o = _accessor.offset(VTOFFSET.cdsThrottle.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var cdsThreshold: Int32 { let o = _accessor.offset(VTOFFSET.cdsThreshold.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  public var checksum: Int32 { let o = _accessor.offset(VTOFFSET.checksum.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of 144 digitized samples of ESD waveform for transient packets.
  ///  Example: /// Example: [1, 2, 3]
  ///  Constraints: No constraints specified.
  public var hasTransientData: Bool { let o = _accessor.offset(VTOFFSET.transientData.v); return o == 0 ? false : true }
  public var transientDataCount: Int32 { let o = _accessor.offset(VTOFFSET.transientData.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func transientData(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.transientData.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: ECPSDR_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : ECPSDR_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var onOrbit: String? { let o = _accessor.offset(VTOFFSET.onOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var onOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.onOrbit.v) }
  public static func startECPSDR_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 55) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(origSensorId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origSensorId, at: VTOFFSET.origSensorId.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(msgTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msgTime, at: VTOFFSET.msgTime.p) }
  public static func add(obTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: obTime, at: VTOFFSET.obTime.p) }
  public static func add(retransmit: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: retransmit, def: false,
   at: VTOFFSET.retransmit.p) }
  public static func add(senMode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: senMode, at: VTOFFSET.senMode.p) }
  public static func add(dosBias: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dosBias, def: 0, at: VTOFFSET.dosBias.p) }
  public static func add(asl5VcurrMon: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: asl5VcurrMon, def: 0, at: VTOFFSET.asl5VcurrMon.p) }
  public static func add(dsl5VcurrMon: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dsl5VcurrMon, def: 0, at: VTOFFSET.dsl5VcurrMon.p) }
  public static func add(psTempMon: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: psTempMon, def: 0, at: VTOFFSET.psTempMon.p) }
  public static func add(cdsPlateVmon: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cdsPlateVmon, def: 0, at: VTOFFSET.cdsPlateVmon.p) }
  public static func add(cdsRefVmon: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cdsRefVmon, def: 0, at: VTOFFSET.cdsRefVmon.p) }
  public static func add(mpTemp: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: mpTemp, def: 0, at: VTOFFSET.mpTemp.p) }
  public static func add(vRef: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vRef, def: 0, at: VTOFFSET.vRef.p) }
  public static func add(pd1SigLev: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pd1SigLev, def: 0, at: VTOFFSET.pd1SigLev.p) }
  public static func add(pd2SigLev: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pd2SigLev, def: 0, at: VTOFFSET.pd2SigLev.p) }
  public static func add(esdTrigCountL: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: esdTrigCountL, def: 0, at: VTOFFSET.esdTrigCountL.p) }
  public static func add(esdTrigCountH: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: esdTrigCountH, def: 0, at: VTOFFSET.esdTrigCountH.p) }
  public static func add(lowLetL: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lowLetL, def: 0, at: VTOFFSET.lowLetL.p) }
  public static func add(lowLetM: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lowLetM, def: 0, at: VTOFFSET.lowLetM.p) }
  public static func add(medLet1L: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: medLet1L, def: 0, at: VTOFFSET.medLet1L.p) }
  public static func add(medLet1M: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: medLet1M, def: 0, at: VTOFFSET.medLet1M.p) }
  public static func add(medLet2L: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: medLet2L, def: 0, at: VTOFFSET.medLet2L.p) }
  public static func add(medLet2M: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: medLet2M, def: 0, at: VTOFFSET.medLet2M.p) }
  public static func add(medLet3L: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: medLet3L, def: 0, at: VTOFFSET.medLet3L.p) }
  public static func add(medLet3M: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: medLet3M, def: 0, at: VTOFFSET.medLet3M.p) }
  public static func add(medLet4L: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: medLet4L, def: 0, at: VTOFFSET.medLet4L.p) }
  public static func add(medLet4M: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: medLet4M, def: 0, at: VTOFFSET.medLet4M.p) }
  public static func add(hiLetL: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hiLetL, def: 0, at: VTOFFSET.hiLetL.p) }
  public static func add(hiLetM: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hiLetM, def: 0, at: VTOFFSET.hiLetM.p) }
  public static func add(surfDosL: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: surfDosL, def: 0, at: VTOFFSET.surfDosL.p) }
  public static func add(surfDosM: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: surfDosM, def: 0, at: VTOFFSET.surfDosM.p) }
  public static func add(surfDosH: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: surfDosH, def: 0, at: VTOFFSET.surfDosH.p) }
  public static func add(surfDosChargeL: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: surfDosChargeL, def: 0, at: VTOFFSET.surfDosChargeL.p) }
  public static func add(surfDosChargeH: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: surfDosChargeH, def: 0, at: VTOFFSET.surfDosChargeH.p) }
  public static func add(surfDosStat: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: surfDosStat, def: 0, at: VTOFFSET.surfDosStat.p) }
  public static func add(cdsThrottle: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cdsThrottle, def: 0, at: VTOFFSET.cdsThrottle.p) }
  public static func add(cdsThreshold: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cdsThreshold, def: 0, at: VTOFFSET.cdsThreshold.p) }
  public static func add(checksum: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: checksum, def: 0, at: VTOFFSET.checksum.p) }
  public static func addVectorOf(transientData: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transientData, at: VTOFFSET.transientData.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: ECPSDR_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(onOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: onOrbit, at: VTOFFSET.onOrbit.p) }
  public static func endECPSDR_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createECPSDR_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    satNo: Int32 = 0,
    origObjectIdOffset origObjectId: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    origSensorIdOffset origSensorId: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    msgTimeOffset msgTime: Offset = Offset(),
    obTimeOffset obTime: Offset = Offset(),
    retransmit: Bool = false,
    senModeOffset senMode: Offset = Offset(),
    dosBias: Int32 = 0,
    asl5VcurrMon: Int32 = 0,
    dsl5VcurrMon: Int32 = 0,
    psTempMon: Int32 = 0,
    cdsPlateVmon: Int32 = 0,
    cdsRefVmon: Int32 = 0,
    mpTemp: Int32 = 0,
    vRef: Int32 = 0,
    pd1SigLev: Int32 = 0,
    pd2SigLev: Int32 = 0,
    esdTrigCountL: Int32 = 0,
    esdTrigCountH: Int32 = 0,
    lowLetL: Int32 = 0,
    lowLetM: Int32 = 0,
    medLet1L: Int32 = 0,
    medLet1M: Int32 = 0,
    medLet2L: Int32 = 0,
    medLet2M: Int32 = 0,
    medLet3L: Int32 = 0,
    medLet3M: Int32 = 0,
    medLet4L: Int32 = 0,
    medLet4M: Int32 = 0,
    hiLetL: Int32 = 0,
    hiLetM: Int32 = 0,
    surfDosL: Int32 = 0,
    surfDosM: Int32 = 0,
    surfDosH: Int32 = 0,
    surfDosChargeL: Int32 = 0,
    surfDosChargeH: Int32 = 0,
    surfDosStat: Int32 = 0,
    cdsThrottle: Int32 = 0,
    cdsThreshold: Int32 = 0,
    checksum: Int32 = 0,
    transientDataVectorOffset transientData: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: ECPSDR_Full_dataMode_Enum = .real,
    onOrbitOffset onOrbit: Offset = Offset()
  ) -> Offset {
    let __start = ECPSDR_Full.startECPSDR_Full(&fbb)
    ECPSDR_Full.add(id: id, &fbb)
    ECPSDR_Full.add(classificationMarking: classificationMarking, &fbb)
    ECPSDR_Full.add(idOnOrbit: idOnOrbit, &fbb)
    ECPSDR_Full.add(satNo: satNo, &fbb)
    ECPSDR_Full.add(origObjectId: origObjectId, &fbb)
    ECPSDR_Full.add(idSensor: idSensor, &fbb)
    ECPSDR_Full.add(origSensorId: origSensorId, &fbb)
    ECPSDR_Full.add(type: type, &fbb)
    ECPSDR_Full.add(msgTime: msgTime, &fbb)
    ECPSDR_Full.add(obTime: obTime, &fbb)
    ECPSDR_Full.add(retransmit: retransmit, &fbb)
    ECPSDR_Full.add(senMode: senMode, &fbb)
    ECPSDR_Full.add(dosBias: dosBias, &fbb)
    ECPSDR_Full.add(asl5VcurrMon: asl5VcurrMon, &fbb)
    ECPSDR_Full.add(dsl5VcurrMon: dsl5VcurrMon, &fbb)
    ECPSDR_Full.add(psTempMon: psTempMon, &fbb)
    ECPSDR_Full.add(cdsPlateVmon: cdsPlateVmon, &fbb)
    ECPSDR_Full.add(cdsRefVmon: cdsRefVmon, &fbb)
    ECPSDR_Full.add(mpTemp: mpTemp, &fbb)
    ECPSDR_Full.add(vRef: vRef, &fbb)
    ECPSDR_Full.add(pd1SigLev: pd1SigLev, &fbb)
    ECPSDR_Full.add(pd2SigLev: pd2SigLev, &fbb)
    ECPSDR_Full.add(esdTrigCountL: esdTrigCountL, &fbb)
    ECPSDR_Full.add(esdTrigCountH: esdTrigCountH, &fbb)
    ECPSDR_Full.add(lowLetL: lowLetL, &fbb)
    ECPSDR_Full.add(lowLetM: lowLetM, &fbb)
    ECPSDR_Full.add(medLet1L: medLet1L, &fbb)
    ECPSDR_Full.add(medLet1M: medLet1M, &fbb)
    ECPSDR_Full.add(medLet2L: medLet2L, &fbb)
    ECPSDR_Full.add(medLet2M: medLet2M, &fbb)
    ECPSDR_Full.add(medLet3L: medLet3L, &fbb)
    ECPSDR_Full.add(medLet3M: medLet3M, &fbb)
    ECPSDR_Full.add(medLet4L: medLet4L, &fbb)
    ECPSDR_Full.add(medLet4M: medLet4M, &fbb)
    ECPSDR_Full.add(hiLetL: hiLetL, &fbb)
    ECPSDR_Full.add(hiLetM: hiLetM, &fbb)
    ECPSDR_Full.add(surfDosL: surfDosL, &fbb)
    ECPSDR_Full.add(surfDosM: surfDosM, &fbb)
    ECPSDR_Full.add(surfDosH: surfDosH, &fbb)
    ECPSDR_Full.add(surfDosChargeL: surfDosChargeL, &fbb)
    ECPSDR_Full.add(surfDosChargeH: surfDosChargeH, &fbb)
    ECPSDR_Full.add(surfDosStat: surfDosStat, &fbb)
    ECPSDR_Full.add(cdsThrottle: cdsThrottle, &fbb)
    ECPSDR_Full.add(cdsThreshold: cdsThreshold, &fbb)
    ECPSDR_Full.add(checksum: checksum, &fbb)
    ECPSDR_Full.addVectorOf(transientData: transientData, &fbb)
    ECPSDR_Full.add(createdAt: createdAt, &fbb)
    ECPSDR_Full.add(createdBy: createdBy, &fbb)
    ECPSDR_Full.add(updatedAt: updatedAt, &fbb)
    ECPSDR_Full.add(updatedBy: updatedBy, &fbb)
    ECPSDR_Full.add(source: source, &fbb)
    ECPSDR_Full.add(origin: origin, &fbb)
    ECPSDR_Full.add(origNetwork: origNetwork, &fbb)
    ECPSDR_Full.add(dataMode: dataMode, &fbb)
    ECPSDR_Full.add(onOrbit: onOrbit, &fbb)
    return ECPSDR_Full.endECPSDR_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origSensorId.p, fieldName: "origSensorId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msgTime.p, fieldName: "msgTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.obTime.p, fieldName: "obTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.retransmit.p, fieldName: "retransmit", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.senMode.p, fieldName: "senMode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dosBias.p, fieldName: "dosBias", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.asl5VcurrMon.p, fieldName: "asl5VcurrMon", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.dsl5VcurrMon.p, fieldName: "dsl5VcurrMon", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.psTempMon.p, fieldName: "psTempMon", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.cdsPlateVmon.p, fieldName: "cdsPlateVmon", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.cdsRefVmon.p, fieldName: "cdsRefVmon", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.mpTemp.p, fieldName: "mpTemp", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.vRef.p, fieldName: "vRef", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.pd1SigLev.p, fieldName: "pd1SigLev", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.pd2SigLev.p, fieldName: "pd2SigLev", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.esdTrigCountL.p, fieldName: "esdTrigCountL", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.esdTrigCountH.p, fieldName: "esdTrigCountH", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.lowLetL.p, fieldName: "lowLetL", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.lowLetM.p, fieldName: "lowLetM", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.medLet1L.p, fieldName: "medLet1L", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.medLet1M.p, fieldName: "medLet1M", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.medLet2L.p, fieldName: "medLet2L", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.medLet2M.p, fieldName: "medLet2M", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.medLet3L.p, fieldName: "medLet3L", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.medLet3M.p, fieldName: "medLet3M", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.medLet4L.p, fieldName: "medLet4L", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.medLet4M.p, fieldName: "medLet4M", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.hiLetL.p, fieldName: "hiLetL", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.hiLetM.p, fieldName: "hiLetM", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.surfDosL.p, fieldName: "surfDosL", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.surfDosM.p, fieldName: "surfDosM", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.surfDosH.p, fieldName: "surfDosH", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.surfDosChargeL.p, fieldName: "surfDosChargeL", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.surfDosChargeH.p, fieldName: "surfDosChargeH", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.surfDosStat.p, fieldName: "surfDosStat", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.cdsThrottle.p, fieldName: "cdsThrottle", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.cdsThreshold.p, fieldName: "cdsThreshold", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.checksum.p, fieldName: "checksum", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.transientData.p, fieldName: "transientData", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: ECPSDR_Full_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.onOrbit.p, fieldName: "onOrbit", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

