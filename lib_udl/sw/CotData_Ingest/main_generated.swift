// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Schema for the CotData to post.
public struct CotData_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "COTD" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: CotData_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case senderUid = 4
    case how = 6
    case ce = 8
    case le = 10
    case stale = 12
    case start = 14
    case lat = 16
    case lon = 18
    case type = 20
    case alt = 22
    case cotPositionData = 24
    case cotChatData = 26
    case callSigns = 28
    case uids = 30
    case groups = 32
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Identifier of the sender of the cot message which should remain the same on subsequent POI records of the same point of interest.
  ///  Example: /// Example: POI-ID
  ///  Constraints: No constraints specified.
  public var senderUid: String? { let o = _accessor.offset(VTOFFSET.senderUid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var senderUidSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.senderUid.v) }
  ///  How the event point was generated, in CoT object heirarchy notation (optional, CoT).
  ///  Example: /// Example: h-e
  ///  Constraints: No constraints specified.
  public var how: String? { let o = _accessor.offset(VTOFFSET.how.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var howSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.how.v) }
  ///  Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var ce: Double { let o = _accessor.offset(VTOFFSET.ce.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Height above lat/lon point, in meters (1-sigma, if representing linear error).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var le: Double { let o = _accessor.offset(VTOFFSET.le.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Stale timestamp (optional), in ISO8601 UTC format.
  ///  Example: /// Example: 2020-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var stale: String? { let o = _accessor.offset(VTOFFSET.stale.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var staleSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.stale.v) }
  ///  Start time of event validity (optional), in ISO8601 UTC format.
  ///  Example: /// Example: 2020-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var start: String? { let o = _accessor.offset(VTOFFSET.start.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var startSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.start.v) }
  ///  WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Event type, in CoT object heirarchy notation (optional, CoT).
  ///  Example: /// Example: a-h-G
  ///  Constraints: No constraints specified.
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Point height above ellipsoid (WGS-84), in meters.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  public var alt: Double { let o = _accessor.offset(VTOFFSET.alt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var cotPositionData: String? { let o = _accessor.offset(VTOFFSET.cotPositionData.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cotPositionDataSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cotPositionData.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var cotChatData: String? { let o = _accessor.offset(VTOFFSET.cotChatData.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var cotChatDataSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.cotChatData.v) }
  ///  Optional list of call signs to send message to directly.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasCallSigns: Bool { let o = _accessor.offset(VTOFFSET.callSigns.v); return o == 0 ? false : true }
  public var callSignsCount: Int32 { let o = _accessor.offset(VTOFFSET.callSigns.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func callSigns(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.callSigns.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Optional list of TAK user ids to send message to directly.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasUids: Bool { let o = _accessor.offset(VTOFFSET.uids.v); return o == 0 ? false : true }
  public var uidsCount: Int32 { let o = _accessor.offset(VTOFFSET.uids.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func uids(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.uids.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Optional set of groups to send message to specifically.  If not specified, the message will be sent to the default _ANON_ group.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasGroups: Bool { let o = _accessor.offset(VTOFFSET.groups.v); return o == 0 ? false : true }
  public var groupsCount: Int32 { let o = _accessor.offset(VTOFFSET.groups.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func groups(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.groups.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startCotData_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 15) }
  public static func add(senderUid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: senderUid, at: VTOFFSET.senderUid.p) }
  public static func add(how: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: how, at: VTOFFSET.how.p) }
  public static func add(ce: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ce, def: 0.0, at: VTOFFSET.ce.p) }
  public static func add(le: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: le, def: 0.0, at: VTOFFSET.le.p) }
  public static func add(stale: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: stale, at: VTOFFSET.stale.p) }
  public static func add(start: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: start, at: VTOFFSET.start.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(alt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: alt, def: 0.0, at: VTOFFSET.alt.p) }
  public static func add(cotPositionData: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cotPositionData, at: VTOFFSET.cotPositionData.p) }
  public static func add(cotChatData: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cotChatData, at: VTOFFSET.cotChatData.p) }
  public static func addVectorOf(callSigns: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callSigns, at: VTOFFSET.callSigns.p) }
  public static func addVectorOf(uids: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uids, at: VTOFFSET.uids.p) }
  public static func addVectorOf(groups: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: groups, at: VTOFFSET.groups.p) }
  public static func endCotData_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createCotData_Ingest(
    _ fbb: inout FlatBufferBuilder,
    senderUidOffset senderUid: Offset = Offset(),
    howOffset how: Offset = Offset(),
    ce: Double = 0.0,
    le: Double = 0.0,
    staleOffset stale: Offset = Offset(),
    startOffset start: Offset = Offset(),
    lat: Double = 0.0,
    lon: Double = 0.0,
    typeOffset type: Offset = Offset(),
    alt: Double = 0.0,
    cotPositionDataOffset cotPositionData: Offset = Offset(),
    cotChatDataOffset cotChatData: Offset = Offset(),
    callSignsVectorOffset callSigns: Offset = Offset(),
    uidsVectorOffset uids: Offset = Offset(),
    groupsVectorOffset groups: Offset = Offset()
  ) -> Offset {
    let __start = CotData_Ingest.startCotData_Ingest(&fbb)
    CotData_Ingest.add(senderUid: senderUid, &fbb)
    CotData_Ingest.add(how: how, &fbb)
    CotData_Ingest.add(ce: ce, &fbb)
    CotData_Ingest.add(le: le, &fbb)
    CotData_Ingest.add(stale: stale, &fbb)
    CotData_Ingest.add(start: start, &fbb)
    CotData_Ingest.add(lat: lat, &fbb)
    CotData_Ingest.add(lon: lon, &fbb)
    CotData_Ingest.add(type: type, &fbb)
    CotData_Ingest.add(alt: alt, &fbb)
    CotData_Ingest.add(cotPositionData: cotPositionData, &fbb)
    CotData_Ingest.add(cotChatData: cotChatData, &fbb)
    CotData_Ingest.addVectorOf(callSigns: callSigns, &fbb)
    CotData_Ingest.addVectorOf(uids: uids, &fbb)
    CotData_Ingest.addVectorOf(groups: groups, &fbb)
    return CotData_Ingest.endCotData_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.senderUid.p, fieldName: "senderUid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.how.p, fieldName: "how", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ce.p, fieldName: "ce", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.le.p, fieldName: "le", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.stale.p, fieldName: "stale", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.start.p, fieldName: "start", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.alt.p, fieldName: "alt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.cotPositionData.p, fieldName: "cotPositionData", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.cotChatData.p, fieldName: "cotChatData", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.callSigns.p, fieldName: "callSigns", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.uids.p, fieldName: "uids", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.groups.p, fieldName: "groups", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

