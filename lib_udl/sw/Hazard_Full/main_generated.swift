// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Hazard_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Hazard_Full_dataMode_Enum { return .exercise }
  public static var min: Hazard_Full_dataMode_Enum { return .real }
}


///  /// Hazard contains information concerning the exposure of a geographic area to a Chemical, Biological, Radiological, or Nuclear (CBRN) contaminant. The Hazard schema includes the detection time and type of contamination as well as optional information regarding specific material properties, the extent of contamination, and identification of affected regions.
public struct Hazard_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "HAZA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Hazard_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case detectType = 8
    case detectTime = 10
    case harmful = 12
    case alarms = 14
    case alarmValues = 16
    case readings = 18
    case readingUnits = 20
    case readingValues = 22
    case matType = 24
    case matClass = 26
    case matName = 28
    case matCat = 30
    case casRn = 32
    case ppm = 34
    case density = 36
    case radCtrn = 38
    case gBar = 40
    case hBar = 42
    case z = 44
    case a = 46
    case bottleId = 48
    case channel = 50
    case duration = 52
    case activity = 54
    case dep = 56
    case depCtrn = 58
    case massFrac = 60
    case dose = 62
    case ctrnTime = 64
    case doseRate = 66
    case idPoi = 68
    case idTrack = 70
    case createdAt = 72
    case createdBy = 74
    case source = 76
    case origin = 78
    case origNetwork = 80
    case dataMode = 82
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: HAZARD-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The type of hazard (Chemical, Biological, Radiological, Nuclear) detect associated with this record.
  ///  Example: /// Example: Chemical
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var detectType: String? { let o = _accessor.offset(VTOFFSET.detectType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var detectTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.detectType.v) }
  ///  The detect time, in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2022-03-07T14:51:39.653Z
  ///  Constraints: No constraints specified.
  public var detectTime: String? { let o = _accessor.offset(VTOFFSET.detectTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var detectTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.detectTime.v) }
  ///  Flag indicating whether this detection is harmful to humans.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var harmful: Bool { let o = _accessor.offset(VTOFFSET.harmful.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Array of the specific alarms associated with this detection. The alarms and alarmValues arrays must contain the same number of elements.
  ///  Example: /// Example: ['Alarm1', 'Alarm2']
  ///  Constraints: No constraints specified.
  public var hasAlarms: Bool { let o = _accessor.offset(VTOFFSET.alarms.v); return o == 0 ? false : true }
  public var alarmsCount: Int32 { let o = _accessor.offset(VTOFFSET.alarms.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func alarms(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.alarms.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the values that correspond to each of the alarms contained in alarms. The alarms and alarmValues arrays must contain the same number of elements.
  ///  Example: /// Example: [2.7, 2.9]
  ///  Constraints: No constraints specified.
  public var hasAlarmValues: Bool { let o = _accessor.offset(VTOFFSET.alarmValues.v); return o == 0 ? false : true }
  public var alarmValuesCount: Int32 { let o = _accessor.offset(VTOFFSET.alarmValues.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func alarmValues(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.alarmValues.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the specific readings associated with this detection. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
  ///  Example: /// Example: ['Rad1', 'Rad2']
  ///  Constraints: No constraints specified.
  public var hasReadings: Bool { let o = _accessor.offset(VTOFFSET.readings.v); return o == 0 ? false : true }
  public var readingsCount: Int32 { let o = _accessor.offset(VTOFFSET.readings.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func readings(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.readings.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the units that correspond to each of the readingValues. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
  ///  Example: /// Example: ['Gray', 'Gray']
  ///  Constraints: No constraints specified.
  public var hasReadingUnits: Bool { let o = _accessor.offset(VTOFFSET.readingUnits.v); return o == 0 ? false : true }
  public var readingUnitsCount: Int32 { let o = _accessor.offset(VTOFFSET.readingUnits.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func readingUnits(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.readingUnits.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of the values that correspond to each of the readings contained in readings. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
  ///  Example: /// Example: [107.2, 124.1]
  ///  Constraints: No constraints specified.
  public var hasReadingValues: Bool { let o = _accessor.offset(VTOFFSET.readingValues.v); return o == 0 ? false : true }
  public var readingValuesCount: Int32 { let o = _accessor.offset(VTOFFSET.readingValues.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func readingValues(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.readingValues.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The specific material type (MT) or MT Code involved in this detection, when applicable. The material type is generally associated with radiological and/or nuclear detections. For further information, reference Nuclear Materials Management and Safeguards System (NMMSS) Users Guide Rev. 2.1.
  ///  Example: /// Example: 21
  ///  Constraints: Minimum length = 0, Maximum length = 48
  public var matType: String? { let o = _accessor.offset(VTOFFSET.matType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var matTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.matType.v) }
  ///  The specific Material Class for the material associated with this detect. The material class is generally associated with chemical and biological detections.
  ///  Example: /// Example: Nerve Agent
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var matClass: String? { let o = _accessor.offset(VTOFFSET.matClass.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var matClassSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.matClass.v) }
  ///  The material common name associated with this detection.
  ///  Example: /// Example: VX
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var matName: String? { let o = _accessor.offset(VTOFFSET.matName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var matNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.matName.v) }
  ///  The Radiological Category (1 - 5) which applies to the material associated with this detection, according to the following definitions: 
  ///  Category 1: If not safely or securely managed, would be likely to cause permanent injury to a person who handled them or was otherwise in contact with them for more than a few minutes. It would probably be fatal to be close to this amount of unshielded material for a period of a few minutes to an hour. 
  ///  Category 2: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for a short time (minutes to hours). It could possibly be fatal to be close to this amount of unshielded radioactive material for a period of hours to days. 
  ///  Category 3: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for hours. It could possibly - although it is unlikely to be - fatal to be close to this amount of unshielded radioactive material for a period of days to weeks. 
  ///  Category 4: If not safely managed or securely protected, could possibly cause temporary injury to someone who handled them or was otherwise in contact with or close to them for a period of many weeks, though this is unlikely. It is very unlikely anyone would be permanently injured by this amount of radioactive material. 
  ///  Category 5: Cannot cause permanent injury. This category applies to x-ray fluorescence devices and electron capture devices.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var matCat: Int32 { let o = _accessor.offset(VTOFFSET.matCat.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The CAS Registry Number, also referred to as CAS Number or CAS RN, associated with the this detection. The CAS Number is a unique numerical identifier assigned by the Chemical Abstracts Service (CAS), to every chemical substance described in the open scientific literature. It includes organic and inorganic compounds, minerals, isotopes, alloys, mixtures, and nonstructurable materials (UVCBs, substances of unknown or variable composition, complex reaction products, or biological origin). For further information, reference https://www.cas.org/cas-data/cas-registry.
  ///  Example: /// Example: 64-17-5
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var casRn: String? { let o = _accessor.offset(VTOFFSET.casRn.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var casRnSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.casRn.v) }
  ///  Measure of the concentration of the material associated with this detection, in parts per million (units of contaminant mass per million parts of total mass).
  ///  Example: /// Example: 27129
  ///  Constraints: No constraints specified.
  public var ppm: Int32 { let o = _accessor.offset(VTOFFSET.ppm.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Measure of density of the material associated with this detection, in kg/m^3.
  ///  Example: /// Example: 18900.2
  ///  Constraints: No constraints specified.
  public var density: Double { let o = _accessor.offset(VTOFFSET.density.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Measure of radioactive concentration of the material associated with this detection, in becquerels/m^3. One becquerel (Bq) is equal to one nuclear decay per second.
  ///  Example: /// Example: 1.31
  ///  Constraints: No constraints specified.
  public var radCtrn: Double { let o = _accessor.offset(VTOFFSET.radCtrn.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Chemical Agent Monitor (CAM) G-type agent measurement, in number of display bars. In G-mode, CAMs monitor for G-series nerve agents.
  ///  Example: /// Example: 2.5
  ///  Constraints: No constraints specified.
  public var gBar: Double { let o = _accessor.offset(VTOFFSET.gBar.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Chemical Agent Monitor (CAM) H-type agent measurement, in number of display bars. In H-mode, CAMs monitor for blister agents.
  ///  Example: /// Example: 3.1
  ///  Constraints: No constraints specified.
  public var hBar: Double { let o = _accessor.offset(VTOFFSET.hBar.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Atomic Number of the material associated with this detection.
  ///  Example: /// Example: 92
  ///  Constraints: No constraints specified.
  public var z: Int32 { let o = _accessor.offset(VTOFFSET.z.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The (rounded) Mass Number of the material associated with this detection. The rounded value is the mass number of the most abundant isotope of the element.
  ///  Example: /// Example: 238
  ///  Constraints: No constraints specified.
  public var a: Int32 { let o = _accessor.offset(VTOFFSET.a.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The specific bottle ID associated with this detection.
  ///  Example: /// Example: 6264
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var bottleId: String? { let o = _accessor.offset(VTOFFSET.bottleId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var bottleIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.bottleId.v) }
  ///  The applicable channel involved in this biological material detection (e.g. Digestive, Eyes, Respiratory, Skin, etc.) .
  ///  Example: /// Example: Skin
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var channel: String? { let o = _accessor.offset(VTOFFSET.channel.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var channelSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.channel.v) }
  ///  The known or projected hazard duration, in seconds, associated with this material detection.
  ///  Example: /// Example: 14400
  ///  Constraints: No constraints specified.
  public var duration: Int32 { let o = _accessor.offset(VTOFFSET.duration.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The radioactivity measurement of the material associated with this detection, in becquerels (Bq). One becquerel (Bq) is equal to one nuclear decay per second.
  ///  Example: /// Example: 120.1
  ///  Constraints: No constraints specified.
  public var activity: Double { let o = _accessor.offset(VTOFFSET.activity.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The deposition measurement of the contaminant to surface area, in kg/m^2.
  ///  Example: /// Example: 1.084
  ///  Constraints: No constraints specified.
  public var dep: Double { let o = _accessor.offset(VTOFFSET.dep.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The deposition concentration of the contaminant to surface area, in becquerels/m^2.
  ///  Example: /// Example: 86.1
  ///  Constraints: No constraints specified.
  public var depCtrn: Double { let o = _accessor.offset(VTOFFSET.depCtrn.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Ratio of the chemical substance mass to the total mass of the mixture.
  ///  Example: /// Example: 0.029
  ///  Constraints: No constraints specified.
  public var massFrac: Double { let o = _accessor.offset(VTOFFSET.massFrac.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The dose associated with this detection, in gray. Dose is the measure of the energy deposited in matter by ionizing radiation per unit mass. One gray is defined as one Joule of energy absorbed per kilogram of matter.
  ///  Example: /// Example: 1.12
  ///  Constraints: No constraints specified.
  public var dose: Double { let o = _accessor.offset(VTOFFSET.dose.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The concentration time, in (kg/sec)/m^3, associated with this material detection.
  ///  Example: /// Example: 1.077
  ///  Constraints: No constraints specified.
  public var ctrnTime: Double { let o = _accessor.offset(VTOFFSET.ctrnTime.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The dose rate associated with this detection, in gray/sec. One gray is defined as one Joule of energy absorbed per kilogram of matter.
  ///  Example: /// Example: 1.0000001865
  ///  Constraints: No constraints specified.
  public var doseRate: Double { let o = _accessor.offset(VTOFFSET.doseRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  ID of the Point of Interest (POI) record related to this hazard record.
  ///  Example: /// Example: POI-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idPoi: String? { let o = _accessor.offset(VTOFFSET.idPoi.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idPoiSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idPoi.v) }
  ///  ID of the Track record related to this hazard record.
  ///  Example: /// Example: TRACK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idTrack: String? { let o = _accessor.offset(VTOFFSET.idTrack.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idTrackSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idTrack.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Hazard_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Hazard_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startHazard_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 40) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(detectType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: detectType, at: VTOFFSET.detectType.p) }
  public static func add(detectTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: detectTime, at: VTOFFSET.detectTime.p) }
  public static func add(harmful: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: harmful, def: false,
   at: VTOFFSET.harmful.p) }
  public static func addVectorOf(alarms: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: alarms, at: VTOFFSET.alarms.p) }
  public static func addVectorOf(alarmValues: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: alarmValues, at: VTOFFSET.alarmValues.p) }
  public static func addVectorOf(readings: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: readings, at: VTOFFSET.readings.p) }
  public static func addVectorOf(readingUnits: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: readingUnits, at: VTOFFSET.readingUnits.p) }
  public static func addVectorOf(readingValues: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: readingValues, at: VTOFFSET.readingValues.p) }
  public static func add(matType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: matType, at: VTOFFSET.matType.p) }
  public static func add(matClass: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: matClass, at: VTOFFSET.matClass.p) }
  public static func add(matName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: matName, at: VTOFFSET.matName.p) }
  public static func add(matCat: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: matCat, def: 0, at: VTOFFSET.matCat.p) }
  public static func add(casRn: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: casRn, at: VTOFFSET.casRn.p) }
  public static func add(ppm: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ppm, def: 0, at: VTOFFSET.ppm.p) }
  public static func add(density: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: density, def: 0.0, at: VTOFFSET.density.p) }
  public static func add(radCtrn: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: radCtrn, def: 0.0, at: VTOFFSET.radCtrn.p) }
  public static func add(gBar: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gBar, def: 0.0, at: VTOFFSET.gBar.p) }
  public static func add(hBar: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hBar, def: 0.0, at: VTOFFSET.hBar.p) }
  public static func add(z: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: z, def: 0, at: VTOFFSET.z.p) }
  public static func add(a: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: a, def: 0, at: VTOFFSET.a.p) }
  public static func add(bottleId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: bottleId, at: VTOFFSET.bottleId.p) }
  public static func add(channel: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: channel, at: VTOFFSET.channel.p) }
  public static func add(duration: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: duration, def: 0, at: VTOFFSET.duration.p) }
  public static func add(activity: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: activity, def: 0.0, at: VTOFFSET.activity.p) }
  public static func add(dep: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dep, def: 0.0, at: VTOFFSET.dep.p) }
  public static func add(depCtrn: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: depCtrn, def: 0.0, at: VTOFFSET.depCtrn.p) }
  public static func add(massFrac: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: massFrac, def: 0.0, at: VTOFFSET.massFrac.p) }
  public static func add(dose: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dose, def: 0.0, at: VTOFFSET.dose.p) }
  public static func add(ctrnTime: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ctrnTime, def: 0.0, at: VTOFFSET.ctrnTime.p) }
  public static func add(doseRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: doseRate, def: 0.0, at: VTOFFSET.doseRate.p) }
  public static func add(idPoi: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idPoi, at: VTOFFSET.idPoi.p) }
  public static func add(idTrack: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idTrack, at: VTOFFSET.idTrack.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: Hazard_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endHazard_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createHazard_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    detectTypeOffset detectType: Offset = Offset(),
    detectTimeOffset detectTime: Offset = Offset(),
    harmful: Bool = false,
    alarmsVectorOffset alarms: Offset = Offset(),
    alarmValuesVectorOffset alarmValues: Offset = Offset(),
    readingsVectorOffset readings: Offset = Offset(),
    readingUnitsVectorOffset readingUnits: Offset = Offset(),
    readingValuesVectorOffset readingValues: Offset = Offset(),
    matTypeOffset matType: Offset = Offset(),
    matClassOffset matClass: Offset = Offset(),
    matNameOffset matName: Offset = Offset(),
    matCat: Int32 = 0,
    casRnOffset casRn: Offset = Offset(),
    ppm: Int32 = 0,
    density: Double = 0.0,
    radCtrn: Double = 0.0,
    gBar: Double = 0.0,
    hBar: Double = 0.0,
    z: Int32 = 0,
    a: Int32 = 0,
    bottleIdOffset bottleId: Offset = Offset(),
    channelOffset channel: Offset = Offset(),
    duration: Int32 = 0,
    activity: Double = 0.0,
    dep: Double = 0.0,
    depCtrn: Double = 0.0,
    massFrac: Double = 0.0,
    dose: Double = 0.0,
    ctrnTime: Double = 0.0,
    doseRate: Double = 0.0,
    idPoiOffset idPoi: Offset = Offset(),
    idTrackOffset idTrack: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: Hazard_Full_dataMode_Enum = .real
  ) -> Offset {
    let __start = Hazard_Full.startHazard_Full(&fbb)
    Hazard_Full.add(id: id, &fbb)
    Hazard_Full.add(classificationMarking: classificationMarking, &fbb)
    Hazard_Full.add(detectType: detectType, &fbb)
    Hazard_Full.add(detectTime: detectTime, &fbb)
    Hazard_Full.add(harmful: harmful, &fbb)
    Hazard_Full.addVectorOf(alarms: alarms, &fbb)
    Hazard_Full.addVectorOf(alarmValues: alarmValues, &fbb)
    Hazard_Full.addVectorOf(readings: readings, &fbb)
    Hazard_Full.addVectorOf(readingUnits: readingUnits, &fbb)
    Hazard_Full.addVectorOf(readingValues: readingValues, &fbb)
    Hazard_Full.add(matType: matType, &fbb)
    Hazard_Full.add(matClass: matClass, &fbb)
    Hazard_Full.add(matName: matName, &fbb)
    Hazard_Full.add(matCat: matCat, &fbb)
    Hazard_Full.add(casRn: casRn, &fbb)
    Hazard_Full.add(ppm: ppm, &fbb)
    Hazard_Full.add(density: density, &fbb)
    Hazard_Full.add(radCtrn: radCtrn, &fbb)
    Hazard_Full.add(gBar: gBar, &fbb)
    Hazard_Full.add(hBar: hBar, &fbb)
    Hazard_Full.add(z: z, &fbb)
    Hazard_Full.add(a: a, &fbb)
    Hazard_Full.add(bottleId: bottleId, &fbb)
    Hazard_Full.add(channel: channel, &fbb)
    Hazard_Full.add(duration: duration, &fbb)
    Hazard_Full.add(activity: activity, &fbb)
    Hazard_Full.add(dep: dep, &fbb)
    Hazard_Full.add(depCtrn: depCtrn, &fbb)
    Hazard_Full.add(massFrac: massFrac, &fbb)
    Hazard_Full.add(dose: dose, &fbb)
    Hazard_Full.add(ctrnTime: ctrnTime, &fbb)
    Hazard_Full.add(doseRate: doseRate, &fbb)
    Hazard_Full.add(idPoi: idPoi, &fbb)
    Hazard_Full.add(idTrack: idTrack, &fbb)
    Hazard_Full.add(createdAt: createdAt, &fbb)
    Hazard_Full.add(createdBy: createdBy, &fbb)
    Hazard_Full.add(source: source, &fbb)
    Hazard_Full.add(origin: origin, &fbb)
    Hazard_Full.add(origNetwork: origNetwork, &fbb)
    Hazard_Full.add(dataMode: dataMode, &fbb)
    return Hazard_Full.endHazard_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.detectType.p, fieldName: "detectType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.detectTime.p, fieldName: "detectTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.harmful.p, fieldName: "harmful", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.alarms.p, fieldName: "alarms", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.alarmValues.p, fieldName: "alarmValues", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.readings.p, fieldName: "readings", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.readingUnits.p, fieldName: "readingUnits", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.readingValues.p, fieldName: "readingValues", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.matType.p, fieldName: "matType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.matClass.p, fieldName: "matClass", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.matName.p, fieldName: "matName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.matCat.p, fieldName: "matCat", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.casRn.p, fieldName: "casRn", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ppm.p, fieldName: "ppm", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.density.p, fieldName: "density", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.radCtrn.p, fieldName: "radCtrn", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gBar.p, fieldName: "gBar", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.hBar.p, fieldName: "hBar", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.z.p, fieldName: "z", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.a.p, fieldName: "a", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.bottleId.p, fieldName: "bottleId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.channel.p, fieldName: "channel", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.duration.p, fieldName: "duration", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.activity.p, fieldName: "activity", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dep.p, fieldName: "dep", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.depCtrn.p, fieldName: "depCtrn", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.massFrac.p, fieldName: "massFrac", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dose.p, fieldName: "dose", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ctrnTime.p, fieldName: "ctrnTime", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.doseRate.p, fieldName: "doseRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.idPoi.p, fieldName: "idPoi", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idTrack.p, fieldName: "idTrack", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Hazard_Full_dataMode_Enum.self)
    _v.finish()
  }
}

