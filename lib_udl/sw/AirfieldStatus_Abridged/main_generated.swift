// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum AirfieldStatus_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: AirfieldStatus_Abridged_dataMode_Enum { return .exercise }
  public static var min: AirfieldStatus_Abridged_dataMode_Enum { return .real }
}


///  /// The airfield status contains dynamic data of an airfield's capabilities.
public struct AirfieldStatus_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRF" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AirfieldStatus_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idAirfield = 8
    case altAirfieldId = 10
    case passengerServiceMog = 12
    case fleetServiceMog = 14
    case cargoMog = 16
    case fuelMog = 18
    case fuelTypes = 20
    case fuelQtys = 22
    case mxMog = 24
    case operatingMog = 26
    case numCog = 28
    case wideWorkingMog = 30
    case wideParkingMog = 32
    case narrowWorkingMog = 34
    case narrowParkingMog = 36
    case mheTypes = 38
    case mheQtys = 40
    case medCap = 42
    case arffCat = 44
    case gseTime = 46
    case priRwyNum = 48
    case rwyCondReading = 50
    case rwyFrictionFactor = 52
    case rwyMarkings = 54
    case message = 56
    case priFreq = 58
    case slotTypesReq = 60
    case createdAt = 62
    case createdBy = 64
    case sourceDl = 66
    case source = 68
    case origin = 70
    case origNetwork = 72
    case dataMode = 74
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the Airfield for which this status is referencing.
  ///  Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idAirfield: String? { let o = _accessor.offset(VTOFFSET.idAirfield.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idAirfieldSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idAirfield.v) }
  ///  Alternate airfield identifier provided by the source.
  ///  Example: /// Example: AIRFIELD-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var altAirfieldId: String? { let o = _accessor.offset(VTOFFSET.altAirfieldId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altAirfieldIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altAirfieldId.v) }
  ///  Maximum on ground (MOG) number of high-reach/wide-body passenger aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var passengerServiceMog: Int32 { let o = _accessor.offset(VTOFFSET.passengerServiceMog.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Maximum on ground (MOG) number of fleet aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  public var fleetServiceMog: Int32 { let o = _accessor.offset(VTOFFSET.fleetServiceMog.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Maximum on ground (MOG) number of high-reach/wide-body cargo aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
  ///  Example: /// Example: 8
  ///  Constraints: No constraints specified.
  public var cargoMog: Int32 { let o = _accessor.offset(VTOFFSET.cargoMog.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Maximum on ground (MOG) number of aircraft that can be simultaneously refueled based on spacing and manpower at the time of status.
  ///  Example: /// Example: 9
  ///  Constraints: No constraints specified.
  public var fuelMog: Int32 { let o = _accessor.offset(VTOFFSET.fuelMog.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of fuel types available at the airfield. This array must be the same length as fuelQtys.
  ///  Example: /// Example: ['JP-8', 'Jet A', 'AVGAS']
  ///  Constraints: No constraints specified.
  public var hasFuelTypes: Bool { let o = _accessor.offset(VTOFFSET.fuelTypes.v); return o == 0 ? false : true }
  public var fuelTypesCount: Int32 { let o = _accessor.offset(VTOFFSET.fuelTypes.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func fuelTypes(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.fuelTypes.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of quantities for each fuel type at the airfield, in kilograms. The values in this array must correspond to the position index in fuelTypes. This array must be the same length as fuelTypes.
  ///  Example: /// Example: [263083.6, 286674.9, 18143.69]
  ///  Constraints: No constraints specified.
  public var hasFuelQtys: Bool { let o = _accessor.offset(VTOFFSET.fuelQtys.v); return o == 0 ? false : true }
  public var fuelQtysCount: Int32 { let o = _accessor.offset(VTOFFSET.fuelQtys.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func fuelQtys(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.fuelQtys.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Maximum on ground (MOG) number of aircraft that can be simultaneously ground handled for standard maintenance based on spacing and manpower at the time of status.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var mxMog: Int32 { let o = _accessor.offset(VTOFFSET.mxMog.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Maximum on ground (MOG) number of aircraft due to items not directly related to the airfield infrastructure or aircraft servicing capability based on spacing and manpower at the time of status.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  public var operatingMog: Int32 { let o = _accessor.offset(VTOFFSET.operatingMog.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The number of aircraft that are currently on ground (COG) at the airfield.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var numCog: Int32 { let o = _accessor.offset(VTOFFSET.numCog.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Maximum on ground (MOG) number of working wide-body aircraft based on spacing and manpower at the time of status.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var wideWorkingMog: Int32 { let o = _accessor.offset(VTOFFSET.wideWorkingMog.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Maximum on ground (MOG) number of parking wide-body aircraft based on spacing and manpower at the time of status.
  ///  Example: /// Example: 7
  ///  Constraints: No constraints specified.
  public var wideParkingMog: Int32 { let o = _accessor.offset(VTOFFSET.wideParkingMog.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Maximum on ground (MOG) number of working narrow-body aircraft based on spacing and manpower at the time of status.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  public var narrowWorkingMog: Int32 { let o = _accessor.offset(VTOFFSET.narrowWorkingMog.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Maximum on ground (MOG) number of parking narrow-body aircraft based on spacing and manpower at the time of status.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var narrowParkingMog: Int32 { let o = _accessor.offset(VTOFFSET.narrowParkingMog.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of material handling equipment types at the airfield. This array must be the same length as mheQtys.
  ///  Example: /// Example: ['30k', 'AT', '60k']
  ///  Constraints: No constraints specified.
  public var hasMheTypes: Bool { let o = _accessor.offset(VTOFFSET.mheTypes.v); return o == 0 ? false : true }
  public var mheTypesCount: Int32 { let o = _accessor.offset(VTOFFSET.mheTypes.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func mheTypes(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.mheTypes.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Array of quantities for each material handling equipment types at the airfield. The values in this array must correspond to the position index in mheTypes. This array must be the same length as mheTypes.
  ///  Example: /// Example: [1, 3, 1]
  ///  Constraints: No constraints specified.
  public var hasMheQtys: Bool { let o = _accessor.offset(VTOFFSET.mheQtys.v); return o == 0 ? false : true }
  public var mheQtysCount: Int32 { let o = _accessor.offset(VTOFFSET.mheQtys.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func mheQtys(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.mheQtys.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  The level of medical support and capabilities available at the airfield.
  ///  Example: /// Example: Large Field Hospital
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var medCap: String? { let o = _accessor.offset(VTOFFSET.medCap.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var medCapSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.medCap.v) }
  ///  The category of aircraft rescue and fire fighting (ARFF) services that are currently available at the airfield. Entries should include  the code (FAA or ICAO) and the category.
  ///  Example: /// Example: FAA-A
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var arffCat: String? { let o = _accessor.offset(VTOFFSET.arffCat.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var arffCatSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.arffCat.v) }
  ///  The expected time to receive ground support equipment (e.g. power units, air units, cables, hoses, etc.), in minutes.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var gseTime: Int32 { let o = _accessor.offset(VTOFFSET.gseTime.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The number or ID of primary runway at the airfield.
  ///  Example: /// Example: 35R
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var priRwyNum: String? { let o = _accessor.offset(VTOFFSET.priRwyNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var priRwyNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.priRwyNum.v) }
  ///  The primary runway condition reading value used for determining runway braking action, from 0 to 26. A value of 0 indicates braking action is poor or non-existent, where a value of 26 indicates braking action is good.
  ///  Example: /// Example: 23
  ///  Constraints: No constraints specified.
  public var rwyCondReading: Int32 { let o = _accessor.offset(VTOFFSET.rwyCondReading.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The primary runway friction factor which is dependent on the surface friction between the tires of the aircraft and the runway surface, from 0 to 100. A lower number indicates less friction and less braking response.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  public var rwyFrictionFactor: Int32 { let o = _accessor.offset(VTOFFSET.rwyFrictionFactor.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Array of markings currently on the primary runway.
  ///  Example: /// Example: ['Aiming Point', 'Threshold']
  ///  Constraints: No constraints specified.
  public var hasRwyMarkings: Bool { let o = _accessor.offset(VTOFFSET.rwyMarkings.v); return o == 0 ? false : true }
  public var rwyMarkingsCount: Int32 { let o = _accessor.offset(VTOFFSET.rwyMarkings.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func rwyMarkings(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.rwyMarkings.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Description of the current status of the airfield.
  ///  Example: /// Example: Status message about the airfield.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var message: String? { let o = _accessor.offset(VTOFFSET.message.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var messageSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.message.v) }
  ///  The primary frequency which the airfield is currently operating, in megahertz.
  ///  Example: /// Example: 123.45
  ///  Constraints: No constraints specified.
  public var priFreq: Double { let o = _accessor.offset(VTOFFSET.priFreq.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Array of slot types that an airfield requires a particular aircraft provide in order to consume a slot at this location.
  ///  Example: /// Example: ['PARKING', 'WORKING', 'LANDING']
  ///  Constraints: No constraints specified.
  public var hasSlotTypesReq: Bool { let o = _accessor.offset(VTOFFSET.slotTypesReq.v); return o == 0 ? false : true }
  public var slotTypesReqCount: Int32 { let o = _accessor.offset(VTOFFSET.slotTypesReq.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func slotTypesReq(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.slotTypesReq.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: AirfieldStatus_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : AirfieldStatus_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startAirfieldStatus_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 36) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idAirfield: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idAirfield, at: VTOFFSET.idAirfield.p) }
  public static func add(altAirfieldId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altAirfieldId, at: VTOFFSET.altAirfieldId.p) }
  public static func add(passengerServiceMog: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: passengerServiceMog, def: 0, at: VTOFFSET.passengerServiceMog.p) }
  public static func add(fleetServiceMog: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fleetServiceMog, def: 0, at: VTOFFSET.fleetServiceMog.p) }
  public static func add(cargoMog: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cargoMog, def: 0, at: VTOFFSET.cargoMog.p) }
  public static func add(fuelMog: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fuelMog, def: 0, at: VTOFFSET.fuelMog.p) }
  public static func addVectorOf(fuelTypes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fuelTypes, at: VTOFFSET.fuelTypes.p) }
  public static func addVectorOf(fuelQtys: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fuelQtys, at: VTOFFSET.fuelQtys.p) }
  public static func add(mxMog: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: mxMog, def: 0, at: VTOFFSET.mxMog.p) }
  public static func add(operatingMog: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: operatingMog, def: 0, at: VTOFFSET.operatingMog.p) }
  public static func add(numCog: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numCog, def: 0, at: VTOFFSET.numCog.p) }
  public static func add(wideWorkingMog: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: wideWorkingMog, def: 0, at: VTOFFSET.wideWorkingMog.p) }
  public static func add(wideParkingMog: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: wideParkingMog, def: 0, at: VTOFFSET.wideParkingMog.p) }
  public static func add(narrowWorkingMog: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: narrowWorkingMog, def: 0, at: VTOFFSET.narrowWorkingMog.p) }
  public static func add(narrowParkingMog: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: narrowParkingMog, def: 0, at: VTOFFSET.narrowParkingMog.p) }
  public static func addVectorOf(mheTypes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mheTypes, at: VTOFFSET.mheTypes.p) }
  public static func addVectorOf(mheQtys: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mheQtys, at: VTOFFSET.mheQtys.p) }
  public static func add(medCap: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: medCap, at: VTOFFSET.medCap.p) }
  public static func add(arffCat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: arffCat, at: VTOFFSET.arffCat.p) }
  public static func add(gseTime: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gseTime, def: 0, at: VTOFFSET.gseTime.p) }
  public static func add(priRwyNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: priRwyNum, at: VTOFFSET.priRwyNum.p) }
  public static func add(rwyCondReading: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rwyCondReading, def: 0, at: VTOFFSET.rwyCondReading.p) }
  public static func add(rwyFrictionFactor: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rwyFrictionFactor, def: 0, at: VTOFFSET.rwyFrictionFactor.p) }
  public static func addVectorOf(rwyMarkings: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rwyMarkings, at: VTOFFSET.rwyMarkings.p) }
  public static func add(message: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: message, at: VTOFFSET.message.p) }
  public static func add(priFreq: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: priFreq, def: 0.0, at: VTOFFSET.priFreq.p) }
  public static func addVectorOf(slotTypesReq: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: slotTypesReq, at: VTOFFSET.slotTypesReq.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: AirfieldStatus_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endAirfieldStatus_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAirfieldStatus_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idAirfieldOffset idAirfield: Offset = Offset(),
    altAirfieldIdOffset altAirfieldId: Offset = Offset(),
    passengerServiceMog: Int32 = 0,
    fleetServiceMog: Int32 = 0,
    cargoMog: Int32 = 0,
    fuelMog: Int32 = 0,
    fuelTypesVectorOffset fuelTypes: Offset = Offset(),
    fuelQtysVectorOffset fuelQtys: Offset = Offset(),
    mxMog: Int32 = 0,
    operatingMog: Int32 = 0,
    numCog: Int32 = 0,
    wideWorkingMog: Int32 = 0,
    wideParkingMog: Int32 = 0,
    narrowWorkingMog: Int32 = 0,
    narrowParkingMog: Int32 = 0,
    mheTypesVectorOffset mheTypes: Offset = Offset(),
    mheQtysVectorOffset mheQtys: Offset = Offset(),
    medCapOffset medCap: Offset = Offset(),
    arffCatOffset arffCat: Offset = Offset(),
    gseTime: Int32 = 0,
    priRwyNumOffset priRwyNum: Offset = Offset(),
    rwyCondReading: Int32 = 0,
    rwyFrictionFactor: Int32 = 0,
    rwyMarkingsVectorOffset rwyMarkings: Offset = Offset(),
    messageOffset message: Offset = Offset(),
    priFreq: Double = 0.0,
    slotTypesReqVectorOffset slotTypesReq: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: AirfieldStatus_Abridged_dataMode_Enum = .real
  ) -> Offset {
    let __start = AirfieldStatus_Abridged.startAirfieldStatus_Abridged(&fbb)
    AirfieldStatus_Abridged.add(id: id, &fbb)
    AirfieldStatus_Abridged.add(classificationMarking: classificationMarking, &fbb)
    AirfieldStatus_Abridged.add(idAirfield: idAirfield, &fbb)
    AirfieldStatus_Abridged.add(altAirfieldId: altAirfieldId, &fbb)
    AirfieldStatus_Abridged.add(passengerServiceMog: passengerServiceMog, &fbb)
    AirfieldStatus_Abridged.add(fleetServiceMog: fleetServiceMog, &fbb)
    AirfieldStatus_Abridged.add(cargoMog: cargoMog, &fbb)
    AirfieldStatus_Abridged.add(fuelMog: fuelMog, &fbb)
    AirfieldStatus_Abridged.addVectorOf(fuelTypes: fuelTypes, &fbb)
    AirfieldStatus_Abridged.addVectorOf(fuelQtys: fuelQtys, &fbb)
    AirfieldStatus_Abridged.add(mxMog: mxMog, &fbb)
    AirfieldStatus_Abridged.add(operatingMog: operatingMog, &fbb)
    AirfieldStatus_Abridged.add(numCog: numCog, &fbb)
    AirfieldStatus_Abridged.add(wideWorkingMog: wideWorkingMog, &fbb)
    AirfieldStatus_Abridged.add(wideParkingMog: wideParkingMog, &fbb)
    AirfieldStatus_Abridged.add(narrowWorkingMog: narrowWorkingMog, &fbb)
    AirfieldStatus_Abridged.add(narrowParkingMog: narrowParkingMog, &fbb)
    AirfieldStatus_Abridged.addVectorOf(mheTypes: mheTypes, &fbb)
    AirfieldStatus_Abridged.addVectorOf(mheQtys: mheQtys, &fbb)
    AirfieldStatus_Abridged.add(medCap: medCap, &fbb)
    AirfieldStatus_Abridged.add(arffCat: arffCat, &fbb)
    AirfieldStatus_Abridged.add(gseTime: gseTime, &fbb)
    AirfieldStatus_Abridged.add(priRwyNum: priRwyNum, &fbb)
    AirfieldStatus_Abridged.add(rwyCondReading: rwyCondReading, &fbb)
    AirfieldStatus_Abridged.add(rwyFrictionFactor: rwyFrictionFactor, &fbb)
    AirfieldStatus_Abridged.addVectorOf(rwyMarkings: rwyMarkings, &fbb)
    AirfieldStatus_Abridged.add(message: message, &fbb)
    AirfieldStatus_Abridged.add(priFreq: priFreq, &fbb)
    AirfieldStatus_Abridged.addVectorOf(slotTypesReq: slotTypesReq, &fbb)
    AirfieldStatus_Abridged.add(createdAt: createdAt, &fbb)
    AirfieldStatus_Abridged.add(createdBy: createdBy, &fbb)
    AirfieldStatus_Abridged.add(sourceDl: sourceDl, &fbb)
    AirfieldStatus_Abridged.add(source: source, &fbb)
    AirfieldStatus_Abridged.add(origin: origin, &fbb)
    AirfieldStatus_Abridged.add(origNetwork: origNetwork, &fbb)
    AirfieldStatus_Abridged.add(dataMode: dataMode, &fbb)
    return AirfieldStatus_Abridged.endAirfieldStatus_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idAirfield.p, fieldName: "idAirfield", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altAirfieldId.p, fieldName: "altAirfieldId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.passengerServiceMog.p, fieldName: "passengerServiceMog", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.fleetServiceMog.p, fieldName: "fleetServiceMog", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.cargoMog.p, fieldName: "cargoMog", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.fuelMog.p, fieldName: "fuelMog", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.fuelTypes.p, fieldName: "fuelTypes", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.fuelQtys.p, fieldName: "fuelQtys", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.mxMog.p, fieldName: "mxMog", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.operatingMog.p, fieldName: "operatingMog", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numCog.p, fieldName: "numCog", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.wideWorkingMog.p, fieldName: "wideWorkingMog", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.wideParkingMog.p, fieldName: "wideParkingMog", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.narrowWorkingMog.p, fieldName: "narrowWorkingMog", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.narrowParkingMog.p, fieldName: "narrowParkingMog", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.mheTypes.p, fieldName: "mheTypes", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.mheQtys.p, fieldName: "mheQtys", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.medCap.p, fieldName: "medCap", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.arffCat.p, fieldName: "arffCat", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.gseTime.p, fieldName: "gseTime", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.priRwyNum.p, fieldName: "priRwyNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rwyCondReading.p, fieldName: "rwyCondReading", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.rwyFrictionFactor.p, fieldName: "rwyFrictionFactor", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.rwyMarkings.p, fieldName: "rwyMarkings", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.message.p, fieldName: "message", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.priFreq.p, fieldName: "priFreq", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.slotTypesReq.p, fieldName: "slotTypesReq", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: AirfieldStatus_Abridged_dataMode_Enum.self)
    _v.finish()
  }
}

