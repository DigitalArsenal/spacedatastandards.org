// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum StarCatalog_Ingest_astrometryOrigin_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case gaiadr3 = 0
  ///  No description available.
  case hipparcos = 1
  ///  No description available.
  case usnobsc = 2

  public static var max: StarCatalog_Ingest_astrometryOrigin_Enum { return .usnobsc }
  public static var min: StarCatalog_Ingest_astrometryOrigin_Enum { return .gaiadr3 }
}


public enum StarCatalog_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: StarCatalog_Ingest_dataMode_Enum { return .exercise }
  public static var min: StarCatalog_Ingest_dataMode_Enum { return .real }
}


///  /// The star catalog provides the position, proper motion, parallax, and photometric magnitudes at various bandpasses of a star.
public struct StarCatalog_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "STAR" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: StarCatalog_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case csId = 8
    case gncCatId = 10
    case gaiadr3CatId = 12
    case hipCatId = 14
    case catVersion = 16
    case ra = 18
    case raUnc = 20
    case dec = 22
    case decUnc = 24
    case posUncFlag = 26
    case parallax = 28
    case parallaxUnc = 30
    case pmra = 32
    case pmraUnc = 34
    case pmdec = 36
    case pmdecUnc = 38
    case pmUncFlag = 40
    case astrometryOrigin = 42
    case starEpoch = 44
    case gmag = 46
    case gmagUnc = 48
    case bpmag = 50
    case bpmagUnc = 52
    case rpmag = 54
    case rpmagUnc = 56
    case jmag = 58
    case jmagUnc = 60
    case kmag = 62
    case kmagUnc = 64
    case hmag = 66
    case hmagUnc = 68
    case varFlag = 70
    case multFlag = 72
    case neighborId = 74
    case neighborFlag = 76
    case neighborDistance = 78
    case shiftFlag = 80
    case shift = 82
    case createdAt = 84
    case createdBy = 86
    case updatedAt = 88
    case updatedBy = 90
    case source = 92
    case origin = 94
    case origNetwork = 96
    case dataMode = 98
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: STAR-CAT-DATASET-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The ID of this object in the specific catalog associated with this record.
  ///  Example: /// Example: 12345
  ///  Constraints: No constraints specified.
  public var csId: Int64 { let o = _accessor.offset(VTOFFSET.csId.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  ///  The ID of this object in the Guidance and Navagation Control (GNC) Catalog.
  ///  Example: /// Example: 12345
  ///  Constraints: No constraints specified.
  public var gncCatId: Int32 { let o = _accessor.offset(VTOFFSET.gncCatId.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The ID of this object in the Gaia DR3 Catalog.
  ///  Example: /// Example: 89012345678901
  ///  Constraints: No constraints specified.
  public var gaiadr3CatId: Int64 { let o = _accessor.offset(VTOFFSET.gaiadr3CatId.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  ///  The ID of this object in the Hipparcos Catalog.
  ///  Example: /// Example: 12345
  ///  Constraints: No constraints specified.
  public var hipCatId: Int32 { let o = _accessor.offset(VTOFFSET.hipCatId.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The version of the catalog associated with this object.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var catVersion: String? { let o = _accessor.offset(VTOFFSET.catVersion.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var catVersionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.catVersion.v) }
  ///  Barycentric right ascension of the source in the International Celestial Reference System (ICRS) frame at the reference epoch, in degrees.
  ///  Example: /// Example: 14.43
  ///  Constraints: No constraints specified.
  public var ra: Double { let o = _accessor.offset(VTOFFSET.ra.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Uncertainty of the right ascension of the source, in milliarcseconds, at the reference epoch.
  ///  Example: /// Example: 509.466
  ///  Constraints: No constraints specified.
  public var raUnc: Double { let o = _accessor.offset(VTOFFSET.raUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Barycentric declination of the source in International Celestial Reference System (ICRS) at the reference epoch, in degrees.
  ///  Example: /// Example: 21.8
  ///  Constraints: No constraints specified.
  public var dec: Double { let o = _accessor.offset(VTOFFSET.dec.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Uncertainty of the declination of the source, in milliarcseconds, at the reference epoch.
  ///  Example: /// Example: 40.996
  ///  Constraints: No constraints specified.
  public var decUnc: Double { let o = _accessor.offset(VTOFFSET.decUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Flag indicating that the position uncertainty in either ra or dec is greater than 100 milliarcseconds.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var posUncFlag: Bool { let o = _accessor.offset(VTOFFSET.posUncFlag.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Absolute stellar parallax of the source, in milliarcseconds.
  ///  Example: /// Example: -6.8
  ///  Constraints: No constraints specified.
  public var parallax: Double { let o = _accessor.offset(VTOFFSET.parallax.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Uncertainty of the stellar parallax, in milliarcseconds.
  ///  Example: /// Example: 82.35
  ///  Constraints: No constraints specified.
  public var parallaxUnc: Double { let o = _accessor.offset(VTOFFSET.parallaxUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Proper motion in right ascension of the source, in milliarcseconds/year, at the reference epoch.
  ///  Example: /// Example: 1000.45
  ///  Constraints: No constraints specified.
  public var pmra: Double { let o = _accessor.offset(VTOFFSET.pmra.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Uncertainty of proper motion in right ascension, in milliarcseconds/year.
  ///  Example: /// Example: 5.6
  ///  Constraints: No constraints specified.
  public var pmraUnc: Double { let o = _accessor.offset(VTOFFSET.pmraUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Proper motion in declination of the source, in milliarcseconds/year, at the reference epoch.
  ///  Example: /// Example: -970.1003
  ///  Constraints: No constraints specified.
  public var pmdec: Double { let o = _accessor.offset(VTOFFSET.pmdec.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Uncertainty of proper motion in declination, in milliarcseconds/year.
  ///  Example: /// Example: 1.22
  ///  Constraints: No constraints specified.
  public var pmdecUnc: Double { let o = _accessor.offset(VTOFFSET.pmdecUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Flag indicating that the proper motion uncertainty in either ra or dec is greater than 10 milliarcseconds/year.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var pmUncFlag: Bool { let o = _accessor.offset(VTOFFSET.pmUncFlag.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Originating astrometric catalog for this object. Enum: [GAIADR3, HIPPARCOS, USNOBSC].
  ///  Example: /// Example: GAIADR3
  ///  Constraints: Minimum length = 1, Maximum length = 16
  public var astrometryOrigin: StarCatalog_Ingest_astrometryOrigin_Enum { let o = _accessor.offset(VTOFFSET.astrometryOrigin.v); return o == 0 ? .gaiadr3 : StarCatalog_Ingest_astrometryOrigin_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .gaiadr3 }
  ///  Reference epoch to which the astrometric source parameters are referred, expressed as Julian Year in Barycentric Coordinate Time (TCB).
  ///  Example: /// Example: 2016
  ///  Constraints: No constraints specified.
  public var starEpoch: Double { let o = _accessor.offset(VTOFFSET.starEpoch.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Gaia DR3 optical photometric G-band magnitude in the Vega scale.
  ///  Example: /// Example: 0.0046
  ///  Constraints: No constraints specified.
  public var gmag: Double { let o = _accessor.offset(VTOFFSET.gmag.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Gaia DR3 optical photometric G-band magnitude uncertainty in the Vega scale.
  ///  Example: /// Example: 0.00292
  ///  Constraints: No constraints specified.
  public var gmagUnc: Double { let o = _accessor.offset(VTOFFSET.gmagUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Gaia DR3 optical photometric Bp-band magnitude in the Vega scale.
  ///  Example: /// Example: 0.04559
  ///  Constraints: No constraints specified.
  public var bpmag: Double { let o = _accessor.offset(VTOFFSET.bpmag.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Gaia DR3 optical Bp-band magnitude uncertainty in the Vega scale.
  ///  Example: /// Example: 0.2227
  ///  Constraints: No constraints specified.
  public var bpmagUnc: Double { let o = _accessor.offset(VTOFFSET.bpmagUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Gaia DR3 optical Rp-band magnitude in the Vega scale.
  ///  Example: /// Example: 8.0047
  ///  Constraints: No constraints specified.
  public var rpmag: Double { let o = _accessor.offset(VTOFFSET.rpmag.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Gaia DR3 optical photometric Rp-band magnitude uncertainty in the Vega scale.
  ///  Example: /// Example: 1.233
  ///  Constraints: No constraints specified.
  public var rpmagUnc: Double { let o = _accessor.offset(VTOFFSET.rpmagUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude in the Vega scale.
  ///  Example: /// Example: 9.515
  ///  Constraints: No constraints specified.
  public var jmag: Double { let o = _accessor.offset(VTOFFSET.jmag.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude uncertainty in the Vega scale.
  ///  Example: /// Example: 7.559
  ///  Constraints: No constraints specified.
  public var jmagUnc: Double { let o = _accessor.offset(VTOFFSET.jmagUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude in the Vega scale.
  ///  Example: /// Example: 13.545
  ///  Constraints: No constraints specified.
  public var kmag: Double { let o = _accessor.offset(VTOFFSET.kmag.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude uncertainty in the Vega scale.
  ///  Example: /// Example: 0.052
  ///  Constraints: No constraints specified.
  public var kmagUnc: Double { let o = _accessor.offset(VTOFFSET.kmagUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude in the Vega scale.
  ///  Example: /// Example: 12.126
  ///  Constraints: No constraints specified.
  public var hmag: Double { let o = _accessor.offset(VTOFFSET.hmag.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude uncertainty in the Vega scale.
  ///  Example: /// Example: 5.722
  ///  Constraints: No constraints specified.
  public var hmagUnc: Double { let o = _accessor.offset(VTOFFSET.hmagUnc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Flag indicating that the source exhibits variable magnitude.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var varFlag: Bool { let o = _accessor.offset(VTOFFSET.varFlag.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Flag indicating that this is a multiple object source.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var multFlag: Bool { let o = _accessor.offset(VTOFFSET.multFlag.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The catalog ID of the nearest neighbor to this source.
  ///  Example: /// Example: 2456
  ///  Constraints: No constraints specified.
  public var neighborId: Int32 { let o = _accessor.offset(VTOFFSET.neighborId.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Flag indicating that the nearest catalog neighbor is closer than 4.6 arcseconds.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var neighborFlag: Bool { let o = _accessor.offset(VTOFFSET.neighborFlag.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Distance between source and nearest neighbor, in arcseconds.
  ///  Example: /// Example: 201.406
  ///  Constraints: No constraints specified.
  public var neighborDistance: Double { let o = _accessor.offset(VTOFFSET.neighborDistance.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Flag indicating that the photocentric shift is greater than 50 milliarcseconds.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var shiftFlag: Bool { let o = _accessor.offset(VTOFFSET.shiftFlag.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Photocentric shift caused by neighbors, in arcseconds.
  ///  Example: /// Example: 4.548
  ///  Constraints: No constraints specified.
  public var shift: Double { let o = _accessor.offset(VTOFFSET.shift.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was updated in the database.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: StarCatalog_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : StarCatalog_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startStarCatalog_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 48) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(csId: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: csId, def: 0, at: VTOFFSET.csId.p) }
  public static func add(gncCatId: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gncCatId, def: 0, at: VTOFFSET.gncCatId.p) }
  public static func add(gaiadr3CatId: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gaiadr3CatId, def: 0, at: VTOFFSET.gaiadr3CatId.p) }
  public static func add(hipCatId: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hipCatId, def: 0, at: VTOFFSET.hipCatId.p) }
  public static func add(catVersion: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: catVersion, at: VTOFFSET.catVersion.p) }
  public static func add(ra: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ra, def: 0.0, at: VTOFFSET.ra.p) }
  public static func add(raUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: raUnc, def: 0.0, at: VTOFFSET.raUnc.p) }
  public static func add(dec: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dec, def: 0.0, at: VTOFFSET.dec.p) }
  public static func add(decUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: decUnc, def: 0.0, at: VTOFFSET.decUnc.p) }
  public static func add(posUncFlag: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: posUncFlag, def: false,
   at: VTOFFSET.posUncFlag.p) }
  public static func add(parallax: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: parallax, def: 0.0, at: VTOFFSET.parallax.p) }
  public static func add(parallaxUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: parallaxUnc, def: 0.0, at: VTOFFSET.parallaxUnc.p) }
  public static func add(pmra: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pmra, def: 0.0, at: VTOFFSET.pmra.p) }
  public static func add(pmraUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pmraUnc, def: 0.0, at: VTOFFSET.pmraUnc.p) }
  public static func add(pmdec: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pmdec, def: 0.0, at: VTOFFSET.pmdec.p) }
  public static func add(pmdecUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pmdecUnc, def: 0.0, at: VTOFFSET.pmdecUnc.p) }
  public static func add(pmUncFlag: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pmUncFlag, def: false,
   at: VTOFFSET.pmUncFlag.p) }
  public static func add(astrometryOrigin: StarCatalog_Ingest_astrometryOrigin_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: astrometryOrigin.rawValue, def: 0, at: VTOFFSET.astrometryOrigin.p) }
  public static func add(starEpoch: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: starEpoch, def: 0.0, at: VTOFFSET.starEpoch.p) }
  public static func add(gmag: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gmag, def: 0.0, at: VTOFFSET.gmag.p) }
  public static func add(gmagUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gmagUnc, def: 0.0, at: VTOFFSET.gmagUnc.p) }
  public static func add(bpmag: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bpmag, def: 0.0, at: VTOFFSET.bpmag.p) }
  public static func add(bpmagUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bpmagUnc, def: 0.0, at: VTOFFSET.bpmagUnc.p) }
  public static func add(rpmag: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rpmag, def: 0.0, at: VTOFFSET.rpmag.p) }
  public static func add(rpmagUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rpmagUnc, def: 0.0, at: VTOFFSET.rpmagUnc.p) }
  public static func add(jmag: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: jmag, def: 0.0, at: VTOFFSET.jmag.p) }
  public static func add(jmagUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: jmagUnc, def: 0.0, at: VTOFFSET.jmagUnc.p) }
  public static func add(kmag: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: kmag, def: 0.0, at: VTOFFSET.kmag.p) }
  public static func add(kmagUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: kmagUnc, def: 0.0, at: VTOFFSET.kmagUnc.p) }
  public static func add(hmag: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hmag, def: 0.0, at: VTOFFSET.hmag.p) }
  public static func add(hmagUnc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hmagUnc, def: 0.0, at: VTOFFSET.hmagUnc.p) }
  public static func add(varFlag: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: varFlag, def: false,
   at: VTOFFSET.varFlag.p) }
  public static func add(multFlag: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: multFlag, def: false,
   at: VTOFFSET.multFlag.p) }
  public static func add(neighborId: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: neighborId, def: 0, at: VTOFFSET.neighborId.p) }
  public static func add(neighborFlag: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: neighborFlag, def: false,
   at: VTOFFSET.neighborFlag.p) }
  public static func add(neighborDistance: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: neighborDistance, def: 0.0, at: VTOFFSET.neighborDistance.p) }
  public static func add(shiftFlag: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: shiftFlag, def: false,
   at: VTOFFSET.shiftFlag.p) }
  public static func add(shift: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: shift, def: 0.0, at: VTOFFSET.shift.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: StarCatalog_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endStarCatalog_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createStarCatalog_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    csId: Int64 = 0,
    gncCatId: Int32 = 0,
    gaiadr3CatId: Int64 = 0,
    hipCatId: Int32 = 0,
    catVersionOffset catVersion: Offset = Offset(),
    ra: Double = 0.0,
    raUnc: Double = 0.0,
    dec: Double = 0.0,
    decUnc: Double = 0.0,
    posUncFlag: Bool = false,
    parallax: Double = 0.0,
    parallaxUnc: Double = 0.0,
    pmra: Double = 0.0,
    pmraUnc: Double = 0.0,
    pmdec: Double = 0.0,
    pmdecUnc: Double = 0.0,
    pmUncFlag: Bool = false,
    astrometryOrigin: StarCatalog_Ingest_astrometryOrigin_Enum = .gaiadr3,
    starEpoch: Double = 0.0,
    gmag: Double = 0.0,
    gmagUnc: Double = 0.0,
    bpmag: Double = 0.0,
    bpmagUnc: Double = 0.0,
    rpmag: Double = 0.0,
    rpmagUnc: Double = 0.0,
    jmag: Double = 0.0,
    jmagUnc: Double = 0.0,
    kmag: Double = 0.0,
    kmagUnc: Double = 0.0,
    hmag: Double = 0.0,
    hmagUnc: Double = 0.0,
    varFlag: Bool = false,
    multFlag: Bool = false,
    neighborId: Int32 = 0,
    neighborFlag: Bool = false,
    neighborDistance: Double = 0.0,
    shiftFlag: Bool = false,
    shift: Double = 0.0,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: StarCatalog_Ingest_dataMode_Enum = .real
  ) -> Offset {
    let __start = StarCatalog_Ingest.startStarCatalog_Ingest(&fbb)
    StarCatalog_Ingest.add(id: id, &fbb)
    StarCatalog_Ingest.add(classificationMarking: classificationMarking, &fbb)
    StarCatalog_Ingest.add(csId: csId, &fbb)
    StarCatalog_Ingest.add(gncCatId: gncCatId, &fbb)
    StarCatalog_Ingest.add(gaiadr3CatId: gaiadr3CatId, &fbb)
    StarCatalog_Ingest.add(hipCatId: hipCatId, &fbb)
    StarCatalog_Ingest.add(catVersion: catVersion, &fbb)
    StarCatalog_Ingest.add(ra: ra, &fbb)
    StarCatalog_Ingest.add(raUnc: raUnc, &fbb)
    StarCatalog_Ingest.add(dec: dec, &fbb)
    StarCatalog_Ingest.add(decUnc: decUnc, &fbb)
    StarCatalog_Ingest.add(posUncFlag: posUncFlag, &fbb)
    StarCatalog_Ingest.add(parallax: parallax, &fbb)
    StarCatalog_Ingest.add(parallaxUnc: parallaxUnc, &fbb)
    StarCatalog_Ingest.add(pmra: pmra, &fbb)
    StarCatalog_Ingest.add(pmraUnc: pmraUnc, &fbb)
    StarCatalog_Ingest.add(pmdec: pmdec, &fbb)
    StarCatalog_Ingest.add(pmdecUnc: pmdecUnc, &fbb)
    StarCatalog_Ingest.add(pmUncFlag: pmUncFlag, &fbb)
    StarCatalog_Ingest.add(astrometryOrigin: astrometryOrigin, &fbb)
    StarCatalog_Ingest.add(starEpoch: starEpoch, &fbb)
    StarCatalog_Ingest.add(gmag: gmag, &fbb)
    StarCatalog_Ingest.add(gmagUnc: gmagUnc, &fbb)
    StarCatalog_Ingest.add(bpmag: bpmag, &fbb)
    StarCatalog_Ingest.add(bpmagUnc: bpmagUnc, &fbb)
    StarCatalog_Ingest.add(rpmag: rpmag, &fbb)
    StarCatalog_Ingest.add(rpmagUnc: rpmagUnc, &fbb)
    StarCatalog_Ingest.add(jmag: jmag, &fbb)
    StarCatalog_Ingest.add(jmagUnc: jmagUnc, &fbb)
    StarCatalog_Ingest.add(kmag: kmag, &fbb)
    StarCatalog_Ingest.add(kmagUnc: kmagUnc, &fbb)
    StarCatalog_Ingest.add(hmag: hmag, &fbb)
    StarCatalog_Ingest.add(hmagUnc: hmagUnc, &fbb)
    StarCatalog_Ingest.add(varFlag: varFlag, &fbb)
    StarCatalog_Ingest.add(multFlag: multFlag, &fbb)
    StarCatalog_Ingest.add(neighborId: neighborId, &fbb)
    StarCatalog_Ingest.add(neighborFlag: neighborFlag, &fbb)
    StarCatalog_Ingest.add(neighborDistance: neighborDistance, &fbb)
    StarCatalog_Ingest.add(shiftFlag: shiftFlag, &fbb)
    StarCatalog_Ingest.add(shift: shift, &fbb)
    StarCatalog_Ingest.add(createdAt: createdAt, &fbb)
    StarCatalog_Ingest.add(createdBy: createdBy, &fbb)
    StarCatalog_Ingest.add(updatedAt: updatedAt, &fbb)
    StarCatalog_Ingest.add(updatedBy: updatedBy, &fbb)
    StarCatalog_Ingest.add(source: source, &fbb)
    StarCatalog_Ingest.add(origin: origin, &fbb)
    StarCatalog_Ingest.add(origNetwork: origNetwork, &fbb)
    StarCatalog_Ingest.add(dataMode: dataMode, &fbb)
    return StarCatalog_Ingest.endStarCatalog_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.csId.p, fieldName: "csId", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.gncCatId.p, fieldName: "gncCatId", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.gaiadr3CatId.p, fieldName: "gaiadr3CatId", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.hipCatId.p, fieldName: "hipCatId", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.catVersion.p, fieldName: "catVersion", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ra.p, fieldName: "ra", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.raUnc.p, fieldName: "raUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.dec.p, fieldName: "dec", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.decUnc.p, fieldName: "decUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.posUncFlag.p, fieldName: "posUncFlag", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.parallax.p, fieldName: "parallax", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.parallaxUnc.p, fieldName: "parallaxUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pmra.p, fieldName: "pmra", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pmraUnc.p, fieldName: "pmraUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pmdec.p, fieldName: "pmdec", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pmdecUnc.p, fieldName: "pmdecUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pmUncFlag.p, fieldName: "pmUncFlag", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.astrometryOrigin.p, fieldName: "astrometryOrigin", required: false, type: StarCatalog_Ingest_astrometryOrigin_Enum.self)
    try _v.visit(field: VTOFFSET.starEpoch.p, fieldName: "starEpoch", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gmag.p, fieldName: "gmag", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gmagUnc.p, fieldName: "gmagUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bpmag.p, fieldName: "bpmag", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bpmagUnc.p, fieldName: "bpmagUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rpmag.p, fieldName: "rpmag", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rpmagUnc.p, fieldName: "rpmagUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.jmag.p, fieldName: "jmag", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.jmagUnc.p, fieldName: "jmagUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.kmag.p, fieldName: "kmag", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.kmagUnc.p, fieldName: "kmagUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.hmag.p, fieldName: "hmag", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.hmagUnc.p, fieldName: "hmagUnc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.varFlag.p, fieldName: "varFlag", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.multFlag.p, fieldName: "multFlag", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.neighborId.p, fieldName: "neighborId", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.neighborFlag.p, fieldName: "neighborFlag", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.neighborDistance.p, fieldName: "neighborDistance", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.shiftFlag.p, fieldName: "shiftFlag", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.shift.p, fieldName: "shift", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: StarCatalog_Ingest_dataMode_Enum.self)
    _v.finish()
  }
}

