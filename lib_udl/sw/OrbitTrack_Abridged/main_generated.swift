// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum OrbitTrack_Abridged_objIdent_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  case assumedFriend = 0
  ///  Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  case friend = 1
  ///  Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  case hostile = 2
  ///  Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  case neutral = 3
  ///  Track object which has not been evaluated.
  case pending = 4
  ///  Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  case suspect = 5
  ///  Track object which has been evaluated and does not meet criteria for any standard identity.
  case unknown = 6

  public static var max: OrbitTrack_Abridged_objIdent_Enum { return .unknown }
  public static var min: OrbitTrack_Abridged_objIdent_Enum { return .assumedFriend }
}


public enum OrbitTrack_Abridged_objectType_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  No description available.
  case debris = 0
  ///  No description available.
  case manned = 1
  ///  No description available.
  case payload = 2
  ///  No description available.
  case platform = 3
  ///  No description available.
  case rocketBody = 4
  ///  No description available.
  case unknown = 5

  public static var max: OrbitTrack_Abridged_objectType_Enum { return .unknown }
  public static var min: OrbitTrack_Abridged_objectType_Enum { return .debris }
}


public enum OrbitTrack_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: OrbitTrack_Abridged_dataMode_Enum { return .exercise }
  public static var min: OrbitTrack_Abridged_dataMode_Enum { return .real }
}


///  /// Keplerian orbital elements describing an orbit for a particular on-orbit satellite and applicable sensor data aiding in the orbit prediction.
public struct OrbitTrack_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ORBI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: OrbitTrack_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idOnOrbit = 8
    case satNo = 10
    case origObjectId = 12
    case idElset = 14
    case ts = 16
    case lat = 18
    case lon = 20
    case alt = 22
    case rdfRf = 24
    case callSign = 26
    case rptNum = 28
    case objIdent = 30
    case identAmp = 32
    case satStatus = 34
    case objectType = 36
    case countryCode = 38
    case decay = 40
    case charlieLine = 42
    case aouType = 44
    case aouData = 46
    case spd = 48
    case angElev = 50
    case cntnmnt = 52
    case xref = 54
    case chXref = 56
    case amplification = 58
    case iff = 60
    case reinforced = 62
    case reduced = 64
    case hq = 66
    case dummy = 68
    case taskForce = 70
    case feint = 72
    case installation = 74
    case vehType = 76
    case trkId = 78
    case trackSensors = 80
    case createdAt = 82
    case createdBy = 84
    case source = 86
    case origin = 88
    case dataMode = 90
    case origNetwork = 92
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: ORBIT_TRACK_ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the target on-orbit object, if correlated.
  ///  Example: /// Example: 32375
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 37375
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Optional identifier provided by observation source to indicate the target on-orbit object of this track. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: L2045
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Unique identifier of the Elset associated with this object.
  ///  Example: /// Example: c715a619-8695-44d2-9e7d-effd257b4843
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idElset: String? { let o = _accessor.offset(VTOFFSET.idElset.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idElsetSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idElset.v) }
  ///  Track timestamp in ISO8601 UTC format, with microsecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  public var ts: String? { let o = _accessor.offset(VTOFFSET.ts.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ts.v) }
  ///  WGS-84 latitude of the track object subpoint, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 19.88550102
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 longitude of the track object subpoint, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 46.74596844
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Track point altitude relative to WGS-84 ellipsoid, in meters.
  ///  Example: /// Example: 585.71
  ///  Constraints: No constraints specified.
  public var alt: Double { let o = _accessor.offset(VTOFFSET.alt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Radio frequency of the track, measured in megahertz (MHz).
  ///  Example: /// Example: 1.5273
  ///  Constraints: No constraints specified.
  public var rdfRf: Double { let o = _accessor.offset(VTOFFSET.rdfRf.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  International radio call sign assigned to the track. This is an 8-character alphanumeric code.
  ///  Example: /// Example: Charlie
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var callSign: String? { let o = _accessor.offset(VTOFFSET.callSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var callSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.callSign.v) }
  ///  Report number received from the reporting source for this track.
  ///  Example: /// Example: 123
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var rptNum: String? { let o = _accessor.offset(VTOFFSET.rptNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rptNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rptNum.v) }
  ///  The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
  ///   ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  ///   FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  ///   HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  ///   NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  ///   PENDING: Track object which has not been evaluated.
  ///   SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  ///   UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  ///  Example: /// Example: FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var objIdent: OrbitTrack_Abridged_objIdent_Enum { let o = _accessor.offset(VTOFFSET.objIdent.v); return o == 0 ? .assumedFriend : OrbitTrack_Abridged_objIdent_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .assumedFriend }
  ///  Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
  ///   FAKER: Friendly track, object, or entity acting as an exercise hostile.
  ///   JOKER: Friendly track, object, or entity acting as an exercise suspect.
  ///   KILO: Friendly high-value object.
  ///   TRAVELLER: Suspect land or surface track following a recognized traffic route.
  ///   ZOMBIE: Suspect track, object, or entity of special interest.
  ///  Example: /// Example: JOKER
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var identAmp: String? { let o = _accessor.offset(VTOFFSET.identAmp.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var identAmpSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.identAmp.v) }
  ///  Status of the satellite.
  ///  Example: /// Example: INACTIVE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var satStatus: String? { let o = _accessor.offset(VTOFFSET.satStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var satStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.satStatus.v) }
  ///  The on-orbit category assigned to this track object (DEBRIS, MANNED, PAYLOAD, PLATFORM, ROCKET BODY, UNKNOWN).
  ///  Example: /// Example: PAYLOAD
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var objectType: OrbitTrack_Abridged_objectType_Enum { let o = _accessor.offset(VTOFFSET.objectType.v); return o == 0 ? .debris : OrbitTrack_Abridged_objectType_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .debris }
  ///  The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var countryCode: String? { let o = _accessor.offset(VTOFFSET.countryCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var countryCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.countryCode.v) }
  ///  Predicted change in Mean Motion (velocity) in radians/herg^2.  herg is a unit of time measure equal to 806.8120769 seconds, and is the orbital period of an imaginary satellite rotating about the Earth at zero altitude.
  ///  Example: /// Example: 0.5868
  ///  Constraints: No constraints specified.
  public var decay: Double { let o = _accessor.offset(VTOFFSET.decay.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  One-line Charlie elements set.
  ///  Example: /// Example: 323751332255940400010000003635829600010200072500098205001150
  ///  Constraints: Minimum length = 0, Maximum length = 100
  public var charlieLine: String? { let o = _accessor.offset(VTOFFSET.charlieLine.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var charlieLineSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.charlieLine.v) }
  ///  The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouData array and is required if aouData is not null. See the aouData field definition for specific information.
  ///  Example: /// Example: ELLIPSE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var aouType: String? { let o = _accessor.offset(VTOFFSET.aouType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var aouTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.aouType.v) }
  ///  Three element array representing an Area of Uncertainty (AoU).  The array element definitions and units are type specific depending on the aouType specified in this record:
  ///  ELLIPSE:
  ///     brg - orientation in degrees of the ellipse
  ///     a1 - semi-major axis in meters
  ///     a2 - semi-minor axis in meters
  ///  BEARING (BEARING BOX or MTST BEARING BOX):
  ///     brg - orientation in degrees of the bearing box 
  ///     a1 - length of bearing box in meters 
  ///     a2 - half-width of bearing box in meters 
  ///  OTHER (All other type values):
  ///     brg - line of bearing in degrees true 
  ///     a1 - bearing error in degrees 
  ///     a2 - estimated range in meters.
  ///  Example: /// Example: [34.3, 26.5, 1.2]
  ///  Constraints: No constraints specified.
  public var hasAouData: Bool { let o = _accessor.offset(VTOFFSET.aouData.v); return o == 0 ? false : true }
  public var aouDataCount: Int32 { let o = _accessor.offset(VTOFFSET.aouData.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func aouData(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.aouData.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Track object speed, in km/sec.
  ///  Example: /// Example: 15.03443
  ///  Constraints: No constraints specified.
  public var spd: Double { let o = _accessor.offset(VTOFFSET.spd.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The angle formed between the line of sight of the observer and the horizon at track timestamp, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
  ///  Example: /// Example: 15.2
  ///  Constraints: No constraints specified.
  public var angElev: Double { let o = _accessor.offset(VTOFFSET.angElev.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
  ///  Example: /// Example: 90
  ///  Constraints: No constraints specified.
  public var cntnmnt: Double { let o = _accessor.offset(VTOFFSET.cntnmnt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Source cross-reference code for the command that originated the track report.
  ///  Example: /// Example: XE
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var xref: String? { let o = _accessor.offset(VTOFFSET.xref.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var xrefSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.xref.v) }
  ///  The cross-reference code of the channel on which this track report was received, if the report came over a comms channel.
  ///  Example: /// Example: FHKX
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var chXref: String? { let o = _accessor.offset(VTOFFSET.chXref.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var chXrefSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.chXref.v) }
  ///  Free-form remarks entered for the satellite.
  ///  Example: /// Example: A note regarding this spacecraft
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var amplification: String? { let o = _accessor.offset(VTOFFSET.amplification.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var amplificationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.amplification.v) }
  ///  A text aplifier displaying IFF/SIF/AIS Identification modes and codes.
  ///  Example: /// Example: ID Mode
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var iff: String? { let o = _accessor.offset(VTOFFSET.iff.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var iffSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.iff.v) }
  ///  Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var reinforced: Bool { let o = _accessor.offset(VTOFFSET.reinforced.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Flag indicating that this track represents a reduced object or group.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var reduced: Bool { let o = _accessor.offset(VTOFFSET.reduced.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var hq: Bool { let o = _accessor.offset(VTOFFSET.hq.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var dummy: Bool { let o = _accessor.offset(VTOFFSET.dummy.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var taskForce: Bool { let o = _accessor.offset(VTOFFSET.taskForce.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var feint: Bool { let o = _accessor.offset(VTOFFSET.feint.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var installation: Bool { let o = _accessor.offset(VTOFFSET.installation.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The type of vehicle with which the device is associated.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: SPACE
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var vehType: String? { let o = _accessor.offset(VTOFFSET.vehType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var vehTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.vehType.v) }
  ///  UUID identifying the track, which should remain the same on subsequent tracks of the same object.
  ///  Example: /// Example: 3668f135-fcba-4630-a43d-e7782e11d988
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var trkId: String? { let o = _accessor.offset(VTOFFSET.trkId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var trkIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.trkId.v) }
  ///  TrackSensor Collection.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasTrackSensors: Bool { let o = _accessor.offset(VTOFFSET.trackSensors.v); return o == 0 ? false : true }
  public var trackSensorsCount: Int32 { let o = _accessor.offset(VTOFFSET.trackSensors.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func trackSensors(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.trackSensors.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2021-02-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: OrbitTrack_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : OrbitTrack_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startOrbitTrack_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 45) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(idElset: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idElset, at: VTOFFSET.idElset.p) }
  public static func add(ts: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ts, at: VTOFFSET.ts.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(alt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: alt, def: 0.0, at: VTOFFSET.alt.p) }
  public static func add(rdfRf: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rdfRf, def: 0.0, at: VTOFFSET.rdfRf.p) }
  public static func add(callSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callSign, at: VTOFFSET.callSign.p) }
  public static func add(rptNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rptNum, at: VTOFFSET.rptNum.p) }
  public static func add(objIdent: OrbitTrack_Abridged_objIdent_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: objIdent.rawValue, def: 0, at: VTOFFSET.objIdent.p) }
  public static func add(identAmp: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: identAmp, at: VTOFFSET.identAmp.p) }
  public static func add(satStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: satStatus, at: VTOFFSET.satStatus.p) }
  public static func add(objectType: OrbitTrack_Abridged_objectType_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: objectType.rawValue, def: 0, at: VTOFFSET.objectType.p) }
  public static func add(countryCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: countryCode, at: VTOFFSET.countryCode.p) }
  public static func add(decay: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: decay, def: 0.0, at: VTOFFSET.decay.p) }
  public static func add(charlieLine: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: charlieLine, at: VTOFFSET.charlieLine.p) }
  public static func add(aouType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aouType, at: VTOFFSET.aouType.p) }
  public static func addVectorOf(aouData: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aouData, at: VTOFFSET.aouData.p) }
  public static func add(spd: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: spd, def: 0.0, at: VTOFFSET.spd.p) }
  public static func add(angElev: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: angElev, def: 0.0, at: VTOFFSET.angElev.p) }
  public static func add(cntnmnt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cntnmnt, def: 0.0, at: VTOFFSET.cntnmnt.p) }
  public static func add(xref: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: xref, at: VTOFFSET.xref.p) }
  public static func add(chXref: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: chXref, at: VTOFFSET.chXref.p) }
  public static func add(amplification: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: amplification, at: VTOFFSET.amplification.p) }
  public static func add(iff: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: iff, at: VTOFFSET.iff.p) }
  public static func add(reinforced: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: reinforced, def: false,
   at: VTOFFSET.reinforced.p) }
  public static func add(reduced: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: reduced, def: false,
   at: VTOFFSET.reduced.p) }
  public static func add(hq: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: hq, def: false,
   at: VTOFFSET.hq.p) }
  public static func add(dummy: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dummy, def: false,
   at: VTOFFSET.dummy.p) }
  public static func add(taskForce: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: taskForce, def: false,
   at: VTOFFSET.taskForce.p) }
  public static func add(feint: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: feint, def: false,
   at: VTOFFSET.feint.p) }
  public static func add(installation: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: installation, def: false,
   at: VTOFFSET.installation.p) }
  public static func add(vehType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vehType, at: VTOFFSET.vehType.p) }
  public static func add(trkId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trkId, at: VTOFFSET.trkId.p) }
  public static func addVectorOf(trackSensors: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trackSensors, at: VTOFFSET.trackSensors.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: OrbitTrack_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endOrbitTrack_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createOrbitTrack_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    satNo: Int32 = 0,
    origObjectIdOffset origObjectId: Offset = Offset(),
    idElsetOffset idElset: Offset = Offset(),
    tsOffset ts: Offset = Offset(),
    lat: Double = 0.0,
    lon: Double = 0.0,
    alt: Double = 0.0,
    rdfRf: Double = 0.0,
    callSignOffset callSign: Offset = Offset(),
    rptNumOffset rptNum: Offset = Offset(),
    objIdent: OrbitTrack_Abridged_objIdent_Enum = .assumedFriend,
    identAmpOffset identAmp: Offset = Offset(),
    satStatusOffset satStatus: Offset = Offset(),
    objectType: OrbitTrack_Abridged_objectType_Enum = .debris,
    countryCodeOffset countryCode: Offset = Offset(),
    decay: Double = 0.0,
    charlieLineOffset charlieLine: Offset = Offset(),
    aouTypeOffset aouType: Offset = Offset(),
    aouDataVectorOffset aouData: Offset = Offset(),
    spd: Double = 0.0,
    angElev: Double = 0.0,
    cntnmnt: Double = 0.0,
    xrefOffset xref: Offset = Offset(),
    chXrefOffset chXref: Offset = Offset(),
    amplificationOffset amplification: Offset = Offset(),
    iffOffset iff: Offset = Offset(),
    reinforced: Bool = false,
    reduced: Bool = false,
    hq: Bool = false,
    dummy: Bool = false,
    taskForce: Bool = false,
    feint: Bool = false,
    installation: Bool = false,
    vehTypeOffset vehType: Offset = Offset(),
    trkIdOffset trkId: Offset = Offset(),
    trackSensorsVectorOffset trackSensors: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: OrbitTrack_Abridged_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = OrbitTrack_Abridged.startOrbitTrack_Abridged(&fbb)
    OrbitTrack_Abridged.add(id: id, &fbb)
    OrbitTrack_Abridged.add(classificationMarking: classificationMarking, &fbb)
    OrbitTrack_Abridged.add(idOnOrbit: idOnOrbit, &fbb)
    OrbitTrack_Abridged.add(satNo: satNo, &fbb)
    OrbitTrack_Abridged.add(origObjectId: origObjectId, &fbb)
    OrbitTrack_Abridged.add(idElset: idElset, &fbb)
    OrbitTrack_Abridged.add(ts: ts, &fbb)
    OrbitTrack_Abridged.add(lat: lat, &fbb)
    OrbitTrack_Abridged.add(lon: lon, &fbb)
    OrbitTrack_Abridged.add(alt: alt, &fbb)
    OrbitTrack_Abridged.add(rdfRf: rdfRf, &fbb)
    OrbitTrack_Abridged.add(callSign: callSign, &fbb)
    OrbitTrack_Abridged.add(rptNum: rptNum, &fbb)
    OrbitTrack_Abridged.add(objIdent: objIdent, &fbb)
    OrbitTrack_Abridged.add(identAmp: identAmp, &fbb)
    OrbitTrack_Abridged.add(satStatus: satStatus, &fbb)
    OrbitTrack_Abridged.add(objectType: objectType, &fbb)
    OrbitTrack_Abridged.add(countryCode: countryCode, &fbb)
    OrbitTrack_Abridged.add(decay: decay, &fbb)
    OrbitTrack_Abridged.add(charlieLine: charlieLine, &fbb)
    OrbitTrack_Abridged.add(aouType: aouType, &fbb)
    OrbitTrack_Abridged.addVectorOf(aouData: aouData, &fbb)
    OrbitTrack_Abridged.add(spd: spd, &fbb)
    OrbitTrack_Abridged.add(angElev: angElev, &fbb)
    OrbitTrack_Abridged.add(cntnmnt: cntnmnt, &fbb)
    OrbitTrack_Abridged.add(xref: xref, &fbb)
    OrbitTrack_Abridged.add(chXref: chXref, &fbb)
    OrbitTrack_Abridged.add(amplification: amplification, &fbb)
    OrbitTrack_Abridged.add(iff: iff, &fbb)
    OrbitTrack_Abridged.add(reinforced: reinforced, &fbb)
    OrbitTrack_Abridged.add(reduced: reduced, &fbb)
    OrbitTrack_Abridged.add(hq: hq, &fbb)
    OrbitTrack_Abridged.add(dummy: dummy, &fbb)
    OrbitTrack_Abridged.add(taskForce: taskForce, &fbb)
    OrbitTrack_Abridged.add(feint: feint, &fbb)
    OrbitTrack_Abridged.add(installation: installation, &fbb)
    OrbitTrack_Abridged.add(vehType: vehType, &fbb)
    OrbitTrack_Abridged.add(trkId: trkId, &fbb)
    OrbitTrack_Abridged.addVectorOf(trackSensors: trackSensors, &fbb)
    OrbitTrack_Abridged.add(createdAt: createdAt, &fbb)
    OrbitTrack_Abridged.add(createdBy: createdBy, &fbb)
    OrbitTrack_Abridged.add(source: source, &fbb)
    OrbitTrack_Abridged.add(origin: origin, &fbb)
    OrbitTrack_Abridged.add(dataMode: dataMode, &fbb)
    OrbitTrack_Abridged.add(origNetwork: origNetwork, &fbb)
    return OrbitTrack_Abridged.endOrbitTrack_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idElset.p, fieldName: "idElset", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ts.p, fieldName: "ts", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.alt.p, fieldName: "alt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rdfRf.p, fieldName: "rdfRf", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.callSign.p, fieldName: "callSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rptNum.p, fieldName: "rptNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objIdent.p, fieldName: "objIdent", required: false, type: OrbitTrack_Abridged_objIdent_Enum.self)
    try _v.visit(field: VTOFFSET.identAmp.p, fieldName: "identAmp", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satStatus.p, fieldName: "satStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objectType.p, fieldName: "objectType", required: false, type: OrbitTrack_Abridged_objectType_Enum.self)
    try _v.visit(field: VTOFFSET.countryCode.p, fieldName: "countryCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.decay.p, fieldName: "decay", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.charlieLine.p, fieldName: "charlieLine", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aouType.p, fieldName: "aouType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.aouData.p, fieldName: "aouData", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.spd.p, fieldName: "spd", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.angElev.p, fieldName: "angElev", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.cntnmnt.p, fieldName: "cntnmnt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.xref.p, fieldName: "xref", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.chXref.p, fieldName: "chXref", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.amplification.p, fieldName: "amplification", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.iff.p, fieldName: "iff", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reinforced.p, fieldName: "reinforced", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.reduced.p, fieldName: "reduced", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.hq.p, fieldName: "hq", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.dummy.p, fieldName: "dummy", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.taskForce.p, fieldName: "taskForce", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.feint.p, fieldName: "feint", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.installation.p, fieldName: "installation", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.vehType.p, fieldName: "vehType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.trkId.p, fieldName: "trkId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.trackSensors.p, fieldName: "trackSensors", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: OrbitTrack_Abridged_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

