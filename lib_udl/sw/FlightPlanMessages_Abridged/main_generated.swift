// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
public struct FlightPlanMessages_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "FLIG" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: FlightPlanMessages_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case severity = 4
    case wpNum = 6
    case routePath = 8
    case msgText = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The severity of the message.
  ///  Example: /// Example: SEVERE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var severity: String? { let o = _accessor.offset(VTOFFSET.severity.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var severitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.severity.v) }
  ///  The waypoint number for which the message was generated, or enter "PLAN" for a message impacting the entire route.
  ///  Example: /// Example: 20
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var wpNum: String? { let o = _accessor.offset(VTOFFSET.wpNum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var wpNumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.wpNum.v) }
  ///  The flight path that generated the message (PRIMARY, ALTERNATE, etc.).
  ///  Example: /// Example: PRIMARY
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var routePath: String? { let o = _accessor.offset(VTOFFSET.routePath.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var routePathSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.routePath.v) }
  ///  The text of the message.
  ///  Example: /// Example: Message text
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var msgText: String? { let o = _accessor.offset(VTOFFSET.msgText.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msgTextSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msgText.v) }
  public static func startFlightPlanMessages_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(severity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: severity, at: VTOFFSET.severity.p) }
  public static func add(wpNum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wpNum, at: VTOFFSET.wpNum.p) }
  public static func add(routePath: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: routePath, at: VTOFFSET.routePath.p) }
  public static func add(msgText: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msgText, at: VTOFFSET.msgText.p) }
  public static func endFlightPlanMessages_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createFlightPlanMessages_Abridged(
    _ fbb: inout FlatBufferBuilder,
    severityOffset severity: Offset = Offset(),
    wpNumOffset wpNum: Offset = Offset(),
    routePathOffset routePath: Offset = Offset(),
    msgTextOffset msgText: Offset = Offset()
  ) -> Offset {
    let __start = FlightPlanMessages_Abridged.startFlightPlanMessages_Abridged(&fbb)
    FlightPlanMessages_Abridged.add(severity: severity, &fbb)
    FlightPlanMessages_Abridged.add(wpNum: wpNum, &fbb)
    FlightPlanMessages_Abridged.add(routePath: routePath, &fbb)
    FlightPlanMessages_Abridged.add(msgText: msgText, &fbb)
    return FlightPlanMessages_Abridged.endFlightPlanMessages_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.severity.p, fieldName: "severity", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.wpNum.p, fieldName: "wpNum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.routePath.p, fieldName: "routePath", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msgText.p, fieldName: "msgText", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

