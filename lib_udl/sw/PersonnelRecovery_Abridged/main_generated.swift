// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum PersonnelRecovery_Abridged_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: PersonnelRecovery_Abridged_dataMode_Enum { return .exercise }
  public static var min: PersonnelRecovery_Abridged_dataMode_Enum { return .real }
}


///  /// Provides information concerning search and rescue operations and other situations involving personnel recovery.
public struct PersonnelRecovery_Abridged: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "PERS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: PersonnelRecovery_Abridged.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case type = 8
    case msgTime = 10
    case recovId = 12
    case idWeatherReport = 14
    case pickupLat = 16
    case pickupLon = 18
    case pickupAlt = 20
    case termInd = 22
    case authStatus = 24
    case numPersons = 26
    case milClass = 28
    case natAlliance = 30
    case natAlliance1 = 32
    case identity = 34
    case commEq1 = 36
    case commEq2 = 38
    case commEq3 = 40
    case txFreq = 42
    case rxFreq = 44
    case numNonAmbulatory = 46
    case numAmbulatory = 48
    case numAmbulatoryInjured = 50
    case survivorRadio = 52
    case survivorMessages = 54
    case beaconInd = 56
    case callSign = 58
    case textMsg = 60
    case authMethod = 62
    case objectiveAreaInfo = 64
    case executionInfo = 66
    case origNetwork = 68
    case createdAt = 70
    case createdBy = 72
    case source = 74
    case origin = 76
    case dataMode = 78
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: PERSONNEL_RECOVERY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Specifies the type of incident resulting in a recovery or evacuation mission.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Emergency Type (e.g. NO STATEMENT, DOWN AIRCRAFT, MAN IN WATER, DITCHING, BAILOUT, DISTRESSED VEHICLE, GROUND INCIDENT, MEDICAL, ISOLATED PERSONS, etc.).
  ///  Example: /// Example: MEDICAL
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  Time stamp of the original personnel recovery message, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-10-15T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var msgTime: String? { let o = _accessor.offset(VTOFFSET.msgTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msgTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msgTime.v) }
  ///  UUID identifying the Personnel Recovery  mission, which should remain the same on subsequent posts related to the same recovery mission.
  ///  Example: /// Example: RECOV-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var recovId: String? { let o = _accessor.offset(VTOFFSET.recovId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var recovIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.recovId.v) }
  ///  Unique identifier of a weather report associated with this recovery.
  ///  Example: /// Example: WEATHER_REPORT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idWeatherReport: String? { let o = _accessor.offset(VTOFFSET.idWeatherReport.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idWeatherReportSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idWeatherReport.v) }
  ///  WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 75.1234
  ///  Constraints: No constraints specified.
  public var pickupLat: Double { let o = _accessor.offset(VTOFFSET.pickupLat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 175.1234
  ///  Constraints: No constraints specified.
  public var pickupLon: Double { let o = _accessor.offset(VTOFFSET.pickupLon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point eight below ellipsoid.
  ///  Example: /// Example: 30.1234
  ///  Constraints: No constraints specified.
  public var pickupAlt: Double { let o = _accessor.offset(VTOFFSET.pickupAlt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Flag indicating the cancellation of this recovery.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var termInd: Bool { let o = _accessor.offset(VTOFFSET.termInd.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The confirmation status of the isolated personnel identity. Intended as, but not constrained to, MIL-STD-6016 J6.1 Authentication Status, Isolated Personnel (NO STATEMENT, AUTHENTICATED, NOT AUTHENTICATED, AUTHENTICATED UNDER DURESS, NOT APPLICABLE):
  ///  AUTHENTICATED:  Confirmed Friend
  ///  NOT AUTHENTICATED: Unconfirmed status
  ///  AUTHENTICATED UNDER DURESS:  Authentication comprised by hostiles.
  ///  NOT APPLICABLE:  Authentication not required.
  ///  Example: /// Example: NO STATEMENT
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var authStatus: String? { let o = _accessor.offset(VTOFFSET.authStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var authStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.authStatus.v) }
  ///  The count of persons requiring recovery.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var numPersons: Int32 { let o = _accessor.offset(VTOFFSET.numPersons.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The military classification of the personnel to be recovered. Intended as, but not constrained to, MIL-STD-6016 J6.1 Isolated Personnel Classification (NO STATEMENT, MILITARY, GOVERNMENT CIVILIAN, GOVERNMENT CONTRACTOR, CIVILIAN, MULTIPLE CLASSIFICATIONS).
  ///  Example: /// Example: CIVILIAN
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var milClass: String? { let o = _accessor.offset(VTOFFSET.milClass.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var milClassSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.milClass.v) }
  ///  The country of origin or political entity of an isolated person subject to rescue or evacuation. If natAlliance is set to 126, then natAlliance1 must be non 0. If natAlliance is any number other than 126, then natAlliance1 will be set to 0 regardless. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s).
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var natAlliance: Int32 { let o = _accessor.offset(VTOFFSET.natAlliance.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Extended country of origin or political entity of an isolated person subject to rescue or evacuation. Specify an entry here only if natAlliance is 126. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s), 1.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  public var natAlliance1: Int32 { let o = _accessor.offset(VTOFFSET.natAlliance1.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The survivor service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVIILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
  ///  Example: /// Example: NEUTRAL CIVILIAN
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var identity: String? { let o = _accessor.offset(VTOFFSET.identity.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var identitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.identity.v) }
  ///  Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
  ///  Example: /// Example: LL PHONE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var commEq1: String? { let o = _accessor.offset(VTOFFSET.commEq1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var commEq1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.commEq1.v) }
  ///  Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
  ///  Example: /// Example: LL PHONE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var commEq2: String? { let o = _accessor.offset(VTOFFSET.commEq2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var commEq2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.commEq2.v) }
  ///  Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
  ///  Example: /// Example: LL PHONE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var commEq3: String? { let o = _accessor.offset(VTOFFSET.commEq3.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var commEq3SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.commEq3.v) }
  ///  Transmit voice frequency in 5Hz increments.
  ///  Example: /// Example: 5.5
  ///  Constraints: No constraints specified.
  public var txFreq: Double { let o = _accessor.offset(VTOFFSET.txFreq.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Receive voice frequency in 5Hz increments. This field will auto populate with the txFreq value if the post element is null.
  ///  Example: /// Example: 5.5
  ///  Constraints: No constraints specified.
  public var rxFreq: Double { let o = _accessor.offset(VTOFFSET.rxFreq.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Number of littered personnel requiring recovery.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  public var numNonAmbulatory: Int32 { let o = _accessor.offset(VTOFFSET.numNonAmbulatory.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of ambulatory personnel requiring recovery.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var numAmbulatory: Int32 { let o = _accessor.offset(VTOFFSET.numAmbulatory.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of injured, but ambulatory, personnel requiring recovery.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var numAmbulatoryInjured: Int32 { let o = _accessor.offset(VTOFFSET.numAmbulatoryInjured.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Survivor radio equipment. Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Type (NO STATEMENT, PRQ7SEL, PRC90, PRC112, PRC112B B1, PRC112C, PRC112D, PRC148 MBITR, PRC148 JEM, PRC149, PRC152, ACRPLB, OTHER).
  ///  Example: /// Example: NO STATEMENT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var survivorRadio: String? { let o = _accessor.offset(VTOFFSET.survivorRadio.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var survivorRadioSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.survivorRadio.v) }
  ///  Preloaded message conveying the situation confronting the isolated person(s). Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Messages (e.g. INJURED CANT MOVE NO KNOWN HOSTILES, INJURED CANT MOVE HOSTILES NEARBY, UNINJURED CANT MOVE HOSTILES NEARBY, UNINJURED NO KNOWN HOSTILES, INJURED LIMITED MOBILITY).
  ///  Example: /// Example: UNINJURED CANT MOVE HOSTILES NEARBY
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var survivorMessages: String? { let o = _accessor.offset(VTOFFSET.survivorMessages.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var survivorMessagesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.survivorMessages.v) }
  ///  Flag indicating whether a radio identifier is reported.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var beaconInd: Bool { let o = _accessor.offset(VTOFFSET.beaconInd.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  The call sign of the personnel to be recovered.
  ///  Example: /// Example: BADGER
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var callSign: String? { let o = _accessor.offset(VTOFFSET.callSign.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var callSignSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.callSign.v) }
  ///  Additional specific messages received from survivor.
  ///  Example: /// Example: Additional message from survivor.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  public var textMsg: String? { let o = _accessor.offset(VTOFFSET.textMsg.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var textMsgSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.textMsg.v) }
  ///  Mechanism used to verify the survivors identity.
  ///  Example: /// Example: PASSPORT
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var authMethod: String? { let o = _accessor.offset(VTOFFSET.authMethod.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var authMethodSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.authMethod.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var objectiveAreaInfo: String? { let o = _accessor.offset(VTOFFSET.objectiveAreaInfo.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objectiveAreaInfoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.objectiveAreaInfo.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var executionInfo: String? { let o = _accessor.offset(VTOFFSET.executionInfo.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var executionInfoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.executionInfo.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: PersonnelRecovery_Abridged_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : PersonnelRecovery_Abridged_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startPersonnelRecovery_Abridged(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 38) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(msgTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msgTime, at: VTOFFSET.msgTime.p) }
  public static func add(recovId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: recovId, at: VTOFFSET.recovId.p) }
  public static func add(idWeatherReport: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idWeatherReport, at: VTOFFSET.idWeatherReport.p) }
  public static func add(pickupLat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pickupLat, def: 0.0, at: VTOFFSET.pickupLat.p) }
  public static func add(pickupLon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pickupLon, def: 0.0, at: VTOFFSET.pickupLon.p) }
  public static func add(pickupAlt: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pickupAlt, def: 0.0, at: VTOFFSET.pickupAlt.p) }
  public static func add(termInd: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: termInd, def: false,
   at: VTOFFSET.termInd.p) }
  public static func add(authStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: authStatus, at: VTOFFSET.authStatus.p) }
  public static func add(numPersons: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numPersons, def: 0, at: VTOFFSET.numPersons.p) }
  public static func add(milClass: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: milClass, at: VTOFFSET.milClass.p) }
  public static func add(natAlliance: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: natAlliance, def: 0, at: VTOFFSET.natAlliance.p) }
  public static func add(natAlliance1: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: natAlliance1, def: 0, at: VTOFFSET.natAlliance1.p) }
  public static func add(identity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: identity, at: VTOFFSET.identity.p) }
  public static func add(commEq1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: commEq1, at: VTOFFSET.commEq1.p) }
  public static func add(commEq2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: commEq2, at: VTOFFSET.commEq2.p) }
  public static func add(commEq3: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: commEq3, at: VTOFFSET.commEq3.p) }
  public static func add(txFreq: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: txFreq, def: 0.0, at: VTOFFSET.txFreq.p) }
  public static func add(rxFreq: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rxFreq, def: 0.0, at: VTOFFSET.rxFreq.p) }
  public static func add(numNonAmbulatory: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numNonAmbulatory, def: 0, at: VTOFFSET.numNonAmbulatory.p) }
  public static func add(numAmbulatory: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numAmbulatory, def: 0, at: VTOFFSET.numAmbulatory.p) }
  public static func add(numAmbulatoryInjured: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numAmbulatoryInjured, def: 0, at: VTOFFSET.numAmbulatoryInjured.p) }
  public static func add(survivorRadio: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: survivorRadio, at: VTOFFSET.survivorRadio.p) }
  public static func add(survivorMessages: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: survivorMessages, at: VTOFFSET.survivorMessages.p) }
  public static func add(beaconInd: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: beaconInd, def: false,
   at: VTOFFSET.beaconInd.p) }
  public static func add(callSign: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: callSign, at: VTOFFSET.callSign.p) }
  public static func add(textMsg: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: textMsg, at: VTOFFSET.textMsg.p) }
  public static func add(authMethod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: authMethod, at: VTOFFSET.authMethod.p) }
  public static func add(objectiveAreaInfo: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: objectiveAreaInfo, at: VTOFFSET.objectiveAreaInfo.p) }
  public static func add(executionInfo: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: executionInfo, at: VTOFFSET.executionInfo.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: PersonnelRecovery_Abridged_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endPersonnelRecovery_Abridged(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createPersonnelRecovery_Abridged(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    msgTimeOffset msgTime: Offset = Offset(),
    recovIdOffset recovId: Offset = Offset(),
    idWeatherReportOffset idWeatherReport: Offset = Offset(),
    pickupLat: Double = 0.0,
    pickupLon: Double = 0.0,
    pickupAlt: Double = 0.0,
    termInd: Bool = false,
    authStatusOffset authStatus: Offset = Offset(),
    numPersons: Int32 = 0,
    milClassOffset milClass: Offset = Offset(),
    natAlliance: Int32 = 0,
    natAlliance1: Int32 = 0,
    identityOffset identity: Offset = Offset(),
    commEq1Offset commEq1: Offset = Offset(),
    commEq2Offset commEq2: Offset = Offset(),
    commEq3Offset commEq3: Offset = Offset(),
    txFreq: Double = 0.0,
    rxFreq: Double = 0.0,
    numNonAmbulatory: Int32 = 0,
    numAmbulatory: Int32 = 0,
    numAmbulatoryInjured: Int32 = 0,
    survivorRadioOffset survivorRadio: Offset = Offset(),
    survivorMessagesOffset survivorMessages: Offset = Offset(),
    beaconInd: Bool = false,
    callSignOffset callSign: Offset = Offset(),
    textMsgOffset textMsg: Offset = Offset(),
    authMethodOffset authMethod: Offset = Offset(),
    objectiveAreaInfoOffset objectiveAreaInfo: Offset = Offset(),
    executionInfoOffset executionInfo: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: PersonnelRecovery_Abridged_dataMode_Enum = .real
  ) -> Offset {
    let __start = PersonnelRecovery_Abridged.startPersonnelRecovery_Abridged(&fbb)
    PersonnelRecovery_Abridged.add(id: id, &fbb)
    PersonnelRecovery_Abridged.add(classificationMarking: classificationMarking, &fbb)
    PersonnelRecovery_Abridged.add(type: type, &fbb)
    PersonnelRecovery_Abridged.add(msgTime: msgTime, &fbb)
    PersonnelRecovery_Abridged.add(recovId: recovId, &fbb)
    PersonnelRecovery_Abridged.add(idWeatherReport: idWeatherReport, &fbb)
    PersonnelRecovery_Abridged.add(pickupLat: pickupLat, &fbb)
    PersonnelRecovery_Abridged.add(pickupLon: pickupLon, &fbb)
    PersonnelRecovery_Abridged.add(pickupAlt: pickupAlt, &fbb)
    PersonnelRecovery_Abridged.add(termInd: termInd, &fbb)
    PersonnelRecovery_Abridged.add(authStatus: authStatus, &fbb)
    PersonnelRecovery_Abridged.add(numPersons: numPersons, &fbb)
    PersonnelRecovery_Abridged.add(milClass: milClass, &fbb)
    PersonnelRecovery_Abridged.add(natAlliance: natAlliance, &fbb)
    PersonnelRecovery_Abridged.add(natAlliance1: natAlliance1, &fbb)
    PersonnelRecovery_Abridged.add(identity: identity, &fbb)
    PersonnelRecovery_Abridged.add(commEq1: commEq1, &fbb)
    PersonnelRecovery_Abridged.add(commEq2: commEq2, &fbb)
    PersonnelRecovery_Abridged.add(commEq3: commEq3, &fbb)
    PersonnelRecovery_Abridged.add(txFreq: txFreq, &fbb)
    PersonnelRecovery_Abridged.add(rxFreq: rxFreq, &fbb)
    PersonnelRecovery_Abridged.add(numNonAmbulatory: numNonAmbulatory, &fbb)
    PersonnelRecovery_Abridged.add(numAmbulatory: numAmbulatory, &fbb)
    PersonnelRecovery_Abridged.add(numAmbulatoryInjured: numAmbulatoryInjured, &fbb)
    PersonnelRecovery_Abridged.add(survivorRadio: survivorRadio, &fbb)
    PersonnelRecovery_Abridged.add(survivorMessages: survivorMessages, &fbb)
    PersonnelRecovery_Abridged.add(beaconInd: beaconInd, &fbb)
    PersonnelRecovery_Abridged.add(callSign: callSign, &fbb)
    PersonnelRecovery_Abridged.add(textMsg: textMsg, &fbb)
    PersonnelRecovery_Abridged.add(authMethod: authMethod, &fbb)
    PersonnelRecovery_Abridged.add(objectiveAreaInfo: objectiveAreaInfo, &fbb)
    PersonnelRecovery_Abridged.add(executionInfo: executionInfo, &fbb)
    PersonnelRecovery_Abridged.add(origNetwork: origNetwork, &fbb)
    PersonnelRecovery_Abridged.add(createdAt: createdAt, &fbb)
    PersonnelRecovery_Abridged.add(createdBy: createdBy, &fbb)
    PersonnelRecovery_Abridged.add(source: source, &fbb)
    PersonnelRecovery_Abridged.add(origin: origin, &fbb)
    PersonnelRecovery_Abridged.add(dataMode: dataMode, &fbb)
    return PersonnelRecovery_Abridged.endPersonnelRecovery_Abridged(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msgTime.p, fieldName: "msgTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.recovId.p, fieldName: "recovId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idWeatherReport.p, fieldName: "idWeatherReport", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.pickupLat.p, fieldName: "pickupLat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pickupLon.p, fieldName: "pickupLon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pickupAlt.p, fieldName: "pickupAlt", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.termInd.p, fieldName: "termInd", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.authStatus.p, fieldName: "authStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.numPersons.p, fieldName: "numPersons", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.milClass.p, fieldName: "milClass", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.natAlliance.p, fieldName: "natAlliance", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.natAlliance1.p, fieldName: "natAlliance1", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.identity.p, fieldName: "identity", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.commEq1.p, fieldName: "commEq1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.commEq2.p, fieldName: "commEq2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.commEq3.p, fieldName: "commEq3", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.txFreq.p, fieldName: "txFreq", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.rxFreq.p, fieldName: "rxFreq", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.numNonAmbulatory.p, fieldName: "numNonAmbulatory", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numAmbulatory.p, fieldName: "numAmbulatory", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numAmbulatoryInjured.p, fieldName: "numAmbulatoryInjured", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.survivorRadio.p, fieldName: "survivorRadio", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.survivorMessages.p, fieldName: "survivorMessages", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.beaconInd.p, fieldName: "beaconInd", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.callSign.p, fieldName: "callSign", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.textMsg.p, fieldName: "textMsg", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.authMethod.p, fieldName: "authMethod", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objectiveAreaInfo.p, fieldName: "objectiveAreaInfo", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.executionInfo.p, fieldName: "executionInfo", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: PersonnelRecovery_Abridged_dataMode_Enum.self)
    _v.finish()
  }
}

