// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum SeradataRadarPayload_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: SeradataRadarPayload_Full_dataMode_Enum { return .exercise }
  public static var min: SeradataRadarPayload_Full_dataMode_Enum { return .real }
}


///  /// Details for an radar payload from  Seradata.
public struct SeradataRadarPayload_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SERA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: SeradataRadarPayload_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case spacecraftId = 8
    case idSensor = 10
    case hostedForCompanyOrgId = 12
    case manufacturerOrgId = 14
    case category = 16
    case name = 18
    case frequencyBand = 20
    case frequency = 22
    case waveLength = 24
    case bestResolution = 26
    case swathWidth = 28
    case recorderSize = 30
    case fieldOfView = 32
    case fieldOfRegard = 34
    case pointingMethod = 36
    case groundStations = 38
    case groundStationLocations = 40
    case transmitPolarization = 42
    case receivePolarization = 44
    case dutyCycle = 46
    case partnerSpacecraft = 48
    case constellationInterferometricCapability = 50
    case notes = 52
    case bandwidth = 54
    case createdAt = 56
    case createdBy = 58
    case updatedAt = 60
    case updatedBy = 62
    case source = 64
    case origin = 66
    case origNetwork = 68
    case dataMode = 70
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SERADATARADARPAYLOAD-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  ///  Example: /// Example: 12345
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var spacecraftId: String? { let o = _accessor.offset(VTOFFSET.spacecraftId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var spacecraftIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.spacecraftId.v) }
  ///  UUID of the Sensor record.
  ///  Example: /// Example: 3c1ee9a0-90ad-1d75-c47b-2414e0a77e53
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idSensor: String? { let o = _accessor.offset(VTOFFSET.idSensor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSensorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idSensor.v) }
  ///  Hosted for company/Organization Id.
  ///  Example: /// Example: hostedForCompanyOrgId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var hostedForCompanyOrgId: String? { let o = _accessor.offset(VTOFFSET.hostedForCompanyOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var hostedForCompanyOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.hostedForCompanyOrgId.v) }
  ///  Manufacturer Organization Id.
  ///  Example: /// Example: manufacturerOrgId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var manufacturerOrgId: String? { let o = _accessor.offset(VTOFFSET.manufacturerOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var manufacturerOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.manufacturerOrgId.v) }
  ///  Radar category, e.g. SAR, Surface Search, etc.
  ///  Example: /// Example: SAR
  ///  Constraints: Minimum length = 0, Maximum length = 20
  public var category: String? { let o = _accessor.offset(VTOFFSET.category.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var categorySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.category.v) }
  ///  Sensor name from Seradata, e.g. ALT (Radar Altimeter), COSI (Corea SAR Instrument), etc.
  ///  Example: /// Example: ALT
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
  ///  Example: /// Example: X
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var frequencyBand: String? { let o = _accessor.offset(VTOFFSET.frequencyBand.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var frequencyBandSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.frequencyBand.v) }
  ///  Frequency in giga hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var frequency: Double { let o = _accessor.offset(VTOFFSET.frequency.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Wave length in meters.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var waveLength: Double { let o = _accessor.offset(VTOFFSET.waveLength.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Best resolution in meters.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var bestResolution: Double { let o = _accessor.offset(VTOFFSET.bestResolution.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Swath width in kilometers.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var swathWidth: Double { let o = _accessor.offset(VTOFFSET.swathWidth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Recorder size, e.g. 256.
  ///  Example: /// Example: 256
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var recorderSize: String? { let o = _accessor.offset(VTOFFSET.recorderSize.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var recorderSizeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.recorderSize.v) }
  ///  Field of view of this radar in kilometers.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var fieldOfView: Double { let o = _accessor.offset(VTOFFSET.fieldOfView.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Field of regard of this radar in degrees.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var fieldOfRegard: Double { let o = _accessor.offset(VTOFFSET.fieldOfRegard.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Point method for this radar, e.g. Spacecraft.
  ///  Example: /// Example: Spacecraft
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var pointingMethod: String? { let o = _accessor.offset(VTOFFSET.pointingMethod.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var pointingMethodSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.pointingMethod.v) }
  ///  Ground Station info for this payload.
  ///  Example: /// Example: groundStations
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var groundStations: String? { let o = _accessor.offset(VTOFFSET.groundStations.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var groundStationsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.groundStations.v) }
  ///  Ground Station Locations for this payload.
  ///  Example: /// Example: 51,42N-44,35E
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var groundStationLocations: String? { let o = _accessor.offset(VTOFFSET.groundStationLocations.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var groundStationLocationsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.groundStationLocations.v) }
  ///  Transmit polarization, e.g. Lin Dual, Lin vert, etc.
  ///  Example: /// Example: Lin Dual
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var transmitPolarization: String? { let o = _accessor.offset(VTOFFSET.transmitPolarization.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var transmitPolarizationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.transmitPolarization.v) }
  ///  Receive polarization, e.g. Lin Dual, Lin vert, etc.
  ///  Example: /// Example: Lin Dual
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var receivePolarization: String? { let o = _accessor.offset(VTOFFSET.receivePolarization.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var receivePolarizationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.receivePolarization.v) }
  ///  Duty cycle.
  ///  Example: /// Example: dutyCycle
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var dutyCycle: String? { let o = _accessor.offset(VTOFFSET.dutyCycle.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dutyCycleSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dutyCycle.v) }
  ///  Partner seradata-spacecraft.
  ///  Example: /// Example: partnerSpacecraft
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var partnerSpacecraft: String? { let o = _accessor.offset(VTOFFSET.partnerSpacecraft.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var partnerSpacecraftSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.partnerSpacecraft.v) }
  ///  Constellation interferometric capability.
  ///  Example: /// Example: constellationInterferometricCapability
  ///  Constraints: Minimum length = 0, Maximum length = 50
  public var constellationInterferometricCapability: String? { let o = _accessor.offset(VTOFFSET.constellationInterferometricCapability.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var constellationInterferometricCapabilitySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.constellationInterferometricCapability.v) }
  ///  Payload notes.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  public var notes: String? { let o = _accessor.offset(VTOFFSET.notes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notes.v) }
  ///  Radar bandwidth in mega hertz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var bandwidth: Double { let o = _accessor.offset(VTOFFSET.bandwidth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: SeradataRadarPayload_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : SeradataRadarPayload_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startSeradataRadarPayload_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 34) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(spacecraftId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: spacecraftId, at: VTOFFSET.spacecraftId.p) }
  public static func add(idSensor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idSensor, at: VTOFFSET.idSensor.p) }
  public static func add(hostedForCompanyOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hostedForCompanyOrgId, at: VTOFFSET.hostedForCompanyOrgId.p) }
  public static func add(manufacturerOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: manufacturerOrgId, at: VTOFFSET.manufacturerOrgId.p) }
  public static func add(category: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: category, at: VTOFFSET.category.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(frequencyBand: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: frequencyBand, at: VTOFFSET.frequencyBand.p) }
  public static func add(frequency: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: frequency, def: 0.0, at: VTOFFSET.frequency.p) }
  public static func add(waveLength: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: waveLength, def: 0.0, at: VTOFFSET.waveLength.p) }
  public static func add(bestResolution: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bestResolution, def: 0.0, at: VTOFFSET.bestResolution.p) }
  public static func add(swathWidth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: swathWidth, def: 0.0, at: VTOFFSET.swathWidth.p) }
  public static func add(recorderSize: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: recorderSize, at: VTOFFSET.recorderSize.p) }
  public static func add(fieldOfView: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fieldOfView, def: 0.0, at: VTOFFSET.fieldOfView.p) }
  public static func add(fieldOfRegard: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: fieldOfRegard, def: 0.0, at: VTOFFSET.fieldOfRegard.p) }
  public static func add(pointingMethod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pointingMethod, at: VTOFFSET.pointingMethod.p) }
  public static func add(groundStations: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: groundStations, at: VTOFFSET.groundStations.p) }
  public static func add(groundStationLocations: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: groundStationLocations, at: VTOFFSET.groundStationLocations.p) }
  public static func add(transmitPolarization: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: transmitPolarization, at: VTOFFSET.transmitPolarization.p) }
  public static func add(receivePolarization: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: receivePolarization, at: VTOFFSET.receivePolarization.p) }
  public static func add(dutyCycle: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dutyCycle, at: VTOFFSET.dutyCycle.p) }
  public static func add(partnerSpacecraft: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: partnerSpacecraft, at: VTOFFSET.partnerSpacecraft.p) }
  public static func add(constellationInterferometricCapability: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: constellationInterferometricCapability, at: VTOFFSET.constellationInterferometricCapability.p) }
  public static func add(notes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notes, at: VTOFFSET.notes.p) }
  public static func add(bandwidth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bandwidth, def: 0.0, at: VTOFFSET.bandwidth.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: SeradataRadarPayload_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endSeradataRadarPayload_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSeradataRadarPayload_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    spacecraftIdOffset spacecraftId: Offset = Offset(),
    idSensorOffset idSensor: Offset = Offset(),
    hostedForCompanyOrgIdOffset hostedForCompanyOrgId: Offset = Offset(),
    manufacturerOrgIdOffset manufacturerOrgId: Offset = Offset(),
    categoryOffset category: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    frequencyBandOffset frequencyBand: Offset = Offset(),
    frequency: Double = 0.0,
    waveLength: Double = 0.0,
    bestResolution: Double = 0.0,
    swathWidth: Double = 0.0,
    recorderSizeOffset recorderSize: Offset = Offset(),
    fieldOfView: Double = 0.0,
    fieldOfRegard: Double = 0.0,
    pointingMethodOffset pointingMethod: Offset = Offset(),
    groundStationsOffset groundStations: Offset = Offset(),
    groundStationLocationsOffset groundStationLocations: Offset = Offset(),
    transmitPolarizationOffset transmitPolarization: Offset = Offset(),
    receivePolarizationOffset receivePolarization: Offset = Offset(),
    dutyCycleOffset dutyCycle: Offset = Offset(),
    partnerSpacecraftOffset partnerSpacecraft: Offset = Offset(),
    constellationInterferometricCapabilityOffset constellationInterferometricCapability: Offset = Offset(),
    notesOffset notes: Offset = Offset(),
    bandwidth: Double = 0.0,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: SeradataRadarPayload_Full_dataMode_Enum = .real
  ) -> Offset {
    let __start = SeradataRadarPayload_Full.startSeradataRadarPayload_Full(&fbb)
    SeradataRadarPayload_Full.add(id: id, &fbb)
    SeradataRadarPayload_Full.add(classificationMarking: classificationMarking, &fbb)
    SeradataRadarPayload_Full.add(spacecraftId: spacecraftId, &fbb)
    SeradataRadarPayload_Full.add(idSensor: idSensor, &fbb)
    SeradataRadarPayload_Full.add(hostedForCompanyOrgId: hostedForCompanyOrgId, &fbb)
    SeradataRadarPayload_Full.add(manufacturerOrgId: manufacturerOrgId, &fbb)
    SeradataRadarPayload_Full.add(category: category, &fbb)
    SeradataRadarPayload_Full.add(name: name, &fbb)
    SeradataRadarPayload_Full.add(frequencyBand: frequencyBand, &fbb)
    SeradataRadarPayload_Full.add(frequency: frequency, &fbb)
    SeradataRadarPayload_Full.add(waveLength: waveLength, &fbb)
    SeradataRadarPayload_Full.add(bestResolution: bestResolution, &fbb)
    SeradataRadarPayload_Full.add(swathWidth: swathWidth, &fbb)
    SeradataRadarPayload_Full.add(recorderSize: recorderSize, &fbb)
    SeradataRadarPayload_Full.add(fieldOfView: fieldOfView, &fbb)
    SeradataRadarPayload_Full.add(fieldOfRegard: fieldOfRegard, &fbb)
    SeradataRadarPayload_Full.add(pointingMethod: pointingMethod, &fbb)
    SeradataRadarPayload_Full.add(groundStations: groundStations, &fbb)
    SeradataRadarPayload_Full.add(groundStationLocations: groundStationLocations, &fbb)
    SeradataRadarPayload_Full.add(transmitPolarization: transmitPolarization, &fbb)
    SeradataRadarPayload_Full.add(receivePolarization: receivePolarization, &fbb)
    SeradataRadarPayload_Full.add(dutyCycle: dutyCycle, &fbb)
    SeradataRadarPayload_Full.add(partnerSpacecraft: partnerSpacecraft, &fbb)
    SeradataRadarPayload_Full.add(constellationInterferometricCapability: constellationInterferometricCapability, &fbb)
    SeradataRadarPayload_Full.add(notes: notes, &fbb)
    SeradataRadarPayload_Full.add(bandwidth: bandwidth, &fbb)
    SeradataRadarPayload_Full.add(createdAt: createdAt, &fbb)
    SeradataRadarPayload_Full.add(createdBy: createdBy, &fbb)
    SeradataRadarPayload_Full.add(updatedAt: updatedAt, &fbb)
    SeradataRadarPayload_Full.add(updatedBy: updatedBy, &fbb)
    SeradataRadarPayload_Full.add(source: source, &fbb)
    SeradataRadarPayload_Full.add(origin: origin, &fbb)
    SeradataRadarPayload_Full.add(origNetwork: origNetwork, &fbb)
    SeradataRadarPayload_Full.add(dataMode: dataMode, &fbb)
    return SeradataRadarPayload_Full.endSeradataRadarPayload_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.spacecraftId.p, fieldName: "spacecraftId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idSensor.p, fieldName: "idSensor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.hostedForCompanyOrgId.p, fieldName: "hostedForCompanyOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.manufacturerOrgId.p, fieldName: "manufacturerOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.category.p, fieldName: "category", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.frequencyBand.p, fieldName: "frequencyBand", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.frequency.p, fieldName: "frequency", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.waveLength.p, fieldName: "waveLength", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bestResolution.p, fieldName: "bestResolution", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.swathWidth.p, fieldName: "swathWidth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.recorderSize.p, fieldName: "recorderSize", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fieldOfView.p, fieldName: "fieldOfView", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.fieldOfRegard.p, fieldName: "fieldOfRegard", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.pointingMethod.p, fieldName: "pointingMethod", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.groundStations.p, fieldName: "groundStations", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.groundStationLocations.p, fieldName: "groundStationLocations", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.transmitPolarization.p, fieldName: "transmitPolarization", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.receivePolarization.p, fieldName: "receivePolarization", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dutyCycle.p, fieldName: "dutyCycle", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.partnerSpacecraft.p, fieldName: "partnerSpacecraft", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.constellationInterferometricCapability.p, fieldName: "constellationInterferometricCapability", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.notes.p, fieldName: "notes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.bandwidth.p, fieldName: "bandwidth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: SeradataRadarPayload_Full_dataMode_Enum.self)
    _v.finish()
  }
}

