// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum DiplomaticClearance_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: DiplomaticClearance_Full_dataMode_Enum { return .exercise }
  public static var min: DiplomaticClearance_Full_dataMode_Enum { return .real }
}


///  /// A diplomatic clearance is an authorization for an aircraft to traverse or land within a specified country.
public struct DiplomaticClearance_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "DIPL" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: DiplomaticClearance_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idMission = 8
    case externalWorksheetId = 10
    case dipWorksheetName = 12
    case firstDepDate = 14
    case docDeadline = 16
    case apacsId = 18
    case diplomaticClearanceDetails = 20
    case diplomaticClearanceRemarks = 22
    case createdAt = 24
    case createdBy = 26
    case updatedAt = 28
    case updatedBy = 30
    case sourceDl = 32
    case source = 34
    case origin = 36
    case origNetwork = 38
    case dataMode = 40
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: 25059135-4afc-45c2-b78b-d6e843dbd96d
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the Mission associated with this diplomatic clearance record.
  ///  Example: /// Example: 0dba1363-2d09-49fa-a784-4bb4cbb1674a
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idMission: String? { let o = _accessor.offset(VTOFFSET.idMission.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idMissionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idMission.v) }
  ///  Optional diplomatic clearance worksheet ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: 990ae849089e3d6cad69655324176bb6
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var externalWorksheetId: String? { let o = _accessor.offset(VTOFFSET.externalWorksheetId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var externalWorksheetIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.externalWorksheetId.v) }
  ///  Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
  ///  Example: /// Example: G2-939911-AC
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var dipWorksheetName: String? { let o = _accessor.offset(VTOFFSET.dipWorksheetName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var dipWorksheetNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.dipWorksheetName.v) }
  ///  The First Departure Date (FDD) the mission is scheduled for departure, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var firstDepDate: String? { let o = _accessor.offset(VTOFFSET.firstDepDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var firstDepDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.firstDepDate.v) }
  ///  Suspense date for the diplomatic clearance worksheet to be worked, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var docDeadline: String? { let o = _accessor.offset(VTOFFSET.docDeadline.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var docDeadlineSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.docDeadline.v) }
  ///  The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve this clearance request.
  ///  Example: /// Example: 1083034
  ///  Constraints: Minimum length = 0, Maximum length = 40
  public var apacsId: String? { let o = _accessor.offset(VTOFFSET.apacsId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var apacsIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.apacsId.v) }
  ///  Collection of diplomatic clearance details.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasDiplomaticClearanceDetails: Bool { let o = _accessor.offset(VTOFFSET.diplomaticClearanceDetails.v); return o == 0 ? false : true }
  public var diplomaticClearanceDetailsCount: Int32 { let o = _accessor.offset(VTOFFSET.diplomaticClearanceDetails.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func diplomaticClearanceDetails(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.diplomaticClearanceDetails.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Collection of diplomatic clearance remarks.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasDiplomaticClearanceRemarks: Bool { let o = _accessor.offset(VTOFFSET.diplomaticClearanceRemarks.v); return o == 0 ? false : true }
  public var diplomaticClearanceRemarksCount: Int32 { let o = _accessor.offset(VTOFFSET.diplomaticClearanceRemarks.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func diplomaticClearanceRemarks(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.diplomaticClearanceRemarks.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var sourceDl: String? { let o = _accessor.offset(VTOFFSET.sourceDl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceDlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sourceDl.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: DiplomaticClearance_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : DiplomaticClearance_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startDiplomaticClearance_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 19) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idMission: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idMission, at: VTOFFSET.idMission.p) }
  public static func add(externalWorksheetId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: externalWorksheetId, at: VTOFFSET.externalWorksheetId.p) }
  public static func add(dipWorksheetName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dipWorksheetName, at: VTOFFSET.dipWorksheetName.p) }
  public static func add(firstDepDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: firstDepDate, at: VTOFFSET.firstDepDate.p) }
  public static func add(docDeadline: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: docDeadline, at: VTOFFSET.docDeadline.p) }
  public static func add(apacsId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apacsId, at: VTOFFSET.apacsId.p) }
  public static func addVectorOf(diplomaticClearanceDetails: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: diplomaticClearanceDetails, at: VTOFFSET.diplomaticClearanceDetails.p) }
  public static func addVectorOf(diplomaticClearanceRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: diplomaticClearanceRemarks, at: VTOFFSET.diplomaticClearanceRemarks.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(sourceDl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sourceDl, at: VTOFFSET.sourceDl.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: DiplomaticClearance_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endDiplomaticClearance_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createDiplomaticClearance_Full(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idMissionOffset idMission: Offset = Offset(),
    externalWorksheetIdOffset externalWorksheetId: Offset = Offset(),
    dipWorksheetNameOffset dipWorksheetName: Offset = Offset(),
    firstDepDateOffset firstDepDate: Offset = Offset(),
    docDeadlineOffset docDeadline: Offset = Offset(),
    apacsIdOffset apacsId: Offset = Offset(),
    diplomaticClearanceDetailsVectorOffset diplomaticClearanceDetails: Offset = Offset(),
    diplomaticClearanceRemarksVectorOffset diplomaticClearanceRemarks: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    sourceDlOffset sourceDl: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: DiplomaticClearance_Full_dataMode_Enum = .real
  ) -> Offset {
    let __start = DiplomaticClearance_Full.startDiplomaticClearance_Full(&fbb)
    DiplomaticClearance_Full.add(id: id, &fbb)
    DiplomaticClearance_Full.add(classificationMarking: classificationMarking, &fbb)
    DiplomaticClearance_Full.add(idMission: idMission, &fbb)
    DiplomaticClearance_Full.add(externalWorksheetId: externalWorksheetId, &fbb)
    DiplomaticClearance_Full.add(dipWorksheetName: dipWorksheetName, &fbb)
    DiplomaticClearance_Full.add(firstDepDate: firstDepDate, &fbb)
    DiplomaticClearance_Full.add(docDeadline: docDeadline, &fbb)
    DiplomaticClearance_Full.add(apacsId: apacsId, &fbb)
    DiplomaticClearance_Full.addVectorOf(diplomaticClearanceDetails: diplomaticClearanceDetails, &fbb)
    DiplomaticClearance_Full.addVectorOf(diplomaticClearanceRemarks: diplomaticClearanceRemarks, &fbb)
    DiplomaticClearance_Full.add(createdAt: createdAt, &fbb)
    DiplomaticClearance_Full.add(createdBy: createdBy, &fbb)
    DiplomaticClearance_Full.add(updatedAt: updatedAt, &fbb)
    DiplomaticClearance_Full.add(updatedBy: updatedBy, &fbb)
    DiplomaticClearance_Full.add(sourceDl: sourceDl, &fbb)
    DiplomaticClearance_Full.add(source: source, &fbb)
    DiplomaticClearance_Full.add(origin: origin, &fbb)
    DiplomaticClearance_Full.add(origNetwork: origNetwork, &fbb)
    DiplomaticClearance_Full.add(dataMode: dataMode, &fbb)
    return DiplomaticClearance_Full.endDiplomaticClearance_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idMission.p, fieldName: "idMission", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.externalWorksheetId.p, fieldName: "externalWorksheetId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dipWorksheetName.p, fieldName: "dipWorksheetName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.firstDepDate.p, fieldName: "firstDepDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.docDeadline.p, fieldName: "docDeadline", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.apacsId.p, fieldName: "apacsId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.diplomaticClearanceDetails.p, fieldName: "diplomaticClearanceDetails", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.diplomaticClearanceRemarks.p, fieldName: "diplomaticClearanceRemarks", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sourceDl.p, fieldName: "sourceDl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: DiplomaticClearance_Full_dataMode_Enum.self)
    _v.finish()
  }
}

