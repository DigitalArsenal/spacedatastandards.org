// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum SeradataCommDetails_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: SeradataCommDetails_Ingest_dataMode_Enum { return .exercise }
  public static var min: SeradataCommDetails_Ingest_dataMode_Enum { return .real }
}


///  /// Seradata-compiled information on communications payloads.
public struct SeradataCommDetails_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "SERA" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: SeradataCommDetails_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case idComm = 6
    case classificationMarking = 8
    case spacecraftId = 10
    case band = 12
    case solidStatePowerAmp = 14
    case travelingWaveTubeAmplifier = 16
    case gatewayUplinkFrom = 18
    case gatewayUplinkTo = 20
    case gatewayDownlinkFrom = 22
    case gatewayDownlinkTo = 24
    case polarization = 26
    case eirp = 28
    case bandwidth = 30
    case numOperationalTransponders = 32
    case numSpareTransponders = 34
    case hostedForCompanyOrgId = 36
    case manufacturerOrgId = 38
    case tradeLeaseOrgId = 40
    case num36MhzEquivalentTransponders = 42
    case htsNumUserSpotBeams = 44
    case htsUserDownlinkBandwidthPerBeam = 46
    case htsUserUplinkBandwidthPerBeam = 48
    case estHtsTotalUserDownlinkBandwidthPerBeam = 50
    case estHtsTotalUserUplinkBandwidthPerBeam = 52
    case estHtsTotalCapacity = 54
    case userDownlinkFrom = 56
    case userDownlinkTo = 58
    case userUplinkFrom = 60
    case userUplinkTo = 62
    case payloadNotes = 64
    case source = 66
    case origin = 68
    case origNetwork = 70
    case dataMode = 72
    case createdAt = 74
    case createdBy = 76
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SERADATACOMMDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  UUID of the parent Comm record.
  ///  Example: /// Example: idComm
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idComm: String? { let o = _accessor.offset(VTOFFSET.idComm.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idCommSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idComm.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  ///  Example: /// Example: spacecraftId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var spacecraftId: String? { let o = _accessor.offset(VTOFFSET.spacecraftId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var spacecraftIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.spacecraftId.v) }
  ///  Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
  ///  Example: /// Example: X
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var band: String? { let o = _accessor.offset(VTOFFSET.band.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var bandSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.band.v) }
  ///  Solid state power amplifier, in Watts.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var solidStatePowerAmp: Double { let o = _accessor.offset(VTOFFSET.solidStatePowerAmp.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Comm travelingWaveTubeAmplifier in Watts.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var travelingWaveTubeAmplifier: Double { let o = _accessor.offset(VTOFFSET.travelingWaveTubeAmplifier.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Comm gatewayUplinkFrom in Ghz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var gatewayUplinkFrom: Double { let o = _accessor.offset(VTOFFSET.gatewayUplinkFrom.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Comm gatewayUplinkTo in Ghz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var gatewayUplinkTo: Double { let o = _accessor.offset(VTOFFSET.gatewayUplinkTo.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Comm gatewayDownlinkFrom in Ghz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var gatewayDownlinkFrom: Double { let o = _accessor.offset(VTOFFSET.gatewayDownlinkFrom.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Comm gatewayDownlinkTo in Ghz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var gatewayDownlinkTo: Double { let o = _accessor.offset(VTOFFSET.gatewayDownlinkTo.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Comm polarization.
  ///  Example: /// Example: polarization
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var polarization: String? { let o = _accessor.offset(VTOFFSET.polarization.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var polarizationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.polarization.v) }
  ///  Effective isotropic radiated power in dB.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var eirp: Double { let o = _accessor.offset(VTOFFSET.eirp.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Comm bandwidth in Mhz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var bandwidth: Double { let o = _accessor.offset(VTOFFSET.bandwidth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Comm numOperationalTransponders.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var numOperationalTransponders: Int32 { let o = _accessor.offset(VTOFFSET.numOperationalTransponders.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Comm numSpareTransponders.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var numSpareTransponders: Int32 { let o = _accessor.offset(VTOFFSET.numSpareTransponders.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Comm hostedForCompanyOrgId.
  ///  Example: /// Example: hostedForCompanyOrgId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var hostedForCompanyOrgId: String? { let o = _accessor.offset(VTOFFSET.hostedForCompanyOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var hostedForCompanyOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.hostedForCompanyOrgId.v) }
  ///  Comm manufacturerOrgId.
  ///  Example: /// Example: manufacturerOrgId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var manufacturerOrgId: String? { let o = _accessor.offset(VTOFFSET.manufacturerOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var manufacturerOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.manufacturerOrgId.v) }
  ///  Comm tradeLeaseOrgId.
  ///  Example: /// Example: tradeLeaseOrgId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var tradeLeaseOrgId: String? { let o = _accessor.offset(VTOFFSET.tradeLeaseOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tradeLeaseOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tradeLeaseOrgId.v) }
  ///  Comm num36MhzEquivalentTransponders.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var num36MhzEquivalentTransponders: Int32 { let o = _accessor.offset(VTOFFSET.num36MhzEquivalentTransponders.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Comm htsNumUserSpotBeams.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var htsNumUserSpotBeams: Int32 { let o = _accessor.offset(VTOFFSET.htsNumUserSpotBeams.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Comm htsUserDownlinkBandwidthPerBeam in Mhz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var htsUserDownlinkBandwidthPerBeam: Double { let o = _accessor.offset(VTOFFSET.htsUserDownlinkBandwidthPerBeam.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Comm htsUserUplinkBandwidthPerBeam in Mhz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var htsUserUplinkBandwidthPerBeam: Double { let o = _accessor.offset(VTOFFSET.htsUserUplinkBandwidthPerBeam.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Comm estimated HtsTotalUserDownlinkBandwidthPerBeam in Mhz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var estHtsTotalUserDownlinkBandwidthPerBeam: Double { let o = _accessor.offset(VTOFFSET.estHtsTotalUserDownlinkBandwidthPerBeam.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Comm estimated HtsTotalUserUplinkBandwidthPerBeam in Mhz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var estHtsTotalUserUplinkBandwidthPerBeam: Double { let o = _accessor.offset(VTOFFSET.estHtsTotalUserUplinkBandwidthPerBeam.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Comm estimated HtsTotalCapacity in Gbps.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var estHtsTotalCapacity: Double { let o = _accessor.offset(VTOFFSET.estHtsTotalCapacity.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Comm userDownlinkFrom in Ghz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var userDownlinkFrom: Double { let o = _accessor.offset(VTOFFSET.userDownlinkFrom.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Comm userDownlinkTo in Ghz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var userDownlinkTo: Double { let o = _accessor.offset(VTOFFSET.userDownlinkTo.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Comm userUplinkFrom in Ghz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var userUplinkFrom: Double { let o = _accessor.offset(VTOFFSET.userUplinkFrom.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Comm userUplinkTo in Ghz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  public var userUplinkTo: Double { let o = _accessor.offset(VTOFFSET.userUplinkTo.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Payload notes.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  public var payloadNotes: String? { let o = _accessor.offset(VTOFFSET.payloadNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var payloadNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.payloadNotes.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: SeradataCommDetails_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : SeradataCommDetails_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  public static func startSeradataCommDetails_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 37) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(idComm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idComm, at: VTOFFSET.idComm.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(spacecraftId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: spacecraftId, at: VTOFFSET.spacecraftId.p) }
  public static func add(band: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: band, at: VTOFFSET.band.p) }
  public static func add(solidStatePowerAmp: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: solidStatePowerAmp, def: 0.0, at: VTOFFSET.solidStatePowerAmp.p) }
  public static func add(travelingWaveTubeAmplifier: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: travelingWaveTubeAmplifier, def: 0.0, at: VTOFFSET.travelingWaveTubeAmplifier.p) }
  public static func add(gatewayUplinkFrom: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gatewayUplinkFrom, def: 0.0, at: VTOFFSET.gatewayUplinkFrom.p) }
  public static func add(gatewayUplinkTo: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gatewayUplinkTo, def: 0.0, at: VTOFFSET.gatewayUplinkTo.p) }
  public static func add(gatewayDownlinkFrom: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gatewayDownlinkFrom, def: 0.0, at: VTOFFSET.gatewayDownlinkFrom.p) }
  public static func add(gatewayDownlinkTo: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gatewayDownlinkTo, def: 0.0, at: VTOFFSET.gatewayDownlinkTo.p) }
  public static func add(polarization: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: polarization, at: VTOFFSET.polarization.p) }
  public static func add(eirp: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: eirp, def: 0.0, at: VTOFFSET.eirp.p) }
  public static func add(bandwidth: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: bandwidth, def: 0.0, at: VTOFFSET.bandwidth.p) }
  public static func add(numOperationalTransponders: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numOperationalTransponders, def: 0, at: VTOFFSET.numOperationalTransponders.p) }
  public static func add(numSpareTransponders: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: numSpareTransponders, def: 0, at: VTOFFSET.numSpareTransponders.p) }
  public static func add(hostedForCompanyOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hostedForCompanyOrgId, at: VTOFFSET.hostedForCompanyOrgId.p) }
  public static func add(manufacturerOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: manufacturerOrgId, at: VTOFFSET.manufacturerOrgId.p) }
  public static func add(tradeLeaseOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tradeLeaseOrgId, at: VTOFFSET.tradeLeaseOrgId.p) }
  public static func add(num36MhzEquivalentTransponders: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: num36MhzEquivalentTransponders, def: 0, at: VTOFFSET.num36MhzEquivalentTransponders.p) }
  public static func add(htsNumUserSpotBeams: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: htsNumUserSpotBeams, def: 0, at: VTOFFSET.htsNumUserSpotBeams.p) }
  public static func add(htsUserDownlinkBandwidthPerBeam: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: htsUserDownlinkBandwidthPerBeam, def: 0.0, at: VTOFFSET.htsUserDownlinkBandwidthPerBeam.p) }
  public static func add(htsUserUplinkBandwidthPerBeam: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: htsUserUplinkBandwidthPerBeam, def: 0.0, at: VTOFFSET.htsUserUplinkBandwidthPerBeam.p) }
  public static func add(estHtsTotalUserDownlinkBandwidthPerBeam: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: estHtsTotalUserDownlinkBandwidthPerBeam, def: 0.0, at: VTOFFSET.estHtsTotalUserDownlinkBandwidthPerBeam.p) }
  public static func add(estHtsTotalUserUplinkBandwidthPerBeam: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: estHtsTotalUserUplinkBandwidthPerBeam, def: 0.0, at: VTOFFSET.estHtsTotalUserUplinkBandwidthPerBeam.p) }
  public static func add(estHtsTotalCapacity: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: estHtsTotalCapacity, def: 0.0, at: VTOFFSET.estHtsTotalCapacity.p) }
  public static func add(userDownlinkFrom: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: userDownlinkFrom, def: 0.0, at: VTOFFSET.userDownlinkFrom.p) }
  public static func add(userDownlinkTo: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: userDownlinkTo, def: 0.0, at: VTOFFSET.userDownlinkTo.p) }
  public static func add(userUplinkFrom: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: userUplinkFrom, def: 0.0, at: VTOFFSET.userUplinkFrom.p) }
  public static func add(userUplinkTo: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: userUplinkTo, def: 0.0, at: VTOFFSET.userUplinkTo.p) }
  public static func add(payloadNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: payloadNotes, at: VTOFFSET.payloadNotes.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func add(dataMode: SeradataCommDetails_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func endSeradataCommDetails_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSeradataCommDetails_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    idCommOffset idComm: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    spacecraftIdOffset spacecraftId: Offset = Offset(),
    bandOffset band: Offset = Offset(),
    solidStatePowerAmp: Double = 0.0,
    travelingWaveTubeAmplifier: Double = 0.0,
    gatewayUplinkFrom: Double = 0.0,
    gatewayUplinkTo: Double = 0.0,
    gatewayDownlinkFrom: Double = 0.0,
    gatewayDownlinkTo: Double = 0.0,
    polarizationOffset polarization: Offset = Offset(),
    eirp: Double = 0.0,
    bandwidth: Double = 0.0,
    numOperationalTransponders: Int32 = 0,
    numSpareTransponders: Int32 = 0,
    hostedForCompanyOrgIdOffset hostedForCompanyOrgId: Offset = Offset(),
    manufacturerOrgIdOffset manufacturerOrgId: Offset = Offset(),
    tradeLeaseOrgIdOffset tradeLeaseOrgId: Offset = Offset(),
    num36MhzEquivalentTransponders: Int32 = 0,
    htsNumUserSpotBeams: Int32 = 0,
    htsUserDownlinkBandwidthPerBeam: Double = 0.0,
    htsUserUplinkBandwidthPerBeam: Double = 0.0,
    estHtsTotalUserDownlinkBandwidthPerBeam: Double = 0.0,
    estHtsTotalUserUplinkBandwidthPerBeam: Double = 0.0,
    estHtsTotalCapacity: Double = 0.0,
    userDownlinkFrom: Double = 0.0,
    userDownlinkTo: Double = 0.0,
    userUplinkFrom: Double = 0.0,
    userUplinkTo: Double = 0.0,
    payloadNotesOffset payloadNotes: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset(),
    dataMode: SeradataCommDetails_Ingest_dataMode_Enum = .real,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset()
  ) -> Offset {
    let __start = SeradataCommDetails_Ingest.startSeradataCommDetails_Ingest(&fbb)
    SeradataCommDetails_Ingest.add(id: id, &fbb)
    SeradataCommDetails_Ingest.add(idComm: idComm, &fbb)
    SeradataCommDetails_Ingest.add(classificationMarking: classificationMarking, &fbb)
    SeradataCommDetails_Ingest.add(spacecraftId: spacecraftId, &fbb)
    SeradataCommDetails_Ingest.add(band: band, &fbb)
    SeradataCommDetails_Ingest.add(solidStatePowerAmp: solidStatePowerAmp, &fbb)
    SeradataCommDetails_Ingest.add(travelingWaveTubeAmplifier: travelingWaveTubeAmplifier, &fbb)
    SeradataCommDetails_Ingest.add(gatewayUplinkFrom: gatewayUplinkFrom, &fbb)
    SeradataCommDetails_Ingest.add(gatewayUplinkTo: gatewayUplinkTo, &fbb)
    SeradataCommDetails_Ingest.add(gatewayDownlinkFrom: gatewayDownlinkFrom, &fbb)
    SeradataCommDetails_Ingest.add(gatewayDownlinkTo: gatewayDownlinkTo, &fbb)
    SeradataCommDetails_Ingest.add(polarization: polarization, &fbb)
    SeradataCommDetails_Ingest.add(eirp: eirp, &fbb)
    SeradataCommDetails_Ingest.add(bandwidth: bandwidth, &fbb)
    SeradataCommDetails_Ingest.add(numOperationalTransponders: numOperationalTransponders, &fbb)
    SeradataCommDetails_Ingest.add(numSpareTransponders: numSpareTransponders, &fbb)
    SeradataCommDetails_Ingest.add(hostedForCompanyOrgId: hostedForCompanyOrgId, &fbb)
    SeradataCommDetails_Ingest.add(manufacturerOrgId: manufacturerOrgId, &fbb)
    SeradataCommDetails_Ingest.add(tradeLeaseOrgId: tradeLeaseOrgId, &fbb)
    SeradataCommDetails_Ingest.add(num36MhzEquivalentTransponders: num36MhzEquivalentTransponders, &fbb)
    SeradataCommDetails_Ingest.add(htsNumUserSpotBeams: htsNumUserSpotBeams, &fbb)
    SeradataCommDetails_Ingest.add(htsUserDownlinkBandwidthPerBeam: htsUserDownlinkBandwidthPerBeam, &fbb)
    SeradataCommDetails_Ingest.add(htsUserUplinkBandwidthPerBeam: htsUserUplinkBandwidthPerBeam, &fbb)
    SeradataCommDetails_Ingest.add(estHtsTotalUserDownlinkBandwidthPerBeam: estHtsTotalUserDownlinkBandwidthPerBeam, &fbb)
    SeradataCommDetails_Ingest.add(estHtsTotalUserUplinkBandwidthPerBeam: estHtsTotalUserUplinkBandwidthPerBeam, &fbb)
    SeradataCommDetails_Ingest.add(estHtsTotalCapacity: estHtsTotalCapacity, &fbb)
    SeradataCommDetails_Ingest.add(userDownlinkFrom: userDownlinkFrom, &fbb)
    SeradataCommDetails_Ingest.add(userDownlinkTo: userDownlinkTo, &fbb)
    SeradataCommDetails_Ingest.add(userUplinkFrom: userUplinkFrom, &fbb)
    SeradataCommDetails_Ingest.add(userUplinkTo: userUplinkTo, &fbb)
    SeradataCommDetails_Ingest.add(payloadNotes: payloadNotes, &fbb)
    SeradataCommDetails_Ingest.add(source: source, &fbb)
    SeradataCommDetails_Ingest.add(origin: origin, &fbb)
    SeradataCommDetails_Ingest.add(origNetwork: origNetwork, &fbb)
    SeradataCommDetails_Ingest.add(dataMode: dataMode, &fbb)
    SeradataCommDetails_Ingest.add(createdAt: createdAt, &fbb)
    SeradataCommDetails_Ingest.add(createdBy: createdBy, &fbb)
    return SeradataCommDetails_Ingest.endSeradataCommDetails_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idComm.p, fieldName: "idComm", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.spacecraftId.p, fieldName: "spacecraftId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.band.p, fieldName: "band", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.solidStatePowerAmp.p, fieldName: "solidStatePowerAmp", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.travelingWaveTubeAmplifier.p, fieldName: "travelingWaveTubeAmplifier", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gatewayUplinkFrom.p, fieldName: "gatewayUplinkFrom", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gatewayUplinkTo.p, fieldName: "gatewayUplinkTo", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gatewayDownlinkFrom.p, fieldName: "gatewayDownlinkFrom", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.gatewayDownlinkTo.p, fieldName: "gatewayDownlinkTo", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.polarization.p, fieldName: "polarization", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eirp.p, fieldName: "eirp", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.bandwidth.p, fieldName: "bandwidth", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.numOperationalTransponders.p, fieldName: "numOperationalTransponders", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.numSpareTransponders.p, fieldName: "numSpareTransponders", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.hostedForCompanyOrgId.p, fieldName: "hostedForCompanyOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.manufacturerOrgId.p, fieldName: "manufacturerOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.tradeLeaseOrgId.p, fieldName: "tradeLeaseOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.num36MhzEquivalentTransponders.p, fieldName: "num36MhzEquivalentTransponders", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.htsNumUserSpotBeams.p, fieldName: "htsNumUserSpotBeams", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.htsUserDownlinkBandwidthPerBeam.p, fieldName: "htsUserDownlinkBandwidthPerBeam", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.htsUserUplinkBandwidthPerBeam.p, fieldName: "htsUserUplinkBandwidthPerBeam", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.estHtsTotalUserDownlinkBandwidthPerBeam.p, fieldName: "estHtsTotalUserDownlinkBandwidthPerBeam", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.estHtsTotalUserUplinkBandwidthPerBeam.p, fieldName: "estHtsTotalUserUplinkBandwidthPerBeam", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.estHtsTotalCapacity.p, fieldName: "estHtsTotalCapacity", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.userDownlinkFrom.p, fieldName: "userDownlinkFrom", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.userDownlinkTo.p, fieldName: "userDownlinkTo", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.userUplinkFrom.p, fieldName: "userUplinkFrom", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.userUplinkTo.p, fieldName: "userUplinkTo", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.payloadNotes.p, fieldName: "payloadNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: SeradataCommDetails_Ingest_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

