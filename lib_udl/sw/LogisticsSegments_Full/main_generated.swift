// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Remarks associated with this LogisticsSupport record.
public struct LogisticsSegments_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "LOGI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: LogisticsSegments_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case segmentNumber = 4
    case modeCode = 6
    case missionType = 8
    case idMission = 10
    case extMissionId = 12
    case missionNumber = 14
    case itin = 16
    case segTailNumber = 18
    case segAircraftMds = 20
    case departureIcao = 22
    case segActDepTime = 24
    case arrivalIcao = 26
    case segActArrTime = 28
    case segEstDepTime = 30
    case segEstArrTime = 32
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Used to sequence the segments in the transportation plan.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var segmentNumber: Int32 { let o = _accessor.offset(VTOFFSET.segmentNumber.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Transportation mode.  AMC airlift, Commercial airlift, Other, or surface transportation.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 1, Maximum length = 1
  public var modeCode: String? { let o = _accessor.offset(VTOFFSET.modeCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var modeCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.modeCode.v) }
  ///  The type of mission (e.g. SAAM, CHNL, etc.).
  ///  Example: /// Example: SAAM
  ///  Constraints: Minimum length = 0, Maximum length = 6
  public var missionType: String? { let o = _accessor.offset(VTOFFSET.missionType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var missionTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.missionType.v) }
  ///  The unique identifier of the mission to which this logistics record is assigned.
  ///  Example: /// Example: EXAMPLE-UUID
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var idMission: String? { let o = _accessor.offset(VTOFFSET.idMission.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idMissionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idMission.v) }
  ///  The GDSS mission ID for this segment.
  ///  Example: /// Example: 2001101RF01202307062205
  ///  Constraints: Minimum length = 0, Maximum length = 24
  public var extMissionId: String? { let o = _accessor.offset(VTOFFSET.extMissionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var extMissionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.extMissionId.v) }
  ///  The user generated identifier for an air mission subgroup.
  ///  Example: /// Example: TAM308901196
  ///  Constraints: Minimum length = 0, Maximum length = 12
  public var missionNumber: String? { let o = _accessor.offset(VTOFFSET.missionNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var missionNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.missionNumber.v) }
  ///  Start air mission itinerary point identifier.
  ///  Example: /// Example: 200
  ///  Constraints: No constraints specified.
  public var itin: Int32 { let o = _accessor.offset(VTOFFSET.itin.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  The identifier that represents a specific aircraft within an aircraft type.
  ///  Example: /// Example: N819AX
  ///  Constraints: Minimum length = 0, Maximum length = 7
  public var segTailNumber: String? { let o = _accessor.offset(VTOFFSET.segTailNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var segTailNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.segTailNumber.v) }
  ///  The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  ///  Example: /// Example: B7772E
  ///  Constraints: Minimum length = 0, Maximum length = 30
  public var segAircraftMds: String? { let o = _accessor.offset(VTOFFSET.segAircraftMds.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var segAircraftMdsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.segAircraftMds.v) }
  ///  Airport ICAO departure code.
  ///  Example: /// Example: PHIK
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var departureIcao: String? { let o = _accessor.offset(VTOFFSET.departureIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var departureIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.departureIcao.v) }
  ///  Actual departure time to the segment destination, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-17T19:20:00.123Z
  ///  Constraints: No constraints specified.
  public var segActDepTime: String? { let o = _accessor.offset(VTOFFSET.segActDepTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var segActDepTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.segActDepTime.v) }
  ///  Airport ICAO arrival code.
  ///  Example: /// Example: YBCS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var arrivalIcao: String? { let o = _accessor.offset(VTOFFSET.arrivalIcao.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var arrivalIcaoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.arrivalIcao.v) }
  ///  Actual arrival time to segment destination, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-17T19:20:00.123Z
  ///  Constraints: No constraints specified.
  public var segActArrTime: String? { let o = _accessor.offset(VTOFFSET.segActArrTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var segActArrTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.segActArrTime.v) }
  ///  GC. LGTPS_C_DT_EST_DEP.  GD2: Estimated departure time from the segment origin. Only supplied when the segment is not attached to a Mission, otherwise the ETD is derived from the Mission segment origin point. This datetime should be in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-17T19:20:00.123Z
  ///  Constraints: No constraints specified.
  public var segEstDepTime: String? { let o = _accessor.offset(VTOFFSET.segEstDepTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var segEstDepTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.segEstDepTime.v) }
  ///  GC. LGTPS_C_DT_EST_ARR.  GD2: Estimated arrival time to the segment destination. Only supplied when the segment is not attached to a Mission, otherwise the ETA is derived from the Mission segment destination point. This datetime should be in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-07-17T19:20:00.123Z
  ///  Constraints: No constraints specified.
  public var segEstArrTime: String? { let o = _accessor.offset(VTOFFSET.segEstArrTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var segEstArrTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.segEstArrTime.v) }
  public static func startLogisticsSegments_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 15) }
  public static func add(segmentNumber: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: segmentNumber, def: 0, at: VTOFFSET.segmentNumber.p) }
  public static func add(modeCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: modeCode, at: VTOFFSET.modeCode.p) }
  public static func add(missionType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: missionType, at: VTOFFSET.missionType.p) }
  public static func add(idMission: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idMission, at: VTOFFSET.idMission.p) }
  public static func add(extMissionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: extMissionId, at: VTOFFSET.extMissionId.p) }
  public static func add(missionNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: missionNumber, at: VTOFFSET.missionNumber.p) }
  public static func add(itin: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: itin, def: 0, at: VTOFFSET.itin.p) }
  public static func add(segTailNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: segTailNumber, at: VTOFFSET.segTailNumber.p) }
  public static func add(segAircraftMds: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: segAircraftMds, at: VTOFFSET.segAircraftMds.p) }
  public static func add(departureIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: departureIcao, at: VTOFFSET.departureIcao.p) }
  public static func add(segActDepTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: segActDepTime, at: VTOFFSET.segActDepTime.p) }
  public static func add(arrivalIcao: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: arrivalIcao, at: VTOFFSET.arrivalIcao.p) }
  public static func add(segActArrTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: segActArrTime, at: VTOFFSET.segActArrTime.p) }
  public static func add(segEstDepTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: segEstDepTime, at: VTOFFSET.segEstDepTime.p) }
  public static func add(segEstArrTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: segEstArrTime, at: VTOFFSET.segEstArrTime.p) }
  public static func endLogisticsSegments_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createLogisticsSegments_Full(
    _ fbb: inout FlatBufferBuilder,
    segmentNumber: Int32 = 0,
    modeCodeOffset modeCode: Offset = Offset(),
    missionTypeOffset missionType: Offset = Offset(),
    idMissionOffset idMission: Offset = Offset(),
    extMissionIdOffset extMissionId: Offset = Offset(),
    missionNumberOffset missionNumber: Offset = Offset(),
    itin: Int32 = 0,
    segTailNumberOffset segTailNumber: Offset = Offset(),
    segAircraftMdsOffset segAircraftMds: Offset = Offset(),
    departureIcaoOffset departureIcao: Offset = Offset(),
    segActDepTimeOffset segActDepTime: Offset = Offset(),
    arrivalIcaoOffset arrivalIcao: Offset = Offset(),
    segActArrTimeOffset segActArrTime: Offset = Offset(),
    segEstDepTimeOffset segEstDepTime: Offset = Offset(),
    segEstArrTimeOffset segEstArrTime: Offset = Offset()
  ) -> Offset {
    let __start = LogisticsSegments_Full.startLogisticsSegments_Full(&fbb)
    LogisticsSegments_Full.add(segmentNumber: segmentNumber, &fbb)
    LogisticsSegments_Full.add(modeCode: modeCode, &fbb)
    LogisticsSegments_Full.add(missionType: missionType, &fbb)
    LogisticsSegments_Full.add(idMission: idMission, &fbb)
    LogisticsSegments_Full.add(extMissionId: extMissionId, &fbb)
    LogisticsSegments_Full.add(missionNumber: missionNumber, &fbb)
    LogisticsSegments_Full.add(itin: itin, &fbb)
    LogisticsSegments_Full.add(segTailNumber: segTailNumber, &fbb)
    LogisticsSegments_Full.add(segAircraftMds: segAircraftMds, &fbb)
    LogisticsSegments_Full.add(departureIcao: departureIcao, &fbb)
    LogisticsSegments_Full.add(segActDepTime: segActDepTime, &fbb)
    LogisticsSegments_Full.add(arrivalIcao: arrivalIcao, &fbb)
    LogisticsSegments_Full.add(segActArrTime: segActArrTime, &fbb)
    LogisticsSegments_Full.add(segEstDepTime: segEstDepTime, &fbb)
    LogisticsSegments_Full.add(segEstArrTime: segEstArrTime, &fbb)
    return LogisticsSegments_Full.endLogisticsSegments_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.segmentNumber.p, fieldName: "segmentNumber", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.modeCode.p, fieldName: "modeCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.missionType.p, fieldName: "missionType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idMission.p, fieldName: "idMission", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.extMissionId.p, fieldName: "extMissionId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.missionNumber.p, fieldName: "missionNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.itin.p, fieldName: "itin", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.segTailNumber.p, fieldName: "segTailNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.segAircraftMds.p, fieldName: "segAircraftMds", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.departureIcao.p, fieldName: "departureIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.segActDepTime.p, fieldName: "segActDepTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.arrivalIcao.p, fieldName: "arrivalIcao", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.segActArrTime.p, fieldName: "segActArrTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.segEstDepTime.p, fieldName: "segEstDepTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.segEstArrTime.p, fieldName: "segEstArrTime", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

