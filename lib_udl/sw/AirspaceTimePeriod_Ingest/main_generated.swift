// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// The timePeriod set describes the effective datetime for a given airspace control means.
public struct AirspaceTimePeriod_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "AIRS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: AirspaceTimePeriod_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case timeMode = 4
    case timeStart = 6
    case timeEnd = 8
    case intFreq = 10
    case intDur = 12
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The airspace time code associated with the ACO. Can be DISCRETE, a fixed time block, or INTERVAL, a repeating time block.
  ///  Example: /// Example: DISCRETE
  ///  Constraints: Minimum length = 0, Maximum length = 8
  public var timeMode: String? { let o = _accessor.offset(VTOFFSET.timeMode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timeModeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timeMode.v) }
  ///  The start time designating that the airspace control order is active.
  ///  Example: /// Example: 141325ZFEB2002
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var timeStart: String? { let o = _accessor.offset(VTOFFSET.timeStart.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timeStartSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timeStart.v) }
  ///  The end time designating that the airspace control order is no longer active. Can contain datetime information or a stop time qualifier code, such as AFTER, NET, UFN, etc.
  ///  Example: /// Example: 141325ZFEB2002
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var timeEnd: String? { let o = _accessor.offset(VTOFFSET.timeEnd.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timeEndSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timeEnd.v) }
  ///  Mandatory if timeMode is INTERVAL. Can be on of the interval frequency codes, such as BIWEEKLY, DAILY, YEARLY, etc.
  ///  Example: /// Example: ['WEEKLY']
  ///  Constraints: No constraints specified.
  public var hasIntFreq: Bool { let o = _accessor.offset(VTOFFSET.intFreq.v); return o == 0 ? false : true }
  public var intFreqCount: Int32 { let o = _accessor.offset(VTOFFSET.intFreq.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func intFreq(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.intFreq.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Mandatory if timeMode is INTERVAL. Can be a numerical multiplier on an interval frequency code, a stop time qualifier code such as AFTER, NET, UFN, etc, or a datetime like string.
  ///  Example: /// Example: ['65WK']
  ///  Constraints: No constraints specified.
  public var hasIntDur: Bool { let o = _accessor.offset(VTOFFSET.intDur.v); return o == 0 ? false : true }
  public var intDurCount: Int32 { let o = _accessor.offset(VTOFFSET.intDur.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func intDur(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.intDur.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startAirspaceTimePeriod_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 5) }
  public static func add(timeMode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timeMode, at: VTOFFSET.timeMode.p) }
  public static func add(timeStart: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timeStart, at: VTOFFSET.timeStart.p) }
  public static func add(timeEnd: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timeEnd, at: VTOFFSET.timeEnd.p) }
  public static func addVectorOf(intFreq: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: intFreq, at: VTOFFSET.intFreq.p) }
  public static func addVectorOf(intDur: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: intDur, at: VTOFFSET.intDur.p) }
  public static func endAirspaceTimePeriod_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAirspaceTimePeriod_Ingest(
    _ fbb: inout FlatBufferBuilder,
    timeModeOffset timeMode: Offset = Offset(),
    timeStartOffset timeStart: Offset = Offset(),
    timeEndOffset timeEnd: Offset = Offset(),
    intFreqVectorOffset intFreq: Offset = Offset(),
    intDurVectorOffset intDur: Offset = Offset()
  ) -> Offset {
    let __start = AirspaceTimePeriod_Ingest.startAirspaceTimePeriod_Ingest(&fbb)
    AirspaceTimePeriod_Ingest.add(timeMode: timeMode, &fbb)
    AirspaceTimePeriod_Ingest.add(timeStart: timeStart, &fbb)
    AirspaceTimePeriod_Ingest.add(timeEnd: timeEnd, &fbb)
    AirspaceTimePeriod_Ingest.addVectorOf(intFreq: intFreq, &fbb)
    AirspaceTimePeriod_Ingest.addVectorOf(intDur: intDur, &fbb)
    return AirspaceTimePeriod_Ingest.endAirspaceTimePeriod_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.timeMode.p, fieldName: "timeMode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timeStart.p, fieldName: "timeStart", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timeEnd.p, fieldName: "timeEnd", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.intFreq.p, fieldName: "intFreq", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.intDur.p, fieldName: "intDur", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

