// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum Operatingunit_Full_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: Operatingunit_Full_dataMode_Enum { return .exercise }
  public static var min: Operatingunit_Full_dataMode_Enum { return .real }
}


///  /// Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.
public struct Operatingunit_Full: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "OPER" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: Operatingunit_Full.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case idOperatingUnit = 4
    case classificationMarking = 6
    case altOperatingUnitId = 8
    case name = 10
    case description = 12
    case idLocation = 14
    case idContact = 16
    case idOrganization = 18
    case unitIdentifier = 20
    case countryCode = 22
    case altCountryCode = 24
    case wac = 26
    case operStatus = 28
    case condition = 30
    case conditionAvail = 32
    case eval = 34
    case fpa = 36
    case ident = 38
    case allegiance = 40
    case altAllegiance = 42
    case locName = 44
    case locReason = 46
    case force = 48
    case forceName = 50
    case functRole = 52
    case msnPrimary = 54
    case msnPrimarySpecialty = 56
    case masterUnit = 58
    case stylizedUnit = 60
    case divCat = 62
    case echelon = 64
    case echelonTier = 66
    case fleetId = 68
    case deployStatus = 70
    case flagFlown = 72
    case coordDatum = 74
    case coord = 76
    case coordDerivAcc = 78
    case lat = 80
    case lon = 82
    case elevMsl = 84
    case elevMslConfLvl = 86
    case elevMslDerivAcc = 88
    case geoidalMslSep = 90
    case milGridSys = 92
    case milGrid = 94
    case utm = 96
    case airDefArea = 98
    case polSubdiv = 100
    case symCode = 102
    case classRating = 104
    case recStatus = 106
    case reviewDate = 108
    case resProd = 110
    case referenceDoc = 112
    case operatingUnitRemarks = 114
    case createdAt = 116
    case createdBy = 118
    case updatedAt = 120
    case updatedBy = 122
    case source = 124
    case origin = 126
    case dataMode = 128
    case organization = 130
    case location = 132
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: OPERATINGUNIT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idOperatingUnit: String? { let o = _accessor.offset(VTOFFSET.idOperatingUnit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOperatingUnitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOperatingUnit.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  Unique identifier of the operating unit record from the originating system.
  ///  Example: /// Example: 32100000000021
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var altOperatingUnitId: String? { let o = _accessor.offset(VTOFFSET.altOperatingUnitId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altOperatingUnitIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altOperatingUnitId.v) }
  ///  Name of the operating unit.
  ///  Example: /// Example: SOME_NAME
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  Description of the operating unit.
  ///  Example: /// Example: Description of unit
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var description: String? { let o = _accessor.offset(VTOFFSET.description.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.description.v) }
  ///  Unique identifier of the location record for this operating unit.
  ///  Example: /// Example: LOCATION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idLocation: String? { let o = _accessor.offset(VTOFFSET.idLocation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idLocationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idLocation.v) }
  ///  Unique identifier of the contact for this operating unit.
  ///  Example: /// Example: CONTACT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idContact: String? { let o = _accessor.offset(VTOFFSET.idContact.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idContactSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idContact.v) }
  ///  Unique identifier of the organization record for this operating unit.
  ///  Example: /// Example: ORGANIZATION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var idOrganization: String? { let o = _accessor.offset(VTOFFSET.idOrganization.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOrganizationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOrganization.v) }
  ///  An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.
  ///  Example: /// Example: AZXAZ12345
  ///  Constraints: Minimum length = 0, Maximum length = 10
  public var unitIdentifier: String? { let o = _accessor.offset(VTOFFSET.unitIdentifier.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var unitIdentifierSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.unitIdentifier.v) }
  ///  The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: IQ
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var countryCode: String? { let o = _accessor.offset(VTOFFSET.countryCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var countryCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.countryCode.v) }
  ///  Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
  ///  Example: /// Example: IZ
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var altCountryCode: String? { let o = _accessor.offset(VTOFFSET.altCountryCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altCountryCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altCountryCode.v) }
  ///  World Aeronautical Chart identifier for the area in which a designated operating unit is located.
  ///  Example: /// Example: 0427
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var wac: String? { let o = _accessor.offset(VTOFFSET.wac.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var wacSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.wac.v) }
  ///  The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: OPR
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var operStatus: String? { let o = _accessor.offset(VTOFFSET.operStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var operStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.operStatus.v) }
  ///  The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: RDY
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var condition: String? { let o = _accessor.offset(VTOFFSET.condition.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var conditionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.condition.v) }
  ///  Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var conditionAvail: String? { let o = _accessor.offset(VTOFFSET.conditionAvail.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var conditionAvailSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.conditionAvail.v) }
  ///  The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
  ///  Example: /// Example: 7
  ///  Constraints: No constraints specified.
  public var eval: Int32 { let o = _accessor.offset(VTOFFSET.eval.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: EOB
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var fpa: String? { let o = _accessor.offset(VTOFFSET.fpa.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fpaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fpa.v) }
  ///  Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
  ///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  ///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  ///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  ///  FAKER: Friendly track, object, or entity acting as an exercise hostile.
  ///  JOKER: Friendly track, object, or entity acting as an exercise suspect.
  ///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  ///  PENDING: Track object which has not been evaluated.
  ///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  ///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  ///  Example: /// Example: FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 32
  public var ident: String? { let o = _accessor.offset(VTOFFSET.ident.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var identSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ident.v) }
  ///  The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: OTHR
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var allegiance: String? { let o = _accessor.offset(VTOFFSET.allegiance.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var allegianceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.allegiance.v) }
  ///  Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
  ///  Example: /// Example: HL
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var altAllegiance: String? { let o = _accessor.offset(VTOFFSET.altAllegiance.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altAllegianceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altAllegiance.v) }
  ///  Location name for the coordinates.
  ///  Example: /// Example: LOCATION_NAME
  ///  Constraints: Minimum length = 0, Maximum length = 54
  public var locName: String? { let o = _accessor.offset(VTOFFSET.locName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var locNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.locName.v) }
  ///  Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: GR
  ///  Constraints: Minimum length = 0, Maximum length = 9
  public var locReason: String? { let o = _accessor.offset(VTOFFSET.locReason.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var locReasonSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.locReason.v) }
  ///  An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: NV
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var force: String? { let o = _accessor.offset(VTOFFSET.force.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var forceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.force.v) }
  ///  The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.
  ///  Example: /// Example: FORCE-NAME
  ///  Constraints: Minimum length = 0, Maximum length = 54
  public var forceName: String? { let o = _accessor.offset(VTOFFSET.forceName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var forceNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.forceName.v) }
  ///  Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: MIL
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var functRole: String? { let o = _accessor.offset(VTOFFSET.functRole.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var functRoleSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.functRole.v) }
  ///  Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: W6
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var msnPrimary: String? { let o = _accessor.offset(VTOFFSET.msnPrimary.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msnPrimarySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msnPrimary.v) }
  ///  Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: QK
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var msnPrimarySpecialty: String? { let o = _accessor.offset(VTOFFSET.msnPrimarySpecialty.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var msnPrimarySpecialtySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.msnPrimarySpecialty.v) }
  ///  This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var masterUnit: Bool { let o = _accessor.offset(VTOFFSET.masterUnit.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  public var stylizedUnit: Bool { let o = _accessor.offset(VTOFFSET.stylizedUnit.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: 5
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var divCat: String? { let o = _accessor.offset(VTOFFSET.divCat.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var divCatSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.divCat.v) }
  ///  Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: SHIP
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var echelon: String? { let o = _accessor.offset(VTOFFSET.echelon.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var echelonSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.echelon.v) }
  ///  Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: 68
  ///  Constraints: Minimum length = 0, Maximum length = 2
  public var echelonTier: String? { let o = _accessor.offset(VTOFFSET.echelonTier.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var echelonTierSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.echelonTier.v) }
  ///  Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var fleetId: String? { let o = _accessor.offset(VTOFFSET.fleetId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var fleetIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.fleetId.v) }
  ///  A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: ND
  ///  Constraints: Minimum length = 0, Maximum length = 2
  public var deployStatus: String? { let o = _accessor.offset(VTOFFSET.deployStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var deployStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.deployStatus.v) }
  ///  The country code of the observed flag flown.
  ///  Example: /// Example: IZ
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var flagFlown: String? { let o = _accessor.offset(VTOFFSET.flagFlown.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var flagFlownSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.flagFlown.v) }
  ///  A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: WGS
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var coordDatum: String? { let o = _accessor.offset(VTOFFSET.coordDatum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var coordDatumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.coordDatum.v) }
  ///  "Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
  ///  Pos. 1-2.  Latitude Degrees     [00-90]
  ///  Pos. 3-4.  Latitude Minutes     [00-59]
  ///  Pos. 5-6.  Latitude Seconds     [00-59]
  ///  Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
  ///  Pos. 10. Latitude Hemisphere       [NS] 
  ///  Pos. 11-13. Longitude Degrees     [00-180] 
  ///  Pos. 14-15. Longitude Minutes     [00-59] 
  ///  Pos. 16-17. Longitude Seconds     [00-59] 
  ///  Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
  ///  Pos. 21. Longitude Hemisphere     [EW]
  ///  Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]".
  ///  Example: /// Example: 340000000N0430000000E
  ///  Constraints: Minimum length = 0, Maximum length = 21
  public var coord: String? { let o = _accessor.offset(VTOFFSET.coord.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var coordSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.coord.v) }
  ///  Indicates the plus or minus error assessed against the method used to derive the coordinate.
  ///  Example: /// Example: 12.345
  ///  Constraints: No constraints specified.
  public var coordDerivAcc: Double { let o = _accessor.offset(VTOFFSET.coordDerivAcc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
  ///  Example: /// Example: 123.45
  ///  Constraints: No constraints specified.
  public var elevMsl: Double { let o = _accessor.offset(VTOFFSET.elevMsl.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
  ///  Example: /// Example: 50
  ///  Constraints: No constraints specified.
  public var elevMslConfLvl: Int32 { let o = _accessor.offset(VTOFFSET.elevMslConfLvl.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Indicates the plus or minus error assessed against the method used to derive the elevation.
  ///  Example: /// Example: 12.34
  ///  Constraints: No constraints specified.
  public var elevMslDerivAcc: Double { let o = _accessor.offset(VTOFFSET.elevMslDerivAcc.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The distance between Mean Sea Level and a referenced ellipsoid.
  ///  Example: /// Example: 12.34
  ///  Constraints: No constraints specified.
  public var geoidalMslSep: Double { let o = _accessor.offset(VTOFFSET.geoidalMslSep.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  "Indicates the grid system used in the development of the milGrid coordinates. Values are:
  ///  UPS - Universal Polar System
  ///  UTM - Universal Transverse Mercator".
  ///  Example: /// Example: UTM
  ///  Constraints: Minimum length = 0, Maximum length = 3
  public var milGridSys: String? { let o = _accessor.offset(VTOFFSET.milGridSys.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var milGridSysSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.milGridSys.v) }
  ///  The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
  ///  4Q (grid zone designator, GZD)
  ///  FJ (the 100,000-meter square identifier)
  ///  12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
  ///  Example: /// Example: 4QFJ12345678
  ///  Constraints: Minimum length = 0, Maximum length = 15
  public var milGrid: String? { let o = _accessor.offset(VTOFFSET.milGrid.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var milGridSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.milGrid.v) }
  ///  Universal Transverse Mercator (UTM) grid coordinates.
  ///  Pos. 1-2, UTM Zone Column   [01-60
  ///  Pos. 3, UTM Zone Row   [C-HJ-NP-X]
  ///  Pos. 4, UTM False Easting   [0-9]
  ///  Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
  ///  Pos. 10-11, UTM False Northing    [0-9][0-9]
  ///  Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
  ///  Example: /// Example: 19P4390691376966
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var utm: String? { let o = _accessor.offset(VTOFFSET.utm.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var utmSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.utm.v) }
  ///  Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
  ///  Example: /// Example: AL006
  ///  Constraints: Minimum length = 0, Maximum length = 5
  public var airDefArea: String? { let o = _accessor.offset(VTOFFSET.airDefArea.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var airDefAreaSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.airDefArea.v) }
  ///  Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: IZ07
  ///  Constraints: Minimum length = 0, Maximum length = 7
  public var polSubdiv: String? { let o = _accessor.offset(VTOFFSET.polSubdiv.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var polSubdivSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.polSubdiv.v) }
  ///  A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
  ///  Example: /// Example: SOGPU----------
  ///  Constraints: Minimum length = 0, Maximum length = 15
  public var symCode: String? { let o = _accessor.offset(VTOFFSET.symCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var symCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.symCode.v) }
  ///  Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
  ///  0 - Does not meet criteria above
  ///  1 - Primary importance to system
  ///  2 - Secondary importance to system
  ///  3 - Tertiary importance to system
  ///  O - Other. Explain in Remarks.
  ///  Example: /// Example: 1
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var classRating: String? { let o = _accessor.offset(VTOFFSET.classRating.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classRatingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classRating.v) }
  ///  Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:
  ///  A - Active
  ///  I - Inactive
  ///  K - Acknowledged
  ///  L - Local
  ///  Q - A nominated (NOM) or Data Change Request (DCR) record
  ///  R - Production reduced by CMD decision
  ///  W - Working Record.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 1
  public var recStatus: String? { let o = _accessor.offset(VTOFFSET.recStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var recStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.recStatus.v) }
  ///  Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
  ///  Example: /// Example: 2008-06-10
  ///  Constraints: No constraints specified.
  public var reviewDate: String? { let o = _accessor.offset(VTOFFSET.reviewDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var reviewDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.reviewDate.v) }
  ///  Responsible Producer - Organization that is responsible for the maintenance of the record.
  ///  Example: /// Example: RT
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var resProd: String? { let o = _accessor.offset(VTOFFSET.resProd.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var resProdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.resProd.v) }
  ///  The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
  ///  Example: /// Example: Provider Reference Documentation
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var referenceDoc: String? { let o = _accessor.offset(VTOFFSET.referenceDoc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var referenceDocSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.referenceDoc.v) }
  ///  Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasOperatingUnitRemarks: Bool { let o = _accessor.offset(VTOFFSET.operatingUnitRemarks.v); return o == 0 ? false : true }
  public var operatingUnitRemarksCount: Int32 { let o = _accessor.offset(VTOFFSET.operatingUnitRemarks.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func operatingUnitRemarks(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.operatingUnitRemarks.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Time the row was last updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var updatedAt: String? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedAt.v) }
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var updatedBy: String? { let o = _accessor.offset(VTOFFSET.updatedBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var updatedBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.updatedBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: Operatingunit_Full_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : Operatingunit_Full_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var organization: String? { let o = _accessor.offset(VTOFFSET.organization.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var organizationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.organization.v) }
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var location: String? { let o = _accessor.offset(VTOFFSET.location.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var locationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.location.v) }
  public static func startOperatingunit_Full(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 65) }
  public static func add(idOperatingUnit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOperatingUnit, at: VTOFFSET.idOperatingUnit.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(altOperatingUnitId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altOperatingUnitId, at: VTOFFSET.altOperatingUnitId.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(description: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: description, at: VTOFFSET.description.p) }
  public static func add(idLocation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idLocation, at: VTOFFSET.idLocation.p) }
  public static func add(idContact: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idContact, at: VTOFFSET.idContact.p) }
  public static func add(idOrganization: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOrganization, at: VTOFFSET.idOrganization.p) }
  public static func add(unitIdentifier: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: unitIdentifier, at: VTOFFSET.unitIdentifier.p) }
  public static func add(countryCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: countryCode, at: VTOFFSET.countryCode.p) }
  public static func add(altCountryCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altCountryCode, at: VTOFFSET.altCountryCode.p) }
  public static func add(wac: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wac, at: VTOFFSET.wac.p) }
  public static func add(operStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: operStatus, at: VTOFFSET.operStatus.p) }
  public static func add(condition: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: condition, at: VTOFFSET.condition.p) }
  public static func add(conditionAvail: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: conditionAvail, at: VTOFFSET.conditionAvail.p) }
  public static func add(eval: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: eval, def: 0, at: VTOFFSET.eval.p) }
  public static func add(fpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fpa, at: VTOFFSET.fpa.p) }
  public static func add(ident: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ident, at: VTOFFSET.ident.p) }
  public static func add(allegiance: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: allegiance, at: VTOFFSET.allegiance.p) }
  public static func add(altAllegiance: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altAllegiance, at: VTOFFSET.altAllegiance.p) }
  public static func add(locName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: locName, at: VTOFFSET.locName.p) }
  public static func add(locReason: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: locReason, at: VTOFFSET.locReason.p) }
  public static func add(force: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: force, at: VTOFFSET.force.p) }
  public static func add(forceName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: forceName, at: VTOFFSET.forceName.p) }
  public static func add(functRole: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: functRole, at: VTOFFSET.functRole.p) }
  public static func add(msnPrimary: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msnPrimary, at: VTOFFSET.msnPrimary.p) }
  public static func add(msnPrimarySpecialty: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: msnPrimarySpecialty, at: VTOFFSET.msnPrimarySpecialty.p) }
  public static func add(masterUnit: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: masterUnit, def: false,
   at: VTOFFSET.masterUnit.p) }
  public static func add(stylizedUnit: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: stylizedUnit, def: false,
   at: VTOFFSET.stylizedUnit.p) }
  public static func add(divCat: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: divCat, at: VTOFFSET.divCat.p) }
  public static func add(echelon: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: echelon, at: VTOFFSET.echelon.p) }
  public static func add(echelonTier: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: echelonTier, at: VTOFFSET.echelonTier.p) }
  public static func add(fleetId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: fleetId, at: VTOFFSET.fleetId.p) }
  public static func add(deployStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: deployStatus, at: VTOFFSET.deployStatus.p) }
  public static func add(flagFlown: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: flagFlown, at: VTOFFSET.flagFlown.p) }
  public static func add(coordDatum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: coordDatum, at: VTOFFSET.coordDatum.p) }
  public static func add(coord: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: coord, at: VTOFFSET.coord.p) }
  public static func add(coordDerivAcc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: coordDerivAcc, def: 0.0, at: VTOFFSET.coordDerivAcc.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(elevMsl: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevMsl, def: 0.0, at: VTOFFSET.elevMsl.p) }
  public static func add(elevMslConfLvl: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevMslConfLvl, def: 0, at: VTOFFSET.elevMslConfLvl.p) }
  public static func add(elevMslDerivAcc: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevMslDerivAcc, def: 0.0, at: VTOFFSET.elevMslDerivAcc.p) }
  public static func add(geoidalMslSep: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: geoidalMslSep, def: 0.0, at: VTOFFSET.geoidalMslSep.p) }
  public static func add(milGridSys: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: milGridSys, at: VTOFFSET.milGridSys.p) }
  public static func add(milGrid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: milGrid, at: VTOFFSET.milGrid.p) }
  public static func add(utm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: utm, at: VTOFFSET.utm.p) }
  public static func add(airDefArea: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: airDefArea, at: VTOFFSET.airDefArea.p) }
  public static func add(polSubdiv: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: polSubdiv, at: VTOFFSET.polSubdiv.p) }
  public static func add(symCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: symCode, at: VTOFFSET.symCode.p) }
  public static func add(classRating: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classRating, at: VTOFFSET.classRating.p) }
  public static func add(recStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: recStatus, at: VTOFFSET.recStatus.p) }
  public static func add(reviewDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: reviewDate, at: VTOFFSET.reviewDate.p) }
  public static func add(resProd: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: resProd, at: VTOFFSET.resProd.p) }
  public static func add(referenceDoc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: referenceDoc, at: VTOFFSET.referenceDoc.p) }
  public static func addVectorOf(operatingUnitRemarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: operatingUnitRemarks, at: VTOFFSET.operatingUnitRemarks.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func add(updatedBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedBy, at: VTOFFSET.updatedBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: Operatingunit_Full_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(organization: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: organization, at: VTOFFSET.organization.p) }
  public static func add(location: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: location, at: VTOFFSET.location.p) }
  public static func endOperatingunit_Full(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createOperatingunit_Full(
    _ fbb: inout FlatBufferBuilder,
    idOperatingUnitOffset idOperatingUnit: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    altOperatingUnitIdOffset altOperatingUnitId: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    descriptionOffset description: Offset = Offset(),
    idLocationOffset idLocation: Offset = Offset(),
    idContactOffset idContact: Offset = Offset(),
    idOrganizationOffset idOrganization: Offset = Offset(),
    unitIdentifierOffset unitIdentifier: Offset = Offset(),
    countryCodeOffset countryCode: Offset = Offset(),
    altCountryCodeOffset altCountryCode: Offset = Offset(),
    wacOffset wac: Offset = Offset(),
    operStatusOffset operStatus: Offset = Offset(),
    conditionOffset condition: Offset = Offset(),
    conditionAvailOffset conditionAvail: Offset = Offset(),
    eval: Int32 = 0,
    fpaOffset fpa: Offset = Offset(),
    identOffset ident: Offset = Offset(),
    allegianceOffset allegiance: Offset = Offset(),
    altAllegianceOffset altAllegiance: Offset = Offset(),
    locNameOffset locName: Offset = Offset(),
    locReasonOffset locReason: Offset = Offset(),
    forceOffset force: Offset = Offset(),
    forceNameOffset forceName: Offset = Offset(),
    functRoleOffset functRole: Offset = Offset(),
    msnPrimaryOffset msnPrimary: Offset = Offset(),
    msnPrimarySpecialtyOffset msnPrimarySpecialty: Offset = Offset(),
    masterUnit: Bool = false,
    stylizedUnit: Bool = false,
    divCatOffset divCat: Offset = Offset(),
    echelonOffset echelon: Offset = Offset(),
    echelonTierOffset echelonTier: Offset = Offset(),
    fleetIdOffset fleetId: Offset = Offset(),
    deployStatusOffset deployStatus: Offset = Offset(),
    flagFlownOffset flagFlown: Offset = Offset(),
    coordDatumOffset coordDatum: Offset = Offset(),
    coordOffset coord: Offset = Offset(),
    coordDerivAcc: Double = 0.0,
    lat: Double = 0.0,
    lon: Double = 0.0,
    elevMsl: Double = 0.0,
    elevMslConfLvl: Int32 = 0,
    elevMslDerivAcc: Double = 0.0,
    geoidalMslSep: Double = 0.0,
    milGridSysOffset milGridSys: Offset = Offset(),
    milGridOffset milGrid: Offset = Offset(),
    utmOffset utm: Offset = Offset(),
    airDefAreaOffset airDefArea: Offset = Offset(),
    polSubdivOffset polSubdiv: Offset = Offset(),
    symCodeOffset symCode: Offset = Offset(),
    classRatingOffset classRating: Offset = Offset(),
    recStatusOffset recStatus: Offset = Offset(),
    reviewDateOffset reviewDate: Offset = Offset(),
    resProdOffset resProd: Offset = Offset(),
    referenceDocOffset referenceDoc: Offset = Offset(),
    operatingUnitRemarksVectorOffset operatingUnitRemarks: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    updatedByOffset updatedBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: Operatingunit_Full_dataMode_Enum = .real,
    organizationOffset organization: Offset = Offset(),
    locationOffset location: Offset = Offset()
  ) -> Offset {
    let __start = Operatingunit_Full.startOperatingunit_Full(&fbb)
    Operatingunit_Full.add(idOperatingUnit: idOperatingUnit, &fbb)
    Operatingunit_Full.add(classificationMarking: classificationMarking, &fbb)
    Operatingunit_Full.add(altOperatingUnitId: altOperatingUnitId, &fbb)
    Operatingunit_Full.add(name: name, &fbb)
    Operatingunit_Full.add(description: description, &fbb)
    Operatingunit_Full.add(idLocation: idLocation, &fbb)
    Operatingunit_Full.add(idContact: idContact, &fbb)
    Operatingunit_Full.add(idOrganization: idOrganization, &fbb)
    Operatingunit_Full.add(unitIdentifier: unitIdentifier, &fbb)
    Operatingunit_Full.add(countryCode: countryCode, &fbb)
    Operatingunit_Full.add(altCountryCode: altCountryCode, &fbb)
    Operatingunit_Full.add(wac: wac, &fbb)
    Operatingunit_Full.add(operStatus: operStatus, &fbb)
    Operatingunit_Full.add(condition: condition, &fbb)
    Operatingunit_Full.add(conditionAvail: conditionAvail, &fbb)
    Operatingunit_Full.add(eval: eval, &fbb)
    Operatingunit_Full.add(fpa: fpa, &fbb)
    Operatingunit_Full.add(ident: ident, &fbb)
    Operatingunit_Full.add(allegiance: allegiance, &fbb)
    Operatingunit_Full.add(altAllegiance: altAllegiance, &fbb)
    Operatingunit_Full.add(locName: locName, &fbb)
    Operatingunit_Full.add(locReason: locReason, &fbb)
    Operatingunit_Full.add(force: force, &fbb)
    Operatingunit_Full.add(forceName: forceName, &fbb)
    Operatingunit_Full.add(functRole: functRole, &fbb)
    Operatingunit_Full.add(msnPrimary: msnPrimary, &fbb)
    Operatingunit_Full.add(msnPrimarySpecialty: msnPrimarySpecialty, &fbb)
    Operatingunit_Full.add(masterUnit: masterUnit, &fbb)
    Operatingunit_Full.add(stylizedUnit: stylizedUnit, &fbb)
    Operatingunit_Full.add(divCat: divCat, &fbb)
    Operatingunit_Full.add(echelon: echelon, &fbb)
    Operatingunit_Full.add(echelonTier: echelonTier, &fbb)
    Operatingunit_Full.add(fleetId: fleetId, &fbb)
    Operatingunit_Full.add(deployStatus: deployStatus, &fbb)
    Operatingunit_Full.add(flagFlown: flagFlown, &fbb)
    Operatingunit_Full.add(coordDatum: coordDatum, &fbb)
    Operatingunit_Full.add(coord: coord, &fbb)
    Operatingunit_Full.add(coordDerivAcc: coordDerivAcc, &fbb)
    Operatingunit_Full.add(lat: lat, &fbb)
    Operatingunit_Full.add(lon: lon, &fbb)
    Operatingunit_Full.add(elevMsl: elevMsl, &fbb)
    Operatingunit_Full.add(elevMslConfLvl: elevMslConfLvl, &fbb)
    Operatingunit_Full.add(elevMslDerivAcc: elevMslDerivAcc, &fbb)
    Operatingunit_Full.add(geoidalMslSep: geoidalMslSep, &fbb)
    Operatingunit_Full.add(milGridSys: milGridSys, &fbb)
    Operatingunit_Full.add(milGrid: milGrid, &fbb)
    Operatingunit_Full.add(utm: utm, &fbb)
    Operatingunit_Full.add(airDefArea: airDefArea, &fbb)
    Operatingunit_Full.add(polSubdiv: polSubdiv, &fbb)
    Operatingunit_Full.add(symCode: symCode, &fbb)
    Operatingunit_Full.add(classRating: classRating, &fbb)
    Operatingunit_Full.add(recStatus: recStatus, &fbb)
    Operatingunit_Full.add(reviewDate: reviewDate, &fbb)
    Operatingunit_Full.add(resProd: resProd, &fbb)
    Operatingunit_Full.add(referenceDoc: referenceDoc, &fbb)
    Operatingunit_Full.addVectorOf(operatingUnitRemarks: operatingUnitRemarks, &fbb)
    Operatingunit_Full.add(createdAt: createdAt, &fbb)
    Operatingunit_Full.add(createdBy: createdBy, &fbb)
    Operatingunit_Full.add(updatedAt: updatedAt, &fbb)
    Operatingunit_Full.add(updatedBy: updatedBy, &fbb)
    Operatingunit_Full.add(source: source, &fbb)
    Operatingunit_Full.add(origin: origin, &fbb)
    Operatingunit_Full.add(dataMode: dataMode, &fbb)
    Operatingunit_Full.add(organization: organization, &fbb)
    Operatingunit_Full.add(location: location, &fbb)
    return Operatingunit_Full.endOperatingunit_Full(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.idOperatingUnit.p, fieldName: "idOperatingUnit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altOperatingUnitId.p, fieldName: "altOperatingUnitId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.description.p, fieldName: "description", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idLocation.p, fieldName: "idLocation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idContact.p, fieldName: "idContact", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOrganization.p, fieldName: "idOrganization", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.unitIdentifier.p, fieldName: "unitIdentifier", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.countryCode.p, fieldName: "countryCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altCountryCode.p, fieldName: "altCountryCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.wac.p, fieldName: "wac", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.operStatus.p, fieldName: "operStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.condition.p, fieldName: "condition", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.conditionAvail.p, fieldName: "conditionAvail", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eval.p, fieldName: "eval", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.fpa.p, fieldName: "fpa", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ident.p, fieldName: "ident", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.allegiance.p, fieldName: "allegiance", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altAllegiance.p, fieldName: "altAllegiance", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.locName.p, fieldName: "locName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.locReason.p, fieldName: "locReason", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.force.p, fieldName: "force", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.forceName.p, fieldName: "forceName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.functRole.p, fieldName: "functRole", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msnPrimary.p, fieldName: "msnPrimary", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.msnPrimarySpecialty.p, fieldName: "msnPrimarySpecialty", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.masterUnit.p, fieldName: "masterUnit", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.stylizedUnit.p, fieldName: "stylizedUnit", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.divCat.p, fieldName: "divCat", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.echelon.p, fieldName: "echelon", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.echelonTier.p, fieldName: "echelonTier", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.fleetId.p, fieldName: "fleetId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.deployStatus.p, fieldName: "deployStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.flagFlown.p, fieldName: "flagFlown", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.coordDatum.p, fieldName: "coordDatum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.coord.p, fieldName: "coord", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.coordDerivAcc.p, fieldName: "coordDerivAcc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevMsl.p, fieldName: "elevMsl", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.elevMslConfLvl.p, fieldName: "elevMslConfLvl", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.elevMslDerivAcc.p, fieldName: "elevMslDerivAcc", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.geoidalMslSep.p, fieldName: "geoidalMslSep", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.milGridSys.p, fieldName: "milGridSys", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.milGrid.p, fieldName: "milGrid", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.utm.p, fieldName: "utm", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.airDefArea.p, fieldName: "airDefArea", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.polSubdiv.p, fieldName: "polSubdiv", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.symCode.p, fieldName: "symCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classRating.p, fieldName: "classRating", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.recStatus.p, fieldName: "recStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.reviewDate.p, fieldName: "reviewDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.resProd.p, fieldName: "resProd", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.referenceDoc.p, fieldName: "referenceDoc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.operatingUnitRemarks.p, fieldName: "operatingUnitRemarks", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.updatedBy.p, fieldName: "updatedBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: Operatingunit_Full_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.organization.p, fieldName: "organization", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.location.p, fieldName: "location", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

