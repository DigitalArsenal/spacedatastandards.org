// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum EquipmentRemark_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: EquipmentRemark_Ingest_dataMode_Enum { return .exercise }
  public static var min: EquipmentRemark_Ingest_dataMode_Enum { return .real }
}


///  /// Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
public struct EquipmentRemark_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "EQUI" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EquipmentRemark_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case idEquipment = 8
    case altRmkId = 10
    case name = 12
    case type = 14
    case text = 16
    case code = 18
    case createdAt = 20
    case createdBy = 22
    case source = 24
    case origin = 26
    case dataMode = 28
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The ID of the Equipment to which this remark applies.
  ///  Example: /// Example: EQUIPMENT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idEquipment: String? { let o = _accessor.offset(VTOFFSET.idEquipment.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idEquipmentSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idEquipment.v) }
  ///  Unique identifier of the Equipment Remark record from the originating system.
  ///  Example: /// Example: 123456ABC
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var altRmkId: String? { let o = _accessor.offset(VTOFFSET.altRmkId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var altRmkIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.altRmkId.v) }
  ///  The name of the remark.
  ///  Example: /// Example: Remark name
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  ///  The remark type (e.g. Caution, Information, Misc, Restriction, etc.).
  ///  Example: /// Example: Restriction
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var type: String? { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var typeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.type.v) }
  ///  The text of the remark.
  ///  Example: /// Example: This is a remark
  ///  Constraints: Minimum length = 1, Maximum length = 16384
  public var text: String? { let o = _accessor.offset(VTOFFSET.text.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var textSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.text.v) }
  ///  The remark type identifier. For example, the Mobility Air Forces (MAF) remark code, defined in the Airfield Suitability and Restriction Report (ASRR).
  ///  Example: /// Example: M
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var code: String? { let o = _accessor.offset(VTOFFSET.code.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var codeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.code.v) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: EquipmentRemark_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : EquipmentRemark_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  public static func startEquipmentRemark_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 13) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(idEquipment: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idEquipment, at: VTOFFSET.idEquipment.p) }
  public static func add(altRmkId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: altRmkId, at: VTOFFSET.altRmkId.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func add(type: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: type, at: VTOFFSET.type.p) }
  public static func add(text: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: text, at: VTOFFSET.text.p) }
  public static func add(code: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: code, at: VTOFFSET.code.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: EquipmentRemark_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func endEquipmentRemark_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEquipmentRemark_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    idEquipmentOffset idEquipment: Offset = Offset(),
    altRmkIdOffset altRmkId: Offset = Offset(),
    nameOffset name: Offset = Offset(),
    typeOffset type: Offset = Offset(),
    textOffset text: Offset = Offset(),
    codeOffset code: Offset = Offset(),
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: EquipmentRemark_Ingest_dataMode_Enum = .real
  ) -> Offset {
    let __start = EquipmentRemark_Ingest.startEquipmentRemark_Ingest(&fbb)
    EquipmentRemark_Ingest.add(id: id, &fbb)
    EquipmentRemark_Ingest.add(classificationMarking: classificationMarking, &fbb)
    EquipmentRemark_Ingest.add(idEquipment: idEquipment, &fbb)
    EquipmentRemark_Ingest.add(altRmkId: altRmkId, &fbb)
    EquipmentRemark_Ingest.add(name: name, &fbb)
    EquipmentRemark_Ingest.add(type: type, &fbb)
    EquipmentRemark_Ingest.add(text: text, &fbb)
    EquipmentRemark_Ingest.add(code: code, &fbb)
    EquipmentRemark_Ingest.add(createdAt: createdAt, &fbb)
    EquipmentRemark_Ingest.add(createdBy: createdBy, &fbb)
    EquipmentRemark_Ingest.add(source: source, &fbb)
    EquipmentRemark_Ingest.add(origin: origin, &fbb)
    EquipmentRemark_Ingest.add(dataMode: dataMode, &fbb)
    return EquipmentRemark_Ingest.endEquipmentRemark_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idEquipment.p, fieldName: "idEquipment", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.altRmkId.p, fieldName: "altRmkId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.text.p, fieldName: "text", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.code.p, fieldName: "code", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: EquipmentRemark_Ingest_dataMode_Enum.self)
    _v.finish()
  }
}

