// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum OnorbitEvent_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: OnorbitEvent_Ingest_dataMode_Enum { return .exercise }
  public static var min: OnorbitEvent_Ingest_dataMode_Enum { return .real }
}


///  /// No description available.
public struct OnorbitEvent_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "ONOR" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: OnorbitEvent_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case derivedFrom = 8
    case declassificationDate = 10
    case declassificationString = 12
    case idOnOrbit = 14
    case satNo = 16
    case origObjectId = 18
    case eventTime = 20
    case eventTimeNotes = 22
    case operatorOrgId = 24
    case ownerOrgId = 26
    case lesseeOrgId = 28
    case operatedOnBehalfOfOrgId = 30
    case geoPosition = 32
    case planeSlot = 34
    case planeNumber = 36
    case positionStatus = 38
    case untilTime = 40
    case officialLossDate = 42
    case netAmount = 44
    case underlyingCause = 46
    case capabilityLoss = 48
    case capacityLoss = 50
    case insuranceLoss = 52
    case thirdPartyInsuranceLoss = 54
    case injured = 56
    case killed = 58
    case lifeLost = 60
    case ageAtEvent = 62
    case achievedFlightPhase = 64
    case occurrenceFlightPhase = 66
    case stageAtFault = 68
    case equipmentAtFault = 70
    case equipmentTypeAtFault = 72
    case equipmentPartAtFault = 74
    case consequentialEquipmentFailure = 76
    case inclined = 78
    case description = 80
    case remarks = 82
    case insuranceLossNotes = 84
    case capabilityLossNotes = 86
    case insuranceCarriedNotes = 88
    case equipmentCausingLossNotes = 90
    case eventType = 92
    case eventResult = 94
    case objectStatus = 96
    case satellitePosition = 98
    case source = 100
    case origin = 102
    case dataMode = 104
    case createdAt = 106
    case createdBy = 108
    case origNetwork = 110
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ONORBITEVENT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The sources or SCG references from which the classification of this data is derived.
  ///  Example: /// Example: DERIVED_SOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var derivedFrom: String? { let o = _accessor.offset(VTOFFSET.derivedFrom.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var derivedFromSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.derivedFrom.v) }
  ///  The declassification date of this data, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:02:02.123Z
  ///  Constraints: No constraints specified.
  public var declassificationDate: String? { let o = _accessor.offset(VTOFFSET.declassificationDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var declassificationDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.declassificationDate.v) }
  ///  Declassification string of this data.
  ///  Example: /// Example: DECLASS_STRING
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var declassificationString: String? { let o = _accessor.offset(VTOFFSET.declassificationString.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var declassificationStringSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.declassificationString.v) }
  ///  Unique identifier of the on-orbit object for this event.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var idOnOrbit: String? { let o = _accessor.offset(VTOFFSET.idOnOrbit.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idOnOrbitSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.idOnOrbit.v) }
  ///  Satellite/Catalog number of the target on-orbit object.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var satNo: Int32 { let o = _accessor.offset(VTOFFSET.satNo.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origObjectId: String? { let o = _accessor.offset(VTOFFSET.origObjectId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origObjectIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origObjectId.v) }
  ///  Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var eventTime: String? { let o = _accessor.offset(VTOFFSET.eventTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eventTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eventTime.v) }
  ///  Notes/remarks on the validity/accuracy of the eventTime.
  ///  Example: /// Example: Notes on validity
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var eventTimeNotes: String? { let o = _accessor.offset(VTOFFSET.eventTimeNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eventTimeNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eventTimeNotes.v) }
  ///  Organization ID of the operator of the on-orbit spacecraft at the time of the event.
  ///  Example: /// Example: OPERATORORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var operatorOrgId: String? { let o = _accessor.offset(VTOFFSET.operatorOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var operatorOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.operatorOrgId.v) }
  ///  Organization ID of the owner of the on-orbit spacecraft at the time of the event.
  ///  Example: /// Example: OWNERORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var ownerOrgId: String? { let o = _accessor.offset(VTOFFSET.ownerOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ownerOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ownerOrgId.v) }
  ///  Unique identifier of the organization which leases this on-orbit spacecraft.
  ///  Example: /// Example: LESSEEORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var lesseeOrgId: String? { let o = _accessor.offset(VTOFFSET.lesseeOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lesseeOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lesseeOrgId.v) }
  ///  Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.
  ///  Example: /// Example: OPERATEDONBEHALFOFORG-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var operatedOnBehalfOfOrgId: String? { let o = _accessor.offset(VTOFFSET.operatedOnBehalfOfOrgId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var operatedOnBehalfOfOrgIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.operatedOnBehalfOfOrgId.v) }
  ///  GEO position longitude at event time if applicable. Negative values are west.
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var geoPosition: Double { let o = _accessor.offset(VTOFFSET.geoPosition.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  GEO plane slot of the spacecraft at event time.
  ///  Example: /// Example: example_slot
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var planeSlot: String? { let o = _accessor.offset(VTOFFSET.planeSlot.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var planeSlotSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.planeSlot.v) }
  ///  GEO slot plane number/designator of the spacecraft at event time.
  ///  Example: /// Example: PL_1
  ///  Constraints: Minimum length = 0, Maximum length = 4
  public var planeNumber: String? { let o = _accessor.offset(VTOFFSET.planeNumber.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var planeNumberSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.planeNumber.v) }
  ///  Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).
  ///  Example: /// Example: Stable
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var positionStatus: String? { let o = _accessor.offset(VTOFFSET.positionStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var positionStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.positionStatus.v) }
  ///  Maximum validity time of the event.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var untilTime: String? { let o = _accessor.offset(VTOFFSET.untilTime.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var untilTimeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.untilTime.v) }
  ///  Date time of official loss of the spacecraft.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  public var officialLossDate: String? { let o = _accessor.offset(VTOFFSET.officialLossDate.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var officialLossDateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.officialLossDate.v) }
  ///  Net amount of the insurance claim for the event, in USD.
  ///  Example: /// Example: 10000.23
  ///  Constraints: No constraints specified.
  public var netAmount: Double { let o = _accessor.offset(VTOFFSET.netAmount.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Underlying cause of the event.
  ///  Example: /// Example: CAUSE_EXAMPLE
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var underlyingCause: String? { let o = _accessor.offset(VTOFFSET.underlyingCause.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var underlyingCauseSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.underlyingCause.v) }
  ///  Spacecraft capability loss incurred, as a fraction of 1.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var capabilityLoss: Double { let o = _accessor.offset(VTOFFSET.capabilityLoss.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft capacity loss incurred, as a fraction of 1.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var capacityLoss: Double { let o = _accessor.offset(VTOFFSET.capacityLoss.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Insurance loss incurred, as a fraction of 1.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var insuranceLoss: Double { let o = _accessor.offset(VTOFFSET.insuranceLoss.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Insurance loss incurred by 3rd party insurance, in USD.
  ///  Example: /// Example: 10000.23
  ///  Constraints: No constraints specified.
  public var thirdPartyInsuranceLoss: Double { let o = _accessor.offset(VTOFFSET.thirdPartyInsuranceLoss.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Number of humans injured in the event.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  public var injured: Int32 { let o = _accessor.offset(VTOFFSET.injured.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Number of humans killed in the event.
  ///  Example: /// Example: 23
  ///  Constraints: No constraints specified.
  public var killed: Int32 { let o = _accessor.offset(VTOFFSET.killed.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Spacecraft life lost due to the event as a percent/fraction of 1.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  public var lifeLost: Double { let o = _accessor.offset(VTOFFSET.lifeLost.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft age at the event in years.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  public var ageAtEvent: Double { let o = _accessor.offset(VTOFFSET.ageAtEvent.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Achieved phase of flight prior to the event.
  ///  Example: /// Example: Phase 2
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var achievedFlightPhase: String? { let o = _accessor.offset(VTOFFSET.achievedFlightPhase.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var achievedFlightPhaseSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.achievedFlightPhase.v) }
  ///  Phase of flight during which the event occurred.
  ///  Example: /// Example: Phase 2
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var occurrenceFlightPhase: String? { let o = _accessor.offset(VTOFFSET.occurrenceFlightPhase.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var occurrenceFlightPhaseSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.occurrenceFlightPhase.v) }
  ///  Faulty stage of flight for the event.
  ///  Example: /// Example: Phase 2
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var stageAtFault: String? { let o = _accessor.offset(VTOFFSET.stageAtFault.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var stageAtFaultSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.stageAtFault.v) }
  ///  Equipment on the spacecraft which caused the event.
  ///  Example: /// Example: Example Equipment
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var equipmentAtFault: String? { let o = _accessor.offset(VTOFFSET.equipmentAtFault.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var equipmentAtFaultSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.equipmentAtFault.v) }
  ///  Type of the equipment on the spacecraft which caused the event.
  ///  Example: /// Example: Example Equipment
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var equipmentTypeAtFault: String? { let o = _accessor.offset(VTOFFSET.equipmentTypeAtFault.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var equipmentTypeAtFaultSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.equipmentTypeAtFault.v) }
  ///  Specific part of the equipment on the spacecraft which caused the event.
  ///  Example: /// Example: Example Equipment
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var equipmentPartAtFault: String? { let o = _accessor.offset(VTOFFSET.equipmentPartAtFault.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var equipmentPartAtFaultSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.equipmentPartAtFault.v) }
  ///  Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.
  ///  Example: /// Example: Example Equipment
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var consequentialEquipmentFailure: String? { let o = _accessor.offset(VTOFFSET.consequentialEquipmentFailure.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var consequentialEquipmentFailureSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.consequentialEquipmentFailure.v) }
  ///  Boolean indicating if the spacecraft is inclined.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  public var inclined: Bool { let o = _accessor.offset(VTOFFSET.inclined.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Notes/description of the event.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 256
  public var description: String? { let o = _accessor.offset(VTOFFSET.description.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.description.v) }
  ///  Additional remarks on the event description.
  ///  Example: /// Example: Example remarks
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var remarks: String? { let o = _accessor.offset(VTOFFSET.remarks.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var remarksSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.remarks.v) }
  ///  Additional insurance notes if the event is an official loss.
  ///  Example: /// Example: Insurance notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var insuranceLossNotes: String? { let o = _accessor.offset(VTOFFSET.insuranceLossNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var insuranceLossNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.insuranceLossNotes.v) }
  ///  Notes on capability loss at the time of event.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var capabilityLossNotes: String? { let o = _accessor.offset(VTOFFSET.capabilityLossNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var capabilityLossNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.capabilityLossNotes.v) }
  ///  Additional insurance notes on coverages at the time of event.
  ///  Example: /// Example: Insurance notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var insuranceCarriedNotes: String? { let o = _accessor.offset(VTOFFSET.insuranceCarriedNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var insuranceCarriedNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.insuranceCarriedNotes.v) }
  ///  Additional notes on the equipment causing the event/loss.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 512
  public var equipmentCausingLossNotes: String? { let o = _accessor.offset(VTOFFSET.equipmentCausingLossNotes.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var equipmentCausingLossNotesSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.equipmentCausingLossNotes.v) }
  ///  The type of on-orbit event being reported.
  ///  Example: /// Example: Type1
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var eventType: String? { let o = _accessor.offset(VTOFFSET.eventType.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eventTypeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eventType.v) }
  ///  The result of the reported event.
  ///  Example: /// Example: Example results
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var eventResult: String? { let o = _accessor.offset(VTOFFSET.eventResult.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var eventResultSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.eventResult.v) }
  ///  The status of the on-orbit object.
  ///  Example: /// Example: Status1
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var objectStatus: String? { let o = _accessor.offset(VTOFFSET.objectStatus.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var objectStatusSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.objectStatus.v) }
  ///  Description of the satellite orbital position or regime.
  ///  Example: /// Example: Example description
  ///  Constraints: Minimum length = 0, Maximum length = 128
  public var satellitePosition: String? { let o = _accessor.offset(VTOFFSET.satellitePosition.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var satellitePositionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.satellitePosition.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: OnorbitEvent_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : OnorbitEvent_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startOnorbitEvent_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 54) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(derivedFrom: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: derivedFrom, at: VTOFFSET.derivedFrom.p) }
  public static func add(declassificationDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: declassificationDate, at: VTOFFSET.declassificationDate.p) }
  public static func add(declassificationString: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: declassificationString, at: VTOFFSET.declassificationString.p) }
  public static func add(idOnOrbit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: idOnOrbit, at: VTOFFSET.idOnOrbit.p) }
  public static func add(satNo: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: satNo, def: 0, at: VTOFFSET.satNo.p) }
  public static func add(origObjectId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origObjectId, at: VTOFFSET.origObjectId.p) }
  public static func add(eventTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eventTime, at: VTOFFSET.eventTime.p) }
  public static func add(eventTimeNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eventTimeNotes, at: VTOFFSET.eventTimeNotes.p) }
  public static func add(operatorOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: operatorOrgId, at: VTOFFSET.operatorOrgId.p) }
  public static func add(ownerOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ownerOrgId, at: VTOFFSET.ownerOrgId.p) }
  public static func add(lesseeOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lesseeOrgId, at: VTOFFSET.lesseeOrgId.p) }
  public static func add(operatedOnBehalfOfOrgId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: operatedOnBehalfOfOrgId, at: VTOFFSET.operatedOnBehalfOfOrgId.p) }
  public static func add(geoPosition: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: geoPosition, def: 0.0, at: VTOFFSET.geoPosition.p) }
  public static func add(planeSlot: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: planeSlot, at: VTOFFSET.planeSlot.p) }
  public static func add(planeNumber: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: planeNumber, at: VTOFFSET.planeNumber.p) }
  public static func add(positionStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: positionStatus, at: VTOFFSET.positionStatus.p) }
  public static func add(untilTime: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: untilTime, at: VTOFFSET.untilTime.p) }
  public static func add(officialLossDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: officialLossDate, at: VTOFFSET.officialLossDate.p) }
  public static func add(netAmount: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: netAmount, def: 0.0, at: VTOFFSET.netAmount.p) }
  public static func add(underlyingCause: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: underlyingCause, at: VTOFFSET.underlyingCause.p) }
  public static func add(capabilityLoss: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: capabilityLoss, def: 0.0, at: VTOFFSET.capabilityLoss.p) }
  public static func add(capacityLoss: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: capacityLoss, def: 0.0, at: VTOFFSET.capacityLoss.p) }
  public static func add(insuranceLoss: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: insuranceLoss, def: 0.0, at: VTOFFSET.insuranceLoss.p) }
  public static func add(thirdPartyInsuranceLoss: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: thirdPartyInsuranceLoss, def: 0.0, at: VTOFFSET.thirdPartyInsuranceLoss.p) }
  public static func add(injured: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: injured, def: 0, at: VTOFFSET.injured.p) }
  public static func add(killed: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: killed, def: 0, at: VTOFFSET.killed.p) }
  public static func add(lifeLost: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lifeLost, def: 0.0, at: VTOFFSET.lifeLost.p) }
  public static func add(ageAtEvent: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ageAtEvent, def: 0.0, at: VTOFFSET.ageAtEvent.p) }
  public static func add(achievedFlightPhase: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: achievedFlightPhase, at: VTOFFSET.achievedFlightPhase.p) }
  public static func add(occurrenceFlightPhase: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: occurrenceFlightPhase, at: VTOFFSET.occurrenceFlightPhase.p) }
  public static func add(stageAtFault: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: stageAtFault, at: VTOFFSET.stageAtFault.p) }
  public static func add(equipmentAtFault: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: equipmentAtFault, at: VTOFFSET.equipmentAtFault.p) }
  public static func add(equipmentTypeAtFault: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: equipmentTypeAtFault, at: VTOFFSET.equipmentTypeAtFault.p) }
  public static func add(equipmentPartAtFault: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: equipmentPartAtFault, at: VTOFFSET.equipmentPartAtFault.p) }
  public static func add(consequentialEquipmentFailure: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: consequentialEquipmentFailure, at: VTOFFSET.consequentialEquipmentFailure.p) }
  public static func add(inclined: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: inclined, def: false,
   at: VTOFFSET.inclined.p) }
  public static func add(description: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: description, at: VTOFFSET.description.p) }
  public static func add(remarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: remarks, at: VTOFFSET.remarks.p) }
  public static func add(insuranceLossNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: insuranceLossNotes, at: VTOFFSET.insuranceLossNotes.p) }
  public static func add(capabilityLossNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: capabilityLossNotes, at: VTOFFSET.capabilityLossNotes.p) }
  public static func add(insuranceCarriedNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: insuranceCarriedNotes, at: VTOFFSET.insuranceCarriedNotes.p) }
  public static func add(equipmentCausingLossNotes: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: equipmentCausingLossNotes, at: VTOFFSET.equipmentCausingLossNotes.p) }
  public static func add(eventType: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eventType, at: VTOFFSET.eventType.p) }
  public static func add(eventResult: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: eventResult, at: VTOFFSET.eventResult.p) }
  public static func add(objectStatus: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: objectStatus, at: VTOFFSET.objectStatus.p) }
  public static func add(satellitePosition: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: satellitePosition, at: VTOFFSET.satellitePosition.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: OnorbitEvent_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endOnorbitEvent_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createOnorbitEvent_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    derivedFromOffset derivedFrom: Offset = Offset(),
    declassificationDateOffset declassificationDate: Offset = Offset(),
    declassificationStringOffset declassificationString: Offset = Offset(),
    idOnOrbitOffset idOnOrbit: Offset = Offset(),
    satNo: Int32 = 0,
    origObjectIdOffset origObjectId: Offset = Offset(),
    eventTimeOffset eventTime: Offset = Offset(),
    eventTimeNotesOffset eventTimeNotes: Offset = Offset(),
    operatorOrgIdOffset operatorOrgId: Offset = Offset(),
    ownerOrgIdOffset ownerOrgId: Offset = Offset(),
    lesseeOrgIdOffset lesseeOrgId: Offset = Offset(),
    operatedOnBehalfOfOrgIdOffset operatedOnBehalfOfOrgId: Offset = Offset(),
    geoPosition: Double = 0.0,
    planeSlotOffset planeSlot: Offset = Offset(),
    planeNumberOffset planeNumber: Offset = Offset(),
    positionStatusOffset positionStatus: Offset = Offset(),
    untilTimeOffset untilTime: Offset = Offset(),
    officialLossDateOffset officialLossDate: Offset = Offset(),
    netAmount: Double = 0.0,
    underlyingCauseOffset underlyingCause: Offset = Offset(),
    capabilityLoss: Double = 0.0,
    capacityLoss: Double = 0.0,
    insuranceLoss: Double = 0.0,
    thirdPartyInsuranceLoss: Double = 0.0,
    injured: Int32 = 0,
    killed: Int32 = 0,
    lifeLost: Double = 0.0,
    ageAtEvent: Double = 0.0,
    achievedFlightPhaseOffset achievedFlightPhase: Offset = Offset(),
    occurrenceFlightPhaseOffset occurrenceFlightPhase: Offset = Offset(),
    stageAtFaultOffset stageAtFault: Offset = Offset(),
    equipmentAtFaultOffset equipmentAtFault: Offset = Offset(),
    equipmentTypeAtFaultOffset equipmentTypeAtFault: Offset = Offset(),
    equipmentPartAtFaultOffset equipmentPartAtFault: Offset = Offset(),
    consequentialEquipmentFailureOffset consequentialEquipmentFailure: Offset = Offset(),
    inclined: Bool = false,
    descriptionOffset description: Offset = Offset(),
    remarksOffset remarks: Offset = Offset(),
    insuranceLossNotesOffset insuranceLossNotes: Offset = Offset(),
    capabilityLossNotesOffset capabilityLossNotes: Offset = Offset(),
    insuranceCarriedNotesOffset insuranceCarriedNotes: Offset = Offset(),
    equipmentCausingLossNotesOffset equipmentCausingLossNotes: Offset = Offset(),
    eventTypeOffset eventType: Offset = Offset(),
    eventResultOffset eventResult: Offset = Offset(),
    objectStatusOffset objectStatus: Offset = Offset(),
    satellitePositionOffset satellitePosition: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: OnorbitEvent_Ingest_dataMode_Enum = .real,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = OnorbitEvent_Ingest.startOnorbitEvent_Ingest(&fbb)
    OnorbitEvent_Ingest.add(id: id, &fbb)
    OnorbitEvent_Ingest.add(classificationMarking: classificationMarking, &fbb)
    OnorbitEvent_Ingest.add(derivedFrom: derivedFrom, &fbb)
    OnorbitEvent_Ingest.add(declassificationDate: declassificationDate, &fbb)
    OnorbitEvent_Ingest.add(declassificationString: declassificationString, &fbb)
    OnorbitEvent_Ingest.add(idOnOrbit: idOnOrbit, &fbb)
    OnorbitEvent_Ingest.add(satNo: satNo, &fbb)
    OnorbitEvent_Ingest.add(origObjectId: origObjectId, &fbb)
    OnorbitEvent_Ingest.add(eventTime: eventTime, &fbb)
    OnorbitEvent_Ingest.add(eventTimeNotes: eventTimeNotes, &fbb)
    OnorbitEvent_Ingest.add(operatorOrgId: operatorOrgId, &fbb)
    OnorbitEvent_Ingest.add(ownerOrgId: ownerOrgId, &fbb)
    OnorbitEvent_Ingest.add(lesseeOrgId: lesseeOrgId, &fbb)
    OnorbitEvent_Ingest.add(operatedOnBehalfOfOrgId: operatedOnBehalfOfOrgId, &fbb)
    OnorbitEvent_Ingest.add(geoPosition: geoPosition, &fbb)
    OnorbitEvent_Ingest.add(planeSlot: planeSlot, &fbb)
    OnorbitEvent_Ingest.add(planeNumber: planeNumber, &fbb)
    OnorbitEvent_Ingest.add(positionStatus: positionStatus, &fbb)
    OnorbitEvent_Ingest.add(untilTime: untilTime, &fbb)
    OnorbitEvent_Ingest.add(officialLossDate: officialLossDate, &fbb)
    OnorbitEvent_Ingest.add(netAmount: netAmount, &fbb)
    OnorbitEvent_Ingest.add(underlyingCause: underlyingCause, &fbb)
    OnorbitEvent_Ingest.add(capabilityLoss: capabilityLoss, &fbb)
    OnorbitEvent_Ingest.add(capacityLoss: capacityLoss, &fbb)
    OnorbitEvent_Ingest.add(insuranceLoss: insuranceLoss, &fbb)
    OnorbitEvent_Ingest.add(thirdPartyInsuranceLoss: thirdPartyInsuranceLoss, &fbb)
    OnorbitEvent_Ingest.add(injured: injured, &fbb)
    OnorbitEvent_Ingest.add(killed: killed, &fbb)
    OnorbitEvent_Ingest.add(lifeLost: lifeLost, &fbb)
    OnorbitEvent_Ingest.add(ageAtEvent: ageAtEvent, &fbb)
    OnorbitEvent_Ingest.add(achievedFlightPhase: achievedFlightPhase, &fbb)
    OnorbitEvent_Ingest.add(occurrenceFlightPhase: occurrenceFlightPhase, &fbb)
    OnorbitEvent_Ingest.add(stageAtFault: stageAtFault, &fbb)
    OnorbitEvent_Ingest.add(equipmentAtFault: equipmentAtFault, &fbb)
    OnorbitEvent_Ingest.add(equipmentTypeAtFault: equipmentTypeAtFault, &fbb)
    OnorbitEvent_Ingest.add(equipmentPartAtFault: equipmentPartAtFault, &fbb)
    OnorbitEvent_Ingest.add(consequentialEquipmentFailure: consequentialEquipmentFailure, &fbb)
    OnorbitEvent_Ingest.add(inclined: inclined, &fbb)
    OnorbitEvent_Ingest.add(description: description, &fbb)
    OnorbitEvent_Ingest.add(remarks: remarks, &fbb)
    OnorbitEvent_Ingest.add(insuranceLossNotes: insuranceLossNotes, &fbb)
    OnorbitEvent_Ingest.add(capabilityLossNotes: capabilityLossNotes, &fbb)
    OnorbitEvent_Ingest.add(insuranceCarriedNotes: insuranceCarriedNotes, &fbb)
    OnorbitEvent_Ingest.add(equipmentCausingLossNotes: equipmentCausingLossNotes, &fbb)
    OnorbitEvent_Ingest.add(eventType: eventType, &fbb)
    OnorbitEvent_Ingest.add(eventResult: eventResult, &fbb)
    OnorbitEvent_Ingest.add(objectStatus: objectStatus, &fbb)
    OnorbitEvent_Ingest.add(satellitePosition: satellitePosition, &fbb)
    OnorbitEvent_Ingest.add(source: source, &fbb)
    OnorbitEvent_Ingest.add(origin: origin, &fbb)
    OnorbitEvent_Ingest.add(dataMode: dataMode, &fbb)
    OnorbitEvent_Ingest.add(createdAt: createdAt, &fbb)
    OnorbitEvent_Ingest.add(createdBy: createdBy, &fbb)
    OnorbitEvent_Ingest.add(origNetwork: origNetwork, &fbb)
    return OnorbitEvent_Ingest.endOnorbitEvent_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.derivedFrom.p, fieldName: "derivedFrom", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.declassificationDate.p, fieldName: "declassificationDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.declassificationString.p, fieldName: "declassificationString", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.idOnOrbit.p, fieldName: "idOnOrbit", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satNo.p, fieldName: "satNo", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.origObjectId.p, fieldName: "origObjectId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eventTime.p, fieldName: "eventTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eventTimeNotes.p, fieldName: "eventTimeNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.operatorOrgId.p, fieldName: "operatorOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ownerOrgId.p, fieldName: "ownerOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lesseeOrgId.p, fieldName: "lesseeOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.operatedOnBehalfOfOrgId.p, fieldName: "operatedOnBehalfOfOrgId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.geoPosition.p, fieldName: "geoPosition", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.planeSlot.p, fieldName: "planeSlot", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.planeNumber.p, fieldName: "planeNumber", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.positionStatus.p, fieldName: "positionStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.untilTime.p, fieldName: "untilTime", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.officialLossDate.p, fieldName: "officialLossDate", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.netAmount.p, fieldName: "netAmount", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.underlyingCause.p, fieldName: "underlyingCause", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.capabilityLoss.p, fieldName: "capabilityLoss", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.capacityLoss.p, fieldName: "capacityLoss", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.insuranceLoss.p, fieldName: "insuranceLoss", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.thirdPartyInsuranceLoss.p, fieldName: "thirdPartyInsuranceLoss", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.injured.p, fieldName: "injured", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.killed.p, fieldName: "killed", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.lifeLost.p, fieldName: "lifeLost", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ageAtEvent.p, fieldName: "ageAtEvent", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.achievedFlightPhase.p, fieldName: "achievedFlightPhase", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.occurrenceFlightPhase.p, fieldName: "occurrenceFlightPhase", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.stageAtFault.p, fieldName: "stageAtFault", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.equipmentAtFault.p, fieldName: "equipmentAtFault", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.equipmentTypeAtFault.p, fieldName: "equipmentTypeAtFault", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.equipmentPartAtFault.p, fieldName: "equipmentPartAtFault", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.consequentialEquipmentFailure.p, fieldName: "consequentialEquipmentFailure", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.inclined.p, fieldName: "inclined", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.description.p, fieldName: "description", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.remarks.p, fieldName: "remarks", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.insuranceLossNotes.p, fieldName: "insuranceLossNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.capabilityLossNotes.p, fieldName: "capabilityLossNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.insuranceCarriedNotes.p, fieldName: "insuranceCarriedNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.equipmentCausingLossNotes.p, fieldName: "equipmentCausingLossNotes", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eventType.p, fieldName: "eventType", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.eventResult.p, fieldName: "eventResult", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.objectStatus.p, fieldName: "objectStatus", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.satellitePosition.p, fieldName: "satellitePosition", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: OnorbitEvent_Ingest_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

