// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum MissionAssignment_Ingest_dataMode_Enum: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  case real = 0
  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  case test = 1
  ///  Synthetic data generated by a model to mimic real-world datasets.
  case simulated = 2
  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  case exercise = 3

  public static var max: MissionAssignment_Ingest_dataMode_Enum { return .exercise }
  public static var min: MissionAssignment_Ingest_dataMode_Enum { return .real }
}


///  /// Platform mission assignment data.
public struct MissionAssignment_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "MISS" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: MissionAssignment_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case id = 4
    case classificationMarking = 6
    case trkId = 8
    case ts = 10
    case mad = 12
    case rc = 14
    case rr = 16
    case tno = 18
    case twenv = 20
    case lat = 22
    case lon = 24
    case orginx = 26
    case env = 28
    case sz = 30
    case index = 32
    case c1associateddmpis = 34
    case c2spc = 36
    case c2air = 38
    case c2sur = 40
    case c2lnd = 42
    case c2id = 44
    case c2idamplifyingdescriptor = 46
    case c2alt = 48
    case c2crs = 50
    case c2spd = 52
    case c2specialinterestindicator = 54
    case c2exerciseindicator = 56
    case c2exercisemof = 58
    case c3lat = 60
    case c3lon = 62
    case c3elv = 64
    case c3ptl = 66
    case c3ptnum = 68
    case c4tgt = 70
    case c4def = 72
    case c4runin = 74
    case c4egress = 76
    case c4numberofstores = 78
    case c4typeofstores = 80
    case c4timediscrete = 82
    case c4tm = 84
    case c4colon = 86
    case c4mod = 88
    case c5haeadj = 90
    case c5tw = 92
    case c5tgtbrng = 94
    case c5latlsb = 96
    case c5lonlsb = 98
    case c5elevationlsbs = 100
    case c5colon = 102
    case c6laser = 104
    case c6intel = 106
    case c6tnr3 = 108
    case c6dspct = 110
    case c6dspc = 112
    case c6fplpm = 114
    case c6longpm = 116
    case c7tnor = 118
    case c7in3p = 120
    case c7elang2 = 122
    case createdAt = 124
    case createdBy = 126
    case source = 128
    case origin = 130
    case dataMode = 132
    case origNetwork = 134
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: MISSIONASSIGNMENT-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  public var id: String? { let o = _accessor.offset(VTOFFSET.id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  public var classificationMarking: String? { let o = _accessor.offset(VTOFFSET.classificationMarking.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var classificationMarkingSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.classificationMarking.v) }
  ///  The track ID that the status is referencing, addressee.
  ///  Example: /// Example: TRK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  public var trkId: String? { let o = _accessor.offset(VTOFFSET.trkId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var trkIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.trkId.v) }
  ///  The timestamp of the mission data, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  public var ts: String? { let o = _accessor.offset(VTOFFSET.ts.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tsSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ts.v) }
  ///  The mission assignment discrete value.
  ///  Example: /// Example: MAD
  ///  Constraints: Minimum length = 1, Maximum length = 16
  public var mad: String? { let o = _accessor.offset(VTOFFSET.mad.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var madSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.mad.v) }
  ///  Receipt/Compliance, values from TABLE B-9.
  ///  Example: /// Example: RC-123
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var rc: String? { let o = _accessor.offset(VTOFFSET.rc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var rcSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.rc.v) }
  ///  Recurrence rate, receipt/compliance.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var rr: Int32 { let o = _accessor.offset(VTOFFSET.rr.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Track number objective.
  ///  Example: /// Example: TRACK_NUMBER
  ///  Constraints: No constraints specified.
  public var tno: String? { let o = _accessor.offset(VTOFFSET.tno.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var tnoSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.tno.v) }
  ///  Threat warning environment.
  ///  Example: /// Example: THREAT_WARNING
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var twenv: String? { let o = _accessor.offset(VTOFFSET.twenv.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var twenvSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.twenv.v) }
  ///  WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var lat: Double { let o = _accessor.offset(VTOFFSET.lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  public var lon: Double { let o = _accessor.offset(VTOFFSET.lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Origin of index number.
  ///  Example: /// Example: ORIGIN
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var orginx: String? { let o = _accessor.offset(VTOFFSET.orginx.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var orginxSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.orginx.v) }
  ///  Environment.
  ///  Example: /// Example: ENV
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var env: String? { let o = _accessor.offset(VTOFFSET.env.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var envSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.env.v) }
  ///  Strength.
  ///  Example: /// Example: STRENGTH
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var sz: String? { let o = _accessor.offset(VTOFFSET.sz.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var szSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sz.v) }
  ///  Index number.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var index: Int32 { let o = _accessor.offset(VTOFFSET.index.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  TARGET POSITION CONTINUATION WORD - number of associated dmpis.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var c1associateddmpis: Int32 { let o = _accessor.offset(VTOFFSET.c1associateddmpis.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.
  ///  Example: /// Example: C2SPC
  ///  Constraints: No constraints specified.
  public var c2spc: String? { let o = _accessor.offset(VTOFFSET.c2spc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c2spcSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c2spc.v) }
  ///  TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.
  ///  Example: /// Example: C2AIR
  ///  Constraints: No constraints specified.
  public var c2air: String? { let o = _accessor.offset(VTOFFSET.c2air.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c2airSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c2air.v) }
  ///  TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.
  ///  Example: /// Example: C2SUR
  ///  Constraints: No constraints specified.
  public var c2sur: String? { let o = _accessor.offset(VTOFFSET.c2sur.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c2surSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c2sur.v) }
  ///  TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.
  ///  Example: /// Example: C2LND
  ///  Constraints: No constraints specified.
  public var c2lnd: String? { let o = _accessor.offset(VTOFFSET.c2lnd.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c2lndSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c2lnd.v) }
  ///  TARGET DATA CONTINUATION WORD - identity.
  ///  Example: /// Example: C2ID
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var c2id: String? { let o = _accessor.offset(VTOFFSET.c2id.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c2idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c2id.v) }
  ///  TARGET DATA CONTINUATION WORD - identity amplifying descriptor.
  ///  Example: /// Example: C2IDAMP
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var c2idamplifyingdescriptor: String? { let o = _accessor.offset(VTOFFSET.c2idamplifyingdescriptor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c2idamplifyingdescriptorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c2idamplifyingdescriptor.v) }
  ///  TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var c2alt: Int32 { let o = _accessor.offset(VTOFFSET.c2alt.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  TARGET DATA CONTINUATION WORD - course in increments of 1 degree.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var c2crs: Int32 { let o = _accessor.offset(VTOFFSET.c2crs.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var c2spd: Int32 { let o = _accessor.offset(VTOFFSET.c2spd.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  TARGET DATA CONTINUATION WORD - special interest indicator.
  ///  Example: /// Example: C2SPECIAL
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var c2specialinterestindicator: String? { let o = _accessor.offset(VTOFFSET.c2specialinterestindicator.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c2specialinterestindicatorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c2specialinterestindicator.v) }
  ///  TARGET DATA CONTINUATION WORD - exercise indicator.
  ///  Example: /// Example: C2EXERCISE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var c2exerciseindicator: String? { let o = _accessor.offset(VTOFFSET.c2exerciseindicator.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c2exerciseindicatorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c2exerciseindicator.v) }
  ///  TARGET DATA CONTINUATION WORD - method of fire.
  ///  Example: /// Example: MOF
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var c2exercisemof: String? { let o = _accessor.offset(VTOFFSET.c2exercisemof.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c2exercisemofSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c2exercisemof.v) }
  ///  POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var c3lat: Double { let o = _accessor.offset(VTOFFSET.c3lat.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var c3lon: Double { let o = _accessor.offset(VTOFFSET.c3lon.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  public var c3elv: Double { let o = _accessor.offset(VTOFFSET.c3elv.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  TARGET DATA CONTINUATION WORD - point type 1.
  ///  Example: /// Example: C3PTL
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var c3ptl: String? { let o = _accessor.offset(VTOFFSET.c3ptl.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c3ptlSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c3ptl.v) }
  ///  TARGET DATA CONTINUATION WORD - point number.
  ///  Example: /// Example: C3PTNUM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var c3ptnum: String? { let o = _accessor.offset(VTOFFSET.c3ptnum.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c3ptnumSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c3ptnum.v) }
  ///  SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.
  ///  Example: /// Example: C4TGT
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var c4tgt: String? { let o = _accessor.offset(VTOFFSET.c4tgt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c4tgtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c4tgt.v) }
  ///  SURFACE ATTACK CONTINUATION WORD - target defenses.
  ///  Example: /// Example: C4DEF
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var c4def: String? { let o = _accessor.offset(VTOFFSET.c4def.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c4defSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c4def.v) }
  ///  SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var c4runin: Int32 { let o = _accessor.offset(VTOFFSET.c4runin.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  public var c4egress: Int32 { let o = _accessor.offset(VTOFFSET.c4egress.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var c4numberofstores: Int32 { let o = _accessor.offset(VTOFFSET.c4numberofstores.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  SURFACE ATTACK CONTINUATION WORD - type of stores.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  public var c4typeofstores: Int32 { let o = _accessor.offset(VTOFFSET.c4typeofstores.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  SURFACE ATTACK CONTINUATION WORD - time discrete.
  ///  Example: /// Example: C4TIMED
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var c4timediscrete: String? { let o = _accessor.offset(VTOFFSET.c4timediscrete.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c4timediscreteSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c4timediscrete.v) }
  ///  SURFACE ATTACK CONTINUATION WORD - hour.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  public var c4tm: Int32 { let o = _accessor.offset(VTOFFSET.c4tm.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  SURFACE ATTACK CONTINUATION WORD - minute.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var c4colon: Int32 { let o = _accessor.offset(VTOFFSET.c4colon.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  SURFACE ATTACK CONTINUATION WORD - mode of delivery.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var c4mod: Int32 { let o = _accessor.offset(VTOFFSET.c4mod.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  CONTINUATION WORD - hae adjustment, measured in 3.125 FT.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var c5haeadj: Int32 { let o = _accessor.offset(VTOFFSET.c5haeadj.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  CONTINUATION WORD - time window.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var c5tw: Int32 { let o = _accessor.offset(VTOFFSET.c5tw.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  CONTINUATION WORD - target bearing.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var c5tgtbrng: Int32 { let o = _accessor.offset(VTOFFSET.c5tgtbrng.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var c5latlsb: Int32 { let o = _accessor.offset(VTOFFSET.c5latlsb.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var c5lonlsb: Int32 { let o = _accessor.offset(VTOFFSET.c5lonlsb.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var c5elevationlsbs: Int32 { let o = _accessor.offset(VTOFFSET.c5elevationlsbs.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var c5colon: Int32 { let o = _accessor.offset(VTOFFSET.c5colon.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  TARGETING CONTINUATION WORD - laser illuminator code.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var c6laser: Int32 { let o = _accessor.offset(VTOFFSET.c6laser.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  TARGETING CONTINUATION WORD - index number, related, 0=NS.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var c6intel: Int32 { let o = _accessor.offset(VTOFFSET.c6intel.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  TARGETING CONTINUATION WORD - track number, related to 3.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  public var c6tnr3: Int32 { let o = _accessor.offset(VTOFFSET.c6tnr3.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  TARGETING CONTINUATION WORD - designator/seeker pulse code type.
  ///  Example: /// Example: C6DSPCT
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var c6dspct: String? { let o = _accessor.offset(VTOFFSET.c6dspct.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c6dspctSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c6dspct.v) }
  ///  TARGETING CONTINUATION WORD - designator/seeker pulse code.
  ///  Example: /// Example: C6DSPC
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var c6dspc: String? { let o = _accessor.offset(VTOFFSET.c6dspc.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c6dspcSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c6dspc.v) }
  ///  TARGETING CONTINUATION WORD - first pulse/last pulse mode.
  ///  Example: /// Example: C6FPLPM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var c6fplpm: String? { let o = _accessor.offset(VTOFFSET.c6fplpm.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c6fplpmSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c6fplpm.v) }
  ///  TARGETING CONTINUATION WORD - long pulse mode.
  ///  Example: /// Example: C6LONGPM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  public var c6longpm: String? { let o = _accessor.offset(VTOFFSET.c6longpm.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c6longpmSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c6longpm.v) }
  ///  THIRD PARTY CONTINUATION WORD  - track number, index originator.
  ///  Example: /// Example: C7TNOR
  ///  Constraints: No constraints specified.
  public var c7tnor: String? { let o = _accessor.offset(VTOFFSET.c7tnor.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var c7tnorSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.c7tnor.v) }
  ///  THIRD PARTY CONTINUATION WORD  - index number, third party.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  public var c7in3p: Int32 { let o = _accessor.offset(VTOFFSET.c7in3p.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  THIRD PARTY CONTINUATION WORD  - elevation angle, 2.
  ///  Example: /// Example: 5.23
  ///  Constraints: No constraints specified.
  public var c7elang2: Double { let o = _accessor.offset(VTOFFSET.c7elang2.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  public var createdAt: String? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdAtSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdAt.v) }
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var createdBy: String? { let o = _accessor.offset(VTOFFSET.createdBy.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var createdBySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.createdBy.v) }
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  public var source: String? { let o = _accessor.offset(VTOFFSET.source.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.source.v) }
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  public var origin: String? { let o = _accessor.offset(VTOFFSET.origin.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var originSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origin.v) }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var dataMode: MissionAssignment_Ingest_dataMode_Enum { let o = _accessor.offset(VTOFFSET.dataMode.v); return o == 0 ? .real : MissionAssignment_Ingest_dataMode_Enum(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .real }
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  public var origNetwork: String? { let o = _accessor.offset(VTOFFSET.origNetwork.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var origNetworkSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.origNetwork.v) }
  public static func startMissionAssignment_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 66) }
  public static func add(id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: id, at: VTOFFSET.id.p) }
  public static func add(classificationMarking: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: classificationMarking, at: VTOFFSET.classificationMarking.p) }
  public static func add(trkId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: trkId, at: VTOFFSET.trkId.p) }
  public static func add(ts: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ts, at: VTOFFSET.ts.p) }
  public static func add(mad: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mad, at: VTOFFSET.mad.p) }
  public static func add(rc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rc, at: VTOFFSET.rc.p) }
  public static func add(rr: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rr, def: 0, at: VTOFFSET.rr.p) }
  public static func add(tno: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tno, at: VTOFFSET.tno.p) }
  public static func add(twenv: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: twenv, at: VTOFFSET.twenv.p) }
  public static func add(lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lat, def: 0.0, at: VTOFFSET.lat.p) }
  public static func add(lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lon, def: 0.0, at: VTOFFSET.lon.p) }
  public static func add(orginx: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: orginx, at: VTOFFSET.orginx.p) }
  public static func add(env: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: env, at: VTOFFSET.env.p) }
  public static func add(sz: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sz, at: VTOFFSET.sz.p) }
  public static func add(index: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: index, def: 0, at: VTOFFSET.index.p) }
  public static func add(c1associateddmpis: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c1associateddmpis, def: 0, at: VTOFFSET.c1associateddmpis.p) }
  public static func add(c2spc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c2spc, at: VTOFFSET.c2spc.p) }
  public static func add(c2air: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c2air, at: VTOFFSET.c2air.p) }
  public static func add(c2sur: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c2sur, at: VTOFFSET.c2sur.p) }
  public static func add(c2lnd: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c2lnd, at: VTOFFSET.c2lnd.p) }
  public static func add(c2id: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c2id, at: VTOFFSET.c2id.p) }
  public static func add(c2idamplifyingdescriptor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c2idamplifyingdescriptor, at: VTOFFSET.c2idamplifyingdescriptor.p) }
  public static func add(c2alt: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c2alt, def: 0, at: VTOFFSET.c2alt.p) }
  public static func add(c2crs: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c2crs, def: 0, at: VTOFFSET.c2crs.p) }
  public static func add(c2spd: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c2spd, def: 0, at: VTOFFSET.c2spd.p) }
  public static func add(c2specialinterestindicator: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c2specialinterestindicator, at: VTOFFSET.c2specialinterestindicator.p) }
  public static func add(c2exerciseindicator: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c2exerciseindicator, at: VTOFFSET.c2exerciseindicator.p) }
  public static func add(c2exercisemof: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c2exercisemof, at: VTOFFSET.c2exercisemof.p) }
  public static func add(c3lat: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c3lat, def: 0.0, at: VTOFFSET.c3lat.p) }
  public static func add(c3lon: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c3lon, def: 0.0, at: VTOFFSET.c3lon.p) }
  public static func add(c3elv: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c3elv, def: 0.0, at: VTOFFSET.c3elv.p) }
  public static func add(c3ptl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c3ptl, at: VTOFFSET.c3ptl.p) }
  public static func add(c3ptnum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c3ptnum, at: VTOFFSET.c3ptnum.p) }
  public static func add(c4tgt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c4tgt, at: VTOFFSET.c4tgt.p) }
  public static func add(c4def: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c4def, at: VTOFFSET.c4def.p) }
  public static func add(c4runin: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c4runin, def: 0, at: VTOFFSET.c4runin.p) }
  public static func add(c4egress: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c4egress, def: 0, at: VTOFFSET.c4egress.p) }
  public static func add(c4numberofstores: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c4numberofstores, def: 0, at: VTOFFSET.c4numberofstores.p) }
  public static func add(c4typeofstores: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c4typeofstores, def: 0, at: VTOFFSET.c4typeofstores.p) }
  public static func add(c4timediscrete: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c4timediscrete, at: VTOFFSET.c4timediscrete.p) }
  public static func add(c4tm: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c4tm, def: 0, at: VTOFFSET.c4tm.p) }
  public static func add(c4colon: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c4colon, def: 0, at: VTOFFSET.c4colon.p) }
  public static func add(c4mod: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c4mod, def: 0, at: VTOFFSET.c4mod.p) }
  public static func add(c5haeadj: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c5haeadj, def: 0, at: VTOFFSET.c5haeadj.p) }
  public static func add(c5tw: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c5tw, def: 0, at: VTOFFSET.c5tw.p) }
  public static func add(c5tgtbrng: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c5tgtbrng, def: 0, at: VTOFFSET.c5tgtbrng.p) }
  public static func add(c5latlsb: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c5latlsb, def: 0, at: VTOFFSET.c5latlsb.p) }
  public static func add(c5lonlsb: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c5lonlsb, def: 0, at: VTOFFSET.c5lonlsb.p) }
  public static func add(c5elevationlsbs: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c5elevationlsbs, def: 0, at: VTOFFSET.c5elevationlsbs.p) }
  public static func add(c5colon: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c5colon, def: 0, at: VTOFFSET.c5colon.p) }
  public static func add(c6laser: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c6laser, def: 0, at: VTOFFSET.c6laser.p) }
  public static func add(c6intel: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c6intel, def: 0, at: VTOFFSET.c6intel.p) }
  public static func add(c6tnr3: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c6tnr3, def: 0, at: VTOFFSET.c6tnr3.p) }
  public static func add(c6dspct: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c6dspct, at: VTOFFSET.c6dspct.p) }
  public static func add(c6dspc: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c6dspc, at: VTOFFSET.c6dspc.p) }
  public static func add(c6fplpm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c6fplpm, at: VTOFFSET.c6fplpm.p) }
  public static func add(c6longpm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c6longpm, at: VTOFFSET.c6longpm.p) }
  public static func add(c7tnor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: c7tnor, at: VTOFFSET.c7tnor.p) }
  public static func add(c7in3p: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c7in3p, def: 0, at: VTOFFSET.c7in3p.p) }
  public static func add(c7elang2: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: c7elang2, def: 0.0, at: VTOFFSET.c7elang2.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(createdBy: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdBy, at: VTOFFSET.createdBy.p) }
  public static func add(source: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: source, at: VTOFFSET.source.p) }
  public static func add(origin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origin, at: VTOFFSET.origin.p) }
  public static func add(dataMode: MissionAssignment_Ingest_dataMode_Enum, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dataMode.rawValue, def: 0, at: VTOFFSET.dataMode.p) }
  public static func add(origNetwork: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: origNetwork, at: VTOFFSET.origNetwork.p) }
  public static func endMissionAssignment_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMissionAssignment_Ingest(
    _ fbb: inout FlatBufferBuilder,
    idOffset id: Offset = Offset(),
    classificationMarkingOffset classificationMarking: Offset = Offset(),
    trkIdOffset trkId: Offset = Offset(),
    tsOffset ts: Offset = Offset(),
    madOffset mad: Offset = Offset(),
    rcOffset rc: Offset = Offset(),
    rr: Int32 = 0,
    tnoOffset tno: Offset = Offset(),
    twenvOffset twenv: Offset = Offset(),
    lat: Double = 0.0,
    lon: Double = 0.0,
    orginxOffset orginx: Offset = Offset(),
    envOffset env: Offset = Offset(),
    szOffset sz: Offset = Offset(),
    index: Int32 = 0,
    c1associateddmpis: Int32 = 0,
    c2spcOffset c2spc: Offset = Offset(),
    c2airOffset c2air: Offset = Offset(),
    c2surOffset c2sur: Offset = Offset(),
    c2lndOffset c2lnd: Offset = Offset(),
    c2idOffset c2id: Offset = Offset(),
    c2idamplifyingdescriptorOffset c2idamplifyingdescriptor: Offset = Offset(),
    c2alt: Int32 = 0,
    c2crs: Int32 = 0,
    c2spd: Int32 = 0,
    c2specialinterestindicatorOffset c2specialinterestindicator: Offset = Offset(),
    c2exerciseindicatorOffset c2exerciseindicator: Offset = Offset(),
    c2exercisemofOffset c2exercisemof: Offset = Offset(),
    c3lat: Double = 0.0,
    c3lon: Double = 0.0,
    c3elv: Double = 0.0,
    c3ptlOffset c3ptl: Offset = Offset(),
    c3ptnumOffset c3ptnum: Offset = Offset(),
    c4tgtOffset c4tgt: Offset = Offset(),
    c4defOffset c4def: Offset = Offset(),
    c4runin: Int32 = 0,
    c4egress: Int32 = 0,
    c4numberofstores: Int32 = 0,
    c4typeofstores: Int32 = 0,
    c4timediscreteOffset c4timediscrete: Offset = Offset(),
    c4tm: Int32 = 0,
    c4colon: Int32 = 0,
    c4mod: Int32 = 0,
    c5haeadj: Int32 = 0,
    c5tw: Int32 = 0,
    c5tgtbrng: Int32 = 0,
    c5latlsb: Int32 = 0,
    c5lonlsb: Int32 = 0,
    c5elevationlsbs: Int32 = 0,
    c5colon: Int32 = 0,
    c6laser: Int32 = 0,
    c6intel: Int32 = 0,
    c6tnr3: Int32 = 0,
    c6dspctOffset c6dspct: Offset = Offset(),
    c6dspcOffset c6dspc: Offset = Offset(),
    c6fplpmOffset c6fplpm: Offset = Offset(),
    c6longpmOffset c6longpm: Offset = Offset(),
    c7tnorOffset c7tnor: Offset = Offset(),
    c7in3p: Int32 = 0,
    c7elang2: Double = 0.0,
    createdAtOffset createdAt: Offset = Offset(),
    createdByOffset createdBy: Offset = Offset(),
    sourceOffset source: Offset = Offset(),
    originOffset origin: Offset = Offset(),
    dataMode: MissionAssignment_Ingest_dataMode_Enum = .real,
    origNetworkOffset origNetwork: Offset = Offset()
  ) -> Offset {
    let __start = MissionAssignment_Ingest.startMissionAssignment_Ingest(&fbb)
    MissionAssignment_Ingest.add(id: id, &fbb)
    MissionAssignment_Ingest.add(classificationMarking: classificationMarking, &fbb)
    MissionAssignment_Ingest.add(trkId: trkId, &fbb)
    MissionAssignment_Ingest.add(ts: ts, &fbb)
    MissionAssignment_Ingest.add(mad: mad, &fbb)
    MissionAssignment_Ingest.add(rc: rc, &fbb)
    MissionAssignment_Ingest.add(rr: rr, &fbb)
    MissionAssignment_Ingest.add(tno: tno, &fbb)
    MissionAssignment_Ingest.add(twenv: twenv, &fbb)
    MissionAssignment_Ingest.add(lat: lat, &fbb)
    MissionAssignment_Ingest.add(lon: lon, &fbb)
    MissionAssignment_Ingest.add(orginx: orginx, &fbb)
    MissionAssignment_Ingest.add(env: env, &fbb)
    MissionAssignment_Ingest.add(sz: sz, &fbb)
    MissionAssignment_Ingest.add(index: index, &fbb)
    MissionAssignment_Ingest.add(c1associateddmpis: c1associateddmpis, &fbb)
    MissionAssignment_Ingest.add(c2spc: c2spc, &fbb)
    MissionAssignment_Ingest.add(c2air: c2air, &fbb)
    MissionAssignment_Ingest.add(c2sur: c2sur, &fbb)
    MissionAssignment_Ingest.add(c2lnd: c2lnd, &fbb)
    MissionAssignment_Ingest.add(c2id: c2id, &fbb)
    MissionAssignment_Ingest.add(c2idamplifyingdescriptor: c2idamplifyingdescriptor, &fbb)
    MissionAssignment_Ingest.add(c2alt: c2alt, &fbb)
    MissionAssignment_Ingest.add(c2crs: c2crs, &fbb)
    MissionAssignment_Ingest.add(c2spd: c2spd, &fbb)
    MissionAssignment_Ingest.add(c2specialinterestindicator: c2specialinterestindicator, &fbb)
    MissionAssignment_Ingest.add(c2exerciseindicator: c2exerciseindicator, &fbb)
    MissionAssignment_Ingest.add(c2exercisemof: c2exercisemof, &fbb)
    MissionAssignment_Ingest.add(c3lat: c3lat, &fbb)
    MissionAssignment_Ingest.add(c3lon: c3lon, &fbb)
    MissionAssignment_Ingest.add(c3elv: c3elv, &fbb)
    MissionAssignment_Ingest.add(c3ptl: c3ptl, &fbb)
    MissionAssignment_Ingest.add(c3ptnum: c3ptnum, &fbb)
    MissionAssignment_Ingest.add(c4tgt: c4tgt, &fbb)
    MissionAssignment_Ingest.add(c4def: c4def, &fbb)
    MissionAssignment_Ingest.add(c4runin: c4runin, &fbb)
    MissionAssignment_Ingest.add(c4egress: c4egress, &fbb)
    MissionAssignment_Ingest.add(c4numberofstores: c4numberofstores, &fbb)
    MissionAssignment_Ingest.add(c4typeofstores: c4typeofstores, &fbb)
    MissionAssignment_Ingest.add(c4timediscrete: c4timediscrete, &fbb)
    MissionAssignment_Ingest.add(c4tm: c4tm, &fbb)
    MissionAssignment_Ingest.add(c4colon: c4colon, &fbb)
    MissionAssignment_Ingest.add(c4mod: c4mod, &fbb)
    MissionAssignment_Ingest.add(c5haeadj: c5haeadj, &fbb)
    MissionAssignment_Ingest.add(c5tw: c5tw, &fbb)
    MissionAssignment_Ingest.add(c5tgtbrng: c5tgtbrng, &fbb)
    MissionAssignment_Ingest.add(c5latlsb: c5latlsb, &fbb)
    MissionAssignment_Ingest.add(c5lonlsb: c5lonlsb, &fbb)
    MissionAssignment_Ingest.add(c5elevationlsbs: c5elevationlsbs, &fbb)
    MissionAssignment_Ingest.add(c5colon: c5colon, &fbb)
    MissionAssignment_Ingest.add(c6laser: c6laser, &fbb)
    MissionAssignment_Ingest.add(c6intel: c6intel, &fbb)
    MissionAssignment_Ingest.add(c6tnr3: c6tnr3, &fbb)
    MissionAssignment_Ingest.add(c6dspct: c6dspct, &fbb)
    MissionAssignment_Ingest.add(c6dspc: c6dspc, &fbb)
    MissionAssignment_Ingest.add(c6fplpm: c6fplpm, &fbb)
    MissionAssignment_Ingest.add(c6longpm: c6longpm, &fbb)
    MissionAssignment_Ingest.add(c7tnor: c7tnor, &fbb)
    MissionAssignment_Ingest.add(c7in3p: c7in3p, &fbb)
    MissionAssignment_Ingest.add(c7elang2: c7elang2, &fbb)
    MissionAssignment_Ingest.add(createdAt: createdAt, &fbb)
    MissionAssignment_Ingest.add(createdBy: createdBy, &fbb)
    MissionAssignment_Ingest.add(source: source, &fbb)
    MissionAssignment_Ingest.add(origin: origin, &fbb)
    MissionAssignment_Ingest.add(dataMode: dataMode, &fbb)
    MissionAssignment_Ingest.add(origNetwork: origNetwork, &fbb)
    return MissionAssignment_Ingest.endMissionAssignment_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.id.p, fieldName: "id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.classificationMarking.p, fieldName: "classificationMarking", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.trkId.p, fieldName: "trkId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ts.p, fieldName: "ts", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.mad.p, fieldName: "mad", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rc.p, fieldName: "rc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.rr.p, fieldName: "rr", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.tno.p, fieldName: "tno", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.twenv.p, fieldName: "twenv", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lat.p, fieldName: "lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.lon.p, fieldName: "lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.orginx.p, fieldName: "orginx", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.env.p, fieldName: "env", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.sz.p, fieldName: "sz", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.index.p, fieldName: "index", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c1associateddmpis.p, fieldName: "c1associateddmpis", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c2spc.p, fieldName: "c2spc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c2air.p, fieldName: "c2air", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c2sur.p, fieldName: "c2sur", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c2lnd.p, fieldName: "c2lnd", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c2id.p, fieldName: "c2id", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c2idamplifyingdescriptor.p, fieldName: "c2idamplifyingdescriptor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c2alt.p, fieldName: "c2alt", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c2crs.p, fieldName: "c2crs", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c2spd.p, fieldName: "c2spd", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c2specialinterestindicator.p, fieldName: "c2specialinterestindicator", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c2exerciseindicator.p, fieldName: "c2exerciseindicator", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c2exercisemof.p, fieldName: "c2exercisemof", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c3lat.p, fieldName: "c3lat", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.c3lon.p, fieldName: "c3lon", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.c3elv.p, fieldName: "c3elv", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.c3ptl.p, fieldName: "c3ptl", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c3ptnum.p, fieldName: "c3ptnum", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c4tgt.p, fieldName: "c4tgt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c4def.p, fieldName: "c4def", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c4runin.p, fieldName: "c4runin", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c4egress.p, fieldName: "c4egress", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c4numberofstores.p, fieldName: "c4numberofstores", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c4typeofstores.p, fieldName: "c4typeofstores", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c4timediscrete.p, fieldName: "c4timediscrete", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c4tm.p, fieldName: "c4tm", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c4colon.p, fieldName: "c4colon", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c4mod.p, fieldName: "c4mod", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c5haeadj.p, fieldName: "c5haeadj", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c5tw.p, fieldName: "c5tw", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c5tgtbrng.p, fieldName: "c5tgtbrng", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c5latlsb.p, fieldName: "c5latlsb", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c5lonlsb.p, fieldName: "c5lonlsb", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c5elevationlsbs.p, fieldName: "c5elevationlsbs", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c5colon.p, fieldName: "c5colon", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c6laser.p, fieldName: "c6laser", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c6intel.p, fieldName: "c6intel", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c6tnr3.p, fieldName: "c6tnr3", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c6dspct.p, fieldName: "c6dspct", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c6dspc.p, fieldName: "c6dspc", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c6fplpm.p, fieldName: "c6fplpm", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c6longpm.p, fieldName: "c6longpm", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c7tnor.p, fieldName: "c7tnor", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.c7in3p.p, fieldName: "c7in3p", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.c7elang2.p, fieldName: "c7elang2", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.createdBy.p, fieldName: "createdBy", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.source.p, fieldName: "source", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.origin.p, fieldName: "origin", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.dataMode.p, fieldName: "dataMode", required: false, type: MissionAssignment_Ingest_dataMode_Enum.self)
    try _v.visit(field: VTOFFSET.origNetwork.p, fieldName: "origNetwork", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

