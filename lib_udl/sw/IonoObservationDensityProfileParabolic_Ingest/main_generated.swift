// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  /// Coefficients to describe the E, F1, and F2 layers as parabolic-shape segments.
public struct IonoObservationDensityProfileParabolic_Ingest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "IONO" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: IonoObservationDensityProfileParabolic_Ingest.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case description = 4
    case parabolicItems = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  General description of the QP computation algorithm.
  ///  Example: /// Example: Best-fit algorithm in NHPC software.
  ///  Constraints: No constraints specified.
  public var description: String? { let o = _accessor.offset(VTOFFSET.description.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var descriptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.description.v) }
  ///  Describes the E, F1, and F2 layers as parabolic-shape segments.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  public var hasParabolicItems: Bool { let o = _accessor.offset(VTOFFSET.parabolicItems.v); return o == 0 ? false : true }
  public var parabolicItemsCount: Int32 { let o = _accessor.offset(VTOFFSET.parabolicItems.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func parabolicItems(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.parabolicItems.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startIonoObservationDensityProfileParabolic_Ingest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(description: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: description, at: VTOFFSET.description.p) }
  public static func addVectorOf(parabolicItems: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: parabolicItems, at: VTOFFSET.parabolicItems.p) }
  public static func endIonoObservationDensityProfileParabolic_Ingest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createIonoObservationDensityProfileParabolic_Ingest(
    _ fbb: inout FlatBufferBuilder,
    descriptionOffset description: Offset = Offset(),
    parabolicItemsVectorOffset parabolicItems: Offset = Offset()
  ) -> Offset {
    let __start = IonoObservationDensityProfileParabolic_Ingest.startIonoObservationDensityProfileParabolic_Ingest(&fbb)
    IonoObservationDensityProfileParabolic_Ingest.add(description: description, &fbb)
    IonoObservationDensityProfileParabolic_Ingest.addVectorOf(parabolicItems: parabolicItems, &fbb)
    return IonoObservationDensityProfileParabolic_Ingest.endIonoObservationDensityProfileParabolic_Ingest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.description.p, fieldName: "description", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.parabolicItems.p, fieldName: "parabolicItems", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

