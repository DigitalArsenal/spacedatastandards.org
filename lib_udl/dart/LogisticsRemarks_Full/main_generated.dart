// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Remarks associated with this LogisticsSupport record.
class LogisticsRemarksFull {
  LogisticsRemarksFull._(this._bc, this._bcOffset);
  factory LogisticsRemarksFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LogisticsRemarksFull> reader = _LogisticsRemarksFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  User who published the remark.
  ///  Example: /// Example: JSMITH
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get username => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Text of the remark.
  ///  Example: /// Example: EXAMPLE REMARK
  ///  Constraints: Minimum length = 0, Maximum length = 4000
  String? get remark => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Date the remark was published or updated, in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2023-07-17T10:30:00.123Z
  ///  Constraints: No constraints specified.
  String? get lastChanged => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'LogisticsRemarksFull{username: ${username}, remark: ${remark}, lastChanged: ${lastChanged}}';
  }
}

class _LogisticsRemarksFullReader extends fb.TableReader<LogisticsRemarksFull> {
  const _LogisticsRemarksFullReader();

  @override
  LogisticsRemarksFull createObject(fb.BufferContext bc, int offset) => 
    LogisticsRemarksFull._(bc, offset);
}

class LogisticsRemarksFullBuilder {
  LogisticsRemarksFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addUsernameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRemarkOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastChangedOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LogisticsRemarksFullObjectBuilder extends fb.ObjectBuilder {
  final String? _username;
  final String? _remark;
  final String? _lastChanged;

  LogisticsRemarksFullObjectBuilder({
    String? username,
    String? remark,
    String? lastChanged,
  })
      : _username = username,
        _remark = remark,
        _lastChanged = lastChanged;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? usernameOffset = _username == null ? null
        : fbBuilder.writeString(_username!);
    final int? remarkOffset = _remark == null ? null
        : fbBuilder.writeString(_remark!);
    final int? lastChangedOffset = _lastChanged == null ? null
        : fbBuilder.writeString(_lastChanged!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, usernameOffset);
    fbBuilder.addOffset(1, remarkOffset);
    fbBuilder.addOffset(2, lastChangedOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
