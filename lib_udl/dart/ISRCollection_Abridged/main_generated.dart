// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class IsrcollectionAbridgedDataModeEnum {
  final int value;
  const IsrcollectionAbridgedDataModeEnum._(this.value);

  factory IsrcollectionAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum IsrcollectionAbridgedDataModeEnum');
    }
    return result;
  }

  static IsrcollectionAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : IsrcollectionAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const IsrcollectionAbridgedDataModeEnum REAL = IsrcollectionAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const IsrcollectionAbridgedDataModeEnum TEST = IsrcollectionAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const IsrcollectionAbridgedDataModeEnum SIMULATED = IsrcollectionAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const IsrcollectionAbridgedDataModeEnum EXERCISE = IsrcollectionAbridgedDataModeEnum._(3);
  static const Map<int, IsrcollectionAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<IsrcollectionAbridgedDataModeEnum> reader = _IsrcollectionAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'IsrcollectionAbridgedDataModeEnum{value: $value}';
  }
}

class _IsrcollectionAbridgedDataModeEnumReader extends fb.Reader<IsrcollectionAbridgedDataModeEnum> {
  const _IsrcollectionAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  IsrcollectionAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      IsrcollectionAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// ISR Collection data.
class IsrcollectionAbridged {
  IsrcollectionAbridged._(this._bc, this._bcOffset);
  factory IsrcollectionAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IsrcollectionAbridged> reader = _IsrcollectionAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ISRCOLLECTION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Version of the IDEX software the request came from for compatibility.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get idexVersion => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  ///  Human readable Mission Name.
  ///  Example: /// Example: Example mission name
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Mission Identifier.
  ///  Example: /// Example: myTask-2020-04-23T00:00:00.000Z
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get missionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Designation of mission Area Of Responsibility.
  ///  Example: /// Example: Kandahar
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get missionAor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Primary type of intelligence to be collected during the mission.
  ///  Example: /// Example: Sig
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get missionPrimaryIntelDiscipline => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Sub category of primary intelligence to be collected.
  ///  Example: /// Example: FMV
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get missionPrimarySubCategory => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Type of intelligence to be collected second.
  ///  Example: /// Example: Intelligence_2
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get missionSecondaryIntelDiscipline => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Mission sub category for secondary intelligence discipline to be collected.
  ///  Example: /// Example: Convoy
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get missionSecondarySubCategory => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  What is the primary objective(Role) of this mission.
  ///  Example: /// Example: Targeting of Lead Vehicle
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get missionRole => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Mission operation name.
  ///  Example: /// Example: OP-HONEY-BADGER
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get missionOperation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Mission Priority (1-n).
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get missionPriority => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  Name of the Supporting unit/Location that is performing this mission.
  ///  Example: /// Example: ENVOYS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get missionSupportedUnit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Text version of what we are emphasizing in this mission.
  ///  Example: /// Example: Mission emphasis
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get missionEmphasis => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get missionStartPointLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 80.23
  ///  Constraints: No constraints specified.
  double get missionStartPointLong => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Mission geographical collection area.
  ///  Example: /// Example: Example collection area
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get missionCollectionArea => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Joint Operations Area.
  ///  Example: /// Example: Operation area
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get missionJoa => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  A synchronization matrix is used to organize the logistics synchronization process during a mission.
  ///  Example: /// Example: MATRIX
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get missionSyncMatrixBin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Country code of the mission.  A Country may represent countries, multi-national consortiums, and international organizations.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get missionCountry => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Region of the mission.
  ///  Example: /// Example: Example Region
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get missionRegion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Subregion of the mission.
  ///  Example: /// Example: Example Subregion
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get missionSubRegion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Mission desired collection requirements.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get collectionRequirements => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 50);
  ///  Object for data dissemination.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get transit => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 52);
  ///  Individual taskings to complete the mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get taskings => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 54);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2021-01-19T01:01:15.001Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  IsrcollectionAbridgedDataModeEnum get dataMode => IsrcollectionAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 68, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);

  @override
  String toString() {
    return 'IsrcollectionAbridged{id: ${id}, classificationMarking: ${classificationMarking}, idexVersion: ${idexVersion}, name: ${name}, missionId: ${missionId}, missionAor: ${missionAor}, missionPrimaryIntelDiscipline: ${missionPrimaryIntelDiscipline}, missionPrimarySubCategory: ${missionPrimarySubCategory}, missionSecondaryIntelDiscipline: ${missionSecondaryIntelDiscipline}, missionSecondarySubCategory: ${missionSecondarySubCategory}, missionRole: ${missionRole}, missionOperation: ${missionOperation}, missionPriority: ${missionPriority}, missionSupportedUnit: ${missionSupportedUnit}, missionEmphasis: ${missionEmphasis}, missionStartPointLat: ${missionStartPointLat}, missionStartPointLong: ${missionStartPointLong}, missionCollectionArea: ${missionCollectionArea}, missionJoa: ${missionJoa}, missionSyncMatrixBin: ${missionSyncMatrixBin}, missionCountry: ${missionCountry}, missionRegion: ${missionRegion}, missionSubRegion: ${missionSubRegion}, collectionRequirements: ${collectionRequirements}, transit: ${transit}, taskings: ${taskings}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _IsrcollectionAbridgedReader extends fb.TableReader<IsrcollectionAbridged> {
  const _IsrcollectionAbridgedReader();

  @override
  IsrcollectionAbridged createObject(fb.BufferContext bc, int offset) => 
    IsrcollectionAbridged._(bc, offset);
}

class IsrcollectionAbridgedBuilder {
  IsrcollectionAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(34);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdexVersion(int? idexVersion) {
    fbBuilder.addInt32(2, idexVersion);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMissionIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMissionAorOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addMissionPrimaryIntelDisciplineOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addMissionPrimarySubCategoryOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addMissionSecondaryIntelDisciplineOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addMissionSecondarySubCategoryOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addMissionRoleOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addMissionOperationOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addMissionPriority(int? missionPriority) {
    fbBuilder.addInt32(12, missionPriority);
    return fbBuilder.offset;
  }
  int addMissionSupportedUnitOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addMissionEmphasisOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addMissionStartPointLat(double? missionStartPointLat) {
    fbBuilder.addFloat64(15, missionStartPointLat);
    return fbBuilder.offset;
  }
  int addMissionStartPointLong(double? missionStartPointLong) {
    fbBuilder.addFloat64(16, missionStartPointLong);
    return fbBuilder.offset;
  }
  int addMissionCollectionAreaOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addMissionJoaOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addMissionSyncMatrixBinOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addMissionCountryOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addMissionRegionOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addMissionSubRegionOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addCollectionRequirementsOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addTransitOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addTaskingsOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addDataMode(IsrcollectionAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(32, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IsrcollectionAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final int? _idexVersion;
  final String? _name;
  final String? _missionId;
  final String? _missionAor;
  final String? _missionPrimaryIntelDiscipline;
  final String? _missionPrimarySubCategory;
  final String? _missionSecondaryIntelDiscipline;
  final String? _missionSecondarySubCategory;
  final String? _missionRole;
  final String? _missionOperation;
  final int? _missionPriority;
  final String? _missionSupportedUnit;
  final String? _missionEmphasis;
  final double? _missionStartPointLat;
  final double? _missionStartPointLong;
  final String? _missionCollectionArea;
  final String? _missionJoa;
  final String? _missionSyncMatrixBin;
  final String? _missionCountry;
  final String? _missionRegion;
  final String? _missionSubRegion;
  final List<String>? _collectionRequirements;
  final List<String>? _transit;
  final List<String>? _taskings;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final IsrcollectionAbridgedDataModeEnum? _dataMode;
  final String? _origNetwork;

  IsrcollectionAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    int? idexVersion,
    String? name,
    String? missionId,
    String? missionAor,
    String? missionPrimaryIntelDiscipline,
    String? missionPrimarySubCategory,
    String? missionSecondaryIntelDiscipline,
    String? missionSecondarySubCategory,
    String? missionRole,
    String? missionOperation,
    int? missionPriority,
    String? missionSupportedUnit,
    String? missionEmphasis,
    double? missionStartPointLat,
    double? missionStartPointLong,
    String? missionCollectionArea,
    String? missionJoa,
    String? missionSyncMatrixBin,
    String? missionCountry,
    String? missionRegion,
    String? missionSubRegion,
    List<String>? collectionRequirements,
    List<String>? transit,
    List<String>? taskings,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    IsrcollectionAbridgedDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idexVersion = idexVersion,
        _name = name,
        _missionId = missionId,
        _missionAor = missionAor,
        _missionPrimaryIntelDiscipline = missionPrimaryIntelDiscipline,
        _missionPrimarySubCategory = missionPrimarySubCategory,
        _missionSecondaryIntelDiscipline = missionSecondaryIntelDiscipline,
        _missionSecondarySubCategory = missionSecondarySubCategory,
        _missionRole = missionRole,
        _missionOperation = missionOperation,
        _missionPriority = missionPriority,
        _missionSupportedUnit = missionSupportedUnit,
        _missionEmphasis = missionEmphasis,
        _missionStartPointLat = missionStartPointLat,
        _missionStartPointLong = missionStartPointLong,
        _missionCollectionArea = missionCollectionArea,
        _missionJoa = missionJoa,
        _missionSyncMatrixBin = missionSyncMatrixBin,
        _missionCountry = missionCountry,
        _missionRegion = missionRegion,
        _missionSubRegion = missionSubRegion,
        _collectionRequirements = collectionRequirements,
        _transit = transit,
        _taskings = taskings,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? missionIdOffset = _missionId == null ? null
        : fbBuilder.writeString(_missionId!);
    final int? missionAorOffset = _missionAor == null ? null
        : fbBuilder.writeString(_missionAor!);
    final int? missionPrimaryIntelDisciplineOffset = _missionPrimaryIntelDiscipline == null ? null
        : fbBuilder.writeString(_missionPrimaryIntelDiscipline!);
    final int? missionPrimarySubCategoryOffset = _missionPrimarySubCategory == null ? null
        : fbBuilder.writeString(_missionPrimarySubCategory!);
    final int? missionSecondaryIntelDisciplineOffset = _missionSecondaryIntelDiscipline == null ? null
        : fbBuilder.writeString(_missionSecondaryIntelDiscipline!);
    final int? missionSecondarySubCategoryOffset = _missionSecondarySubCategory == null ? null
        : fbBuilder.writeString(_missionSecondarySubCategory!);
    final int? missionRoleOffset = _missionRole == null ? null
        : fbBuilder.writeString(_missionRole!);
    final int? missionOperationOffset = _missionOperation == null ? null
        : fbBuilder.writeString(_missionOperation!);
    final int? missionSupportedUnitOffset = _missionSupportedUnit == null ? null
        : fbBuilder.writeString(_missionSupportedUnit!);
    final int? missionEmphasisOffset = _missionEmphasis == null ? null
        : fbBuilder.writeString(_missionEmphasis!);
    final int? missionCollectionAreaOffset = _missionCollectionArea == null ? null
        : fbBuilder.writeString(_missionCollectionArea!);
    final int? missionJoaOffset = _missionJoa == null ? null
        : fbBuilder.writeString(_missionJoa!);
    final int? missionSyncMatrixBinOffset = _missionSyncMatrixBin == null ? null
        : fbBuilder.writeString(_missionSyncMatrixBin!);
    final int? missionCountryOffset = _missionCountry == null ? null
        : fbBuilder.writeString(_missionCountry!);
    final int? missionRegionOffset = _missionRegion == null ? null
        : fbBuilder.writeString(_missionRegion!);
    final int? missionSubRegionOffset = _missionSubRegion == null ? null
        : fbBuilder.writeString(_missionSubRegion!);
    final int? collectionRequirementsOffset = _collectionRequirements == null ? null
        : fbBuilder.writeList(_collectionRequirements!.map(fbBuilder.writeString).toList());
    final int? transitOffset = _transit == null ? null
        : fbBuilder.writeList(_transit!.map(fbBuilder.writeString).toList());
    final int? taskingsOffset = _taskings == null ? null
        : fbBuilder.writeList(_taskings!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(34);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addInt32(2, _idexVersion);
    fbBuilder.addOffset(3, nameOffset);
    fbBuilder.addOffset(4, missionIdOffset);
    fbBuilder.addOffset(5, missionAorOffset);
    fbBuilder.addOffset(6, missionPrimaryIntelDisciplineOffset);
    fbBuilder.addOffset(7, missionPrimarySubCategoryOffset);
    fbBuilder.addOffset(8, missionSecondaryIntelDisciplineOffset);
    fbBuilder.addOffset(9, missionSecondarySubCategoryOffset);
    fbBuilder.addOffset(10, missionRoleOffset);
    fbBuilder.addOffset(11, missionOperationOffset);
    fbBuilder.addInt32(12, _missionPriority);
    fbBuilder.addOffset(13, missionSupportedUnitOffset);
    fbBuilder.addOffset(14, missionEmphasisOffset);
    fbBuilder.addFloat64(15, _missionStartPointLat);
    fbBuilder.addFloat64(16, _missionStartPointLong);
    fbBuilder.addOffset(17, missionCollectionAreaOffset);
    fbBuilder.addOffset(18, missionJoaOffset);
    fbBuilder.addOffset(19, missionSyncMatrixBinOffset);
    fbBuilder.addOffset(20, missionCountryOffset);
    fbBuilder.addOffset(21, missionRegionOffset);
    fbBuilder.addOffset(22, missionSubRegionOffset);
    fbBuilder.addOffset(23, collectionRequirementsOffset);
    fbBuilder.addOffset(24, transitOffset);
    fbBuilder.addOffset(25, taskingsOffset);
    fbBuilder.addOffset(26, createdAtOffset);
    fbBuilder.addOffset(27, createdByOffset);
    fbBuilder.addOffset(28, updatedAtOffset);
    fbBuilder.addOffset(29, updatedByOffset);
    fbBuilder.addOffset(30, sourceOffset);
    fbBuilder.addOffset(31, originOffset);
    fbBuilder.addInt8(32, _dataMode?.value);
    fbBuilder.addOffset(33, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
