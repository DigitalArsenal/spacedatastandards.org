// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AirTransportMissionFullDataModeEnum {
  final int value;
  const AirTransportMissionFullDataModeEnum._(this.value);

  factory AirTransportMissionFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AirTransportMissionFullDataModeEnum');
    }
    return result;
  }

  static AirTransportMissionFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AirTransportMissionFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const AirTransportMissionFullDataModeEnum REAL = AirTransportMissionFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const AirTransportMissionFullDataModeEnum TEST = AirTransportMissionFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const AirTransportMissionFullDataModeEnum SIMULATED = AirTransportMissionFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const AirTransportMissionFullDataModeEnum EXERCISE = AirTransportMissionFullDataModeEnum._(3);
  static const Map<int, AirTransportMissionFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AirTransportMissionFullDataModeEnum> reader = _AirTransportMissionFullDataModeEnumReader();

  @override
  String toString() {
    return 'AirTransportMissionFullDataModeEnum{value: $value}';
  }
}

class _AirTransportMissionFullDataModeEnumReader extends fb.Reader<AirTransportMissionFullDataModeEnum> {
  const _AirTransportMissionFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AirTransportMissionFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      AirTransportMissionFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// The information in an Air Transport Mission contains unique identification, description of the mission objective, aircraft and crew assignments, mission alias, embarkation/debarkation cargo locations, priority, and other mission characteristics.
class AirTransportMissionFull {
  AirTransportMissionFull._(this._bc, this._bcOffset);
  factory AirTransportMissionFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AirTransportMissionFull> reader = _AirTransportMissionFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The mission identifier provided by the originating source.
  ///  Example: /// Example: 614bebb6-a62e-053c-ca51-e79f8a402b28
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origMissionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) Encode/Decode procedures.
  ///  Example: /// Example: AJM7939B1123
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get amcMissionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Global Decision Support System (GDSS) mission unique identifier.
  ///  Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get gdssMissionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique identifier of the previous air transport mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
  ///  Example: /// Example: a77055df-edc3-4047-a5fa-604f80b9fe3c
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get prevMissionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Air Mobility Command (AMC) mission identifier of the previous air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
  ///  Example: /// Example: AJM7939B1122
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get prevAmcmissionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Unique identifier of the next mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
  ///  Example: /// Example: 186e5658-1079-45c0-bccc-02d2fa31b663
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get nextMissionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Air Mobility Command (AMC) mission identifier of the next air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
  ///  Example: /// Example: AJM7939B1124
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get nextAmcmissionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  A description of this mission's objective.
  ///  Example: /// Example: Deliver water to island X.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get objective => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  A description of this mission's purpose (e.g. why this mission needs to happen, what is the mission supporting, etc.).
  ///  Example: /// Example: People at island X need water ASAP. Two previous attempts failed due to weather.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get purpose => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Highest Joint Chiefs of Staff priority of this mission.
  ///  Example: /// Example: 1A3
  ///  Constraints: Minimum length = 3, Maximum length = 3
  String? get jcsPriority => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Flag indicating this is a close watch mission.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get cw => const fb.BoolReader().vTableGet(_bc, _bcOffset, 28, false);
  ///  The type of mission (e.g. SAAM, CHNL, etc.).
  ///  Example: /// Example: SAAM
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The International Civil Aviation Organization (ICAO) site code of first cargo pick up.
  ///  Example: /// Example: KFAY
  ///  Constraints: Minimum length = 4, Maximum length = 4
  String? get firstPickUp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The International Civil Aviation Organization (ICAO) site code of last cargo drop off.
  ///  Example: /// Example: PGUA
  ///  Constraints: Minimum length = 4, Maximum length = 4
  String? get lastDropOff => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Mission alias.
  ///  Example: /// Example: PACIFIC DEPLOY / CHAP 3 MOVEMENT
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get alias => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The call sign for this mission.
  ///  Example: /// Example: RCH123
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get callSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The name of the operation that this mission supports.
  ///  Example: /// Example: Golden Eye
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get operation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Numbered Air Force (NAF) organization that owns the mission.
  ///  Example: /// Example: 18AF
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get naf => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  The unit the mission is allocated to.
  ///  Example: /// Example: 437 AEW
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get allocatedUnit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
  ///  Example: /// Example: MIXED
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get loadCategoryType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Current state of the mission.
  ///  Example: /// Example: EXECUTION
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get state => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  The number of minutes a mission is off schedule based on the source system's business rules. Positive numbers are early, negative numbers are late.
  ///  Example: /// Example: -90.12
  ///  Constraints: No constraints specified.
  double get sourceSysDeviation => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve clearance requests.
  ///  Example: /// Example: 1083034
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get apacsId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
  ///  Example: /// Example: G2-182402-AB
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get dipWorksheetName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Time the row was updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AirTransportMissionFullDataModeEnum get dataMode => AirTransportMissionFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 70, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get requirements => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 74);
  ///  Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get remarks => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 76);
  ///  Collection of Hazardous Material information associated with this Air Transport Mission.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get hazMat => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 78);
  ///  The Aircraft Sortie Records linked to this mission. Do not set this field to send data to the UDL. This field is set by the UDL when returning full Air Transport Mission records.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get aircraftSorties => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 80);

  @override
  String toString() {
    return 'AirTransportMissionFull{id: ${id}, classificationMarking: ${classificationMarking}, origMissionId: ${origMissionId}, amcMissionId: ${amcMissionId}, gdssMissionId: ${gdssMissionId}, prevMissionId: ${prevMissionId}, prevAmcmissionId: ${prevAmcmissionId}, nextMissionId: ${nextMissionId}, nextAmcmissionId: ${nextAmcmissionId}, objective: ${objective}, purpose: ${purpose}, jcsPriority: ${jcsPriority}, cw: ${cw}, type: ${type}, firstPickUp: ${firstPickUp}, lastDropOff: ${lastDropOff}, alias: ${alias}, callSign: ${callSign}, operation: ${operation}, naf: ${naf}, allocatedUnit: ${allocatedUnit}, loadCategoryType: ${loadCategoryType}, state: ${state}, sourceSysDeviation: ${sourceSysDeviation}, apacsId: ${apacsId}, dipWorksheetName: ${dipWorksheetName}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}, requirements: ${requirements}, remarks: ${remarks}, hazMat: ${hazMat}, aircraftSorties: ${aircraftSorties}}';
  }
}

class _AirTransportMissionFullReader extends fb.TableReader<AirTransportMissionFull> {
  const _AirTransportMissionFullReader();

  @override
  AirTransportMissionFull createObject(fb.BufferContext bc, int offset) => 
    AirTransportMissionFull._(bc, offset);
}

class AirTransportMissionFullBuilder {
  AirTransportMissionFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(39);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOrigMissionIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAmcMissionIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addGdssMissionIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addPrevMissionIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addPrevAmcmissionIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addNextMissionIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addNextAmcmissionIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addObjectiveOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addPurposeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addJcsPriorityOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addCw(bool? cw) {
    fbBuilder.addBool(12, cw);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addFirstPickUpOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addLastDropOffOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addAliasOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addCallSignOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addOperationOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addNafOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addAllocatedUnitOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addLoadCategoryTypeOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addStateOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addSourceSysDeviation(double? sourceSysDeviation) {
    fbBuilder.addFloat64(23, sourceSysDeviation);
    return fbBuilder.offset;
  }
  int addApacsIdOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addDipWorksheetNameOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AirTransportMissionFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(33, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addRequirementsOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addRemarksOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addHazMatOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addAircraftSortiesOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AirTransportMissionFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _origMissionId;
  final String? _amcMissionId;
  final String? _gdssMissionId;
  final String? _prevMissionId;
  final String? _prevAmcmissionId;
  final String? _nextMissionId;
  final String? _nextAmcmissionId;
  final String? _objective;
  final String? _purpose;
  final String? _jcsPriority;
  final bool? _cw;
  final String? _type;
  final String? _firstPickUp;
  final String? _lastDropOff;
  final String? _alias;
  final String? _callSign;
  final String? _operation;
  final String? _naf;
  final String? _allocatedUnit;
  final String? _loadCategoryType;
  final String? _state;
  final double? _sourceSysDeviation;
  final String? _apacsId;
  final String? _dipWorksheetName;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final AirTransportMissionFullDataModeEnum? _dataMode;
  final String? _origNetwork;
  final List<String>? _requirements;
  final List<String>? _remarks;
  final List<String>? _hazMat;
  final List<String>? _aircraftSorties;

  AirTransportMissionFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? origMissionId,
    String? amcMissionId,
    String? gdssMissionId,
    String? prevMissionId,
    String? prevAmcmissionId,
    String? nextMissionId,
    String? nextAmcmissionId,
    String? objective,
    String? purpose,
    String? jcsPriority,
    bool? cw,
    String? type,
    String? firstPickUp,
    String? lastDropOff,
    String? alias,
    String? callSign,
    String? operation,
    String? naf,
    String? allocatedUnit,
    String? loadCategoryType,
    String? state,
    double? sourceSysDeviation,
    String? apacsId,
    String? dipWorksheetName,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? sourceDl,
    String? source,
    String? origin,
    AirTransportMissionFullDataModeEnum? dataMode,
    String? origNetwork,
    List<String>? requirements,
    List<String>? remarks,
    List<String>? hazMat,
    List<String>? aircraftSorties,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _origMissionId = origMissionId,
        _amcMissionId = amcMissionId,
        _gdssMissionId = gdssMissionId,
        _prevMissionId = prevMissionId,
        _prevAmcmissionId = prevAmcmissionId,
        _nextMissionId = nextMissionId,
        _nextAmcmissionId = nextAmcmissionId,
        _objective = objective,
        _purpose = purpose,
        _jcsPriority = jcsPriority,
        _cw = cw,
        _type = type,
        _firstPickUp = firstPickUp,
        _lastDropOff = lastDropOff,
        _alias = alias,
        _callSign = callSign,
        _operation = operation,
        _naf = naf,
        _allocatedUnit = allocatedUnit,
        _loadCategoryType = loadCategoryType,
        _state = state,
        _sourceSysDeviation = sourceSysDeviation,
        _apacsId = apacsId,
        _dipWorksheetName = dipWorksheetName,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork,
        _requirements = requirements,
        _remarks = remarks,
        _hazMat = hazMat,
        _aircraftSorties = aircraftSorties;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? origMissionIdOffset = _origMissionId == null ? null
        : fbBuilder.writeString(_origMissionId!);
    final int? amcMissionIdOffset = _amcMissionId == null ? null
        : fbBuilder.writeString(_amcMissionId!);
    final int? gdssMissionIdOffset = _gdssMissionId == null ? null
        : fbBuilder.writeString(_gdssMissionId!);
    final int? prevMissionIdOffset = _prevMissionId == null ? null
        : fbBuilder.writeString(_prevMissionId!);
    final int? prevAmcmissionIdOffset = _prevAmcmissionId == null ? null
        : fbBuilder.writeString(_prevAmcmissionId!);
    final int? nextMissionIdOffset = _nextMissionId == null ? null
        : fbBuilder.writeString(_nextMissionId!);
    final int? nextAmcmissionIdOffset = _nextAmcmissionId == null ? null
        : fbBuilder.writeString(_nextAmcmissionId!);
    final int? objectiveOffset = _objective == null ? null
        : fbBuilder.writeString(_objective!);
    final int? purposeOffset = _purpose == null ? null
        : fbBuilder.writeString(_purpose!);
    final int? jcsPriorityOffset = _jcsPriority == null ? null
        : fbBuilder.writeString(_jcsPriority!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? firstPickUpOffset = _firstPickUp == null ? null
        : fbBuilder.writeString(_firstPickUp!);
    final int? lastDropOffOffset = _lastDropOff == null ? null
        : fbBuilder.writeString(_lastDropOff!);
    final int? aliasOffset = _alias == null ? null
        : fbBuilder.writeString(_alias!);
    final int? callSignOffset = _callSign == null ? null
        : fbBuilder.writeString(_callSign!);
    final int? operationOffset = _operation == null ? null
        : fbBuilder.writeString(_operation!);
    final int? nafOffset = _naf == null ? null
        : fbBuilder.writeString(_naf!);
    final int? allocatedUnitOffset = _allocatedUnit == null ? null
        : fbBuilder.writeString(_allocatedUnit!);
    final int? loadCategoryTypeOffset = _loadCategoryType == null ? null
        : fbBuilder.writeString(_loadCategoryType!);
    final int? stateOffset = _state == null ? null
        : fbBuilder.writeString(_state!);
    final int? apacsIdOffset = _apacsId == null ? null
        : fbBuilder.writeString(_apacsId!);
    final int? dipWorksheetNameOffset = _dipWorksheetName == null ? null
        : fbBuilder.writeString(_dipWorksheetName!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? requirementsOffset = _requirements == null ? null
        : fbBuilder.writeList(_requirements!.map(fbBuilder.writeString).toList());
    final int? remarksOffset = _remarks == null ? null
        : fbBuilder.writeList(_remarks!.map(fbBuilder.writeString).toList());
    final int? hazMatOffset = _hazMat == null ? null
        : fbBuilder.writeList(_hazMat!.map(fbBuilder.writeString).toList());
    final int? aircraftSortiesOffset = _aircraftSorties == null ? null
        : fbBuilder.writeList(_aircraftSorties!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(39);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, origMissionIdOffset);
    fbBuilder.addOffset(3, amcMissionIdOffset);
    fbBuilder.addOffset(4, gdssMissionIdOffset);
    fbBuilder.addOffset(5, prevMissionIdOffset);
    fbBuilder.addOffset(6, prevAmcmissionIdOffset);
    fbBuilder.addOffset(7, nextMissionIdOffset);
    fbBuilder.addOffset(8, nextAmcmissionIdOffset);
    fbBuilder.addOffset(9, objectiveOffset);
    fbBuilder.addOffset(10, purposeOffset);
    fbBuilder.addOffset(11, jcsPriorityOffset);
    fbBuilder.addBool(12, _cw);
    fbBuilder.addOffset(13, typeOffset);
    fbBuilder.addOffset(14, firstPickUpOffset);
    fbBuilder.addOffset(15, lastDropOffOffset);
    fbBuilder.addOffset(16, aliasOffset);
    fbBuilder.addOffset(17, callSignOffset);
    fbBuilder.addOffset(18, operationOffset);
    fbBuilder.addOffset(19, nafOffset);
    fbBuilder.addOffset(20, allocatedUnitOffset);
    fbBuilder.addOffset(21, loadCategoryTypeOffset);
    fbBuilder.addOffset(22, stateOffset);
    fbBuilder.addFloat64(23, _sourceSysDeviation);
    fbBuilder.addOffset(24, apacsIdOffset);
    fbBuilder.addOffset(25, dipWorksheetNameOffset);
    fbBuilder.addOffset(26, createdAtOffset);
    fbBuilder.addOffset(27, createdByOffset);
    fbBuilder.addOffset(28, updatedAtOffset);
    fbBuilder.addOffset(29, updatedByOffset);
    fbBuilder.addOffset(30, sourceDlOffset);
    fbBuilder.addOffset(31, sourceOffset);
    fbBuilder.addOffset(32, originOffset);
    fbBuilder.addInt8(33, _dataMode?.value);
    fbBuilder.addOffset(34, origNetworkOffset);
    fbBuilder.addOffset(35, requirementsOffset);
    fbBuilder.addOffset(36, remarksOffset);
    fbBuilder.addOffset(37, hazMatOffset);
    fbBuilder.addOffset(38, aircraftSortiesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
