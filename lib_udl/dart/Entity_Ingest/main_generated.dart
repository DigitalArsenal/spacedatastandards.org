// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class EntityIngestTypeEnum {
  final int value;
  const EntityIngestTypeEnum._(this.value);

  factory EntityIngestTypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EntityIngestTypeEnum');
    }
    return result;
  }

  static EntityIngestTypeEnum? _createOrNull(int? value) => 
      value == null ? null : EntityIngestTypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 10;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const EntityIngestTypeEnum AIRCRAFT = EntityIngestTypeEnum._(0);

  ///  No description available.
  static const EntityIngestTypeEnum BUS = EntityIngestTypeEnum._(1);

  ///  No description available.
  static const EntityIngestTypeEnum COMM = EntityIngestTypeEnum._(2);

  ///  No description available.
  static const EntityIngestTypeEnum IR = EntityIngestTypeEnum._(3);

  ///  No description available.
  static const EntityIngestTypeEnum NAVIGATION = EntityIngestTypeEnum._(4);

  ///  No description available.
  static const EntityIngestTypeEnum ONORBIT = EntityIngestTypeEnum._(5);

  ///  No description available.
  static const EntityIngestTypeEnum RFEMITTER = EntityIngestTypeEnum._(6);

  ///  No description available.
  static const EntityIngestTypeEnum SCIENTIFIC = EntityIngestTypeEnum._(7);

  ///  No description available.
  static const EntityIngestTypeEnum SENSOR = EntityIngestTypeEnum._(8);

  ///  No description available.
  static const EntityIngestTypeEnum SITE = EntityIngestTypeEnum._(9);

  ///  No description available.
  static const EntityIngestTypeEnum VESSEL = EntityIngestTypeEnum._(10);
  static const Map<int, EntityIngestTypeEnum> values = {
    0: AIRCRAFT,
    1: BUS,
    2: COMM,
    3: IR,
    4: NAVIGATION,
    5: ONORBIT,
    6: RFEMITTER,
    7: SCIENTIFIC,
    8: SENSOR,
    9: SITE,
    10: VESSEL};

  static const fb.Reader<EntityIngestTypeEnum> reader = _EntityIngestTypeEnumReader();

  @override
  String toString() {
    return 'EntityIngestTypeEnum{value: $value}';
  }
}

class _EntityIngestTypeEnumReader extends fb.Reader<EntityIngestTypeEnum> {
  const _EntityIngestTypeEnumReader();

  @override
  int get size => 1;

  @override
  EntityIngestTypeEnum read(fb.BufferContext bc, int offset) =>
      EntityIngestTypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class EntityIngestOwnerTypeEnum {
  final int value;
  const EntityIngestOwnerTypeEnum._(this.value);

  factory EntityIngestOwnerTypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EntityIngestOwnerTypeEnum');
    }
    return result;
  }

  static EntityIngestOwnerTypeEnum? _createOrNull(int? value) => 
      value == null ? null : EntityIngestOwnerTypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const EntityIngestOwnerTypeEnum COMMERCIAL = EntityIngestOwnerTypeEnum._(0);

  ///  No description available.
  static const EntityIngestOwnerTypeEnum GOVERNMENT = EntityIngestOwnerTypeEnum._(1);

  ///  No description available.
  static const EntityIngestOwnerTypeEnum ACADEMIC = EntityIngestOwnerTypeEnum._(2);

  ///  No description available.
  static const EntityIngestOwnerTypeEnum CONSORTIUM = EntityIngestOwnerTypeEnum._(3);

  ///  No description available.
  static const EntityIngestOwnerTypeEnum OTHER = EntityIngestOwnerTypeEnum._(4);
  static const Map<int, EntityIngestOwnerTypeEnum> values = {
    0: COMMERCIAL,
    1: GOVERNMENT,
    2: ACADEMIC,
    3: CONSORTIUM,
    4: OTHER};

  static const fb.Reader<EntityIngestOwnerTypeEnum> reader = _EntityIngestOwnerTypeEnumReader();

  @override
  String toString() {
    return 'EntityIngestOwnerTypeEnum{value: $value}';
  }
}

class _EntityIngestOwnerTypeEnumReader extends fb.Reader<EntityIngestOwnerTypeEnum> {
  const _EntityIngestOwnerTypeEnumReader();

  @override
  int get size => 1;

  @override
  EntityIngestOwnerTypeEnum read(fb.BufferContext bc, int offset) =>
      EntityIngestOwnerTypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class EntityIngestDataModeEnum {
  final int value;
  const EntityIngestDataModeEnum._(this.value);

  factory EntityIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EntityIngestDataModeEnum');
    }
    return result;
  }

  static EntityIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : EntityIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const EntityIngestDataModeEnum REAL = EntityIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const EntityIngestDataModeEnum TEST = EntityIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const EntityIngestDataModeEnum SIMULATED = EntityIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const EntityIngestDataModeEnum EXERCISE = EntityIngestDataModeEnum._(3);
  static const Map<int, EntityIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<EntityIngestDataModeEnum> reader = _EntityIngestDataModeEnumReader();

  @override
  String toString() {
    return 'EntityIngestDataModeEnum{value: $value}';
  }
}

class _EntityIngestDataModeEnumReader extends fb.Reader<EntityIngestDataModeEnum> {
  const _EntityIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  EntityIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      EntityIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.
class EntityIngest {
  EntityIngest._(this._bc, this._bcOffset);
  factory EntityIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EntityIngest> reader = _EntityIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record.
  ///  Example: /// Example: ENTITY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idEntity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Unique entity name.
  ///  Example: /// Example: Example name
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
  ///  Example: /// Example: ONORBIT
  ///  Constraints: Minimum length = 1, Maximum length = 45
  EntityIngestTypeEnum get type => EntityIngestTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 10, 0));
  ///  Unique identifier of the entity location, if terrestrial/fixed.
  ///  Example: /// Example: LOCATION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idLocation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).
  ///  Example: /// Example: Commercial
  ///  Constraints: Minimum length = 0, Maximum length = 32
  EntityIngestOwnerTypeEnum get ownerType => EntityIngestOwnerTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 16, 0));
  ///  Boolean indicating if this entity is taskable.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get taskable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  ///  List of URLs to additional details/documents for this entity.
  ///  Example: /// Example: ['URL1', 'URL2']
  ///  Constraints: No constraints specified.
  List<String>? get urls => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 20);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  EntityIngestDataModeEnum get dataMode => EntityIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 30, 0));
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get location => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get onOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Unique identifier of the associated operating unit object.
  ///  Example: /// Example: OPERATINGUNIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOperatingUnit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);

  @override
  String toString() {
    return 'EntityIngest{idEntity: ${idEntity}, name: ${name}, classificationMarking: ${classificationMarking}, type: ${type}, idLocation: ${idLocation}, countryCode: ${countryCode}, ownerType: ${ownerType}, taskable: ${taskable}, urls: ${urls}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, location: ${location}, onOrbit: ${onOrbit}, idOnOrbit: ${idOnOrbit}, idOperatingUnit: ${idOperatingUnit}, origNetwork: ${origNetwork}}';
  }
}

class _EntityIngestReader extends fb.TableReader<EntityIngest> {
  const _EntityIngestReader();

  @override
  EntityIngest createObject(fb.BufferContext bc, int offset) => 
    EntityIngest._(bc, offset);
}

class EntityIngestBuilder {
  EntityIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(19);
  }

  int addIdEntityOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addType(EntityIngestTypeEnum? type) {
    fbBuilder.addInt8(3, type?.value);
    return fbBuilder.offset;
  }
  int addIdLocationOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addOwnerType(EntityIngestOwnerTypeEnum? ownerType) {
    fbBuilder.addInt8(6, ownerType?.value);
    return fbBuilder.offset;
  }
  int addTaskable(bool? taskable) {
    fbBuilder.addBool(7, taskable);
    return fbBuilder.offset;
  }
  int addUrlsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addDataMode(EntityIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(13, dataMode?.value);
    return fbBuilder.offset;
  }
  int addLocationOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addIdOperatingUnitOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EntityIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _idEntity;
  final String? _name;
  final String? _classificationMarking;
  final EntityIngestTypeEnum? _type;
  final String? _idLocation;
  final String? _countryCode;
  final EntityIngestOwnerTypeEnum? _ownerType;
  final bool? _taskable;
  final List<String>? _urls;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final EntityIngestDataModeEnum? _dataMode;
  final String? _location;
  final String? _onOrbit;
  final String? _idOnOrbit;
  final String? _idOperatingUnit;
  final String? _origNetwork;

  EntityIngestObjectBuilder({
    String? idEntity,
    String? name,
    String? classificationMarking,
    EntityIngestTypeEnum? type,
    String? idLocation,
    String? countryCode,
    EntityIngestOwnerTypeEnum? ownerType,
    bool? taskable,
    List<String>? urls,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    EntityIngestDataModeEnum? dataMode,
    String? location,
    String? onOrbit,
    String? idOnOrbit,
    String? idOperatingUnit,
    String? origNetwork,
  })
      : _idEntity = idEntity,
        _name = name,
        _classificationMarking = classificationMarking,
        _type = type,
        _idLocation = idLocation,
        _countryCode = countryCode,
        _ownerType = ownerType,
        _taskable = taskable,
        _urls = urls,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _location = location,
        _onOrbit = onOrbit,
        _idOnOrbit = idOnOrbit,
        _idOperatingUnit = idOperatingUnit,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idEntityOffset = _idEntity == null ? null
        : fbBuilder.writeString(_idEntity!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idLocationOffset = _idLocation == null ? null
        : fbBuilder.writeString(_idLocation!);
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? urlsOffset = _urls == null ? null
        : fbBuilder.writeList(_urls!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? locationOffset = _location == null ? null
        : fbBuilder.writeString(_location!);
    final int? onOrbitOffset = _onOrbit == null ? null
        : fbBuilder.writeString(_onOrbit!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? idOperatingUnitOffset = _idOperatingUnit == null ? null
        : fbBuilder.writeString(_idOperatingUnit!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(19);
    fbBuilder.addOffset(0, idEntityOffset);
    fbBuilder.addOffset(1, nameOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addInt8(3, _type?.value);
    fbBuilder.addOffset(4, idLocationOffset);
    fbBuilder.addOffset(5, countryCodeOffset);
    fbBuilder.addInt8(6, _ownerType?.value);
    fbBuilder.addBool(7, _taskable);
    fbBuilder.addOffset(8, urlsOffset);
    fbBuilder.addOffset(9, createdAtOffset);
    fbBuilder.addOffset(10, createdByOffset);
    fbBuilder.addOffset(11, sourceOffset);
    fbBuilder.addOffset(12, originOffset);
    fbBuilder.addInt8(13, _dataMode?.value);
    fbBuilder.addOffset(14, locationOffset);
    fbBuilder.addOffset(15, onOrbitOffset);
    fbBuilder.addOffset(16, idOnOrbitOffset);
    fbBuilder.addOffset(17, idOperatingUnitOffset);
    fbBuilder.addOffset(18, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
