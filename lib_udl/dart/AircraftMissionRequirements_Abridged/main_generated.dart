// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection of Requirements associated with this Air Transport Mission.
class AircraftMissionRequirementsAbridged {
  AircraftMissionRequirementsAbridged._(this._bc, this._bcOffset);
  factory AircraftMissionRequirementsAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AircraftMissionRequirementsAbridged> reader = _AircraftMissionRequirementsAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Global Decision Support System (GDSS) mission requirement identifier.
  ///  Example: /// Example: 23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get gdssReqId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Identifier of the onload itinerary location.
  ///  Example: /// Example: 200
  ///  Constraints: No constraints specified.
  int get onloadId => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  ///  Onload location code.
  ///  Example: /// Example: KCHS
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get onloadLocode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Identifier of the offload itinerary location.
  ///  Example: /// Example: 300
  ///  Constraints: No constraints specified.
  int get offloadId => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Offload location code.
  ///  Example: /// Example: KHOP
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get offloadLocode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unit line number.
  ///  Example: /// Example: T01ME01
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get uln => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Transportation requirement number.
  ///  Example: /// Example: T01ME01
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get transReqNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Project name.
  ///  Example: /// Example: CENTINTRA21
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get projName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Identification number of the Operation Plan (OPLAN) associated with this mission.
  ///  Example: /// Example: 5027
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get oplan => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Number of passengers associated with the mission.
  ///  Example: /// Example: 44
  ///  Constraints: No constraints specified.
  int get numPax => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 22, 0);
  ///  Number of litter patients tasked for the mission.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get numLitter => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 24, 0);
  ///  Number of ambulatory patients tasked for the mission.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get numAmbulatory => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  Number of attendants tasked for the mission.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get numAttendant => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  Total weight of the bulk cargo, in kilograms.
  ///  Example: /// Example: 1.3
  ///  Constraints: No constraints specified.
  double get bulkWeight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Total weight of the oversized cargo, in kilograms.
  ///  Example: /// Example: 1.3
  ///  Constraints: No constraints specified.
  double get oversizeWeight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Total weight of the outsize cargo, in kilograms.
  ///  Example: /// Example: 1.3
  ///  Constraints: No constraints specified.
  double get outsizeWeight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Earliest available date the cargo can be picked up.
  ///  Example: /// Example: 2024-01-01T16:00:00Z
  ///  Constraints: No constraints specified.
  String? get ead => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Latest available date the cargo may be delivered.
  ///  Example: /// Example: 2024-01-01T16:00:00Z
  ///  Constraints: No constraints specified.
  String? get lad => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);

  @override
  String toString() {
    return 'AircraftMissionRequirementsAbridged{gdssReqId: ${gdssReqId}, onloadId: ${onloadId}, onloadLocode: ${onloadLocode}, offloadId: ${offloadId}, offloadLocode: ${offloadLocode}, uln: ${uln}, transReqNum: ${transReqNum}, projName: ${projName}, oplan: ${oplan}, numPax: ${numPax}, numLitter: ${numLitter}, numAmbulatory: ${numAmbulatory}, numAttendant: ${numAttendant}, bulkWeight: ${bulkWeight}, oversizeWeight: ${oversizeWeight}, outsizeWeight: ${outsizeWeight}, ead: ${ead}, lad: ${lad}}';
  }
}

class _AircraftMissionRequirementsAbridgedReader extends fb.TableReader<AircraftMissionRequirementsAbridged> {
  const _AircraftMissionRequirementsAbridgedReader();

  @override
  AircraftMissionRequirementsAbridged createObject(fb.BufferContext bc, int offset) => 
    AircraftMissionRequirementsAbridged._(bc, offset);
}

class AircraftMissionRequirementsAbridgedBuilder {
  AircraftMissionRequirementsAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(18);
  }

  int addGdssReqIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addOnloadId(int? onloadId) {
    fbBuilder.addInt32(1, onloadId);
    return fbBuilder.offset;
  }
  int addOnloadLocodeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addOffloadId(int? offloadId) {
    fbBuilder.addInt32(3, offloadId);
    return fbBuilder.offset;
  }
  int addOffloadLocodeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addUlnOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTransReqNumOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addProjNameOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOplanOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addNumPax(int? numPax) {
    fbBuilder.addInt32(9, numPax);
    return fbBuilder.offset;
  }
  int addNumLitter(int? numLitter) {
    fbBuilder.addInt32(10, numLitter);
    return fbBuilder.offset;
  }
  int addNumAmbulatory(int? numAmbulatory) {
    fbBuilder.addInt32(11, numAmbulatory);
    return fbBuilder.offset;
  }
  int addNumAttendant(int? numAttendant) {
    fbBuilder.addInt32(12, numAttendant);
    return fbBuilder.offset;
  }
  int addBulkWeight(double? bulkWeight) {
    fbBuilder.addFloat64(13, bulkWeight);
    return fbBuilder.offset;
  }
  int addOversizeWeight(double? oversizeWeight) {
    fbBuilder.addFloat64(14, oversizeWeight);
    return fbBuilder.offset;
  }
  int addOutsizeWeight(double? outsizeWeight) {
    fbBuilder.addFloat64(15, outsizeWeight);
    return fbBuilder.offset;
  }
  int addEadOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addLadOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AircraftMissionRequirementsAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _gdssReqId;
  final int? _onloadId;
  final String? _onloadLocode;
  final int? _offloadId;
  final String? _offloadLocode;
  final String? _uln;
  final String? _transReqNum;
  final String? _projName;
  final String? _oplan;
  final int? _numPax;
  final int? _numLitter;
  final int? _numAmbulatory;
  final int? _numAttendant;
  final double? _bulkWeight;
  final double? _oversizeWeight;
  final double? _outsizeWeight;
  final String? _ead;
  final String? _lad;

  AircraftMissionRequirementsAbridgedObjectBuilder({
    String? gdssReqId,
    int? onloadId,
    String? onloadLocode,
    int? offloadId,
    String? offloadLocode,
    String? uln,
    String? transReqNum,
    String? projName,
    String? oplan,
    int? numPax,
    int? numLitter,
    int? numAmbulatory,
    int? numAttendant,
    double? bulkWeight,
    double? oversizeWeight,
    double? outsizeWeight,
    String? ead,
    String? lad,
  })
      : _gdssReqId = gdssReqId,
        _onloadId = onloadId,
        _onloadLocode = onloadLocode,
        _offloadId = offloadId,
        _offloadLocode = offloadLocode,
        _uln = uln,
        _transReqNum = transReqNum,
        _projName = projName,
        _oplan = oplan,
        _numPax = numPax,
        _numLitter = numLitter,
        _numAmbulatory = numAmbulatory,
        _numAttendant = numAttendant,
        _bulkWeight = bulkWeight,
        _oversizeWeight = oversizeWeight,
        _outsizeWeight = outsizeWeight,
        _ead = ead,
        _lad = lad;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? gdssReqIdOffset = _gdssReqId == null ? null
        : fbBuilder.writeString(_gdssReqId!);
    final int? onloadLocodeOffset = _onloadLocode == null ? null
        : fbBuilder.writeString(_onloadLocode!);
    final int? offloadLocodeOffset = _offloadLocode == null ? null
        : fbBuilder.writeString(_offloadLocode!);
    final int? ulnOffset = _uln == null ? null
        : fbBuilder.writeString(_uln!);
    final int? transReqNumOffset = _transReqNum == null ? null
        : fbBuilder.writeString(_transReqNum!);
    final int? projNameOffset = _projName == null ? null
        : fbBuilder.writeString(_projName!);
    final int? oplanOffset = _oplan == null ? null
        : fbBuilder.writeString(_oplan!);
    final int? eadOffset = _ead == null ? null
        : fbBuilder.writeString(_ead!);
    final int? ladOffset = _lad == null ? null
        : fbBuilder.writeString(_lad!);
    fbBuilder.startTable(18);
    fbBuilder.addOffset(0, gdssReqIdOffset);
    fbBuilder.addInt32(1, _onloadId);
    fbBuilder.addOffset(2, onloadLocodeOffset);
    fbBuilder.addInt32(3, _offloadId);
    fbBuilder.addOffset(4, offloadLocodeOffset);
    fbBuilder.addOffset(5, ulnOffset);
    fbBuilder.addOffset(6, transReqNumOffset);
    fbBuilder.addOffset(7, projNameOffset);
    fbBuilder.addOffset(8, oplanOffset);
    fbBuilder.addInt32(9, _numPax);
    fbBuilder.addInt32(10, _numLitter);
    fbBuilder.addInt32(11, _numAmbulatory);
    fbBuilder.addInt32(12, _numAttendant);
    fbBuilder.addFloat64(13, _bulkWeight);
    fbBuilder.addFloat64(14, _oversizeWeight);
    fbBuilder.addFloat64(15, _outsizeWeight);
    fbBuilder.addOffset(16, eadOffset);
    fbBuilder.addOffset(17, ladOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
