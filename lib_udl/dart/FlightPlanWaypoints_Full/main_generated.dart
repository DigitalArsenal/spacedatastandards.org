// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection of waypoints associated with this flight plan.
class FlightPlanWaypointsFull {
  FlightPlanWaypointsFull._(this._bc, this._bcOffset);
  factory FlightPlanWaypointsFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FlightPlanWaypointsFull> reader = _FlightPlanWaypointsFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Points are designated by type as either a comment point or a waypoint. A comment point conveys important information about the point for pilots but is not entered into a flight management system. A waypoint is a point that is entered into a flight management system and/or filed with Air Traffic Control.
  ///  Example: /// Example: COMMENT
  ///  Constraints: Minimum length = 1, Maximum length = 16
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Name of the point. The name of a comment point identifies important information about that point, e.g. Top of Climb. The name of a waypoint identifies the location of that point.
  ///  Example: /// Example: KCHS
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get waypointName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The waypoint number on the route. Comment points do not get a waypoint number.
  ///  Example: /// Example: 20
  ///  Constraints: No constraints specified.
  int get waypointNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  ///  The flight path flown for this leg.
  ///  Example: /// Example: W15
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get airway => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Point identifying an air refueling track/anchor or fixed track.
  ///  Example: /// Example: ARIP
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get arpt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  The ID of the air refueling track/anchor or fixed track.
  ///  Example: /// Example: AR202
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get arId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Navigational Aid (NAVAID) identification code.
  ///  Example: /// Example: HTO
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get navaid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
  ///  Example: /// Example: 83X
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get tacanChannel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in megahertz.
  ///  Example: /// Example: 113.6
  ///  Constraints: No constraints specified.
  double get vorFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
  ///  Example: /// Example: EXTREME
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get turbCat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The icing intensity classification for this flight (LIGHT, MODERATE, etc).
  ///  Example: /// Example: MODERATE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get iceCat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The thunderstorm intensity classification for this flight (LIGHT, MODERATE, etc).
  ///  Example: /// Example: MODERATE
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get thunderCat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Altitude of a level, point, or object measured in feet above mean sea level.
  ///  Example: /// Example: 27000.1
  ///  Constraints: No constraints specified.
  double get alt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Average temperature deviation from standard day profile for this leg in degrees Celsius.
  ///  Example: /// Example: 12.1
  ///  Constraints: No constraints specified.
  double get tempDev => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  The fuel degrade percentage used for this leg.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get legFuelDegrade => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  The average Mach speed for this leg.
  ///  Example: /// Example: 0.74
  ///  Constraints: No constraints specified.
  double get legMach => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  The mission index value for this leg. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
  ///  Example: /// Example: 65
  ///  Constraints: No constraints specified.
  double get legMsnIndex => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  The percent degrade due to drag for this aircraft for this leg.
  ///  Example: /// Example: 1.2
  ///  Constraints: No constraints specified.
  double get legDragIndex => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  The average calibrated airspeed (CAS) for this leg in knots.
  ///  Example: /// Example: 200.1
  ///  Constraints: No constraints specified.
  double get avgCalAirspeed => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  The average true airspeed (TAS) for this leg in knots.
  ///  Example: /// Example: 210.1
  ///  Constraints: No constraints specified.
  double get avgTrueAirspeed => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  The average ground speed for this leg in knots.
  ///  Example: /// Example: 300.1
  ///  Constraints: No constraints specified.
  double get avgGroundSpeed => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  The primary UHF radio frequency used for the air refueling track or anchor in megahertz.
  ///  Example: /// Example: 357.5
  ///  Constraints: No constraints specified.
  double get priFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  The wind direction at this specific point in degrees from true north.
  ///  Example: /// Example: 165.5
  ///  Constraints: No constraints specified.
  double get pointWindDir => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  The wind velocity at this specific point in knots.
  ///  Example: /// Example: 14.4
  ///  Constraints: No constraints specified.
  double get pointWindSpeed => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  The average wind direction for this leg in degrees from true north.
  ///  Example: /// Example: 165.5
  ///  Constraints: No constraints specified.
  double get avgWindDir => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  The average wind speed for this leg in knots.
  ///  Example: /// Example: 14.4
  ///  Constraints: No constraints specified.
  double get avgWindSpeed => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  The wind factor for this leg in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  ///  Example: /// Example: -32.1
  ///  Constraints: No constraints specified.
  double get legWindFac => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  The average drift angle for this leg in degrees from true north.
  ///  Example: /// Example: -3.2
  ///  Constraints: No constraints specified.
  double get avgDriftAng => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  The secondary UHF radio frequency used for the air refueling track or anchor in megahertz.
  ///  Example: /// Example: 357.5
  ///  Constraints: No constraints specified.
  double get secFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  The magnetic course at leg midpoint in degrees from true north.
  ///  Example: /// Example: 338.1
  ///  Constraints: No constraints specified.
  double get magCourse => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  The true course at leg midpoint in degrees from true north.
  ///  Example: /// Example: 328.1
  ///  Constraints: No constraints specified.
  double get trueCourse => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  The magnetic heading at leg midpoint in degrees from true north.
  ///  Example: /// Example: 212.1
  ///  Constraints: No constraints specified.
  double get magHeading => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  The air-to-air Tactical Air Navigation (TACAN) channels used by the receiver/tanker during air refueling.
  ///  Example: /// Example: 31/94
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get aaTacanChannel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  The zone/leg distance flown in nautical miles.
  ///  Example: /// Example: 212.1
  ///  Constraints: No constraints specified.
  double get zoneDistance => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  The total distance flown to this waypoint calculated from point of departure in nautical miles.
  ///  Example: /// Example: 688.1
  ///  Constraints: No constraints specified.
  double get totalFlownDistance => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  The total distance remaining from this waypoint to the point of arrival in nautical miles.
  ///  Example: /// Example: 1288.1
  ///  Constraints: No constraints specified.
  double get totalRemDistance => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  The time to fly this zone/leg in minutes.
  ///  Example: /// Example: 36.1
  ///  Constraints: No constraints specified.
  double get zoneTime => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  The total time accumulated from takeoff to this waypoint expressed as HH:MM.
  ///  Example: /// Example: 08:45
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get totalTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  The total time remaining from this waypoint to the point of arrival expressed as HH:MM.
  ///  Example: /// Example: 01:43
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get totalTimeRem => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  The amount of fuel used on this zone/leg in pounds.
  ///  Example: /// Example: 1120.1
  ///  Constraints: No constraints specified.
  double get zoneFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  The total fuel used to this waypoint from point of departure in pounds.
  ///  Example: /// Example: 70431.1
  ///  Constraints: No constraints specified.
  double get totalUsedFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  The total fuel remaining at this waypoint in pounds.
  ///  Example: /// Example: 30453.1
  ///  Constraints: No constraints specified.
  double get totalRemFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  The amount of fuel onloaded or offloaded at this waypoint in pounds (negative value for offload).
  ///  Example: /// Example: -30400.1
  ///  Constraints: No constraints specified.
  double get exchangedFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  The air distance of this leg in nautical miles.
  ///  Example: /// Example: 321.1
  ///  Constraints: No constraints specified.
  double get airDistance => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 94, 0.0);
  ///  The total air distance to this waypoint in nautical miles.
  ///  Example: /// Example: 3251.1
  ///  Constraints: No constraints specified.
  double get totalAirDistance => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 96, 0.0);
  ///  The total weight of the aircraft at this waypoint in pounds.
  ///  Example: /// Example: 207123.1
  ///  Constraints: No constraints specified.
  double get totalWeight => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2023-09-09T01:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get eta => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2023-09-09T01:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get ata => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  The leg fuel flow in pounds per hour.
  ///  Example: /// Example: 17654.1
  ///  Constraints: No constraints specified.
  double get fuelFlow => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 104, 0.0);
  ///  The planned alternate leg based on user-defined constraints, International Civil Aviation Organization (ICAO) code preferred.
  ///  Example: /// Example: KCHS
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get legAlternate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  The magnetic variation for this leg in degrees.
  ///  Example: /// Example: -13.2
  ///  Constraints: No constraints specified.
  double get magVar => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 108, 0.0);
  ///  The day low level altitude in feet above sea level for the leg ending at this waypoint.
  ///  Example: /// Example: 1500.1
  ///  Constraints: No constraints specified.
  double get dayLowAlt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 110, 0.0);
  ///  The night low level altitude in feet above sea level for the leg ending at this waypoint.
  ///  Example: /// Example: 2300.1
  ///  Constraints: No constraints specified.
  double get nightLowAlt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 112, 0.0);
  ///  The night vision goggle low level altitude in feet above sea level for the leg ending at this waypoint.
  ///  Example: /// Example: 2450.1
  ///  Constraints: No constraints specified.
  double get nvgLowAlt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 114, 0.0);

  @override
  String toString() {
    return 'FlightPlanWaypointsFull{type: ${type}, waypointName: ${waypointName}, waypointNum: ${waypointNum}, airway: ${airway}, arpt: ${arpt}, lat: ${lat}, lon: ${lon}, arId: ${arId}, navaid: ${navaid}, tacanChannel: ${tacanChannel}, vorFreq: ${vorFreq}, turbCat: ${turbCat}, iceCat: ${iceCat}, thunderCat: ${thunderCat}, alt: ${alt}, tempDev: ${tempDev}, legFuelDegrade: ${legFuelDegrade}, legMach: ${legMach}, legMsnIndex: ${legMsnIndex}, legDragIndex: ${legDragIndex}, avgCalAirspeed: ${avgCalAirspeed}, avgTrueAirspeed: ${avgTrueAirspeed}, avgGroundSpeed: ${avgGroundSpeed}, priFreq: ${priFreq}, pointWindDir: ${pointWindDir}, pointWindSpeed: ${pointWindSpeed}, avgWindDir: ${avgWindDir}, avgWindSpeed: ${avgWindSpeed}, legWindFac: ${legWindFac}, avgDriftAng: ${avgDriftAng}, secFreq: ${secFreq}, magCourse: ${magCourse}, trueCourse: ${trueCourse}, magHeading: ${magHeading}, aaTacanChannel: ${aaTacanChannel}, zoneDistance: ${zoneDistance}, totalFlownDistance: ${totalFlownDistance}, totalRemDistance: ${totalRemDistance}, zoneTime: ${zoneTime}, totalTime: ${totalTime}, totalTimeRem: ${totalTimeRem}, zoneFuel: ${zoneFuel}, totalUsedFuel: ${totalUsedFuel}, totalRemFuel: ${totalRemFuel}, exchangedFuel: ${exchangedFuel}, airDistance: ${airDistance}, totalAirDistance: ${totalAirDistance}, totalWeight: ${totalWeight}, eta: ${eta}, ata: ${ata}, fuelFlow: ${fuelFlow}, legAlternate: ${legAlternate}, magVar: ${magVar}, dayLowAlt: ${dayLowAlt}, nightLowAlt: ${nightLowAlt}, nvgLowAlt: ${nvgLowAlt}}';
  }
}

class _FlightPlanWaypointsFullReader extends fb.TableReader<FlightPlanWaypointsFull> {
  const _FlightPlanWaypointsFullReader();

  @override
  FlightPlanWaypointsFull createObject(fb.BufferContext bc, int offset) => 
    FlightPlanWaypointsFull._(bc, offset);
}

class FlightPlanWaypointsFullBuilder {
  FlightPlanWaypointsFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(56);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addWaypointNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addWaypointNum(int? waypointNum) {
    fbBuilder.addInt32(2, waypointNum);
    return fbBuilder.offset;
  }
  int addAirwayOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addArptOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(5, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(6, lon);
    return fbBuilder.offset;
  }
  int addArIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addNavaidOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addTacanChannelOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addVorFreq(double? vorFreq) {
    fbBuilder.addFloat64(10, vorFreq);
    return fbBuilder.offset;
  }
  int addTurbCatOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addIceCatOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addThunderCatOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addAlt(double? alt) {
    fbBuilder.addFloat64(14, alt);
    return fbBuilder.offset;
  }
  int addTempDev(double? tempDev) {
    fbBuilder.addFloat64(15, tempDev);
    return fbBuilder.offset;
  }
  int addLegFuelDegrade(double? legFuelDegrade) {
    fbBuilder.addFloat64(16, legFuelDegrade);
    return fbBuilder.offset;
  }
  int addLegMach(double? legMach) {
    fbBuilder.addFloat64(17, legMach);
    return fbBuilder.offset;
  }
  int addLegMsnIndex(double? legMsnIndex) {
    fbBuilder.addFloat64(18, legMsnIndex);
    return fbBuilder.offset;
  }
  int addLegDragIndex(double? legDragIndex) {
    fbBuilder.addFloat64(19, legDragIndex);
    return fbBuilder.offset;
  }
  int addAvgCalAirspeed(double? avgCalAirspeed) {
    fbBuilder.addFloat64(20, avgCalAirspeed);
    return fbBuilder.offset;
  }
  int addAvgTrueAirspeed(double? avgTrueAirspeed) {
    fbBuilder.addFloat64(21, avgTrueAirspeed);
    return fbBuilder.offset;
  }
  int addAvgGroundSpeed(double? avgGroundSpeed) {
    fbBuilder.addFloat64(22, avgGroundSpeed);
    return fbBuilder.offset;
  }
  int addPriFreq(double? priFreq) {
    fbBuilder.addFloat64(23, priFreq);
    return fbBuilder.offset;
  }
  int addPointWindDir(double? pointWindDir) {
    fbBuilder.addFloat64(24, pointWindDir);
    return fbBuilder.offset;
  }
  int addPointWindSpeed(double? pointWindSpeed) {
    fbBuilder.addFloat64(25, pointWindSpeed);
    return fbBuilder.offset;
  }
  int addAvgWindDir(double? avgWindDir) {
    fbBuilder.addFloat64(26, avgWindDir);
    return fbBuilder.offset;
  }
  int addAvgWindSpeed(double? avgWindSpeed) {
    fbBuilder.addFloat64(27, avgWindSpeed);
    return fbBuilder.offset;
  }
  int addLegWindFac(double? legWindFac) {
    fbBuilder.addFloat64(28, legWindFac);
    return fbBuilder.offset;
  }
  int addAvgDriftAng(double? avgDriftAng) {
    fbBuilder.addFloat64(29, avgDriftAng);
    return fbBuilder.offset;
  }
  int addSecFreq(double? secFreq) {
    fbBuilder.addFloat64(30, secFreq);
    return fbBuilder.offset;
  }
  int addMagCourse(double? magCourse) {
    fbBuilder.addFloat64(31, magCourse);
    return fbBuilder.offset;
  }
  int addTrueCourse(double? trueCourse) {
    fbBuilder.addFloat64(32, trueCourse);
    return fbBuilder.offset;
  }
  int addMagHeading(double? magHeading) {
    fbBuilder.addFloat64(33, magHeading);
    return fbBuilder.offset;
  }
  int addAaTacanChannelOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addZoneDistance(double? zoneDistance) {
    fbBuilder.addFloat64(35, zoneDistance);
    return fbBuilder.offset;
  }
  int addTotalFlownDistance(double? totalFlownDistance) {
    fbBuilder.addFloat64(36, totalFlownDistance);
    return fbBuilder.offset;
  }
  int addTotalRemDistance(double? totalRemDistance) {
    fbBuilder.addFloat64(37, totalRemDistance);
    return fbBuilder.offset;
  }
  int addZoneTime(double? zoneTime) {
    fbBuilder.addFloat64(38, zoneTime);
    return fbBuilder.offset;
  }
  int addTotalTimeOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addTotalTimeRemOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addZoneFuel(double? zoneFuel) {
    fbBuilder.addFloat64(41, zoneFuel);
    return fbBuilder.offset;
  }
  int addTotalUsedFuel(double? totalUsedFuel) {
    fbBuilder.addFloat64(42, totalUsedFuel);
    return fbBuilder.offset;
  }
  int addTotalRemFuel(double? totalRemFuel) {
    fbBuilder.addFloat64(43, totalRemFuel);
    return fbBuilder.offset;
  }
  int addExchangedFuel(double? exchangedFuel) {
    fbBuilder.addFloat64(44, exchangedFuel);
    return fbBuilder.offset;
  }
  int addAirDistance(double? airDistance) {
    fbBuilder.addFloat64(45, airDistance);
    return fbBuilder.offset;
  }
  int addTotalAirDistance(double? totalAirDistance) {
    fbBuilder.addFloat64(46, totalAirDistance);
    return fbBuilder.offset;
  }
  int addTotalWeight(double? totalWeight) {
    fbBuilder.addFloat64(47, totalWeight);
    return fbBuilder.offset;
  }
  int addEtaOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addAtaOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addFuelFlow(double? fuelFlow) {
    fbBuilder.addFloat64(50, fuelFlow);
    return fbBuilder.offset;
  }
  int addLegAlternateOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addMagVar(double? magVar) {
    fbBuilder.addFloat64(52, magVar);
    return fbBuilder.offset;
  }
  int addDayLowAlt(double? dayLowAlt) {
    fbBuilder.addFloat64(53, dayLowAlt);
    return fbBuilder.offset;
  }
  int addNightLowAlt(double? nightLowAlt) {
    fbBuilder.addFloat64(54, nightLowAlt);
    return fbBuilder.offset;
  }
  int addNvgLowAlt(double? nvgLowAlt) {
    fbBuilder.addFloat64(55, nvgLowAlt);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FlightPlanWaypointsFullObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _waypointName;
  final int? _waypointNum;
  final String? _airway;
  final String? _arpt;
  final double? _lat;
  final double? _lon;
  final String? _arId;
  final String? _navaid;
  final String? _tacanChannel;
  final double? _vorFreq;
  final String? _turbCat;
  final String? _iceCat;
  final String? _thunderCat;
  final double? _alt;
  final double? _tempDev;
  final double? _legFuelDegrade;
  final double? _legMach;
  final double? _legMsnIndex;
  final double? _legDragIndex;
  final double? _avgCalAirspeed;
  final double? _avgTrueAirspeed;
  final double? _avgGroundSpeed;
  final double? _priFreq;
  final double? _pointWindDir;
  final double? _pointWindSpeed;
  final double? _avgWindDir;
  final double? _avgWindSpeed;
  final double? _legWindFac;
  final double? _avgDriftAng;
  final double? _secFreq;
  final double? _magCourse;
  final double? _trueCourse;
  final double? _magHeading;
  final String? _aaTacanChannel;
  final double? _zoneDistance;
  final double? _totalFlownDistance;
  final double? _totalRemDistance;
  final double? _zoneTime;
  final String? _totalTime;
  final String? _totalTimeRem;
  final double? _zoneFuel;
  final double? _totalUsedFuel;
  final double? _totalRemFuel;
  final double? _exchangedFuel;
  final double? _airDistance;
  final double? _totalAirDistance;
  final double? _totalWeight;
  final String? _eta;
  final String? _ata;
  final double? _fuelFlow;
  final String? _legAlternate;
  final double? _magVar;
  final double? _dayLowAlt;
  final double? _nightLowAlt;
  final double? _nvgLowAlt;

  FlightPlanWaypointsFullObjectBuilder({
    String? type,
    String? waypointName,
    int? waypointNum,
    String? airway,
    String? arpt,
    double? lat,
    double? lon,
    String? arId,
    String? navaid,
    String? tacanChannel,
    double? vorFreq,
    String? turbCat,
    String? iceCat,
    String? thunderCat,
    double? alt,
    double? tempDev,
    double? legFuelDegrade,
    double? legMach,
    double? legMsnIndex,
    double? legDragIndex,
    double? avgCalAirspeed,
    double? avgTrueAirspeed,
    double? avgGroundSpeed,
    double? priFreq,
    double? pointWindDir,
    double? pointWindSpeed,
    double? avgWindDir,
    double? avgWindSpeed,
    double? legWindFac,
    double? avgDriftAng,
    double? secFreq,
    double? magCourse,
    double? trueCourse,
    double? magHeading,
    String? aaTacanChannel,
    double? zoneDistance,
    double? totalFlownDistance,
    double? totalRemDistance,
    double? zoneTime,
    String? totalTime,
    String? totalTimeRem,
    double? zoneFuel,
    double? totalUsedFuel,
    double? totalRemFuel,
    double? exchangedFuel,
    double? airDistance,
    double? totalAirDistance,
    double? totalWeight,
    String? eta,
    String? ata,
    double? fuelFlow,
    String? legAlternate,
    double? magVar,
    double? dayLowAlt,
    double? nightLowAlt,
    double? nvgLowAlt,
  })
      : _type = type,
        _waypointName = waypointName,
        _waypointNum = waypointNum,
        _airway = airway,
        _arpt = arpt,
        _lat = lat,
        _lon = lon,
        _arId = arId,
        _navaid = navaid,
        _tacanChannel = tacanChannel,
        _vorFreq = vorFreq,
        _turbCat = turbCat,
        _iceCat = iceCat,
        _thunderCat = thunderCat,
        _alt = alt,
        _tempDev = tempDev,
        _legFuelDegrade = legFuelDegrade,
        _legMach = legMach,
        _legMsnIndex = legMsnIndex,
        _legDragIndex = legDragIndex,
        _avgCalAirspeed = avgCalAirspeed,
        _avgTrueAirspeed = avgTrueAirspeed,
        _avgGroundSpeed = avgGroundSpeed,
        _priFreq = priFreq,
        _pointWindDir = pointWindDir,
        _pointWindSpeed = pointWindSpeed,
        _avgWindDir = avgWindDir,
        _avgWindSpeed = avgWindSpeed,
        _legWindFac = legWindFac,
        _avgDriftAng = avgDriftAng,
        _secFreq = secFreq,
        _magCourse = magCourse,
        _trueCourse = trueCourse,
        _magHeading = magHeading,
        _aaTacanChannel = aaTacanChannel,
        _zoneDistance = zoneDistance,
        _totalFlownDistance = totalFlownDistance,
        _totalRemDistance = totalRemDistance,
        _zoneTime = zoneTime,
        _totalTime = totalTime,
        _totalTimeRem = totalTimeRem,
        _zoneFuel = zoneFuel,
        _totalUsedFuel = totalUsedFuel,
        _totalRemFuel = totalRemFuel,
        _exchangedFuel = exchangedFuel,
        _airDistance = airDistance,
        _totalAirDistance = totalAirDistance,
        _totalWeight = totalWeight,
        _eta = eta,
        _ata = ata,
        _fuelFlow = fuelFlow,
        _legAlternate = legAlternate,
        _magVar = magVar,
        _dayLowAlt = dayLowAlt,
        _nightLowAlt = nightLowAlt,
        _nvgLowAlt = nvgLowAlt;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? waypointNameOffset = _waypointName == null ? null
        : fbBuilder.writeString(_waypointName!);
    final int? airwayOffset = _airway == null ? null
        : fbBuilder.writeString(_airway!);
    final int? arptOffset = _arpt == null ? null
        : fbBuilder.writeString(_arpt!);
    final int? arIdOffset = _arId == null ? null
        : fbBuilder.writeString(_arId!);
    final int? navaidOffset = _navaid == null ? null
        : fbBuilder.writeString(_navaid!);
    final int? tacanChannelOffset = _tacanChannel == null ? null
        : fbBuilder.writeString(_tacanChannel!);
    final int? turbCatOffset = _turbCat == null ? null
        : fbBuilder.writeString(_turbCat!);
    final int? iceCatOffset = _iceCat == null ? null
        : fbBuilder.writeString(_iceCat!);
    final int? thunderCatOffset = _thunderCat == null ? null
        : fbBuilder.writeString(_thunderCat!);
    final int? aaTacanChannelOffset = _aaTacanChannel == null ? null
        : fbBuilder.writeString(_aaTacanChannel!);
    final int? totalTimeOffset = _totalTime == null ? null
        : fbBuilder.writeString(_totalTime!);
    final int? totalTimeRemOffset = _totalTimeRem == null ? null
        : fbBuilder.writeString(_totalTimeRem!);
    final int? etaOffset = _eta == null ? null
        : fbBuilder.writeString(_eta!);
    final int? ataOffset = _ata == null ? null
        : fbBuilder.writeString(_ata!);
    final int? legAlternateOffset = _legAlternate == null ? null
        : fbBuilder.writeString(_legAlternate!);
    fbBuilder.startTable(56);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, waypointNameOffset);
    fbBuilder.addInt32(2, _waypointNum);
    fbBuilder.addOffset(3, airwayOffset);
    fbBuilder.addOffset(4, arptOffset);
    fbBuilder.addFloat64(5, _lat);
    fbBuilder.addFloat64(6, _lon);
    fbBuilder.addOffset(7, arIdOffset);
    fbBuilder.addOffset(8, navaidOffset);
    fbBuilder.addOffset(9, tacanChannelOffset);
    fbBuilder.addFloat64(10, _vorFreq);
    fbBuilder.addOffset(11, turbCatOffset);
    fbBuilder.addOffset(12, iceCatOffset);
    fbBuilder.addOffset(13, thunderCatOffset);
    fbBuilder.addFloat64(14, _alt);
    fbBuilder.addFloat64(15, _tempDev);
    fbBuilder.addFloat64(16, _legFuelDegrade);
    fbBuilder.addFloat64(17, _legMach);
    fbBuilder.addFloat64(18, _legMsnIndex);
    fbBuilder.addFloat64(19, _legDragIndex);
    fbBuilder.addFloat64(20, _avgCalAirspeed);
    fbBuilder.addFloat64(21, _avgTrueAirspeed);
    fbBuilder.addFloat64(22, _avgGroundSpeed);
    fbBuilder.addFloat64(23, _priFreq);
    fbBuilder.addFloat64(24, _pointWindDir);
    fbBuilder.addFloat64(25, _pointWindSpeed);
    fbBuilder.addFloat64(26, _avgWindDir);
    fbBuilder.addFloat64(27, _avgWindSpeed);
    fbBuilder.addFloat64(28, _legWindFac);
    fbBuilder.addFloat64(29, _avgDriftAng);
    fbBuilder.addFloat64(30, _secFreq);
    fbBuilder.addFloat64(31, _magCourse);
    fbBuilder.addFloat64(32, _trueCourse);
    fbBuilder.addFloat64(33, _magHeading);
    fbBuilder.addOffset(34, aaTacanChannelOffset);
    fbBuilder.addFloat64(35, _zoneDistance);
    fbBuilder.addFloat64(36, _totalFlownDistance);
    fbBuilder.addFloat64(37, _totalRemDistance);
    fbBuilder.addFloat64(38, _zoneTime);
    fbBuilder.addOffset(39, totalTimeOffset);
    fbBuilder.addOffset(40, totalTimeRemOffset);
    fbBuilder.addFloat64(41, _zoneFuel);
    fbBuilder.addFloat64(42, _totalUsedFuel);
    fbBuilder.addFloat64(43, _totalRemFuel);
    fbBuilder.addFloat64(44, _exchangedFuel);
    fbBuilder.addFloat64(45, _airDistance);
    fbBuilder.addFloat64(46, _totalAirDistance);
    fbBuilder.addFloat64(47, _totalWeight);
    fbBuilder.addOffset(48, etaOffset);
    fbBuilder.addOffset(49, ataOffset);
    fbBuilder.addFloat64(50, _fuelFlow);
    fbBuilder.addOffset(51, legAlternateOffset);
    fbBuilder.addFloat64(52, _magVar);
    fbBuilder.addFloat64(53, _dayLowAlt);
    fbBuilder.addFloat64(54, _nightLowAlt);
    fbBuilder.addFloat64(55, _nvgLowAlt);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
