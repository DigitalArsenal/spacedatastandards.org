// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class MonoRadarIngestDataModeEnum {
  final int value;
  const MonoRadarIngestDataModeEnum._(this.value);

  factory MonoRadarIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum MonoRadarIngestDataModeEnum');
    }
    return result;
  }

  static MonoRadarIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : MonoRadarIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const MonoRadarIngestDataModeEnum REAL = MonoRadarIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const MonoRadarIngestDataModeEnum TEST = MonoRadarIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const MonoRadarIngestDataModeEnum SIMULATED = MonoRadarIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const MonoRadarIngestDataModeEnum EXERCISE = MonoRadarIngestDataModeEnum._(3);
  static const Map<int, MonoRadarIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<MonoRadarIngestDataModeEnum> reader = _MonoRadarIngestDataModeEnumReader();

  @override
  String toString() {
    return 'MonoRadarIngestDataModeEnum{value: $value}';
  }
}

class _MonoRadarIngestDataModeEnumReader extends fb.Reader<MonoRadarIngestDataModeEnum> {
  const _MonoRadarIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  MonoRadarIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      MonoRadarIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// A monoradar record contains the raw, and in some cases, processed target reports from primary and secondary air surveillance radars.  All target positions for monoradar reports are recorded as range and azimuth from geographical North relative to the detecting radar site.  In the case of secondary surveillance radars, interrogation response codes are provided as well as quality and validation characteristics, when available in the particular record type used to generate the record.
class MonoRadarIngest {
  MonoRadarIngest._(this._bc, this._bcOffset);
  factory MonoRadarIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MonoRadarIngest> reader = _MonoRadarIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: MONORADAR-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Test target indicator.
  ///  Example: /// Example: TTI
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get tti => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  ID of the radar site or station providing the data.
  ///  Example: /// Example: REF-SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get senlat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Sensor WGS84 longitude, in degrees, at time of observation (ts).  -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get senlon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Sensor altitude, in kilometers, at time of observation (ts).
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  double get senalt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  System Area Code.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get sac => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  System Identification Code.
  ///  Example: /// Example: 40
  ///  Constraints: No constraints specified.
  int get sic => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  ///  Aircraft identification from an aircraft equipped with a Mode S transponder.
  ///  Example: /// Example: TGT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get tgtid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.
  ///  Example: /// Example: ADDR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get addr => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).
  ///  Example: /// Example: CAT48
  ///  Constraints: Minimum length = 1, Maximum length = 16
  String? get msgfmt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR', etc..).
  ///  Example: /// Example: BCN
  ///  Constraints: Minimum length = 1, Maximum length = 16
  String? get msgtyp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Flag indicating military message.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get af => const fb.BoolReader().vTableGet(_bc, _bcOffset, 30, false);
  ///  Flag indicating FAA/Civ message.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get faa => const fb.BoolReader().vTableGet(_bc, _bcOffset, 32, false);
  ///  Flag indicating whether Special Position Indicator (SPI) present in interrogation response.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get spi => const fb.BoolReader().vTableGet(_bc, _bcOffset, 34, false);
  ///  Flag indicating whether AIMS present.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get aims => const fb.BoolReader().vTableGet(_bc, _bcOffset, 36, false);
  ///  Flag indicating that target was detected using data from an MTI receiver.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get mti => const fb.BoolReader().vTableGet(_bc, _bcOffset, 38, false);
  ///  Number of beacon hits received on the target.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get bcnhits => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 40, 0);
  ///  Target detection time, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get ts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Message time, in ISO 8601 UTC format with microsecond precision. This is the time that the data message was released from the site.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get msgts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Measured slant range to target from the observing site, in km.
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  double get rng => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Target azimuth, measured from the observing site, in degrees from true North.  If Azimuth Change Pulse (acp) count is provided, az represents the computed angle.
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  double get az => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Azimuth Change Pulse count at target detection.
  ///  Example: /// Example: 100
  ///  Constraints: No constraints specified.
  int get acp => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 50, 0);
  ///  Measured height of the target, in km. (for 3D radars).
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  double get alt3d => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Mode-C altitude (uncorrected pressure altitude), in km.
  ///  Example: /// Example: 100.23
  ///  Constraints: No constraints specified.
  double get mc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Status of the mode-C validity bit.
  ///  Example: /// Example: MCV
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get mcv => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Indicator that the mode-C response was garbled.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get mcg => const fb.BoolReader().vTableGet(_bc, _bcOffset, 58, false);
  ///  Mode-1 interrogation response (mission code).
  ///  Example: /// Example: MISSION_CODE
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get m1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Status of the mode-1 validity bit.
  ///  Example: /// Example: M1V
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get m1v => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Indicator that the mode-1 response was garbled.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get m1g => const fb.BoolReader().vTableGet(_bc, _bcOffset, 64, false);
  ///  Mode-2 interrogation response (military identification code).
  ///  Example: /// Example: MILITARY_ID_CODE
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get m2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Status of the mode-2 validity bit.
  ///  Example: /// Example: M2V
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get m2v => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Status of the mode-2 X-Pulse response validation.
  ///  Example: /// Example: M2XV
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get m2xv => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Indicator that the mode-2 response was garbled.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get m2g => const fb.BoolReader().vTableGet(_bc, _bcOffset, 72, false);
  ///  Mode-3/A interrogation response (aircraft identification).
  ///  Example: /// Example: AIRCRAFT_ID
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get m3a => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Status of the mode-3/A validity bit.
  ///  Example: /// Example: M3AV
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get m3av => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Indicator that the mode-3/A response was garbled.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get m3ag => const fb.BoolReader().vTableGet(_bc, _bcOffset, 78, false);
  ///  Status of the mode-3 X-Pulse response validation.
  ///  Example: /// Example: M3AXV
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get m3axv => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  Mode-4 interrogation response (Identification Friend/Foe).
  ///  Example: /// Example: ID_FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get m4 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Status of the mode-4 validity bit.
  ///  Example: /// Example: M4V
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get m4v => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Mode-4 D1 & D2 response status.
  ///  Example: /// Example: STATUS
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get m4d1d2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  Mode-S Comm B message data.
  ///  Example: /// Example: MSCOMMB
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get mscommb => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Flag indicating military emergency.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get milemrgcy => const fb.BoolReader().vTableGet(_bc, _bcOffset, 90, false);
  ///  7500 squawk present (hijack).
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get code7500 => const fb.BoolReader().vTableGet(_bc, _bcOffset, 92, false);
  ///  7600 squawk present (loss of comm).
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get code7600 => const fb.BoolReader().vTableGet(_bc, _bcOffset, 94, false);
  ///  7700 squawk present (general emergency).
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get code7700 => const fb.BoolReader().vTableGet(_bc, _bcOffset, 96, false);
  ///  Target ground speed, in meters/second.
  ///  Example: /// Example: 30.23
  ///  Constraints: No constraints specified.
  double get grndspd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  Target heading, in degrees from true North at the target position.
  ///  Example: /// Example: 30.23
  ///  Constraints: No constraints specified.
  double get hdng => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 100, 0.0);
  ///  Value representing a unique reference to a track record within a particular track file.  Included when the  radar station outputs tracks.
  ///  Example: /// Example: 30
  ///  Constraints: No constraints specified.
  int get trknum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 102, 0);
  ///  Type of sensor(s) maintaining track.
  ///  Example: /// Example: RAD
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get rad => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Indication of Horizontal Maneuver detection.
  ///  Example: /// Example: MAH
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get mah => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  Climbing/Descending mode indicator.
  ///  Example: /// Example: CDM
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get cdm => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  Array of local 2d-cartesian [x, y] coordinates of target, in km.
  ///  Example: /// Example: [1.2, 2.2]
  ///  Constraints: No constraints specified.
  List<String>? get cartpos => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 110);
  ///  Runlength of the primary surveillance radar track, in degrees.
  ///  Example: /// Example: 44.23
  ///  Constraints: No constraints specified.
  double get psrrl => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 112, 0.0);
  ///  Runlength of the secondary surveillance radar track, in degrees.
  ///  Example: /// Example: 44.23
  ///  Constraints: No constraints specified.
  double get ssrl => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 114, 0.0);
  ///  Target range delta between PSR and SSR (reference PSR-SSR), in km.
  ///  Example: /// Example: 44.23
  ///  Constraints: No constraints specified.
  double get rngdelt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 116, 0.0);
  ///  Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.
  ///  Example: /// Example: 44.23
  ///  Constraints: No constraints specified.
  double get azdelt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 118, 0.0);
  ///  Warning/Error Conditions and Target Classification.
  ///  Example: /// Example: ['WARNING', 'WARNING']
  ///  Constraints: No constraints specified.
  List<String>? get wectc => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 120);
  ///  Flag indicating report separated from different responses at same range.  Azimuth may have larger than normal error when present.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get mrgrpt => const fb.BoolReader().vTableGet(_bc, _bcOffset, 122, false);
  ///  ARTS quality.
  ///  Example: /// Example: QUALITY
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get artsqual => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 124);
  ///  Track eligibility flag.
  ///  Example: /// Example: ELIGIBILITY
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get trkelig => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 126);
  ///  Target confidence.
  ///  Example: /// Example: CONFIDENCE
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get tgtconf => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 128);
  ///  Target correlation flag.
  ///  Example: /// Example: CORRELATION
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get tgtcorr => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 130);
  ///  Data time-in-storage, in seconds. This is the amount of time elapsed between target detection and message transmission.
  ///  Example: /// Example: 0.4
  ///  Constraints: No constraints specified.
  double get tis => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 132, 0.0);
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 134);
  ///  Optional identifier provided by observation source to indicate the sensor identifier which produced this observation.This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 136);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 138);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 140);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  MonoRadarIngestDataModeEnum get dataMode => MonoRadarIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 142, 0));
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 144);
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 146);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 148);

  @override
  String toString() {
    return 'MonoRadarIngest{id: ${id}, classificationMarking: ${classificationMarking}, tti: ${tti}, idSensor: ${idSensor}, senlat: ${senlat}, senlon: ${senlon}, senalt: ${senalt}, sac: ${sac}, sic: ${sic}, tgtid: ${tgtid}, addr: ${addr}, msgfmt: ${msgfmt}, msgtyp: ${msgtyp}, af: ${af}, faa: ${faa}, spi: ${spi}, aims: ${aims}, mti: ${mti}, bcnhits: ${bcnhits}, ts: ${ts}, msgts: ${msgts}, rng: ${rng}, az: ${az}, acp: ${acp}, alt3d: ${alt3d}, mc: ${mc}, mcv: ${mcv}, mcg: ${mcg}, m1: ${m1}, m1v: ${m1v}, m1g: ${m1g}, m2: ${m2}, m2v: ${m2v}, m2xv: ${m2xv}, m2g: ${m2g}, m3a: ${m3a}, m3av: ${m3av}, m3ag: ${m3ag}, m3axv: ${m3axv}, m4: ${m4}, m4v: ${m4v}, m4d1d2: ${m4d1d2}, mscommb: ${mscommb}, milemrgcy: ${milemrgcy}, code7500: ${code7500}, code7600: ${code7600}, code7700: ${code7700}, grndspd: ${grndspd}, hdng: ${hdng}, trknum: ${trknum}, rad: ${rad}, mah: ${mah}, cdm: ${cdm}, cartpos: ${cartpos}, psrrl: ${psrrl}, ssrl: ${ssrl}, rngdelt: ${rngdelt}, azdelt: ${azdelt}, wectc: ${wectc}, mrgrpt: ${mrgrpt}, artsqual: ${artsqual}, trkelig: ${trkelig}, tgtconf: ${tgtconf}, tgtcorr: ${tgtcorr}, tis: ${tis}, tags: ${tags}, origSensorId: ${origSensorId}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, origNetwork: ${origNetwork}}';
  }
}

class _MonoRadarIngestReader extends fb.TableReader<MonoRadarIngest> {
  const _MonoRadarIngestReader();

  @override
  MonoRadarIngest createObject(fb.BufferContext bc, int offset) => 
    MonoRadarIngest._(bc, offset);
}

class MonoRadarIngestBuilder {
  MonoRadarIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(73);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTtiOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSenlat(double? senlat) {
    fbBuilder.addFloat64(4, senlat);
    return fbBuilder.offset;
  }
  int addSenlon(double? senlon) {
    fbBuilder.addFloat64(5, senlon);
    return fbBuilder.offset;
  }
  int addSenalt(double? senalt) {
    fbBuilder.addFloat64(6, senalt);
    return fbBuilder.offset;
  }
  int addSac(int? sac) {
    fbBuilder.addInt32(7, sac);
    return fbBuilder.offset;
  }
  int addSic(int? sic) {
    fbBuilder.addInt32(8, sic);
    return fbBuilder.offset;
  }
  int addTgtidOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addAddrOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addMsgfmtOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addMsgtypOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addAf(bool? af) {
    fbBuilder.addBool(13, af);
    return fbBuilder.offset;
  }
  int addFaa(bool? faa) {
    fbBuilder.addBool(14, faa);
    return fbBuilder.offset;
  }
  int addSpi(bool? spi) {
    fbBuilder.addBool(15, spi);
    return fbBuilder.offset;
  }
  int addAims(bool? aims) {
    fbBuilder.addBool(16, aims);
    return fbBuilder.offset;
  }
  int addMti(bool? mti) {
    fbBuilder.addBool(17, mti);
    return fbBuilder.offset;
  }
  int addBcnhits(int? bcnhits) {
    fbBuilder.addInt32(18, bcnhits);
    return fbBuilder.offset;
  }
  int addTsOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addMsgtsOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addRng(double? rng) {
    fbBuilder.addFloat64(21, rng);
    return fbBuilder.offset;
  }
  int addAz(double? az) {
    fbBuilder.addFloat64(22, az);
    return fbBuilder.offset;
  }
  int addAcp(int? acp) {
    fbBuilder.addInt32(23, acp);
    return fbBuilder.offset;
  }
  int addAlt3d(double? alt3d) {
    fbBuilder.addFloat64(24, alt3d);
    return fbBuilder.offset;
  }
  int addMc(double? mc) {
    fbBuilder.addFloat64(25, mc);
    return fbBuilder.offset;
  }
  int addMcvOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addMcg(bool? mcg) {
    fbBuilder.addBool(27, mcg);
    return fbBuilder.offset;
  }
  int addM1Offset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addM1vOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addM1g(bool? m1g) {
    fbBuilder.addBool(30, m1g);
    return fbBuilder.offset;
  }
  int addM2Offset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addM2vOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addM2xvOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addM2g(bool? m2g) {
    fbBuilder.addBool(34, m2g);
    return fbBuilder.offset;
  }
  int addM3aOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addM3avOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addM3ag(bool? m3ag) {
    fbBuilder.addBool(37, m3ag);
    return fbBuilder.offset;
  }
  int addM3axvOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addM4Offset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addM4vOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addM4d1d2Offset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addMscommbOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addMilemrgcy(bool? milemrgcy) {
    fbBuilder.addBool(43, milemrgcy);
    return fbBuilder.offset;
  }
  int addCode7500(bool? code7500) {
    fbBuilder.addBool(44, code7500);
    return fbBuilder.offset;
  }
  int addCode7600(bool? code7600) {
    fbBuilder.addBool(45, code7600);
    return fbBuilder.offset;
  }
  int addCode7700(bool? code7700) {
    fbBuilder.addBool(46, code7700);
    return fbBuilder.offset;
  }
  int addGrndspd(double? grndspd) {
    fbBuilder.addFloat64(47, grndspd);
    return fbBuilder.offset;
  }
  int addHdng(double? hdng) {
    fbBuilder.addFloat64(48, hdng);
    return fbBuilder.offset;
  }
  int addTrknum(int? trknum) {
    fbBuilder.addInt32(49, trknum);
    return fbBuilder.offset;
  }
  int addRadOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addMahOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addCdmOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addCartposOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }
  int addPsrrl(double? psrrl) {
    fbBuilder.addFloat64(54, psrrl);
    return fbBuilder.offset;
  }
  int addSsrl(double? ssrl) {
    fbBuilder.addFloat64(55, ssrl);
    return fbBuilder.offset;
  }
  int addRngdelt(double? rngdelt) {
    fbBuilder.addFloat64(56, rngdelt);
    return fbBuilder.offset;
  }
  int addAzdelt(double? azdelt) {
    fbBuilder.addFloat64(57, azdelt);
    return fbBuilder.offset;
  }
  int addWectcOffset(int? offset) {
    fbBuilder.addOffset(58, offset);
    return fbBuilder.offset;
  }
  int addMrgrpt(bool? mrgrpt) {
    fbBuilder.addBool(59, mrgrpt);
    return fbBuilder.offset;
  }
  int addArtsqualOffset(int? offset) {
    fbBuilder.addOffset(60, offset);
    return fbBuilder.offset;
  }
  int addTrkeligOffset(int? offset) {
    fbBuilder.addOffset(61, offset);
    return fbBuilder.offset;
  }
  int addTgtconfOffset(int? offset) {
    fbBuilder.addOffset(62, offset);
    return fbBuilder.offset;
  }
  int addTgtcorrOffset(int? offset) {
    fbBuilder.addOffset(63, offset);
    return fbBuilder.offset;
  }
  int addTis(double? tis) {
    fbBuilder.addFloat64(64, tis);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(65, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(66, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(67, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(68, offset);
    return fbBuilder.offset;
  }
  int addDataMode(MonoRadarIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(69, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(70, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(71, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(72, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MonoRadarIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _tti;
  final String? _idSensor;
  final double? _senlat;
  final double? _senlon;
  final double? _senalt;
  final int? _sac;
  final int? _sic;
  final String? _tgtid;
  final String? _addr;
  final String? _msgfmt;
  final String? _msgtyp;
  final bool? _af;
  final bool? _faa;
  final bool? _spi;
  final bool? _aims;
  final bool? _mti;
  final int? _bcnhits;
  final String? _ts;
  final String? _msgts;
  final double? _rng;
  final double? _az;
  final int? _acp;
  final double? _alt3d;
  final double? _mc;
  final String? _mcv;
  final bool? _mcg;
  final String? _m1;
  final String? _m1v;
  final bool? _m1g;
  final String? _m2;
  final String? _m2v;
  final String? _m2xv;
  final bool? _m2g;
  final String? _m3a;
  final String? _m3av;
  final bool? _m3ag;
  final String? _m3axv;
  final String? _m4;
  final String? _m4v;
  final String? _m4d1d2;
  final String? _mscommb;
  final bool? _milemrgcy;
  final bool? _code7500;
  final bool? _code7600;
  final bool? _code7700;
  final double? _grndspd;
  final double? _hdng;
  final int? _trknum;
  final String? _rad;
  final String? _mah;
  final String? _cdm;
  final List<String>? _cartpos;
  final double? _psrrl;
  final double? _ssrl;
  final double? _rngdelt;
  final double? _azdelt;
  final List<String>? _wectc;
  final bool? _mrgrpt;
  final String? _artsqual;
  final String? _trkelig;
  final String? _tgtconf;
  final String? _tgtcorr;
  final double? _tis;
  final List<String>? _tags;
  final String? _origSensorId;
  final String? _source;
  final String? _origin;
  final MonoRadarIngestDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _origNetwork;

  MonoRadarIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? tti,
    String? idSensor,
    double? senlat,
    double? senlon,
    double? senalt,
    int? sac,
    int? sic,
    String? tgtid,
    String? addr,
    String? msgfmt,
    String? msgtyp,
    bool? af,
    bool? faa,
    bool? spi,
    bool? aims,
    bool? mti,
    int? bcnhits,
    String? ts,
    String? msgts,
    double? rng,
    double? az,
    int? acp,
    double? alt3d,
    double? mc,
    String? mcv,
    bool? mcg,
    String? m1,
    String? m1v,
    bool? m1g,
    String? m2,
    String? m2v,
    String? m2xv,
    bool? m2g,
    String? m3a,
    String? m3av,
    bool? m3ag,
    String? m3axv,
    String? m4,
    String? m4v,
    String? m4d1d2,
    String? mscommb,
    bool? milemrgcy,
    bool? code7500,
    bool? code7600,
    bool? code7700,
    double? grndspd,
    double? hdng,
    int? trknum,
    String? rad,
    String? mah,
    String? cdm,
    List<String>? cartpos,
    double? psrrl,
    double? ssrl,
    double? rngdelt,
    double? azdelt,
    List<String>? wectc,
    bool? mrgrpt,
    String? artsqual,
    String? trkelig,
    String? tgtconf,
    String? tgtcorr,
    double? tis,
    List<String>? tags,
    String? origSensorId,
    String? source,
    String? origin,
    MonoRadarIngestDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _tti = tti,
        _idSensor = idSensor,
        _senlat = senlat,
        _senlon = senlon,
        _senalt = senalt,
        _sac = sac,
        _sic = sic,
        _tgtid = tgtid,
        _addr = addr,
        _msgfmt = msgfmt,
        _msgtyp = msgtyp,
        _af = af,
        _faa = faa,
        _spi = spi,
        _aims = aims,
        _mti = mti,
        _bcnhits = bcnhits,
        _ts = ts,
        _msgts = msgts,
        _rng = rng,
        _az = az,
        _acp = acp,
        _alt3d = alt3d,
        _mc = mc,
        _mcv = mcv,
        _mcg = mcg,
        _m1 = m1,
        _m1v = m1v,
        _m1g = m1g,
        _m2 = m2,
        _m2v = m2v,
        _m2xv = m2xv,
        _m2g = m2g,
        _m3a = m3a,
        _m3av = m3av,
        _m3ag = m3ag,
        _m3axv = m3axv,
        _m4 = m4,
        _m4v = m4v,
        _m4d1d2 = m4d1d2,
        _mscommb = mscommb,
        _milemrgcy = milemrgcy,
        _code7500 = code7500,
        _code7600 = code7600,
        _code7700 = code7700,
        _grndspd = grndspd,
        _hdng = hdng,
        _trknum = trknum,
        _rad = rad,
        _mah = mah,
        _cdm = cdm,
        _cartpos = cartpos,
        _psrrl = psrrl,
        _ssrl = ssrl,
        _rngdelt = rngdelt,
        _azdelt = azdelt,
        _wectc = wectc,
        _mrgrpt = mrgrpt,
        _artsqual = artsqual,
        _trkelig = trkelig,
        _tgtconf = tgtconf,
        _tgtcorr = tgtcorr,
        _tis = tis,
        _tags = tags,
        _origSensorId = origSensorId,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? ttiOffset = _tti == null ? null
        : fbBuilder.writeString(_tti!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? tgtidOffset = _tgtid == null ? null
        : fbBuilder.writeString(_tgtid!);
    final int? addrOffset = _addr == null ? null
        : fbBuilder.writeString(_addr!);
    final int? msgfmtOffset = _msgfmt == null ? null
        : fbBuilder.writeString(_msgfmt!);
    final int? msgtypOffset = _msgtyp == null ? null
        : fbBuilder.writeString(_msgtyp!);
    final int? tsOffset = _ts == null ? null
        : fbBuilder.writeString(_ts!);
    final int? msgtsOffset = _msgts == null ? null
        : fbBuilder.writeString(_msgts!);
    final int? mcvOffset = _mcv == null ? null
        : fbBuilder.writeString(_mcv!);
    final int? m1Offset = _m1 == null ? null
        : fbBuilder.writeString(_m1!);
    final int? m1vOffset = _m1v == null ? null
        : fbBuilder.writeString(_m1v!);
    final int? m2Offset = _m2 == null ? null
        : fbBuilder.writeString(_m2!);
    final int? m2vOffset = _m2v == null ? null
        : fbBuilder.writeString(_m2v!);
    final int? m2xvOffset = _m2xv == null ? null
        : fbBuilder.writeString(_m2xv!);
    final int? m3aOffset = _m3a == null ? null
        : fbBuilder.writeString(_m3a!);
    final int? m3avOffset = _m3av == null ? null
        : fbBuilder.writeString(_m3av!);
    final int? m3axvOffset = _m3axv == null ? null
        : fbBuilder.writeString(_m3axv!);
    final int? m4Offset = _m4 == null ? null
        : fbBuilder.writeString(_m4!);
    final int? m4vOffset = _m4v == null ? null
        : fbBuilder.writeString(_m4v!);
    final int? m4d1d2Offset = _m4d1d2 == null ? null
        : fbBuilder.writeString(_m4d1d2!);
    final int? mscommbOffset = _mscommb == null ? null
        : fbBuilder.writeString(_mscommb!);
    final int? radOffset = _rad == null ? null
        : fbBuilder.writeString(_rad!);
    final int? mahOffset = _mah == null ? null
        : fbBuilder.writeString(_mah!);
    final int? cdmOffset = _cdm == null ? null
        : fbBuilder.writeString(_cdm!);
    final int? cartposOffset = _cartpos == null ? null
        : fbBuilder.writeList(_cartpos!.map(fbBuilder.writeString).toList());
    final int? wectcOffset = _wectc == null ? null
        : fbBuilder.writeList(_wectc!.map(fbBuilder.writeString).toList());
    final int? artsqualOffset = _artsqual == null ? null
        : fbBuilder.writeString(_artsqual!);
    final int? trkeligOffset = _trkelig == null ? null
        : fbBuilder.writeString(_trkelig!);
    final int? tgtconfOffset = _tgtconf == null ? null
        : fbBuilder.writeString(_tgtconf!);
    final int? tgtcorrOffset = _tgtcorr == null ? null
        : fbBuilder.writeString(_tgtcorr!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(73);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, ttiOffset);
    fbBuilder.addOffset(3, idSensorOffset);
    fbBuilder.addFloat64(4, _senlat);
    fbBuilder.addFloat64(5, _senlon);
    fbBuilder.addFloat64(6, _senalt);
    fbBuilder.addInt32(7, _sac);
    fbBuilder.addInt32(8, _sic);
    fbBuilder.addOffset(9, tgtidOffset);
    fbBuilder.addOffset(10, addrOffset);
    fbBuilder.addOffset(11, msgfmtOffset);
    fbBuilder.addOffset(12, msgtypOffset);
    fbBuilder.addBool(13, _af);
    fbBuilder.addBool(14, _faa);
    fbBuilder.addBool(15, _spi);
    fbBuilder.addBool(16, _aims);
    fbBuilder.addBool(17, _mti);
    fbBuilder.addInt32(18, _bcnhits);
    fbBuilder.addOffset(19, tsOffset);
    fbBuilder.addOffset(20, msgtsOffset);
    fbBuilder.addFloat64(21, _rng);
    fbBuilder.addFloat64(22, _az);
    fbBuilder.addInt32(23, _acp);
    fbBuilder.addFloat64(24, _alt3d);
    fbBuilder.addFloat64(25, _mc);
    fbBuilder.addOffset(26, mcvOffset);
    fbBuilder.addBool(27, _mcg);
    fbBuilder.addOffset(28, m1Offset);
    fbBuilder.addOffset(29, m1vOffset);
    fbBuilder.addBool(30, _m1g);
    fbBuilder.addOffset(31, m2Offset);
    fbBuilder.addOffset(32, m2vOffset);
    fbBuilder.addOffset(33, m2xvOffset);
    fbBuilder.addBool(34, _m2g);
    fbBuilder.addOffset(35, m3aOffset);
    fbBuilder.addOffset(36, m3avOffset);
    fbBuilder.addBool(37, _m3ag);
    fbBuilder.addOffset(38, m3axvOffset);
    fbBuilder.addOffset(39, m4Offset);
    fbBuilder.addOffset(40, m4vOffset);
    fbBuilder.addOffset(41, m4d1d2Offset);
    fbBuilder.addOffset(42, mscommbOffset);
    fbBuilder.addBool(43, _milemrgcy);
    fbBuilder.addBool(44, _code7500);
    fbBuilder.addBool(45, _code7600);
    fbBuilder.addBool(46, _code7700);
    fbBuilder.addFloat64(47, _grndspd);
    fbBuilder.addFloat64(48, _hdng);
    fbBuilder.addInt32(49, _trknum);
    fbBuilder.addOffset(50, radOffset);
    fbBuilder.addOffset(51, mahOffset);
    fbBuilder.addOffset(52, cdmOffset);
    fbBuilder.addOffset(53, cartposOffset);
    fbBuilder.addFloat64(54, _psrrl);
    fbBuilder.addFloat64(55, _ssrl);
    fbBuilder.addFloat64(56, _rngdelt);
    fbBuilder.addFloat64(57, _azdelt);
    fbBuilder.addOffset(58, wectcOffset);
    fbBuilder.addBool(59, _mrgrpt);
    fbBuilder.addOffset(60, artsqualOffset);
    fbBuilder.addOffset(61, trkeligOffset);
    fbBuilder.addOffset(62, tgtconfOffset);
    fbBuilder.addOffset(63, tgtcorrOffset);
    fbBuilder.addFloat64(64, _tis);
    fbBuilder.addOffset(65, tagsOffset);
    fbBuilder.addOffset(66, origSensorIdOffset);
    fbBuilder.addOffset(67, sourceOffset);
    fbBuilder.addOffset(68, originOffset);
    fbBuilder.addInt8(69, _dataMode?.value);
    fbBuilder.addOffset(70, createdAtOffset);
    fbBuilder.addOffset(71, createdByOffset);
    fbBuilder.addOffset(72, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
