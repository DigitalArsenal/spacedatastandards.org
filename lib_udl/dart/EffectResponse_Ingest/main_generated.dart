// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class EffectResponseIngestDataModeEnum {
  final int value;
  const EffectResponseIngestDataModeEnum._(this.value);

  factory EffectResponseIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EffectResponseIngestDataModeEnum');
    }
    return result;
  }

  static EffectResponseIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : EffectResponseIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const EffectResponseIngestDataModeEnum REAL = EffectResponseIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const EffectResponseIngestDataModeEnum TEST = EffectResponseIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const EffectResponseIngestDataModeEnum SIMULATED = EffectResponseIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const EffectResponseIngestDataModeEnum EXERCISE = EffectResponseIngestDataModeEnum._(3);
  static const Map<int, EffectResponseIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<EffectResponseIngestDataModeEnum> reader = _EffectResponseIngestDataModeEnumReader();

  @override
  String toString() {
    return 'EffectResponseIngestDataModeEnum{value: $value}';
  }
}

class _EffectResponseIngestDataModeEnumReader extends fb.Reader<EffectResponseIngestDataModeEnum> {
  const _EffectResponseIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  EffectResponseIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      EffectResponseIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// A response for various effects on a target.
class EffectResponseIngest {
  EffectResponseIngest._(this._bc, this._bcOffset);
  factory EffectResponseIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EffectResponseIngest> reader = _EffectResponseIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: EFFECTRESPONSE-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the EffectRequest associated with this response.
  ///  Example: /// Example: EFFECTREQUEST-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idEffectRequest => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The external system identifier of the associated effect request. A human readable unique id.
  ///  Example: /// Example: EXTERNALREQUEST-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get externalRequestId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The type of response in this record (e.g. COA, SCORECARD, etc.).
  ///  Example: /// Example: COA
  ///  Constraints: Minimum length = 1, Maximum length = 24
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
  ///  Example: /// Example: AIRCRAFT
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get actorSrcType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The record ID, depending on the type identified in actorSrcType, of the requested asset.
  ///  Example: /// Example: RC-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get actorSrcId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The type of munition being fired.
  ///  Example: /// Example: Dummy
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get munitionType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Unique identifier of the munition.
  ///  Example: /// Example: MUNITION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get munitionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The number of shots required to destroy target.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get shotsRequired => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 22, 0);
  ///  The probability of kill (0-1) of the target being destroyed.
  ///  Example: /// Example: 0.7
  ///  Constraints: No constraints specified.
  double get probabilityOfKill => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  The collateral damage estimate (CDE) of the munition being fired.
  ///  Example: /// Example: 0.5
  ///  Constraints: No constraints specified.
  double get collateralDamageEst => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  List of actions associated with this effect response.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get actionsList => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 28);
  ///  List of external actions to be executed as part of this task.
  ///  Example: /// Example: ['ACTION1', 'ACTION2']
  ///  Constraints: No constraints specified.
  List<String>? get externalActions => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  ///  List of COA metrics associated with this effect response.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get coaMetrics => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  ///  The time to overhead for the red force to be over their target, in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T00:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get redTimeToOverhead => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC format.
  ///  Example: /// Example: 2021-01-01T00:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get decisionDeadline => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The source type of the targetId identifier (POI, SITE, TRACK).
  ///  Example: /// Example: POI
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get redTargetSrcType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The record ID, depending on the type identified in redTargetSrcType, of the red force target.  If the redTargetSrcType is POI or TRACK, then this identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
  ///  Example: /// Example: REDTARGETSRC-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get redTargetSrcId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2021-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  EffectResponseIngestDataModeEnum get dataMode => EffectResponseIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 50, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);

  @override
  String toString() {
    return 'EffectResponseIngest{id: ${id}, classificationMarking: ${classificationMarking}, idEffectRequest: ${idEffectRequest}, externalRequestId: ${externalRequestId}, type: ${type}, actorSrcType: ${actorSrcType}, actorSrcId: ${actorSrcId}, munitionType: ${munitionType}, munitionId: ${munitionId}, shotsRequired: ${shotsRequired}, probabilityOfKill: ${probabilityOfKill}, collateralDamageEst: ${collateralDamageEst}, actionsList: ${actionsList}, externalActions: ${externalActions}, coaMetrics: ${coaMetrics}, redTimeToOverhead: ${redTimeToOverhead}, decisionDeadline: ${decisionDeadline}, redTargetSrcType: ${redTargetSrcType}, redTargetSrcId: ${redTargetSrcId}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _EffectResponseIngestReader extends fb.TableReader<EffectResponseIngest> {
  const _EffectResponseIngestReader();

  @override
  EffectResponseIngest createObject(fb.BufferContext bc, int offset) => 
    EffectResponseIngest._(bc, offset);
}

class EffectResponseIngestBuilder {
  EffectResponseIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(25);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdEffectRequestOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addExternalRequestIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addActorSrcTypeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addActorSrcIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addMunitionTypeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addMunitionIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addShotsRequired(int? shotsRequired) {
    fbBuilder.addInt32(9, shotsRequired);
    return fbBuilder.offset;
  }
  int addProbabilityOfKill(double? probabilityOfKill) {
    fbBuilder.addFloat64(10, probabilityOfKill);
    return fbBuilder.offset;
  }
  int addCollateralDamageEst(double? collateralDamageEst) {
    fbBuilder.addFloat64(11, collateralDamageEst);
    return fbBuilder.offset;
  }
  int addActionsListOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addExternalActionsOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addCoaMetricsOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addRedTimeToOverheadOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addDecisionDeadlineOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addRedTargetSrcTypeOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addRedTargetSrcIdOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addDataMode(EffectResponseIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(23, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EffectResponseIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idEffectRequest;
  final String? _externalRequestId;
  final String? _type;
  final String? _actorSrcType;
  final String? _actorSrcId;
  final String? _munitionType;
  final String? _munitionId;
  final int? _shotsRequired;
  final double? _probabilityOfKill;
  final double? _collateralDamageEst;
  final List<String>? _actionsList;
  final List<String>? _externalActions;
  final List<String>? _coaMetrics;
  final String? _redTimeToOverhead;
  final String? _decisionDeadline;
  final String? _redTargetSrcType;
  final String? _redTargetSrcId;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final EffectResponseIngestDataModeEnum? _dataMode;
  final String? _origNetwork;

  EffectResponseIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idEffectRequest,
    String? externalRequestId,
    String? type,
    String? actorSrcType,
    String? actorSrcId,
    String? munitionType,
    String? munitionId,
    int? shotsRequired,
    double? probabilityOfKill,
    double? collateralDamageEst,
    List<String>? actionsList,
    List<String>? externalActions,
    List<String>? coaMetrics,
    String? redTimeToOverhead,
    String? decisionDeadline,
    String? redTargetSrcType,
    String? redTargetSrcId,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    EffectResponseIngestDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idEffectRequest = idEffectRequest,
        _externalRequestId = externalRequestId,
        _type = type,
        _actorSrcType = actorSrcType,
        _actorSrcId = actorSrcId,
        _munitionType = munitionType,
        _munitionId = munitionId,
        _shotsRequired = shotsRequired,
        _probabilityOfKill = probabilityOfKill,
        _collateralDamageEst = collateralDamageEst,
        _actionsList = actionsList,
        _externalActions = externalActions,
        _coaMetrics = coaMetrics,
        _redTimeToOverhead = redTimeToOverhead,
        _decisionDeadline = decisionDeadline,
        _redTargetSrcType = redTargetSrcType,
        _redTargetSrcId = redTargetSrcId,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idEffectRequestOffset = _idEffectRequest == null ? null
        : fbBuilder.writeString(_idEffectRequest!);
    final int? externalRequestIdOffset = _externalRequestId == null ? null
        : fbBuilder.writeString(_externalRequestId!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? actorSrcTypeOffset = _actorSrcType == null ? null
        : fbBuilder.writeString(_actorSrcType!);
    final int? actorSrcIdOffset = _actorSrcId == null ? null
        : fbBuilder.writeString(_actorSrcId!);
    final int? munitionTypeOffset = _munitionType == null ? null
        : fbBuilder.writeString(_munitionType!);
    final int? munitionIdOffset = _munitionId == null ? null
        : fbBuilder.writeString(_munitionId!);
    final int? actionsListOffset = _actionsList == null ? null
        : fbBuilder.writeList(_actionsList!.map(fbBuilder.writeString).toList());
    final int? externalActionsOffset = _externalActions == null ? null
        : fbBuilder.writeList(_externalActions!.map(fbBuilder.writeString).toList());
    final int? coaMetricsOffset = _coaMetrics == null ? null
        : fbBuilder.writeList(_coaMetrics!.map(fbBuilder.writeString).toList());
    final int? redTimeToOverheadOffset = _redTimeToOverhead == null ? null
        : fbBuilder.writeString(_redTimeToOverhead!);
    final int? decisionDeadlineOffset = _decisionDeadline == null ? null
        : fbBuilder.writeString(_decisionDeadline!);
    final int? redTargetSrcTypeOffset = _redTargetSrcType == null ? null
        : fbBuilder.writeString(_redTargetSrcType!);
    final int? redTargetSrcIdOffset = _redTargetSrcId == null ? null
        : fbBuilder.writeString(_redTargetSrcId!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(25);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idEffectRequestOffset);
    fbBuilder.addOffset(3, externalRequestIdOffset);
    fbBuilder.addOffset(4, typeOffset);
    fbBuilder.addOffset(5, actorSrcTypeOffset);
    fbBuilder.addOffset(6, actorSrcIdOffset);
    fbBuilder.addOffset(7, munitionTypeOffset);
    fbBuilder.addOffset(8, munitionIdOffset);
    fbBuilder.addInt32(9, _shotsRequired);
    fbBuilder.addFloat64(10, _probabilityOfKill);
    fbBuilder.addFloat64(11, _collateralDamageEst);
    fbBuilder.addOffset(12, actionsListOffset);
    fbBuilder.addOffset(13, externalActionsOffset);
    fbBuilder.addOffset(14, coaMetricsOffset);
    fbBuilder.addOffset(15, redTimeToOverheadOffset);
    fbBuilder.addOffset(16, decisionDeadlineOffset);
    fbBuilder.addOffset(17, redTargetSrcTypeOffset);
    fbBuilder.addOffset(18, redTargetSrcIdOffset);
    fbBuilder.addOffset(19, createdAtOffset);
    fbBuilder.addOffset(20, createdByOffset);
    fbBuilder.addOffset(21, sourceOffset);
    fbBuilder.addOffset(22, originOffset);
    fbBuilder.addInt8(23, _dataMode?.value);
    fbBuilder.addOffset(24, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
