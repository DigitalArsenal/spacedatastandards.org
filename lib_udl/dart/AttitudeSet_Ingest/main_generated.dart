// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AttitudeSetIngestDataModeEnum {
  final int value;
  const AttitudeSetIngestDataModeEnum._(this.value);

  factory AttitudeSetIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AttitudeSetIngestDataModeEnum');
    }
    return result;
  }

  static AttitudeSetIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AttitudeSetIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const AttitudeSetIngestDataModeEnum REAL = AttitudeSetIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const AttitudeSetIngestDataModeEnum TEST = AttitudeSetIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const AttitudeSetIngestDataModeEnum SIMULATED = AttitudeSetIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const AttitudeSetIngestDataModeEnum EXERCISE = AttitudeSetIngestDataModeEnum._(3);
  static const Map<int, AttitudeSetIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AttitudeSetIngestDataModeEnum> reader = _AttitudeSetIngestDataModeEnumReader();

  @override
  String toString() {
    return 'AttitudeSetIngestDataModeEnum{value: $value}';
  }
}

class _AttitudeSetIngestDataModeEnumReader extends fb.Reader<AttitudeSetIngestDataModeEnum> {
  const _AttitudeSetIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AttitudeSetIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      AttitudeSetIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and meta data indicating the specifics of the orientation of an on-orbit object.  Attitude is typically distributed in a flat file containing details of the attitude generation as well as a large collection of individual points at varying time steps. AttitudeSet is analogous to this flat file.
class AttitudeSetIngest {
  AttitudeSetIngest._(this._bc, this._bcOffset);
  factory AttitudeSetIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AttitudeSetIngest> reader = _AttitudeSetIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: ATTITUDESET-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the on-orbit satellite to which this attitude set applies.
  ///  Example: /// Example: 41947
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Satellite/catalog number of the on-orbit object to which this attitude set applies.
  ///  Example: /// Example: 41947
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: D6593
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The type of attitude message or messages associated with this set.
  ///  AEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.
  ///  APM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.
  ///  Example: /// Example: AEM
  ///  Constraints: Minimum length = 1, Maximum length = 3
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.
  ///  Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get esId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Array of UDL UUIDs of one or more AttitudeSet records associated with this set.  For example, a spacecraft Attitude Ephemeris Set might include a reference to an Attitude Parameter Message defining the sensor to body frame transformation for a sensor onboard the spacecraft, which allows for calculation of the sensor orientation in frame2 of the attitude ephemeris.
  ///  Example: /// Example: ['2ea97de6-4680-4767-a07e-35d16398ef60']
  ///  Constraints: No constraints specified.
  List<String>? get asRef => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 18);
  ///  Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.
  ///  Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.
  ///  Example: /// Example: 2022-07-07T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get startTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.
  ///  Example: /// Example: 2022-07-07T18:00:00.654321Z
  ///  Constraints: No constraints specified.
  String? get endTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
  ///  Example: /// Example: SCBODY
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get frame1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get frame2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Number of attitude records contained in this set.
  ///  Example: /// Example: 120
  ///  Constraints: No constraints specified.
  int get numPoints => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.
  ///  Example: /// Example: 60
  ///  Constraints: No constraints specified.
  int get stepSize => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  Initial precession angle (ECI J2000 frame) in degrees.
  ///  Example: /// Example: 30.5
  ///  Constraints: No constraints specified.
  double get precAngleInit => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Initial spin angle (ECI J2000 frame) in degrees.
  ///  Example: /// Example: 25.5
  ///  Constraints: No constraints specified.
  double get spinAngleInit => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. 
  ///  The following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as '2', a double rotation with X-Z sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can be expressed as '312'.
  ///  Example: /// Example: 123
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get eulerRotSeq => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Collection of attitude data associated with this Attitude Set.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get attitudeList => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 42);
  ///  Recommended interpolation method for estimating attitude ephemeris data.
  ///  Example: /// Example: LINEAR
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get interpolator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Recommended polynomial interpolation degree.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get interpolatorDegree => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 46, 0);
  ///  Optional notes/comments for this attitude set.
  ///  Example: /// Example: Notes for this attitude set
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-07-05T12:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AttitudeSetIngestDataModeEnum get dataMode => AttitudeSetIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 58, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);

  @override
  String toString() {
    return 'AttitudeSetIngest{id: ${id}, classificationMarking: ${classificationMarking}, idOnOrbit: ${idOnOrbit}, satNo: ${satNo}, origObjectId: ${origObjectId}, type: ${type}, esId: ${esId}, asRef: ${asRef}, idSensor: ${idSensor}, origSensorId: ${origSensorId}, startTime: ${startTime}, endTime: ${endTime}, frame1: ${frame1}, frame2: ${frame2}, numPoints: ${numPoints}, stepSize: ${stepSize}, precAngleInit: ${precAngleInit}, spinAngleInit: ${spinAngleInit}, eulerRotSeq: ${eulerRotSeq}, attitudeList: ${attitudeList}, interpolator: ${interpolator}, interpolatorDegree: ${interpolatorDegree}, notes: ${notes}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _AttitudeSetIngestReader extends fb.TableReader<AttitudeSetIngest> {
  const _AttitudeSetIngestReader();

  @override
  AttitudeSetIngest createObject(fb.BufferContext bc, int offset) => 
    AttitudeSetIngest._(bc, offset);
}

class AttitudeSetIngestBuilder {
  AttitudeSetIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(29);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(3, satNo);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addEsIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addAsRefOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addEndTimeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addFrame1Offset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addFrame2Offset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addNumPoints(int? numPoints) {
    fbBuilder.addInt32(14, numPoints);
    return fbBuilder.offset;
  }
  int addStepSize(int? stepSize) {
    fbBuilder.addInt32(15, stepSize);
    return fbBuilder.offset;
  }
  int addPrecAngleInit(double? precAngleInit) {
    fbBuilder.addFloat64(16, precAngleInit);
    return fbBuilder.offset;
  }
  int addSpinAngleInit(double? spinAngleInit) {
    fbBuilder.addFloat64(17, spinAngleInit);
    return fbBuilder.offset;
  }
  int addEulerRotSeqOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addAttitudeListOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addInterpolatorOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addInterpolatorDegree(int? interpolatorDegree) {
    fbBuilder.addInt32(21, interpolatorDegree);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AttitudeSetIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(27, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AttitudeSetIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idOnOrbit;
  final int? _satNo;
  final String? _origObjectId;
  final String? _type;
  final String? _esId;
  final List<String>? _asRef;
  final String? _idSensor;
  final String? _origSensorId;
  final String? _startTime;
  final String? _endTime;
  final String? _frame1;
  final String? _frame2;
  final int? _numPoints;
  final int? _stepSize;
  final double? _precAngleInit;
  final double? _spinAngleInit;
  final String? _eulerRotSeq;
  final List<String>? _attitudeList;
  final String? _interpolator;
  final int? _interpolatorDegree;
  final String? _notes;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final AttitudeSetIngestDataModeEnum? _dataMode;
  final String? _origNetwork;

  AttitudeSetIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idOnOrbit,
    int? satNo,
    String? origObjectId,
    String? type,
    String? esId,
    List<String>? asRef,
    String? idSensor,
    String? origSensorId,
    String? startTime,
    String? endTime,
    String? frame1,
    String? frame2,
    int? numPoints,
    int? stepSize,
    double? precAngleInit,
    double? spinAngleInit,
    String? eulerRotSeq,
    List<String>? attitudeList,
    String? interpolator,
    int? interpolatorDegree,
    String? notes,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    AttitudeSetIngestDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idOnOrbit = idOnOrbit,
        _satNo = satNo,
        _origObjectId = origObjectId,
        _type = type,
        _esId = esId,
        _asRef = asRef,
        _idSensor = idSensor,
        _origSensorId = origSensorId,
        _startTime = startTime,
        _endTime = endTime,
        _frame1 = frame1,
        _frame2 = frame2,
        _numPoints = numPoints,
        _stepSize = stepSize,
        _precAngleInit = precAngleInit,
        _spinAngleInit = spinAngleInit,
        _eulerRotSeq = eulerRotSeq,
        _attitudeList = attitudeList,
        _interpolator = interpolator,
        _interpolatorDegree = interpolatorDegree,
        _notes = notes,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? esIdOffset = _esId == null ? null
        : fbBuilder.writeString(_esId!);
    final int? asRefOffset = _asRef == null ? null
        : fbBuilder.writeList(_asRef!.map(fbBuilder.writeString).toList());
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? startTimeOffset = _startTime == null ? null
        : fbBuilder.writeString(_startTime!);
    final int? endTimeOffset = _endTime == null ? null
        : fbBuilder.writeString(_endTime!);
    final int? frame1Offset = _frame1 == null ? null
        : fbBuilder.writeString(_frame1!);
    final int? frame2Offset = _frame2 == null ? null
        : fbBuilder.writeString(_frame2!);
    final int? eulerRotSeqOffset = _eulerRotSeq == null ? null
        : fbBuilder.writeString(_eulerRotSeq!);
    final int? attitudeListOffset = _attitudeList == null ? null
        : fbBuilder.writeList(_attitudeList!.map(fbBuilder.writeString).toList());
    final int? interpolatorOffset = _interpolator == null ? null
        : fbBuilder.writeString(_interpolator!);
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(29);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idOnOrbitOffset);
    fbBuilder.addInt32(3, _satNo);
    fbBuilder.addOffset(4, origObjectIdOffset);
    fbBuilder.addOffset(5, typeOffset);
    fbBuilder.addOffset(6, esIdOffset);
    fbBuilder.addOffset(7, asRefOffset);
    fbBuilder.addOffset(8, idSensorOffset);
    fbBuilder.addOffset(9, origSensorIdOffset);
    fbBuilder.addOffset(10, startTimeOffset);
    fbBuilder.addOffset(11, endTimeOffset);
    fbBuilder.addOffset(12, frame1Offset);
    fbBuilder.addOffset(13, frame2Offset);
    fbBuilder.addInt32(14, _numPoints);
    fbBuilder.addInt32(15, _stepSize);
    fbBuilder.addFloat64(16, _precAngleInit);
    fbBuilder.addFloat64(17, _spinAngleInit);
    fbBuilder.addOffset(18, eulerRotSeqOffset);
    fbBuilder.addOffset(19, attitudeListOffset);
    fbBuilder.addOffset(20, interpolatorOffset);
    fbBuilder.addInt32(21, _interpolatorDegree);
    fbBuilder.addOffset(22, notesOffset);
    fbBuilder.addOffset(23, createdAtOffset);
    fbBuilder.addOffset(24, createdByOffset);
    fbBuilder.addOffset(25, sourceOffset);
    fbBuilder.addOffset(26, originOffset);
    fbBuilder.addInt8(27, _dataMode?.value);
    fbBuilder.addOffset(28, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
