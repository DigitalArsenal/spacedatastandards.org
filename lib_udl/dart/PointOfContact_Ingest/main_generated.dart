// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Point of contacts for scheduling or modifying the route.
class PointOfContactIngest {
  PointOfContactIngest._(this._bc, this._bcOffset);
  factory PointOfContactIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PointOfContactIngest> reader = _PointOfContactIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Sequencing field for point of contact.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get pocSequenceId => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  ///  A code or name that represents the contact's role in association to the track route (ex. Originator, Scheduler, Maintainer, etc.).
  ///  Example: /// Example: Originator
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get pocTypeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The name of the contact.
  ///  Example: /// Example: Fred Smith
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get pocName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Office name for which the contact belongs.
  ///  Example: /// Example: A34
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get office => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The username of the contact.
  ///  Example: /// Example: fgsmith
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get username => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The rank of contact.
  ///  Example: /// Example: Capt
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get rank => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Organization name for which the contact belongs.
  ///  Example: /// Example: HQAF
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get pocOrg => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Phone number of the contact.
  ///  Example: /// Example: 8675309
  ///  Constraints: Minimum length = 0, Maximum length = 45
  String? get phone => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Text of the remark.
  ///  Example: /// Example: POC remark.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get remark => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);

  @override
  String toString() {
    return 'PointOfContactIngest{pocSequenceId: ${pocSequenceId}, pocTypeName: ${pocTypeName}, pocName: ${pocName}, office: ${office}, username: ${username}, rank: ${rank}, pocOrg: ${pocOrg}, phone: ${phone}, remark: ${remark}}';
  }
}

class _PointOfContactIngestReader extends fb.TableReader<PointOfContactIngest> {
  const _PointOfContactIngestReader();

  @override
  PointOfContactIngest createObject(fb.BufferContext bc, int offset) => 
    PointOfContactIngest._(bc, offset);
}

class PointOfContactIngestBuilder {
  PointOfContactIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(9);
  }

  int addPocSequenceId(int? pocSequenceId) {
    fbBuilder.addInt32(0, pocSequenceId);
    return fbBuilder.offset;
  }
  int addPocTypeNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPocNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addOfficeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addUsernameOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addRankOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addPocOrgOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addPhoneOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addRemarkOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PointOfContactIngestObjectBuilder extends fb.ObjectBuilder {
  final int? _pocSequenceId;
  final String? _pocTypeName;
  final String? _pocName;
  final String? _office;
  final String? _username;
  final String? _rank;
  final String? _pocOrg;
  final String? _phone;
  final String? _remark;

  PointOfContactIngestObjectBuilder({
    int? pocSequenceId,
    String? pocTypeName,
    String? pocName,
    String? office,
    String? username,
    String? rank,
    String? pocOrg,
    String? phone,
    String? remark,
  })
      : _pocSequenceId = pocSequenceId,
        _pocTypeName = pocTypeName,
        _pocName = pocName,
        _office = office,
        _username = username,
        _rank = rank,
        _pocOrg = pocOrg,
        _phone = phone,
        _remark = remark;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pocTypeNameOffset = _pocTypeName == null ? null
        : fbBuilder.writeString(_pocTypeName!);
    final int? pocNameOffset = _pocName == null ? null
        : fbBuilder.writeString(_pocName!);
    final int? officeOffset = _office == null ? null
        : fbBuilder.writeString(_office!);
    final int? usernameOffset = _username == null ? null
        : fbBuilder.writeString(_username!);
    final int? rankOffset = _rank == null ? null
        : fbBuilder.writeString(_rank!);
    final int? pocOrgOffset = _pocOrg == null ? null
        : fbBuilder.writeString(_pocOrg!);
    final int? phoneOffset = _phone == null ? null
        : fbBuilder.writeString(_phone!);
    final int? remarkOffset = _remark == null ? null
        : fbBuilder.writeString(_remark!);
    fbBuilder.startTable(9);
    fbBuilder.addInt32(0, _pocSequenceId);
    fbBuilder.addOffset(1, pocTypeNameOffset);
    fbBuilder.addOffset(2, pocNameOffset);
    fbBuilder.addOffset(3, officeOffset);
    fbBuilder.addOffset(4, usernameOffset);
    fbBuilder.addOffset(5, rankOffset);
    fbBuilder.addOffset(6, pocOrgOffset);
    fbBuilder.addOffset(7, phoneOffset);
    fbBuilder.addOffset(8, remarkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
