// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class DataLinkFullDataModeEnum {
  final int value;
  const DataLinkFullDataModeEnum._(this.value);

  factory DataLinkFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum DataLinkFullDataModeEnum');
    }
    return result;
  }

  static DataLinkFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : DataLinkFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const DataLinkFullDataModeEnum REAL = DataLinkFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const DataLinkFullDataModeEnum TEST = DataLinkFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const DataLinkFullDataModeEnum SIMULATED = DataLinkFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const DataLinkFullDataModeEnum EXERCISE = DataLinkFullDataModeEnum._(3);
  static const Map<int, DataLinkFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<DataLinkFullDataModeEnum> reader = _DataLinkFullDataModeEnumReader();

  @override
  String toString() {
    return 'DataLinkFullDataModeEnum{value: $value}';
  }
}

class _DataLinkFullDataModeEnumReader extends fb.Reader<DataLinkFullDataModeEnum> {
  const _DataLinkFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  DataLinkFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      DataLinkFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Beta Version DataLink: Detailed instructions regarding the operations of data links.
class DataLinkFull {
  DataLinkFull._(this._bc, this._bcOffset);
  factory DataLinkFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DataLinkFull> reader = _DataLinkFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system if not provided on create operations.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
  ///  Example: /// Example: DESERT WIND
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get opExName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The identifier of the originator of this message.
  ///  Example: /// Example: USCENTCOM
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get originator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The start of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-07T13:55:43.123Z
  ///  Constraints: No constraints specified.
  String? get startTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The end of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision. This may be a relative stop time if used with stopTimeMod.
  ///  Example: /// Example: 2024-01-08T13:55:43.123Z
  ///  Constraints: No constraints specified.
  String? get stopTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  A qualifier for the end of the effective time period of this data link message, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
  ///  Example: /// Example: AFTER
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get stopTimeMod => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
  ///  Example: /// Example: SACEUR 106
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get planOrigNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Provides an additional caveat further identifying the exercise or modifies the exercise nickname.
  ///  Example: /// Example: CONTROL
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get opExInfo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The secondary nickname of the option or the alternative of the operational plan or order.
  ///  Example: /// Example: ORANGE
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get opExInfoAlt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The unique message identifier assigned by the originator.
  ///  Example: /// Example: 1201003
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get serialNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The month in which this message originated.
  ///  Example: /// Example: OCT
  ///  Constraints: Minimum length = 0, Maximum length = 12
  String? get month => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The qualifier which caveats the message status such as AMP (Amplification), CHG (Change), etc.
  ///  Example: /// Example: CHG
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get qualifier => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The serial number associated with the message qualifier.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get qualSn => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 30, 0);
  ///  Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get references => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  ///  The identifier for this data link message cancellation.
  ///  Example: /// Example: ABSTAT
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get canxId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The originator of this data link message cancellation.
  ///  Example: /// Example: 505 AOC
  ///  Constraints: Minimum length = 0, Maximum length = 30
  String? get canxOriginator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Timestamp of the data link message cancellation, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-07T13:55:43.123Z
  ///  Constraints: No constraints specified.
  String? get canxTs => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Serial number assigned to this data link message cancellation.
  ///  Example: /// Example: ABC1234567
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get canxSerialNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Indicates any special actions, restrictions, guidance, or information relating to this data link message cancellation.
  ///  Example: /// Example: PASEP
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get canxSpecialNotation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Array of NATO Subject Indicator Codes (SIC) or filing numbers of this data link message or document being cancelled.
  ///  Example: /// Example: ['RDU', 'X234BS']
  ///  Constraints: No constraints specified.
  List<String>? get canxSics => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 44);
  ///  The name of the point of contact for this data link message.
  ///  Example: /// Example: F. BURNS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get pocName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  The rank or position of the point of contact for this data link message in a military or civilian organization.
  ///  Example: /// Example: MAJ
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get pocRank => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  The unit identifier or call sign of the point of contact for this data link message.
  ///  Example: /// Example: 4077 MASH
  ///  Constraints: Minimum length = 0, Maximum length = 38
  String? get pocCallSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  The location name of the point of contact for this data link message.
  ///  Example: /// Example: CAMP SWAMPY
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get pocLocName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  WGS84 latitude of the point of contact for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get pocLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  WGS84 longitude of the point of contact for this data link message, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  double get pocLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Array of telephone numbers, radio frequency values, or email addresses of the point of contact for this data link message.
  ///  Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
  ///  Constraints: No constraints specified.
  List<String>? get pocNums => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 58);
  ///  The code for the point of reference from which the coordinates and networks are computed.
  ///  Example: /// Example: EUR-T
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get geoDatum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get refPoints => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 62);
  ///  Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get voiceCoord => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 64);
  ///  Indicates the data terminal settings the system defaults to, either automatic correlation/decorrelation (AUTO) or manual (MAN).
  ///  Example: /// Example: MAN
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get sysDefaultCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  The correlation window size multiplier to stretch or reduce the window size. Required if sysDefaultCode field is "MAN". Allowable entries are 0.5 to 3.0 in increments of 0.1.
  ///  Example: /// Example: 2.1
  ///  Constraints: No constraints specified.
  double get winSizeMult => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Number added to the basic window calculated from track qualities to ensure that windows still allow valid correlations. Required if sysDefaultCode field is "MAN". Allowable entries are 0.0 to 2.0 in increments of 0.25.
  ///  Example: /// Example: 1.25
  ///  Constraints: No constraints specified.
  double get winSizeMin => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  Track quality to prevent correlation windows from being unrealistically large. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 3 to 7.
  ///  Example: /// Example: 6
  ///  Constraints: No constraints specified.
  int get minTrackQual => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 72, 0);
  ///  Track quality to prevent correlation windows from being unrealistically small. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 8 to 15.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get maxTrackQual => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 74, 0);
  ///  Track quality to enter if too many duals involving low track quality tracks are occurring. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 2 to 6.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get resTrackQual => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 76, 0);
  ///  Maximum difference between the reported course of the remote track and the calculated course of the local track. Required if sysDefaultCode field is "MAN". Allowable entries are 15 to 90 in increments of 15 degrees.
  ///  Example: /// Example: 60
  ///  Constraints: No constraints specified.
  int get courseDiff => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 78, 0);
  ///  Maximum percentage the faster track speed may differ from the slower track speed. Required if sysDefaultCode field is "MAN". Allowable entries are 10 to 100 in increments of 10.
  ///  Example: /// Example: 50
  ///  Constraints: No constraints specified.
  int get speedDiff => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 80, 0);
  ///  Maximum altitude difference between two air tracks, in thousands of feet. Required if sysDefaultCode field is "MAN". Allowable entires are 5 to 50 in increments of 5000 feet.
  ///  Example: /// Example: 20
  ///  Constraints: No constraints specified.
  int get altDiff => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 82, 0);
  ///  Number used for minimum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get minGeoPosQual => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 84, 0);
  ///  Number used for maximum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entires are integers from 1 to 15.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get maxGeoPosQual => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 86, 0);
  ///  Distance between the common and remote track is to exceed the applicable correlation window for the two tracks in order to be decorrelated. Required if sysDefaultCode field is "MAN". Allowable entries are 1.0 to 2.0 in increments of 0.1.
  ///  Example: /// Example: 1.7
  ///  Constraints: No constraints specified.
  double get decorrWinMult => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  Number of consecutive remote track reports that must meet the decorrelation criteria before the decorrelation is executed. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get consecDecorr => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 90, 0);
  ///  Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get multiDuty => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 92);
  ///  Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get ops => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 94);
  ///  Designator of the unit for Joint Range Extension (JRE).
  ///  Example: /// Example: CVN-72
  ///  Constraints: Minimum length = 0, Maximum length = 30
  String? get jreUnitDes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Call sign which identifies one or more communications facilities, commands, authorities, or activities for Joint Range Extension (JRE) units.
  ///  Example: /// Example: CHARLIE ONE
  ///  Constraints: Minimum length = 0, Maximum length = 38
  String? get jreCallSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Link-16 octal track number assigned as the primary JTIDS unit address.
  ///  Example: /// Example: 71777
  ///  Constraints: No constraints specified.
  int get jrePriAdd => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 100, 0);
  ///  Link-16 octal track number assigned as the secondary JTIDS unit address.
  ///  Example: /// Example: 77771
  ///  Constraints: No constraints specified.
  int get jreSecAdd => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 102, 0);
  ///  Joint Range Extension (JRE) unit details.
  ///  Example: /// Example: JRE details
  ///  Constraints: Minimum length = 0, Maximum length = 3000
  String? get jreDetails => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get specTracks => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 106);
  ///  Array of non-link specific data unit designators.
  ///  Example: /// Example: ['CS:GRAY GHOST', 'CS:WHITE WHALE']
  ///  Constraints: No constraints specified.
  List<String>? get nonLinkUnitDes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 108);
  ///  Array of Link-16 octal track numbers used as the lower limit of a track block.
  ///  Example: /// Example: [1234, 2345]
  ///  Constraints: No constraints specified.
  List<String>? get trackNumBlockLls => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 110);
  ///  Array of defined ranges of Link-11/11B track numbers assigned to a participating unit or reporting unit.
  ///  Example: /// Example: ['0200-0300', '0400-4412']
  ///  Constraints: No constraints specified.
  List<String>? get trackNumBlocks => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 112);
  ///  Data link management code word.
  ///  Example: /// Example: VICTOR
  ///  Constraints: Minimum length = 0, Maximum length = 15
  String? get mgmtCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 114);
  ///  Data link management code word meaning.
  ///  Example: /// Example: ORBIT AT POINT BRAVO
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get mgmtCodeMeaning => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 116);
  ///  Flag Indicating if formal acknowledgement is required for the particular data link message being sent.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get ackReq => const fb.BoolReader().vTableGet(_bc, _bcOffset, 118, false);
  ///  Array of instructions for acknowledging and the force or units required to acknowledge the data link message being sent.
  ///  Example: /// Example: ['AOC EXT 2345', '317 AW']
  ///  Constraints: No constraints specified.
  List<String>? get ackInstUnits => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 120);
  ///  Markings that define the source material or the original classification authority for this data link message.
  ///  Example: /// Example: USJFCOM EXORD SOLID WASTE 98
  ///  Constraints: Minimum length = 0, Maximum length = 55
  String? get classSource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 122);
  ///  Array of codes that indicate the reasons material is classified.
  ///  Example: /// Example: ['15C', '15D']
  ///  Constraints: No constraints specified.
  List<String>? get classReasons => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 124);
  ///  Array of markings that provide the literal guidance or dates for the downgrading or declassification of this data link message.
  ///  Example: /// Example: ['AT EXERCISE ENDEX', 'DATE:25NOV1997']
  ///  Constraints: No constraints specified.
  List<String>? get decInstDates => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 126);
  ///  Array of codes that provide justification for exemption from automatic downgrading or declassification.
  ///  Example: /// Example: ['X1', 'X2']
  ///  Constraints: No constraints specified.
  List<String>? get decExemptCodes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 128);
  ///  Collection of remarks associated with this data link message.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get remarks => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 130);
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get rawFileUri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 132);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 134);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 136);
  ///  Time the row was updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 138);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 140);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 142);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 144);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 146);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 148);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  DataLinkFullDataModeEnum get dataMode => DataLinkFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 150, 0));

  @override
  String toString() {
    return 'DataLinkFull{id: ${id}, classificationMarking: ${classificationMarking}, opExName: ${opExName}, originator: ${originator}, startTime: ${startTime}, stopTime: ${stopTime}, stopTimeMod: ${stopTimeMod}, planOrigNum: ${planOrigNum}, opExInfo: ${opExInfo}, opExInfoAlt: ${opExInfoAlt}, serialNum: ${serialNum}, month: ${month}, qualifier: ${qualifier}, qualSn: ${qualSn}, references: ${references}, canxId: ${canxId}, canxOriginator: ${canxOriginator}, canxTs: ${canxTs}, canxSerialNum: ${canxSerialNum}, canxSpecialNotation: ${canxSpecialNotation}, canxSics: ${canxSics}, pocName: ${pocName}, pocRank: ${pocRank}, pocCallSign: ${pocCallSign}, pocLocName: ${pocLocName}, pocLat: ${pocLat}, pocLon: ${pocLon}, pocNums: ${pocNums}, geoDatum: ${geoDatum}, refPoints: ${refPoints}, voiceCoord: ${voiceCoord}, sysDefaultCode: ${sysDefaultCode}, winSizeMult: ${winSizeMult}, winSizeMin: ${winSizeMin}, minTrackQual: ${minTrackQual}, maxTrackQual: ${maxTrackQual}, resTrackQual: ${resTrackQual}, courseDiff: ${courseDiff}, speedDiff: ${speedDiff}, altDiff: ${altDiff}, minGeoPosQual: ${minGeoPosQual}, maxGeoPosQual: ${maxGeoPosQual}, decorrWinMult: ${decorrWinMult}, consecDecorr: ${consecDecorr}, multiDuty: ${multiDuty}, ops: ${ops}, jreUnitDes: ${jreUnitDes}, jreCallSign: ${jreCallSign}, jrePriAdd: ${jrePriAdd}, jreSecAdd: ${jreSecAdd}, jreDetails: ${jreDetails}, specTracks: ${specTracks}, nonLinkUnitDes: ${nonLinkUnitDes}, trackNumBlockLls: ${trackNumBlockLls}, trackNumBlocks: ${trackNumBlocks}, mgmtCode: ${mgmtCode}, mgmtCodeMeaning: ${mgmtCodeMeaning}, ackReq: ${ackReq}, ackInstUnits: ${ackInstUnits}, classSource: ${classSource}, classReasons: ${classReasons}, decInstDates: ${decInstDates}, decExemptCodes: ${decExemptCodes}, remarks: ${remarks}, rawFileUri: ${rawFileUri}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _DataLinkFullReader extends fb.TableReader<DataLinkFull> {
  const _DataLinkFullReader();

  @override
  DataLinkFull createObject(fb.BufferContext bc, int offset) => 
    DataLinkFull._(bc, offset);
}

class DataLinkFullBuilder {
  DataLinkFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(74);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOpExNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addOriginatorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addStopTimeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addStopTimeModOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addPlanOrigNumOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOpExInfoOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addOpExInfoAltOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addSerialNumOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addMonthOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addQualifierOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addQualSn(int? qualSn) {
    fbBuilder.addInt32(13, qualSn);
    return fbBuilder.offset;
  }
  int addReferencesOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addCanxIdOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addCanxOriginatorOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addCanxTsOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addCanxSerialNumOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addCanxSpecialNotationOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addCanxSicsOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addPocNameOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addPocRankOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addPocCallSignOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addPocLocNameOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addPocLat(double? pocLat) {
    fbBuilder.addFloat64(25, pocLat);
    return fbBuilder.offset;
  }
  int addPocLon(double? pocLon) {
    fbBuilder.addFloat64(26, pocLon);
    return fbBuilder.offset;
  }
  int addPocNumsOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addGeoDatumOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addRefPointsOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addVoiceCoordOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addSysDefaultCodeOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addWinSizeMult(double? winSizeMult) {
    fbBuilder.addFloat64(32, winSizeMult);
    return fbBuilder.offset;
  }
  int addWinSizeMin(double? winSizeMin) {
    fbBuilder.addFloat64(33, winSizeMin);
    return fbBuilder.offset;
  }
  int addMinTrackQual(int? minTrackQual) {
    fbBuilder.addInt32(34, minTrackQual);
    return fbBuilder.offset;
  }
  int addMaxTrackQual(int? maxTrackQual) {
    fbBuilder.addInt32(35, maxTrackQual);
    return fbBuilder.offset;
  }
  int addResTrackQual(int? resTrackQual) {
    fbBuilder.addInt32(36, resTrackQual);
    return fbBuilder.offset;
  }
  int addCourseDiff(int? courseDiff) {
    fbBuilder.addInt32(37, courseDiff);
    return fbBuilder.offset;
  }
  int addSpeedDiff(int? speedDiff) {
    fbBuilder.addInt32(38, speedDiff);
    return fbBuilder.offset;
  }
  int addAltDiff(int? altDiff) {
    fbBuilder.addInt32(39, altDiff);
    return fbBuilder.offset;
  }
  int addMinGeoPosQual(int? minGeoPosQual) {
    fbBuilder.addInt32(40, minGeoPosQual);
    return fbBuilder.offset;
  }
  int addMaxGeoPosQual(int? maxGeoPosQual) {
    fbBuilder.addInt32(41, maxGeoPosQual);
    return fbBuilder.offset;
  }
  int addDecorrWinMult(double? decorrWinMult) {
    fbBuilder.addFloat64(42, decorrWinMult);
    return fbBuilder.offset;
  }
  int addConsecDecorr(int? consecDecorr) {
    fbBuilder.addInt32(43, consecDecorr);
    return fbBuilder.offset;
  }
  int addMultiDutyOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addOpsOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addJreUnitDesOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addJreCallSignOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addJrePriAdd(int? jrePriAdd) {
    fbBuilder.addInt32(48, jrePriAdd);
    return fbBuilder.offset;
  }
  int addJreSecAdd(int? jreSecAdd) {
    fbBuilder.addInt32(49, jreSecAdd);
    return fbBuilder.offset;
  }
  int addJreDetailsOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addSpecTracksOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addNonLinkUnitDesOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addTrackNumBlockLlsOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }
  int addTrackNumBlocksOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addMgmtCodeOffset(int? offset) {
    fbBuilder.addOffset(55, offset);
    return fbBuilder.offset;
  }
  int addMgmtCodeMeaningOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }
  int addAckReq(bool? ackReq) {
    fbBuilder.addBool(57, ackReq);
    return fbBuilder.offset;
  }
  int addAckInstUnitsOffset(int? offset) {
    fbBuilder.addOffset(58, offset);
    return fbBuilder.offset;
  }
  int addClassSourceOffset(int? offset) {
    fbBuilder.addOffset(59, offset);
    return fbBuilder.offset;
  }
  int addClassReasonsOffset(int? offset) {
    fbBuilder.addOffset(60, offset);
    return fbBuilder.offset;
  }
  int addDecInstDatesOffset(int? offset) {
    fbBuilder.addOffset(61, offset);
    return fbBuilder.offset;
  }
  int addDecExemptCodesOffset(int? offset) {
    fbBuilder.addOffset(62, offset);
    return fbBuilder.offset;
  }
  int addRemarksOffset(int? offset) {
    fbBuilder.addOffset(63, offset);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(64, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(65, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(66, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(67, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(68, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(69, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(70, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(71, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(72, offset);
    return fbBuilder.offset;
  }
  int addDataMode(DataLinkFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(73, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DataLinkFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _opExName;
  final String? _originator;
  final String? _startTime;
  final String? _stopTime;
  final String? _stopTimeMod;
  final String? _planOrigNum;
  final String? _opExInfo;
  final String? _opExInfoAlt;
  final String? _serialNum;
  final String? _month;
  final String? _qualifier;
  final int? _qualSn;
  final List<String>? _references;
  final String? _canxId;
  final String? _canxOriginator;
  final String? _canxTs;
  final String? _canxSerialNum;
  final String? _canxSpecialNotation;
  final List<String>? _canxSics;
  final String? _pocName;
  final String? _pocRank;
  final String? _pocCallSign;
  final String? _pocLocName;
  final double? _pocLat;
  final double? _pocLon;
  final List<String>? _pocNums;
  final String? _geoDatum;
  final List<String>? _refPoints;
  final List<String>? _voiceCoord;
  final String? _sysDefaultCode;
  final double? _winSizeMult;
  final double? _winSizeMin;
  final int? _minTrackQual;
  final int? _maxTrackQual;
  final int? _resTrackQual;
  final int? _courseDiff;
  final int? _speedDiff;
  final int? _altDiff;
  final int? _minGeoPosQual;
  final int? _maxGeoPosQual;
  final double? _decorrWinMult;
  final int? _consecDecorr;
  final List<String>? _multiDuty;
  final List<String>? _ops;
  final String? _jreUnitDes;
  final String? _jreCallSign;
  final int? _jrePriAdd;
  final int? _jreSecAdd;
  final String? _jreDetails;
  final List<String>? _specTracks;
  final List<String>? _nonLinkUnitDes;
  final List<String>? _trackNumBlockLls;
  final List<String>? _trackNumBlocks;
  final String? _mgmtCode;
  final String? _mgmtCodeMeaning;
  final bool? _ackReq;
  final List<String>? _ackInstUnits;
  final String? _classSource;
  final List<String>? _classReasons;
  final List<String>? _decInstDates;
  final List<String>? _decExemptCodes;
  final List<String>? _remarks;
  final String? _rawFileUri;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final DataLinkFullDataModeEnum? _dataMode;

  DataLinkFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? opExName,
    String? originator,
    String? startTime,
    String? stopTime,
    String? stopTimeMod,
    String? planOrigNum,
    String? opExInfo,
    String? opExInfoAlt,
    String? serialNum,
    String? month,
    String? qualifier,
    int? qualSn,
    List<String>? references,
    String? canxId,
    String? canxOriginator,
    String? canxTs,
    String? canxSerialNum,
    String? canxSpecialNotation,
    List<String>? canxSics,
    String? pocName,
    String? pocRank,
    String? pocCallSign,
    String? pocLocName,
    double? pocLat,
    double? pocLon,
    List<String>? pocNums,
    String? geoDatum,
    List<String>? refPoints,
    List<String>? voiceCoord,
    String? sysDefaultCode,
    double? winSizeMult,
    double? winSizeMin,
    int? minTrackQual,
    int? maxTrackQual,
    int? resTrackQual,
    int? courseDiff,
    int? speedDiff,
    int? altDiff,
    int? minGeoPosQual,
    int? maxGeoPosQual,
    double? decorrWinMult,
    int? consecDecorr,
    List<String>? multiDuty,
    List<String>? ops,
    String? jreUnitDes,
    String? jreCallSign,
    int? jrePriAdd,
    int? jreSecAdd,
    String? jreDetails,
    List<String>? specTracks,
    List<String>? nonLinkUnitDes,
    List<String>? trackNumBlockLls,
    List<String>? trackNumBlocks,
    String? mgmtCode,
    String? mgmtCodeMeaning,
    bool? ackReq,
    List<String>? ackInstUnits,
    String? classSource,
    List<String>? classReasons,
    List<String>? decInstDates,
    List<String>? decExemptCodes,
    List<String>? remarks,
    String? rawFileUri,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    DataLinkFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _opExName = opExName,
        _originator = originator,
        _startTime = startTime,
        _stopTime = stopTime,
        _stopTimeMod = stopTimeMod,
        _planOrigNum = planOrigNum,
        _opExInfo = opExInfo,
        _opExInfoAlt = opExInfoAlt,
        _serialNum = serialNum,
        _month = month,
        _qualifier = qualifier,
        _qualSn = qualSn,
        _references = references,
        _canxId = canxId,
        _canxOriginator = canxOriginator,
        _canxTs = canxTs,
        _canxSerialNum = canxSerialNum,
        _canxSpecialNotation = canxSpecialNotation,
        _canxSics = canxSics,
        _pocName = pocName,
        _pocRank = pocRank,
        _pocCallSign = pocCallSign,
        _pocLocName = pocLocName,
        _pocLat = pocLat,
        _pocLon = pocLon,
        _pocNums = pocNums,
        _geoDatum = geoDatum,
        _refPoints = refPoints,
        _voiceCoord = voiceCoord,
        _sysDefaultCode = sysDefaultCode,
        _winSizeMult = winSizeMult,
        _winSizeMin = winSizeMin,
        _minTrackQual = minTrackQual,
        _maxTrackQual = maxTrackQual,
        _resTrackQual = resTrackQual,
        _courseDiff = courseDiff,
        _speedDiff = speedDiff,
        _altDiff = altDiff,
        _minGeoPosQual = minGeoPosQual,
        _maxGeoPosQual = maxGeoPosQual,
        _decorrWinMult = decorrWinMult,
        _consecDecorr = consecDecorr,
        _multiDuty = multiDuty,
        _ops = ops,
        _jreUnitDes = jreUnitDes,
        _jreCallSign = jreCallSign,
        _jrePriAdd = jrePriAdd,
        _jreSecAdd = jreSecAdd,
        _jreDetails = jreDetails,
        _specTracks = specTracks,
        _nonLinkUnitDes = nonLinkUnitDes,
        _trackNumBlockLls = trackNumBlockLls,
        _trackNumBlocks = trackNumBlocks,
        _mgmtCode = mgmtCode,
        _mgmtCodeMeaning = mgmtCodeMeaning,
        _ackReq = ackReq,
        _ackInstUnits = ackInstUnits,
        _classSource = classSource,
        _classReasons = classReasons,
        _decInstDates = decInstDates,
        _decExemptCodes = decExemptCodes,
        _remarks = remarks,
        _rawFileUri = rawFileUri,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? opExNameOffset = _opExName == null ? null
        : fbBuilder.writeString(_opExName!);
    final int? originatorOffset = _originator == null ? null
        : fbBuilder.writeString(_originator!);
    final int? startTimeOffset = _startTime == null ? null
        : fbBuilder.writeString(_startTime!);
    final int? stopTimeOffset = _stopTime == null ? null
        : fbBuilder.writeString(_stopTime!);
    final int? stopTimeModOffset = _stopTimeMod == null ? null
        : fbBuilder.writeString(_stopTimeMod!);
    final int? planOrigNumOffset = _planOrigNum == null ? null
        : fbBuilder.writeString(_planOrigNum!);
    final int? opExInfoOffset = _opExInfo == null ? null
        : fbBuilder.writeString(_opExInfo!);
    final int? opExInfoAltOffset = _opExInfoAlt == null ? null
        : fbBuilder.writeString(_opExInfoAlt!);
    final int? serialNumOffset = _serialNum == null ? null
        : fbBuilder.writeString(_serialNum!);
    final int? monthOffset = _month == null ? null
        : fbBuilder.writeString(_month!);
    final int? qualifierOffset = _qualifier == null ? null
        : fbBuilder.writeString(_qualifier!);
    final int? referencesOffset = _references == null ? null
        : fbBuilder.writeList(_references!.map(fbBuilder.writeString).toList());
    final int? canxIdOffset = _canxId == null ? null
        : fbBuilder.writeString(_canxId!);
    final int? canxOriginatorOffset = _canxOriginator == null ? null
        : fbBuilder.writeString(_canxOriginator!);
    final int? canxTsOffset = _canxTs == null ? null
        : fbBuilder.writeString(_canxTs!);
    final int? canxSerialNumOffset = _canxSerialNum == null ? null
        : fbBuilder.writeString(_canxSerialNum!);
    final int? canxSpecialNotationOffset = _canxSpecialNotation == null ? null
        : fbBuilder.writeString(_canxSpecialNotation!);
    final int? canxSicsOffset = _canxSics == null ? null
        : fbBuilder.writeList(_canxSics!.map(fbBuilder.writeString).toList());
    final int? pocNameOffset = _pocName == null ? null
        : fbBuilder.writeString(_pocName!);
    final int? pocRankOffset = _pocRank == null ? null
        : fbBuilder.writeString(_pocRank!);
    final int? pocCallSignOffset = _pocCallSign == null ? null
        : fbBuilder.writeString(_pocCallSign!);
    final int? pocLocNameOffset = _pocLocName == null ? null
        : fbBuilder.writeString(_pocLocName!);
    final int? pocNumsOffset = _pocNums == null ? null
        : fbBuilder.writeList(_pocNums!.map(fbBuilder.writeString).toList());
    final int? geoDatumOffset = _geoDatum == null ? null
        : fbBuilder.writeString(_geoDatum!);
    final int? refPointsOffset = _refPoints == null ? null
        : fbBuilder.writeList(_refPoints!.map(fbBuilder.writeString).toList());
    final int? voiceCoordOffset = _voiceCoord == null ? null
        : fbBuilder.writeList(_voiceCoord!.map(fbBuilder.writeString).toList());
    final int? sysDefaultCodeOffset = _sysDefaultCode == null ? null
        : fbBuilder.writeString(_sysDefaultCode!);
    final int? multiDutyOffset = _multiDuty == null ? null
        : fbBuilder.writeList(_multiDuty!.map(fbBuilder.writeString).toList());
    final int? opsOffset = _ops == null ? null
        : fbBuilder.writeList(_ops!.map(fbBuilder.writeString).toList());
    final int? jreUnitDesOffset = _jreUnitDes == null ? null
        : fbBuilder.writeString(_jreUnitDes!);
    final int? jreCallSignOffset = _jreCallSign == null ? null
        : fbBuilder.writeString(_jreCallSign!);
    final int? jreDetailsOffset = _jreDetails == null ? null
        : fbBuilder.writeString(_jreDetails!);
    final int? specTracksOffset = _specTracks == null ? null
        : fbBuilder.writeList(_specTracks!.map(fbBuilder.writeString).toList());
    final int? nonLinkUnitDesOffset = _nonLinkUnitDes == null ? null
        : fbBuilder.writeList(_nonLinkUnitDes!.map(fbBuilder.writeString).toList());
    final int? trackNumBlockLlsOffset = _trackNumBlockLls == null ? null
        : fbBuilder.writeList(_trackNumBlockLls!.map(fbBuilder.writeString).toList());
    final int? trackNumBlocksOffset = _trackNumBlocks == null ? null
        : fbBuilder.writeList(_trackNumBlocks!.map(fbBuilder.writeString).toList());
    final int? mgmtCodeOffset = _mgmtCode == null ? null
        : fbBuilder.writeString(_mgmtCode!);
    final int? mgmtCodeMeaningOffset = _mgmtCodeMeaning == null ? null
        : fbBuilder.writeString(_mgmtCodeMeaning!);
    final int? ackInstUnitsOffset = _ackInstUnits == null ? null
        : fbBuilder.writeList(_ackInstUnits!.map(fbBuilder.writeString).toList());
    final int? classSourceOffset = _classSource == null ? null
        : fbBuilder.writeString(_classSource!);
    final int? classReasonsOffset = _classReasons == null ? null
        : fbBuilder.writeList(_classReasons!.map(fbBuilder.writeString).toList());
    final int? decInstDatesOffset = _decInstDates == null ? null
        : fbBuilder.writeList(_decInstDates!.map(fbBuilder.writeString).toList());
    final int? decExemptCodesOffset = _decExemptCodes == null ? null
        : fbBuilder.writeList(_decExemptCodes!.map(fbBuilder.writeString).toList());
    final int? remarksOffset = _remarks == null ? null
        : fbBuilder.writeList(_remarks!.map(fbBuilder.writeString).toList());
    final int? rawFileUriOffset = _rawFileUri == null ? null
        : fbBuilder.writeString(_rawFileUri!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(74);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, opExNameOffset);
    fbBuilder.addOffset(3, originatorOffset);
    fbBuilder.addOffset(4, startTimeOffset);
    fbBuilder.addOffset(5, stopTimeOffset);
    fbBuilder.addOffset(6, stopTimeModOffset);
    fbBuilder.addOffset(7, planOrigNumOffset);
    fbBuilder.addOffset(8, opExInfoOffset);
    fbBuilder.addOffset(9, opExInfoAltOffset);
    fbBuilder.addOffset(10, serialNumOffset);
    fbBuilder.addOffset(11, monthOffset);
    fbBuilder.addOffset(12, qualifierOffset);
    fbBuilder.addInt32(13, _qualSn);
    fbBuilder.addOffset(14, referencesOffset);
    fbBuilder.addOffset(15, canxIdOffset);
    fbBuilder.addOffset(16, canxOriginatorOffset);
    fbBuilder.addOffset(17, canxTsOffset);
    fbBuilder.addOffset(18, canxSerialNumOffset);
    fbBuilder.addOffset(19, canxSpecialNotationOffset);
    fbBuilder.addOffset(20, canxSicsOffset);
    fbBuilder.addOffset(21, pocNameOffset);
    fbBuilder.addOffset(22, pocRankOffset);
    fbBuilder.addOffset(23, pocCallSignOffset);
    fbBuilder.addOffset(24, pocLocNameOffset);
    fbBuilder.addFloat64(25, _pocLat);
    fbBuilder.addFloat64(26, _pocLon);
    fbBuilder.addOffset(27, pocNumsOffset);
    fbBuilder.addOffset(28, geoDatumOffset);
    fbBuilder.addOffset(29, refPointsOffset);
    fbBuilder.addOffset(30, voiceCoordOffset);
    fbBuilder.addOffset(31, sysDefaultCodeOffset);
    fbBuilder.addFloat64(32, _winSizeMult);
    fbBuilder.addFloat64(33, _winSizeMin);
    fbBuilder.addInt32(34, _minTrackQual);
    fbBuilder.addInt32(35, _maxTrackQual);
    fbBuilder.addInt32(36, _resTrackQual);
    fbBuilder.addInt32(37, _courseDiff);
    fbBuilder.addInt32(38, _speedDiff);
    fbBuilder.addInt32(39, _altDiff);
    fbBuilder.addInt32(40, _minGeoPosQual);
    fbBuilder.addInt32(41, _maxGeoPosQual);
    fbBuilder.addFloat64(42, _decorrWinMult);
    fbBuilder.addInt32(43, _consecDecorr);
    fbBuilder.addOffset(44, multiDutyOffset);
    fbBuilder.addOffset(45, opsOffset);
    fbBuilder.addOffset(46, jreUnitDesOffset);
    fbBuilder.addOffset(47, jreCallSignOffset);
    fbBuilder.addInt32(48, _jrePriAdd);
    fbBuilder.addInt32(49, _jreSecAdd);
    fbBuilder.addOffset(50, jreDetailsOffset);
    fbBuilder.addOffset(51, specTracksOffset);
    fbBuilder.addOffset(52, nonLinkUnitDesOffset);
    fbBuilder.addOffset(53, trackNumBlockLlsOffset);
    fbBuilder.addOffset(54, trackNumBlocksOffset);
    fbBuilder.addOffset(55, mgmtCodeOffset);
    fbBuilder.addOffset(56, mgmtCodeMeaningOffset);
    fbBuilder.addBool(57, _ackReq);
    fbBuilder.addOffset(58, ackInstUnitsOffset);
    fbBuilder.addOffset(59, classSourceOffset);
    fbBuilder.addOffset(60, classReasonsOffset);
    fbBuilder.addOffset(61, decInstDatesOffset);
    fbBuilder.addOffset(62, decExemptCodesOffset);
    fbBuilder.addOffset(63, remarksOffset);
    fbBuilder.addOffset(64, rawFileUriOffset);
    fbBuilder.addOffset(65, createdAtOffset);
    fbBuilder.addOffset(66, createdByOffset);
    fbBuilder.addOffset(67, updatedAtOffset);
    fbBuilder.addOffset(68, updatedByOffset);
    fbBuilder.addOffset(69, sourceDlOffset);
    fbBuilder.addOffset(70, sourceOffset);
    fbBuilder.addOffset(71, originOffset);
    fbBuilder.addOffset(72, origNetworkOffset);
    fbBuilder.addInt8(73, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
