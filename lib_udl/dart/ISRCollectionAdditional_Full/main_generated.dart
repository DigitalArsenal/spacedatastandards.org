// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Additional start and stop for the collection.
class IsrcollectionAdditionalFull {
  IsrcollectionAdditionalFull._(this._bc, this._bcOffset);
  factory IsrcollectionAdditionalFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IsrcollectionAdditionalFull> reader = _IsrcollectionAdditionalFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique Identifier of additional collection period.
  ///  Example: /// Example: ISRCOLLECTIONADDITIONAL
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Start time of collection, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-19T01:01:15.001Z
  ///  Constraints: No constraints specified.
  String? get start => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Stop time of collection, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-19T01:01:15.001Z
  ///  Constraints: No constraints specified.
  String? get stop => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'IsrcollectionAdditionalFull{id: ${id}, start: ${start}, stop: ${stop}}';
  }
}

class _IsrcollectionAdditionalFullReader extends fb.TableReader<IsrcollectionAdditionalFull> {
  const _IsrcollectionAdditionalFullReader();

  @override
  IsrcollectionAdditionalFull createObject(fb.BufferContext bc, int offset) => 
    IsrcollectionAdditionalFull._(bc, offset);
}

class IsrcollectionAdditionalFullBuilder {
  IsrcollectionAdditionalFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStartOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStopOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IsrcollectionAdditionalFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _start;
  final String? _stop;

  IsrcollectionAdditionalFullObjectBuilder({
    String? id,
    String? start,
    String? stop,
  })
      : _id = id,
        _start = start,
        _stop = stop;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? startOffset = _start == null ? null
        : fbBuilder.writeString(_start!);
    final int? stopOffset = _stop == null ? null
        : fbBuilder.writeString(_stop!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, startOffset);
    fbBuilder.addOffset(2, stopOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
