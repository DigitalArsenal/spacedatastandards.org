// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AirfieldStatusIngestDataModeEnum {
  final int value;
  const AirfieldStatusIngestDataModeEnum._(this.value);

  factory AirfieldStatusIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AirfieldStatusIngestDataModeEnum');
    }
    return result;
  }

  static AirfieldStatusIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AirfieldStatusIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const AirfieldStatusIngestDataModeEnum REAL = AirfieldStatusIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const AirfieldStatusIngestDataModeEnum TEST = AirfieldStatusIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const AirfieldStatusIngestDataModeEnum SIMULATED = AirfieldStatusIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const AirfieldStatusIngestDataModeEnum EXERCISE = AirfieldStatusIngestDataModeEnum._(3);
  static const Map<int, AirfieldStatusIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AirfieldStatusIngestDataModeEnum> reader = _AirfieldStatusIngestDataModeEnumReader();

  @override
  String toString() {
    return 'AirfieldStatusIngestDataModeEnum{value: $value}';
  }
}

class _AirfieldStatusIngestDataModeEnumReader extends fb.Reader<AirfieldStatusIngestDataModeEnum> {
  const _AirfieldStatusIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AirfieldStatusIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      AirfieldStatusIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// The airfield status contains dynamic data of an airfield's capabilities.
class AirfieldStatusIngest {
  AirfieldStatusIngest._(this._bc, this._bcOffset);
  factory AirfieldStatusIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AirfieldStatusIngest> reader = _AirfieldStatusIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the Airfield for which this status is referencing.
  ///  Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idAirfield => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Alternate airfield identifier provided by the source.
  ///  Example: /// Example: AIRFIELD-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get altAirfieldId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Maximum on ground (MOG) number of high-reach/wide-body passenger aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get passengerServiceMog => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  Maximum on ground (MOG) number of fleet aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  int get fleetServiceMog => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  ///  Maximum on ground (MOG) number of high-reach/wide-body cargo aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
  ///  Example: /// Example: 8
  ///  Constraints: No constraints specified.
  int get cargoMog => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  Maximum on ground (MOG) number of aircraft that can be simultaneously refueled based on spacing and manpower at the time of status.
  ///  Example: /// Example: 9
  ///  Constraints: No constraints specified.
  int get fuelMog => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  Array of fuel types available at the airfield. This array must be the same length as fuelQtys.
  ///  Example: /// Example: ['JP-8', 'Jet A', 'AVGAS']
  ///  Constraints: No constraints specified.
  List<String>? get fuelTypes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 20);
  ///  Array of quantities for each fuel type at the airfield, in kilograms. The values in this array must correspond to the position index in fuelTypes. This array must be the same length as fuelTypes.
  ///  Example: /// Example: [263083.6, 286674.9, 18143.69]
  ///  Constraints: No constraints specified.
  List<String>? get fuelQtys => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 22);
  ///  Maximum on ground (MOG) number of aircraft that can be simultaneously ground handled for standard maintenance based on spacing and manpower at the time of status.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get mxMog => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 24, 0);
  ///  Maximum on ground (MOG) number of aircraft due to items not directly related to the airfield infrastructure or aircraft servicing capability based on spacing and manpower at the time of status.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  int get operatingMog => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  The number of aircraft that are currently on ground (COG) at the airfield.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get numCog => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  Maximum on ground (MOG) number of working wide-body aircraft based on spacing and manpower at the time of status.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get wideWorkingMog => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 30, 0);
  ///  Maximum on ground (MOG) number of parking wide-body aircraft based on spacing and manpower at the time of status.
  ///  Example: /// Example: 7
  ///  Constraints: No constraints specified.
  int get wideParkingMog => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  Maximum on ground (MOG) number of working narrow-body aircraft based on spacing and manpower at the time of status.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  int get narrowWorkingMog => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  Maximum on ground (MOG) number of parking narrow-body aircraft based on spacing and manpower at the time of status.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get narrowParkingMog => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 36, 0);
  ///  Array of material handling equipment types at the airfield. This array must be the same length as mheQtys.
  ///  Example: /// Example: ['30k', 'AT', '60k']
  ///  Constraints: No constraints specified.
  List<String>? get mheTypes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 38);
  ///  Array of quantities for each material handling equipment types at the airfield. The values in this array must correspond to the position index in mheTypes. This array must be the same length as mheTypes.
  ///  Example: /// Example: [1, 3, 1]
  ///  Constraints: No constraints specified.
  List<String>? get mheQtys => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 40);
  ///  The level of medical support and capabilities available at the airfield.
  ///  Example: /// Example: Large Field Hospital
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get medCap => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  The category of aircraft rescue and fire fighting (ARFF) services that are currently available at the airfield. Entries should include  the code (FAA or ICAO) and the category.
  ///  Example: /// Example: FAA-A
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get arffCat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  The expected time to receive ground support equipment (e.g. power units, air units, cables, hoses, etc.), in minutes.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get gseTime => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 46, 0);
  ///  The number or ID of primary runway at the airfield.
  ///  Example: /// Example: 35R
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get priRwyNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  The primary runway condition reading value used for determining runway braking action, from 0 to 26. A value of 0 indicates braking action is poor or non-existent, where a value of 26 indicates braking action is good.
  ///  Example: /// Example: 23
  ///  Constraints: No constraints specified.
  int get rwyCondReading => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 50, 0);
  ///  The primary runway friction factor which is dependent on the surface friction between the tires of the aircraft and the runway surface, from 0 to 100. A lower number indicates less friction and less braking response.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get rwyFrictionFactor => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 52, 0);
  ///  Array of markings currently on the primary runway.
  ///  Example: /// Example: ['Aiming Point', 'Threshold']
  ///  Constraints: No constraints specified.
  List<String>? get rwyMarkings => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 54);
  ///  Description of the current status of the airfield.
  ///  Example: /// Example: Status message about the airfield.
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  The primary frequency which the airfield is currently operating, in megahertz.
  ///  Example: /// Example: 123.45
  ///  Constraints: No constraints specified.
  double get priFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Array of slot types that an airfield requires a particular aircraft provide in order to consume a slot at this location.
  ///  Example: /// Example: ['PARKING', 'WORKING', 'LANDING']
  ///  Constraints: No constraints specified.
  List<String>? get slotTypesReq => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 60);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AirfieldStatusIngestDataModeEnum get dataMode => AirfieldStatusIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 74, 0));

  @override
  String toString() {
    return 'AirfieldStatusIngest{id: ${id}, classificationMarking: ${classificationMarking}, idAirfield: ${idAirfield}, altAirfieldId: ${altAirfieldId}, passengerServiceMog: ${passengerServiceMog}, fleetServiceMog: ${fleetServiceMog}, cargoMog: ${cargoMog}, fuelMog: ${fuelMog}, fuelTypes: ${fuelTypes}, fuelQtys: ${fuelQtys}, mxMog: ${mxMog}, operatingMog: ${operatingMog}, numCog: ${numCog}, wideWorkingMog: ${wideWorkingMog}, wideParkingMog: ${wideParkingMog}, narrowWorkingMog: ${narrowWorkingMog}, narrowParkingMog: ${narrowParkingMog}, mheTypes: ${mheTypes}, mheQtys: ${mheQtys}, medCap: ${medCap}, arffCat: ${arffCat}, gseTime: ${gseTime}, priRwyNum: ${priRwyNum}, rwyCondReading: ${rwyCondReading}, rwyFrictionFactor: ${rwyFrictionFactor}, rwyMarkings: ${rwyMarkings}, message: ${message}, priFreq: ${priFreq}, slotTypesReq: ${slotTypesReq}, createdAt: ${createdAt}, createdBy: ${createdBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _AirfieldStatusIngestReader extends fb.TableReader<AirfieldStatusIngest> {
  const _AirfieldStatusIngestReader();

  @override
  AirfieldStatusIngest createObject(fb.BufferContext bc, int offset) => 
    AirfieldStatusIngest._(bc, offset);
}

class AirfieldStatusIngestBuilder {
  AirfieldStatusIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(36);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdAirfieldOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAltAirfieldIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addPassengerServiceMog(int? passengerServiceMog) {
    fbBuilder.addInt32(4, passengerServiceMog);
    return fbBuilder.offset;
  }
  int addFleetServiceMog(int? fleetServiceMog) {
    fbBuilder.addInt32(5, fleetServiceMog);
    return fbBuilder.offset;
  }
  int addCargoMog(int? cargoMog) {
    fbBuilder.addInt32(6, cargoMog);
    return fbBuilder.offset;
  }
  int addFuelMog(int? fuelMog) {
    fbBuilder.addInt32(7, fuelMog);
    return fbBuilder.offset;
  }
  int addFuelTypesOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addFuelQtysOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addMxMog(int? mxMog) {
    fbBuilder.addInt32(10, mxMog);
    return fbBuilder.offset;
  }
  int addOperatingMog(int? operatingMog) {
    fbBuilder.addInt32(11, operatingMog);
    return fbBuilder.offset;
  }
  int addNumCog(int? numCog) {
    fbBuilder.addInt32(12, numCog);
    return fbBuilder.offset;
  }
  int addWideWorkingMog(int? wideWorkingMog) {
    fbBuilder.addInt32(13, wideWorkingMog);
    return fbBuilder.offset;
  }
  int addWideParkingMog(int? wideParkingMog) {
    fbBuilder.addInt32(14, wideParkingMog);
    return fbBuilder.offset;
  }
  int addNarrowWorkingMog(int? narrowWorkingMog) {
    fbBuilder.addInt32(15, narrowWorkingMog);
    return fbBuilder.offset;
  }
  int addNarrowParkingMog(int? narrowParkingMog) {
    fbBuilder.addInt32(16, narrowParkingMog);
    return fbBuilder.offset;
  }
  int addMheTypesOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addMheQtysOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addMedCapOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addArffCatOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addGseTime(int? gseTime) {
    fbBuilder.addInt32(21, gseTime);
    return fbBuilder.offset;
  }
  int addPriRwyNumOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addRwyCondReading(int? rwyCondReading) {
    fbBuilder.addInt32(23, rwyCondReading);
    return fbBuilder.offset;
  }
  int addRwyFrictionFactor(int? rwyFrictionFactor) {
    fbBuilder.addInt32(24, rwyFrictionFactor);
    return fbBuilder.offset;
  }
  int addRwyMarkingsOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addPriFreq(double? priFreq) {
    fbBuilder.addFloat64(27, priFreq);
    return fbBuilder.offset;
  }
  int addSlotTypesReqOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AirfieldStatusIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(35, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AirfieldStatusIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _idAirfield;
  final String? _altAirfieldId;
  final int? _passengerServiceMog;
  final int? _fleetServiceMog;
  final int? _cargoMog;
  final int? _fuelMog;
  final List<String>? _fuelTypes;
  final List<String>? _fuelQtys;
  final int? _mxMog;
  final int? _operatingMog;
  final int? _numCog;
  final int? _wideWorkingMog;
  final int? _wideParkingMog;
  final int? _narrowWorkingMog;
  final int? _narrowParkingMog;
  final List<String>? _mheTypes;
  final List<String>? _mheQtys;
  final String? _medCap;
  final String? _arffCat;
  final int? _gseTime;
  final String? _priRwyNum;
  final int? _rwyCondReading;
  final int? _rwyFrictionFactor;
  final List<String>? _rwyMarkings;
  final String? _message;
  final double? _priFreq;
  final List<String>? _slotTypesReq;
  final String? _createdAt;
  final String? _createdBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final AirfieldStatusIngestDataModeEnum? _dataMode;

  AirfieldStatusIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? idAirfield,
    String? altAirfieldId,
    int? passengerServiceMog,
    int? fleetServiceMog,
    int? cargoMog,
    int? fuelMog,
    List<String>? fuelTypes,
    List<String>? fuelQtys,
    int? mxMog,
    int? operatingMog,
    int? numCog,
    int? wideWorkingMog,
    int? wideParkingMog,
    int? narrowWorkingMog,
    int? narrowParkingMog,
    List<String>? mheTypes,
    List<String>? mheQtys,
    String? medCap,
    String? arffCat,
    int? gseTime,
    String? priRwyNum,
    int? rwyCondReading,
    int? rwyFrictionFactor,
    List<String>? rwyMarkings,
    String? message,
    double? priFreq,
    List<String>? slotTypesReq,
    String? createdAt,
    String? createdBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    AirfieldStatusIngestDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _idAirfield = idAirfield,
        _altAirfieldId = altAirfieldId,
        _passengerServiceMog = passengerServiceMog,
        _fleetServiceMog = fleetServiceMog,
        _cargoMog = cargoMog,
        _fuelMog = fuelMog,
        _fuelTypes = fuelTypes,
        _fuelQtys = fuelQtys,
        _mxMog = mxMog,
        _operatingMog = operatingMog,
        _numCog = numCog,
        _wideWorkingMog = wideWorkingMog,
        _wideParkingMog = wideParkingMog,
        _narrowWorkingMog = narrowWorkingMog,
        _narrowParkingMog = narrowParkingMog,
        _mheTypes = mheTypes,
        _mheQtys = mheQtys,
        _medCap = medCap,
        _arffCat = arffCat,
        _gseTime = gseTime,
        _priRwyNum = priRwyNum,
        _rwyCondReading = rwyCondReading,
        _rwyFrictionFactor = rwyFrictionFactor,
        _rwyMarkings = rwyMarkings,
        _message = message,
        _priFreq = priFreq,
        _slotTypesReq = slotTypesReq,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? idAirfieldOffset = _idAirfield == null ? null
        : fbBuilder.writeString(_idAirfield!);
    final int? altAirfieldIdOffset = _altAirfieldId == null ? null
        : fbBuilder.writeString(_altAirfieldId!);
    final int? fuelTypesOffset = _fuelTypes == null ? null
        : fbBuilder.writeList(_fuelTypes!.map(fbBuilder.writeString).toList());
    final int? fuelQtysOffset = _fuelQtys == null ? null
        : fbBuilder.writeList(_fuelQtys!.map(fbBuilder.writeString).toList());
    final int? mheTypesOffset = _mheTypes == null ? null
        : fbBuilder.writeList(_mheTypes!.map(fbBuilder.writeString).toList());
    final int? mheQtysOffset = _mheQtys == null ? null
        : fbBuilder.writeList(_mheQtys!.map(fbBuilder.writeString).toList());
    final int? medCapOffset = _medCap == null ? null
        : fbBuilder.writeString(_medCap!);
    final int? arffCatOffset = _arffCat == null ? null
        : fbBuilder.writeString(_arffCat!);
    final int? priRwyNumOffset = _priRwyNum == null ? null
        : fbBuilder.writeString(_priRwyNum!);
    final int? rwyMarkingsOffset = _rwyMarkings == null ? null
        : fbBuilder.writeList(_rwyMarkings!.map(fbBuilder.writeString).toList());
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    final int? slotTypesReqOffset = _slotTypesReq == null ? null
        : fbBuilder.writeList(_slotTypesReq!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(36);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, idAirfieldOffset);
    fbBuilder.addOffset(3, altAirfieldIdOffset);
    fbBuilder.addInt32(4, _passengerServiceMog);
    fbBuilder.addInt32(5, _fleetServiceMog);
    fbBuilder.addInt32(6, _cargoMog);
    fbBuilder.addInt32(7, _fuelMog);
    fbBuilder.addOffset(8, fuelTypesOffset);
    fbBuilder.addOffset(9, fuelQtysOffset);
    fbBuilder.addInt32(10, _mxMog);
    fbBuilder.addInt32(11, _operatingMog);
    fbBuilder.addInt32(12, _numCog);
    fbBuilder.addInt32(13, _wideWorkingMog);
    fbBuilder.addInt32(14, _wideParkingMog);
    fbBuilder.addInt32(15, _narrowWorkingMog);
    fbBuilder.addInt32(16, _narrowParkingMog);
    fbBuilder.addOffset(17, mheTypesOffset);
    fbBuilder.addOffset(18, mheQtysOffset);
    fbBuilder.addOffset(19, medCapOffset);
    fbBuilder.addOffset(20, arffCatOffset);
    fbBuilder.addInt32(21, _gseTime);
    fbBuilder.addOffset(22, priRwyNumOffset);
    fbBuilder.addInt32(23, _rwyCondReading);
    fbBuilder.addInt32(24, _rwyFrictionFactor);
    fbBuilder.addOffset(25, rwyMarkingsOffset);
    fbBuilder.addOffset(26, messageOffset);
    fbBuilder.addFloat64(27, _priFreq);
    fbBuilder.addOffset(28, slotTypesReqOffset);
    fbBuilder.addOffset(29, createdAtOffset);
    fbBuilder.addOffset(30, createdByOffset);
    fbBuilder.addOffset(31, sourceDlOffset);
    fbBuilder.addOffset(32, sourceOffset);
    fbBuilder.addOffset(33, originOffset);
    fbBuilder.addOffset(34, origNetworkOffset);
    fbBuilder.addInt8(35, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
