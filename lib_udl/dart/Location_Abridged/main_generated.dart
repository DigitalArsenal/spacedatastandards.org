// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class LocationAbridgedDataModeEnum {
  final int value;
  const LocationAbridgedDataModeEnum._(this.value);

  factory LocationAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum LocationAbridgedDataModeEnum');
    }
    return result;
  }

  static LocationAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : LocationAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const LocationAbridgedDataModeEnum REAL = LocationAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const LocationAbridgedDataModeEnum TEST = LocationAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const LocationAbridgedDataModeEnum SIMULATED = LocationAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const LocationAbridgedDataModeEnum EXERCISE = LocationAbridgedDataModeEnum._(3);
  static const Map<int, LocationAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<LocationAbridgedDataModeEnum> reader = _LocationAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'LocationAbridgedDataModeEnum{value: $value}';
  }
}

class _LocationAbridgedDataModeEnumReader extends fb.Reader<LocationAbridgedDataModeEnum> {
  const _LocationAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  LocationAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      LocationAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of a location, which is a specific fixed point on the earth and is used to denote the locations of fixed sensors, operating units, etc.
class LocationAbridged {
  LocationAbridged._(this._bc, this._bcOffset);
  factory LocationAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LocationAbridged> reader = _LocationAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the location, auto-generated by the system.
  ///  Example: /// Example: LOCATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idLocation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Location name.
  ///  Example: /// Example: Example location
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Altitude of the location, in kilometers.
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get altitude => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  LocationAbridgedDataModeEnum get dataMode => LocationAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 26, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);

  @override
  String toString() {
    return 'LocationAbridged{idLocation: ${idLocation}, classificationMarking: ${classificationMarking}, name: ${name}, countryCode: ${countryCode}, lat: ${lat}, lon: ${lon}, altitude: ${altitude}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _LocationAbridgedReader extends fb.TableReader<LocationAbridged> {
  const _LocationAbridgedReader();

  @override
  LocationAbridged createObject(fb.BufferContext bc, int offset) => 
    LocationAbridged._(bc, offset);
}

class LocationAbridgedBuilder {
  LocationAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(13);
  }

  int addIdLocationOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(4, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(5, lon);
    return fbBuilder.offset;
  }
  int addAltitude(double? altitude) {
    fbBuilder.addFloat64(6, altitude);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addDataMode(LocationAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(11, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LocationAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _idLocation;
  final String? _classificationMarking;
  final String? _name;
  final String? _countryCode;
  final double? _lat;
  final double? _lon;
  final double? _altitude;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final LocationAbridgedDataModeEnum? _dataMode;
  final String? _origNetwork;

  LocationAbridgedObjectBuilder({
    String? idLocation,
    String? classificationMarking,
    String? name,
    String? countryCode,
    double? lat,
    double? lon,
    double? altitude,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    LocationAbridgedDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _idLocation = idLocation,
        _classificationMarking = classificationMarking,
        _name = name,
        _countryCode = countryCode,
        _lat = lat,
        _lon = lon,
        _altitude = altitude,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idLocationOffset = _idLocation == null ? null
        : fbBuilder.writeString(_idLocation!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(13);
    fbBuilder.addOffset(0, idLocationOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addOffset(3, countryCodeOffset);
    fbBuilder.addFloat64(4, _lat);
    fbBuilder.addFloat64(5, _lon);
    fbBuilder.addFloat64(6, _altitude);
    fbBuilder.addOffset(7, createdAtOffset);
    fbBuilder.addOffset(8, createdByOffset);
    fbBuilder.addOffset(9, sourceOffset);
    fbBuilder.addOffset(10, originOffset);
    fbBuilder.addInt8(11, _dataMode?.value);
    fbBuilder.addOffset(12, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
