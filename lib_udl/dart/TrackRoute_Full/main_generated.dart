// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class TrackRouteFullDataModeEnum {
  final int value;
  const TrackRouteFullDataModeEnum._(this.value);

  factory TrackRouteFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum TrackRouteFullDataModeEnum');
    }
    return result;
  }

  static TrackRouteFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : TrackRouteFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const TrackRouteFullDataModeEnum REAL = TrackRouteFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const TrackRouteFullDataModeEnum TEST = TrackRouteFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const TrackRouteFullDataModeEnum SIMULATED = TrackRouteFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const TrackRouteFullDataModeEnum EXERCISE = TrackRouteFullDataModeEnum._(3);
  static const Map<int, TrackRouteFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<TrackRouteFullDataModeEnum> reader = _TrackRouteFullDataModeEnumReader();

  @override
  String toString() {
    return 'TrackRouteFullDataModeEnum{value: $value}';
  }
}

class _TrackRouteFullDataModeEnumReader extends fb.Reader<TrackRouteFullDataModeEnum> {
  const _TrackRouteFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  TrackRouteFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      TrackRouteFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// A track route is a prescribed route for performing training events or operations such as air refueling.
class TrackRouteFull {
  TrackRouteFull._(this._bc, this._bcOffset);
  factory TrackRouteFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TrackRouteFull> reader = _TrackRouteFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The track route type represented by this record (ex. AIR REFUELING).
  ///  Example: /// Example: AIR REFUELING
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: GDSSMH121004232315303094
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The principal compass direction (cardinal or ordinal) of the track route.
  ///  Example: /// Example: NE
  ///  Constraints: Minimum length = 0, Maximum length = 2
  String? get direction => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The name of the creating organization of the track route.
  ///  Example: /// Example: HQPAC
  ///  Constraints: Minimum length = 0, Maximum length = 250
  String? get creatingOrg => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Track location ID.
  ///  Example: /// Example: POACHR
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get locationTrackId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Identifier of the track.
  ///  Example: /// Example: CH61A
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get trackId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Name of the track.
  ///  Example: /// Example: CH61 POST
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get trackName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Abbreviated name of the track.
  ///  Example: /// Example: CH61
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get shortName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Type of process used by AMC to schedule an air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
  ///  Example: /// Example: V
  ///  Constraints: Minimum length = 0, Maximum length = 2
  String? get typeCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Region code indicating where the track resides as determined by the data source.
  ///  Example: /// Example: 5
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get regionCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Region where the track resides.
  ///  Example: /// Example: North America
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get regionName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The APX radar code sent and received by the aircraft for identification.
  ///  Example: /// Example: 5/1
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get apxBeaconCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The receiver tanker channel identifer for air refueling tracks.
  ///  Example: /// Example: 31/094
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get receiverTankerChcode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The APN radar code sent and received by the aircraft for identification.
  ///  Example: /// Example: 1-3-1
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get apnSetting => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Standard Indicator Code of the air refueling track.
  ///  Example: /// Example: N
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get sic => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Date the track needs to be reviewed for accuracy or deletion in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-09-16T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get reviewDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Used to show last time the track route was added to an itinerary in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-09-17T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get lastUsedDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The last updated date of the track route in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-09-17T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get lastUpdateDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  The primary UHF radio frequency used for the track route in megahertz.
  ///  Example: /// Example: 357.5
  ///  Constraints: No constraints specified.
  double get priFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  The secondary UHF radio frequency used for the track route in megahertz.
  ///  Example: /// Example: 319.7
  ///  Constraints: No constraints specified.
  double get secFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Air Refueling Track Control Center message.
  ///  Example: /// Example: OAKLAND CTR/GUAM CERAP
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get artccMessage => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Point of contact for the air refueling track route scheduler.
  ///  Example: /// Example: 97 OSS/OSOS DSN 866-5555
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get schedulerOrgName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  The unit responsible for scheduling the track route.
  ///  Example: /// Example: 612 AOC
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get schedulerOrgUnit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  The date which the DAFIF track was last updated/validated in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-09-17T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get effectiveDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Points identified within the route.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get routePoints => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 56);
  ///  Minimum and maximum altitude bounds for the track.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get altitudeBlocks => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 58);
  ///  Point of contacts for scheduling or modifying the route.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get poc => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 60);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Time the row was updated in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Application user who updated the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  TrackRouteFullDataModeEnum get dataMode => TrackRouteFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 78, 0));

  @override
  String toString() {
    return 'TrackRouteFull{id: ${id}, classificationMarking: ${classificationMarking}, type: ${type}, externalId: ${externalId}, direction: ${direction}, creatingOrg: ${creatingOrg}, locationTrackId: ${locationTrackId}, trackId: ${trackId}, trackName: ${trackName}, shortName: ${shortName}, typeCode: ${typeCode}, regionCode: ${regionCode}, regionName: ${regionName}, apxBeaconCode: ${apxBeaconCode}, receiverTankerChcode: ${receiverTankerChcode}, apnSetting: ${apnSetting}, sic: ${sic}, reviewDate: ${reviewDate}, lastUsedDate: ${lastUsedDate}, lastUpdateDate: ${lastUpdateDate}, priFreq: ${priFreq}, secFreq: ${secFreq}, artccMessage: ${artccMessage}, schedulerOrgName: ${schedulerOrgName}, schedulerOrgUnit: ${schedulerOrgUnit}, effectiveDate: ${effectiveDate}, routePoints: ${routePoints}, altitudeBlocks: ${altitudeBlocks}, poc: ${poc}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, sourceDl: ${sourceDl}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _TrackRouteFullReader extends fb.TableReader<TrackRouteFull> {
  const _TrackRouteFullReader();

  @override
  TrackRouteFull createObject(fb.BufferContext bc, int offset) => 
    TrackRouteFull._(bc, offset);
}

class TrackRouteFullBuilder {
  TrackRouteFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(38);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addExternalIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDirectionOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addCreatingOrgOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addLocationTrackIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addTrackIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addTrackNameOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addShortNameOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addTypeCodeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addRegionCodeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addRegionNameOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addApxBeaconCodeOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addReceiverTankerChcodeOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addApnSettingOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addSicOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addReviewDateOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addLastUsedDateOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addLastUpdateDateOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addPriFreq(double? priFreq) {
    fbBuilder.addFloat64(20, priFreq);
    return fbBuilder.offset;
  }
  int addSecFreq(double? secFreq) {
    fbBuilder.addFloat64(21, secFreq);
    return fbBuilder.offset;
  }
  int addArtccMessageOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addSchedulerOrgNameOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addSchedulerOrgUnitOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addEffectiveDateOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addRoutePointsOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addAltitudeBlocksOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addPocOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addDataMode(TrackRouteFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(37, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TrackRouteFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _type;
  final String? _externalId;
  final String? _direction;
  final String? _creatingOrg;
  final String? _locationTrackId;
  final String? _trackId;
  final String? _trackName;
  final String? _shortName;
  final String? _typeCode;
  final String? _regionCode;
  final String? _regionName;
  final String? _apxBeaconCode;
  final String? _receiverTankerChcode;
  final String? _apnSetting;
  final String? _sic;
  final String? _reviewDate;
  final String? _lastUsedDate;
  final String? _lastUpdateDate;
  final double? _priFreq;
  final double? _secFreq;
  final String? _artccMessage;
  final String? _schedulerOrgName;
  final String? _schedulerOrgUnit;
  final String? _effectiveDate;
  final List<String>? _routePoints;
  final List<String>? _altitudeBlocks;
  final List<String>? _poc;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _sourceDl;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final TrackRouteFullDataModeEnum? _dataMode;

  TrackRouteFullObjectBuilder({
    String? id,
    String? classificationMarking,
    String? type,
    String? externalId,
    String? direction,
    String? creatingOrg,
    String? locationTrackId,
    String? trackId,
    String? trackName,
    String? shortName,
    String? typeCode,
    String? regionCode,
    String? regionName,
    String? apxBeaconCode,
    String? receiverTankerChcode,
    String? apnSetting,
    String? sic,
    String? reviewDate,
    String? lastUsedDate,
    String? lastUpdateDate,
    double? priFreq,
    double? secFreq,
    String? artccMessage,
    String? schedulerOrgName,
    String? schedulerOrgUnit,
    String? effectiveDate,
    List<String>? routePoints,
    List<String>? altitudeBlocks,
    List<String>? poc,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? sourceDl,
    String? source,
    String? origin,
    String? origNetwork,
    TrackRouteFullDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _type = type,
        _externalId = externalId,
        _direction = direction,
        _creatingOrg = creatingOrg,
        _locationTrackId = locationTrackId,
        _trackId = trackId,
        _trackName = trackName,
        _shortName = shortName,
        _typeCode = typeCode,
        _regionCode = regionCode,
        _regionName = regionName,
        _apxBeaconCode = apxBeaconCode,
        _receiverTankerChcode = receiverTankerChcode,
        _apnSetting = apnSetting,
        _sic = sic,
        _reviewDate = reviewDate,
        _lastUsedDate = lastUsedDate,
        _lastUpdateDate = lastUpdateDate,
        _priFreq = priFreq,
        _secFreq = secFreq,
        _artccMessage = artccMessage,
        _schedulerOrgName = schedulerOrgName,
        _schedulerOrgUnit = schedulerOrgUnit,
        _effectiveDate = effectiveDate,
        _routePoints = routePoints,
        _altitudeBlocks = altitudeBlocks,
        _poc = poc,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _sourceDl = sourceDl,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? externalIdOffset = _externalId == null ? null
        : fbBuilder.writeString(_externalId!);
    final int? directionOffset = _direction == null ? null
        : fbBuilder.writeString(_direction!);
    final int? creatingOrgOffset = _creatingOrg == null ? null
        : fbBuilder.writeString(_creatingOrg!);
    final int? locationTrackIdOffset = _locationTrackId == null ? null
        : fbBuilder.writeString(_locationTrackId!);
    final int? trackIdOffset = _trackId == null ? null
        : fbBuilder.writeString(_trackId!);
    final int? trackNameOffset = _trackName == null ? null
        : fbBuilder.writeString(_trackName!);
    final int? shortNameOffset = _shortName == null ? null
        : fbBuilder.writeString(_shortName!);
    final int? typeCodeOffset = _typeCode == null ? null
        : fbBuilder.writeString(_typeCode!);
    final int? regionCodeOffset = _regionCode == null ? null
        : fbBuilder.writeString(_regionCode!);
    final int? regionNameOffset = _regionName == null ? null
        : fbBuilder.writeString(_regionName!);
    final int? apxBeaconCodeOffset = _apxBeaconCode == null ? null
        : fbBuilder.writeString(_apxBeaconCode!);
    final int? receiverTankerChcodeOffset = _receiverTankerChcode == null ? null
        : fbBuilder.writeString(_receiverTankerChcode!);
    final int? apnSettingOffset = _apnSetting == null ? null
        : fbBuilder.writeString(_apnSetting!);
    final int? sicOffset = _sic == null ? null
        : fbBuilder.writeString(_sic!);
    final int? reviewDateOffset = _reviewDate == null ? null
        : fbBuilder.writeString(_reviewDate!);
    final int? lastUsedDateOffset = _lastUsedDate == null ? null
        : fbBuilder.writeString(_lastUsedDate!);
    final int? lastUpdateDateOffset = _lastUpdateDate == null ? null
        : fbBuilder.writeString(_lastUpdateDate!);
    final int? artccMessageOffset = _artccMessage == null ? null
        : fbBuilder.writeString(_artccMessage!);
    final int? schedulerOrgNameOffset = _schedulerOrgName == null ? null
        : fbBuilder.writeString(_schedulerOrgName!);
    final int? schedulerOrgUnitOffset = _schedulerOrgUnit == null ? null
        : fbBuilder.writeString(_schedulerOrgUnit!);
    final int? effectiveDateOffset = _effectiveDate == null ? null
        : fbBuilder.writeString(_effectiveDate!);
    final int? routePointsOffset = _routePoints == null ? null
        : fbBuilder.writeList(_routePoints!.map(fbBuilder.writeString).toList());
    final int? altitudeBlocksOffset = _altitudeBlocks == null ? null
        : fbBuilder.writeList(_altitudeBlocks!.map(fbBuilder.writeString).toList());
    final int? pocOffset = _poc == null ? null
        : fbBuilder.writeList(_poc!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(38);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, typeOffset);
    fbBuilder.addOffset(3, externalIdOffset);
    fbBuilder.addOffset(4, directionOffset);
    fbBuilder.addOffset(5, creatingOrgOffset);
    fbBuilder.addOffset(6, locationTrackIdOffset);
    fbBuilder.addOffset(7, trackIdOffset);
    fbBuilder.addOffset(8, trackNameOffset);
    fbBuilder.addOffset(9, shortNameOffset);
    fbBuilder.addOffset(10, typeCodeOffset);
    fbBuilder.addOffset(11, regionCodeOffset);
    fbBuilder.addOffset(12, regionNameOffset);
    fbBuilder.addOffset(13, apxBeaconCodeOffset);
    fbBuilder.addOffset(14, receiverTankerChcodeOffset);
    fbBuilder.addOffset(15, apnSettingOffset);
    fbBuilder.addOffset(16, sicOffset);
    fbBuilder.addOffset(17, reviewDateOffset);
    fbBuilder.addOffset(18, lastUsedDateOffset);
    fbBuilder.addOffset(19, lastUpdateDateOffset);
    fbBuilder.addFloat64(20, _priFreq);
    fbBuilder.addFloat64(21, _secFreq);
    fbBuilder.addOffset(22, artccMessageOffset);
    fbBuilder.addOffset(23, schedulerOrgNameOffset);
    fbBuilder.addOffset(24, schedulerOrgUnitOffset);
    fbBuilder.addOffset(25, effectiveDateOffset);
    fbBuilder.addOffset(26, routePointsOffset);
    fbBuilder.addOffset(27, altitudeBlocksOffset);
    fbBuilder.addOffset(28, pocOffset);
    fbBuilder.addOffset(29, createdAtOffset);
    fbBuilder.addOffset(30, createdByOffset);
    fbBuilder.addOffset(31, updatedAtOffset);
    fbBuilder.addOffset(32, updatedByOffset);
    fbBuilder.addOffset(33, sourceDlOffset);
    fbBuilder.addOffset(34, sourceOffset);
    fbBuilder.addOffset(35, originOffset);
    fbBuilder.addOffset(36, origNetworkOffset);
    fbBuilder.addInt8(37, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
