// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SoiobservationSetIngestTypeEnum {
  final int value;
  const SoiobservationSetIngestTypeEnum._(this.value);

  factory SoiobservationSetIngestTypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SoiobservationSetIngestTypeEnum');
    }
    return result;
  }

  static SoiobservationSetIngestTypeEnum? _createOrNull(int? value) => 
      value == null ? null : SoiobservationSetIngestTypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SoiobservationSetIngestTypeEnum OPTICAL = SoiobservationSetIngestTypeEnum._(0);

  ///  No description available.
  static const SoiobservationSetIngestTypeEnum RADAR = SoiobservationSetIngestTypeEnum._(1);
  static const Map<int, SoiobservationSetIngestTypeEnum> values = {
    0: OPTICAL,
    1: RADAR};

  static const fb.Reader<SoiobservationSetIngestTypeEnum> reader = _SoiobservationSetIngestTypeEnumReader();

  @override
  String toString() {
    return 'SoiobservationSetIngestTypeEnum{value: $value}';
  }
}

class _SoiobservationSetIngestTypeEnumReader extends fb.Reader<SoiobservationSetIngestTypeEnum> {
  const _SoiobservationSetIngestTypeEnumReader();

  @override
  int get size => 1;

  @override
  SoiobservationSetIngestTypeEnum read(fb.BufferContext bc, int offset) =>
      SoiobservationSetIngestTypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SoiobservationSetIngestReferenceFrameEnum {
  final int value;
  const SoiobservationSetIngestReferenceFrameEnum._(this.value);

  factory SoiobservationSetIngestReferenceFrameEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SoiobservationSetIngestReferenceFrameEnum');
    }
    return result;
  }

  static SoiobservationSetIngestReferenceFrameEnum? _createOrNull(int? value) => 
      value == null ? null : SoiobservationSetIngestReferenceFrameEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SoiobservationSetIngestReferenceFrameEnum J2000 = SoiobservationSetIngestReferenceFrameEnum._(0);

  ///  No description available.
  static const SoiobservationSetIngestReferenceFrameEnum EFG_TDR = SoiobservationSetIngestReferenceFrameEnum._(1);

  ///  No description available.
  static const SoiobservationSetIngestReferenceFrameEnum ECR_ECEF = SoiobservationSetIngestReferenceFrameEnum._(2);

  ///  No description available.
  static const SoiobservationSetIngestReferenceFrameEnum TEME = SoiobservationSetIngestReferenceFrameEnum._(3);

  ///  No description available.
  static const SoiobservationSetIngestReferenceFrameEnum ITRF = SoiobservationSetIngestReferenceFrameEnum._(4);

  ///  No description available.
  static const SoiobservationSetIngestReferenceFrameEnum GCRF = SoiobservationSetIngestReferenceFrameEnum._(5);
  static const Map<int, SoiobservationSetIngestReferenceFrameEnum> values = {
    0: J2000,
    1: EFG_TDR,
    2: ECR_ECEF,
    3: TEME,
    4: ITRF,
    5: GCRF};

  static const fb.Reader<SoiobservationSetIngestReferenceFrameEnum> reader = _SoiobservationSetIngestReferenceFrameEnumReader();

  @override
  String toString() {
    return 'SoiobservationSetIngestReferenceFrameEnum{value: $value}';
  }
}

class _SoiobservationSetIngestReferenceFrameEnumReader extends fb.Reader<SoiobservationSetIngestReferenceFrameEnum> {
  const _SoiobservationSetIngestReferenceFrameEnumReader();

  @override
  int get size => 1;

  @override
  SoiobservationSetIngestReferenceFrameEnum read(fb.BufferContext bc, int offset) =>
      SoiobservationSetIngestReferenceFrameEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SoiobservationSetIngestSenReferenceFrameEnum {
  final int value;
  const SoiobservationSetIngestSenReferenceFrameEnum._(this.value);

  factory SoiobservationSetIngestSenReferenceFrameEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SoiobservationSetIngestSenReferenceFrameEnum');
    }
    return result;
  }

  static SoiobservationSetIngestSenReferenceFrameEnum? _createOrNull(int? value) => 
      value == null ? null : SoiobservationSetIngestSenReferenceFrameEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const SoiobservationSetIngestSenReferenceFrameEnum J2000 = SoiobservationSetIngestSenReferenceFrameEnum._(0);

  ///  No description available.
  static const SoiobservationSetIngestSenReferenceFrameEnum EFG_TDR = SoiobservationSetIngestSenReferenceFrameEnum._(1);

  ///  No description available.
  static const SoiobservationSetIngestSenReferenceFrameEnum ECR_ECEF = SoiobservationSetIngestSenReferenceFrameEnum._(2);

  ///  No description available.
  static const SoiobservationSetIngestSenReferenceFrameEnum TEME = SoiobservationSetIngestSenReferenceFrameEnum._(3);

  ///  No description available.
  static const SoiobservationSetIngestSenReferenceFrameEnum ITRF = SoiobservationSetIngestSenReferenceFrameEnum._(4);

  ///  No description available.
  static const SoiobservationSetIngestSenReferenceFrameEnum GCRF = SoiobservationSetIngestSenReferenceFrameEnum._(5);
  static const Map<int, SoiobservationSetIngestSenReferenceFrameEnum> values = {
    0: J2000,
    1: EFG_TDR,
    2: ECR_ECEF,
    3: TEME,
    4: ITRF,
    5: GCRF};

  static const fb.Reader<SoiobservationSetIngestSenReferenceFrameEnum> reader = _SoiobservationSetIngestSenReferenceFrameEnumReader();

  @override
  String toString() {
    return 'SoiobservationSetIngestSenReferenceFrameEnum{value: $value}';
  }
}

class _SoiobservationSetIngestSenReferenceFrameEnumReader extends fb.Reader<SoiobservationSetIngestSenReferenceFrameEnum> {
  const _SoiobservationSetIngestSenReferenceFrameEnumReader();

  @override
  int get size => 1;

  @override
  SoiobservationSetIngestSenReferenceFrameEnum read(fb.BufferContext bc, int offset) =>
      SoiobservationSetIngestSenReferenceFrameEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class SoiobservationSetIngestDataModeEnum {
  final int value;
  const SoiobservationSetIngestDataModeEnum._(this.value);

  factory SoiobservationSetIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SoiobservationSetIngestDataModeEnum');
    }
    return result;
  }

  static SoiobservationSetIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SoiobservationSetIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SoiobservationSetIngestDataModeEnum REAL = SoiobservationSetIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SoiobservationSetIngestDataModeEnum TEST = SoiobservationSetIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SoiobservationSetIngestDataModeEnum SIMULATED = SoiobservationSetIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SoiobservationSetIngestDataModeEnum EXERCISE = SoiobservationSetIngestDataModeEnum._(3);
  static const Map<int, SoiobservationSetIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SoiobservationSetIngestDataModeEnum> reader = _SoiobservationSetIngestDataModeEnumReader();

  @override
  String toString() {
    return 'SoiobservationSetIngestDataModeEnum{value: $value}';
  }
}

class _SoiobservationSetIngestDataModeEnumReader extends fb.Reader<SoiobservationSetIngestDataModeEnum> {
  const _SoiobservationSetIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SoiobservationSetIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      SoiobservationSetIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// These services provide operations for posting space object idenfification observation sets.
class SoiobservationSetIngest {
  SoiobservationSetIngest._(this._bc, this._bcOffset);
  factory SoiobservationSetIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SoiobservationSetIngest> reader = _SoiobservationSetIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  SOI msgCreateDate time in ISO 8601 UTC time, with millisecond precision.
  ///  Example: /// Example: 2022-07-07T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get msgCreateDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  ID of the observing sensor.
  ///  Example: /// Example: SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies if this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  ID of the AttitudeSet record for the observing sensor.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get sensorAsId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Unique identifier of the target on-orbit object, if correlated.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Satellite/catalog number of the target on-orbit object.
  ///  Example: /// Example: 101
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Sensor WGS84 latitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.1
  ///  Constraints: No constraints specified.
  double get senlat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Sensor WGS84 longitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values south of equator).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  double get senlon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Sensor altitude at startTime (if mobile/onorbit) in kilometers.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senalt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Cartesian X position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senx => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Cartesian Y position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get seny => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Cartesian Z position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senz => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Cartesian X velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senvelx => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Cartesian Y velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senvely => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Cartesian Z velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get senvelz => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  ID of the UDL Elset of the Space Object under observation.
  ///  Example: /// Example: REF-ELSET-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idElset => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Observation set detection start time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get startTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Observation set detection end time in ISO 8601 UTC with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get endTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  The number of observation records in the set.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get numObs => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 46, 0);
  ///  Observation type (OPTICAL, RADAR).
  ///  Example: /// Example: OPTICAL
  ///  Constraints: Minimum length = 1, Maximum length = 24
  SoiobservationSetIngestTypeEnum get type => SoiobservationSetIngestTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 48, 0));
  ///  Polar angle of the gimbal/mount at observation set detection start time in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get polarAngleStart => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Polar angle of the gimbal/mount at observation set detection end time in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get polarAngleEnd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  The reference frame of the observation measurements. If the referenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  SoiobservationSetIngestReferenceFrameEnum get referenceFrame => SoiobservationSetIngestReferenceFrameEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 54, 0));
  ///  The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  SoiobservationSetIngestSenReferenceFrameEnum get senReferenceFrame => SoiobservationSetIngestSenReferenceFrameEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 56, 0));
  ///  Line of sight declination at observation set detection start time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get losDeclinationStart => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Line of sight declination at observation set detection end time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get losDeclinationEnd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Pointing angle of the Azimuth gimbal/mount at observation set detection start time. Specified in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get pointingAngleAzStart => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Pointing angle of the Azimuth gimbal/mount at observation set detection end time. Specified in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get pointingAngleAzEnd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Pointing angle of the Elevation gimbal/mount at observation set detection start time. Specified in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get pointingAngleElStart => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Pointing angle of the Elevation gimbal/mount at observation set detection end time. Specified in degrees.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get pointingAngleElEnd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Pixel array size (width) in pixels.
  ///  Example: /// Example: 32
  ///  Constraints: No constraints specified.
  int get pixelArrayWidth => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 70, 0);
  ///  Pixel array size (height) in pixels.
  ///  Example: /// Example: 32
  ///  Constraints: No constraints specified.
  int get pixelArrayHeight => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 72, 0);
  ///  The value is the number of spectral filters used.
  ///  Example: /// Example: 10
  ///  Constraints: No constraints specified.
  int get numSpectralFilters => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 74, 0);
  ///  Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  ///  Example: /// Example: ['Keyword1', 'Keyword2']
  ///  Constraints: No constraints specified.
  List<String>? get spectralFilters => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 76);
  ///  Mode indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
  ///  Example: /// Example: RATE TRACK
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get collectionMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  The gain used during the collection, in units of photoelectrons per analog-to-digital unit (e-/ADU). If no gain is used, the value = 1.
  ///  Example: /// Example: 234.2
  ///  Constraints: No constraints specified.
  double get gain => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  The number of pixels binned horizontally.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get binningHoriz => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 82, 0);
  ///  The number of pixels binned vertically.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get binningVert => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 84, 0);
  ///  The in-band solar magnitude at 1 A.U.
  ///  Example: /// Example: -26.91
  ///  Constraints: No constraints specified.
  double get solarMag => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  The minimum valid pixel value.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  int get pixelMin => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 88, 0);
  ///  The maximum valid pixel value.
  ///  Example: /// Example: 16383
  ///  Constraints: No constraints specified.
  int get pixelMax => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 90, 0);
  ///  Software Version used to Capture, Process, and Deliver the data.
  ///  Example: /// Example: GSV99/17-1
  ///  Constraints: Minimum length = 0, Maximum length = 70
  String? get softwareVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  Name of the target satellite.
  ///  Example: /// Example: TITAN 3C TRANSTAGE R/B
  ///  Constraints: Minimum length = 0, Maximum length = 70
  String? get satelliteName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  Name of the Star Catalog used for photometry and astrometry.
  ///  Example: /// Example: SSTRC5
  ///  Constraints: Minimum length = 0, Maximum length = 70
  String? get starCatName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Object Correlation Quality value. Measures how close the observed object's orbit is to matching an object in the catalog. The scale of this field may vary depending on provider. Users should consult the data provider to verify the meaning of the value (e.g. A value of 0.0 indicates a high/strong correlation, while a value closer to 1.0 indicates low/weak correlation).
  ///  Example: /// Example: 0.327
  ///  Constraints: No constraints specified.
  double get corrQuality => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  Boolean indicating whether the target object was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get uct => const fb.BoolReader().vTableGet(_bc, _bcOffset, 100, false);
  ///  Key to indicate which, if any of, the pre/post photometer calibrations are valid for use when generating data for the EOSSA file. If the field is not populated, then the provided calibration data will be used when generating the EOSSA file (e.g. PRE, POST, BOTH, NONE).
  ///  Example: /// Example: BOTH
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get validCalibrations => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Type of calibration used by the Sensor (e.g. ALL SKY, DIFFERENTIAL, DEFAULT, NONE).
  ///  Example: /// Example: ALL SKY
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get calibrationType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  A threshold for percent of pixels that make up object signal that are beyond the saturation point for the sensor that are removed in the EOSSA file, in range of 0 to 1.
  ///  Example: /// Example: 0.1
  ///  Constraints: No constraints specified.
  double get percentSatThreshold => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 106, 0.0);
  ///  Boolean indicating if any change event was detected, based on historical collection data for the object.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get changeDetected => const fb.BoolReader().vTableGet(_bc, _bcOffset, 108, false);
  ///  Boolean indicating if a periodicity change event was detected, based on historical collection data for the object.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get periodicityChangeDetected => const fb.BoolReader().vTableGet(_bc, _bcOffset, 110, false);
  ///  Boolean indicating if a brightness variance change event was detected, based on historical collection data for the object.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get brightnessVarianceChangeDetected => const fb.BoolReader().vTableGet(_bc, _bcOffset, 112, false);
  ///  Boolean indicating if a solar phase angle brightness change event was detected, based on historical collection data for the object.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get solarPhaseAngleBrightnessChangeDetected => const fb.BoolReader().vTableGet(_bc, _bcOffset, 114, false);
  ///  Overall qualitative confidence assessment of change detection results (e.g. HIGH, MEDIUM, LOW).
  ///  Example: /// Example: MEDIUM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get changeConf => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 116);
  ///  Qualitative Collection Density assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
  ///  Example: /// Example: MEDIUM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get collectionDensityConf => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 118);
  ///  Qualitative Periodicity Sampling assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
  ///  Example: /// Example: MEDIUM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get periodicitySamplingConf => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 120);
  ///  Qualitative assessment of the periodicity detection results from the Attitude and Shape Retrieval (ASR) Periodicity Assessment (PA) Tool (e.g. HIGH, MEDIUM, LOW).
  ///  Example: /// Example: MEDIUM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get periodicityDetectionConf => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 122);
  ///  Universally Unique collection ID. Mechanism to correlate Single Point Photometry (SPP) JSON files to images.
  ///  Example: /// Example: b5133288-ab63-4b15-81f6-c7eec0cdb0c0
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get collectionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 124);
  ///  Array of SOI Calibrations associated with this SOIObservationSet.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get calibrations => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 126);
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 128);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: TRANSACTION-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 130);
  ///  OpticalSOIObservations associated with this SOIObservationSet.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get opticalSoiobservationList => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 132);
  ///  RadarSOIObservations associated with this RadarSOIObservationSet.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get radarSoiobservationList => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 134);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 136);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 138);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 140);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 142);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 144);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 146);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SoiobservationSetIngestDataModeEnum get dataMode => SoiobservationSetIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 148, 0));

  @override
  String toString() {
    return 'SoiobservationSetIngest{id: ${id}, classificationMarking: ${classificationMarking}, msgCreateDate: ${msgCreateDate}, idSensor: ${idSensor}, origSensorId: ${origSensorId}, sensorAsId: ${sensorAsId}, idOnOrbit: ${idOnOrbit}, satNo: ${satNo}, origObjectId: ${origObjectId}, senlat: ${senlat}, senlon: ${senlon}, senalt: ${senalt}, senx: ${senx}, seny: ${seny}, senz: ${senz}, senvelx: ${senvelx}, senvely: ${senvely}, senvelz: ${senvelz}, idElset: ${idElset}, startTime: ${startTime}, endTime: ${endTime}, numObs: ${numObs}, type: ${type}, polarAngleStart: ${polarAngleStart}, polarAngleEnd: ${polarAngleEnd}, referenceFrame: ${referenceFrame}, senReferenceFrame: ${senReferenceFrame}, losDeclinationStart: ${losDeclinationStart}, losDeclinationEnd: ${losDeclinationEnd}, pointingAngleAzStart: ${pointingAngleAzStart}, pointingAngleAzEnd: ${pointingAngleAzEnd}, pointingAngleElStart: ${pointingAngleElStart}, pointingAngleElEnd: ${pointingAngleElEnd}, pixelArrayWidth: ${pixelArrayWidth}, pixelArrayHeight: ${pixelArrayHeight}, numSpectralFilters: ${numSpectralFilters}, spectralFilters: ${spectralFilters}, collectionMode: ${collectionMode}, gain: ${gain}, binningHoriz: ${binningHoriz}, binningVert: ${binningVert}, solarMag: ${solarMag}, pixelMin: ${pixelMin}, pixelMax: ${pixelMax}, softwareVersion: ${softwareVersion}, satelliteName: ${satelliteName}, starCatName: ${starCatName}, corrQuality: ${corrQuality}, uct: ${uct}, validCalibrations: ${validCalibrations}, calibrationType: ${calibrationType}, percentSatThreshold: ${percentSatThreshold}, changeDetected: ${changeDetected}, periodicityChangeDetected: ${periodicityChangeDetected}, brightnessVarianceChangeDetected: ${brightnessVarianceChangeDetected}, solarPhaseAngleBrightnessChangeDetected: ${solarPhaseAngleBrightnessChangeDetected}, changeConf: ${changeConf}, collectionDensityConf: ${collectionDensityConf}, periodicitySamplingConf: ${periodicitySamplingConf}, periodicityDetectionConf: ${periodicityDetectionConf}, collectionId: ${collectionId}, calibrations: ${calibrations}, tags: ${tags}, transactionId: ${transactionId}, opticalSoiobservationList: ${opticalSoiobservationList}, radarSoiobservationList: ${radarSoiobservationList}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, sourceDl: ${sourceDl}, dataMode: ${dataMode}}';
  }
}

class _SoiobservationSetIngestReader extends fb.TableReader<SoiobservationSetIngest> {
  const _SoiobservationSetIngestReader();

  @override
  SoiobservationSetIngest createObject(fb.BufferContext bc, int offset) => 
    SoiobservationSetIngest._(bc, offset);
}

class SoiobservationSetIngestBuilder {
  SoiobservationSetIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(73);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMsgCreateDateOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addSensorAsIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(7, satNo);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addSenlat(double? senlat) {
    fbBuilder.addFloat64(9, senlat);
    return fbBuilder.offset;
  }
  int addSenlon(double? senlon) {
    fbBuilder.addFloat64(10, senlon);
    return fbBuilder.offset;
  }
  int addSenalt(double? senalt) {
    fbBuilder.addFloat64(11, senalt);
    return fbBuilder.offset;
  }
  int addSenx(double? senx) {
    fbBuilder.addFloat64(12, senx);
    return fbBuilder.offset;
  }
  int addSeny(double? seny) {
    fbBuilder.addFloat64(13, seny);
    return fbBuilder.offset;
  }
  int addSenz(double? senz) {
    fbBuilder.addFloat64(14, senz);
    return fbBuilder.offset;
  }
  int addSenvelx(double? senvelx) {
    fbBuilder.addFloat64(15, senvelx);
    return fbBuilder.offset;
  }
  int addSenvely(double? senvely) {
    fbBuilder.addFloat64(16, senvely);
    return fbBuilder.offset;
  }
  int addSenvelz(double? senvelz) {
    fbBuilder.addFloat64(17, senvelz);
    return fbBuilder.offset;
  }
  int addIdElsetOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addEndTimeOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addNumObs(int? numObs) {
    fbBuilder.addInt32(21, numObs);
    return fbBuilder.offset;
  }
  int addType(SoiobservationSetIngestTypeEnum? type) {
    fbBuilder.addInt8(22, type?.value);
    return fbBuilder.offset;
  }
  int addPolarAngleStart(double? polarAngleStart) {
    fbBuilder.addFloat64(23, polarAngleStart);
    return fbBuilder.offset;
  }
  int addPolarAngleEnd(double? polarAngleEnd) {
    fbBuilder.addFloat64(24, polarAngleEnd);
    return fbBuilder.offset;
  }
  int addReferenceFrame(SoiobservationSetIngestReferenceFrameEnum? referenceFrame) {
    fbBuilder.addInt8(25, referenceFrame?.value);
    return fbBuilder.offset;
  }
  int addSenReferenceFrame(SoiobservationSetIngestSenReferenceFrameEnum? senReferenceFrame) {
    fbBuilder.addInt8(26, senReferenceFrame?.value);
    return fbBuilder.offset;
  }
  int addLosDeclinationStart(double? losDeclinationStart) {
    fbBuilder.addFloat64(27, losDeclinationStart);
    return fbBuilder.offset;
  }
  int addLosDeclinationEnd(double? losDeclinationEnd) {
    fbBuilder.addFloat64(28, losDeclinationEnd);
    return fbBuilder.offset;
  }
  int addPointingAngleAzStart(double? pointingAngleAzStart) {
    fbBuilder.addFloat64(29, pointingAngleAzStart);
    return fbBuilder.offset;
  }
  int addPointingAngleAzEnd(double? pointingAngleAzEnd) {
    fbBuilder.addFloat64(30, pointingAngleAzEnd);
    return fbBuilder.offset;
  }
  int addPointingAngleElStart(double? pointingAngleElStart) {
    fbBuilder.addFloat64(31, pointingAngleElStart);
    return fbBuilder.offset;
  }
  int addPointingAngleElEnd(double? pointingAngleElEnd) {
    fbBuilder.addFloat64(32, pointingAngleElEnd);
    return fbBuilder.offset;
  }
  int addPixelArrayWidth(int? pixelArrayWidth) {
    fbBuilder.addInt32(33, pixelArrayWidth);
    return fbBuilder.offset;
  }
  int addPixelArrayHeight(int? pixelArrayHeight) {
    fbBuilder.addInt32(34, pixelArrayHeight);
    return fbBuilder.offset;
  }
  int addNumSpectralFilters(int? numSpectralFilters) {
    fbBuilder.addInt32(35, numSpectralFilters);
    return fbBuilder.offset;
  }
  int addSpectralFiltersOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addCollectionModeOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addGain(double? gain) {
    fbBuilder.addFloat64(38, gain);
    return fbBuilder.offset;
  }
  int addBinningHoriz(int? binningHoriz) {
    fbBuilder.addInt32(39, binningHoriz);
    return fbBuilder.offset;
  }
  int addBinningVert(int? binningVert) {
    fbBuilder.addInt32(40, binningVert);
    return fbBuilder.offset;
  }
  int addSolarMag(double? solarMag) {
    fbBuilder.addFloat64(41, solarMag);
    return fbBuilder.offset;
  }
  int addPixelMin(int? pixelMin) {
    fbBuilder.addInt32(42, pixelMin);
    return fbBuilder.offset;
  }
  int addPixelMax(int? pixelMax) {
    fbBuilder.addInt32(43, pixelMax);
    return fbBuilder.offset;
  }
  int addSoftwareVersionOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addSatelliteNameOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addStarCatNameOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addCorrQuality(double? corrQuality) {
    fbBuilder.addFloat64(47, corrQuality);
    return fbBuilder.offset;
  }
  int addUct(bool? uct) {
    fbBuilder.addBool(48, uct);
    return fbBuilder.offset;
  }
  int addValidCalibrationsOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addCalibrationTypeOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addPercentSatThreshold(double? percentSatThreshold) {
    fbBuilder.addFloat64(51, percentSatThreshold);
    return fbBuilder.offset;
  }
  int addChangeDetected(bool? changeDetected) {
    fbBuilder.addBool(52, changeDetected);
    return fbBuilder.offset;
  }
  int addPeriodicityChangeDetected(bool? periodicityChangeDetected) {
    fbBuilder.addBool(53, periodicityChangeDetected);
    return fbBuilder.offset;
  }
  int addBrightnessVarianceChangeDetected(bool? brightnessVarianceChangeDetected) {
    fbBuilder.addBool(54, brightnessVarianceChangeDetected);
    return fbBuilder.offset;
  }
  int addSolarPhaseAngleBrightnessChangeDetected(bool? solarPhaseAngleBrightnessChangeDetected) {
    fbBuilder.addBool(55, solarPhaseAngleBrightnessChangeDetected);
    return fbBuilder.offset;
  }
  int addChangeConfOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }
  int addCollectionDensityConfOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }
  int addPeriodicitySamplingConfOffset(int? offset) {
    fbBuilder.addOffset(58, offset);
    return fbBuilder.offset;
  }
  int addPeriodicityDetectionConfOffset(int? offset) {
    fbBuilder.addOffset(59, offset);
    return fbBuilder.offset;
  }
  int addCollectionIdOffset(int? offset) {
    fbBuilder.addOffset(60, offset);
    return fbBuilder.offset;
  }
  int addCalibrationsOffset(int? offset) {
    fbBuilder.addOffset(61, offset);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(62, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(63, offset);
    return fbBuilder.offset;
  }
  int addOpticalSoiobservationListOffset(int? offset) {
    fbBuilder.addOffset(64, offset);
    return fbBuilder.offset;
  }
  int addRadarSoiobservationListOffset(int? offset) {
    fbBuilder.addOffset(65, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(66, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(67, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(68, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(69, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(70, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(71, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SoiobservationSetIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(72, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SoiobservationSetIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _msgCreateDate;
  final String? _idSensor;
  final String? _origSensorId;
  final String? _sensorAsId;
  final String? _idOnOrbit;
  final int? _satNo;
  final String? _origObjectId;
  final double? _senlat;
  final double? _senlon;
  final double? _senalt;
  final double? _senx;
  final double? _seny;
  final double? _senz;
  final double? _senvelx;
  final double? _senvely;
  final double? _senvelz;
  final String? _idElset;
  final String? _startTime;
  final String? _endTime;
  final int? _numObs;
  final SoiobservationSetIngestTypeEnum? _type;
  final double? _polarAngleStart;
  final double? _polarAngleEnd;
  final SoiobservationSetIngestReferenceFrameEnum? _referenceFrame;
  final SoiobservationSetIngestSenReferenceFrameEnum? _senReferenceFrame;
  final double? _losDeclinationStart;
  final double? _losDeclinationEnd;
  final double? _pointingAngleAzStart;
  final double? _pointingAngleAzEnd;
  final double? _pointingAngleElStart;
  final double? _pointingAngleElEnd;
  final int? _pixelArrayWidth;
  final int? _pixelArrayHeight;
  final int? _numSpectralFilters;
  final List<String>? _spectralFilters;
  final String? _collectionMode;
  final double? _gain;
  final int? _binningHoriz;
  final int? _binningVert;
  final double? _solarMag;
  final int? _pixelMin;
  final int? _pixelMax;
  final String? _softwareVersion;
  final String? _satelliteName;
  final String? _starCatName;
  final double? _corrQuality;
  final bool? _uct;
  final String? _validCalibrations;
  final String? _calibrationType;
  final double? _percentSatThreshold;
  final bool? _changeDetected;
  final bool? _periodicityChangeDetected;
  final bool? _brightnessVarianceChangeDetected;
  final bool? _solarPhaseAngleBrightnessChangeDetected;
  final String? _changeConf;
  final String? _collectionDensityConf;
  final String? _periodicitySamplingConf;
  final String? _periodicityDetectionConf;
  final String? _collectionId;
  final List<String>? _calibrations;
  final List<String>? _tags;
  final String? _transactionId;
  final List<String>? _opticalSoiobservationList;
  final List<String>? _radarSoiobservationList;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final String? _sourceDl;
  final SoiobservationSetIngestDataModeEnum? _dataMode;

  SoiobservationSetIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? msgCreateDate,
    String? idSensor,
    String? origSensorId,
    String? sensorAsId,
    String? idOnOrbit,
    int? satNo,
    String? origObjectId,
    double? senlat,
    double? senlon,
    double? senalt,
    double? senx,
    double? seny,
    double? senz,
    double? senvelx,
    double? senvely,
    double? senvelz,
    String? idElset,
    String? startTime,
    String? endTime,
    int? numObs,
    SoiobservationSetIngestTypeEnum? type,
    double? polarAngleStart,
    double? polarAngleEnd,
    SoiobservationSetIngestReferenceFrameEnum? referenceFrame,
    SoiobservationSetIngestSenReferenceFrameEnum? senReferenceFrame,
    double? losDeclinationStart,
    double? losDeclinationEnd,
    double? pointingAngleAzStart,
    double? pointingAngleAzEnd,
    double? pointingAngleElStart,
    double? pointingAngleElEnd,
    int? pixelArrayWidth,
    int? pixelArrayHeight,
    int? numSpectralFilters,
    List<String>? spectralFilters,
    String? collectionMode,
    double? gain,
    int? binningHoriz,
    int? binningVert,
    double? solarMag,
    int? pixelMin,
    int? pixelMax,
    String? softwareVersion,
    String? satelliteName,
    String? starCatName,
    double? corrQuality,
    bool? uct,
    String? validCalibrations,
    String? calibrationType,
    double? percentSatThreshold,
    bool? changeDetected,
    bool? periodicityChangeDetected,
    bool? brightnessVarianceChangeDetected,
    bool? solarPhaseAngleBrightnessChangeDetected,
    String? changeConf,
    String? collectionDensityConf,
    String? periodicitySamplingConf,
    String? periodicityDetectionConf,
    String? collectionId,
    List<String>? calibrations,
    List<String>? tags,
    String? transactionId,
    List<String>? opticalSoiobservationList,
    List<String>? radarSoiobservationList,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    String? sourceDl,
    SoiobservationSetIngestDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _msgCreateDate = msgCreateDate,
        _idSensor = idSensor,
        _origSensorId = origSensorId,
        _sensorAsId = sensorAsId,
        _idOnOrbit = idOnOrbit,
        _satNo = satNo,
        _origObjectId = origObjectId,
        _senlat = senlat,
        _senlon = senlon,
        _senalt = senalt,
        _senx = senx,
        _seny = seny,
        _senz = senz,
        _senvelx = senvelx,
        _senvely = senvely,
        _senvelz = senvelz,
        _idElset = idElset,
        _startTime = startTime,
        _endTime = endTime,
        _numObs = numObs,
        _type = type,
        _polarAngleStart = polarAngleStart,
        _polarAngleEnd = polarAngleEnd,
        _referenceFrame = referenceFrame,
        _senReferenceFrame = senReferenceFrame,
        _losDeclinationStart = losDeclinationStart,
        _losDeclinationEnd = losDeclinationEnd,
        _pointingAngleAzStart = pointingAngleAzStart,
        _pointingAngleAzEnd = pointingAngleAzEnd,
        _pointingAngleElStart = pointingAngleElStart,
        _pointingAngleElEnd = pointingAngleElEnd,
        _pixelArrayWidth = pixelArrayWidth,
        _pixelArrayHeight = pixelArrayHeight,
        _numSpectralFilters = numSpectralFilters,
        _spectralFilters = spectralFilters,
        _collectionMode = collectionMode,
        _gain = gain,
        _binningHoriz = binningHoriz,
        _binningVert = binningVert,
        _solarMag = solarMag,
        _pixelMin = pixelMin,
        _pixelMax = pixelMax,
        _softwareVersion = softwareVersion,
        _satelliteName = satelliteName,
        _starCatName = starCatName,
        _corrQuality = corrQuality,
        _uct = uct,
        _validCalibrations = validCalibrations,
        _calibrationType = calibrationType,
        _percentSatThreshold = percentSatThreshold,
        _changeDetected = changeDetected,
        _periodicityChangeDetected = periodicityChangeDetected,
        _brightnessVarianceChangeDetected = brightnessVarianceChangeDetected,
        _solarPhaseAngleBrightnessChangeDetected = solarPhaseAngleBrightnessChangeDetected,
        _changeConf = changeConf,
        _collectionDensityConf = collectionDensityConf,
        _periodicitySamplingConf = periodicitySamplingConf,
        _periodicityDetectionConf = periodicityDetectionConf,
        _collectionId = collectionId,
        _calibrations = calibrations,
        _tags = tags,
        _transactionId = transactionId,
        _opticalSoiobservationList = opticalSoiobservationList,
        _radarSoiobservationList = radarSoiobservationList,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _sourceDl = sourceDl,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? msgCreateDateOffset = _msgCreateDate == null ? null
        : fbBuilder.writeString(_msgCreateDate!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? sensorAsIdOffset = _sensorAsId == null ? null
        : fbBuilder.writeString(_sensorAsId!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? idElsetOffset = _idElset == null ? null
        : fbBuilder.writeString(_idElset!);
    final int? startTimeOffset = _startTime == null ? null
        : fbBuilder.writeString(_startTime!);
    final int? endTimeOffset = _endTime == null ? null
        : fbBuilder.writeString(_endTime!);
    final int? spectralFiltersOffset = _spectralFilters == null ? null
        : fbBuilder.writeList(_spectralFilters!.map(fbBuilder.writeString).toList());
    final int? collectionModeOffset = _collectionMode == null ? null
        : fbBuilder.writeString(_collectionMode!);
    final int? softwareVersionOffset = _softwareVersion == null ? null
        : fbBuilder.writeString(_softwareVersion!);
    final int? satelliteNameOffset = _satelliteName == null ? null
        : fbBuilder.writeString(_satelliteName!);
    final int? starCatNameOffset = _starCatName == null ? null
        : fbBuilder.writeString(_starCatName!);
    final int? validCalibrationsOffset = _validCalibrations == null ? null
        : fbBuilder.writeString(_validCalibrations!);
    final int? calibrationTypeOffset = _calibrationType == null ? null
        : fbBuilder.writeString(_calibrationType!);
    final int? changeConfOffset = _changeConf == null ? null
        : fbBuilder.writeString(_changeConf!);
    final int? collectionDensityConfOffset = _collectionDensityConf == null ? null
        : fbBuilder.writeString(_collectionDensityConf!);
    final int? periodicitySamplingConfOffset = _periodicitySamplingConf == null ? null
        : fbBuilder.writeString(_periodicitySamplingConf!);
    final int? periodicityDetectionConfOffset = _periodicityDetectionConf == null ? null
        : fbBuilder.writeString(_periodicityDetectionConf!);
    final int? collectionIdOffset = _collectionId == null ? null
        : fbBuilder.writeString(_collectionId!);
    final int? calibrationsOffset = _calibrations == null ? null
        : fbBuilder.writeList(_calibrations!.map(fbBuilder.writeString).toList());
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? opticalSoiobservationListOffset = _opticalSoiobservationList == null ? null
        : fbBuilder.writeList(_opticalSoiobservationList!.map(fbBuilder.writeString).toList());
    final int? radarSoiobservationListOffset = _radarSoiobservationList == null ? null
        : fbBuilder.writeList(_radarSoiobservationList!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    fbBuilder.startTable(73);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, msgCreateDateOffset);
    fbBuilder.addOffset(3, idSensorOffset);
    fbBuilder.addOffset(4, origSensorIdOffset);
    fbBuilder.addOffset(5, sensorAsIdOffset);
    fbBuilder.addOffset(6, idOnOrbitOffset);
    fbBuilder.addInt32(7, _satNo);
    fbBuilder.addOffset(8, origObjectIdOffset);
    fbBuilder.addFloat64(9, _senlat);
    fbBuilder.addFloat64(10, _senlon);
    fbBuilder.addFloat64(11, _senalt);
    fbBuilder.addFloat64(12, _senx);
    fbBuilder.addFloat64(13, _seny);
    fbBuilder.addFloat64(14, _senz);
    fbBuilder.addFloat64(15, _senvelx);
    fbBuilder.addFloat64(16, _senvely);
    fbBuilder.addFloat64(17, _senvelz);
    fbBuilder.addOffset(18, idElsetOffset);
    fbBuilder.addOffset(19, startTimeOffset);
    fbBuilder.addOffset(20, endTimeOffset);
    fbBuilder.addInt32(21, _numObs);
    fbBuilder.addInt8(22, _type?.value);
    fbBuilder.addFloat64(23, _polarAngleStart);
    fbBuilder.addFloat64(24, _polarAngleEnd);
    fbBuilder.addInt8(25, _referenceFrame?.value);
    fbBuilder.addInt8(26, _senReferenceFrame?.value);
    fbBuilder.addFloat64(27, _losDeclinationStart);
    fbBuilder.addFloat64(28, _losDeclinationEnd);
    fbBuilder.addFloat64(29, _pointingAngleAzStart);
    fbBuilder.addFloat64(30, _pointingAngleAzEnd);
    fbBuilder.addFloat64(31, _pointingAngleElStart);
    fbBuilder.addFloat64(32, _pointingAngleElEnd);
    fbBuilder.addInt32(33, _pixelArrayWidth);
    fbBuilder.addInt32(34, _pixelArrayHeight);
    fbBuilder.addInt32(35, _numSpectralFilters);
    fbBuilder.addOffset(36, spectralFiltersOffset);
    fbBuilder.addOffset(37, collectionModeOffset);
    fbBuilder.addFloat64(38, _gain);
    fbBuilder.addInt32(39, _binningHoriz);
    fbBuilder.addInt32(40, _binningVert);
    fbBuilder.addFloat64(41, _solarMag);
    fbBuilder.addInt32(42, _pixelMin);
    fbBuilder.addInt32(43, _pixelMax);
    fbBuilder.addOffset(44, softwareVersionOffset);
    fbBuilder.addOffset(45, satelliteNameOffset);
    fbBuilder.addOffset(46, starCatNameOffset);
    fbBuilder.addFloat64(47, _corrQuality);
    fbBuilder.addBool(48, _uct);
    fbBuilder.addOffset(49, validCalibrationsOffset);
    fbBuilder.addOffset(50, calibrationTypeOffset);
    fbBuilder.addFloat64(51, _percentSatThreshold);
    fbBuilder.addBool(52, _changeDetected);
    fbBuilder.addBool(53, _periodicityChangeDetected);
    fbBuilder.addBool(54, _brightnessVarianceChangeDetected);
    fbBuilder.addBool(55, _solarPhaseAngleBrightnessChangeDetected);
    fbBuilder.addOffset(56, changeConfOffset);
    fbBuilder.addOffset(57, collectionDensityConfOffset);
    fbBuilder.addOffset(58, periodicitySamplingConfOffset);
    fbBuilder.addOffset(59, periodicityDetectionConfOffset);
    fbBuilder.addOffset(60, collectionIdOffset);
    fbBuilder.addOffset(61, calibrationsOffset);
    fbBuilder.addOffset(62, tagsOffset);
    fbBuilder.addOffset(63, transactionIdOffset);
    fbBuilder.addOffset(64, opticalSoiobservationListOffset);
    fbBuilder.addOffset(65, radarSoiobservationListOffset);
    fbBuilder.addOffset(66, createdAtOffset);
    fbBuilder.addOffset(67, createdByOffset);
    fbBuilder.addOffset(68, sourceOffset);
    fbBuilder.addOffset(69, originOffset);
    fbBuilder.addOffset(70, origNetworkOffset);
    fbBuilder.addOffset(71, sourceDlOffset);
    fbBuilder.addInt8(72, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
