// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// HRR Scatterer record for a target pixel that exceeds the target detection threshold.
class MtiHrrscattererFull {
  MtiHrrscattererFull._(this._bc, this._bcOffset);
  factory MtiHrrscattererFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MtiHrrscattererFull> reader = _MtiHrrscattererFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Scatterer’s power magnitude.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get h321 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  ///  Scatterer’s complex phase, in degrees.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get h322 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  ///  Scatterer’s Range index relative to Range-Doppler chip, where increasing index equates to increasing range.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get h323 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  ///  Scatterer’s Doppler index relative to Range-Doppler chip, where increasing index equates to increasing Doppler.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get h324 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  @override
  String toString() {
    return 'MtiHrrscattererFull{h321: ${h321}, h322: ${h322}, h323: ${h323}, h324: ${h324}}';
  }
}

class _MtiHrrscattererFullReader extends fb.TableReader<MtiHrrscattererFull> {
  const _MtiHrrscattererFullReader();

  @override
  MtiHrrscattererFull createObject(fb.BufferContext bc, int offset) => 
    MtiHrrscattererFull._(bc, offset);
}

class MtiHrrscattererFullBuilder {
  MtiHrrscattererFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addH321(int? h321) {
    fbBuilder.addInt32(0, h321);
    return fbBuilder.offset;
  }
  int addH322(int? h322) {
    fbBuilder.addInt32(1, h322);
    return fbBuilder.offset;
  }
  int addH323(int? h323) {
    fbBuilder.addInt32(2, h323);
    return fbBuilder.offset;
  }
  int addH324(int? h324) {
    fbBuilder.addInt32(3, h324);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MtiHrrscattererFullObjectBuilder extends fb.ObjectBuilder {
  final int? _h321;
  final int? _h322;
  final int? _h323;
  final int? _h324;

  MtiHrrscattererFullObjectBuilder({
    int? h321,
    int? h322,
    int? h323,
    int? h324,
  })
      : _h321 = h321,
        _h322 = h322,
        _h323 = h323,
        _h324 = h324;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(4);
    fbBuilder.addInt32(0, _h321);
    fbBuilder.addInt32(1, _h322);
    fbBuilder.addInt32(2, _h323);
    fbBuilder.addInt32(3, _h324);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
