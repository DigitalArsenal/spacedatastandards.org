// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class SeradataCommDetailsAbridgedDataModeEnum {
  final int value;
  const SeradataCommDetailsAbridgedDataModeEnum._(this.value);

  factory SeradataCommDetailsAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SeradataCommDetailsAbridgedDataModeEnum');
    }
    return result;
  }

  static SeradataCommDetailsAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : SeradataCommDetailsAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const SeradataCommDetailsAbridgedDataModeEnum REAL = SeradataCommDetailsAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const SeradataCommDetailsAbridgedDataModeEnum TEST = SeradataCommDetailsAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const SeradataCommDetailsAbridgedDataModeEnum SIMULATED = SeradataCommDetailsAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const SeradataCommDetailsAbridgedDataModeEnum EXERCISE = SeradataCommDetailsAbridgedDataModeEnum._(3);
  static const Map<int, SeradataCommDetailsAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<SeradataCommDetailsAbridgedDataModeEnum> reader = _SeradataCommDetailsAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'SeradataCommDetailsAbridgedDataModeEnum{value: $value}';
  }
}

class _SeradataCommDetailsAbridgedDataModeEnumReader extends fb.Reader<SeradataCommDetailsAbridgedDataModeEnum> {
  const _SeradataCommDetailsAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  SeradataCommDetailsAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      SeradataCommDetailsAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Seradata-compiled information on communications payloads.
class SeradataCommDetailsAbridged {
  SeradataCommDetailsAbridged._(this._bc, this._bcOffset);
  factory SeradataCommDetailsAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SeradataCommDetailsAbridged> reader = _SeradataCommDetailsAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: SERADATACOMMDETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  UUID of the parent Comm record.
  ///  Example: /// Example: idComm
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idComm => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  ///  Example: /// Example: spacecraftId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get spacecraftId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
  ///  Example: /// Example: X
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get band => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Solid state power amplifier, in Watts.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get solidStatePowerAmp => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Comm travelingWaveTubeAmplifier in Watts.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get travelingWaveTubeAmplifier => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Comm gatewayUplinkFrom in Ghz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get gatewayUplinkFrom => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Comm gatewayUplinkTo in Ghz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get gatewayUplinkTo => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Comm gatewayDownlinkFrom in Ghz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get gatewayDownlinkFrom => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Comm gatewayDownlinkTo in Ghz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get gatewayDownlinkTo => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Comm polarization.
  ///  Example: /// Example: polarization
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get polarization => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Effective isotropic radiated power in dB.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get eirp => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Comm bandwidth in Mhz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get bandwidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Comm numOperationalTransponders.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get numOperationalTransponders => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  Comm numSpareTransponders.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get numSpareTransponders => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  Comm hostedForCompanyOrgId.
  ///  Example: /// Example: hostedForCompanyOrgId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get hostedForCompanyOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Comm manufacturerOrgId.
  ///  Example: /// Example: manufacturerOrgId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get manufacturerOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Comm tradeLeaseOrgId.
  ///  Example: /// Example: tradeLeaseOrgId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get tradeLeaseOrgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Comm num36MhzEquivalentTransponders.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get num36MhzEquivalentTransponders => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 42, 0);
  ///  Comm htsNumUserSpotBeams.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get htsNumUserSpotBeams => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 44, 0);
  ///  Comm htsUserDownlinkBandwidthPerBeam in Mhz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get htsUserDownlinkBandwidthPerBeam => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Comm htsUserUplinkBandwidthPerBeam in Mhz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get htsUserUplinkBandwidthPerBeam => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Comm estimated HtsTotalUserDownlinkBandwidthPerBeam in Mhz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get estHtsTotalUserDownlinkBandwidthPerBeam => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Comm estimated HtsTotalUserUplinkBandwidthPerBeam in Mhz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get estHtsTotalUserUplinkBandwidthPerBeam => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Comm estimated HtsTotalCapacity in Gbps.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get estHtsTotalCapacity => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Comm userDownlinkFrom in Ghz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get userDownlinkFrom => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Comm userDownlinkTo in Ghz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get userDownlinkTo => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Comm userUplinkFrom in Ghz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get userUplinkFrom => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Comm userUplinkTo in Ghz.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get userUplinkTo => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Payload notes.
  ///  Example: /// Example: Sample Notes
  ///  Constraints: Minimum length = 0, Maximum length = 2147483647
  String? get payloadNotes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  SeradataCommDetailsAbridgedDataModeEnum get dataMode => SeradataCommDetailsAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 72, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);

  @override
  String toString() {
    return 'SeradataCommDetailsAbridged{id: ${id}, idComm: ${idComm}, classificationMarking: ${classificationMarking}, spacecraftId: ${spacecraftId}, band: ${band}, solidStatePowerAmp: ${solidStatePowerAmp}, travelingWaveTubeAmplifier: ${travelingWaveTubeAmplifier}, gatewayUplinkFrom: ${gatewayUplinkFrom}, gatewayUplinkTo: ${gatewayUplinkTo}, gatewayDownlinkFrom: ${gatewayDownlinkFrom}, gatewayDownlinkTo: ${gatewayDownlinkTo}, polarization: ${polarization}, eirp: ${eirp}, bandwidth: ${bandwidth}, numOperationalTransponders: ${numOperationalTransponders}, numSpareTransponders: ${numSpareTransponders}, hostedForCompanyOrgId: ${hostedForCompanyOrgId}, manufacturerOrgId: ${manufacturerOrgId}, tradeLeaseOrgId: ${tradeLeaseOrgId}, num36MhzEquivalentTransponders: ${num36MhzEquivalentTransponders}, htsNumUserSpotBeams: ${htsNumUserSpotBeams}, htsUserDownlinkBandwidthPerBeam: ${htsUserDownlinkBandwidthPerBeam}, htsUserUplinkBandwidthPerBeam: ${htsUserUplinkBandwidthPerBeam}, estHtsTotalUserDownlinkBandwidthPerBeam: ${estHtsTotalUserDownlinkBandwidthPerBeam}, estHtsTotalUserUplinkBandwidthPerBeam: ${estHtsTotalUserUplinkBandwidthPerBeam}, estHtsTotalCapacity: ${estHtsTotalCapacity}, userDownlinkFrom: ${userDownlinkFrom}, userDownlinkTo: ${userDownlinkTo}, userUplinkFrom: ${userUplinkFrom}, userUplinkTo: ${userUplinkTo}, payloadNotes: ${payloadNotes}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}}';
  }
}

class _SeradataCommDetailsAbridgedReader extends fb.TableReader<SeradataCommDetailsAbridged> {
  const _SeradataCommDetailsAbridgedReader();

  @override
  SeradataCommDetailsAbridged createObject(fb.BufferContext bc, int offset) => 
    SeradataCommDetailsAbridged._(bc, offset);
}

class SeradataCommDetailsAbridgedBuilder {
  SeradataCommDetailsAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(37);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdCommOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSpacecraftIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addBandOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addSolidStatePowerAmp(double? solidStatePowerAmp) {
    fbBuilder.addFloat64(5, solidStatePowerAmp);
    return fbBuilder.offset;
  }
  int addTravelingWaveTubeAmplifier(double? travelingWaveTubeAmplifier) {
    fbBuilder.addFloat64(6, travelingWaveTubeAmplifier);
    return fbBuilder.offset;
  }
  int addGatewayUplinkFrom(double? gatewayUplinkFrom) {
    fbBuilder.addFloat64(7, gatewayUplinkFrom);
    return fbBuilder.offset;
  }
  int addGatewayUplinkTo(double? gatewayUplinkTo) {
    fbBuilder.addFloat64(8, gatewayUplinkTo);
    return fbBuilder.offset;
  }
  int addGatewayDownlinkFrom(double? gatewayDownlinkFrom) {
    fbBuilder.addFloat64(9, gatewayDownlinkFrom);
    return fbBuilder.offset;
  }
  int addGatewayDownlinkTo(double? gatewayDownlinkTo) {
    fbBuilder.addFloat64(10, gatewayDownlinkTo);
    return fbBuilder.offset;
  }
  int addPolarizationOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addEirp(double? eirp) {
    fbBuilder.addFloat64(12, eirp);
    return fbBuilder.offset;
  }
  int addBandwidth(double? bandwidth) {
    fbBuilder.addFloat64(13, bandwidth);
    return fbBuilder.offset;
  }
  int addNumOperationalTransponders(int? numOperationalTransponders) {
    fbBuilder.addInt32(14, numOperationalTransponders);
    return fbBuilder.offset;
  }
  int addNumSpareTransponders(int? numSpareTransponders) {
    fbBuilder.addInt32(15, numSpareTransponders);
    return fbBuilder.offset;
  }
  int addHostedForCompanyOrgIdOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addManufacturerOrgIdOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addTradeLeaseOrgIdOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addNum36MhzEquivalentTransponders(int? num36MhzEquivalentTransponders) {
    fbBuilder.addInt32(19, num36MhzEquivalentTransponders);
    return fbBuilder.offset;
  }
  int addHtsNumUserSpotBeams(int? htsNumUserSpotBeams) {
    fbBuilder.addInt32(20, htsNumUserSpotBeams);
    return fbBuilder.offset;
  }
  int addHtsUserDownlinkBandwidthPerBeam(double? htsUserDownlinkBandwidthPerBeam) {
    fbBuilder.addFloat64(21, htsUserDownlinkBandwidthPerBeam);
    return fbBuilder.offset;
  }
  int addHtsUserUplinkBandwidthPerBeam(double? htsUserUplinkBandwidthPerBeam) {
    fbBuilder.addFloat64(22, htsUserUplinkBandwidthPerBeam);
    return fbBuilder.offset;
  }
  int addEstHtsTotalUserDownlinkBandwidthPerBeam(double? estHtsTotalUserDownlinkBandwidthPerBeam) {
    fbBuilder.addFloat64(23, estHtsTotalUserDownlinkBandwidthPerBeam);
    return fbBuilder.offset;
  }
  int addEstHtsTotalUserUplinkBandwidthPerBeam(double? estHtsTotalUserUplinkBandwidthPerBeam) {
    fbBuilder.addFloat64(24, estHtsTotalUserUplinkBandwidthPerBeam);
    return fbBuilder.offset;
  }
  int addEstHtsTotalCapacity(double? estHtsTotalCapacity) {
    fbBuilder.addFloat64(25, estHtsTotalCapacity);
    return fbBuilder.offset;
  }
  int addUserDownlinkFrom(double? userDownlinkFrom) {
    fbBuilder.addFloat64(26, userDownlinkFrom);
    return fbBuilder.offset;
  }
  int addUserDownlinkTo(double? userDownlinkTo) {
    fbBuilder.addFloat64(27, userDownlinkTo);
    return fbBuilder.offset;
  }
  int addUserUplinkFrom(double? userUplinkFrom) {
    fbBuilder.addFloat64(28, userUplinkFrom);
    return fbBuilder.offset;
  }
  int addUserUplinkTo(double? userUplinkTo) {
    fbBuilder.addFloat64(29, userUplinkTo);
    return fbBuilder.offset;
  }
  int addPayloadNotesOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addDataMode(SeradataCommDetailsAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(34, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SeradataCommDetailsAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idComm;
  final String? _classificationMarking;
  final String? _spacecraftId;
  final String? _band;
  final double? _solidStatePowerAmp;
  final double? _travelingWaveTubeAmplifier;
  final double? _gatewayUplinkFrom;
  final double? _gatewayUplinkTo;
  final double? _gatewayDownlinkFrom;
  final double? _gatewayDownlinkTo;
  final String? _polarization;
  final double? _eirp;
  final double? _bandwidth;
  final int? _numOperationalTransponders;
  final int? _numSpareTransponders;
  final String? _hostedForCompanyOrgId;
  final String? _manufacturerOrgId;
  final String? _tradeLeaseOrgId;
  final int? _num36MhzEquivalentTransponders;
  final int? _htsNumUserSpotBeams;
  final double? _htsUserDownlinkBandwidthPerBeam;
  final double? _htsUserUplinkBandwidthPerBeam;
  final double? _estHtsTotalUserDownlinkBandwidthPerBeam;
  final double? _estHtsTotalUserUplinkBandwidthPerBeam;
  final double? _estHtsTotalCapacity;
  final double? _userDownlinkFrom;
  final double? _userDownlinkTo;
  final double? _userUplinkFrom;
  final double? _userUplinkTo;
  final String? _payloadNotes;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final SeradataCommDetailsAbridgedDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;

  SeradataCommDetailsAbridgedObjectBuilder({
    String? id,
    String? idComm,
    String? classificationMarking,
    String? spacecraftId,
    String? band,
    double? solidStatePowerAmp,
    double? travelingWaveTubeAmplifier,
    double? gatewayUplinkFrom,
    double? gatewayUplinkTo,
    double? gatewayDownlinkFrom,
    double? gatewayDownlinkTo,
    String? polarization,
    double? eirp,
    double? bandwidth,
    int? numOperationalTransponders,
    int? numSpareTransponders,
    String? hostedForCompanyOrgId,
    String? manufacturerOrgId,
    String? tradeLeaseOrgId,
    int? num36MhzEquivalentTransponders,
    int? htsNumUserSpotBeams,
    double? htsUserDownlinkBandwidthPerBeam,
    double? htsUserUplinkBandwidthPerBeam,
    double? estHtsTotalUserDownlinkBandwidthPerBeam,
    double? estHtsTotalUserUplinkBandwidthPerBeam,
    double? estHtsTotalCapacity,
    double? userDownlinkFrom,
    double? userDownlinkTo,
    double? userUplinkFrom,
    double? userUplinkTo,
    String? payloadNotes,
    String? source,
    String? origin,
    String? origNetwork,
    SeradataCommDetailsAbridgedDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
  })
      : _id = id,
        _idComm = idComm,
        _classificationMarking = classificationMarking,
        _spacecraftId = spacecraftId,
        _band = band,
        _solidStatePowerAmp = solidStatePowerAmp,
        _travelingWaveTubeAmplifier = travelingWaveTubeAmplifier,
        _gatewayUplinkFrom = gatewayUplinkFrom,
        _gatewayUplinkTo = gatewayUplinkTo,
        _gatewayDownlinkFrom = gatewayDownlinkFrom,
        _gatewayDownlinkTo = gatewayDownlinkTo,
        _polarization = polarization,
        _eirp = eirp,
        _bandwidth = bandwidth,
        _numOperationalTransponders = numOperationalTransponders,
        _numSpareTransponders = numSpareTransponders,
        _hostedForCompanyOrgId = hostedForCompanyOrgId,
        _manufacturerOrgId = manufacturerOrgId,
        _tradeLeaseOrgId = tradeLeaseOrgId,
        _num36MhzEquivalentTransponders = num36MhzEquivalentTransponders,
        _htsNumUserSpotBeams = htsNumUserSpotBeams,
        _htsUserDownlinkBandwidthPerBeam = htsUserDownlinkBandwidthPerBeam,
        _htsUserUplinkBandwidthPerBeam = htsUserUplinkBandwidthPerBeam,
        _estHtsTotalUserDownlinkBandwidthPerBeam = estHtsTotalUserDownlinkBandwidthPerBeam,
        _estHtsTotalUserUplinkBandwidthPerBeam = estHtsTotalUserUplinkBandwidthPerBeam,
        _estHtsTotalCapacity = estHtsTotalCapacity,
        _userDownlinkFrom = userDownlinkFrom,
        _userDownlinkTo = userDownlinkTo,
        _userUplinkFrom = userUplinkFrom,
        _userUplinkTo = userUplinkTo,
        _payloadNotes = payloadNotes,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idCommOffset = _idComm == null ? null
        : fbBuilder.writeString(_idComm!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? spacecraftIdOffset = _spacecraftId == null ? null
        : fbBuilder.writeString(_spacecraftId!);
    final int? bandOffset = _band == null ? null
        : fbBuilder.writeString(_band!);
    final int? polarizationOffset = _polarization == null ? null
        : fbBuilder.writeString(_polarization!);
    final int? hostedForCompanyOrgIdOffset = _hostedForCompanyOrgId == null ? null
        : fbBuilder.writeString(_hostedForCompanyOrgId!);
    final int? manufacturerOrgIdOffset = _manufacturerOrgId == null ? null
        : fbBuilder.writeString(_manufacturerOrgId!);
    final int? tradeLeaseOrgIdOffset = _tradeLeaseOrgId == null ? null
        : fbBuilder.writeString(_tradeLeaseOrgId!);
    final int? payloadNotesOffset = _payloadNotes == null ? null
        : fbBuilder.writeString(_payloadNotes!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    fbBuilder.startTable(37);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idCommOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addOffset(3, spacecraftIdOffset);
    fbBuilder.addOffset(4, bandOffset);
    fbBuilder.addFloat64(5, _solidStatePowerAmp);
    fbBuilder.addFloat64(6, _travelingWaveTubeAmplifier);
    fbBuilder.addFloat64(7, _gatewayUplinkFrom);
    fbBuilder.addFloat64(8, _gatewayUplinkTo);
    fbBuilder.addFloat64(9, _gatewayDownlinkFrom);
    fbBuilder.addFloat64(10, _gatewayDownlinkTo);
    fbBuilder.addOffset(11, polarizationOffset);
    fbBuilder.addFloat64(12, _eirp);
    fbBuilder.addFloat64(13, _bandwidth);
    fbBuilder.addInt32(14, _numOperationalTransponders);
    fbBuilder.addInt32(15, _numSpareTransponders);
    fbBuilder.addOffset(16, hostedForCompanyOrgIdOffset);
    fbBuilder.addOffset(17, manufacturerOrgIdOffset);
    fbBuilder.addOffset(18, tradeLeaseOrgIdOffset);
    fbBuilder.addInt32(19, _num36MhzEquivalentTransponders);
    fbBuilder.addInt32(20, _htsNumUserSpotBeams);
    fbBuilder.addFloat64(21, _htsUserDownlinkBandwidthPerBeam);
    fbBuilder.addFloat64(22, _htsUserUplinkBandwidthPerBeam);
    fbBuilder.addFloat64(23, _estHtsTotalUserDownlinkBandwidthPerBeam);
    fbBuilder.addFloat64(24, _estHtsTotalUserUplinkBandwidthPerBeam);
    fbBuilder.addFloat64(25, _estHtsTotalCapacity);
    fbBuilder.addFloat64(26, _userDownlinkFrom);
    fbBuilder.addFloat64(27, _userDownlinkTo);
    fbBuilder.addFloat64(28, _userUplinkFrom);
    fbBuilder.addFloat64(29, _userUplinkTo);
    fbBuilder.addOffset(30, payloadNotesOffset);
    fbBuilder.addOffset(31, sourceOffset);
    fbBuilder.addOffset(32, originOffset);
    fbBuilder.addOffset(33, origNetworkOffset);
    fbBuilder.addInt8(34, _dataMode?.value);
    fbBuilder.addOffset(35, createdAtOffset);
    fbBuilder.addOffset(36, createdByOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
