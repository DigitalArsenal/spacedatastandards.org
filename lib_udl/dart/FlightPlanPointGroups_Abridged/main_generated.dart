// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
class FlightPlanPointGroupsAbridged {
  FlightPlanPointGroupsAbridged._(this._bc, this._bcOffset);
  factory FlightPlanPointGroupsAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FlightPlanPointGroupsAbridged> reader = _FlightPlanPointGroupsAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Name of the point group, usually Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP) sections.
  ///  Example: /// Example: ETOPS_CF_POINT_1
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get pointGroupName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Specifies which Point Group case requires the most fuel.
  ///  Example: /// Example: DEPRESSURIZED ENGINE OUT ETP
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get worstFuelCase => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Name of the last suitable airfield, International Civil Aviation Organization (ICAO) code preferred.
  ///  Example: /// Example: LPPD
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get lsafName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Distance from the Equal Time Point (ETP) to the last suitable airfield in nautical miles.
  ///  Example: /// Example: 684.1
  ///  Constraints: No constraints specified.
  double get lsafDistance => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Distance from the Equal Time Point (ETP) to the first suitable airfield in nautical miles.
  ///  Example: /// Example: 684.1
  ///  Constraints: No constraints specified.
  double get fsafDistance => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Distance from the Extended Operations (ETOPS) point to the recovery airfield in nautical miles.
  ///  Example: /// Example: 684.1
  ///  Constraints: No constraints specified.
  double get etopsDistance => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Time to fly from the Equal Time Point (ETP) to the last suitable airfield expressed in HH:MM format.
  ///  Example: /// Example: 01:23
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get lsafTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Time to fly from the Equal Time Point (ETP) to the first suitable airfield expressed in HH:MM format.
  ///  Example: /// Example: 01:23
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get fsafTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Time to fly from the Extended Operations (ETOPS) point to the recovery airfield expressed in HH:MM format.
  ///  Example: /// Example: 01:23
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get etopsTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Average wind factor from the Equal Time Point (ETP) to the last suitable airfield in knots.
  ///  Example: /// Example: 13.1
  ///  Constraints: No constraints specified.
  double get lsafAvgWindFactor => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Average wind factor from the Equal Time Point (ETP) to the first suitable airfield in knots.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get fsafAvgWindFactor => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Average wind factor from the Extended Operations (ETOPS) point to the recovery airfield in knots.
  ///  Example: /// Example: 10.1
  ///  Constraints: No constraints specified.
  double get etopsAvgWindFactor => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Temperature deviation from the Equal Time Point (ETP) to the last suitable airfield in degrees Celsius.
  ///  Example: /// Example: 9.1
  ///  Constraints: No constraints specified.
  double get lsafTempDev => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Temperature deviation from the Equal Time Point (ETP) to the first suitable airfield in degrees Celsius.
  ///  Example: /// Example: 9.1
  ///  Constraints: No constraints specified.
  double get fsafTempDev => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Temperature deviation from the Extended Operations (ETOPS) point to the recovery airfield in degrees Celsius.
  ///  Example: /// Example: 9.1
  ///  Constraints: No constraints specified.
  double get etopsTempDev => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Fuel required to fly from the Equal Time Point (ETP) to the last suitable airfield in pounds.
  ///  Example: /// Example: 50787.1
  ///  Constraints: No constraints specified.
  double get lsafReqFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Fuel required to fly from the Equal Time Point (ETP) to the first suitable airfield in pounds.
  ///  Example: /// Example: 50380.1
  ///  Constraints: No constraints specified.
  double get fsafReqFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Fuel required to fly from the Extended Operations (ETOPS) point to the recovery airfield in pounds.
  ///  Example: /// Example: 4412.1
  ///  Constraints: No constraints specified.
  double get etopsReqFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Total time from takeoff when the point is reached expressed in HH:MM format.
  ///  Example: /// Example: 07:29
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get fromTakeoffTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Amount of planned fuel on board when the point is reached in pounds.
  ///  Example: /// Example: 190319.1
  ///  Constraints: No constraints specified.
  double get plannedFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Flight level of the point at which the fuel was calculated in feet.
  ///  Example: /// Example: 100.1
  ///  Constraints: No constraints specified.
  double get fuelCalcAlt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  True airspeed at which the fuel was calculated in knots.
  ///  Example: /// Example: 365.1
  ///  Constraints: No constraints specified.
  double get fuelCalcSpd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Average fuel flow at which the fuel was calculated in pounds per hour.
  ///  Example: /// Example: 19693.1
  ///  Constraints: No constraints specified.
  double get avgFuelFlow => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Array of point data for this Point Group.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get flightPlanPoints => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 50);

  @override
  String toString() {
    return 'FlightPlanPointGroupsAbridged{pointGroupName: ${pointGroupName}, worstFuelCase: ${worstFuelCase}, lsafName: ${lsafName}, lsafDistance: ${lsafDistance}, fsafDistance: ${fsafDistance}, etopsDistance: ${etopsDistance}, lsafTime: ${lsafTime}, fsafTime: ${fsafTime}, etopsTime: ${etopsTime}, lsafAvgWindFactor: ${lsafAvgWindFactor}, fsafAvgWindFactor: ${fsafAvgWindFactor}, etopsAvgWindFactor: ${etopsAvgWindFactor}, lsafTempDev: ${lsafTempDev}, fsafTempDev: ${fsafTempDev}, etopsTempDev: ${etopsTempDev}, lsafReqFuel: ${lsafReqFuel}, fsafReqFuel: ${fsafReqFuel}, etopsReqFuel: ${etopsReqFuel}, fromTakeoffTime: ${fromTakeoffTime}, plannedFuel: ${plannedFuel}, fuelCalcAlt: ${fuelCalcAlt}, fuelCalcSpd: ${fuelCalcSpd}, avgFuelFlow: ${avgFuelFlow}, flightPlanPoints: ${flightPlanPoints}}';
  }
}

class _FlightPlanPointGroupsAbridgedReader extends fb.TableReader<FlightPlanPointGroupsAbridged> {
  const _FlightPlanPointGroupsAbridgedReader();

  @override
  FlightPlanPointGroupsAbridged createObject(fb.BufferContext bc, int offset) => 
    FlightPlanPointGroupsAbridged._(bc, offset);
}

class FlightPlanPointGroupsAbridgedBuilder {
  FlightPlanPointGroupsAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(24);
  }

  int addPointGroupNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addWorstFuelCaseOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLsafNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addLsafDistance(double? lsafDistance) {
    fbBuilder.addFloat64(3, lsafDistance);
    return fbBuilder.offset;
  }
  int addFsafDistance(double? fsafDistance) {
    fbBuilder.addFloat64(4, fsafDistance);
    return fbBuilder.offset;
  }
  int addEtopsDistance(double? etopsDistance) {
    fbBuilder.addFloat64(5, etopsDistance);
    return fbBuilder.offset;
  }
  int addLsafTimeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addFsafTimeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addEtopsTimeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addLsafAvgWindFactor(double? lsafAvgWindFactor) {
    fbBuilder.addFloat64(9, lsafAvgWindFactor);
    return fbBuilder.offset;
  }
  int addFsafAvgWindFactor(double? fsafAvgWindFactor) {
    fbBuilder.addFloat64(10, fsafAvgWindFactor);
    return fbBuilder.offset;
  }
  int addEtopsAvgWindFactor(double? etopsAvgWindFactor) {
    fbBuilder.addFloat64(11, etopsAvgWindFactor);
    return fbBuilder.offset;
  }
  int addLsafTempDev(double? lsafTempDev) {
    fbBuilder.addFloat64(12, lsafTempDev);
    return fbBuilder.offset;
  }
  int addFsafTempDev(double? fsafTempDev) {
    fbBuilder.addFloat64(13, fsafTempDev);
    return fbBuilder.offset;
  }
  int addEtopsTempDev(double? etopsTempDev) {
    fbBuilder.addFloat64(14, etopsTempDev);
    return fbBuilder.offset;
  }
  int addLsafReqFuel(double? lsafReqFuel) {
    fbBuilder.addFloat64(15, lsafReqFuel);
    return fbBuilder.offset;
  }
  int addFsafReqFuel(double? fsafReqFuel) {
    fbBuilder.addFloat64(16, fsafReqFuel);
    return fbBuilder.offset;
  }
  int addEtopsReqFuel(double? etopsReqFuel) {
    fbBuilder.addFloat64(17, etopsReqFuel);
    return fbBuilder.offset;
  }
  int addFromTakeoffTimeOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addPlannedFuel(double? plannedFuel) {
    fbBuilder.addFloat64(19, plannedFuel);
    return fbBuilder.offset;
  }
  int addFuelCalcAlt(double? fuelCalcAlt) {
    fbBuilder.addFloat64(20, fuelCalcAlt);
    return fbBuilder.offset;
  }
  int addFuelCalcSpd(double? fuelCalcSpd) {
    fbBuilder.addFloat64(21, fuelCalcSpd);
    return fbBuilder.offset;
  }
  int addAvgFuelFlow(double? avgFuelFlow) {
    fbBuilder.addFloat64(22, avgFuelFlow);
    return fbBuilder.offset;
  }
  int addFlightPlanPointsOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FlightPlanPointGroupsAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _pointGroupName;
  final String? _worstFuelCase;
  final String? _lsafName;
  final double? _lsafDistance;
  final double? _fsafDistance;
  final double? _etopsDistance;
  final String? _lsafTime;
  final String? _fsafTime;
  final String? _etopsTime;
  final double? _lsafAvgWindFactor;
  final double? _fsafAvgWindFactor;
  final double? _etopsAvgWindFactor;
  final double? _lsafTempDev;
  final double? _fsafTempDev;
  final double? _etopsTempDev;
  final double? _lsafReqFuel;
  final double? _fsafReqFuel;
  final double? _etopsReqFuel;
  final String? _fromTakeoffTime;
  final double? _plannedFuel;
  final double? _fuelCalcAlt;
  final double? _fuelCalcSpd;
  final double? _avgFuelFlow;
  final List<String>? _flightPlanPoints;

  FlightPlanPointGroupsAbridgedObjectBuilder({
    String? pointGroupName,
    String? worstFuelCase,
    String? lsafName,
    double? lsafDistance,
    double? fsafDistance,
    double? etopsDistance,
    String? lsafTime,
    String? fsafTime,
    String? etopsTime,
    double? lsafAvgWindFactor,
    double? fsafAvgWindFactor,
    double? etopsAvgWindFactor,
    double? lsafTempDev,
    double? fsafTempDev,
    double? etopsTempDev,
    double? lsafReqFuel,
    double? fsafReqFuel,
    double? etopsReqFuel,
    String? fromTakeoffTime,
    double? plannedFuel,
    double? fuelCalcAlt,
    double? fuelCalcSpd,
    double? avgFuelFlow,
    List<String>? flightPlanPoints,
  })
      : _pointGroupName = pointGroupName,
        _worstFuelCase = worstFuelCase,
        _lsafName = lsafName,
        _lsafDistance = lsafDistance,
        _fsafDistance = fsafDistance,
        _etopsDistance = etopsDistance,
        _lsafTime = lsafTime,
        _fsafTime = fsafTime,
        _etopsTime = etopsTime,
        _lsafAvgWindFactor = lsafAvgWindFactor,
        _fsafAvgWindFactor = fsafAvgWindFactor,
        _etopsAvgWindFactor = etopsAvgWindFactor,
        _lsafTempDev = lsafTempDev,
        _fsafTempDev = fsafTempDev,
        _etopsTempDev = etopsTempDev,
        _lsafReqFuel = lsafReqFuel,
        _fsafReqFuel = fsafReqFuel,
        _etopsReqFuel = etopsReqFuel,
        _fromTakeoffTime = fromTakeoffTime,
        _plannedFuel = plannedFuel,
        _fuelCalcAlt = fuelCalcAlt,
        _fuelCalcSpd = fuelCalcSpd,
        _avgFuelFlow = avgFuelFlow,
        _flightPlanPoints = flightPlanPoints;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pointGroupNameOffset = _pointGroupName == null ? null
        : fbBuilder.writeString(_pointGroupName!);
    final int? worstFuelCaseOffset = _worstFuelCase == null ? null
        : fbBuilder.writeString(_worstFuelCase!);
    final int? lsafNameOffset = _lsafName == null ? null
        : fbBuilder.writeString(_lsafName!);
    final int? lsafTimeOffset = _lsafTime == null ? null
        : fbBuilder.writeString(_lsafTime!);
    final int? fsafTimeOffset = _fsafTime == null ? null
        : fbBuilder.writeString(_fsafTime!);
    final int? etopsTimeOffset = _etopsTime == null ? null
        : fbBuilder.writeString(_etopsTime!);
    final int? fromTakeoffTimeOffset = _fromTakeoffTime == null ? null
        : fbBuilder.writeString(_fromTakeoffTime!);
    final int? flightPlanPointsOffset = _flightPlanPoints == null ? null
        : fbBuilder.writeList(_flightPlanPoints!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(24);
    fbBuilder.addOffset(0, pointGroupNameOffset);
    fbBuilder.addOffset(1, worstFuelCaseOffset);
    fbBuilder.addOffset(2, lsafNameOffset);
    fbBuilder.addFloat64(3, _lsafDistance);
    fbBuilder.addFloat64(4, _fsafDistance);
    fbBuilder.addFloat64(5, _etopsDistance);
    fbBuilder.addOffset(6, lsafTimeOffset);
    fbBuilder.addOffset(7, fsafTimeOffset);
    fbBuilder.addOffset(8, etopsTimeOffset);
    fbBuilder.addFloat64(9, _lsafAvgWindFactor);
    fbBuilder.addFloat64(10, _fsafAvgWindFactor);
    fbBuilder.addFloat64(11, _etopsAvgWindFactor);
    fbBuilder.addFloat64(12, _lsafTempDev);
    fbBuilder.addFloat64(13, _fsafTempDev);
    fbBuilder.addFloat64(14, _etopsTempDev);
    fbBuilder.addFloat64(15, _lsafReqFuel);
    fbBuilder.addFloat64(16, _fsafReqFuel);
    fbBuilder.addFloat64(17, _etopsReqFuel);
    fbBuilder.addOffset(18, fromTakeoffTimeOffset);
    fbBuilder.addFloat64(19, _plannedFuel);
    fbBuilder.addFloat64(20, _fuelCalcAlt);
    fbBuilder.addFloat64(21, _fuelCalcSpd);
    fbBuilder.addFloat64(22, _avgFuelFlow);
    fbBuilder.addOffset(23, flightPlanPointsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
