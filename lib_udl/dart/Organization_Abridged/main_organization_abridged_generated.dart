// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library organization_abridged;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './main_generated.dart' as ;

///  An organization such as a corporation, manufacturer, consortium, government, etc. An organization may have parent and child organizations as well as link to a former organization if this org previously existed as another organization.
class OrganizationAbridged {
  OrganizationAbridged._(this._bc, this._bcOffset);
  factory OrganizationAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OrganizationAbridged> reader = _OrganizationAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: ORGANIZATION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Organization name.
  ///  Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Type of organization (e.g. GOVERNMENT, CORPORATION, CONSORTIUM, ACADEMIC).
  ///  Example: GOVERNMENT
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Subtype or category of the organization (e.g. Private company, stock market quoted company, subsidiary, goverment department/agency, etc).
  ///  Example: Private company
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get category => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Optional externally provided identifier for this row.
  ///  Example: EXTERNAL-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Organization description.
  ///  Example: Example description
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Country of the physical location of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code. However, it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Country of registration or ownership of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  ///  Example: US
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get nationality => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Boolean indicating if this organization is currently active.
  ///  Example: False
  ///  Constraints: No constraints specified.
  bool get active => const fb.BoolReader().vTableGet(_bc, _bcOffset, 22, false);
  ///  Source of the data.
  ///  Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
  ///  Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  OrganizationAbridgedDataModeEnum get dataMode => OrganizationAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 28, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: OPS1
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);

  @override
  String toString() {
    return 'OrganizationAbridged{id: ${id}, classificationMarking: ${classificationMarking}, name: ${name}, type: ${type}, category: ${category}, externalId: ${externalId}, description: ${description}, countryCode: ${countryCode}, nationality: ${nationality}, active: ${active}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, origNetwork: ${origNetwork}}';
  }
}

class _OrganizationAbridgedReader extends fb.TableReader<OrganizationAbridged> {
  const _OrganizationAbridgedReader();

  @override
  OrganizationAbridged createObject(fb.BufferContext bc, int offset) => 
    OrganizationAbridged._(bc, offset);
}

class OrganizationAbridgedBuilder {
  OrganizationAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(16);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addCategoryOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addExternalIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addNationalityOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addActive(bool? active) {
    fbBuilder.addBool(9, active);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addDataMode(OrganizationAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(12, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OrganizationAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _name;
  final String? _type;
  final String? _category;
  final String? _externalId;
  final String? _description;
  final String? _countryCode;
  final String? _nationality;
  final bool? _active;
  final String? _source;
  final String? _origin;
  final OrganizationAbridgedDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _origNetwork;

  OrganizationAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? name,
    String? type,
    String? category,
    String? externalId,
    String? description,
    String? countryCode,
    String? nationality,
    bool? active,
    String? source,
    String? origin,
    OrganizationAbridgedDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _name = name,
        _type = type,
        _category = category,
        _externalId = externalId,
        _description = description,
        _countryCode = countryCode,
        _nationality = nationality,
        _active = active,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? categoryOffset = _category == null ? null
        : fbBuilder.writeString(_category!);
    final int? externalIdOffset = _externalId == null ? null
        : fbBuilder.writeString(_externalId!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? nationalityOffset = _nationality == null ? null
        : fbBuilder.writeString(_nationality!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(16);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addOffset(3, typeOffset);
    fbBuilder.addOffset(4, categoryOffset);
    fbBuilder.addOffset(5, externalIdOffset);
    fbBuilder.addOffset(6, descriptionOffset);
    fbBuilder.addOffset(7, countryCodeOffset);
    fbBuilder.addOffset(8, nationalityOffset);
    fbBuilder.addBool(9, _active);
    fbBuilder.addOffset(10, sourceOffset);
    fbBuilder.addOffset(11, originOffset);
    fbBuilder.addInt8(12, _dataMode?.value);
    fbBuilder.addOffset(13, createdAtOffset);
    fbBuilder.addOffset(14, createdByOffset);
    fbBuilder.addOffset(15, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
