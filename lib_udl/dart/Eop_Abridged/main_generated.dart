// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class EopAbridgedPolarMotionStateEnum {
  final int value;
  const EopAbridgedPolarMotionStateEnum._(this.value);

  factory EopAbridgedPolarMotionStateEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EopAbridgedPolarMotionStateEnum');
    }
    return result;
  }

  static EopAbridgedPolarMotionStateEnum? _createOrNull(int? value) => 
      value == null ? null : EopAbridgedPolarMotionStateEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const EopAbridgedPolarMotionStateEnum I = EopAbridgedPolarMotionStateEnum._(0);

  ///  No description available.
  static const EopAbridgedPolarMotionStateEnum P = EopAbridgedPolarMotionStateEnum._(1);
  static const Map<int, EopAbridgedPolarMotionStateEnum> values = {
    0: I,
    1: P};

  static const fb.Reader<EopAbridgedPolarMotionStateEnum> reader = _EopAbridgedPolarMotionStateEnumReader();

  @override
  String toString() {
    return 'EopAbridgedPolarMotionStateEnum{value: $value}';
  }
}

class _EopAbridgedPolarMotionStateEnumReader extends fb.Reader<EopAbridgedPolarMotionStateEnum> {
  const _EopAbridgedPolarMotionStateEnumReader();

  @override
  int get size => 1;

  @override
  EopAbridgedPolarMotionStateEnum read(fb.BufferContext bc, int offset) =>
      EopAbridgedPolarMotionStateEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class EopAbridgedUt1UtcstateEnum {
  final int value;
  const EopAbridgedUt1UtcstateEnum._(this.value);

  factory EopAbridgedUt1UtcstateEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EopAbridgedUt1UtcstateEnum');
    }
    return result;
  }

  static EopAbridgedUt1UtcstateEnum? _createOrNull(int? value) => 
      value == null ? null : EopAbridgedUt1UtcstateEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const EopAbridgedUt1UtcstateEnum I = EopAbridgedUt1UtcstateEnum._(0);

  ///  No description available.
  static const EopAbridgedUt1UtcstateEnum P = EopAbridgedUt1UtcstateEnum._(1);
  static const Map<int, EopAbridgedUt1UtcstateEnum> values = {
    0: I,
    1: P};

  static const fb.Reader<EopAbridgedUt1UtcstateEnum> reader = _EopAbridgedUt1UtcstateEnumReader();

  @override
  String toString() {
    return 'EopAbridgedUt1UtcstateEnum{value: $value}';
  }
}

class _EopAbridgedUt1UtcstateEnumReader extends fb.Reader<EopAbridgedUt1UtcstateEnum> {
  const _EopAbridgedUt1UtcstateEnumReader();

  @override
  int get size => 1;

  @override
  EopAbridgedUt1UtcstateEnum read(fb.BufferContext bc, int offset) =>
      EopAbridgedUt1UtcstateEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class EopAbridgedNutationStateEnum {
  final int value;
  const EopAbridgedNutationStateEnum._(this.value);

  factory EopAbridgedNutationStateEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EopAbridgedNutationStateEnum');
    }
    return result;
  }

  static EopAbridgedNutationStateEnum? _createOrNull(int? value) => 
      value == null ? null : EopAbridgedNutationStateEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const EopAbridgedNutationStateEnum I = EopAbridgedNutationStateEnum._(0);

  ///  No description available.
  static const EopAbridgedNutationStateEnum P = EopAbridgedNutationStateEnum._(1);
  static const Map<int, EopAbridgedNutationStateEnum> values = {
    0: I,
    1: P};

  static const fb.Reader<EopAbridgedNutationStateEnum> reader = _EopAbridgedNutationStateEnumReader();

  @override
  String toString() {
    return 'EopAbridgedNutationStateEnum{value: $value}';
  }
}

class _EopAbridgedNutationStateEnumReader extends fb.Reader<EopAbridgedNutationStateEnum> {
  const _EopAbridgedNutationStateEnumReader();

  @override
  int get size => 1;

  @override
  EopAbridgedNutationStateEnum read(fb.BufferContext bc, int offset) =>
      EopAbridgedNutationStateEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class EopAbridgedDataModeEnum {
  final int value;
  const EopAbridgedDataModeEnum._(this.value);

  factory EopAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EopAbridgedDataModeEnum');
    }
    return result;
  }

  static EopAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : EopAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const EopAbridgedDataModeEnum REAL = EopAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const EopAbridgedDataModeEnum TEST = EopAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const EopAbridgedDataModeEnum SIMULATED = EopAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const EopAbridgedDataModeEnum EXERCISE = EopAbridgedDataModeEnum._(3);
  static const Map<int, EopAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<EopAbridgedDataModeEnum> reader = _EopAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'EopAbridgedDataModeEnum{value: $value}';
  }
}

class _EopAbridgedDataModeEnumReader extends fb.Reader<EopAbridgedDataModeEnum> {
  const _EopAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  EopAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      EopAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Model representation of Earth Orientation Parameters (EOP) produced by the IERS (International Earth Rotation and Reference Systems Service). Earth Orientation Parameters describe the irregularities of the earth's rotation. Technically, they are the parameters which provide the rotation of the ITRS (International Terrestrial Reference System) to the ICRS (International Celestial Reference System) as a function of time.
///  Universal time -- Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
///  Coordinates of the pole -- x and y are the coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS Reference Pole. The CEP differs from the instantaneous rotation axis by quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the direction 90 degrees West longitude.
///  Celestial pole offsets -- Celestial pole offsets are described in the IAU Precession and Nutation models. The observed differences with respect to the conventional celestial pole position defined by the models are monitored and reported by the IERS.
///  IERS Bulletins A and B provide current information on the Earth's orientation in the IERS Reference System.  This includes Universal Time, coordinates of the terrestrial pole, and celestial pole offsets.  Bulletin A gives an advanced solution updated weekly; the standard solution is given monthly in Bulletin B. Fields suffixed with 'B' are Bulletin B values. All solutions are continuous within their respective uncertainties.  Bulletin A is issued by the IERS Rapid Service/Prediction Centre at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports the latest determinations for polar motion, UT1-UTC, and nutation offsets at daily intervals based on a combination of contributed analysis results using data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging (LLR). Predictions for variations a year into the future are also provided. Meteorological predictions of variations in Atmospheric Angular Momentum (AAM) are used to aid in the prediction of near-term UT1-UTC changes. This publication is prepared by the IERS Rapid Service/Prediction Center.
class EopAbridged {
  EopAbridged._(this._bc, this._bcOffset);
  factory EopAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EopAbridged> reader = _EopAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: EOP-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Effective date/time for the EOP values in ISO8601 UTC format.  The values could be current or predicted.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get eopDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Flag indicating Issued (I), or Predicted (P) for this record's polar motion values.
  ///  Example: /// Example: I
  ///  Constraints: Minimum length = 0, Maximum length = 1
  EopAbridgedPolarMotionStateEnum get polarMotionState => EopAbridgedPolarMotionStateEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 10, 0));
  ///  The Bulletin A X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
  ///  Example: /// Example: 0.182987
  ///  Constraints: No constraints specified.
  double get polarMotionX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Estimated uncertainty/error in polarMotionX value in arc seconds.
  ///  Example: /// Example: 0.000672
  ///  Constraints: No constraints specified.
  double get polarMotionXunc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  The Bulletin A Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
  ///  Example: /// Example: 0.168775
  ///  Constraints: No constraints specified.
  double get polarMotionY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Estimated uncertainty/error in polarMotionY value in arc seconds.
  ///  Example: /// Example: 0.000345
  ///  Constraints: No constraints specified.
  double get polarMotionYunc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Flag indicating Issued (I), or Predicted (P) for this record''s Bulletin A UT1-UTC values.
  ///  Example: /// Example: I
  ///  Constraints: Minimum length = 0, Maximum length = 1
  EopAbridgedUt1UtcstateEnum get ut1Utcstate => EopAbridgedUt1UtcstateEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 20, 0));
  ///  The difference between the Bulletin A UT1 and UTC time scales as of eopDate in seconds.
  ///  Example: /// Example: -0.1251659
  ///  Constraints: No constraints specified.
  double get ut1Utc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  The estimated uncertainty/error in the ut1UTC value in seconds.
  ///  Example: /// Example: 2.07e-05
  ///  Constraints: No constraints specified.
  double get ut1Utcunc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Bulletin A length of day or LOD in milliseconds. Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
  ///  Example: /// Example: 1.8335
  ///  Constraints: No constraints specified.
  double get lod => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  The estimated uncertainty/error in the lod value in seconds.
  ///  Example: /// Example: 0.0201
  ///  Constraints: No constraints specified.
  double get lodUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Flag indicating Issued (I), or Predicted (P) for this record's nutation values (dPSI and dEpsilon).
  ///  Example: /// Example: I
  ///  Constraints: Minimum length = 0, Maximum length = 1
  EopAbridgedNutationStateEnum get nutationState => EopAbridgedNutationStateEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 30, 0));
  ///  The Bulletin A offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSI is not used when this record represents IAU 2000 data.
  ///  Example: /// Example: -10.437
  ///  Constraints: No constraints specified.
  double get dPsi => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  The estimated uncertainty/error in the dPSI value in milliseconds of arc.
  ///  Example: /// Example: 0.507
  ///  Constraints: No constraints specified.
  double get dPsiunc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  The Bulletin A offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilon is not used when this record represents IAU 2000 data.
  ///  Example: /// Example: -0.917
  ///  Constraints: No constraints specified.
  double get dEpsilon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  The estimated uncertainty/error in the dEpsilon value in milliseconds of arc.
  ///  Example: /// Example: 0.165
  ///  Constraints: No constraints specified.
  double get dEpsilonUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  The Bulletin A celestial pole offset along x-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dX is not used when this record represents IAU 1980 data.
  ///  Example: /// Example: -0.086
  ///  Constraints: No constraints specified.
  double get dX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  The estimated uncertainty/error in the Bulletin A dX value, in milliseconds of arc.
  ///  Example: /// Example: 0.202
  ///  Constraints: No constraints specified.
  double get dXunc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  The Bulletin A celestial pole offset along y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dY is not used when this record represents IAU 1980 data.
  ///  Example: /// Example: 0.13
  ///  Constraints: No constraints specified.
  double get dY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  The estimated uncertainty/error in the Bulletin A dY value, in milliseconds of arc.
  ///  Example: /// Example: 0.165
  ///  Constraints: No constraints specified.
  double get dYunc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Bulletin B X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
  ///  Example: /// Example: 0.1824
  ///  Constraints: No constraints specified.
  double get polarMotionXb => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Bulletin B Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
  ///  Example: /// Example: 0.1679
  ///  Constraints: No constraints specified.
  double get polarMotionYb => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  The Bulletin B difference between the UT1 and UTC time scales as of eopDate in seconds.
  ///  Example: /// Example: -0.1253
  ///  Constraints: No constraints specified.
  double get ut1Utcb => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  The Bulletin B offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSIB is not used when this record represents IAU 2000 data.
  ///  Example: /// Example: -9.9
  ///  Constraints: No constraints specified.
  double get dPsib => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  The Bulletin B offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilonB is not used when this record represents IAU 2000 data.
  ///  Example: /// Example: -1.7
  ///  Constraints: No constraints specified.
  double get dEpsilonB => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  The Bulletin B celestial pole offset along the X-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dXB is not used when this record represents IAU 1980 data.
  ///  Example: /// Example: 0.129
  ///  Constraints: No constraints specified.
  double get dXb => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  The Bulletin B celestial pole offset along the Y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dYB is not used when this record represents IAU 1980 data.
  ///  Example: /// Example: -0.653
  ///  Constraints: No constraints specified.
  double get dYb => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  The IAU Theory of Precession and Theory of Nutation applied to the data in this record. IAU1980 records employ the IAU 1976 Theory of Precession and IAU 1980 Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory of Precession and Nutation.
  ///  Example: /// Example: IAU1980
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get precessionNutationStd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get rawFileUri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  EopAbridgedDataModeEnum get dataMode => EopAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 70, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);

  @override
  String toString() {
    return 'EopAbridged{id: ${id}, classificationMarking: ${classificationMarking}, eopDate: ${eopDate}, polarMotionState: ${polarMotionState}, polarMotionX: ${polarMotionX}, polarMotionXunc: ${polarMotionXunc}, polarMotionY: ${polarMotionY}, polarMotionYunc: ${polarMotionYunc}, ut1Utcstate: ${ut1Utcstate}, ut1Utc: ${ut1Utc}, ut1Utcunc: ${ut1Utcunc}, lod: ${lod}, lodUnc: ${lodUnc}, nutationState: ${nutationState}, dPsi: ${dPsi}, dPsiunc: ${dPsiunc}, dEpsilon: ${dEpsilon}, dEpsilonUnc: ${dEpsilonUnc}, dX: ${dX}, dXunc: ${dXunc}, dY: ${dY}, dYunc: ${dYunc}, polarMotionXb: ${polarMotionXb}, polarMotionYb: ${polarMotionYb}, ut1Utcb: ${ut1Utcb}, dPsib: ${dPsib}, dEpsilonB: ${dEpsilonB}, dXb: ${dXb}, dYb: ${dYb}, precessionNutationStd: ${precessionNutationStd}, rawFileUri: ${rawFileUri}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, origNetwork: ${origNetwork}}';
  }
}

class _EopAbridgedReader extends fb.TableReader<EopAbridged> {
  const _EopAbridgedReader();

  @override
  EopAbridged createObject(fb.BufferContext bc, int offset) => 
    EopAbridged._(bc, offset);
}

class EopAbridgedBuilder {
  EopAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(37);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addEopDateOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPolarMotionState(EopAbridgedPolarMotionStateEnum? polarMotionState) {
    fbBuilder.addInt8(3, polarMotionState?.value);
    return fbBuilder.offset;
  }
  int addPolarMotionX(double? polarMotionX) {
    fbBuilder.addFloat64(4, polarMotionX);
    return fbBuilder.offset;
  }
  int addPolarMotionXunc(double? polarMotionXunc) {
    fbBuilder.addFloat64(5, polarMotionXunc);
    return fbBuilder.offset;
  }
  int addPolarMotionY(double? polarMotionY) {
    fbBuilder.addFloat64(6, polarMotionY);
    return fbBuilder.offset;
  }
  int addPolarMotionYunc(double? polarMotionYunc) {
    fbBuilder.addFloat64(7, polarMotionYunc);
    return fbBuilder.offset;
  }
  int addUt1Utcstate(EopAbridgedUt1UtcstateEnum? ut1Utcstate) {
    fbBuilder.addInt8(8, ut1Utcstate?.value);
    return fbBuilder.offset;
  }
  int addUt1Utc(double? ut1Utc) {
    fbBuilder.addFloat64(9, ut1Utc);
    return fbBuilder.offset;
  }
  int addUt1Utcunc(double? ut1Utcunc) {
    fbBuilder.addFloat64(10, ut1Utcunc);
    return fbBuilder.offset;
  }
  int addLod(double? lod) {
    fbBuilder.addFloat64(11, lod);
    return fbBuilder.offset;
  }
  int addLodUnc(double? lodUnc) {
    fbBuilder.addFloat64(12, lodUnc);
    return fbBuilder.offset;
  }
  int addNutationState(EopAbridgedNutationStateEnum? nutationState) {
    fbBuilder.addInt8(13, nutationState?.value);
    return fbBuilder.offset;
  }
  int addDPsi(double? dPsi) {
    fbBuilder.addFloat64(14, dPsi);
    return fbBuilder.offset;
  }
  int addDPsiunc(double? dPsiunc) {
    fbBuilder.addFloat64(15, dPsiunc);
    return fbBuilder.offset;
  }
  int addDEpsilon(double? dEpsilon) {
    fbBuilder.addFloat64(16, dEpsilon);
    return fbBuilder.offset;
  }
  int addDEpsilonUnc(double? dEpsilonUnc) {
    fbBuilder.addFloat64(17, dEpsilonUnc);
    return fbBuilder.offset;
  }
  int addDX(double? dX) {
    fbBuilder.addFloat64(18, dX);
    return fbBuilder.offset;
  }
  int addDXunc(double? dXunc) {
    fbBuilder.addFloat64(19, dXunc);
    return fbBuilder.offset;
  }
  int addDY(double? dY) {
    fbBuilder.addFloat64(20, dY);
    return fbBuilder.offset;
  }
  int addDYunc(double? dYunc) {
    fbBuilder.addFloat64(21, dYunc);
    return fbBuilder.offset;
  }
  int addPolarMotionXb(double? polarMotionXb) {
    fbBuilder.addFloat64(22, polarMotionXb);
    return fbBuilder.offset;
  }
  int addPolarMotionYb(double? polarMotionYb) {
    fbBuilder.addFloat64(23, polarMotionYb);
    return fbBuilder.offset;
  }
  int addUt1Utcb(double? ut1Utcb) {
    fbBuilder.addFloat64(24, ut1Utcb);
    return fbBuilder.offset;
  }
  int addDPsib(double? dPsib) {
    fbBuilder.addFloat64(25, dPsib);
    return fbBuilder.offset;
  }
  int addDEpsilonB(double? dEpsilonB) {
    fbBuilder.addFloat64(26, dEpsilonB);
    return fbBuilder.offset;
  }
  int addDXb(double? dXb) {
    fbBuilder.addFloat64(27, dXb);
    return fbBuilder.offset;
  }
  int addDYb(double? dYb) {
    fbBuilder.addFloat64(28, dYb);
    return fbBuilder.offset;
  }
  int addPrecessionNutationStdOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addDataMode(EopAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(33, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EopAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _eopDate;
  final EopAbridgedPolarMotionStateEnum? _polarMotionState;
  final double? _polarMotionX;
  final double? _polarMotionXunc;
  final double? _polarMotionY;
  final double? _polarMotionYunc;
  final EopAbridgedUt1UtcstateEnum? _ut1Utcstate;
  final double? _ut1Utc;
  final double? _ut1Utcunc;
  final double? _lod;
  final double? _lodUnc;
  final EopAbridgedNutationStateEnum? _nutationState;
  final double? _dPsi;
  final double? _dPsiunc;
  final double? _dEpsilon;
  final double? _dEpsilonUnc;
  final double? _dX;
  final double? _dXunc;
  final double? _dY;
  final double? _dYunc;
  final double? _polarMotionXb;
  final double? _polarMotionYb;
  final double? _ut1Utcb;
  final double? _dPsib;
  final double? _dEpsilonB;
  final double? _dXb;
  final double? _dYb;
  final String? _precessionNutationStd;
  final String? _rawFileUri;
  final String? _source;
  final String? _origin;
  final EopAbridgedDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _origNetwork;

  EopAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? eopDate,
    EopAbridgedPolarMotionStateEnum? polarMotionState,
    double? polarMotionX,
    double? polarMotionXunc,
    double? polarMotionY,
    double? polarMotionYunc,
    EopAbridgedUt1UtcstateEnum? ut1Utcstate,
    double? ut1Utc,
    double? ut1Utcunc,
    double? lod,
    double? lodUnc,
    EopAbridgedNutationStateEnum? nutationState,
    double? dPsi,
    double? dPsiunc,
    double? dEpsilon,
    double? dEpsilonUnc,
    double? dX,
    double? dXunc,
    double? dY,
    double? dYunc,
    double? polarMotionXb,
    double? polarMotionYb,
    double? ut1Utcb,
    double? dPsib,
    double? dEpsilonB,
    double? dXb,
    double? dYb,
    String? precessionNutationStd,
    String? rawFileUri,
    String? source,
    String? origin,
    EopAbridgedDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _eopDate = eopDate,
        _polarMotionState = polarMotionState,
        _polarMotionX = polarMotionX,
        _polarMotionXunc = polarMotionXunc,
        _polarMotionY = polarMotionY,
        _polarMotionYunc = polarMotionYunc,
        _ut1Utcstate = ut1Utcstate,
        _ut1Utc = ut1Utc,
        _ut1Utcunc = ut1Utcunc,
        _lod = lod,
        _lodUnc = lodUnc,
        _nutationState = nutationState,
        _dPsi = dPsi,
        _dPsiunc = dPsiunc,
        _dEpsilon = dEpsilon,
        _dEpsilonUnc = dEpsilonUnc,
        _dX = dX,
        _dXunc = dXunc,
        _dY = dY,
        _dYunc = dYunc,
        _polarMotionXb = polarMotionXb,
        _polarMotionYb = polarMotionYb,
        _ut1Utcb = ut1Utcb,
        _dPsib = dPsib,
        _dEpsilonB = dEpsilonB,
        _dXb = dXb,
        _dYb = dYb,
        _precessionNutationStd = precessionNutationStd,
        _rawFileUri = rawFileUri,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? eopDateOffset = _eopDate == null ? null
        : fbBuilder.writeString(_eopDate!);
    final int? precessionNutationStdOffset = _precessionNutationStd == null ? null
        : fbBuilder.writeString(_precessionNutationStd!);
    final int? rawFileUriOffset = _rawFileUri == null ? null
        : fbBuilder.writeString(_rawFileUri!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(37);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, eopDateOffset);
    fbBuilder.addInt8(3, _polarMotionState?.value);
    fbBuilder.addFloat64(4, _polarMotionX);
    fbBuilder.addFloat64(5, _polarMotionXunc);
    fbBuilder.addFloat64(6, _polarMotionY);
    fbBuilder.addFloat64(7, _polarMotionYunc);
    fbBuilder.addInt8(8, _ut1Utcstate?.value);
    fbBuilder.addFloat64(9, _ut1Utc);
    fbBuilder.addFloat64(10, _ut1Utcunc);
    fbBuilder.addFloat64(11, _lod);
    fbBuilder.addFloat64(12, _lodUnc);
    fbBuilder.addInt8(13, _nutationState?.value);
    fbBuilder.addFloat64(14, _dPsi);
    fbBuilder.addFloat64(15, _dPsiunc);
    fbBuilder.addFloat64(16, _dEpsilon);
    fbBuilder.addFloat64(17, _dEpsilonUnc);
    fbBuilder.addFloat64(18, _dX);
    fbBuilder.addFloat64(19, _dXunc);
    fbBuilder.addFloat64(20, _dY);
    fbBuilder.addFloat64(21, _dYunc);
    fbBuilder.addFloat64(22, _polarMotionXb);
    fbBuilder.addFloat64(23, _polarMotionYb);
    fbBuilder.addFloat64(24, _ut1Utcb);
    fbBuilder.addFloat64(25, _dPsib);
    fbBuilder.addFloat64(26, _dEpsilonB);
    fbBuilder.addFloat64(27, _dXb);
    fbBuilder.addFloat64(28, _dYb);
    fbBuilder.addOffset(29, precessionNutationStdOffset);
    fbBuilder.addOffset(30, rawFileUriOffset);
    fbBuilder.addOffset(31, sourceOffset);
    fbBuilder.addOffset(32, originOffset);
    fbBuilder.addInt8(33, _dataMode?.value);
    fbBuilder.addOffset(34, createdAtOffset);
    fbBuilder.addOffset(35, createdByOffset);
    fbBuilder.addOffset(36, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
