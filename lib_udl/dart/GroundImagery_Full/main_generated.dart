// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class GroundImageryFullDataModeEnum {
  final int value;
  const GroundImageryFullDataModeEnum._(this.value);

  factory GroundImageryFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum GroundImageryFullDataModeEnum');
    }
    return result;
  }

  static GroundImageryFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : GroundImageryFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const GroundImageryFullDataModeEnum REAL = GroundImageryFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const GroundImageryFullDataModeEnum TEST = GroundImageryFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const GroundImageryFullDataModeEnum SIMULATED = GroundImageryFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const GroundImageryFullDataModeEnum EXERCISE = GroundImageryFullDataModeEnum._(3);
  static const Map<int, GroundImageryFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<GroundImageryFullDataModeEnum> reader = _GroundImageryFullDataModeEnumReader();

  @override
  String toString() {
    return 'GroundImageryFullDataModeEnum{value: $value}';
  }
}

class _GroundImageryFullDataModeEnumReader extends fb.Reader<GroundImageryFullDataModeEnum> {
  const _GroundImageryFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  GroundImageryFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      GroundImageryFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Imagery of terrestrial regions from on-orbit, air, and other sensors.
class GroundImageryFull {
  GroundImageryFull._(this._bc, this._bcOffset);
  factory GroundImageryFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GroundImageryFull> reader = _GroundImageryFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: GROUNDIMAGERY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Optional ID of the sensor that produced this ground image.
  ///  Example: /// Example: SENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSensor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Timestamp the image was captured/produced.
  ///  Example: /// Example: 2021-01-01T01:01:01.123456Z
  ///  Constraints: No constraints specified.
  String? get imageTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Name of the image file.
  ///  Example: /// Example: Example file name
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get filename => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Geographical region or polygon (lon/lat pairs) of the image as projected on the ground in geoJSON or geoText format. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both regionText and regionGeoJSON fields appropriately. When omitted, regionText or regionGeoJSON is expected.
  ///  Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
  ///  Constraints: Minimum length = 0, Maximum length = 65535
  String? get region => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a create operation that also specifies a valid region.
  ///  Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  ///  Constraints: Minimum length = 0, Maximum length = 65535
  String? get regionText => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. Reference: https://geojson.org/. Ignored if included with a create operation that also specifies a valid region or regionText.
  ///  Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  ///  Constraints: Minimum length = 0, Maximum length = 65535
  String? get regionGeoJson => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Type of region as projected on the ground.
  ///  Example: /// Example: Polygon
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get regionType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Number of dimensions of the geometry depicted by region.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get regionNdims => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 22, 0);
  ///  Geographical spatial_ref_sys for region.
  ///  Example: /// Example: 4326
  ///  Constraints: No constraints specified.
  int get regionSrid => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 24, 0);
  ///  Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
  ///  Example: /// Example: ORIGSENSOR-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get origSensorId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Optional identifier of the subject/target of the image, useful for correlating multiple images of the same subject.
  ///  Example: /// Example: SUBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get subjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Optional name/description associated with this image.
  ///  Example: /// Example: Example name
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  GroundImageryFullDataModeEnum get dataMode => GroundImageryFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 40, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Read-only time the row was updated in the database, set automatically by the system on update.
  ///  Example: /// Example: 2018-01-02T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: 37bdef1f-5a4f-4776-bee4-7a1e0ec7d35a
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 52);
  ///  Optional array of keywords for this image.
  ///  Example: /// Example: ['KEYWORD1', 'KEYWORD2']
  ///  Constraints: No constraints specified.
  List<String>? get keywords => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 54);
  ///  Description and notes of the image.
  ///  Example: /// Example: Example notes
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Optional, field indicating type of image, NITF, PNG, etc.
  ///  Example: /// Example: PNG
  ///  Constraints: Minimum length = 1, Maximum length = 16
  String? get format => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Size of the image file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
  ///  Example: /// Example: 0
  ///  Constraints: No constraints specified.
  int get filesize => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 60, 0);
  ///  MD5 value of the file. The ingest/create operation will automatically generate the value.
  ///  Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
  ///  Constraints: Minimum length = 1, Maximum length = 256
  String? get checksumValue => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);

  @override
  String toString() {
    return 'GroundImageryFull{id: ${id}, idSensor: ${idSensor}, classificationMarking: ${classificationMarking}, imageTime: ${imageTime}, filename: ${filename}, region: ${region}, regionText: ${regionText}, regionGeoJson: ${regionGeoJson}, regionType: ${regionType}, regionNdims: ${regionNdims}, regionSrid: ${regionSrid}, origSensorId: ${origSensorId}, subjectId: ${subjectId}, name: ${name}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, sourceDl: ${sourceDl}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, transactionId: ${transactionId}, tags: ${tags}, keywords: ${keywords}, notes: ${notes}, format: ${format}, filesize: ${filesize}, checksumValue: ${checksumValue}}';
  }
}

class _GroundImageryFullReader extends fb.TableReader<GroundImageryFull> {
  const _GroundImageryFullReader();

  @override
  GroundImageryFull createObject(fb.BufferContext bc, int offset) => 
    GroundImageryFull._(bc, offset);
}

class GroundImageryFullBuilder {
  GroundImageryFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(30);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addImageTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addFilenameOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addRegionOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addRegionTextOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addRegionGeoJsonOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addRegionTypeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addRegionNdims(int? regionNdims) {
    fbBuilder.addInt32(9, regionNdims);
    return fbBuilder.offset;
  }
  int addRegionSrid(int? regionSrid) {
    fbBuilder.addInt32(10, regionSrid);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addSubjectIdOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addDataMode(GroundImageryFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(18, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addKeywordsOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addFormatOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addFilesize(int? filesize) {
    fbBuilder.addInt64(28, filesize);
    return fbBuilder.offset;
  }
  int addChecksumValueOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GroundImageryFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idSensor;
  final String? _classificationMarking;
  final String? _imageTime;
  final String? _filename;
  final String? _region;
  final String? _regionText;
  final String? _regionGeoJson;
  final String? _regionType;
  final int? _regionNdims;
  final int? _regionSrid;
  final String? _origSensorId;
  final String? _subjectId;
  final String? _name;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final String? _sourceDl;
  final GroundImageryFullDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _transactionId;
  final List<String>? _tags;
  final List<String>? _keywords;
  final String? _notes;
  final String? _format;
  final int? _filesize;
  final String? _checksumValue;

  GroundImageryFullObjectBuilder({
    String? id,
    String? idSensor,
    String? classificationMarking,
    String? imageTime,
    String? filename,
    String? region,
    String? regionText,
    String? regionGeoJson,
    String? regionType,
    int? regionNdims,
    int? regionSrid,
    String? origSensorId,
    String? subjectId,
    String? name,
    String? source,
    String? origin,
    String? origNetwork,
    String? sourceDl,
    GroundImageryFullDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? transactionId,
    List<String>? tags,
    List<String>? keywords,
    String? notes,
    String? format,
    int? filesize,
    String? checksumValue,
  })
      : _id = id,
        _idSensor = idSensor,
        _classificationMarking = classificationMarking,
        _imageTime = imageTime,
        _filename = filename,
        _region = region,
        _regionText = regionText,
        _regionGeoJson = regionGeoJson,
        _regionType = regionType,
        _regionNdims = regionNdims,
        _regionSrid = regionSrid,
        _origSensorId = origSensorId,
        _subjectId = subjectId,
        _name = name,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _sourceDl = sourceDl,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _transactionId = transactionId,
        _tags = tags,
        _keywords = keywords,
        _notes = notes,
        _format = format,
        _filesize = filesize,
        _checksumValue = checksumValue;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idSensorOffset = _idSensor == null ? null
        : fbBuilder.writeString(_idSensor!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? imageTimeOffset = _imageTime == null ? null
        : fbBuilder.writeString(_imageTime!);
    final int? filenameOffset = _filename == null ? null
        : fbBuilder.writeString(_filename!);
    final int? regionOffset = _region == null ? null
        : fbBuilder.writeString(_region!);
    final int? regionTextOffset = _regionText == null ? null
        : fbBuilder.writeString(_regionText!);
    final int? regionGeoJsonOffset = _regionGeoJson == null ? null
        : fbBuilder.writeString(_regionGeoJson!);
    final int? regionTypeOffset = _regionType == null ? null
        : fbBuilder.writeString(_regionType!);
    final int? origSensorIdOffset = _origSensorId == null ? null
        : fbBuilder.writeString(_origSensorId!);
    final int? subjectIdOffset = _subjectId == null ? null
        : fbBuilder.writeString(_subjectId!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? keywordsOffset = _keywords == null ? null
        : fbBuilder.writeList(_keywords!.map(fbBuilder.writeString).toList());
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? formatOffset = _format == null ? null
        : fbBuilder.writeString(_format!);
    final int? checksumValueOffset = _checksumValue == null ? null
        : fbBuilder.writeString(_checksumValue!);
    fbBuilder.startTable(30);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idSensorOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addOffset(3, imageTimeOffset);
    fbBuilder.addOffset(4, filenameOffset);
    fbBuilder.addOffset(5, regionOffset);
    fbBuilder.addOffset(6, regionTextOffset);
    fbBuilder.addOffset(7, regionGeoJsonOffset);
    fbBuilder.addOffset(8, regionTypeOffset);
    fbBuilder.addInt32(9, _regionNdims);
    fbBuilder.addInt32(10, _regionSrid);
    fbBuilder.addOffset(11, origSensorIdOffset);
    fbBuilder.addOffset(12, subjectIdOffset);
    fbBuilder.addOffset(13, nameOffset);
    fbBuilder.addOffset(14, sourceOffset);
    fbBuilder.addOffset(15, originOffset);
    fbBuilder.addOffset(16, origNetworkOffset);
    fbBuilder.addOffset(17, sourceDlOffset);
    fbBuilder.addInt8(18, _dataMode?.value);
    fbBuilder.addOffset(19, createdAtOffset);
    fbBuilder.addOffset(20, createdByOffset);
    fbBuilder.addOffset(21, updatedAtOffset);
    fbBuilder.addOffset(22, updatedByOffset);
    fbBuilder.addOffset(23, transactionIdOffset);
    fbBuilder.addOffset(24, tagsOffset);
    fbBuilder.addOffset(25, keywordsOffset);
    fbBuilder.addOffset(26, notesOffset);
    fbBuilder.addOffset(27, formatOffset);
    fbBuilder.addInt64(28, _filesize);
    fbBuilder.addOffset(29, checksumValueOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
