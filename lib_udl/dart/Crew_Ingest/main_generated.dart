// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class CrewIngestDataModeEnum {
  final int value;
  const CrewIngestDataModeEnum._(this.value);

  factory CrewIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum CrewIngestDataModeEnum');
    }
    return result;
  }

  static CrewIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : CrewIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const CrewIngestDataModeEnum REAL = CrewIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const CrewIngestDataModeEnum TEST = CrewIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const CrewIngestDataModeEnum SIMULATED = CrewIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const CrewIngestDataModeEnum EXERCISE = CrewIngestDataModeEnum._(3);
  static const Map<int, CrewIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<CrewIngestDataModeEnum> reader = _CrewIngestDataModeEnumReader();

  @override
  String toString() {
    return 'CrewIngestDataModeEnum{value: $value}';
  }
}

class _CrewIngestDataModeEnumReader extends fb.Reader<CrewIngestDataModeEnum> {
  const _CrewIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  CrewIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      CrewIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Crew Services.
class CrewIngest {
  CrewIngest._(this._bc, this._bcOffset);
  factory CrewIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CrewIngest> reader = _CrewIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Unique identifier of the formed crew provided by the originating source. Provided for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: JHJDHjhuu929o92
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get origCrewId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Name of the formed crew.
  ///  Example: /// Example: falcon
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get crewName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Crew Status (e.g. APPROVED, PENDING).
  ///  Example: /// Example: APPROVED
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique identifier of the Aircraft Sortie associated with this crew record.
  ///  Example: /// Example: 4ef3d1e8-ab08-ab70-498f-edc479734e5c
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSortie => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Time the crew is legal for alert, in ISO8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get legalAlertTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Time the crew is legal for bravo, in ISO8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get legalBravoTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Time the crew was alerted, in ISO8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get alertedTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Scheduled return time, in ISO8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get returnTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Crew Flight Duty Period (FDP) eligibility type.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get fdpEligType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Flight Duty Period (FDP) type.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get fdpType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Crew type.
  ///  Example: /// Example: AIRLAND
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get crewType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The crew's Aviation Resource Management System (ARMS) unit.  If multiple units exist, use the Aircraft Commander's Unit.
  ///  Example: /// Example: 00016ALSQ
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get armsCrewUnit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  CrewMembers Collection.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get crewMembers => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2022-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: OPS1
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  CrewIngestDataModeEnum get dataMode => CrewIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 48, 0));

  @override
  String toString() {
    return 'CrewIngest{id: ${id}, classificationMarking: ${classificationMarking}, origCrewId: ${origCrewId}, crewName: ${crewName}, status: ${status}, idSortie: ${idSortie}, legalAlertTime: ${legalAlertTime}, legalBravoTime: ${legalBravoTime}, alertedTime: ${alertedTime}, returnTime: ${returnTime}, fdpEligType: ${fdpEligType}, fdpType: ${fdpType}, crewType: ${crewType}, armsCrewUnit: ${armsCrewUnit}, crewMembers: ${crewMembers}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _CrewIngestReader extends fb.TableReader<CrewIngest> {
  const _CrewIngestReader();

  @override
  CrewIngest createObject(fb.BufferContext bc, int offset) => 
    CrewIngest._(bc, offset);
}

class CrewIngestBuilder {
  CrewIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(23);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOrigCrewIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCrewNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIdSortieOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addLegalAlertTimeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addLegalBravoTimeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addAlertedTimeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addReturnTimeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addFdpEligTypeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addFdpTypeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addCrewTypeOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addArmsCrewUnitOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addCrewMembersOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addDataMode(CrewIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(22, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CrewIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _origCrewId;
  final String? _crewName;
  final String? _status;
  final String? _idSortie;
  final String? _legalAlertTime;
  final String? _legalBravoTime;
  final String? _alertedTime;
  final String? _returnTime;
  final String? _fdpEligType;
  final String? _fdpType;
  final String? _crewType;
  final String? _armsCrewUnit;
  final List<String>? _crewMembers;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final CrewIngestDataModeEnum? _dataMode;

  CrewIngestObjectBuilder({
    String? id,
    String? classificationMarking,
    String? origCrewId,
    String? crewName,
    String? status,
    String? idSortie,
    String? legalAlertTime,
    String? legalBravoTime,
    String? alertedTime,
    String? returnTime,
    String? fdpEligType,
    String? fdpType,
    String? crewType,
    String? armsCrewUnit,
    List<String>? crewMembers,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
    String? source,
    String? origin,
    String? origNetwork,
    CrewIngestDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _origCrewId = origCrewId,
        _crewName = crewName,
        _status = status,
        _idSortie = idSortie,
        _legalAlertTime = legalAlertTime,
        _legalBravoTime = legalBravoTime,
        _alertedTime = alertedTime,
        _returnTime = returnTime,
        _fdpEligType = fdpEligType,
        _fdpType = fdpType,
        _crewType = crewType,
        _armsCrewUnit = armsCrewUnit,
        _crewMembers = crewMembers,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? origCrewIdOffset = _origCrewId == null ? null
        : fbBuilder.writeString(_origCrewId!);
    final int? crewNameOffset = _crewName == null ? null
        : fbBuilder.writeString(_crewName!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? idSortieOffset = _idSortie == null ? null
        : fbBuilder.writeString(_idSortie!);
    final int? legalAlertTimeOffset = _legalAlertTime == null ? null
        : fbBuilder.writeString(_legalAlertTime!);
    final int? legalBravoTimeOffset = _legalBravoTime == null ? null
        : fbBuilder.writeString(_legalBravoTime!);
    final int? alertedTimeOffset = _alertedTime == null ? null
        : fbBuilder.writeString(_alertedTime!);
    final int? returnTimeOffset = _returnTime == null ? null
        : fbBuilder.writeString(_returnTime!);
    final int? fdpEligTypeOffset = _fdpEligType == null ? null
        : fbBuilder.writeString(_fdpEligType!);
    final int? fdpTypeOffset = _fdpType == null ? null
        : fbBuilder.writeString(_fdpType!);
    final int? crewTypeOffset = _crewType == null ? null
        : fbBuilder.writeString(_crewType!);
    final int? armsCrewUnitOffset = _armsCrewUnit == null ? null
        : fbBuilder.writeString(_armsCrewUnit!);
    final int? crewMembersOffset = _crewMembers == null ? null
        : fbBuilder.writeList(_crewMembers!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(23);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, origCrewIdOffset);
    fbBuilder.addOffset(3, crewNameOffset);
    fbBuilder.addOffset(4, statusOffset);
    fbBuilder.addOffset(5, idSortieOffset);
    fbBuilder.addOffset(6, legalAlertTimeOffset);
    fbBuilder.addOffset(7, legalBravoTimeOffset);
    fbBuilder.addOffset(8, alertedTimeOffset);
    fbBuilder.addOffset(9, returnTimeOffset);
    fbBuilder.addOffset(10, fdpEligTypeOffset);
    fbBuilder.addOffset(11, fdpTypeOffset);
    fbBuilder.addOffset(12, crewTypeOffset);
    fbBuilder.addOffset(13, armsCrewUnitOffset);
    fbBuilder.addOffset(14, crewMembersOffset);
    fbBuilder.addOffset(15, createdAtOffset);
    fbBuilder.addOffset(16, createdByOffset);
    fbBuilder.addOffset(17, updatedAtOffset);
    fbBuilder.addOffset(18, updatedByOffset);
    fbBuilder.addOffset(19, sourceOffset);
    fbBuilder.addOffset(20, originOffset);
    fbBuilder.addOffset(21, origNetworkOffset);
    fbBuilder.addInt8(22, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
