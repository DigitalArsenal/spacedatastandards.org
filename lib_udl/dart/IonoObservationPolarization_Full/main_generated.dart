// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class IonoObservationPolarizationFullDataEnum {
  final int value;
  const IonoObservationPolarizationFullDataEnum._(this.value);

  factory IonoObservationPolarizationFullDataEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum IonoObservationPolarizationFullDataEnum');
    }
    return result;
  }

  static IonoObservationPolarizationFullDataEnum? _createOrNull(int? value) => 
      value == null ? null : IonoObservationPolarizationFullDataEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const IonoObservationPolarizationFullDataEnum X = IonoObservationPolarizationFullDataEnum._(0);

  ///  No description available.
  static const IonoObservationPolarizationFullDataEnum O = IonoObservationPolarizationFullDataEnum._(1);
  static const Map<int, IonoObservationPolarizationFullDataEnum> values = {
    0: X,
    1: O};

  static const fb.Reader<IonoObservationPolarizationFullDataEnum> reader = _IonoObservationPolarizationFullDataEnumReader();

  @override
  String toString() {
    return 'IonoObservationPolarizationFullDataEnum{value: $value}';
  }
}

class _IonoObservationPolarizationFullDataEnumReader extends fb.Reader<IonoObservationPolarizationFullDataEnum> {
  const _IonoObservationPolarizationFullDataEnumReader();

  @override
  int get size => 1;

  @override
  IonoObservationPolarizationFullDataEnum read(fb.BufferContext bc, int offset) =>
      IonoObservationPolarizationFullDataEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Multidimensional array of enums that identifies either classic/basic polarization discrimination “O” or “X” corresponding to ordinary or extraordinary polarizations, respectively. Exclude this enumeration if no classic/basic polarization discrimination is implemented. May accommodate other modes in addition to “O” and “X” with proper documentation in notes field.
class IonoObservationPolarizationFull {
  IonoObservationPolarizationFull._(this._bc, this._bcOffset);
  factory IonoObservationPolarizationFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IonoObservationPolarizationFull> reader = _IonoObservationPolarizationFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Notes for the polarization data.
  ///  Example: /// Example: NOTES
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get notes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Array of integers for polarization dimensions.
  ///  Example: /// Example: [1, 2]
  ///  Constraints: No constraints specified.
  List<String>? get dimensions => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  ///  Array of names for dimensions.
  ///  Example: /// Example: ['NAME1', 'NAME2']
  ///  Constraints: No constraints specified.
  List<String>? get dimensionName => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);
  ///  Array of polarization data.
  ///  Example: /// Example: [[[[[[['X', 'O']]]]]]]
  ///  Constraints: No constraints specified.
  IonoObservationPolarizationFullDataEnum get data => IonoObservationPolarizationFullDataEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 10, 0));

  @override
  String toString() {
    return 'IonoObservationPolarizationFull{notes: ${notes}, dimensions: ${dimensions}, dimensionName: ${dimensionName}, data: ${data}}';
  }
}

class _IonoObservationPolarizationFullReader extends fb.TableReader<IonoObservationPolarizationFull> {
  const _IonoObservationPolarizationFullReader();

  @override
  IonoObservationPolarizationFull createObject(fb.BufferContext bc, int offset) => 
    IonoObservationPolarizationFull._(bc, offset);
}

class IonoObservationPolarizationFullBuilder {
  IonoObservationPolarizationFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDimensionsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDimensionNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addData(IonoObservationPolarizationFullDataEnum? data) {
    fbBuilder.addInt8(3, data?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IonoObservationPolarizationFullObjectBuilder extends fb.ObjectBuilder {
  final String? _notes;
  final List<String>? _dimensions;
  final List<String>? _dimensionName;
  final IonoObservationPolarizationFullDataEnum? _data;

  IonoObservationPolarizationFullObjectBuilder({
    String? notes,
    List<String>? dimensions,
    List<String>? dimensionName,
    IonoObservationPolarizationFullDataEnum? data,
  })
      : _notes = notes,
        _dimensions = dimensions,
        _dimensionName = dimensionName,
        _data = data;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeString(_notes!);
    final int? dimensionsOffset = _dimensions == null ? null
        : fbBuilder.writeList(_dimensions!.map(fbBuilder.writeString).toList());
    final int? dimensionNameOffset = _dimensionName == null ? null
        : fbBuilder.writeList(_dimensionName!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, notesOffset);
    fbBuilder.addOffset(1, dimensionsOffset);
    fbBuilder.addOffset(2, dimensionNameOffset);
    fbBuilder.addInt8(3, _data?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
