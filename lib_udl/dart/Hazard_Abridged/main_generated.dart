// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class HazardAbridgedDataModeEnum {
  final int value;
  const HazardAbridgedDataModeEnum._(this.value);

  factory HazardAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum HazardAbridgedDataModeEnum');
    }
    return result;
  }

  static HazardAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : HazardAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const HazardAbridgedDataModeEnum REAL = HazardAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const HazardAbridgedDataModeEnum TEST = HazardAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const HazardAbridgedDataModeEnum SIMULATED = HazardAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const HazardAbridgedDataModeEnum EXERCISE = HazardAbridgedDataModeEnum._(3);
  static const Map<int, HazardAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<HazardAbridgedDataModeEnum> reader = _HazardAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'HazardAbridgedDataModeEnum{value: $value}';
  }
}

class _HazardAbridgedDataModeEnumReader extends fb.Reader<HazardAbridgedDataModeEnum> {
  const _HazardAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  HazardAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      HazardAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Hazard contains information concerning the exposure of a geographic area to a Chemical, Biological, Radiological, or Nuclear (CBRN) contaminant. The Hazard schema includes the detection time and type of contamination as well as optional information regarding specific material properties, the extent of contamination, and identification of affected regions.
class HazardAbridged {
  HazardAbridged._(this._bc, this._bcOffset);
  factory HazardAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HazardAbridged> reader = _HazardAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: HAZARD-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The type of hazard (Chemical, Biological, Radiological, Nuclear) detect associated with this record.
  ///  Example: /// Example: Chemical
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get detectType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The detect time, in ISO 8601 UTC format, with millisecond precision.
  ///  Example: /// Example: 2022-03-07T14:51:39.653Z
  ///  Constraints: No constraints specified.
  String? get detectTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Flag indicating whether this detection is harmful to humans.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get harmful => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  ///  Array of the specific alarms associated with this detection. The alarms and alarmValues arrays must contain the same number of elements.
  ///  Example: /// Example: ['Alarm1', 'Alarm2']
  ///  Constraints: No constraints specified.
  List<String>? get alarms => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 14);
  ///  Array of the values that correspond to each of the alarms contained in alarms. The alarms and alarmValues arrays must contain the same number of elements.
  ///  Example: /// Example: [2.7, 2.9]
  ///  Constraints: No constraints specified.
  List<String>? get alarmValues => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 16);
  ///  Array of the specific readings associated with this detection. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
  ///  Example: /// Example: ['Rad1', 'Rad2']
  ///  Constraints: No constraints specified.
  List<String>? get readings => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 18);
  ///  Array of the units that correspond to each of the readingValues. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
  ///  Example: /// Example: ['Gray', 'Gray']
  ///  Constraints: No constraints specified.
  List<String>? get readingUnits => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 20);
  ///  Array of the values that correspond to each of the readings contained in readings. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
  ///  Example: /// Example: [107.2, 124.1]
  ///  Constraints: No constraints specified.
  List<String>? get readingValues => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 22);
  ///  The specific material type (MT) or MT Code involved in this detection, when applicable. The material type is generally associated with radiological and/or nuclear detections. For further information, reference Nuclear Materials Management and Safeguards System (NMMSS) Users Guide Rev. 2.1.
  ///  Example: /// Example: 21
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get matType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The specific Material Class for the material associated with this detect. The material class is generally associated with chemical and biological detections.
  ///  Example: /// Example: Nerve Agent
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get matClass => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The material common name associated with this detection.
  ///  Example: /// Example: VX
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get matName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The Radiological Category (1 - 5) which applies to the material associated with this detection, according to the following definitions: 
  ///  Category 1: If not safely or securely managed, would be likely to cause permanent injury to a person who handled them or was otherwise in contact with them for more than a few minutes. It would probably be fatal to be close to this amount of unshielded material for a period of a few minutes to an hour. 
  ///  Category 2: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for a short time (minutes to hours). It could possibly be fatal to be close to this amount of unshielded radioactive material for a period of hours to days. 
  ///  Category 3: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for hours. It could possibly - although it is unlikely to be - fatal to be close to this amount of unshielded radioactive material for a period of days to weeks. 
  ///  Category 4: If not safely managed or securely protected, could possibly cause temporary injury to someone who handled them or was otherwise in contact with or close to them for a period of many weeks, though this is unlikely. It is very unlikely anyone would be permanently injured by this amount of radioactive material. 
  ///  Category 5: Cannot cause permanent injury. This category applies to x-ray fluorescence devices and electron capture devices.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get matCat => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 30, 0);
  ///  The CAS Registry Number, also referred to as CAS Number or CAS RN, associated with the this detection. The CAS Number is a unique numerical identifier assigned by the Chemical Abstracts Service (CAS), to every chemical substance described in the open scientific literature. It includes organic and inorganic compounds, minerals, isotopes, alloys, mixtures, and nonstructurable materials (UVCBs, substances of unknown or variable composition, complex reaction products, or biological origin). For further information, reference https://www.cas.org/cas-data/cas-registry.
  ///  Example: /// Example: 64-17-5
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get casRn => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Measure of the concentration of the material associated with this detection, in parts per million (units of contaminant mass per million parts of total mass).
  ///  Example: /// Example: 27129
  ///  Constraints: No constraints specified.
  int get ppm => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  Measure of density of the material associated with this detection, in kg/m^3.
  ///  Example: /// Example: 18900.2
  ///  Constraints: No constraints specified.
  double get density => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Measure of radioactive concentration of the material associated with this detection, in becquerels/m^3. One becquerel (Bq) is equal to one nuclear decay per second.
  ///  Example: /// Example: 1.31
  ///  Constraints: No constraints specified.
  double get radCtrn => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Chemical Agent Monitor (CAM) G-type agent measurement, in number of display bars. In G-mode, CAMs monitor for G-series nerve agents.
  ///  Example: /// Example: 2.5
  ///  Constraints: No constraints specified.
  double get gBar => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Chemical Agent Monitor (CAM) H-type agent measurement, in number of display bars. In H-mode, CAMs monitor for blister agents.
  ///  Example: /// Example: 3.1
  ///  Constraints: No constraints specified.
  double get hBar => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  The Atomic Number of the material associated with this detection.
  ///  Example: /// Example: 92
  ///  Constraints: No constraints specified.
  int get z => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 44, 0);
  ///  The (rounded) Mass Number of the material associated with this detection. The rounded value is the mass number of the most abundant isotope of the element.
  ///  Example: /// Example: 238
  ///  Constraints: No constraints specified.
  int get a => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 46, 0);
  ///  The specific bottle ID associated with this detection.
  ///  Example: /// Example: 6264
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get bottleId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  The applicable channel involved in this biological material detection (e.g. Digestive, Eyes, Respiratory, Skin, etc.) .
  ///  Example: /// Example: Skin
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get channel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  The known or projected hazard duration, in seconds, associated with this material detection.
  ///  Example: /// Example: 14400
  ///  Constraints: No constraints specified.
  int get duration => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 52, 0);
  ///  The radioactivity measurement of the material associated with this detection, in becquerels (Bq). One becquerel (Bq) is equal to one nuclear decay per second.
  ///  Example: /// Example: 120.1
  ///  Constraints: No constraints specified.
  double get activity => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  The deposition measurement of the contaminant to surface area, in kg/m^2.
  ///  Example: /// Example: 1.084
  ///  Constraints: No constraints specified.
  double get dep => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  The deposition concentration of the contaminant to surface area, in becquerels/m^2.
  ///  Example: /// Example: 86.1
  ///  Constraints: No constraints specified.
  double get depCtrn => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Ratio of the chemical substance mass to the total mass of the mixture.
  ///  Example: /// Example: 0.029
  ///  Constraints: No constraints specified.
  double get massFrac => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  The dose associated with this detection, in gray. Dose is the measure of the energy deposited in matter by ionizing radiation per unit mass. One gray is defined as one Joule of energy absorbed per kilogram of matter.
  ///  Example: /// Example: 1.12
  ///  Constraints: No constraints specified.
  double get dose => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  The concentration time, in (kg/sec)/m^3, associated with this material detection.
  ///  Example: /// Example: 1.077
  ///  Constraints: No constraints specified.
  double get ctrnTime => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  The dose rate associated with this detection, in gray/sec. One gray is defined as one Joule of energy absorbed per kilogram of matter.
  ///  Example: /// Example: 1.0000001865
  ///  Constraints: No constraints specified.
  double get doseRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  ID of the Point of Interest (POI) record related to this hazard record.
  ///  Example: /// Example: POI-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idPoi => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  ID of the Track record related to this hazard record.
  ///  Example: /// Example: TRACK-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idTrack => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  HazardAbridgedDataModeEnum get dataMode => HazardAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 82, 0));

  @override
  String toString() {
    return 'HazardAbridged{id: ${id}, classificationMarking: ${classificationMarking}, detectType: ${detectType}, detectTime: ${detectTime}, harmful: ${harmful}, alarms: ${alarms}, alarmValues: ${alarmValues}, readings: ${readings}, readingUnits: ${readingUnits}, readingValues: ${readingValues}, matType: ${matType}, matClass: ${matClass}, matName: ${matName}, matCat: ${matCat}, casRn: ${casRn}, ppm: ${ppm}, density: ${density}, radCtrn: ${radCtrn}, gBar: ${gBar}, hBar: ${hBar}, z: ${z}, a: ${a}, bottleId: ${bottleId}, channel: ${channel}, duration: ${duration}, activity: ${activity}, dep: ${dep}, depCtrn: ${depCtrn}, massFrac: ${massFrac}, dose: ${dose}, ctrnTime: ${ctrnTime}, doseRate: ${doseRate}, idPoi: ${idPoi}, idTrack: ${idTrack}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _HazardAbridgedReader extends fb.TableReader<HazardAbridged> {
  const _HazardAbridgedReader();

  @override
  HazardAbridged createObject(fb.BufferContext bc, int offset) => 
    HazardAbridged._(bc, offset);
}

class HazardAbridgedBuilder {
  HazardAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(40);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDetectTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addDetectTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addHarmful(bool? harmful) {
    fbBuilder.addBool(4, harmful);
    return fbBuilder.offset;
  }
  int addAlarmsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addAlarmValuesOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addReadingsOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addReadingUnitsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addReadingValuesOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addMatTypeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addMatClassOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addMatNameOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addMatCat(int? matCat) {
    fbBuilder.addInt32(13, matCat);
    return fbBuilder.offset;
  }
  int addCasRnOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addPpm(int? ppm) {
    fbBuilder.addInt32(15, ppm);
    return fbBuilder.offset;
  }
  int addDensity(double? density) {
    fbBuilder.addFloat64(16, density);
    return fbBuilder.offset;
  }
  int addRadCtrn(double? radCtrn) {
    fbBuilder.addFloat64(17, radCtrn);
    return fbBuilder.offset;
  }
  int addGBar(double? gBar) {
    fbBuilder.addFloat64(18, gBar);
    return fbBuilder.offset;
  }
  int addHBar(double? hBar) {
    fbBuilder.addFloat64(19, hBar);
    return fbBuilder.offset;
  }
  int addZ(int? z) {
    fbBuilder.addInt32(20, z);
    return fbBuilder.offset;
  }
  int addA(int? a) {
    fbBuilder.addInt32(21, a);
    return fbBuilder.offset;
  }
  int addBottleIdOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addChannelOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addDuration(int? duration) {
    fbBuilder.addInt32(24, duration);
    return fbBuilder.offset;
  }
  int addActivity(double? activity) {
    fbBuilder.addFloat64(25, activity);
    return fbBuilder.offset;
  }
  int addDep(double? dep) {
    fbBuilder.addFloat64(26, dep);
    return fbBuilder.offset;
  }
  int addDepCtrn(double? depCtrn) {
    fbBuilder.addFloat64(27, depCtrn);
    return fbBuilder.offset;
  }
  int addMassFrac(double? massFrac) {
    fbBuilder.addFloat64(28, massFrac);
    return fbBuilder.offset;
  }
  int addDose(double? dose) {
    fbBuilder.addFloat64(29, dose);
    return fbBuilder.offset;
  }
  int addCtrnTime(double? ctrnTime) {
    fbBuilder.addFloat64(30, ctrnTime);
    return fbBuilder.offset;
  }
  int addDoseRate(double? doseRate) {
    fbBuilder.addFloat64(31, doseRate);
    return fbBuilder.offset;
  }
  int addIdPoiOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addIdTrackOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addDataMode(HazardAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(39, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HazardAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _detectType;
  final String? _detectTime;
  final bool? _harmful;
  final List<String>? _alarms;
  final List<String>? _alarmValues;
  final List<String>? _readings;
  final List<String>? _readingUnits;
  final List<String>? _readingValues;
  final String? _matType;
  final String? _matClass;
  final String? _matName;
  final int? _matCat;
  final String? _casRn;
  final int? _ppm;
  final double? _density;
  final double? _radCtrn;
  final double? _gBar;
  final double? _hBar;
  final int? _z;
  final int? _a;
  final String? _bottleId;
  final String? _channel;
  final int? _duration;
  final double? _activity;
  final double? _dep;
  final double? _depCtrn;
  final double? _massFrac;
  final double? _dose;
  final double? _ctrnTime;
  final double? _doseRate;
  final String? _idPoi;
  final String? _idTrack;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final String? _origNetwork;
  final HazardAbridgedDataModeEnum? _dataMode;

  HazardAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? detectType,
    String? detectTime,
    bool? harmful,
    List<String>? alarms,
    List<String>? alarmValues,
    List<String>? readings,
    List<String>? readingUnits,
    List<String>? readingValues,
    String? matType,
    String? matClass,
    String? matName,
    int? matCat,
    String? casRn,
    int? ppm,
    double? density,
    double? radCtrn,
    double? gBar,
    double? hBar,
    int? z,
    int? a,
    String? bottleId,
    String? channel,
    int? duration,
    double? activity,
    double? dep,
    double? depCtrn,
    double? massFrac,
    double? dose,
    double? ctrnTime,
    double? doseRate,
    String? idPoi,
    String? idTrack,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    String? origNetwork,
    HazardAbridgedDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _detectType = detectType,
        _detectTime = detectTime,
        _harmful = harmful,
        _alarms = alarms,
        _alarmValues = alarmValues,
        _readings = readings,
        _readingUnits = readingUnits,
        _readingValues = readingValues,
        _matType = matType,
        _matClass = matClass,
        _matName = matName,
        _matCat = matCat,
        _casRn = casRn,
        _ppm = ppm,
        _density = density,
        _radCtrn = radCtrn,
        _gBar = gBar,
        _hBar = hBar,
        _z = z,
        _a = a,
        _bottleId = bottleId,
        _channel = channel,
        _duration = duration,
        _activity = activity,
        _dep = dep,
        _depCtrn = depCtrn,
        _massFrac = massFrac,
        _dose = dose,
        _ctrnTime = ctrnTime,
        _doseRate = doseRate,
        _idPoi = idPoi,
        _idTrack = idTrack,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? detectTypeOffset = _detectType == null ? null
        : fbBuilder.writeString(_detectType!);
    final int? detectTimeOffset = _detectTime == null ? null
        : fbBuilder.writeString(_detectTime!);
    final int? alarmsOffset = _alarms == null ? null
        : fbBuilder.writeList(_alarms!.map(fbBuilder.writeString).toList());
    final int? alarmValuesOffset = _alarmValues == null ? null
        : fbBuilder.writeList(_alarmValues!.map(fbBuilder.writeString).toList());
    final int? readingsOffset = _readings == null ? null
        : fbBuilder.writeList(_readings!.map(fbBuilder.writeString).toList());
    final int? readingUnitsOffset = _readingUnits == null ? null
        : fbBuilder.writeList(_readingUnits!.map(fbBuilder.writeString).toList());
    final int? readingValuesOffset = _readingValues == null ? null
        : fbBuilder.writeList(_readingValues!.map(fbBuilder.writeString).toList());
    final int? matTypeOffset = _matType == null ? null
        : fbBuilder.writeString(_matType!);
    final int? matClassOffset = _matClass == null ? null
        : fbBuilder.writeString(_matClass!);
    final int? matNameOffset = _matName == null ? null
        : fbBuilder.writeString(_matName!);
    final int? casRnOffset = _casRn == null ? null
        : fbBuilder.writeString(_casRn!);
    final int? bottleIdOffset = _bottleId == null ? null
        : fbBuilder.writeString(_bottleId!);
    final int? channelOffset = _channel == null ? null
        : fbBuilder.writeString(_channel!);
    final int? idPoiOffset = _idPoi == null ? null
        : fbBuilder.writeString(_idPoi!);
    final int? idTrackOffset = _idTrack == null ? null
        : fbBuilder.writeString(_idTrack!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(40);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, detectTypeOffset);
    fbBuilder.addOffset(3, detectTimeOffset);
    fbBuilder.addBool(4, _harmful);
    fbBuilder.addOffset(5, alarmsOffset);
    fbBuilder.addOffset(6, alarmValuesOffset);
    fbBuilder.addOffset(7, readingsOffset);
    fbBuilder.addOffset(8, readingUnitsOffset);
    fbBuilder.addOffset(9, readingValuesOffset);
    fbBuilder.addOffset(10, matTypeOffset);
    fbBuilder.addOffset(11, matClassOffset);
    fbBuilder.addOffset(12, matNameOffset);
    fbBuilder.addInt32(13, _matCat);
    fbBuilder.addOffset(14, casRnOffset);
    fbBuilder.addInt32(15, _ppm);
    fbBuilder.addFloat64(16, _density);
    fbBuilder.addFloat64(17, _radCtrn);
    fbBuilder.addFloat64(18, _gBar);
    fbBuilder.addFloat64(19, _hBar);
    fbBuilder.addInt32(20, _z);
    fbBuilder.addInt32(21, _a);
    fbBuilder.addOffset(22, bottleIdOffset);
    fbBuilder.addOffset(23, channelOffset);
    fbBuilder.addInt32(24, _duration);
    fbBuilder.addFloat64(25, _activity);
    fbBuilder.addFloat64(26, _dep);
    fbBuilder.addFloat64(27, _depCtrn);
    fbBuilder.addFloat64(28, _massFrac);
    fbBuilder.addFloat64(29, _dose);
    fbBuilder.addFloat64(30, _ctrnTime);
    fbBuilder.addFloat64(31, _doseRate);
    fbBuilder.addOffset(32, idPoiOffset);
    fbBuilder.addOffset(33, idTrackOffset);
    fbBuilder.addOffset(34, createdAtOffset);
    fbBuilder.addOffset(35, createdByOffset);
    fbBuilder.addOffset(36, sourceOffset);
    fbBuilder.addOffset(37, originOffset);
    fbBuilder.addOffset(38, origNetworkOffset);
    fbBuilder.addInt8(39, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
