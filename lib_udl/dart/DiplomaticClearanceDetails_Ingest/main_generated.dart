// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection of diplomatic clearance details.
class DiplomaticClearanceDetailsIngest {
  DiplomaticClearanceDetailsIngest._(this._bc, this._bcOffset);
  factory DiplomaticClearanceDetailsIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DiplomaticClearanceDetailsIngest> reader = _DiplomaticClearanceDetailsIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the Aircraft Sortie associated with this diplomatic clearance record.
  ///  Example: /// Example: 207010e0-f97d-431c-8c00-7e46acfef0f5
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idSortie => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Identifies the Itinerary point of a sortie where an air event occurs.
  ///  Example: /// Example: 825
  ///  Constraints: No constraints specified.
  int get legNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  ///  The 1801 fileable route of flight string associated with this diplomatic clearance. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
  ///  Example: /// Example: DCT DOH P430 BAYAN/M062F150 P430 RAMKI
  ///  Constraints: Minimum length = 0, Maximum length = 4000
  String? get routeString => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The start time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get validStartTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The end time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get validEndTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Identifier of this diplomatic clearance issued by the host country.
  ///  Example: /// Example: MFMW225662GHQ
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get clearanceId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Optional clearance ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalClearanceId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The call sign of the sortie cleared with this diplomatic clearance.
  ///  Example: /// Example: FALCN09
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get clearedCallSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The placement of this diplomatic clearance within a sequence of clearances used on a sortie. For example, a sequence value of 3 means that it is the third diplomatic clearance the aircraft will use.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get sequenceNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  ///  The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: NL
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
  ///  Example: /// Example: IZ
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get altCountryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Name of the country issuing this diplomatic clearance.
  ///  Example: /// Example: NETHERLANDS
  ///  Constraints: Minimum length = 0, Maximum length = 50
  String? get countryName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Description of when this diplomatic clearance is valid.
  ///  Example: /// Example: CY2023
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get validDesc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Remarks concerning the valid diplomatic clearance window.
  ///  Example: /// Example: Period remarks
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get windowRemark => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The navigation point name where the aircraft must enter the country.
  ///  Example: /// Example: LOMOS
  ///  Constraints: Minimum length = 0, Maximum length = 38
  String? get entryPoint => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Earliest time the aircraft may enter the country, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get entryNet => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The navigation point name where the aircraft must exit the country.
  ///  Example: /// Example: BUDOP
  ///  Constraints: Minimum length = 0, Maximum length = 38
  String? get exitPoint => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Latest time the aircraft may exit the country, in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2024-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get exitNlt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Flag indicating whether the clearance request requires ICAO specific information.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get reqIcao => const fb.BoolReader().vTableGet(_bc, _bcOffset, 40, false);
  ///  The type of action the aircraft can take with this diplomatic clearance (e.g. O for Overfly, L for Land, etc.).
  ///  Example: /// Example: O
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get action => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Indicates the current status of the diplomatic clearance request.
  ///  Example: /// Example: IN WORK
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  The diplomatic clearance profile name used within clearance management systems.
  ///  Example: /// Example: T LAND/OFLY IATA COMPLIANT CARGO 23
  ///  Constraints: Minimum length = 0, Maximum length = 100
  String? get profile => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Flag indicating whether entry/exit points are required for clearances.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get reqPoint => const fb.BoolReader().vTableGet(_bc, _bcOffset, 48, false);
  ///  Remarks concerning this diplomatic clearance.
  ///  Example: /// Example: Clearance remarks
  ///  Constraints: Minimum length = 0, Maximum length = 1024
  String? get clearanceRemark => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);

  @override
  String toString() {
    return 'DiplomaticClearanceDetailsIngest{idSortie: ${idSortie}, legNum: ${legNum}, routeString: ${routeString}, validStartTime: ${validStartTime}, validEndTime: ${validEndTime}, clearanceId: ${clearanceId}, externalClearanceId: ${externalClearanceId}, clearedCallSign: ${clearedCallSign}, sequenceNum: ${sequenceNum}, countryCode: ${countryCode}, altCountryCode: ${altCountryCode}, countryName: ${countryName}, validDesc: ${validDesc}, windowRemark: ${windowRemark}, entryPoint: ${entryPoint}, entryNet: ${entryNet}, exitPoint: ${exitPoint}, exitNlt: ${exitNlt}, reqIcao: ${reqIcao}, action: ${action}, status: ${status}, profile: ${profile}, reqPoint: ${reqPoint}, clearanceRemark: ${clearanceRemark}}';
  }
}

class _DiplomaticClearanceDetailsIngestReader extends fb.TableReader<DiplomaticClearanceDetailsIngest> {
  const _DiplomaticClearanceDetailsIngestReader();

  @override
  DiplomaticClearanceDetailsIngest createObject(fb.BufferContext bc, int offset) => 
    DiplomaticClearanceDetailsIngest._(bc, offset);
}

class DiplomaticClearanceDetailsIngestBuilder {
  DiplomaticClearanceDetailsIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(24);
  }

  int addIdSortieOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addLegNum(int? legNum) {
    fbBuilder.addInt32(1, legNum);
    return fbBuilder.offset;
  }
  int addRouteStringOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addValidStartTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addValidEndTimeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addClearanceIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addExternalClearanceIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addClearedCallSignOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addSequenceNum(int? sequenceNum) {
    fbBuilder.addInt32(8, sequenceNum);
    return fbBuilder.offset;
  }
  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addAltCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addCountryNameOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addValidDescOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addWindowRemarkOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addEntryPointOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addEntryNetOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addExitPointOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addExitNltOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addReqIcao(bool? reqIcao) {
    fbBuilder.addBool(18, reqIcao);
    return fbBuilder.offset;
  }
  int addActionOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addProfileOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addReqPoint(bool? reqPoint) {
    fbBuilder.addBool(22, reqPoint);
    return fbBuilder.offset;
  }
  int addClearanceRemarkOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DiplomaticClearanceDetailsIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _idSortie;
  final int? _legNum;
  final String? _routeString;
  final String? _validStartTime;
  final String? _validEndTime;
  final String? _clearanceId;
  final String? _externalClearanceId;
  final String? _clearedCallSign;
  final int? _sequenceNum;
  final String? _countryCode;
  final String? _altCountryCode;
  final String? _countryName;
  final String? _validDesc;
  final String? _windowRemark;
  final String? _entryPoint;
  final String? _entryNet;
  final String? _exitPoint;
  final String? _exitNlt;
  final bool? _reqIcao;
  final String? _action;
  final String? _status;
  final String? _profile;
  final bool? _reqPoint;
  final String? _clearanceRemark;

  DiplomaticClearanceDetailsIngestObjectBuilder({
    String? idSortie,
    int? legNum,
    String? routeString,
    String? validStartTime,
    String? validEndTime,
    String? clearanceId,
    String? externalClearanceId,
    String? clearedCallSign,
    int? sequenceNum,
    String? countryCode,
    String? altCountryCode,
    String? countryName,
    String? validDesc,
    String? windowRemark,
    String? entryPoint,
    String? entryNet,
    String? exitPoint,
    String? exitNlt,
    bool? reqIcao,
    String? action,
    String? status,
    String? profile,
    bool? reqPoint,
    String? clearanceRemark,
  })
      : _idSortie = idSortie,
        _legNum = legNum,
        _routeString = routeString,
        _validStartTime = validStartTime,
        _validEndTime = validEndTime,
        _clearanceId = clearanceId,
        _externalClearanceId = externalClearanceId,
        _clearedCallSign = clearedCallSign,
        _sequenceNum = sequenceNum,
        _countryCode = countryCode,
        _altCountryCode = altCountryCode,
        _countryName = countryName,
        _validDesc = validDesc,
        _windowRemark = windowRemark,
        _entryPoint = entryPoint,
        _entryNet = entryNet,
        _exitPoint = exitPoint,
        _exitNlt = exitNlt,
        _reqIcao = reqIcao,
        _action = action,
        _status = status,
        _profile = profile,
        _reqPoint = reqPoint,
        _clearanceRemark = clearanceRemark;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idSortieOffset = _idSortie == null ? null
        : fbBuilder.writeString(_idSortie!);
    final int? routeStringOffset = _routeString == null ? null
        : fbBuilder.writeString(_routeString!);
    final int? validStartTimeOffset = _validStartTime == null ? null
        : fbBuilder.writeString(_validStartTime!);
    final int? validEndTimeOffset = _validEndTime == null ? null
        : fbBuilder.writeString(_validEndTime!);
    final int? clearanceIdOffset = _clearanceId == null ? null
        : fbBuilder.writeString(_clearanceId!);
    final int? externalClearanceIdOffset = _externalClearanceId == null ? null
        : fbBuilder.writeString(_externalClearanceId!);
    final int? clearedCallSignOffset = _clearedCallSign == null ? null
        : fbBuilder.writeString(_clearedCallSign!);
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? altCountryCodeOffset = _altCountryCode == null ? null
        : fbBuilder.writeString(_altCountryCode!);
    final int? countryNameOffset = _countryName == null ? null
        : fbBuilder.writeString(_countryName!);
    final int? validDescOffset = _validDesc == null ? null
        : fbBuilder.writeString(_validDesc!);
    final int? windowRemarkOffset = _windowRemark == null ? null
        : fbBuilder.writeString(_windowRemark!);
    final int? entryPointOffset = _entryPoint == null ? null
        : fbBuilder.writeString(_entryPoint!);
    final int? entryNetOffset = _entryNet == null ? null
        : fbBuilder.writeString(_entryNet!);
    final int? exitPointOffset = _exitPoint == null ? null
        : fbBuilder.writeString(_exitPoint!);
    final int? exitNltOffset = _exitNlt == null ? null
        : fbBuilder.writeString(_exitNlt!);
    final int? actionOffset = _action == null ? null
        : fbBuilder.writeString(_action!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? profileOffset = _profile == null ? null
        : fbBuilder.writeString(_profile!);
    final int? clearanceRemarkOffset = _clearanceRemark == null ? null
        : fbBuilder.writeString(_clearanceRemark!);
    fbBuilder.startTable(24);
    fbBuilder.addOffset(0, idSortieOffset);
    fbBuilder.addInt32(1, _legNum);
    fbBuilder.addOffset(2, routeStringOffset);
    fbBuilder.addOffset(3, validStartTimeOffset);
    fbBuilder.addOffset(4, validEndTimeOffset);
    fbBuilder.addOffset(5, clearanceIdOffset);
    fbBuilder.addOffset(6, externalClearanceIdOffset);
    fbBuilder.addOffset(7, clearedCallSignOffset);
    fbBuilder.addInt32(8, _sequenceNum);
    fbBuilder.addOffset(9, countryCodeOffset);
    fbBuilder.addOffset(10, altCountryCodeOffset);
    fbBuilder.addOffset(11, countryNameOffset);
    fbBuilder.addOffset(12, validDescOffset);
    fbBuilder.addOffset(13, windowRemarkOffset);
    fbBuilder.addOffset(14, entryPointOffset);
    fbBuilder.addOffset(15, entryNetOffset);
    fbBuilder.addOffset(16, exitPointOffset);
    fbBuilder.addOffset(17, exitNltOffset);
    fbBuilder.addBool(18, _reqIcao);
    fbBuilder.addOffset(19, actionOffset);
    fbBuilder.addOffset(20, statusOffset);
    fbBuilder.addOffset(21, profileOffset);
    fbBuilder.addBool(22, _reqPoint);
    fbBuilder.addOffset(23, clearanceRemarkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
