// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Points identified within the route.
class RoutePointsAbridged {
  RoutePointsAbridged._(this._bc, this._bcOffset);
  factory RoutePointsAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RoutePointsAbridged> reader = _RoutePointsAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Sequencing field for the track route. This is the identifier representing the sequence of waypoints associated to the track route.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get ptSequenceId => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  ///  Code representation of the point within the track route (ex. EP, EX, CP, IP, etc.).
  ///  Example: /// Example: EP
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get ptTypeCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The name that represents the point within the track route (ex. ENTRY POINT, EXIT POINT, CONTROL POINT, INITIAL POINT, etc.).
  ///  Example: /// Example: ENTRY POINT
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get ptTypeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Name of a waypoint which identifies the location of the point.
  ///  Example: /// Example: KCHS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get waypointName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Flag indicating this is a Digital Aeronautical Flight Information File (DAFIF) point.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get dafifPt => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  ///  WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get ptLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 179.1
  ///  Constraints: No constraints specified.
  double get ptLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  The magnetic declination/variation of the route point location from true north, in degrees. Positive values east of true north and negative values west of true north.
  ///  Example: /// Example: 7.35
  ///  Constraints: No constraints specified.
  double get magDec => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  The length of the course from the Navigational Aid (NAVAID) in nautical miles.
  ///  Example: /// Example: 100.2
  ///  Constraints: No constraints specified.
  double get navaidLength => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Navigational Aid (NAVAID) identification code.
  ///  Example: /// Example: HTO
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get navaid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The DoD Standard Country Code designator for the country where the route point resides. This field should be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
  ///  Example: /// Example: NL
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Specifies an alternate country code if the data provider code is not part of an official NAVAID Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
  ///  Example: /// Example: IZ
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get altCountryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The NAVAID type of this route point (ex. VOR, VORTAC, TACAN, etc.).
  ///  Example: /// Example: VORTAC
  ///  Constraints: Minimum length = 0, Maximum length = 12
  String? get navaidType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);

  @override
  String toString() {
    return 'RoutePointsAbridged{ptSequenceId: ${ptSequenceId}, ptTypeCode: ${ptTypeCode}, ptTypeName: ${ptTypeName}, waypointName: ${waypointName}, dafifPt: ${dafifPt}, ptLat: ${ptLat}, ptLon: ${ptLon}, magDec: ${magDec}, navaidLength: ${navaidLength}, navaid: ${navaid}, countryCode: ${countryCode}, altCountryCode: ${altCountryCode}, navaidType: ${navaidType}}';
  }
}

class _RoutePointsAbridgedReader extends fb.TableReader<RoutePointsAbridged> {
  const _RoutePointsAbridgedReader();

  @override
  RoutePointsAbridged createObject(fb.BufferContext bc, int offset) => 
    RoutePointsAbridged._(bc, offset);
}

class RoutePointsAbridgedBuilder {
  RoutePointsAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(13);
  }

  int addPtSequenceId(int? ptSequenceId) {
    fbBuilder.addInt32(0, ptSequenceId);
    return fbBuilder.offset;
  }
  int addPtTypeCodeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPtTypeNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addWaypointNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDafifPt(bool? dafifPt) {
    fbBuilder.addBool(4, dafifPt);
    return fbBuilder.offset;
  }
  int addPtLat(double? ptLat) {
    fbBuilder.addFloat64(5, ptLat);
    return fbBuilder.offset;
  }
  int addPtLon(double? ptLon) {
    fbBuilder.addFloat64(6, ptLon);
    return fbBuilder.offset;
  }
  int addMagDec(double? magDec) {
    fbBuilder.addFloat64(7, magDec);
    return fbBuilder.offset;
  }
  int addNavaidLength(double? navaidLength) {
    fbBuilder.addFloat64(8, navaidLength);
    return fbBuilder.offset;
  }
  int addNavaidOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addAltCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addNavaidTypeOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RoutePointsAbridgedObjectBuilder extends fb.ObjectBuilder {
  final int? _ptSequenceId;
  final String? _ptTypeCode;
  final String? _ptTypeName;
  final String? _waypointName;
  final bool? _dafifPt;
  final double? _ptLat;
  final double? _ptLon;
  final double? _magDec;
  final double? _navaidLength;
  final String? _navaid;
  final String? _countryCode;
  final String? _altCountryCode;
  final String? _navaidType;

  RoutePointsAbridgedObjectBuilder({
    int? ptSequenceId,
    String? ptTypeCode,
    String? ptTypeName,
    String? waypointName,
    bool? dafifPt,
    double? ptLat,
    double? ptLon,
    double? magDec,
    double? navaidLength,
    String? navaid,
    String? countryCode,
    String? altCountryCode,
    String? navaidType,
  })
      : _ptSequenceId = ptSequenceId,
        _ptTypeCode = ptTypeCode,
        _ptTypeName = ptTypeName,
        _waypointName = waypointName,
        _dafifPt = dafifPt,
        _ptLat = ptLat,
        _ptLon = ptLon,
        _magDec = magDec,
        _navaidLength = navaidLength,
        _navaid = navaid,
        _countryCode = countryCode,
        _altCountryCode = altCountryCode,
        _navaidType = navaidType;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ptTypeCodeOffset = _ptTypeCode == null ? null
        : fbBuilder.writeString(_ptTypeCode!);
    final int? ptTypeNameOffset = _ptTypeName == null ? null
        : fbBuilder.writeString(_ptTypeName!);
    final int? waypointNameOffset = _waypointName == null ? null
        : fbBuilder.writeString(_waypointName!);
    final int? navaidOffset = _navaid == null ? null
        : fbBuilder.writeString(_navaid!);
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? altCountryCodeOffset = _altCountryCode == null ? null
        : fbBuilder.writeString(_altCountryCode!);
    final int? navaidTypeOffset = _navaidType == null ? null
        : fbBuilder.writeString(_navaidType!);
    fbBuilder.startTable(13);
    fbBuilder.addInt32(0, _ptSequenceId);
    fbBuilder.addOffset(1, ptTypeCodeOffset);
    fbBuilder.addOffset(2, ptTypeNameOffset);
    fbBuilder.addOffset(3, waypointNameOffset);
    fbBuilder.addBool(4, _dafifPt);
    fbBuilder.addFloat64(5, _ptLat);
    fbBuilder.addFloat64(6, _ptLon);
    fbBuilder.addFloat64(7, _magDec);
    fbBuilder.addFloat64(8, _navaidLength);
    fbBuilder.addOffset(9, navaidOffset);
    fbBuilder.addOffset(10, countryCodeOffset);
    fbBuilder.addOffset(11, altCountryCodeOffset);
    fbBuilder.addOffset(12, navaidTypeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
