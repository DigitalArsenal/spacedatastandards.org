// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection of tanker aircraft associated with this Air Event.
class AirEventTankersAbridged {
  AirEventTankersAbridged._(this._bc, this._bcOffset);
  factory AirEventTankersAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AirEventTankersAbridged> reader = _AirEventTankersAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The UDL ID of the aircraft sortie this tanker is associated with for this event.
  ///  Example: /// Example: d833a4bc-756b-41d5-8845-f146fe563387
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idTankerSortie => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  The UDL ID of the mission this tanker is associated with for this event.
  ///  Example: /// Example: edef700c-9917-4dbf-a153-89ffd4446fe9
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idTankerMission => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The UDL ID of the airfield this tanker is associated with for this event.
  ///  Example: /// Example: b33955d2-67d3-42be-8316-263e284ce6cc
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idTankerAirfield => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Optional tanker identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  ///  Example: /// Example: ca673c580fb949a5b733f0e0b67ffab2
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get externalTankerId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Coordination record identifier of this tanker.
  ///  Example: /// Example: TTC601
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get tankerCoord => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The Model Design Series designation of this tanker.
  ///  Example: /// Example: KC135R
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get tankerMds => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The Air Mobility Command (AMC) mission identifier of this tanker.
  ///  Example: /// Example: 8PH000B1S052
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get amcTankerMissionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Alternate mission identifier of this tanker provided by source.
  ///  Example: /// Example: 1UN05201L121
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get altTankerMissionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The call sign assigned to this tanker.
  ///  Example: /// Example: BAKER
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get tankerCallSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The wing or unit that owns this tanker.
  ///  Example: /// Example: 117ARW
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get tankerOwner => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The name and/or number of the point of contact for this tanker.
  ///  Example: /// Example: JOHN SMITH (555)555-5555
  ///  Constraints: Minimum length = 0, Maximum length = 68
  String? get tankerPoc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Identifies the itinerary point of a mission that this tanker is linked to.
  ///  Example: /// Example: 825
  ///  Constraints: No constraints specified.
  int get tankerLegNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  Location the tanker has been deployed to in preparation for an air refueling event.
  ///  Example: /// Example: KOFF
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get tankerDeployedIcao => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Type of fuel delivery method used by the tanker during an air refueling event (BOOM, DROGUE, BOTH).
  ///  Example: /// Example: DROGUE
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get tankerDeliveryMethod => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Total weight of the fuel transferred from this tanker during an air refueling event, in pounds.
  ///  Example: /// Example: 15000000.1
  ///  Constraints: No constraints specified.
  double get fuelOff => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Position of this tanker within a group of tankers in an air refueling event.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get tankerCellPosition => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  Type of fuel being transferred from the tanker in an air refueling event.
  ///  Example: /// Example: JP8
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get tankerFuelType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Flag indicating that this tanker is flying a dual role mission in an air refueling event.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get dualRole => const fb.BoolReader().vTableGet(_bc, _bcOffset, 38, false);

  @override
  String toString() {
    return 'AirEventTankersAbridged{idTankerSortie: ${idTankerSortie}, idTankerMission: ${idTankerMission}, idTankerAirfield: ${idTankerAirfield}, externalTankerId: ${externalTankerId}, tankerCoord: ${tankerCoord}, tankerMds: ${tankerMds}, amcTankerMissionId: ${amcTankerMissionId}, altTankerMissionId: ${altTankerMissionId}, tankerCallSign: ${tankerCallSign}, tankerOwner: ${tankerOwner}, tankerPoc: ${tankerPoc}, tankerLegNum: ${tankerLegNum}, tankerDeployedIcao: ${tankerDeployedIcao}, tankerDeliveryMethod: ${tankerDeliveryMethod}, fuelOff: ${fuelOff}, tankerCellPosition: ${tankerCellPosition}, tankerFuelType: ${tankerFuelType}, dualRole: ${dualRole}}';
  }
}

class _AirEventTankersAbridgedReader extends fb.TableReader<AirEventTankersAbridged> {
  const _AirEventTankersAbridgedReader();

  @override
  AirEventTankersAbridged createObject(fb.BufferContext bc, int offset) => 
    AirEventTankersAbridged._(bc, offset);
}

class AirEventTankersAbridgedBuilder {
  AirEventTankersAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(18);
  }

  int addIdTankerSortieOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdTankerMissionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIdTankerAirfieldOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addExternalTankerIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTankerCoordOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTankerMdsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addAmcTankerMissionIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addAltTankerMissionIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addTankerCallSignOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addTankerOwnerOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addTankerPocOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addTankerLegNum(int? tankerLegNum) {
    fbBuilder.addInt32(11, tankerLegNum);
    return fbBuilder.offset;
  }
  int addTankerDeployedIcaoOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addTankerDeliveryMethodOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addFuelOff(double? fuelOff) {
    fbBuilder.addFloat64(14, fuelOff);
    return fbBuilder.offset;
  }
  int addTankerCellPosition(int? tankerCellPosition) {
    fbBuilder.addInt32(15, tankerCellPosition);
    return fbBuilder.offset;
  }
  int addTankerFuelTypeOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addDualRole(bool? dualRole) {
    fbBuilder.addBool(17, dualRole);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AirEventTankersAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _idTankerSortie;
  final String? _idTankerMission;
  final String? _idTankerAirfield;
  final String? _externalTankerId;
  final String? _tankerCoord;
  final String? _tankerMds;
  final String? _amcTankerMissionId;
  final String? _altTankerMissionId;
  final String? _tankerCallSign;
  final String? _tankerOwner;
  final String? _tankerPoc;
  final int? _tankerLegNum;
  final String? _tankerDeployedIcao;
  final String? _tankerDeliveryMethod;
  final double? _fuelOff;
  final int? _tankerCellPosition;
  final String? _tankerFuelType;
  final bool? _dualRole;

  AirEventTankersAbridgedObjectBuilder({
    String? idTankerSortie,
    String? idTankerMission,
    String? idTankerAirfield,
    String? externalTankerId,
    String? tankerCoord,
    String? tankerMds,
    String? amcTankerMissionId,
    String? altTankerMissionId,
    String? tankerCallSign,
    String? tankerOwner,
    String? tankerPoc,
    int? tankerLegNum,
    String? tankerDeployedIcao,
    String? tankerDeliveryMethod,
    double? fuelOff,
    int? tankerCellPosition,
    String? tankerFuelType,
    bool? dualRole,
  })
      : _idTankerSortie = idTankerSortie,
        _idTankerMission = idTankerMission,
        _idTankerAirfield = idTankerAirfield,
        _externalTankerId = externalTankerId,
        _tankerCoord = tankerCoord,
        _tankerMds = tankerMds,
        _amcTankerMissionId = amcTankerMissionId,
        _altTankerMissionId = altTankerMissionId,
        _tankerCallSign = tankerCallSign,
        _tankerOwner = tankerOwner,
        _tankerPoc = tankerPoc,
        _tankerLegNum = tankerLegNum,
        _tankerDeployedIcao = tankerDeployedIcao,
        _tankerDeliveryMethod = tankerDeliveryMethod,
        _fuelOff = fuelOff,
        _tankerCellPosition = tankerCellPosition,
        _tankerFuelType = tankerFuelType,
        _dualRole = dualRole;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idTankerSortieOffset = _idTankerSortie == null ? null
        : fbBuilder.writeString(_idTankerSortie!);
    final int? idTankerMissionOffset = _idTankerMission == null ? null
        : fbBuilder.writeString(_idTankerMission!);
    final int? idTankerAirfieldOffset = _idTankerAirfield == null ? null
        : fbBuilder.writeString(_idTankerAirfield!);
    final int? externalTankerIdOffset = _externalTankerId == null ? null
        : fbBuilder.writeString(_externalTankerId!);
    final int? tankerCoordOffset = _tankerCoord == null ? null
        : fbBuilder.writeString(_tankerCoord!);
    final int? tankerMdsOffset = _tankerMds == null ? null
        : fbBuilder.writeString(_tankerMds!);
    final int? amcTankerMissionIdOffset = _amcTankerMissionId == null ? null
        : fbBuilder.writeString(_amcTankerMissionId!);
    final int? altTankerMissionIdOffset = _altTankerMissionId == null ? null
        : fbBuilder.writeString(_altTankerMissionId!);
    final int? tankerCallSignOffset = _tankerCallSign == null ? null
        : fbBuilder.writeString(_tankerCallSign!);
    final int? tankerOwnerOffset = _tankerOwner == null ? null
        : fbBuilder.writeString(_tankerOwner!);
    final int? tankerPocOffset = _tankerPoc == null ? null
        : fbBuilder.writeString(_tankerPoc!);
    final int? tankerDeployedIcaoOffset = _tankerDeployedIcao == null ? null
        : fbBuilder.writeString(_tankerDeployedIcao!);
    final int? tankerDeliveryMethodOffset = _tankerDeliveryMethod == null ? null
        : fbBuilder.writeString(_tankerDeliveryMethod!);
    final int? tankerFuelTypeOffset = _tankerFuelType == null ? null
        : fbBuilder.writeString(_tankerFuelType!);
    fbBuilder.startTable(18);
    fbBuilder.addOffset(0, idTankerSortieOffset);
    fbBuilder.addOffset(1, idTankerMissionOffset);
    fbBuilder.addOffset(2, idTankerAirfieldOffset);
    fbBuilder.addOffset(3, externalTankerIdOffset);
    fbBuilder.addOffset(4, tankerCoordOffset);
    fbBuilder.addOffset(5, tankerMdsOffset);
    fbBuilder.addOffset(6, amcTankerMissionIdOffset);
    fbBuilder.addOffset(7, altTankerMissionIdOffset);
    fbBuilder.addOffset(8, tankerCallSignOffset);
    fbBuilder.addOffset(9, tankerOwnerOffset);
    fbBuilder.addOffset(10, tankerPocOffset);
    fbBuilder.addInt32(11, _tankerLegNum);
    fbBuilder.addOffset(12, tankerDeployedIcaoOffset);
    fbBuilder.addOffset(13, tankerDeliveryMethodOffset);
    fbBuilder.addFloat64(14, _fuelOff);
    fbBuilder.addInt32(15, _tankerCellPosition);
    fbBuilder.addOffset(16, tankerFuelTypeOffset);
    fbBuilder.addBool(17, _dualRole);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
