// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
class AircraftMissionTaskingIngest {
  AircraftMissionTaskingIngest._(this._bc, this._bcOffset);
  factory AircraftMissionTaskingIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AircraftMissionTaskingIngest> reader = _AircraftMissionTaskingIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The country code responsible for conducting this aircraft mission tasking for the exercise or operation.
  ///  Example: /// Example: US
  ///  Constraints: Minimum length = 1, Maximum length = 4
  String? get countryCode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  The service tasked with conducting this aircraft mission tasking for the exercise or operation.
  ///  Example: /// Example: A
  ///  Constraints: Minimum length = 1, Maximum length = 1
  String? get taskedService => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The designator of the unit that is tasked to perform this aircraft mission tasking.
  ///  Example: /// Example: AMPHIB5DIV
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get unitDesignator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The tasked units location expressed as an ICAO or a place name.
  ///  Example: /// Example: ICAO:KXXQ
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get unitLocName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  An indicator of whether a mission is or will be a residual mission.
  ///  Example: /// Example: N
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get resMsnInd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The AMC number assigned to identify one aircraft from another.
  ///  Example: /// Example: AMC:JJXD123HA045
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get amcMsnNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The identifier for the composite set of missions for this operation/exercise.
  ///  Example: /// Example: ZZ
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get pkgId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The commander responsible for the planning and execution of the forces necessary to achieve desired objectives.
  ///  Example: /// Example: MC
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get msnCommander => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The mission number assigned to this mission.
  ///  Example: /// Example: D123HA
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get msnNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The code for the preferred type or designator for a tasked air mission.
  ///  Example: /// Example: CAS
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get priMsnType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The code for the alternative type of a tasked air mission.
  ///  Example: /// Example: SEAD
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get secMsnType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The readiness status expressed in time (minutes) for an aircraft to be airborne after the launch order is received or the time required for a missile unit to assume battle stations.
  ///  Example: /// Example: 30
  ///  Constraints: No constraints specified.
  int get alertStatus => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  The location or name specified for the departure of the tasked air mission.
  ///  Example: /// Example: ICAO:KBIF
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get depLocName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  The departure location specified in UTM (100 meter) coordinates for the tasked air mission.
  ///  Example: /// Example: 32WDL123123
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get depLocUtm => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  WGS-84 latitude of the departure location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
  ///  Example: /// Example: 35.123
  ///  Constraints: No constraints specified.
  double get depLocLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  WGS-84 longitude of the departure location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
  ///  Example: /// Example: 79.2354
  ///  Constraints: No constraints specified.
  double get depLocLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  The time of departure for the tasked air mission in ISO8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2021-10-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get depTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  An array of locations specified for the recovery of the tasked air mission represented by varying formats.
  ///  Example: /// Example: ['ARRLOC:KBIF', 'ARRLOC:KDZ7']
  ///  Constraints: No constraints specified.
  List<String>? get rcvyLocName => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 38);
  ///  An array of recovery locations specified in UTM (100 meter) coordinates for the tasked air mission.
  ///  Example: /// Example: ['ARRUTMO:32WDL123123', 'ARRUTMO:32WDL321321']
  ///  Constraints: No constraints specified.
  List<String>? get rcvyLocUtm => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 40);
  ///  An array of WGS-84 latitude of the recovery locations, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
  ///  Example: /// Example: [48.8584, 40.7554]
  ///  Constraints: No constraints specified.
  List<String>? get rcvyLocLat => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 42);
  ///  An array of WGS-84 longitude of the recovery locations, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
  ///  Example: /// Example: [2.2945, -73.9866]
  ///  Constraints: No constraints specified.
  List<String>? get rcvyLocLon => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 44);
  ///  An array of recovery times for the tasked air mission in ISO8601 UTC format with millisecond precision.
  ///  Example: /// Example: ['2021-10-25T16:00:00.234Z', '2021-10-26T16:00:00.234Z']
  ///  Constraints: No constraints specified.
  List<String>? get rcvyTime => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 46);
  ///  A collection of the individual aircraft assigned to this aircraft mission tasking.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get indActasking => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 48);
  ///  A collection of aircraft mission location information for this aircraft mission tasking.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get acMsnLocSeg => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 50);

  @override
  String toString() {
    return 'AircraftMissionTaskingIngest{countryCode: ${countryCode}, taskedService: ${taskedService}, unitDesignator: ${unitDesignator}, unitLocName: ${unitLocName}, resMsnInd: ${resMsnInd}, amcMsnNum: ${amcMsnNum}, pkgId: ${pkgId}, msnCommander: ${msnCommander}, msnNum: ${msnNum}, priMsnType: ${priMsnType}, secMsnType: ${secMsnType}, alertStatus: ${alertStatus}, depLocName: ${depLocName}, depLocUtm: ${depLocUtm}, depLocLat: ${depLocLat}, depLocLon: ${depLocLon}, depTime: ${depTime}, rcvyLocName: ${rcvyLocName}, rcvyLocUtm: ${rcvyLocUtm}, rcvyLocLat: ${rcvyLocLat}, rcvyLocLon: ${rcvyLocLon}, rcvyTime: ${rcvyTime}, indActasking: ${indActasking}, acMsnLocSeg: ${acMsnLocSeg}}';
  }
}

class _AircraftMissionTaskingIngestReader extends fb.TableReader<AircraftMissionTaskingIngest> {
  const _AircraftMissionTaskingIngestReader();

  @override
  AircraftMissionTaskingIngest createObject(fb.BufferContext bc, int offset) => 
    AircraftMissionTaskingIngest._(bc, offset);
}

class AircraftMissionTaskingIngestBuilder {
  AircraftMissionTaskingIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(24);
  }

  int addCountryCodeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTaskedServiceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addUnitDesignatorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addUnitLocNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addResMsnIndOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addAmcMsnNumOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addPkgIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addMsnCommanderOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addMsnNumOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addPriMsnTypeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addSecMsnTypeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addAlertStatus(int? alertStatus) {
    fbBuilder.addInt32(11, alertStatus);
    return fbBuilder.offset;
  }
  int addDepLocNameOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addDepLocUtmOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addDepLocLat(double? depLocLat) {
    fbBuilder.addFloat64(14, depLocLat);
    return fbBuilder.offset;
  }
  int addDepLocLon(double? depLocLon) {
    fbBuilder.addFloat64(15, depLocLon);
    return fbBuilder.offset;
  }
  int addDepTimeOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addRcvyLocNameOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addRcvyLocUtmOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addRcvyLocLatOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addRcvyLocLonOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addRcvyTimeOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addIndActaskingOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addAcMsnLocSegOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AircraftMissionTaskingIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _countryCode;
  final String? _taskedService;
  final String? _unitDesignator;
  final String? _unitLocName;
  final String? _resMsnInd;
  final String? _amcMsnNum;
  final String? _pkgId;
  final String? _msnCommander;
  final String? _msnNum;
  final String? _priMsnType;
  final String? _secMsnType;
  final int? _alertStatus;
  final String? _depLocName;
  final String? _depLocUtm;
  final double? _depLocLat;
  final double? _depLocLon;
  final String? _depTime;
  final List<String>? _rcvyLocName;
  final List<String>? _rcvyLocUtm;
  final List<String>? _rcvyLocLat;
  final List<String>? _rcvyLocLon;
  final List<String>? _rcvyTime;
  final List<String>? _indActasking;
  final List<String>? _acMsnLocSeg;

  AircraftMissionTaskingIngestObjectBuilder({
    String? countryCode,
    String? taskedService,
    String? unitDesignator,
    String? unitLocName,
    String? resMsnInd,
    String? amcMsnNum,
    String? pkgId,
    String? msnCommander,
    String? msnNum,
    String? priMsnType,
    String? secMsnType,
    int? alertStatus,
    String? depLocName,
    String? depLocUtm,
    double? depLocLat,
    double? depLocLon,
    String? depTime,
    List<String>? rcvyLocName,
    List<String>? rcvyLocUtm,
    List<String>? rcvyLocLat,
    List<String>? rcvyLocLon,
    List<String>? rcvyTime,
    List<String>? indActasking,
    List<String>? acMsnLocSeg,
  })
      : _countryCode = countryCode,
        _taskedService = taskedService,
        _unitDesignator = unitDesignator,
        _unitLocName = unitLocName,
        _resMsnInd = resMsnInd,
        _amcMsnNum = amcMsnNum,
        _pkgId = pkgId,
        _msnCommander = msnCommander,
        _msnNum = msnNum,
        _priMsnType = priMsnType,
        _secMsnType = secMsnType,
        _alertStatus = alertStatus,
        _depLocName = depLocName,
        _depLocUtm = depLocUtm,
        _depLocLat = depLocLat,
        _depLocLon = depLocLon,
        _depTime = depTime,
        _rcvyLocName = rcvyLocName,
        _rcvyLocUtm = rcvyLocUtm,
        _rcvyLocLat = rcvyLocLat,
        _rcvyLocLon = rcvyLocLon,
        _rcvyTime = rcvyTime,
        _indActasking = indActasking,
        _acMsnLocSeg = acMsnLocSeg;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? countryCodeOffset = _countryCode == null ? null
        : fbBuilder.writeString(_countryCode!);
    final int? taskedServiceOffset = _taskedService == null ? null
        : fbBuilder.writeString(_taskedService!);
    final int? unitDesignatorOffset = _unitDesignator == null ? null
        : fbBuilder.writeString(_unitDesignator!);
    final int? unitLocNameOffset = _unitLocName == null ? null
        : fbBuilder.writeString(_unitLocName!);
    final int? resMsnIndOffset = _resMsnInd == null ? null
        : fbBuilder.writeString(_resMsnInd!);
    final int? amcMsnNumOffset = _amcMsnNum == null ? null
        : fbBuilder.writeString(_amcMsnNum!);
    final int? pkgIdOffset = _pkgId == null ? null
        : fbBuilder.writeString(_pkgId!);
    final int? msnCommanderOffset = _msnCommander == null ? null
        : fbBuilder.writeString(_msnCommander!);
    final int? msnNumOffset = _msnNum == null ? null
        : fbBuilder.writeString(_msnNum!);
    final int? priMsnTypeOffset = _priMsnType == null ? null
        : fbBuilder.writeString(_priMsnType!);
    final int? secMsnTypeOffset = _secMsnType == null ? null
        : fbBuilder.writeString(_secMsnType!);
    final int? depLocNameOffset = _depLocName == null ? null
        : fbBuilder.writeString(_depLocName!);
    final int? depLocUtmOffset = _depLocUtm == null ? null
        : fbBuilder.writeString(_depLocUtm!);
    final int? depTimeOffset = _depTime == null ? null
        : fbBuilder.writeString(_depTime!);
    final int? rcvyLocNameOffset = _rcvyLocName == null ? null
        : fbBuilder.writeList(_rcvyLocName!.map(fbBuilder.writeString).toList());
    final int? rcvyLocUtmOffset = _rcvyLocUtm == null ? null
        : fbBuilder.writeList(_rcvyLocUtm!.map(fbBuilder.writeString).toList());
    final int? rcvyLocLatOffset = _rcvyLocLat == null ? null
        : fbBuilder.writeList(_rcvyLocLat!.map(fbBuilder.writeString).toList());
    final int? rcvyLocLonOffset = _rcvyLocLon == null ? null
        : fbBuilder.writeList(_rcvyLocLon!.map(fbBuilder.writeString).toList());
    final int? rcvyTimeOffset = _rcvyTime == null ? null
        : fbBuilder.writeList(_rcvyTime!.map(fbBuilder.writeString).toList());
    final int? indActaskingOffset = _indActasking == null ? null
        : fbBuilder.writeList(_indActasking!.map(fbBuilder.writeString).toList());
    final int? acMsnLocSegOffset = _acMsnLocSeg == null ? null
        : fbBuilder.writeList(_acMsnLocSeg!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(24);
    fbBuilder.addOffset(0, countryCodeOffset);
    fbBuilder.addOffset(1, taskedServiceOffset);
    fbBuilder.addOffset(2, unitDesignatorOffset);
    fbBuilder.addOffset(3, unitLocNameOffset);
    fbBuilder.addOffset(4, resMsnIndOffset);
    fbBuilder.addOffset(5, amcMsnNumOffset);
    fbBuilder.addOffset(6, pkgIdOffset);
    fbBuilder.addOffset(7, msnCommanderOffset);
    fbBuilder.addOffset(8, msnNumOffset);
    fbBuilder.addOffset(9, priMsnTypeOffset);
    fbBuilder.addOffset(10, secMsnTypeOffset);
    fbBuilder.addInt32(11, _alertStatus);
    fbBuilder.addOffset(12, depLocNameOffset);
    fbBuilder.addOffset(13, depLocUtmOffset);
    fbBuilder.addFloat64(14, _depLocLat);
    fbBuilder.addFloat64(15, _depLocLon);
    fbBuilder.addOffset(16, depTimeOffset);
    fbBuilder.addOffset(17, rcvyLocNameOffset);
    fbBuilder.addOffset(18, rcvyLocUtmOffset);
    fbBuilder.addOffset(19, rcvyLocLatOffset);
    fbBuilder.addOffset(20, rcvyLocLonOffset);
    fbBuilder.addOffset(21, rcvyTimeOffset);
    fbBuilder.addOffset(22, indActaskingOffset);
    fbBuilder.addOffset(23, acMsnLocSegOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
