// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection of air refueling events occurring on this flight.
class FlightPlanAirRefuelEventsAbridged {
  FlightPlanAirRefuelEventsAbridged._(this._bc, this._bcOffset);
  factory FlightPlanAirRefuelEventsAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FlightPlanAirRefuelEventsAbridged> reader = _FlightPlanAirRefuelEventsAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Additional degrade for air refueling, cumulative with fuelDegrade field percent.
  ///  Example: /// Example: 3.1
  ///  Constraints: No constraints specified.
  double get arDegrade => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 4, 0.0);
  ///  The number of this air refueling event within the flight plan.
  ///  Example: /// Example: 2
  ///  Constraints: No constraints specified.
  int get arNum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  ///  Fuel onloaded (use positive numbers) or fuel offloaded (use negative numbers) in pounds.
  ///  Example: /// Example: 1500.1
  ///  Constraints: No constraints specified.
  double get arExchangedFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  Fuel required to fly from air refueling exit point to air refueling divert alternate airfield in pounds.
  ///  Example: /// Example: 143000.1
  ///  Constraints: No constraints specified.
  double get divertFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Fuel remaining at the air refueling exit in pounds.
  ///  Example: /// Example: 160000.1
  ///  Constraints: No constraints specified.
  double get exitFuel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);

  @override
  String toString() {
    return 'FlightPlanAirRefuelEventsAbridged{arDegrade: ${arDegrade}, arNum: ${arNum}, arExchangedFuel: ${arExchangedFuel}, divertFuel: ${divertFuel}, exitFuel: ${exitFuel}}';
  }
}

class _FlightPlanAirRefuelEventsAbridgedReader extends fb.TableReader<FlightPlanAirRefuelEventsAbridged> {
  const _FlightPlanAirRefuelEventsAbridgedReader();

  @override
  FlightPlanAirRefuelEventsAbridged createObject(fb.BufferContext bc, int offset) => 
    FlightPlanAirRefuelEventsAbridged._(bc, offset);
}

class FlightPlanAirRefuelEventsAbridgedBuilder {
  FlightPlanAirRefuelEventsAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addArDegrade(double? arDegrade) {
    fbBuilder.addFloat64(0, arDegrade);
    return fbBuilder.offset;
  }
  int addArNum(int? arNum) {
    fbBuilder.addInt32(1, arNum);
    return fbBuilder.offset;
  }
  int addArExchangedFuel(double? arExchangedFuel) {
    fbBuilder.addFloat64(2, arExchangedFuel);
    return fbBuilder.offset;
  }
  int addDivertFuel(double? divertFuel) {
    fbBuilder.addFloat64(3, divertFuel);
    return fbBuilder.offset;
  }
  int addExitFuel(double? exitFuel) {
    fbBuilder.addFloat64(4, exitFuel);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FlightPlanAirRefuelEventsAbridgedObjectBuilder extends fb.ObjectBuilder {
  final double? _arDegrade;
  final int? _arNum;
  final double? _arExchangedFuel;
  final double? _divertFuel;
  final double? _exitFuel;

  FlightPlanAirRefuelEventsAbridgedObjectBuilder({
    double? arDegrade,
    int? arNum,
    double? arExchangedFuel,
    double? divertFuel,
    double? exitFuel,
  })
      : _arDegrade = arDegrade,
        _arNum = arNum,
        _arExchangedFuel = arExchangedFuel,
        _divertFuel = divertFuel,
        _exitFuel = exitFuel;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(5);
    fbBuilder.addFloat64(0, _arDegrade);
    fbBuilder.addInt32(1, _arNum);
    fbBuilder.addFloat64(2, _arExchangedFuel);
    fbBuilder.addFloat64(3, _divertFuel);
    fbBuilder.addFloat64(4, _exitFuel);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
