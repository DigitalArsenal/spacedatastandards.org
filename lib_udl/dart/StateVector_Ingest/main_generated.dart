// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class StateVectorIngestReferenceFrameEnum {
  final int value;
  const StateVectorIngestReferenceFrameEnum._(this.value);

  factory StateVectorIngestReferenceFrameEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum StateVectorIngestReferenceFrameEnum');
    }
    return result;
  }

  static StateVectorIngestReferenceFrameEnum? _createOrNull(int? value) => 
      value == null ? null : StateVectorIngestReferenceFrameEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const StateVectorIngestReferenceFrameEnum J2000 = StateVectorIngestReferenceFrameEnum._(0);

  ///  No description available.
  static const StateVectorIngestReferenceFrameEnum EFG_TDR = StateVectorIngestReferenceFrameEnum._(1);

  ///  No description available.
  static const StateVectorIngestReferenceFrameEnum ECR_ECEF = StateVectorIngestReferenceFrameEnum._(2);

  ///  No description available.
  static const StateVectorIngestReferenceFrameEnum TEME = StateVectorIngestReferenceFrameEnum._(3);

  ///  No description available.
  static const StateVectorIngestReferenceFrameEnum ITRF = StateVectorIngestReferenceFrameEnum._(4);

  ///  No description available.
  static const StateVectorIngestReferenceFrameEnum GCRF = StateVectorIngestReferenceFrameEnum._(5);
  static const Map<int, StateVectorIngestReferenceFrameEnum> values = {
    0: J2000,
    1: EFG_TDR,
    2: ECR_ECEF,
    3: TEME,
    4: ITRF,
    5: GCRF};

  static const fb.Reader<StateVectorIngestReferenceFrameEnum> reader = _StateVectorIngestReferenceFrameEnumReader();

  @override
  String toString() {
    return 'StateVectorIngestReferenceFrameEnum{value: $value}';
  }
}

class _StateVectorIngestReferenceFrameEnumReader extends fb.Reader<StateVectorIngestReferenceFrameEnum> {
  const _StateVectorIngestReferenceFrameEnumReader();

  @override
  int get size => 1;

  @override
  StateVectorIngestReferenceFrameEnum read(fb.BufferContext bc, int offset) =>
      StateVectorIngestReferenceFrameEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class StateVectorIngestCovReferenceFrameEnum {
  final int value;
  const StateVectorIngestCovReferenceFrameEnum._(this.value);

  factory StateVectorIngestCovReferenceFrameEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum StateVectorIngestCovReferenceFrameEnum');
    }
    return result;
  }

  static StateVectorIngestCovReferenceFrameEnum? _createOrNull(int? value) => 
      value == null ? null : StateVectorIngestCovReferenceFrameEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const StateVectorIngestCovReferenceFrameEnum J2000 = StateVectorIngestCovReferenceFrameEnum._(0);

  ///  No description available.
  static const StateVectorIngestCovReferenceFrameEnum UVW = StateVectorIngestCovReferenceFrameEnum._(1);
  static const Map<int, StateVectorIngestCovReferenceFrameEnum> values = {
    0: J2000,
    1: UVW};

  static const fb.Reader<StateVectorIngestCovReferenceFrameEnum> reader = _StateVectorIngestCovReferenceFrameEnumReader();

  @override
  String toString() {
    return 'StateVectorIngestCovReferenceFrameEnum{value: $value}';
  }
}

class _StateVectorIngestCovReferenceFrameEnumReader extends fb.Reader<StateVectorIngestCovReferenceFrameEnum> {
  const _StateVectorIngestCovReferenceFrameEnumReader();

  @override
  int get size => 1;

  @override
  StateVectorIngestCovReferenceFrameEnum read(fb.BufferContext bc, int offset) =>
      StateVectorIngestCovReferenceFrameEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class StateVectorIngestDataModeEnum {
  final int value;
  const StateVectorIngestDataModeEnum._(this.value);

  factory StateVectorIngestDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum StateVectorIngestDataModeEnum');
    }
    return result;
  }

  static StateVectorIngestDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : StateVectorIngestDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const StateVectorIngestDataModeEnum REAL = StateVectorIngestDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const StateVectorIngestDataModeEnum TEST = StateVectorIngestDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const StateVectorIngestDataModeEnum SIMULATED = StateVectorIngestDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const StateVectorIngestDataModeEnum EXERCISE = StateVectorIngestDataModeEnum._(3);
  static const Map<int, StateVectorIngestDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<StateVectorIngestDataModeEnum> reader = _StateVectorIngestDataModeEnumReader();

  @override
  String toString() {
    return 'StateVectorIngestDataModeEnum{value: $value}';
  }
}

class _StateVectorIngestDataModeEnumReader extends fb.Reader<StateVectorIngestDataModeEnum> {
  const _StateVectorIngestDataModeEnumReader();

  @override
  int get size => 1;

  @override
  StateVectorIngestDataModeEnum read(fb.BufferContext bc, int offset) =>
      StateVectorIngestDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class StateVectorIngestSourcedDataTypesEnum {
  final int value;
  const StateVectorIngestSourcedDataTypesEnum._(this.value);

  factory StateVectorIngestSourcedDataTypesEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum StateVectorIngestSourcedDataTypesEnum');
    }
    return result;
  }

  static StateVectorIngestSourcedDataTypesEnum? _createOrNull(int? value) => 
      value == null ? null : StateVectorIngestSourcedDataTypesEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const StateVectorIngestSourcedDataTypesEnum EO = StateVectorIngestSourcedDataTypesEnum._(0);

  ///  No description available.
  static const StateVectorIngestSourcedDataTypesEnum RADAR = StateVectorIngestSourcedDataTypesEnum._(1);

  ///  No description available.
  static const StateVectorIngestSourcedDataTypesEnum RF = StateVectorIngestSourcedDataTypesEnum._(2);

  ///  No description available.
  static const StateVectorIngestSourcedDataTypesEnum DOA = StateVectorIngestSourcedDataTypesEnum._(3);

  ///  No description available.
  static const StateVectorIngestSourcedDataTypesEnum ELSET = StateVectorIngestSourcedDataTypesEnum._(4);

  ///  No description available.
  static const StateVectorIngestSourcedDataTypesEnum SV = StateVectorIngestSourcedDataTypesEnum._(5);
  static const Map<int, StateVectorIngestSourcedDataTypesEnum> values = {
    0: EO,
    1: RADAR,
    2: RF,
    3: DOA,
    4: ELSET,
    5: SV};

  static const fb.Reader<StateVectorIngestSourcedDataTypesEnum> reader = _StateVectorIngestSourcedDataTypesEnumReader();

  @override
  String toString() {
    return 'StateVectorIngestSourcedDataTypesEnum{value: $value}';
  }
}

class _StateVectorIngestSourcedDataTypesEnumReader extends fb.Reader<StateVectorIngestSourcedDataTypesEnum> {
  const _StateVectorIngestSourcedDataTypesEnumReader();

  @override
  int get size => 1;

  @override
  StateVectorIngestSourcedDataTypesEnum read(fb.BufferContext bc, int offset) =>
      StateVectorIngestSourcedDataTypesEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// This service provides operations for querying and manipulation of state vectors for OnOrbit objects. State vectors are cartesian vectors of position (r) and velocity (v) that, together with their time (epoch) (t), uniquely determine the trajectory of the orbiting body in space. J2000 is the preferred coordinate frame for all state vector positions/velocities in UDL, but in some cases data may be in another frame depending on the provider and/or datatype. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
class StateVectorIngest {
  StateVectorIngest._(this._bc, this._bcOffset);
  factory StateVectorIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StateVectorIngest> reader = _StateVectorIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: STATEVECTOR-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get idStateVector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Time of validity for state vector in ISO 8601 UTC datetime format, with microsecond precision.
  ///  Example: /// Example: 2018-01-01T16:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get epoch => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The pedigree of state vector, or methods used for its generation to include state update/orbit determination, propagation from another state, or a state from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION, CONJUNCTION, FLIGHT_PLAN).
  ///  Example: /// Example: CONJUNCTION
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get pedigree => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Satellite/Catalog number of the target OnOrbit object.
  ///  Example: /// Example: 12
  ///  Constraints: No constraints specified.
  int get satNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  ///  Optional identifier provided by state vector source to indicate the target onorbit object of this state vector. This may be an internal identifier and not necessarily map to a valid satellite number.
  ///  Example: /// Example: ORIGOBJECT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origObjectId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Unique identifier of the OD solution record that produced this state vector. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queries as /udl/orbitdetermination/abc.
  ///  Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOrbitDetermination => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Boolean indicating this state vector was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get uct => const fb.BoolReader().vTableGet(_bc, _bcOffset, 20, false);
  ///  Cartesian X position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: -1118.577381
  ///  Constraints: No constraints specified.
  double get xpos => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Cartesian Y position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 3026.231084
  ///  Constraints: No constraints specified.
  double get ypos => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Cartesian Z position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 6167.831808
  ///  Constraints: No constraints specified.
  double get zpos => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Cartesian X velocity of target, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: -4.25242784
  ///  Constraints: No constraints specified.
  double get xvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Cartesian Y velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: 5.291107434
  ///  Constraints: No constraints specified.
  double get yvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Cartesian Z velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  ///  Example: /// Example: -3.356493869
  ///  Constraints: No constraints specified.
  double get zvel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  StateVectorIngestReferenceFrameEnum get referenceFrame => StateVectorIngestReferenceFrameEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 34, 0));
  ///  Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.  If the covReferenceFrame is null it is assumed to be J2000.
  ///  The array values (1-21) represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:
  ///  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;
  ///  x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
  ///  y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3
  ///  z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6
  ///  x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10
  ///  y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
  ///  z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;
  ///  The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
  ///  If additional covariance terms are included for DRAG, SRP, and/or THRUST, the matrix can be extended with the following order of elements:
  ///  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR
  ///  DRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;
  ///  SRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;
  ///  THR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;
  ///  Example: /// Example: [1.1, 2.2]
  ///  Constraints: No constraints specified.
  List<String>? get cov => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 36);
  ///  The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.
  ///  Example: /// Example: J2000
  ///  Constraints: Minimum length = 0, Maximum length = 24
  StateVectorIngestCovReferenceFrameEnum get covReferenceFrame => StateVectorIngestCovReferenceFrameEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 38, 0));
  ///  The method used to generate the covariance during the orbit determination (OD) that produced the state vector, or whether an arbitrary, non-calculated default value was used (CALCULATED, DEFAULT).
  ///  Example: /// Example: CALCULATED
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get covMethod => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The covariance matrix values represent the lower triangular half of the covariance matrix in terms of equinoctial elements.&nbsp; The size of the covariance matrix is dynamic.&nbsp; The values are outputted in order across each row, i.e.:
  ///  1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5
  ///  6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10
  ///  :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
  ///  :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
  ///  51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55
  ///  :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
  ///  :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
  ///  The ordering of values is as follows:
  ///  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp; Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp; B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...
  ///  Af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
  ///  Ag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3
  ///  L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6
  ///  N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10
  ///  Chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp; 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15
  ///  Psi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp; 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21
  ///  B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp; 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28
  ///  BDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp; 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36
  ///  AGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp; 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45
  ///  T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp; 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp; 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55
  ///  C1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp; 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp; 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66
  ///  C2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp; 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp; 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78
  ///  :
  ///  :
  ///  where C1, C2, etc, are the "consider parameters" that may be added to the covariance matrix.&nbsp; The covariance matrix will be as large as the last element/model parameter needed.&nbsp; In other words, if the DC solved for all 6 elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size will be set to 0x0, and no data will follow.&nbsp; The cov field should contain only the lower left triangle values from top left down to bottom right, in order.
  ///  Example: /// Example: [1.1, 2.2]
  ///  Constraints: No constraints specified.
  List<String>? get eqCov => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 42);
  ///  Cartesian X position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
  ///  Example: /// Example: -1145.688502
  ///  Constraints: No constraints specified.
  double get xposAlt1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Cartesian Y position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
  ///  Example: /// Example: 3020.729572
  ///  Constraints: No constraints specified.
  double get yposAlt1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Cartesian Z position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
  ///  Example: /// Example: 6165.55187
  ///  Constraints: No constraints specified.
  double get zposAlt1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Cartesian X velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
  ///  Example: /// Example: -4.270832252
  ///  Constraints: No constraints specified.
  double get xvelAlt1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Cartesian Y velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
  ///  Example: /// Example: 5.27074276
  ///  Constraints: No constraints specified.
  double get yvelAlt1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Cartesian Z velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
  ///  Example: /// Example: -3.365155181
  ///  Constraints: No constraints specified.
  double get zvelAlt1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  The reference frame of the alternate1 (Alt1) cartesian orbital state.
  ///  Example: /// Example: TEME
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get alt1ReferenceFrame => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Cartesian X position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
  ///  Example: /// Example: -1456.915926
  ///  Constraints: No constraints specified.
  double get xposAlt2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Cartesian Y position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
  ///  Example: /// Example: -2883.540406
  ///  Constraints: No constraints specified.
  double get yposAlt2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Cartesian Z position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
  ///  Example: /// Example: 6165.55187
  ///  Constraints: No constraints specified.
  double get zposAlt2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Cartesian X velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
  ///  Example: /// Example: -1.219814294
  ///  Constraints: No constraints specified.
  double get xvelAlt2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Cartesian Y velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
  ///  Example: /// Example: -6.602080212
  ///  Constraints: No constraints specified.
  double get yvelAlt2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Cartesian Z velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
  ///  Example: /// Example: -3.365155181
  ///  Constraints: No constraints specified.
  double get zvelAlt2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  The reference frame of the alternate2 (Alt2) cartesian orbital state.
  ///  Example: /// Example: EFG/TDR
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get alt2ReferenceFrame => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  One sigma position uncertainty, in kilometers.
  ///  Example: /// Example: 0.333399744452
  ///  Constraints: No constraints specified.
  double get posUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  One sigma velocity uncertainty, in kilometers/second.
  ///  Example: /// Example: 4e-06
  ///  Constraints: No constraints specified.
  double get velUnc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  The mass of the object, in kilograms.
  ///  Example: /// Example: 164.5
  ///  Constraints: No constraints specified.
  double get mass => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  The actual area of the object at it's largest cross-section, expressed in meters^2.
  ///  Example: /// Example: 5.065
  ///  Constraints: No constraints specified.
  double get area => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  Area-to-mass ratio coefficient for solar radiation pressure.
  ///  Example: /// Example: 0.0244394
  ///  Constraints: No constraints specified.
  double get solarRadPressCoeff => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).
  ///  Example: /// Example: 0.0224391269775
  ///  Constraints: No constraints specified.
  double get dragCoeff => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  The effective area of the object exposed to atmospheric drag, expressed in meters^2.
  ///  Example: /// Example: 4.739
  ///  Constraints: No constraints specified.
  double get dragArea => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Epoch revolution number.
  ///  Example: /// Example: 7205
  ///  Constraints: No constraints specified.
  int get revNo => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 86, 0);
  ///  Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96 24Z,24T.
  ///  Example: /// Example: EGM-96
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get geopotentialModel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90, NONE, etc.).
  ///  Example: /// Example: JAC70
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get dragModel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  Boolean indicating use of lunar/solar perturbations for this vector.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get lunarSolar => const fb.BoolReader().vTableGet(_bc, _bcOffset, 92, false);
  ///  Boolean indicating use of solar radiation pressure perturbations for this vector.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get solarRadPress => const fb.BoolReader().vTableGet(_bc, _bcOffset, 94, false);
  ///  The effective area of the object exposed to solar radiation pressure, expressed in meters^2.
  ///  Example: /// Example: 4.311
  ///  Constraints: No constraints specified.
  double get srpArea => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 96, 0.0);
  ///  Boolean indicating use of solid earth tide perturbations for this vector.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get solidEarthTides => const fb.BoolReader().vTableGet(_bc, _bcOffset, 98, false);
  ///  Boolean indicating use of in-track thrust perturbations for this vector.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get inTrackThrust => const fb.BoolReader().vTableGet(_bc, _bcOffset, 100, false);
  ///  First derivative of drag/ballistic coefficient (m2/kg-s).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get bDot => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 102, 0.0);
  ///  Model parameter value for energy dissipation rate (EDR) (w/kg).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get edr => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 104, 0.0);
  ///  Model parameter value for thrust acceleration (m/s2).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get thrustAccel => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 106, 0.0);
  ///  Model parameter value for center of mass offset (m).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get cmOffset => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 108, 0.0);
  ///  The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.
  ///  Example: /// Example: 2022-11-09T11:20:21.247192Z
  ///  Constraints: No constraints specified.
  String? get lastObStart => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 110);
  ///  The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.
  ///  Example: /// Example: 2022-11-09T11:20:21.247192Z
  ///  Constraints: No constraints specified.
  String? get lastObEnd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);
  ///  The number of observations available for the OD of the object.
  ///  Example: /// Example: 376
  ///  Constraints: No constraints specified.
  int get obsAvailable => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 114, 0);
  ///  The number of observations accepted for the OD of the object.
  ///  Example: /// Example: 374
  ///  Constraints: No constraints specified.
  int get obsUsed => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 116, 0);
  ///  The number of sensor tracks available for the OD of the object.
  ///  Example: /// Example: 163
  ///  Constraints: No constraints specified.
  int get tracksAvail => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 118, 0);
  ///  The number of sensor tracks accepted for the OD of the object.
  ///  Example: /// Example: 163
  ///  Constraints: No constraints specified.
  int get tracksUsed => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 120, 0);
  ///  The recommended OD time span calculated for the object, expressed in days.
  ///  Example: /// Example: 3.5
  ///  Constraints: No constraints specified.
  double get recOdspan => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 122, 0.0);
  ///  The actual time span used for the OD of the object, expressed in days.
  ///  Example: /// Example: 3.5
  ///  Constraints: No constraints specified.
  double get actualOdspan => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 124, 0.0);
  ///  The percentage of residuals accepted in the OD of the object.
  ///  Example: /// Example: 99.5
  ///  Constraints: No constraints specified.
  double get residualsAcc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 126, 0.0);
  ///  F10 (10.7 cm) solar flux value.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get solarFluxF10 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 128, 0.0);
  ///  F10 (10.7 cm) solar flux 81-day average value.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get solarFluxF10Avg => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 130, 0.0);
  ///  Average solar flux geomagnetic index.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get solarFluxApavg => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 132, 0.0);
  ///  TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset in seconds.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get taiUtc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 134, 0.0);
  ///  Universal Time-1 (UT1) minus UTC offset, in seconds.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get ut1Utc => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 136, 0.0);
  ///  Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get ut1Rate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 138, 0.0);
  ///  Polar Wander Motion X (arc seconds).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get polarMotionX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 140, 0.0);
  ///  Polar Wander Motion Y (arc seconds).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get polarMotionY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 142, 0.0);
  ///  Number of terms used in the IAU 1980 nutation model (4, 50, or 106).
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  int get iau1980Terms => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 144, 0);
  ///  Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap second is not known, the time of the previous leap second is used.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get leapSecondTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 146);
  ///  Integrator Mode.
  ///  Example: /// Example: integratorMode
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get integratorMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 148);
  ///  Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).
  ///  Example: /// Example: ANALYTIC
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get partials => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 150);
  ///  Integrator step mode (AUTO, TIME, or S).
  ///  Example: /// Example: AUTO
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get stepMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 152);
  ///  Boolean indicating use of fixed step size for this vector.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get fixedStep => const fb.BoolReader().vTableGet(_bc, _bcOffset, 154, false);
  ///  Initial step size selection (AUTO or MANUAL).
  ///  Example: /// Example: AUTO
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get stepSizeSelection => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 156);
  ///  Initial integration step size (seconds).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get stepSize => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 158, 0.0);
  ///  Integrator error control.
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get errorControl => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 160, 0.0);
  ///  Array containing the standard deviation of error in target object position, U, V and W direction respectively (km).
  ///  Example: /// Example: [1.23, 4.56]
  ///  Constraints: No constraints specified.
  List<String>? get sigmaPosUvw => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 162);
  ///  Array containing the standard deviation of error in target object velocity, U, V and W direction respectively (km/sec).
  ///  Example: /// Example: [1.23, 4.56]
  ///  Constraints: No constraints specified.
  List<String>? get sigmaVelUvw => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 164);
  ///  The Weighted Root Mean Squared (RMS) of the differential correction on the target object that produced this vector.  WRMS is a quality indicator of the state vector update, with a value of 1.00 being optimal.  WRMS applies to Batch Least Squares (BLS) processes.
  ///  Example: /// Example: 0.991
  ///  Constraints: No constraints specified.
  double get rms => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 166, 0.0);
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: rawFileURI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get rawFileUri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 168);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 170);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 172);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  StateVectorIngestDataModeEnum get dataMode => StateVectorIngestDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 174, 0));
  ///  Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  ///  Example: /// Example: ['TAG1', 'TAG2']
  ///  Constraints: No constraints specified.
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 176);
  ///  Optional algorithm used to produce this record.
  ///  Example: /// Example: SAMPLE_ALGORITHM
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get algorithm => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 178);
  ///  Optional array of UDL data (observation) UUIDs used to build this state vector. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
  ///  Example: /// Example: ['DATA1', 'DATA2']
  ///  Constraints: No constraints specified.
  List<String>? get sourcedData => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 180);
  ///  Optional array of UDL observation data types used to build this state vector (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
  ///  Example: /// Example: ['RADAR']
  ///  Constraints: No constraints specified.
  StateVectorIngestSourcedDataTypesEnum get sourcedDataTypes => StateVectorIngestSourcedDataTypesEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 182, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 184);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 186);
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: descriptor
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get descriptor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 188);
  ///  Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  ///  Example: /// Example: transactionId
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get transactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 190);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 192);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 194);

  @override
  String toString() {
    return 'StateVectorIngest{idStateVector: ${idStateVector}, classificationMarking: ${classificationMarking}, epoch: ${epoch}, pedigree: ${pedigree}, idOnOrbit: ${idOnOrbit}, satNo: ${satNo}, origObjectId: ${origObjectId}, idOrbitDetermination: ${idOrbitDetermination}, uct: ${uct}, xpos: ${xpos}, ypos: ${ypos}, zpos: ${zpos}, xvel: ${xvel}, yvel: ${yvel}, zvel: ${zvel}, referenceFrame: ${referenceFrame}, cov: ${cov}, covReferenceFrame: ${covReferenceFrame}, covMethod: ${covMethod}, eqCov: ${eqCov}, xposAlt1: ${xposAlt1}, yposAlt1: ${yposAlt1}, zposAlt1: ${zposAlt1}, xvelAlt1: ${xvelAlt1}, yvelAlt1: ${yvelAlt1}, zvelAlt1: ${zvelAlt1}, alt1ReferenceFrame: ${alt1ReferenceFrame}, xposAlt2: ${xposAlt2}, yposAlt2: ${yposAlt2}, zposAlt2: ${zposAlt2}, xvelAlt2: ${xvelAlt2}, yvelAlt2: ${yvelAlt2}, zvelAlt2: ${zvelAlt2}, alt2ReferenceFrame: ${alt2ReferenceFrame}, posUnc: ${posUnc}, velUnc: ${velUnc}, mass: ${mass}, area: ${area}, solarRadPressCoeff: ${solarRadPressCoeff}, dragCoeff: ${dragCoeff}, dragArea: ${dragArea}, revNo: ${revNo}, geopotentialModel: ${geopotentialModel}, dragModel: ${dragModel}, lunarSolar: ${lunarSolar}, solarRadPress: ${solarRadPress}, srpArea: ${srpArea}, solidEarthTides: ${solidEarthTides}, inTrackThrust: ${inTrackThrust}, bDot: ${bDot}, edr: ${edr}, thrustAccel: ${thrustAccel}, cmOffset: ${cmOffset}, lastObStart: ${lastObStart}, lastObEnd: ${lastObEnd}, obsAvailable: ${obsAvailable}, obsUsed: ${obsUsed}, tracksAvail: ${tracksAvail}, tracksUsed: ${tracksUsed}, recOdspan: ${recOdspan}, actualOdspan: ${actualOdspan}, residualsAcc: ${residualsAcc}, solarFluxF10: ${solarFluxF10}, solarFluxF10Avg: ${solarFluxF10Avg}, solarFluxApavg: ${solarFluxApavg}, taiUtc: ${taiUtc}, ut1Utc: ${ut1Utc}, ut1Rate: ${ut1Rate}, polarMotionX: ${polarMotionX}, polarMotionY: ${polarMotionY}, iau1980Terms: ${iau1980Terms}, leapSecondTime: ${leapSecondTime}, integratorMode: ${integratorMode}, partials: ${partials}, stepMode: ${stepMode}, fixedStep: ${fixedStep}, stepSizeSelection: ${stepSizeSelection}, stepSize: ${stepSize}, errorControl: ${errorControl}, sigmaPosUvw: ${sigmaPosUvw}, sigmaVelUvw: ${sigmaVelUvw}, rms: ${rms}, rawFileUri: ${rawFileUri}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, tags: ${tags}, algorithm: ${algorithm}, sourcedData: ${sourcedData}, sourcedDataTypes: ${sourcedDataTypes}, createdAt: ${createdAt}, createdBy: ${createdBy}, descriptor: ${descriptor}, transactionId: ${transactionId}, origNetwork: ${origNetwork}, sourceDl: ${sourceDl}}';
  }
}

class _StateVectorIngestReader extends fb.TableReader<StateVectorIngest> {
  const _StateVectorIngestReader();

  @override
  StateVectorIngest createObject(fb.BufferContext bc, int offset) => 
    StateVectorIngest._(bc, offset);
}

class StateVectorIngestBuilder {
  StateVectorIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(96);
  }

  int addIdStateVectorOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addEpochOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPedigreeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addSatNo(int? satNo) {
    fbBuilder.addInt32(5, satNo);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addIdOrbitDeterminationOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addUct(bool? uct) {
    fbBuilder.addBool(8, uct);
    return fbBuilder.offset;
  }
  int addXpos(double? xpos) {
    fbBuilder.addFloat64(9, xpos);
    return fbBuilder.offset;
  }
  int addYpos(double? ypos) {
    fbBuilder.addFloat64(10, ypos);
    return fbBuilder.offset;
  }
  int addZpos(double? zpos) {
    fbBuilder.addFloat64(11, zpos);
    return fbBuilder.offset;
  }
  int addXvel(double? xvel) {
    fbBuilder.addFloat64(12, xvel);
    return fbBuilder.offset;
  }
  int addYvel(double? yvel) {
    fbBuilder.addFloat64(13, yvel);
    return fbBuilder.offset;
  }
  int addZvel(double? zvel) {
    fbBuilder.addFloat64(14, zvel);
    return fbBuilder.offset;
  }
  int addReferenceFrame(StateVectorIngestReferenceFrameEnum? referenceFrame) {
    fbBuilder.addInt8(15, referenceFrame?.value);
    return fbBuilder.offset;
  }
  int addCovOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addCovReferenceFrame(StateVectorIngestCovReferenceFrameEnum? covReferenceFrame) {
    fbBuilder.addInt8(17, covReferenceFrame?.value);
    return fbBuilder.offset;
  }
  int addCovMethodOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addEqCovOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addXposAlt1(double? xposAlt1) {
    fbBuilder.addFloat64(20, xposAlt1);
    return fbBuilder.offset;
  }
  int addYposAlt1(double? yposAlt1) {
    fbBuilder.addFloat64(21, yposAlt1);
    return fbBuilder.offset;
  }
  int addZposAlt1(double? zposAlt1) {
    fbBuilder.addFloat64(22, zposAlt1);
    return fbBuilder.offset;
  }
  int addXvelAlt1(double? xvelAlt1) {
    fbBuilder.addFloat64(23, xvelAlt1);
    return fbBuilder.offset;
  }
  int addYvelAlt1(double? yvelAlt1) {
    fbBuilder.addFloat64(24, yvelAlt1);
    return fbBuilder.offset;
  }
  int addZvelAlt1(double? zvelAlt1) {
    fbBuilder.addFloat64(25, zvelAlt1);
    return fbBuilder.offset;
  }
  int addAlt1ReferenceFrameOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addXposAlt2(double? xposAlt2) {
    fbBuilder.addFloat64(27, xposAlt2);
    return fbBuilder.offset;
  }
  int addYposAlt2(double? yposAlt2) {
    fbBuilder.addFloat64(28, yposAlt2);
    return fbBuilder.offset;
  }
  int addZposAlt2(double? zposAlt2) {
    fbBuilder.addFloat64(29, zposAlt2);
    return fbBuilder.offset;
  }
  int addXvelAlt2(double? xvelAlt2) {
    fbBuilder.addFloat64(30, xvelAlt2);
    return fbBuilder.offset;
  }
  int addYvelAlt2(double? yvelAlt2) {
    fbBuilder.addFloat64(31, yvelAlt2);
    return fbBuilder.offset;
  }
  int addZvelAlt2(double? zvelAlt2) {
    fbBuilder.addFloat64(32, zvelAlt2);
    return fbBuilder.offset;
  }
  int addAlt2ReferenceFrameOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addPosUnc(double? posUnc) {
    fbBuilder.addFloat64(34, posUnc);
    return fbBuilder.offset;
  }
  int addVelUnc(double? velUnc) {
    fbBuilder.addFloat64(35, velUnc);
    return fbBuilder.offset;
  }
  int addMass(double? mass) {
    fbBuilder.addFloat64(36, mass);
    return fbBuilder.offset;
  }
  int addArea(double? area) {
    fbBuilder.addFloat64(37, area);
    return fbBuilder.offset;
  }
  int addSolarRadPressCoeff(double? solarRadPressCoeff) {
    fbBuilder.addFloat64(38, solarRadPressCoeff);
    return fbBuilder.offset;
  }
  int addDragCoeff(double? dragCoeff) {
    fbBuilder.addFloat64(39, dragCoeff);
    return fbBuilder.offset;
  }
  int addDragArea(double? dragArea) {
    fbBuilder.addFloat64(40, dragArea);
    return fbBuilder.offset;
  }
  int addRevNo(int? revNo) {
    fbBuilder.addInt32(41, revNo);
    return fbBuilder.offset;
  }
  int addGeopotentialModelOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addDragModelOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addLunarSolar(bool? lunarSolar) {
    fbBuilder.addBool(44, lunarSolar);
    return fbBuilder.offset;
  }
  int addSolarRadPress(bool? solarRadPress) {
    fbBuilder.addBool(45, solarRadPress);
    return fbBuilder.offset;
  }
  int addSrpArea(double? srpArea) {
    fbBuilder.addFloat64(46, srpArea);
    return fbBuilder.offset;
  }
  int addSolidEarthTides(bool? solidEarthTides) {
    fbBuilder.addBool(47, solidEarthTides);
    return fbBuilder.offset;
  }
  int addInTrackThrust(bool? inTrackThrust) {
    fbBuilder.addBool(48, inTrackThrust);
    return fbBuilder.offset;
  }
  int addBDot(double? bDot) {
    fbBuilder.addFloat64(49, bDot);
    return fbBuilder.offset;
  }
  int addEdr(double? edr) {
    fbBuilder.addFloat64(50, edr);
    return fbBuilder.offset;
  }
  int addThrustAccel(double? thrustAccel) {
    fbBuilder.addFloat64(51, thrustAccel);
    return fbBuilder.offset;
  }
  int addCmOffset(double? cmOffset) {
    fbBuilder.addFloat64(52, cmOffset);
    return fbBuilder.offset;
  }
  int addLastObStartOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }
  int addLastObEndOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addObsAvailable(int? obsAvailable) {
    fbBuilder.addInt32(55, obsAvailable);
    return fbBuilder.offset;
  }
  int addObsUsed(int? obsUsed) {
    fbBuilder.addInt32(56, obsUsed);
    return fbBuilder.offset;
  }
  int addTracksAvail(int? tracksAvail) {
    fbBuilder.addInt32(57, tracksAvail);
    return fbBuilder.offset;
  }
  int addTracksUsed(int? tracksUsed) {
    fbBuilder.addInt32(58, tracksUsed);
    return fbBuilder.offset;
  }
  int addRecOdspan(double? recOdspan) {
    fbBuilder.addFloat64(59, recOdspan);
    return fbBuilder.offset;
  }
  int addActualOdspan(double? actualOdspan) {
    fbBuilder.addFloat64(60, actualOdspan);
    return fbBuilder.offset;
  }
  int addResidualsAcc(double? residualsAcc) {
    fbBuilder.addFloat64(61, residualsAcc);
    return fbBuilder.offset;
  }
  int addSolarFluxF10(double? solarFluxF10) {
    fbBuilder.addFloat64(62, solarFluxF10);
    return fbBuilder.offset;
  }
  int addSolarFluxF10Avg(double? solarFluxF10Avg) {
    fbBuilder.addFloat64(63, solarFluxF10Avg);
    return fbBuilder.offset;
  }
  int addSolarFluxApavg(double? solarFluxApavg) {
    fbBuilder.addFloat64(64, solarFluxApavg);
    return fbBuilder.offset;
  }
  int addTaiUtc(double? taiUtc) {
    fbBuilder.addFloat64(65, taiUtc);
    return fbBuilder.offset;
  }
  int addUt1Utc(double? ut1Utc) {
    fbBuilder.addFloat64(66, ut1Utc);
    return fbBuilder.offset;
  }
  int addUt1Rate(double? ut1Rate) {
    fbBuilder.addFloat64(67, ut1Rate);
    return fbBuilder.offset;
  }
  int addPolarMotionX(double? polarMotionX) {
    fbBuilder.addFloat64(68, polarMotionX);
    return fbBuilder.offset;
  }
  int addPolarMotionY(double? polarMotionY) {
    fbBuilder.addFloat64(69, polarMotionY);
    return fbBuilder.offset;
  }
  int addIau1980Terms(int? iau1980Terms) {
    fbBuilder.addInt32(70, iau1980Terms);
    return fbBuilder.offset;
  }
  int addLeapSecondTimeOffset(int? offset) {
    fbBuilder.addOffset(71, offset);
    return fbBuilder.offset;
  }
  int addIntegratorModeOffset(int? offset) {
    fbBuilder.addOffset(72, offset);
    return fbBuilder.offset;
  }
  int addPartialsOffset(int? offset) {
    fbBuilder.addOffset(73, offset);
    return fbBuilder.offset;
  }
  int addStepModeOffset(int? offset) {
    fbBuilder.addOffset(74, offset);
    return fbBuilder.offset;
  }
  int addFixedStep(bool? fixedStep) {
    fbBuilder.addBool(75, fixedStep);
    return fbBuilder.offset;
  }
  int addStepSizeSelectionOffset(int? offset) {
    fbBuilder.addOffset(76, offset);
    return fbBuilder.offset;
  }
  int addStepSize(double? stepSize) {
    fbBuilder.addFloat64(77, stepSize);
    return fbBuilder.offset;
  }
  int addErrorControl(double? errorControl) {
    fbBuilder.addFloat64(78, errorControl);
    return fbBuilder.offset;
  }
  int addSigmaPosUvwOffset(int? offset) {
    fbBuilder.addOffset(79, offset);
    return fbBuilder.offset;
  }
  int addSigmaVelUvwOffset(int? offset) {
    fbBuilder.addOffset(80, offset);
    return fbBuilder.offset;
  }
  int addRms(double? rms) {
    fbBuilder.addFloat64(81, rms);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(82, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(83, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(84, offset);
    return fbBuilder.offset;
  }
  int addDataMode(StateVectorIngestDataModeEnum? dataMode) {
    fbBuilder.addInt8(85, dataMode?.value);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(86, offset);
    return fbBuilder.offset;
  }
  int addAlgorithmOffset(int? offset) {
    fbBuilder.addOffset(87, offset);
    return fbBuilder.offset;
  }
  int addSourcedDataOffset(int? offset) {
    fbBuilder.addOffset(88, offset);
    return fbBuilder.offset;
  }
  int addSourcedDataTypes(StateVectorIngestSourcedDataTypesEnum? sourcedDataTypes) {
    fbBuilder.addInt8(89, sourcedDataTypes?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(90, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(91, offset);
    return fbBuilder.offset;
  }
  int addDescriptorOffset(int? offset) {
    fbBuilder.addOffset(92, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(93, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(94, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(95, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StateVectorIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _idStateVector;
  final String? _classificationMarking;
  final String? _epoch;
  final String? _pedigree;
  final String? _idOnOrbit;
  final int? _satNo;
  final String? _origObjectId;
  final String? _idOrbitDetermination;
  final bool? _uct;
  final double? _xpos;
  final double? _ypos;
  final double? _zpos;
  final double? _xvel;
  final double? _yvel;
  final double? _zvel;
  final StateVectorIngestReferenceFrameEnum? _referenceFrame;
  final List<String>? _cov;
  final StateVectorIngestCovReferenceFrameEnum? _covReferenceFrame;
  final String? _covMethod;
  final List<String>? _eqCov;
  final double? _xposAlt1;
  final double? _yposAlt1;
  final double? _zposAlt1;
  final double? _xvelAlt1;
  final double? _yvelAlt1;
  final double? _zvelAlt1;
  final String? _alt1ReferenceFrame;
  final double? _xposAlt2;
  final double? _yposAlt2;
  final double? _zposAlt2;
  final double? _xvelAlt2;
  final double? _yvelAlt2;
  final double? _zvelAlt2;
  final String? _alt2ReferenceFrame;
  final double? _posUnc;
  final double? _velUnc;
  final double? _mass;
  final double? _area;
  final double? _solarRadPressCoeff;
  final double? _dragCoeff;
  final double? _dragArea;
  final int? _revNo;
  final String? _geopotentialModel;
  final String? _dragModel;
  final bool? _lunarSolar;
  final bool? _solarRadPress;
  final double? _srpArea;
  final bool? _solidEarthTides;
  final bool? _inTrackThrust;
  final double? _bDot;
  final double? _edr;
  final double? _thrustAccel;
  final double? _cmOffset;
  final String? _lastObStart;
  final String? _lastObEnd;
  final int? _obsAvailable;
  final int? _obsUsed;
  final int? _tracksAvail;
  final int? _tracksUsed;
  final double? _recOdspan;
  final double? _actualOdspan;
  final double? _residualsAcc;
  final double? _solarFluxF10;
  final double? _solarFluxF10Avg;
  final double? _solarFluxApavg;
  final double? _taiUtc;
  final double? _ut1Utc;
  final double? _ut1Rate;
  final double? _polarMotionX;
  final double? _polarMotionY;
  final int? _iau1980Terms;
  final String? _leapSecondTime;
  final String? _integratorMode;
  final String? _partials;
  final String? _stepMode;
  final bool? _fixedStep;
  final String? _stepSizeSelection;
  final double? _stepSize;
  final double? _errorControl;
  final List<String>? _sigmaPosUvw;
  final List<String>? _sigmaVelUvw;
  final double? _rms;
  final String? _rawFileUri;
  final String? _source;
  final String? _origin;
  final StateVectorIngestDataModeEnum? _dataMode;
  final List<String>? _tags;
  final String? _algorithm;
  final List<String>? _sourcedData;
  final StateVectorIngestSourcedDataTypesEnum? _sourcedDataTypes;
  final String? _createdAt;
  final String? _createdBy;
  final String? _descriptor;
  final String? _transactionId;
  final String? _origNetwork;
  final String? _sourceDl;

  StateVectorIngestObjectBuilder({
    String? idStateVector,
    String? classificationMarking,
    String? epoch,
    String? pedigree,
    String? idOnOrbit,
    int? satNo,
    String? origObjectId,
    String? idOrbitDetermination,
    bool? uct,
    double? xpos,
    double? ypos,
    double? zpos,
    double? xvel,
    double? yvel,
    double? zvel,
    StateVectorIngestReferenceFrameEnum? referenceFrame,
    List<String>? cov,
    StateVectorIngestCovReferenceFrameEnum? covReferenceFrame,
    String? covMethod,
    List<String>? eqCov,
    double? xposAlt1,
    double? yposAlt1,
    double? zposAlt1,
    double? xvelAlt1,
    double? yvelAlt1,
    double? zvelAlt1,
    String? alt1ReferenceFrame,
    double? xposAlt2,
    double? yposAlt2,
    double? zposAlt2,
    double? xvelAlt2,
    double? yvelAlt2,
    double? zvelAlt2,
    String? alt2ReferenceFrame,
    double? posUnc,
    double? velUnc,
    double? mass,
    double? area,
    double? solarRadPressCoeff,
    double? dragCoeff,
    double? dragArea,
    int? revNo,
    String? geopotentialModel,
    String? dragModel,
    bool? lunarSolar,
    bool? solarRadPress,
    double? srpArea,
    bool? solidEarthTides,
    bool? inTrackThrust,
    double? bDot,
    double? edr,
    double? thrustAccel,
    double? cmOffset,
    String? lastObStart,
    String? lastObEnd,
    int? obsAvailable,
    int? obsUsed,
    int? tracksAvail,
    int? tracksUsed,
    double? recOdspan,
    double? actualOdspan,
    double? residualsAcc,
    double? solarFluxF10,
    double? solarFluxF10Avg,
    double? solarFluxApavg,
    double? taiUtc,
    double? ut1Utc,
    double? ut1Rate,
    double? polarMotionX,
    double? polarMotionY,
    int? iau1980Terms,
    String? leapSecondTime,
    String? integratorMode,
    String? partials,
    String? stepMode,
    bool? fixedStep,
    String? stepSizeSelection,
    double? stepSize,
    double? errorControl,
    List<String>? sigmaPosUvw,
    List<String>? sigmaVelUvw,
    double? rms,
    String? rawFileUri,
    String? source,
    String? origin,
    StateVectorIngestDataModeEnum? dataMode,
    List<String>? tags,
    String? algorithm,
    List<String>? sourcedData,
    StateVectorIngestSourcedDataTypesEnum? sourcedDataTypes,
    String? createdAt,
    String? createdBy,
    String? descriptor,
    String? transactionId,
    String? origNetwork,
    String? sourceDl,
  })
      : _idStateVector = idStateVector,
        _classificationMarking = classificationMarking,
        _epoch = epoch,
        _pedigree = pedigree,
        _idOnOrbit = idOnOrbit,
        _satNo = satNo,
        _origObjectId = origObjectId,
        _idOrbitDetermination = idOrbitDetermination,
        _uct = uct,
        _xpos = xpos,
        _ypos = ypos,
        _zpos = zpos,
        _xvel = xvel,
        _yvel = yvel,
        _zvel = zvel,
        _referenceFrame = referenceFrame,
        _cov = cov,
        _covReferenceFrame = covReferenceFrame,
        _covMethod = covMethod,
        _eqCov = eqCov,
        _xposAlt1 = xposAlt1,
        _yposAlt1 = yposAlt1,
        _zposAlt1 = zposAlt1,
        _xvelAlt1 = xvelAlt1,
        _yvelAlt1 = yvelAlt1,
        _zvelAlt1 = zvelAlt1,
        _alt1ReferenceFrame = alt1ReferenceFrame,
        _xposAlt2 = xposAlt2,
        _yposAlt2 = yposAlt2,
        _zposAlt2 = zposAlt2,
        _xvelAlt2 = xvelAlt2,
        _yvelAlt2 = yvelAlt2,
        _zvelAlt2 = zvelAlt2,
        _alt2ReferenceFrame = alt2ReferenceFrame,
        _posUnc = posUnc,
        _velUnc = velUnc,
        _mass = mass,
        _area = area,
        _solarRadPressCoeff = solarRadPressCoeff,
        _dragCoeff = dragCoeff,
        _dragArea = dragArea,
        _revNo = revNo,
        _geopotentialModel = geopotentialModel,
        _dragModel = dragModel,
        _lunarSolar = lunarSolar,
        _solarRadPress = solarRadPress,
        _srpArea = srpArea,
        _solidEarthTides = solidEarthTides,
        _inTrackThrust = inTrackThrust,
        _bDot = bDot,
        _edr = edr,
        _thrustAccel = thrustAccel,
        _cmOffset = cmOffset,
        _lastObStart = lastObStart,
        _lastObEnd = lastObEnd,
        _obsAvailable = obsAvailable,
        _obsUsed = obsUsed,
        _tracksAvail = tracksAvail,
        _tracksUsed = tracksUsed,
        _recOdspan = recOdspan,
        _actualOdspan = actualOdspan,
        _residualsAcc = residualsAcc,
        _solarFluxF10 = solarFluxF10,
        _solarFluxF10Avg = solarFluxF10Avg,
        _solarFluxApavg = solarFluxApavg,
        _taiUtc = taiUtc,
        _ut1Utc = ut1Utc,
        _ut1Rate = ut1Rate,
        _polarMotionX = polarMotionX,
        _polarMotionY = polarMotionY,
        _iau1980Terms = iau1980Terms,
        _leapSecondTime = leapSecondTime,
        _integratorMode = integratorMode,
        _partials = partials,
        _stepMode = stepMode,
        _fixedStep = fixedStep,
        _stepSizeSelection = stepSizeSelection,
        _stepSize = stepSize,
        _errorControl = errorControl,
        _sigmaPosUvw = sigmaPosUvw,
        _sigmaVelUvw = sigmaVelUvw,
        _rms = rms,
        _rawFileUri = rawFileUri,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _tags = tags,
        _algorithm = algorithm,
        _sourcedData = sourcedData,
        _sourcedDataTypes = sourcedDataTypes,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _descriptor = descriptor,
        _transactionId = transactionId,
        _origNetwork = origNetwork,
        _sourceDl = sourceDl;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idStateVectorOffset = _idStateVector == null ? null
        : fbBuilder.writeString(_idStateVector!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? epochOffset = _epoch == null ? null
        : fbBuilder.writeString(_epoch!);
    final int? pedigreeOffset = _pedigree == null ? null
        : fbBuilder.writeString(_pedigree!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? origObjectIdOffset = _origObjectId == null ? null
        : fbBuilder.writeString(_origObjectId!);
    final int? idOrbitDeterminationOffset = _idOrbitDetermination == null ? null
        : fbBuilder.writeString(_idOrbitDetermination!);
    final int? covOffset = _cov == null ? null
        : fbBuilder.writeList(_cov!.map(fbBuilder.writeString).toList());
    final int? covMethodOffset = _covMethod == null ? null
        : fbBuilder.writeString(_covMethod!);
    final int? eqCovOffset = _eqCov == null ? null
        : fbBuilder.writeList(_eqCov!.map(fbBuilder.writeString).toList());
    final int? alt1ReferenceFrameOffset = _alt1ReferenceFrame == null ? null
        : fbBuilder.writeString(_alt1ReferenceFrame!);
    final int? alt2ReferenceFrameOffset = _alt2ReferenceFrame == null ? null
        : fbBuilder.writeString(_alt2ReferenceFrame!);
    final int? geopotentialModelOffset = _geopotentialModel == null ? null
        : fbBuilder.writeString(_geopotentialModel!);
    final int? dragModelOffset = _dragModel == null ? null
        : fbBuilder.writeString(_dragModel!);
    final int? lastObStartOffset = _lastObStart == null ? null
        : fbBuilder.writeString(_lastObStart!);
    final int? lastObEndOffset = _lastObEnd == null ? null
        : fbBuilder.writeString(_lastObEnd!);
    final int? leapSecondTimeOffset = _leapSecondTime == null ? null
        : fbBuilder.writeString(_leapSecondTime!);
    final int? integratorModeOffset = _integratorMode == null ? null
        : fbBuilder.writeString(_integratorMode!);
    final int? partialsOffset = _partials == null ? null
        : fbBuilder.writeString(_partials!);
    final int? stepModeOffset = _stepMode == null ? null
        : fbBuilder.writeString(_stepMode!);
    final int? stepSizeSelectionOffset = _stepSizeSelection == null ? null
        : fbBuilder.writeString(_stepSizeSelection!);
    final int? sigmaPosUvwOffset = _sigmaPosUvw == null ? null
        : fbBuilder.writeList(_sigmaPosUvw!.map(fbBuilder.writeString).toList());
    final int? sigmaVelUvwOffset = _sigmaVelUvw == null ? null
        : fbBuilder.writeList(_sigmaVelUvw!.map(fbBuilder.writeString).toList());
    final int? rawFileUriOffset = _rawFileUri == null ? null
        : fbBuilder.writeString(_rawFileUri!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? algorithmOffset = _algorithm == null ? null
        : fbBuilder.writeString(_algorithm!);
    final int? sourcedDataOffset = _sourcedData == null ? null
        : fbBuilder.writeList(_sourcedData!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? descriptorOffset = _descriptor == null ? null
        : fbBuilder.writeString(_descriptor!);
    final int? transactionIdOffset = _transactionId == null ? null
        : fbBuilder.writeString(_transactionId!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    fbBuilder.startTable(96);
    fbBuilder.addOffset(0, idStateVectorOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, epochOffset);
    fbBuilder.addOffset(3, pedigreeOffset);
    fbBuilder.addOffset(4, idOnOrbitOffset);
    fbBuilder.addInt32(5, _satNo);
    fbBuilder.addOffset(6, origObjectIdOffset);
    fbBuilder.addOffset(7, idOrbitDeterminationOffset);
    fbBuilder.addBool(8, _uct);
    fbBuilder.addFloat64(9, _xpos);
    fbBuilder.addFloat64(10, _ypos);
    fbBuilder.addFloat64(11, _zpos);
    fbBuilder.addFloat64(12, _xvel);
    fbBuilder.addFloat64(13, _yvel);
    fbBuilder.addFloat64(14, _zvel);
    fbBuilder.addInt8(15, _referenceFrame?.value);
    fbBuilder.addOffset(16, covOffset);
    fbBuilder.addInt8(17, _covReferenceFrame?.value);
    fbBuilder.addOffset(18, covMethodOffset);
    fbBuilder.addOffset(19, eqCovOffset);
    fbBuilder.addFloat64(20, _xposAlt1);
    fbBuilder.addFloat64(21, _yposAlt1);
    fbBuilder.addFloat64(22, _zposAlt1);
    fbBuilder.addFloat64(23, _xvelAlt1);
    fbBuilder.addFloat64(24, _yvelAlt1);
    fbBuilder.addFloat64(25, _zvelAlt1);
    fbBuilder.addOffset(26, alt1ReferenceFrameOffset);
    fbBuilder.addFloat64(27, _xposAlt2);
    fbBuilder.addFloat64(28, _yposAlt2);
    fbBuilder.addFloat64(29, _zposAlt2);
    fbBuilder.addFloat64(30, _xvelAlt2);
    fbBuilder.addFloat64(31, _yvelAlt2);
    fbBuilder.addFloat64(32, _zvelAlt2);
    fbBuilder.addOffset(33, alt2ReferenceFrameOffset);
    fbBuilder.addFloat64(34, _posUnc);
    fbBuilder.addFloat64(35, _velUnc);
    fbBuilder.addFloat64(36, _mass);
    fbBuilder.addFloat64(37, _area);
    fbBuilder.addFloat64(38, _solarRadPressCoeff);
    fbBuilder.addFloat64(39, _dragCoeff);
    fbBuilder.addFloat64(40, _dragArea);
    fbBuilder.addInt32(41, _revNo);
    fbBuilder.addOffset(42, geopotentialModelOffset);
    fbBuilder.addOffset(43, dragModelOffset);
    fbBuilder.addBool(44, _lunarSolar);
    fbBuilder.addBool(45, _solarRadPress);
    fbBuilder.addFloat64(46, _srpArea);
    fbBuilder.addBool(47, _solidEarthTides);
    fbBuilder.addBool(48, _inTrackThrust);
    fbBuilder.addFloat64(49, _bDot);
    fbBuilder.addFloat64(50, _edr);
    fbBuilder.addFloat64(51, _thrustAccel);
    fbBuilder.addFloat64(52, _cmOffset);
    fbBuilder.addOffset(53, lastObStartOffset);
    fbBuilder.addOffset(54, lastObEndOffset);
    fbBuilder.addInt32(55, _obsAvailable);
    fbBuilder.addInt32(56, _obsUsed);
    fbBuilder.addInt32(57, _tracksAvail);
    fbBuilder.addInt32(58, _tracksUsed);
    fbBuilder.addFloat64(59, _recOdspan);
    fbBuilder.addFloat64(60, _actualOdspan);
    fbBuilder.addFloat64(61, _residualsAcc);
    fbBuilder.addFloat64(62, _solarFluxF10);
    fbBuilder.addFloat64(63, _solarFluxF10Avg);
    fbBuilder.addFloat64(64, _solarFluxApavg);
    fbBuilder.addFloat64(65, _taiUtc);
    fbBuilder.addFloat64(66, _ut1Utc);
    fbBuilder.addFloat64(67, _ut1Rate);
    fbBuilder.addFloat64(68, _polarMotionX);
    fbBuilder.addFloat64(69, _polarMotionY);
    fbBuilder.addInt32(70, _iau1980Terms);
    fbBuilder.addOffset(71, leapSecondTimeOffset);
    fbBuilder.addOffset(72, integratorModeOffset);
    fbBuilder.addOffset(73, partialsOffset);
    fbBuilder.addOffset(74, stepModeOffset);
    fbBuilder.addBool(75, _fixedStep);
    fbBuilder.addOffset(76, stepSizeSelectionOffset);
    fbBuilder.addFloat64(77, _stepSize);
    fbBuilder.addFloat64(78, _errorControl);
    fbBuilder.addOffset(79, sigmaPosUvwOffset);
    fbBuilder.addOffset(80, sigmaVelUvwOffset);
    fbBuilder.addFloat64(81, _rms);
    fbBuilder.addOffset(82, rawFileUriOffset);
    fbBuilder.addOffset(83, sourceOffset);
    fbBuilder.addOffset(84, originOffset);
    fbBuilder.addInt8(85, _dataMode?.value);
    fbBuilder.addOffset(86, tagsOffset);
    fbBuilder.addOffset(87, algorithmOffset);
    fbBuilder.addOffset(88, sourcedDataOffset);
    fbBuilder.addInt8(89, _sourcedDataTypes?.value);
    fbBuilder.addOffset(90, createdAtOffset);
    fbBuilder.addOffset(91, createdByOffset);
    fbBuilder.addOffset(92, descriptorOffset);
    fbBuilder.addOffset(93, transactionIdOffset);
    fbBuilder.addOffset(94, origNetworkOffset);
    fbBuilder.addOffset(95, sourceDlOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
