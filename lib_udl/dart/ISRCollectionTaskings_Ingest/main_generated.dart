// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class IsrcollectionTaskingsIngestTypeEnum {
  final int value;
  const IsrcollectionTaskingsIngestTypeEnum._(this.value);

  factory IsrcollectionTaskingsIngestTypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum IsrcollectionTaskingsIngestTypeEnum');
    }
    return result;
  }

  static IsrcollectionTaskingsIngestTypeEnum? _createOrNull(int? value) => 
      value == null ? null : IsrcollectionTaskingsIngestTypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const IsrcollectionTaskingsIngestTypeEnum DELIBERATE = IsrcollectionTaskingsIngestTypeEnum._(0);

  ///  No description available.
  static const IsrcollectionTaskingsIngestTypeEnum DYNAMIC = IsrcollectionTaskingsIngestTypeEnum._(1);

  ///  No description available.
  static const IsrcollectionTaskingsIngestTypeEnum TRAINING = IsrcollectionTaskingsIngestTypeEnum._(2);

  ///  No description available.
  static const IsrcollectionTaskingsIngestTypeEnum TRANSIT = IsrcollectionTaskingsIngestTypeEnum._(3);
  static const Map<int, IsrcollectionTaskingsIngestTypeEnum> values = {
    0: DELIBERATE,
    1: DYNAMIC,
    2: TRAINING,
    3: TRANSIT};

  static const fb.Reader<IsrcollectionTaskingsIngestTypeEnum> reader = _IsrcollectionTaskingsIngestTypeEnumReader();

  @override
  String toString() {
    return 'IsrcollectionTaskingsIngestTypeEnum{value: $value}';
  }
}

class _IsrcollectionTaskingsIngestTypeEnumReader extends fb.Reader<IsrcollectionTaskingsIngestTypeEnum> {
  const _IsrcollectionTaskingsIngestTypeEnumReader();

  @override
  int get size => 1;

  @override
  IsrcollectionTaskingsIngestTypeEnum read(fb.BufferContext bc, int offset) =>
      IsrcollectionTaskingsIngestTypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class IsrcollectionTaskingsIngestCollectionTypeEnum {
  final int value;
  const IsrcollectionTaskingsIngestCollectionTypeEnum._(this.value);

  factory IsrcollectionTaskingsIngestCollectionTypeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum IsrcollectionTaskingsIngestCollectionTypeEnum');
    }
    return result;
  }

  static IsrcollectionTaskingsIngestCollectionTypeEnum? _createOrNull(int? value) => 
      value == null ? null : IsrcollectionTaskingsIngestCollectionTypeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  No description available.
  static const IsrcollectionTaskingsIngestCollectionTypeEnum SIMULTANEOUS = IsrcollectionTaskingsIngestCollectionTypeEnum._(0);

  ///  No description available.
  static const IsrcollectionTaskingsIngestCollectionTypeEnum SEQUENTIAL = IsrcollectionTaskingsIngestCollectionTypeEnum._(1);

  ///  No description available.
  static const IsrcollectionTaskingsIngestCollectionTypeEnum OPERATIONALLY = IsrcollectionTaskingsIngestCollectionTypeEnum._(2);

  ///  No description available.
  static const IsrcollectionTaskingsIngestCollectionTypeEnum DRIVEN = IsrcollectionTaskingsIngestCollectionTypeEnum._(3);

  ///  No description available.
  static const IsrcollectionTaskingsIngestCollectionTypeEnum PRIORITY = IsrcollectionTaskingsIngestCollectionTypeEnum._(4);

  ///  No description available.
  static const IsrcollectionTaskingsIngestCollectionTypeEnum ORDER = IsrcollectionTaskingsIngestCollectionTypeEnum._(5);
  static const Map<int, IsrcollectionTaskingsIngestCollectionTypeEnum> values = {
    0: SIMULTANEOUS,
    1: SEQUENTIAL,
    2: OPERATIONALLY,
    3: DRIVEN,
    4: PRIORITY,
    5: ORDER};

  static const fb.Reader<IsrcollectionTaskingsIngestCollectionTypeEnum> reader = _IsrcollectionTaskingsIngestCollectionTypeEnumReader();

  @override
  String toString() {
    return 'IsrcollectionTaskingsIngestCollectionTypeEnum{value: $value}';
  }
}

class _IsrcollectionTaskingsIngestCollectionTypeEnumReader extends fb.Reader<IsrcollectionTaskingsIngestCollectionTypeEnum> {
  const _IsrcollectionTaskingsIngestCollectionTypeEnumReader();

  @override
  int get size => 1;

  @override
  IsrcollectionTaskingsIngestCollectionTypeEnum read(fb.BufferContext bc, int offset) =>
      IsrcollectionTaskingsIngestCollectionTypeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Individual taskings to complete the mission.
class IsrcollectionTaskingsIngest {
  IsrcollectionTaskingsIngest._(this._bc, this._bcOffset);
  factory IsrcollectionTaskingsIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IsrcollectionTaskingsIngest> reader = _IsrcollectionTaskingsIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Tasking Unique Identifier.
  ///  Example: /// Example: ISRCOLLECTIONTASKINGS-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Type of tasking.
  ///  Example: /// Example: Deliberate
  ///  Constraints: Minimum length = 1, Maximum length = 16
  IsrcollectionTaskingsIngestTypeEnum get type => IsrcollectionTaskingsIngestTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 6, 0));
  ///  Type of collection tasked.
  ///  Example: /// Example: Simultaneous
  ///  Constraints: Minimum length = 1, Maximum length = 16
  IsrcollectionTaskingsIngestCollectionTypeEnum get collectionType => IsrcollectionTaskingsIngestCollectionTypeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 8, 0));
  ///  Human readable definition of this taskings Area Of Responsibility.
  ///  Example: /// Example: Kandahar
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get taskingAor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Eight line.
  ///  Example: /// Example: No example provided.
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get eightLine => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Primary type of intelligence to be collected during the mission.
  ///  Example: /// Example: Sig
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get taskingPrimaryIntelDiscipline => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Sub category of primary intelligence to be collected.
  ///  Example: /// Example: FMV
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get taskingPrimarySubCategory => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Type of tasking intelligence to be collected second.
  ///  Example: /// Example: Intelligence_2
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get taskingSecondaryIntelDiscipline => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Mission sub category for secondary intelligence discipline to be collected.
  ///  Example: /// Example: Convoy
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get taskingSecondarySubCategory => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  What is the primary objective(Role) of this task.
  ///  Example: /// Example: Provide Targeting of Lead Vehicle
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get taskingRole => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Tasking operation name.
  ///  Example: /// Example: OP-HONEY-BADGER
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get taskingOperation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Tasking Priority (1-n).
  ///  Example: /// Example: 10.23
  ///  Constraints: No constraints specified.
  double get taskingPriority => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Military Base to transmit the dissemination of this data.
  ///  Example: /// Example: ENVOYS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get taskingSupportedUnit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Tasking emphasis.
  ///  Example: /// Example: EMPHASIS
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get taskingEmphasis => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Time of retasking, in ISO 8601 UTC format.
  ///  Example: /// Example: 2021-01-19T01:01:15.001Z
  ///  Constraints: No constraints specified.
  String? get taskingRetaskTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get taskingStartPointLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get taskingStartPointLong => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Tasking geographical collection area.
  ///  Example: /// Example: AREA
  ///  Constraints: No constraints specified.
  String? get taskingCollectionArea => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Joint Operations Area.
  ///  Example: /// Example: AREA
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get taskingJoa => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  A synchronization matrix is used to organize the logistics synchronization process during a mission.
  ///  Example: /// Example: MATRIX
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get taskingSyncMatrixBin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Country code of the tasking.  A Country may represent countries, multi-national consortiums, and international organizations.
  ///  Example: /// Example: CODE
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get taskingCountry => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Region of the tasking.
  ///  Example: /// Example: REGION
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get taskingRegion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Subregion of the tasking.
  ///  Example: /// Example: SUBREGION
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get taskingSubRegion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Value of the Sensitive Reconnaissance Operations Track.
  ///  Example: /// Example: SRO
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get sroTrack => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Free text field for the user to specify special instructions needed for this collection.
  ///  Example: /// Example: TEXT
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get specialComGuidance => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get collectionPeriods => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Tasking desired collection requirements.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get taskingCollectionRequirements => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 56);

  @override
  String toString() {
    return 'IsrcollectionTaskingsIngest{id: ${id}, type: ${type}, collectionType: ${collectionType}, taskingAor: ${taskingAor}, eightLine: ${eightLine}, taskingPrimaryIntelDiscipline: ${taskingPrimaryIntelDiscipline}, taskingPrimarySubCategory: ${taskingPrimarySubCategory}, taskingSecondaryIntelDiscipline: ${taskingSecondaryIntelDiscipline}, taskingSecondarySubCategory: ${taskingSecondarySubCategory}, taskingRole: ${taskingRole}, taskingOperation: ${taskingOperation}, taskingPriority: ${taskingPriority}, taskingSupportedUnit: ${taskingSupportedUnit}, taskingEmphasis: ${taskingEmphasis}, taskingRetaskTime: ${taskingRetaskTime}, taskingStartPointLat: ${taskingStartPointLat}, taskingStartPointLong: ${taskingStartPointLong}, taskingCollectionArea: ${taskingCollectionArea}, taskingJoa: ${taskingJoa}, taskingSyncMatrixBin: ${taskingSyncMatrixBin}, taskingCountry: ${taskingCountry}, taskingRegion: ${taskingRegion}, taskingSubRegion: ${taskingSubRegion}, sroTrack: ${sroTrack}, specialComGuidance: ${specialComGuidance}, collectionPeriods: ${collectionPeriods}, taskingCollectionRequirements: ${taskingCollectionRequirements}}';
  }
}

class _IsrcollectionTaskingsIngestReader extends fb.TableReader<IsrcollectionTaskingsIngest> {
  const _IsrcollectionTaskingsIngestReader();

  @override
  IsrcollectionTaskingsIngest createObject(fb.BufferContext bc, int offset) => 
    IsrcollectionTaskingsIngest._(bc, offset);
}

class IsrcollectionTaskingsIngestBuilder {
  IsrcollectionTaskingsIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(27);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addType(IsrcollectionTaskingsIngestTypeEnum? type) {
    fbBuilder.addInt8(1, type?.value);
    return fbBuilder.offset;
  }
  int addCollectionType(IsrcollectionTaskingsIngestCollectionTypeEnum? collectionType) {
    fbBuilder.addInt8(2, collectionType?.value);
    return fbBuilder.offset;
  }
  int addTaskingAorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addEightLineOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTaskingPrimaryIntelDisciplineOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTaskingPrimarySubCategoryOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addTaskingSecondaryIntelDisciplineOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addTaskingSecondarySubCategoryOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addTaskingRoleOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addTaskingOperationOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addTaskingPriority(double? taskingPriority) {
    fbBuilder.addFloat64(11, taskingPriority);
    return fbBuilder.offset;
  }
  int addTaskingSupportedUnitOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addTaskingEmphasisOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addTaskingRetaskTimeOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addTaskingStartPointLat(double? taskingStartPointLat) {
    fbBuilder.addFloat64(15, taskingStartPointLat);
    return fbBuilder.offset;
  }
  int addTaskingStartPointLong(double? taskingStartPointLong) {
    fbBuilder.addFloat64(16, taskingStartPointLong);
    return fbBuilder.offset;
  }
  int addTaskingCollectionAreaOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addTaskingJoaOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addTaskingSyncMatrixBinOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addTaskingCountryOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addTaskingRegionOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addTaskingSubRegionOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addSroTrackOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addSpecialComGuidanceOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addCollectionPeriodsOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addTaskingCollectionRequirementsOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IsrcollectionTaskingsIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final IsrcollectionTaskingsIngestTypeEnum? _type;
  final IsrcollectionTaskingsIngestCollectionTypeEnum? _collectionType;
  final String? _taskingAor;
  final String? _eightLine;
  final String? _taskingPrimaryIntelDiscipline;
  final String? _taskingPrimarySubCategory;
  final String? _taskingSecondaryIntelDiscipline;
  final String? _taskingSecondarySubCategory;
  final String? _taskingRole;
  final String? _taskingOperation;
  final double? _taskingPriority;
  final String? _taskingSupportedUnit;
  final String? _taskingEmphasis;
  final String? _taskingRetaskTime;
  final double? _taskingStartPointLat;
  final double? _taskingStartPointLong;
  final String? _taskingCollectionArea;
  final String? _taskingJoa;
  final String? _taskingSyncMatrixBin;
  final String? _taskingCountry;
  final String? _taskingRegion;
  final String? _taskingSubRegion;
  final String? _sroTrack;
  final String? _specialComGuidance;
  final String? _collectionPeriods;
  final List<String>? _taskingCollectionRequirements;

  IsrcollectionTaskingsIngestObjectBuilder({
    String? id,
    IsrcollectionTaskingsIngestTypeEnum? type,
    IsrcollectionTaskingsIngestCollectionTypeEnum? collectionType,
    String? taskingAor,
    String? eightLine,
    String? taskingPrimaryIntelDiscipline,
    String? taskingPrimarySubCategory,
    String? taskingSecondaryIntelDiscipline,
    String? taskingSecondarySubCategory,
    String? taskingRole,
    String? taskingOperation,
    double? taskingPriority,
    String? taskingSupportedUnit,
    String? taskingEmphasis,
    String? taskingRetaskTime,
    double? taskingStartPointLat,
    double? taskingStartPointLong,
    String? taskingCollectionArea,
    String? taskingJoa,
    String? taskingSyncMatrixBin,
    String? taskingCountry,
    String? taskingRegion,
    String? taskingSubRegion,
    String? sroTrack,
    String? specialComGuidance,
    String? collectionPeriods,
    List<String>? taskingCollectionRequirements,
  })
      : _id = id,
        _type = type,
        _collectionType = collectionType,
        _taskingAor = taskingAor,
        _eightLine = eightLine,
        _taskingPrimaryIntelDiscipline = taskingPrimaryIntelDiscipline,
        _taskingPrimarySubCategory = taskingPrimarySubCategory,
        _taskingSecondaryIntelDiscipline = taskingSecondaryIntelDiscipline,
        _taskingSecondarySubCategory = taskingSecondarySubCategory,
        _taskingRole = taskingRole,
        _taskingOperation = taskingOperation,
        _taskingPriority = taskingPriority,
        _taskingSupportedUnit = taskingSupportedUnit,
        _taskingEmphasis = taskingEmphasis,
        _taskingRetaskTime = taskingRetaskTime,
        _taskingStartPointLat = taskingStartPointLat,
        _taskingStartPointLong = taskingStartPointLong,
        _taskingCollectionArea = taskingCollectionArea,
        _taskingJoa = taskingJoa,
        _taskingSyncMatrixBin = taskingSyncMatrixBin,
        _taskingCountry = taskingCountry,
        _taskingRegion = taskingRegion,
        _taskingSubRegion = taskingSubRegion,
        _sroTrack = sroTrack,
        _specialComGuidance = specialComGuidance,
        _collectionPeriods = collectionPeriods,
        _taskingCollectionRequirements = taskingCollectionRequirements;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? taskingAorOffset = _taskingAor == null ? null
        : fbBuilder.writeString(_taskingAor!);
    final int? eightLineOffset = _eightLine == null ? null
        : fbBuilder.writeString(_eightLine!);
    final int? taskingPrimaryIntelDisciplineOffset = _taskingPrimaryIntelDiscipline == null ? null
        : fbBuilder.writeString(_taskingPrimaryIntelDiscipline!);
    final int? taskingPrimarySubCategoryOffset = _taskingPrimarySubCategory == null ? null
        : fbBuilder.writeString(_taskingPrimarySubCategory!);
    final int? taskingSecondaryIntelDisciplineOffset = _taskingSecondaryIntelDiscipline == null ? null
        : fbBuilder.writeString(_taskingSecondaryIntelDiscipline!);
    final int? taskingSecondarySubCategoryOffset = _taskingSecondarySubCategory == null ? null
        : fbBuilder.writeString(_taskingSecondarySubCategory!);
    final int? taskingRoleOffset = _taskingRole == null ? null
        : fbBuilder.writeString(_taskingRole!);
    final int? taskingOperationOffset = _taskingOperation == null ? null
        : fbBuilder.writeString(_taskingOperation!);
    final int? taskingSupportedUnitOffset = _taskingSupportedUnit == null ? null
        : fbBuilder.writeString(_taskingSupportedUnit!);
    final int? taskingEmphasisOffset = _taskingEmphasis == null ? null
        : fbBuilder.writeString(_taskingEmphasis!);
    final int? taskingRetaskTimeOffset = _taskingRetaskTime == null ? null
        : fbBuilder.writeString(_taskingRetaskTime!);
    final int? taskingCollectionAreaOffset = _taskingCollectionArea == null ? null
        : fbBuilder.writeString(_taskingCollectionArea!);
    final int? taskingJoaOffset = _taskingJoa == null ? null
        : fbBuilder.writeString(_taskingJoa!);
    final int? taskingSyncMatrixBinOffset = _taskingSyncMatrixBin == null ? null
        : fbBuilder.writeString(_taskingSyncMatrixBin!);
    final int? taskingCountryOffset = _taskingCountry == null ? null
        : fbBuilder.writeString(_taskingCountry!);
    final int? taskingRegionOffset = _taskingRegion == null ? null
        : fbBuilder.writeString(_taskingRegion!);
    final int? taskingSubRegionOffset = _taskingSubRegion == null ? null
        : fbBuilder.writeString(_taskingSubRegion!);
    final int? sroTrackOffset = _sroTrack == null ? null
        : fbBuilder.writeString(_sroTrack!);
    final int? specialComGuidanceOffset = _specialComGuidance == null ? null
        : fbBuilder.writeString(_specialComGuidance!);
    final int? collectionPeriodsOffset = _collectionPeriods == null ? null
        : fbBuilder.writeString(_collectionPeriods!);
    final int? taskingCollectionRequirementsOffset = _taskingCollectionRequirements == null ? null
        : fbBuilder.writeList(_taskingCollectionRequirements!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(27);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addInt8(1, _type?.value);
    fbBuilder.addInt8(2, _collectionType?.value);
    fbBuilder.addOffset(3, taskingAorOffset);
    fbBuilder.addOffset(4, eightLineOffset);
    fbBuilder.addOffset(5, taskingPrimaryIntelDisciplineOffset);
    fbBuilder.addOffset(6, taskingPrimarySubCategoryOffset);
    fbBuilder.addOffset(7, taskingSecondaryIntelDisciplineOffset);
    fbBuilder.addOffset(8, taskingSecondarySubCategoryOffset);
    fbBuilder.addOffset(9, taskingRoleOffset);
    fbBuilder.addOffset(10, taskingOperationOffset);
    fbBuilder.addFloat64(11, _taskingPriority);
    fbBuilder.addOffset(12, taskingSupportedUnitOffset);
    fbBuilder.addOffset(13, taskingEmphasisOffset);
    fbBuilder.addOffset(14, taskingRetaskTimeOffset);
    fbBuilder.addFloat64(15, _taskingStartPointLat);
    fbBuilder.addFloat64(16, _taskingStartPointLong);
    fbBuilder.addOffset(17, taskingCollectionAreaOffset);
    fbBuilder.addOffset(18, taskingJoaOffset);
    fbBuilder.addOffset(19, taskingSyncMatrixBinOffset);
    fbBuilder.addOffset(20, taskingCountryOffset);
    fbBuilder.addOffset(21, taskingRegionOffset);
    fbBuilder.addOffset(22, taskingSubRegionOffset);
    fbBuilder.addOffset(23, sroTrackOffset);
    fbBuilder.addOffset(24, specialComGuidanceOffset);
    fbBuilder.addOffset(25, collectionPeriodsOffset);
    fbBuilder.addOffset(26, taskingCollectionRequirementsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
