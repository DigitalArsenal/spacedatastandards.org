// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class TrackDetailsAbridgedEnvEnum {
  final int value;
  const TrackDetailsAbridgedEnvEnum._(this.value);

  factory TrackDetailsAbridgedEnvEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum TrackDetailsAbridgedEnvEnum');
    }
    return result;
  }

  static TrackDetailsAbridgedEnvEnum? _createOrNull(int? value) => 
      value == null ? null : TrackDetailsAbridgedEnvEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
  static const TrackDetailsAbridgedEnvEnum AIR = TrackDetailsAbridgedEnvEnum._(0);

  ///  On the surface of dry land.
  static const TrackDetailsAbridgedEnvEnum LAND = TrackDetailsAbridgedEnvEnum._(1);

  ///  Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
  static const TrackDetailsAbridgedEnvEnum SPACE = TrackDetailsAbridgedEnvEnum._(2);

  ///  On the surface of a body of water.
  static const TrackDetailsAbridgedEnvEnum SURFACE = TrackDetailsAbridgedEnvEnum._(3);

  ///  Below the surface of a body of water.
  static const TrackDetailsAbridgedEnvEnum SUBSURFACE = TrackDetailsAbridgedEnvEnum._(4);

  ///  Environment is not known.
  static const TrackDetailsAbridgedEnvEnum UNKNOWN = TrackDetailsAbridgedEnvEnum._(5);
  static const Map<int, TrackDetailsAbridgedEnvEnum> values = {
    0: AIR,
    1: LAND,
    2: SPACE,
    3: SURFACE,
    4: SUBSURFACE,
    5: UNKNOWN};

  static const fb.Reader<TrackDetailsAbridgedEnvEnum> reader = _TrackDetailsAbridgedEnvEnumReader();

  @override
  String toString() {
    return 'TrackDetailsAbridgedEnvEnum{value: $value}';
  }
}

class _TrackDetailsAbridgedEnvEnumReader extends fb.Reader<TrackDetailsAbridgedEnvEnum> {
  const _TrackDetailsAbridgedEnvEnumReader();

  @override
  int get size => 1;

  @override
  TrackDetailsAbridgedEnvEnum read(fb.BufferContext bc, int offset) =>
      TrackDetailsAbridgedEnvEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class TrackDetailsAbridgedObjIdentEnum {
  final int value;
  const TrackDetailsAbridgedObjIdentEnum._(this.value);

  factory TrackDetailsAbridgedObjIdentEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum TrackDetailsAbridgedObjIdentEnum');
    }
    return result;
  }

  static TrackDetailsAbridgedObjIdentEnum? _createOrNull(int? value) => 
      value == null ? null : TrackDetailsAbridgedObjIdentEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 6;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  static const TrackDetailsAbridgedObjIdentEnum ASSUMED_FRIEND = TrackDetailsAbridgedObjIdentEnum._(0);

  ///  Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  static const TrackDetailsAbridgedObjIdentEnum FRIEND = TrackDetailsAbridgedObjIdentEnum._(1);

  ///  Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  static const TrackDetailsAbridgedObjIdentEnum HOSTILE = TrackDetailsAbridgedObjIdentEnum._(2);

  ///  Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  static const TrackDetailsAbridgedObjIdentEnum NEUTRAL = TrackDetailsAbridgedObjIdentEnum._(3);

  ///  Track object which has not been evaluated.
  static const TrackDetailsAbridgedObjIdentEnum PENDING = TrackDetailsAbridgedObjIdentEnum._(4);

  ///  Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  static const TrackDetailsAbridgedObjIdentEnum SUSPECT = TrackDetailsAbridgedObjIdentEnum._(5);

  ///  Track object which has been evaluated and does not meet criteria for any standard identity.
  static const TrackDetailsAbridgedObjIdentEnum UNKNOWN = TrackDetailsAbridgedObjIdentEnum._(6);
  static const Map<int, TrackDetailsAbridgedObjIdentEnum> values = {
    0: ASSUMED_FRIEND,
    1: FRIEND,
    2: HOSTILE,
    3: NEUTRAL,
    4: PENDING,
    5: SUSPECT,
    6: UNKNOWN};

  static const fb.Reader<TrackDetailsAbridgedObjIdentEnum> reader = _TrackDetailsAbridgedObjIdentEnumReader();

  @override
  String toString() {
    return 'TrackDetailsAbridgedObjIdentEnum{value: $value}';
  }
}

class _TrackDetailsAbridgedObjIdentEnumReader extends fb.Reader<TrackDetailsAbridgedObjIdentEnum> {
  const _TrackDetailsAbridgedObjIdentEnumReader();

  @override
  int get size => 1;

  @override
  TrackDetailsAbridgedObjIdentEnum read(fb.BufferContext bc, int offset) =>
      TrackDetailsAbridgedObjIdentEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

class TrackDetailsAbridgedDataModeEnum {
  final int value;
  const TrackDetailsAbridgedDataModeEnum._(this.value);

  factory TrackDetailsAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum TrackDetailsAbridgedDataModeEnum');
    }
    return result;
  }

  static TrackDetailsAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : TrackDetailsAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const TrackDetailsAbridgedDataModeEnum REAL = TrackDetailsAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const TrackDetailsAbridgedDataModeEnum TEST = TrackDetailsAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const TrackDetailsAbridgedDataModeEnum SIMULATED = TrackDetailsAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const TrackDetailsAbridgedDataModeEnum EXERCISE = TrackDetailsAbridgedDataModeEnum._(3);
  static const Map<int, TrackDetailsAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<TrackDetailsAbridgedDataModeEnum> reader = _TrackDetailsAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'TrackDetailsAbridgedDataModeEnum{value: $value}';
  }
}

class _TrackDetailsAbridgedDataModeEnumReader extends fb.Reader<TrackDetailsAbridgedDataModeEnum> {
  const _TrackDetailsAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  TrackDetailsAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      TrackDetailsAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// These services provide operations for querying of all available track details and amplifying track data. A track is a position and optionally a heading/velocity of an object such as an aircraft, marine vessel, etc at a particular timestamp. It also includes optional information regarding the identity/type of the target object and other amplifying object data, if known.
class TrackDetailsAbridged {
  TrackDetailsAbridged._(this._bc, this._bcOffset);
  factory TrackDetailsAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TrackDetailsAbridged> reader = _TrackDetailsAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: TRACK-DETAILS-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
  ///   AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
  ///   LAND: On the surface of dry land.
  ///   SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
  ///   SURFACE: On the surface of a body of water.
  ///   SUBSURFACE: Below the surface of a body of water.
  ///   UNKNOWN: Environment is not known.
  ///  Example: /// Example: LAND
  ///  Constraints: Minimum length = 0, Maximum length = 16
  TrackDetailsAbridgedEnvEnum get env => TrackDetailsAbridgedEnvEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 8, 0));
  ///  Optional message type designation.
  ///  Example: /// Example: PLATFORM
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get msgType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The vessel hull number designation of this maritime vessel.  The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
  ///  Example: /// Example: A30081
  ///  Constraints: Minimum length = 0, Maximum length = 7
  String? get hullNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The Pseudo Identification Feature (PIF) number is a four digit code that provides an exact ID for the ship or aircraft. Friendly military only.
  ///  Example: /// Example: 0137
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get pif => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
  ///  Example: /// Example: B45524
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get sconum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The Naval Tactical Data System (NTDS) track number assigned to this track.
  ///  Example: /// Example: ZZ777
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get ntds => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The Intel Discrete Identifier (IDI) code assigned to this track.  The IDI is a four-digit code representing hostile or unknown tracks.
  ///  Example: /// Example: 7670
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get disId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  The category code that represents the associated facility purpose within the target system.  This value is the category code in the MIDB (Modernized Intelligence Database).
  ///  Example: /// Example: 20345
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get midbCat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The Basic Encyclopedia (BE) number associated with this installation or area.
  ///  Example: /// Example: ENC-123
  ///  Constraints: Minimum length = 0, Maximum length = 10
  String? get beNumber => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The O-suffix associated with this facility.  The O-suffix is a five-character alpha/numeric system used to identify a facility, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the facility within the Modernized Integrated Database (MIDB).  The Installation beNumber and oSuffix are also used in conjunction with the midbCat code to classify the function or purpose of the facility.
  ///  Example: /// Example: AA125
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get oSuffix => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  This value represents the site number of a specific electronic site or its associated equipment.
  ///  Example: /// Example: E12345012
  ///  Constraints: Minimum length = 0, Maximum length = 9
  String? get pin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Flag indicating whether the missile is considered lost, if reporting a missile track.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get lostTrkInd => const fb.BoolReader().vTableGet(_bc, _bcOffset, 30, false);
  ///  Track ID for the source of the Missile-Unique Identifier (MUID), if reporting a missile track.
  ///  Example: /// Example: MUID-SRC-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get muidSrcTrk => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Source of the Missile-Unique Identifier (MUID), if reporting a missile track.
  ///  Example: /// Example: MUID-SRC
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get muidSrc => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The status of the missile track in this record, if reporting a missile track (e.g. AT LAUNCH, AT OBSERVATION, FLYING, IMPACTED, LOST, STALE, DEBRIS).
  ///  Example: /// Example: AT LAUNCH
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get mslStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
  ///  Example: /// Example: 0.95
  ///  Constraints: No constraints specified.
  double get trkConf => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Track Quality is reported as an integer from 0-15. Track Quality specifies the reliability of the positional information of a reported track; Higher values indicate higher track quality, i.e., lower errors in reported position.
  ///  Example: /// Example: 1
  ///  Constraints: No constraints specified.
  int get trkQual => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 40, 0);
  ///  A track may be designated as an alert track with the following designations:
  ///  HIT - High Interest Track
  ///  TGT - Target
  ///  SUS - Suspect Carrier
  ///  NSP - Cleared Suspect
  ///  If alert is null, the track is assumed to be of non-alert status.
  ///  Example: /// Example: TGT
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get alert => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Original source cross-reference code for the Command that originated the report.
  ///  Example: /// Example: INT
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get origXref => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Primary ELINT Notification (ELNOT), a five character identifier assigned to each non-communication emission for collection and reporting purposes.  This five-digit field begins with an alpha character, followed by three numbers, ending with another alpha character.
  ///  Example: /// Example: A123A
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get elnot1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Secondary ELINT Notification (ELNOT), a five character identifier assigned to each non-communication emission for collection and reporting purposes.  This five-digit field begins with an alpha character, followed by three numbers, ending with another alpha character.
  ///  Example: /// Example: A123B
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get elnot2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
  ///   ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  ///   FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  ///   HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  ///   NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  ///   PENDING: Track object which has not been evaluated.
  ///   SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  ///   UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  ///  Example: /// Example: FRIEND
  ///  Constraints: Minimum length = 0, Maximum length = 32
  TrackDetailsAbridgedObjIdentEnum get objIdent => TrackDetailsAbridgedObjIdentEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 50, 0));
  ///  The generic classification of the track object/group (e.g., BALLISTIC, HELICOPTER, TRACKED, WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676 object type classifications.
  ///  Example: /// Example: TRACKED
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get objType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  The object platform type is intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.  For cases in which no MIl-STD-6016 designation exists, a general description can be used (e.g. SATELLITE).
  ///  Example: /// Example: WEAPON
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get objPlat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.  For cases in which no MIl-STD-6016 designation exists, a general description can be used (e.g. ANTISPACE WARFARE).
  ///  Example: /// Example: HOLDING
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get objAct => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Nationality of the tracked object.
  ///  Example: /// Example: USA
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get objNat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Track name.
  ///  Example: /// Example: TRACK-NAME
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Abbreviated track name.
  ///  Example: /// Example: COMMSCHECK
  ///  Constraints: Minimum length = 0, Maximum length = 11
  String? get shortName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  UUID identifying the track, which should remain the same on subsequent tracks of the same object.
  ///  Example: /// Example: trkId
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get trkId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  The track number (TN) of a surveillance entity. Intended as, but not constrained to, the J-series track number encoded as five character alpha-numeric characters. Users should refer to J-series documentation for specific TN definitions.
  ///  Example: /// Example: trkNum
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get trkNum => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Value Indicating the scope of this track:
  ///  1 - TERMINAL  (Terminal) - available only on the workstation where they were created.
  ///  2 - LOCAL  (Local) - available only on workstations in the local area network
  ///  3 - OTH  (Over the Horizon) - available to everyone.
  ///  Example: /// Example: OTH
  ///  Constraints: Minimum length = 0, Maximum length = 12
  String? get trkScope => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  The unique identifier of the source node.
  ///  Example: /// Example: MCS
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get sourceUid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  The call sign currently assigned to this track object.
  ///  Example: /// Example: Charlie
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get callSign => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
  ///   FAKER: Friendly track, object, or entity acting as an exercise hostile.
  ///   JOKER: Friendly track, object, or entity acting as an exercise suspect.
  ///   KILO: Friendly high-value object.
  ///   TRAVELLER: Suspect land or surface track following a recognized traffic route.
  ///   ZOMBIE: Suspect track, object, or entity of special interest.
  ///  Example: /// Example: JOKER
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get identAmp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Space amplification indicates additional information on the space environment object being reported (e.g. DEBRIS, FUEL-AIR EXPLOSIVE, NUCLEAR WARHEAD).
  ///  Example: /// Example: NUCLEAR WARHEAD
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get spaceAmp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Confidence level of the amplifying characteristics.  Values range from 0 to 6, with 0 indicating the lowest confidence and 6 indicating the highest.
  ///  Example: /// Example: 6
  ///  Constraints: No constraints specified.
  int get spaceAmpConf => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 78, 0);
  ///  Specific type of point or track with an environment of space.
  ///  Example: /// Example: SS-21_MOD_2_CRBM
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get spaceSpecType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  Subtype is a finer grain categorization of missile types. Examples include but are not limited to SRBM, MRBM, IRBM, LRBM, ICBM, SLBM:
  ///  SRBM - Short-Range Ballistic Missile
  ///  MRBM - Medium-Range Ballistic Missile
  ///  IRBM - Intermediate-Range Ballistic Missile
  ///  LRBM - Long-Range Ballistic Missile
  ///  ICBM - Intercontinental Ballistic Missile
  ///  SLBM - Submarine-Launched Ballistic Missile.
  ///  Example: /// Example: SLBM
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get acftSubType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Track timestamp in ISO8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get ts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Missile launch timestamp in ISO8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get launchTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  Missile impact timestamp in ISO8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get impactTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  The message timestamp that the ftn track position was recorded, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get ftnMsgTs => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  An ftn used to associate information and directives with the track.
  ///  Example: /// Example: FTN
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get ftn => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  The name of the Command reporting the Force Over-The-Horizon Track Coordinator (FOTC) track number.
  ///  Example: /// Example: TRUETT
  ///  Constraints: Minimum length = 0, Maximum length = 18
  String? get ftnCmd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  The message timestamp that the reference track position was recorded, in ISO 8601 UTC format with microsecond precision. The 'rtnMsgTs' and 'rtn' arrays must match in size.
  ///  Example: /// Example: ['2021-02-25T12:00:00.123456Z']
  ///  Constraints: No constraints specified.
  List<String>? get rtnMsgTs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 96);
  ///  A Reference Track Number used to associate information and directives with the track.  Referenced, but not constrained to, MIL-STD-6016F Reference Track Number. The 'rtnMsgTs' and 'rtn' arrays must match in size.
  ///  Example: /// Example: ['ex-a']
  ///  Constraints: No constraints specified.
  List<String>? get rtn => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 98);
  ///  Value representing the state of the Received Track.
  ///  Example: /// Example: Local_RTN
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get rtnTrkState => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  The name of the Command reporting the Received Track Number (RTN).
  ///  Example: /// Example: YORKTOWN
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get rtnCmd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Id/name of sensor providing the track data.
  ///  Example: /// Example: OTH
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get sen => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Source cross-reference code for the Command that originated the track report.
  ///  Example: /// Example: INT
  ///  Constraints: Minimum length = 0, Maximum length = 18
  String? get rptChxref => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  Flag indicating whether this track is archived.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get rptArchived => const fb.BoolReader().vTableGet(_bc, _bcOffset, 108, false);
  ///  Flag indicating that this track is self reported.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get selfReport => const fb.BoolReader().vTableGet(_bc, _bcOffset, 110, false);
  ///  The MIL-STD-2525B symbology code that applies to the subject of this track.
  ///  Example: /// Example: SHP*S----------
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get mil2525Bstr => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);
  ///  Transponder ID for the track.  This does not correspond to the UDL transponder schema.
  ///  Example: /// Example: 11
  ///  Constraints: Minimum length = 0, Maximum length = 61
  String? get trnspdrId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 114);
  ///  Transponder type for the track.
  ///  Example: /// Example: AFTS
  ///  Constraints: Minimum length = 0, Maximum length = 51
  String? get trnspdrType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 116);
  ///  Radar name of the sensor tracking this object (e.g., RAY1500, SPN-43, HEADNET).
  ///  Example: /// Example: RAY1500
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get emitterName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 118);
  ///  Source code for source of information used to detect track.
  ///  Example: /// Example: S1
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get infoSource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 120);
  ///  Flag indicating that the missile is currently in a state of boosting, if reporting a missile track.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get boosting => const fb.BoolReader().vTableGet(_bc, _bcOffset, 122, false);
  ///  Frequency, in hertz, for the signature report.
  ///  Example: /// Example: 63.65
  ///  Constraints: No constraints specified.
  double get freq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 124, 0.0);
  ///  Maximum frequency, in hertz, reported for this acoustic track.
  ///  Example: /// Example: 10324.53
  ///  Constraints: No constraints specified.
  double get maxFreq => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 126, 0.0);
  ///  List of harmonics of the signature report in descending order of predominance using 1-2 digit combinations separated by commas, e.g., 8,12,4. (1-22NS).
  ///  Example: /// Example: 8,12,4
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get harmonics => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 128);
  ///  Pulse repetition interval of the emitter, measured in microseconds.  The interval between the start of one pulse and the start of another.
  ///  Example: /// Example: 56657.2238
  ///  Constraints: No constraints specified.
  double get pri => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 130, 0.0);
  ///  Pulse repetition frequency of the emitter, measured in pulses per second.  PRF is the number of pulses transmitted per second. This is the reciprocal of the pri value.
  ///  Example: /// Example: 17.65
  ///  Constraints: No constraints specified.
  double get prf => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 132, 0.0);
  ///  Pulse width of the emitter, measured in microseconds.  This is the duration of the pulse.
  ///  Example: /// Example: 1347.45
  ///  Constraints: No constraints specified.
  double get pw => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 134, 0.0);
  ///  Type of radar scan.
  ///  Example: /// Example: UNK
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get scanType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 136);
  ///  Scan rate of the emitter, measured in seconds per rotation (SPR).
  ///  Example: /// Example: 12.01
  ///  Constraints: No constraints specified.
  double get scanRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 138, 0.0);
  ///  The Sequential Contact Number (SCN) for this track.
  ///  Example: /// Example: 1474305
  ///  Constraints: No constraints specified.
  int get scn => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 140, 0);
  ///  Correlation Index; reference code for the site that originally reported the track.
  ///  Example: /// Example: BB
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get cI => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 142);
  ///  The angle formed between the line of sight of the observer and the horizon, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
  ///  Example: /// Example: 15.2
  ///  Constraints: No constraints specified.
  double get angElev => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 144, 0.0);
  ///  WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 19.88550102
  ///  Constraints: No constraints specified.
  double get lat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 146, 0.0);
  ///  WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 46.74596844
  ///  Constraints: No constraints specified.
  double get lon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 148, 0.0);
  ///  WGS-84 latitude of the missile launch point, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 19.88550102
  ///  Constraints: No constraints specified.
  double get launchLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 150, 0.0);
  ///  WGS-84 longitude of the missile launch point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 46.74550102
  ///  Constraints: No constraints specified.
  double get launchLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 152, 0.0);
  ///  WGS-84 latitude of the missile impact point, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 19.88550102
  ///  Constraints: No constraints specified.
  double get impactLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 154, 0.0);
  ///  WGS-84 longitude of the missile impact point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 46.74550102
  ///  Constraints: No constraints specified.
  double get impactLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 156, 0.0);
  ///  WGS-84 azimuth corridor reference point latitude, in degrees. -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 19.88550102
  ///  Constraints: No constraints specified.
  double get polarSingLocLat => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 158, 0.0);
  ///  WGS-84 azimuth corridor reference point longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 46.74550102
  ///  Constraints: No constraints specified.
  double get polarSingLocLon => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 160, 0.0);
  ///  The azimuth corridor centerline angle measured in degrees clockwise from true north, of the center line of an azimuth corridor. The center line extends from the referenced corridor origin location.
  ///  Example: /// Example: 12.876
  ///  Constraints: No constraints specified.
  double get azCorrCenterLine => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 162, 0.0);
  ///  Azimuth corridor arc distance measured in meters from reference point of azimuth corridor to far edge of bounded azimuth corridor wedge, measured along azimuth corridor center line.
  ///  Example: /// Example: 71.76
  ///  Constraints: No constraints specified.
  double get azCorrArcWidth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 164, 0.0);
  ///  The error in the semi-intermediate axis.  The semi-intermediate axis is intermediate in length between semi-major and semi-minor axes. This field is doubled and centered on intersection of area semi-major axis and area semi-minor axis at 90 degrees to the plane defined by those axes. For these shapes, the volume is defined as having a 50-percent probability of containing the true location of the referenced entity.
  ///  Example: /// Example: 7010.882
  ///  Constraints: No constraints specified.
  double get errSemiIntAxis => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 166, 0.0);
  ///  The error in the Area Orientation.  Area Orientation is the angle or roll in degrees, between area semi-minor axis and plane defined by local vertical and area semi-major axis. When reported without major and minor axis, it is angle between an axis perpendicular to a 2D true north axis and plane defined by local vertical and a 2D true north axis.
  ///  Example: /// Example: 69.6
  ///  Constraints: No constraints specified.
  double get errAreaOrient => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 168, 0.0);
  ///  The error in the Semi-major elevation axis. Semi-major elevation axis is the elevation of the cubical, 3D rectangular, cylindrical, 3D ellipsoidal, or spherical semi-major axis, in degrees, measured from local horizontal.
  ///  Example: /// Example: 168.8
  ///  Constraints: No constraints specified.
  double get errSemiMajElev => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 170, 0.0);
  ///  Geometric area switch identifies the 3D shape of the error volume by providing the 2D shape for the 3D plane. The 3D plane is the plane orthogonal to the area semi-major axis and area semi-minor axis. Depending on whether the 2D plane is reported as an error ellipse 2D or as an error rectangle 2D, this switch reports a complete error volume that is cubical, 3D rectangular, cylindrical, 3D ellipsoidal, or spherical.
  ///  0 - SWITCH_TYPE_UNKNOWN
  ///  1 - SQUARE_RECTANGLE
  ///  2 - CIRCLE_ELLIPSE.
  ///  Example: /// Example: CIRCLE_ELLIPSE
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get errGeoAreaSwitch => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 172);
  ///  Track point burnout altitude relative to WGS-84 ellipsoid, in meters.
  ///  Example: /// Example: 30567.452
  ///  Constraints: No constraints specified.
  double get burnoutAlt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 174, 0.0);
  ///  Threat Event System Track ID.
  ///  Example: /// Example: 6217
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get tesEventId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 176);
  ///  Track object speed, in meters/sec.
  ///  Example: /// Example: 15.03443
  ///  Constraints: No constraints specified.
  double get spd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 178, 0.0);
  ///  The average speed, in kilometers/hour, calculated for the subject during the latest voyage/excursion.
  ///  Example: /// Example: 18.25
  ///  Constraints: No constraints specified.
  double get avgSpd => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 180, 0.0);
  ///  Motion model Time On Leg in hours.
  ///  Example: /// Example: 4.1
  ///  Constraints: No constraints specified.
  double get tol => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 182, 0.0);
  ///  Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a track object height above ellipsoid, and negative values indicate a track object below ellipsoid, applicable to the depth estimate for a subsurface track.
  ///  Example: /// Example: 153.01
  ///  Constraints: No constraints specified.
  double get alt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 184, 0.0);
  ///  Track object heading, in degrees clockwise from true north.
  ///  Example: /// Example: 19.7
  ///  Constraints: No constraints specified.
  double get hdng => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 186, 0.0);
  ///  The track object course-over-ground, in degrees clockwise from true North at the object location (0-360 degrees).
  ///  Example: /// Example: 4.3580153
  ///  Constraints: No constraints specified.
  double get course => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 188, 0.0);
  ///  The number of propeller revolutions per minute for a submarine or ship.
  ///  Example: /// Example: 8.2
  ///  Constraints: No constraints specified.
  double get propRpm => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 190, 0.0);
  ///  The number of turns of the vessel propellers per knot of forward motion.
  ///  Example: /// Example: 2.65
  ///  Constraints: No constraints specified.
  double get tpk => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 192, 0.0);
  ///  The Cooperative Location Indicator specifies whether the reported entity location was derived using reported locations from sensors on more than one platform.
  ///  0 - COOPERATIVE_LOCATOR_NONE
  ///  1 - SINGLE_PLATFORM
  ///  2 - FRAGMENT
  ///  3 - COOPERATIVE.
  ///  Example: /// Example: COOPERATIVE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get coopLocInd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 194);
  ///  The manuevering indicator specifying the missile boost phase.
  ///  0 - POST_BOOST_NONE
  ///  1 - POST_BOOST_MANUEVER
  ///  2 - POST_BOOST_COMPLETE_MANUEVER.
  ///  Example: /// Example: POST_BOOST_NONE
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get maneuverInd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 196);
  ///  The launch location Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the launchAouData array and is required if launchAouData is not null. See the launchAouData field definition for specific information.
  ///  Example: /// Example: ELLIPSE
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get launchAouType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 198);
  ///  Three element array representing the launch location Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the launchAouType specified in this record:
  ///   ELLIPSE:
  ///     brg - orientation in degrees of the ellipse
  ///     a1 - semi-major axis in meters
  ///     a2 - semi-minor axis in meters
  ///   BEARING (BEARING BOX or MTST BEARING BOX):
  ///     brg - orientation in degrees of the bearing box
  ///     a1 - length of bearing box in meters
  ///     a2 - half-width of bearing box in meters
  ///   OTHER (All other type values):
  ///     brg - line of bearing in degrees true
  ///     a1 - bearing error in degrees
  ///     a2 - estimated range in meters.
  ///  Example: /// Example: [34.3, 26.5, 1.2]
  ///  Constraints: No constraints specified.
  List<String>? get launchAouData => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 200);
  ///  The impact point Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the impactAouData array and is required if impactAouData is not null. See the impactAouData field definition for specific information.
  ///  Example: /// Example: ELLIPSE
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get impactAouType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 202);
  ///  Three element array representing the impact point Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the impactAouType specified in this record:
  ///   ELLIPSE:
  ///     brg - orientation in degrees of the ellipse
  ///     a1 - semi-major axis in meters
  ///     a2 - semi-minor axis in meters
  ///   BEARING (BEARING BOX or MTST BEARING BOX):
  ///     brg - orientation in degrees of the bearing box
  ///     a1 - length of bearing box in meters
  ///     a2 - half-width of bearing box in meters
  ///   OTHER (All other type values):
  ///     brg - line of bearing in degrees true
  ///     a1 - bearing error in degrees
  ///     a2 - estimated range in meters.
  ///  Example: /// Example: [34.3, 26.5, 1.2]
  ///  Constraints: No constraints specified.
  List<String>? get impactAouData => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 204);
  ///  The track Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouRptData array and is required if aouRptData is not null. See the aouRptData field definition for specific information.
  ///  Example: /// Example: ELLIPSE
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get aouRptType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 206);
  ///  Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouRptType specified in this record:
  ///   ELLIPSE:
  ///     brg - orientation in degrees of the ellipse
  ///     a1 - semi-major axis in meters
  ///     a2 - semi-minor axis in meters
  ///   BEARING (BEARING BOX or MTST BEARING BOX):
  ///     brg - orientation in degrees of the bearing box
  ///     a1 - length of bearing box in meters
  ///     a2 - half-width of bearing box in meters
  ///   OTHER (All other type values):
  ///     brg - line of bearing in degrees true
  ///     a1 - bearing error in degrees
  ///     a2 - estimated range in meters.
  ///  Example: /// Example: [34.3, 26.5, 1.2]
  ///  Constraints: No constraints specified.
  List<String>? get aouRptData => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 208);
  ///  Track object location in ECEF [x, y, z], meters. When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.35, 3.42]
  ///  Constraints: No constraints specified.
  List<String>? get ecefPos => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 210);
  ///  Track object velocity in ECEF [x', y', z'], meters/sec. When provided, array must always contain 3 values.
  ///  Example: /// Example: [1.23, 2.35, 3.42]
  ///  Constraints: No constraints specified.
  List<String>? get ecefVel => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 212);
  ///  The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
  ///  Example: /// Example: 97
  ///  Constraints: No constraints specified.
  double get containment => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 214, 0.0);
  ///  The distance, in meters, of the closest point of approach between this track to the master reference track.
  ///  Example: /// Example: 500
  ///  Constraints: No constraints specified.
  double get cpa => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 216, 0.0);
  ///  The time, in ISO 8601 UTC format with millisecond precision, of the  closest point of approach between this track and the master reference track.
  ///  Example: /// Example: 2021-02-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get tcpa => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 218);
  ///  The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored, Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation status definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with navigation status. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
  ///  Example: /// Example: Underway Using Engine
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get navStatus => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 220);
  ///  The type of electronic position fixing device (e.g. GPS, GLONASS, etc.). Intended as, but not constrained to, the USCG NAVCEN electronic position fixing device definitions. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
  ///  Example: /// Example: GPS
  ///  Constraints: Minimum length = 0, Maximum length = 24
  String? get posDeviceType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 222);
  ///  Type of Aid to Navigation. Intended as, but not constrained to, the USCG NAVCEN  aids to navigation. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
  ///  Example: /// Example: Cardinal Mark N
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get aton => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 224);
  ///  Indicator position (OFF, ON, UNK) for optional floating navigational aids only.
  ///  Example: /// Example: ON
  ///  Constraints: Minimum length = 0, Maximum length = 3
  String? get offPosInd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 226);
  ///  The reference dimensions of the vessel, reported as [A, B, C, D], in meters. Where the array values represent the distance fore (A), aft (B), to port (C), and to starboard (D) of the navigation antenna. Array with values A = C = 0 and B, D > 0 indicate the length (B) and width (D) of the vessel without antenna position reference.
  ///  Example: /// Example: [50.1, 50.1, 20.1, 20.1]
  ///  Constraints: No constraints specified.
  List<String>? get antennaRefDimensions => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 228);
  ///  The common name for a group of ships with similar design, usually named for the first vessel of the class.
  ///  Example: /// Example: Nimitz
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get shipClass => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 230);
  ///  The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
  ///  Example: /// Example: 9015462
  ///  Constraints: No constraints specified.
  int get imon => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 232, 0);
  ///  The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
  ///  Example: /// Example: 304010417
  ///  Constraints: No constraints specified.
  int get mmsi => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 234, 0);
  ///  The maximum static draught, in meters, of the vessel according to the AIS transmission.
  ///  Example: /// Example: 21.1
  ///  Constraints: No constraints specified.
  double get draught => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 236, 0.0);
  ///  The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
  ///  Example: /// Example: 511.1
  ///  Constraints: No constraints specified.
  double get length => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 238, 0.0);
  ///  The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
  ///  Example: /// Example: 24.1
  ///  Constraints: No constraints specified.
  double get width => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 240, 0.0);
  ///  The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
  ///  Example: /// Example: Freight
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get cargoType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 242);
  ///  Appearance group code.
  ///  GP1 - Superstructure exceeds 1/3 of ship length.
  ///  GP2 - Superstructure less than 1/3 of ship length.
  ///  GP3 - Stack aft.
  ///  Example: /// Example: GP1
  ///  Constraints: Minimum length = 0, Maximum length = 7
  String? get appGrp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 244);
  ///  Hull profile code. Based on GCCS-J hull profiles.
  ///  FLUSH           No breaks in Hull Profile.
  ///  RAISED 1        Hull Profile shows distinct raised area at bow. Remainder of deck is flush.
  ///  RAISED 2        Hull Profile shows distinct raised area amidships. Bow and stern are flush.
  ///  RAISED 3        Hull Profile shows distinct raised area at stern. Remainder of deck is flush.
  ///  RAISED 1-2-3    Distinct raised areas at bow, midships, and stern with breaks between each raise.
  ///  RAISED 1-2      Raised area at bow and midships with break between.
  ///  RAISED 1-3      Raised area at bow and stern with break between.
  ///  RAISED 12       Continuous raised area encompassing both bow and midships.
  ///  RAISED 23       Continuous raised area encompassing midships and stern.
  ///  RAISED 12-3     Raised areas at bow, midships and stern. Bow and midship raises are continuous. Break between midship and stern raises.
  ///  RAISED 1-23     Raised areas at bow, midships, and stern. Midship and stern raises are continuous with break between bow and midship raises.
  ///  RAISED 1-L2-3   Raised areas at bow, midships, and stern with break between each raise. Midships raise is longer than that associated with raised 1-2-3.
  ///  Example: /// Example: Raised 1-23
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get hullProf => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 246);
  ///  The type of propulsion employed by the track object (Diesel, Nuclear).
  ///  Example: /// Example: Diesel
  ///  Constraints: Minimum length = 0, Maximum length = 6
  String? get propType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 248);
  ///  The number of blades per shaft of the track object.  Applicable for maritime vessels.
  ///  Example: /// Example: 4
  ///  Constraints: No constraints specified.
  int get numBlades => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 250, 0);
  ///  The number of shafts on the track object.  Applicable for maritime vessels.
  ///  Example: /// Example: 3
  ///  Constraints: No constraints specified.
  int get numShafts => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 252, 0);
  ///  The stern type code (Counter, Cruiser) associated with the track object.
  ///  Example: /// Example: Cruiser
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get sternType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 254);
  ///  The weight, in tons, of the vessel associated with this track.
  ///  Example: /// Example: 3423.76
  ///  Constraints: No constraints specified.
  double get vslWt => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 256, 0.0);
  ///  The Arrival Time of the vessel at the destination, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get arrTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 258);
  ///  The flag of the arrival port.
  ///  Example: /// Example: USA
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get arrFlag => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 260);
  ///  The reported arrival cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
  ///  Example: /// Example: Freight
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get arrCargo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 262);
  ///  The Arrival Port of the vessel according to the AIS transmission.
  ///  Example: /// Example: Lanshan
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get arrPort => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 264);
  ///  The Departure Port of the vessel according to the AIS transmission.
  ///  Example: /// Example: Lanshan
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get depPort => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 266);
  ///  The flag of the departure port.
  ///  Example: /// Example: USA
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get depFlag => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 268);
  ///  The reported departure cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
  ///  Example: /// Example: Freight
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get depCargo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 270);
  ///  The flag of the destination port.
  ///  Example: /// Example: USA
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get desFlag => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 272);
  ///  The reported destination cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
  ///  Example: /// Example: Freight
  ///  Constraints: Minimum length = 0, Maximum length = 48
  String? get desCargo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 274);
  ///  The destination of the vessel according to the AIS transmission.
  ///  Example: /// Example: USCLE
  ///  Constraints: Minimum length = 0, Maximum length = 20
  String? get destination => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 276);
  ///  The Estimated Time of Arrival of the vessel at the destination port, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get eta => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 278);
  ///  The Estimated Time of Departure of the vessel from the departure port (depPort), according to Marine Traffic calculations, in ISO 8601 UTC format with microsecond precision.
  ///  Example: /// Example: 2021-02-25T12:00:00.123456Z
  ///  Constraints: No constraints specified.
  String? get etd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 280);
  ///  A text amplifier displaying IFF/SIF/AIS Identification modes and codes.
  ///  Example: /// Example: ID Mode
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get iff => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 282);
  ///  Flag indicating that the track object has an emergency.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get emgInd => const fb.BoolReader().vTableGet(_bc, _bcOffset, 284, false);
  ///  The drop-point indicator setting.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get dropPtInd => const fb.BoolReader().vTableGet(_bc, _bcOffset, 286, false);
  ///  Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get reinforced => const fb.BoolReader().vTableGet(_bc, _bcOffset, 288, false);
  ///  Flag indicating for the track represents a reduced force object or group.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get reduced => const fb.BoolReader().vTableGet(_bc, _bcOffset, 290, false);
  ///  Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get hq => const fb.BoolReader().vTableGet(_bc, _bcOffset, 292, false);
  ///  Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment, and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get dummy => const fb.BoolReader().vTableGet(_bc, _bcOffset, 294, false);
  ///  Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get taskForce => const fb.BoolReader().vTableGet(_bc, _bcOffset, 296, false);
  ///  Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment, and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get feint => const fb.BoolReader().vTableGet(_bc, _bcOffset, 298, false);
  ///  Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get installation => const fb.BoolReader().vTableGet(_bc, _bcOffset, 300, false);
  ///  A text amplifier for units, equipment and installations; content is implementation specific.
  ///  Example: /// Example: Staff Comments
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get staffCmts => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 302);
  ///  A text amplifier for units, equipment and installations; content is implementation specific.
  ///  Example: /// Example: Additional information
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get addInfo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 304);
  ///  A text amplifier code for units, equipment, and installations that consists of a one-letter reliability rating and a one-number credibility rating based on the following definitions of each:
  ///   Reliability Ratings:
  ///    A-completely reliable
  ///    B-usually reliable
  ///    C-fairly reliable
  ///    D-not usually reliable
  ///    E-unreliable
  ///    F-reliability cannot be judged
  ///   Credibility Ratings:
  ///    1-confirmed by other sources
  ///    2-probably true
  ///    3-possibly true
  ///    4-doubtfully true
  ///    5-improbable
  ///    6-truth cannot be judged.
  ///  Example: /// Example: A1
  ///  Constraints: Minimum length = 0, Maximum length = 2
  String? get evalRating => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 306);
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2021-02-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 308);
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 310);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 312);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 314);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  TrackDetailsAbridgedDataModeEnum get dataMode => TrackDetailsAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 316, 0));
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 318);

  @override
  String toString() {
    return 'TrackDetailsAbridged{id: ${id}, classificationMarking: ${classificationMarking}, env: ${env}, msgType: ${msgType}, hullNum: ${hullNum}, pif: ${pif}, sconum: ${sconum}, ntds: ${ntds}, disId: ${disId}, midbCat: ${midbCat}, beNumber: ${beNumber}, oSuffix: ${oSuffix}, pin: ${pin}, lostTrkInd: ${lostTrkInd}, muidSrcTrk: ${muidSrcTrk}, muidSrc: ${muidSrc}, mslStatus: ${mslStatus}, trkConf: ${trkConf}, trkQual: ${trkQual}, alert: ${alert}, origXref: ${origXref}, elnot1: ${elnot1}, elnot2: ${elnot2}, objIdent: ${objIdent}, objType: ${objType}, objPlat: ${objPlat}, objAct: ${objAct}, objNat: ${objNat}, name: ${name}, shortName: ${shortName}, trkId: ${trkId}, trkNum: ${trkNum}, trkScope: ${trkScope}, sourceUid: ${sourceUid}, callSign: ${callSign}, identAmp: ${identAmp}, spaceAmp: ${spaceAmp}, spaceAmpConf: ${spaceAmpConf}, spaceSpecType: ${spaceSpecType}, acftSubType: ${acftSubType}, ts: ${ts}, launchTime: ${launchTime}, impactTime: ${impactTime}, ftnMsgTs: ${ftnMsgTs}, ftn: ${ftn}, ftnCmd: ${ftnCmd}, rtnMsgTs: ${rtnMsgTs}, rtn: ${rtn}, rtnTrkState: ${rtnTrkState}, rtnCmd: ${rtnCmd}, sen: ${sen}, rptChxref: ${rptChxref}, rptArchived: ${rptArchived}, selfReport: ${selfReport}, mil2525Bstr: ${mil2525Bstr}, trnspdrId: ${trnspdrId}, trnspdrType: ${trnspdrType}, emitterName: ${emitterName}, infoSource: ${infoSource}, boosting: ${boosting}, freq: ${freq}, maxFreq: ${maxFreq}, harmonics: ${harmonics}, pri: ${pri}, prf: ${prf}, pw: ${pw}, scanType: ${scanType}, scanRate: ${scanRate}, scn: ${scn}, cI: ${cI}, angElev: ${angElev}, lat: ${lat}, lon: ${lon}, launchLat: ${launchLat}, launchLon: ${launchLon}, impactLat: ${impactLat}, impactLon: ${impactLon}, polarSingLocLat: ${polarSingLocLat}, polarSingLocLon: ${polarSingLocLon}, azCorrCenterLine: ${azCorrCenterLine}, azCorrArcWidth: ${azCorrArcWidth}, errSemiIntAxis: ${errSemiIntAxis}, errAreaOrient: ${errAreaOrient}, errSemiMajElev: ${errSemiMajElev}, errGeoAreaSwitch: ${errGeoAreaSwitch}, burnoutAlt: ${burnoutAlt}, tesEventId: ${tesEventId}, spd: ${spd}, avgSpd: ${avgSpd}, tol: ${tol}, alt: ${alt}, hdng: ${hdng}, course: ${course}, propRpm: ${propRpm}, tpk: ${tpk}, coopLocInd: ${coopLocInd}, maneuverInd: ${maneuverInd}, launchAouType: ${launchAouType}, launchAouData: ${launchAouData}, impactAouType: ${impactAouType}, impactAouData: ${impactAouData}, aouRptType: ${aouRptType}, aouRptData: ${aouRptData}, ecefPos: ${ecefPos}, ecefVel: ${ecefVel}, containment: ${containment}, cpa: ${cpa}, tcpa: ${tcpa}, navStatus: ${navStatus}, posDeviceType: ${posDeviceType}, aton: ${aton}, offPosInd: ${offPosInd}, antennaRefDimensions: ${antennaRefDimensions}, shipClass: ${shipClass}, imon: ${imon}, mmsi: ${mmsi}, draught: ${draught}, length: ${length}, width: ${width}, cargoType: ${cargoType}, appGrp: ${appGrp}, hullProf: ${hullProf}, propType: ${propType}, numBlades: ${numBlades}, numShafts: ${numShafts}, sternType: ${sternType}, vslWt: ${vslWt}, arrTime: ${arrTime}, arrFlag: ${arrFlag}, arrCargo: ${arrCargo}, arrPort: ${arrPort}, depPort: ${depPort}, depFlag: ${depFlag}, depCargo: ${depCargo}, desFlag: ${desFlag}, desCargo: ${desCargo}, destination: ${destination}, eta: ${eta}, etd: ${etd}, iff: ${iff}, emgInd: ${emgInd}, dropPtInd: ${dropPtInd}, reinforced: ${reinforced}, reduced: ${reduced}, hq: ${hq}, dummy: ${dummy}, taskForce: ${taskForce}, feint: ${feint}, installation: ${installation}, staffCmts: ${staffCmts}, addInfo: ${addInfo}, evalRating: ${evalRating}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}, origNetwork: ${origNetwork}}';
  }
}

class _TrackDetailsAbridgedReader extends fb.TableReader<TrackDetailsAbridged> {
  const _TrackDetailsAbridgedReader();

  @override
  TrackDetailsAbridged createObject(fb.BufferContext bc, int offset) => 
    TrackDetailsAbridged._(bc, offset);
}

class TrackDetailsAbridgedBuilder {
  TrackDetailsAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(158);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addEnv(TrackDetailsAbridgedEnvEnum? env) {
    fbBuilder.addInt8(2, env?.value);
    return fbBuilder.offset;
  }
  int addMsgTypeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addHullNumOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addPifOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSconumOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addNtdsOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addDisIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addMidbCatOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addBeNumberOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addOSuffixOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addPinOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addLostTrkInd(bool? lostTrkInd) {
    fbBuilder.addBool(13, lostTrkInd);
    return fbBuilder.offset;
  }
  int addMuidSrcTrkOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addMuidSrcOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addMslStatusOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addTrkConf(double? trkConf) {
    fbBuilder.addFloat64(17, trkConf);
    return fbBuilder.offset;
  }
  int addTrkQual(int? trkQual) {
    fbBuilder.addInt32(18, trkQual);
    return fbBuilder.offset;
  }
  int addAlertOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addOrigXrefOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addElnot1Offset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addElnot2Offset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addObjIdent(TrackDetailsAbridgedObjIdentEnum? objIdent) {
    fbBuilder.addInt8(23, objIdent?.value);
    return fbBuilder.offset;
  }
  int addObjTypeOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addObjPlatOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addObjActOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addObjNatOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addShortNameOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addTrkIdOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addTrkNumOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addTrkScopeOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addSourceUidOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addCallSignOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addIdentAmpOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addSpaceAmpOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addSpaceAmpConf(int? spaceAmpConf) {
    fbBuilder.addInt32(37, spaceAmpConf);
    return fbBuilder.offset;
  }
  int addSpaceSpecTypeOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addAcftSubTypeOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addTsOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addLaunchTimeOffset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addImpactTimeOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addFtnMsgTsOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addFtnOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addFtnCmdOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addRtnMsgTsOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addRtnOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addRtnTrkStateOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addRtnCmdOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addSenOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addRptChxrefOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addRptArchived(bool? rptArchived) {
    fbBuilder.addBool(52, rptArchived);
    return fbBuilder.offset;
  }
  int addSelfReport(bool? selfReport) {
    fbBuilder.addBool(53, selfReport);
    return fbBuilder.offset;
  }
  int addMil2525BstrOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addTrnspdrIdOffset(int? offset) {
    fbBuilder.addOffset(55, offset);
    return fbBuilder.offset;
  }
  int addTrnspdrTypeOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }
  int addEmitterNameOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }
  int addInfoSourceOffset(int? offset) {
    fbBuilder.addOffset(58, offset);
    return fbBuilder.offset;
  }
  int addBoosting(bool? boosting) {
    fbBuilder.addBool(59, boosting);
    return fbBuilder.offset;
  }
  int addFreq(double? freq) {
    fbBuilder.addFloat64(60, freq);
    return fbBuilder.offset;
  }
  int addMaxFreq(double? maxFreq) {
    fbBuilder.addFloat64(61, maxFreq);
    return fbBuilder.offset;
  }
  int addHarmonicsOffset(int? offset) {
    fbBuilder.addOffset(62, offset);
    return fbBuilder.offset;
  }
  int addPri(double? pri) {
    fbBuilder.addFloat64(63, pri);
    return fbBuilder.offset;
  }
  int addPrf(double? prf) {
    fbBuilder.addFloat64(64, prf);
    return fbBuilder.offset;
  }
  int addPw(double? pw) {
    fbBuilder.addFloat64(65, pw);
    return fbBuilder.offset;
  }
  int addScanTypeOffset(int? offset) {
    fbBuilder.addOffset(66, offset);
    return fbBuilder.offset;
  }
  int addScanRate(double? scanRate) {
    fbBuilder.addFloat64(67, scanRate);
    return fbBuilder.offset;
  }
  int addScn(int? scn) {
    fbBuilder.addInt32(68, scn);
    return fbBuilder.offset;
  }
  int addCIOffset(int? offset) {
    fbBuilder.addOffset(69, offset);
    return fbBuilder.offset;
  }
  int addAngElev(double? angElev) {
    fbBuilder.addFloat64(70, angElev);
    return fbBuilder.offset;
  }
  int addLat(double? lat) {
    fbBuilder.addFloat64(71, lat);
    return fbBuilder.offset;
  }
  int addLon(double? lon) {
    fbBuilder.addFloat64(72, lon);
    return fbBuilder.offset;
  }
  int addLaunchLat(double? launchLat) {
    fbBuilder.addFloat64(73, launchLat);
    return fbBuilder.offset;
  }
  int addLaunchLon(double? launchLon) {
    fbBuilder.addFloat64(74, launchLon);
    return fbBuilder.offset;
  }
  int addImpactLat(double? impactLat) {
    fbBuilder.addFloat64(75, impactLat);
    return fbBuilder.offset;
  }
  int addImpactLon(double? impactLon) {
    fbBuilder.addFloat64(76, impactLon);
    return fbBuilder.offset;
  }
  int addPolarSingLocLat(double? polarSingLocLat) {
    fbBuilder.addFloat64(77, polarSingLocLat);
    return fbBuilder.offset;
  }
  int addPolarSingLocLon(double? polarSingLocLon) {
    fbBuilder.addFloat64(78, polarSingLocLon);
    return fbBuilder.offset;
  }
  int addAzCorrCenterLine(double? azCorrCenterLine) {
    fbBuilder.addFloat64(79, azCorrCenterLine);
    return fbBuilder.offset;
  }
  int addAzCorrArcWidth(double? azCorrArcWidth) {
    fbBuilder.addFloat64(80, azCorrArcWidth);
    return fbBuilder.offset;
  }
  int addErrSemiIntAxis(double? errSemiIntAxis) {
    fbBuilder.addFloat64(81, errSemiIntAxis);
    return fbBuilder.offset;
  }
  int addErrAreaOrient(double? errAreaOrient) {
    fbBuilder.addFloat64(82, errAreaOrient);
    return fbBuilder.offset;
  }
  int addErrSemiMajElev(double? errSemiMajElev) {
    fbBuilder.addFloat64(83, errSemiMajElev);
    return fbBuilder.offset;
  }
  int addErrGeoAreaSwitchOffset(int? offset) {
    fbBuilder.addOffset(84, offset);
    return fbBuilder.offset;
  }
  int addBurnoutAlt(double? burnoutAlt) {
    fbBuilder.addFloat64(85, burnoutAlt);
    return fbBuilder.offset;
  }
  int addTesEventIdOffset(int? offset) {
    fbBuilder.addOffset(86, offset);
    return fbBuilder.offset;
  }
  int addSpd(double? spd) {
    fbBuilder.addFloat64(87, spd);
    return fbBuilder.offset;
  }
  int addAvgSpd(double? avgSpd) {
    fbBuilder.addFloat64(88, avgSpd);
    return fbBuilder.offset;
  }
  int addTol(double? tol) {
    fbBuilder.addFloat64(89, tol);
    return fbBuilder.offset;
  }
  int addAlt(double? alt) {
    fbBuilder.addFloat64(90, alt);
    return fbBuilder.offset;
  }
  int addHdng(double? hdng) {
    fbBuilder.addFloat64(91, hdng);
    return fbBuilder.offset;
  }
  int addCourse(double? course) {
    fbBuilder.addFloat64(92, course);
    return fbBuilder.offset;
  }
  int addPropRpm(double? propRpm) {
    fbBuilder.addFloat64(93, propRpm);
    return fbBuilder.offset;
  }
  int addTpk(double? tpk) {
    fbBuilder.addFloat64(94, tpk);
    return fbBuilder.offset;
  }
  int addCoopLocIndOffset(int? offset) {
    fbBuilder.addOffset(95, offset);
    return fbBuilder.offset;
  }
  int addManeuverIndOffset(int? offset) {
    fbBuilder.addOffset(96, offset);
    return fbBuilder.offset;
  }
  int addLaunchAouTypeOffset(int? offset) {
    fbBuilder.addOffset(97, offset);
    return fbBuilder.offset;
  }
  int addLaunchAouDataOffset(int? offset) {
    fbBuilder.addOffset(98, offset);
    return fbBuilder.offset;
  }
  int addImpactAouTypeOffset(int? offset) {
    fbBuilder.addOffset(99, offset);
    return fbBuilder.offset;
  }
  int addImpactAouDataOffset(int? offset) {
    fbBuilder.addOffset(100, offset);
    return fbBuilder.offset;
  }
  int addAouRptTypeOffset(int? offset) {
    fbBuilder.addOffset(101, offset);
    return fbBuilder.offset;
  }
  int addAouRptDataOffset(int? offset) {
    fbBuilder.addOffset(102, offset);
    return fbBuilder.offset;
  }
  int addEcefPosOffset(int? offset) {
    fbBuilder.addOffset(103, offset);
    return fbBuilder.offset;
  }
  int addEcefVelOffset(int? offset) {
    fbBuilder.addOffset(104, offset);
    return fbBuilder.offset;
  }
  int addContainment(double? containment) {
    fbBuilder.addFloat64(105, containment);
    return fbBuilder.offset;
  }
  int addCpa(double? cpa) {
    fbBuilder.addFloat64(106, cpa);
    return fbBuilder.offset;
  }
  int addTcpaOffset(int? offset) {
    fbBuilder.addOffset(107, offset);
    return fbBuilder.offset;
  }
  int addNavStatusOffset(int? offset) {
    fbBuilder.addOffset(108, offset);
    return fbBuilder.offset;
  }
  int addPosDeviceTypeOffset(int? offset) {
    fbBuilder.addOffset(109, offset);
    return fbBuilder.offset;
  }
  int addAtonOffset(int? offset) {
    fbBuilder.addOffset(110, offset);
    return fbBuilder.offset;
  }
  int addOffPosIndOffset(int? offset) {
    fbBuilder.addOffset(111, offset);
    return fbBuilder.offset;
  }
  int addAntennaRefDimensionsOffset(int? offset) {
    fbBuilder.addOffset(112, offset);
    return fbBuilder.offset;
  }
  int addShipClassOffset(int? offset) {
    fbBuilder.addOffset(113, offset);
    return fbBuilder.offset;
  }
  int addImon(int? imon) {
    fbBuilder.addInt32(114, imon);
    return fbBuilder.offset;
  }
  int addMmsi(int? mmsi) {
    fbBuilder.addInt32(115, mmsi);
    return fbBuilder.offset;
  }
  int addDraught(double? draught) {
    fbBuilder.addFloat64(116, draught);
    return fbBuilder.offset;
  }
  int addLength(double? length) {
    fbBuilder.addFloat64(117, length);
    return fbBuilder.offset;
  }
  int addWidth(double? width) {
    fbBuilder.addFloat64(118, width);
    return fbBuilder.offset;
  }
  int addCargoTypeOffset(int? offset) {
    fbBuilder.addOffset(119, offset);
    return fbBuilder.offset;
  }
  int addAppGrpOffset(int? offset) {
    fbBuilder.addOffset(120, offset);
    return fbBuilder.offset;
  }
  int addHullProfOffset(int? offset) {
    fbBuilder.addOffset(121, offset);
    return fbBuilder.offset;
  }
  int addPropTypeOffset(int? offset) {
    fbBuilder.addOffset(122, offset);
    return fbBuilder.offset;
  }
  int addNumBlades(int? numBlades) {
    fbBuilder.addInt32(123, numBlades);
    return fbBuilder.offset;
  }
  int addNumShafts(int? numShafts) {
    fbBuilder.addInt32(124, numShafts);
    return fbBuilder.offset;
  }
  int addSternTypeOffset(int? offset) {
    fbBuilder.addOffset(125, offset);
    return fbBuilder.offset;
  }
  int addVslWt(double? vslWt) {
    fbBuilder.addFloat64(126, vslWt);
    return fbBuilder.offset;
  }
  int addArrTimeOffset(int? offset) {
    fbBuilder.addOffset(127, offset);
    return fbBuilder.offset;
  }
  int addArrFlagOffset(int? offset) {
    fbBuilder.addOffset(128, offset);
    return fbBuilder.offset;
  }
  int addArrCargoOffset(int? offset) {
    fbBuilder.addOffset(129, offset);
    return fbBuilder.offset;
  }
  int addArrPortOffset(int? offset) {
    fbBuilder.addOffset(130, offset);
    return fbBuilder.offset;
  }
  int addDepPortOffset(int? offset) {
    fbBuilder.addOffset(131, offset);
    return fbBuilder.offset;
  }
  int addDepFlagOffset(int? offset) {
    fbBuilder.addOffset(132, offset);
    return fbBuilder.offset;
  }
  int addDepCargoOffset(int? offset) {
    fbBuilder.addOffset(133, offset);
    return fbBuilder.offset;
  }
  int addDesFlagOffset(int? offset) {
    fbBuilder.addOffset(134, offset);
    return fbBuilder.offset;
  }
  int addDesCargoOffset(int? offset) {
    fbBuilder.addOffset(135, offset);
    return fbBuilder.offset;
  }
  int addDestinationOffset(int? offset) {
    fbBuilder.addOffset(136, offset);
    return fbBuilder.offset;
  }
  int addEtaOffset(int? offset) {
    fbBuilder.addOffset(137, offset);
    return fbBuilder.offset;
  }
  int addEtdOffset(int? offset) {
    fbBuilder.addOffset(138, offset);
    return fbBuilder.offset;
  }
  int addIffOffset(int? offset) {
    fbBuilder.addOffset(139, offset);
    return fbBuilder.offset;
  }
  int addEmgInd(bool? emgInd) {
    fbBuilder.addBool(140, emgInd);
    return fbBuilder.offset;
  }
  int addDropPtInd(bool? dropPtInd) {
    fbBuilder.addBool(141, dropPtInd);
    return fbBuilder.offset;
  }
  int addReinforced(bool? reinforced) {
    fbBuilder.addBool(142, reinforced);
    return fbBuilder.offset;
  }
  int addReduced(bool? reduced) {
    fbBuilder.addBool(143, reduced);
    return fbBuilder.offset;
  }
  int addHq(bool? hq) {
    fbBuilder.addBool(144, hq);
    return fbBuilder.offset;
  }
  int addDummy(bool? dummy) {
    fbBuilder.addBool(145, dummy);
    return fbBuilder.offset;
  }
  int addTaskForce(bool? taskForce) {
    fbBuilder.addBool(146, taskForce);
    return fbBuilder.offset;
  }
  int addFeint(bool? feint) {
    fbBuilder.addBool(147, feint);
    return fbBuilder.offset;
  }
  int addInstallation(bool? installation) {
    fbBuilder.addBool(148, installation);
    return fbBuilder.offset;
  }
  int addStaffCmtsOffset(int? offset) {
    fbBuilder.addOffset(149, offset);
    return fbBuilder.offset;
  }
  int addAddInfoOffset(int? offset) {
    fbBuilder.addOffset(150, offset);
    return fbBuilder.offset;
  }
  int addEvalRatingOffset(int? offset) {
    fbBuilder.addOffset(151, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(152, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(153, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(154, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(155, offset);
    return fbBuilder.offset;
  }
  int addDataMode(TrackDetailsAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(156, dataMode?.value);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(157, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TrackDetailsAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final TrackDetailsAbridgedEnvEnum? _env;
  final String? _msgType;
  final String? _hullNum;
  final String? _pif;
  final String? _sconum;
  final String? _ntds;
  final String? _disId;
  final String? _midbCat;
  final String? _beNumber;
  final String? _oSuffix;
  final String? _pin;
  final bool? _lostTrkInd;
  final String? _muidSrcTrk;
  final String? _muidSrc;
  final String? _mslStatus;
  final double? _trkConf;
  final int? _trkQual;
  final String? _alert;
  final String? _origXref;
  final String? _elnot1;
  final String? _elnot2;
  final TrackDetailsAbridgedObjIdentEnum? _objIdent;
  final String? _objType;
  final String? _objPlat;
  final String? _objAct;
  final String? _objNat;
  final String? _name;
  final String? _shortName;
  final String? _trkId;
  final String? _trkNum;
  final String? _trkScope;
  final String? _sourceUid;
  final String? _callSign;
  final String? _identAmp;
  final String? _spaceAmp;
  final int? _spaceAmpConf;
  final String? _spaceSpecType;
  final String? _acftSubType;
  final String? _ts;
  final String? _launchTime;
  final String? _impactTime;
  final String? _ftnMsgTs;
  final String? _ftn;
  final String? _ftnCmd;
  final List<String>? _rtnMsgTs;
  final List<String>? _rtn;
  final String? _rtnTrkState;
  final String? _rtnCmd;
  final String? _sen;
  final String? _rptChxref;
  final bool? _rptArchived;
  final bool? _selfReport;
  final String? _mil2525Bstr;
  final String? _trnspdrId;
  final String? _trnspdrType;
  final String? _emitterName;
  final String? _infoSource;
  final bool? _boosting;
  final double? _freq;
  final double? _maxFreq;
  final String? _harmonics;
  final double? _pri;
  final double? _prf;
  final double? _pw;
  final String? _scanType;
  final double? _scanRate;
  final int? _scn;
  final String? _cI;
  final double? _angElev;
  final double? _lat;
  final double? _lon;
  final double? _launchLat;
  final double? _launchLon;
  final double? _impactLat;
  final double? _impactLon;
  final double? _polarSingLocLat;
  final double? _polarSingLocLon;
  final double? _azCorrCenterLine;
  final double? _azCorrArcWidth;
  final double? _errSemiIntAxis;
  final double? _errAreaOrient;
  final double? _errSemiMajElev;
  final String? _errGeoAreaSwitch;
  final double? _burnoutAlt;
  final String? _tesEventId;
  final double? _spd;
  final double? _avgSpd;
  final double? _tol;
  final double? _alt;
  final double? _hdng;
  final double? _course;
  final double? _propRpm;
  final double? _tpk;
  final String? _coopLocInd;
  final String? _maneuverInd;
  final String? _launchAouType;
  final List<String>? _launchAouData;
  final String? _impactAouType;
  final List<String>? _impactAouData;
  final String? _aouRptType;
  final List<String>? _aouRptData;
  final List<String>? _ecefPos;
  final List<String>? _ecefVel;
  final double? _containment;
  final double? _cpa;
  final String? _tcpa;
  final String? _navStatus;
  final String? _posDeviceType;
  final String? _aton;
  final String? _offPosInd;
  final List<String>? _antennaRefDimensions;
  final String? _shipClass;
  final int? _imon;
  final int? _mmsi;
  final double? _draught;
  final double? _length;
  final double? _width;
  final String? _cargoType;
  final String? _appGrp;
  final String? _hullProf;
  final String? _propType;
  final int? _numBlades;
  final int? _numShafts;
  final String? _sternType;
  final double? _vslWt;
  final String? _arrTime;
  final String? _arrFlag;
  final String? _arrCargo;
  final String? _arrPort;
  final String? _depPort;
  final String? _depFlag;
  final String? _depCargo;
  final String? _desFlag;
  final String? _desCargo;
  final String? _destination;
  final String? _eta;
  final String? _etd;
  final String? _iff;
  final bool? _emgInd;
  final bool? _dropPtInd;
  final bool? _reinforced;
  final bool? _reduced;
  final bool? _hq;
  final bool? _dummy;
  final bool? _taskForce;
  final bool? _feint;
  final bool? _installation;
  final String? _staffCmts;
  final String? _addInfo;
  final String? _evalRating;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final TrackDetailsAbridgedDataModeEnum? _dataMode;
  final String? _origNetwork;

  TrackDetailsAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    TrackDetailsAbridgedEnvEnum? env,
    String? msgType,
    String? hullNum,
    String? pif,
    String? sconum,
    String? ntds,
    String? disId,
    String? midbCat,
    String? beNumber,
    String? oSuffix,
    String? pin,
    bool? lostTrkInd,
    String? muidSrcTrk,
    String? muidSrc,
    String? mslStatus,
    double? trkConf,
    int? trkQual,
    String? alert,
    String? origXref,
    String? elnot1,
    String? elnot2,
    TrackDetailsAbridgedObjIdentEnum? objIdent,
    String? objType,
    String? objPlat,
    String? objAct,
    String? objNat,
    String? name,
    String? shortName,
    String? trkId,
    String? trkNum,
    String? trkScope,
    String? sourceUid,
    String? callSign,
    String? identAmp,
    String? spaceAmp,
    int? spaceAmpConf,
    String? spaceSpecType,
    String? acftSubType,
    String? ts,
    String? launchTime,
    String? impactTime,
    String? ftnMsgTs,
    String? ftn,
    String? ftnCmd,
    List<String>? rtnMsgTs,
    List<String>? rtn,
    String? rtnTrkState,
    String? rtnCmd,
    String? sen,
    String? rptChxref,
    bool? rptArchived,
    bool? selfReport,
    String? mil2525Bstr,
    String? trnspdrId,
    String? trnspdrType,
    String? emitterName,
    String? infoSource,
    bool? boosting,
    double? freq,
    double? maxFreq,
    String? harmonics,
    double? pri,
    double? prf,
    double? pw,
    String? scanType,
    double? scanRate,
    int? scn,
    String? cI,
    double? angElev,
    double? lat,
    double? lon,
    double? launchLat,
    double? launchLon,
    double? impactLat,
    double? impactLon,
    double? polarSingLocLat,
    double? polarSingLocLon,
    double? azCorrCenterLine,
    double? azCorrArcWidth,
    double? errSemiIntAxis,
    double? errAreaOrient,
    double? errSemiMajElev,
    String? errGeoAreaSwitch,
    double? burnoutAlt,
    String? tesEventId,
    double? spd,
    double? avgSpd,
    double? tol,
    double? alt,
    double? hdng,
    double? course,
    double? propRpm,
    double? tpk,
    String? coopLocInd,
    String? maneuverInd,
    String? launchAouType,
    List<String>? launchAouData,
    String? impactAouType,
    List<String>? impactAouData,
    String? aouRptType,
    List<String>? aouRptData,
    List<String>? ecefPos,
    List<String>? ecefVel,
    double? containment,
    double? cpa,
    String? tcpa,
    String? navStatus,
    String? posDeviceType,
    String? aton,
    String? offPosInd,
    List<String>? antennaRefDimensions,
    String? shipClass,
    int? imon,
    int? mmsi,
    double? draught,
    double? length,
    double? width,
    String? cargoType,
    String? appGrp,
    String? hullProf,
    String? propType,
    int? numBlades,
    int? numShafts,
    String? sternType,
    double? vslWt,
    String? arrTime,
    String? arrFlag,
    String? arrCargo,
    String? arrPort,
    String? depPort,
    String? depFlag,
    String? depCargo,
    String? desFlag,
    String? desCargo,
    String? destination,
    String? eta,
    String? etd,
    String? iff,
    bool? emgInd,
    bool? dropPtInd,
    bool? reinforced,
    bool? reduced,
    bool? hq,
    bool? dummy,
    bool? taskForce,
    bool? feint,
    bool? installation,
    String? staffCmts,
    String? addInfo,
    String? evalRating,
    String? createdAt,
    String? createdBy,
    String? source,
    String? origin,
    TrackDetailsAbridgedDataModeEnum? dataMode,
    String? origNetwork,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _env = env,
        _msgType = msgType,
        _hullNum = hullNum,
        _pif = pif,
        _sconum = sconum,
        _ntds = ntds,
        _disId = disId,
        _midbCat = midbCat,
        _beNumber = beNumber,
        _oSuffix = oSuffix,
        _pin = pin,
        _lostTrkInd = lostTrkInd,
        _muidSrcTrk = muidSrcTrk,
        _muidSrc = muidSrc,
        _mslStatus = mslStatus,
        _trkConf = trkConf,
        _trkQual = trkQual,
        _alert = alert,
        _origXref = origXref,
        _elnot1 = elnot1,
        _elnot2 = elnot2,
        _objIdent = objIdent,
        _objType = objType,
        _objPlat = objPlat,
        _objAct = objAct,
        _objNat = objNat,
        _name = name,
        _shortName = shortName,
        _trkId = trkId,
        _trkNum = trkNum,
        _trkScope = trkScope,
        _sourceUid = sourceUid,
        _callSign = callSign,
        _identAmp = identAmp,
        _spaceAmp = spaceAmp,
        _spaceAmpConf = spaceAmpConf,
        _spaceSpecType = spaceSpecType,
        _acftSubType = acftSubType,
        _ts = ts,
        _launchTime = launchTime,
        _impactTime = impactTime,
        _ftnMsgTs = ftnMsgTs,
        _ftn = ftn,
        _ftnCmd = ftnCmd,
        _rtnMsgTs = rtnMsgTs,
        _rtn = rtn,
        _rtnTrkState = rtnTrkState,
        _rtnCmd = rtnCmd,
        _sen = sen,
        _rptChxref = rptChxref,
        _rptArchived = rptArchived,
        _selfReport = selfReport,
        _mil2525Bstr = mil2525Bstr,
        _trnspdrId = trnspdrId,
        _trnspdrType = trnspdrType,
        _emitterName = emitterName,
        _infoSource = infoSource,
        _boosting = boosting,
        _freq = freq,
        _maxFreq = maxFreq,
        _harmonics = harmonics,
        _pri = pri,
        _prf = prf,
        _pw = pw,
        _scanType = scanType,
        _scanRate = scanRate,
        _scn = scn,
        _cI = cI,
        _angElev = angElev,
        _lat = lat,
        _lon = lon,
        _launchLat = launchLat,
        _launchLon = launchLon,
        _impactLat = impactLat,
        _impactLon = impactLon,
        _polarSingLocLat = polarSingLocLat,
        _polarSingLocLon = polarSingLocLon,
        _azCorrCenterLine = azCorrCenterLine,
        _azCorrArcWidth = azCorrArcWidth,
        _errSemiIntAxis = errSemiIntAxis,
        _errAreaOrient = errAreaOrient,
        _errSemiMajElev = errSemiMajElev,
        _errGeoAreaSwitch = errGeoAreaSwitch,
        _burnoutAlt = burnoutAlt,
        _tesEventId = tesEventId,
        _spd = spd,
        _avgSpd = avgSpd,
        _tol = tol,
        _alt = alt,
        _hdng = hdng,
        _course = course,
        _propRpm = propRpm,
        _tpk = tpk,
        _coopLocInd = coopLocInd,
        _maneuverInd = maneuverInd,
        _launchAouType = launchAouType,
        _launchAouData = launchAouData,
        _impactAouType = impactAouType,
        _impactAouData = impactAouData,
        _aouRptType = aouRptType,
        _aouRptData = aouRptData,
        _ecefPos = ecefPos,
        _ecefVel = ecefVel,
        _containment = containment,
        _cpa = cpa,
        _tcpa = tcpa,
        _navStatus = navStatus,
        _posDeviceType = posDeviceType,
        _aton = aton,
        _offPosInd = offPosInd,
        _antennaRefDimensions = antennaRefDimensions,
        _shipClass = shipClass,
        _imon = imon,
        _mmsi = mmsi,
        _draught = draught,
        _length = length,
        _width = width,
        _cargoType = cargoType,
        _appGrp = appGrp,
        _hullProf = hullProf,
        _propType = propType,
        _numBlades = numBlades,
        _numShafts = numShafts,
        _sternType = sternType,
        _vslWt = vslWt,
        _arrTime = arrTime,
        _arrFlag = arrFlag,
        _arrCargo = arrCargo,
        _arrPort = arrPort,
        _depPort = depPort,
        _depFlag = depFlag,
        _depCargo = depCargo,
        _desFlag = desFlag,
        _desCargo = desCargo,
        _destination = destination,
        _eta = eta,
        _etd = etd,
        _iff = iff,
        _emgInd = emgInd,
        _dropPtInd = dropPtInd,
        _reinforced = reinforced,
        _reduced = reduced,
        _hq = hq,
        _dummy = dummy,
        _taskForce = taskForce,
        _feint = feint,
        _installation = installation,
        _staffCmts = staffCmts,
        _addInfo = addInfo,
        _evalRating = evalRating,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode,
        _origNetwork = origNetwork;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? msgTypeOffset = _msgType == null ? null
        : fbBuilder.writeString(_msgType!);
    final int? hullNumOffset = _hullNum == null ? null
        : fbBuilder.writeString(_hullNum!);
    final int? pifOffset = _pif == null ? null
        : fbBuilder.writeString(_pif!);
    final int? sconumOffset = _sconum == null ? null
        : fbBuilder.writeString(_sconum!);
    final int? ntdsOffset = _ntds == null ? null
        : fbBuilder.writeString(_ntds!);
    final int? disIdOffset = _disId == null ? null
        : fbBuilder.writeString(_disId!);
    final int? midbCatOffset = _midbCat == null ? null
        : fbBuilder.writeString(_midbCat!);
    final int? beNumberOffset = _beNumber == null ? null
        : fbBuilder.writeString(_beNumber!);
    final int? oSuffixOffset = _oSuffix == null ? null
        : fbBuilder.writeString(_oSuffix!);
    final int? pinOffset = _pin == null ? null
        : fbBuilder.writeString(_pin!);
    final int? muidSrcTrkOffset = _muidSrcTrk == null ? null
        : fbBuilder.writeString(_muidSrcTrk!);
    final int? muidSrcOffset = _muidSrc == null ? null
        : fbBuilder.writeString(_muidSrc!);
    final int? mslStatusOffset = _mslStatus == null ? null
        : fbBuilder.writeString(_mslStatus!);
    final int? alertOffset = _alert == null ? null
        : fbBuilder.writeString(_alert!);
    final int? origXrefOffset = _origXref == null ? null
        : fbBuilder.writeString(_origXref!);
    final int? elnot1Offset = _elnot1 == null ? null
        : fbBuilder.writeString(_elnot1!);
    final int? elnot2Offset = _elnot2 == null ? null
        : fbBuilder.writeString(_elnot2!);
    final int? objTypeOffset = _objType == null ? null
        : fbBuilder.writeString(_objType!);
    final int? objPlatOffset = _objPlat == null ? null
        : fbBuilder.writeString(_objPlat!);
    final int? objActOffset = _objAct == null ? null
        : fbBuilder.writeString(_objAct!);
    final int? objNatOffset = _objNat == null ? null
        : fbBuilder.writeString(_objNat!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? shortNameOffset = _shortName == null ? null
        : fbBuilder.writeString(_shortName!);
    final int? trkIdOffset = _trkId == null ? null
        : fbBuilder.writeString(_trkId!);
    final int? trkNumOffset = _trkNum == null ? null
        : fbBuilder.writeString(_trkNum!);
    final int? trkScopeOffset = _trkScope == null ? null
        : fbBuilder.writeString(_trkScope!);
    final int? sourceUidOffset = _sourceUid == null ? null
        : fbBuilder.writeString(_sourceUid!);
    final int? callSignOffset = _callSign == null ? null
        : fbBuilder.writeString(_callSign!);
    final int? identAmpOffset = _identAmp == null ? null
        : fbBuilder.writeString(_identAmp!);
    final int? spaceAmpOffset = _spaceAmp == null ? null
        : fbBuilder.writeString(_spaceAmp!);
    final int? spaceSpecTypeOffset = _spaceSpecType == null ? null
        : fbBuilder.writeString(_spaceSpecType!);
    final int? acftSubTypeOffset = _acftSubType == null ? null
        : fbBuilder.writeString(_acftSubType!);
    final int? tsOffset = _ts == null ? null
        : fbBuilder.writeString(_ts!);
    final int? launchTimeOffset = _launchTime == null ? null
        : fbBuilder.writeString(_launchTime!);
    final int? impactTimeOffset = _impactTime == null ? null
        : fbBuilder.writeString(_impactTime!);
    final int? ftnMsgTsOffset = _ftnMsgTs == null ? null
        : fbBuilder.writeString(_ftnMsgTs!);
    final int? ftnOffset = _ftn == null ? null
        : fbBuilder.writeString(_ftn!);
    final int? ftnCmdOffset = _ftnCmd == null ? null
        : fbBuilder.writeString(_ftnCmd!);
    final int? rtnMsgTsOffset = _rtnMsgTs == null ? null
        : fbBuilder.writeList(_rtnMsgTs!.map(fbBuilder.writeString).toList());
    final int? rtnOffset = _rtn == null ? null
        : fbBuilder.writeList(_rtn!.map(fbBuilder.writeString).toList());
    final int? rtnTrkStateOffset = _rtnTrkState == null ? null
        : fbBuilder.writeString(_rtnTrkState!);
    final int? rtnCmdOffset = _rtnCmd == null ? null
        : fbBuilder.writeString(_rtnCmd!);
    final int? senOffset = _sen == null ? null
        : fbBuilder.writeString(_sen!);
    final int? rptChxrefOffset = _rptChxref == null ? null
        : fbBuilder.writeString(_rptChxref!);
    final int? mil2525BstrOffset = _mil2525Bstr == null ? null
        : fbBuilder.writeString(_mil2525Bstr!);
    final int? trnspdrIdOffset = _trnspdrId == null ? null
        : fbBuilder.writeString(_trnspdrId!);
    final int? trnspdrTypeOffset = _trnspdrType == null ? null
        : fbBuilder.writeString(_trnspdrType!);
    final int? emitterNameOffset = _emitterName == null ? null
        : fbBuilder.writeString(_emitterName!);
    final int? infoSourceOffset = _infoSource == null ? null
        : fbBuilder.writeString(_infoSource!);
    final int? harmonicsOffset = _harmonics == null ? null
        : fbBuilder.writeString(_harmonics!);
    final int? scanTypeOffset = _scanType == null ? null
        : fbBuilder.writeString(_scanType!);
    final int? cIOffset = _cI == null ? null
        : fbBuilder.writeString(_cI!);
    final int? errGeoAreaSwitchOffset = _errGeoAreaSwitch == null ? null
        : fbBuilder.writeString(_errGeoAreaSwitch!);
    final int? tesEventIdOffset = _tesEventId == null ? null
        : fbBuilder.writeString(_tesEventId!);
    final int? coopLocIndOffset = _coopLocInd == null ? null
        : fbBuilder.writeString(_coopLocInd!);
    final int? maneuverIndOffset = _maneuverInd == null ? null
        : fbBuilder.writeString(_maneuverInd!);
    final int? launchAouTypeOffset = _launchAouType == null ? null
        : fbBuilder.writeString(_launchAouType!);
    final int? launchAouDataOffset = _launchAouData == null ? null
        : fbBuilder.writeList(_launchAouData!.map(fbBuilder.writeString).toList());
    final int? impactAouTypeOffset = _impactAouType == null ? null
        : fbBuilder.writeString(_impactAouType!);
    final int? impactAouDataOffset = _impactAouData == null ? null
        : fbBuilder.writeList(_impactAouData!.map(fbBuilder.writeString).toList());
    final int? aouRptTypeOffset = _aouRptType == null ? null
        : fbBuilder.writeString(_aouRptType!);
    final int? aouRptDataOffset = _aouRptData == null ? null
        : fbBuilder.writeList(_aouRptData!.map(fbBuilder.writeString).toList());
    final int? ecefPosOffset = _ecefPos == null ? null
        : fbBuilder.writeList(_ecefPos!.map(fbBuilder.writeString).toList());
    final int? ecefVelOffset = _ecefVel == null ? null
        : fbBuilder.writeList(_ecefVel!.map(fbBuilder.writeString).toList());
    final int? tcpaOffset = _tcpa == null ? null
        : fbBuilder.writeString(_tcpa!);
    final int? navStatusOffset = _navStatus == null ? null
        : fbBuilder.writeString(_navStatus!);
    final int? posDeviceTypeOffset = _posDeviceType == null ? null
        : fbBuilder.writeString(_posDeviceType!);
    final int? atonOffset = _aton == null ? null
        : fbBuilder.writeString(_aton!);
    final int? offPosIndOffset = _offPosInd == null ? null
        : fbBuilder.writeString(_offPosInd!);
    final int? antennaRefDimensionsOffset = _antennaRefDimensions == null ? null
        : fbBuilder.writeList(_antennaRefDimensions!.map(fbBuilder.writeString).toList());
    final int? shipClassOffset = _shipClass == null ? null
        : fbBuilder.writeString(_shipClass!);
    final int? cargoTypeOffset = _cargoType == null ? null
        : fbBuilder.writeString(_cargoType!);
    final int? appGrpOffset = _appGrp == null ? null
        : fbBuilder.writeString(_appGrp!);
    final int? hullProfOffset = _hullProf == null ? null
        : fbBuilder.writeString(_hullProf!);
    final int? propTypeOffset = _propType == null ? null
        : fbBuilder.writeString(_propType!);
    final int? sternTypeOffset = _sternType == null ? null
        : fbBuilder.writeString(_sternType!);
    final int? arrTimeOffset = _arrTime == null ? null
        : fbBuilder.writeString(_arrTime!);
    final int? arrFlagOffset = _arrFlag == null ? null
        : fbBuilder.writeString(_arrFlag!);
    final int? arrCargoOffset = _arrCargo == null ? null
        : fbBuilder.writeString(_arrCargo!);
    final int? arrPortOffset = _arrPort == null ? null
        : fbBuilder.writeString(_arrPort!);
    final int? depPortOffset = _depPort == null ? null
        : fbBuilder.writeString(_depPort!);
    final int? depFlagOffset = _depFlag == null ? null
        : fbBuilder.writeString(_depFlag!);
    final int? depCargoOffset = _depCargo == null ? null
        : fbBuilder.writeString(_depCargo!);
    final int? desFlagOffset = _desFlag == null ? null
        : fbBuilder.writeString(_desFlag!);
    final int? desCargoOffset = _desCargo == null ? null
        : fbBuilder.writeString(_desCargo!);
    final int? destinationOffset = _destination == null ? null
        : fbBuilder.writeString(_destination!);
    final int? etaOffset = _eta == null ? null
        : fbBuilder.writeString(_eta!);
    final int? etdOffset = _etd == null ? null
        : fbBuilder.writeString(_etd!);
    final int? iffOffset = _iff == null ? null
        : fbBuilder.writeString(_iff!);
    final int? staffCmtsOffset = _staffCmts == null ? null
        : fbBuilder.writeString(_staffCmts!);
    final int? addInfoOffset = _addInfo == null ? null
        : fbBuilder.writeString(_addInfo!);
    final int? evalRatingOffset = _evalRating == null ? null
        : fbBuilder.writeString(_evalRating!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(158);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addInt8(2, _env?.value);
    fbBuilder.addOffset(3, msgTypeOffset);
    fbBuilder.addOffset(4, hullNumOffset);
    fbBuilder.addOffset(5, pifOffset);
    fbBuilder.addOffset(6, sconumOffset);
    fbBuilder.addOffset(7, ntdsOffset);
    fbBuilder.addOffset(8, disIdOffset);
    fbBuilder.addOffset(9, midbCatOffset);
    fbBuilder.addOffset(10, beNumberOffset);
    fbBuilder.addOffset(11, oSuffixOffset);
    fbBuilder.addOffset(12, pinOffset);
    fbBuilder.addBool(13, _lostTrkInd);
    fbBuilder.addOffset(14, muidSrcTrkOffset);
    fbBuilder.addOffset(15, muidSrcOffset);
    fbBuilder.addOffset(16, mslStatusOffset);
    fbBuilder.addFloat64(17, _trkConf);
    fbBuilder.addInt32(18, _trkQual);
    fbBuilder.addOffset(19, alertOffset);
    fbBuilder.addOffset(20, origXrefOffset);
    fbBuilder.addOffset(21, elnot1Offset);
    fbBuilder.addOffset(22, elnot2Offset);
    fbBuilder.addInt8(23, _objIdent?.value);
    fbBuilder.addOffset(24, objTypeOffset);
    fbBuilder.addOffset(25, objPlatOffset);
    fbBuilder.addOffset(26, objActOffset);
    fbBuilder.addOffset(27, objNatOffset);
    fbBuilder.addOffset(28, nameOffset);
    fbBuilder.addOffset(29, shortNameOffset);
    fbBuilder.addOffset(30, trkIdOffset);
    fbBuilder.addOffset(31, trkNumOffset);
    fbBuilder.addOffset(32, trkScopeOffset);
    fbBuilder.addOffset(33, sourceUidOffset);
    fbBuilder.addOffset(34, callSignOffset);
    fbBuilder.addOffset(35, identAmpOffset);
    fbBuilder.addOffset(36, spaceAmpOffset);
    fbBuilder.addInt32(37, _spaceAmpConf);
    fbBuilder.addOffset(38, spaceSpecTypeOffset);
    fbBuilder.addOffset(39, acftSubTypeOffset);
    fbBuilder.addOffset(40, tsOffset);
    fbBuilder.addOffset(41, launchTimeOffset);
    fbBuilder.addOffset(42, impactTimeOffset);
    fbBuilder.addOffset(43, ftnMsgTsOffset);
    fbBuilder.addOffset(44, ftnOffset);
    fbBuilder.addOffset(45, ftnCmdOffset);
    fbBuilder.addOffset(46, rtnMsgTsOffset);
    fbBuilder.addOffset(47, rtnOffset);
    fbBuilder.addOffset(48, rtnTrkStateOffset);
    fbBuilder.addOffset(49, rtnCmdOffset);
    fbBuilder.addOffset(50, senOffset);
    fbBuilder.addOffset(51, rptChxrefOffset);
    fbBuilder.addBool(52, _rptArchived);
    fbBuilder.addBool(53, _selfReport);
    fbBuilder.addOffset(54, mil2525BstrOffset);
    fbBuilder.addOffset(55, trnspdrIdOffset);
    fbBuilder.addOffset(56, trnspdrTypeOffset);
    fbBuilder.addOffset(57, emitterNameOffset);
    fbBuilder.addOffset(58, infoSourceOffset);
    fbBuilder.addBool(59, _boosting);
    fbBuilder.addFloat64(60, _freq);
    fbBuilder.addFloat64(61, _maxFreq);
    fbBuilder.addOffset(62, harmonicsOffset);
    fbBuilder.addFloat64(63, _pri);
    fbBuilder.addFloat64(64, _prf);
    fbBuilder.addFloat64(65, _pw);
    fbBuilder.addOffset(66, scanTypeOffset);
    fbBuilder.addFloat64(67, _scanRate);
    fbBuilder.addInt32(68, _scn);
    fbBuilder.addOffset(69, cIOffset);
    fbBuilder.addFloat64(70, _angElev);
    fbBuilder.addFloat64(71, _lat);
    fbBuilder.addFloat64(72, _lon);
    fbBuilder.addFloat64(73, _launchLat);
    fbBuilder.addFloat64(74, _launchLon);
    fbBuilder.addFloat64(75, _impactLat);
    fbBuilder.addFloat64(76, _impactLon);
    fbBuilder.addFloat64(77, _polarSingLocLat);
    fbBuilder.addFloat64(78, _polarSingLocLon);
    fbBuilder.addFloat64(79, _azCorrCenterLine);
    fbBuilder.addFloat64(80, _azCorrArcWidth);
    fbBuilder.addFloat64(81, _errSemiIntAxis);
    fbBuilder.addFloat64(82, _errAreaOrient);
    fbBuilder.addFloat64(83, _errSemiMajElev);
    fbBuilder.addOffset(84, errGeoAreaSwitchOffset);
    fbBuilder.addFloat64(85, _burnoutAlt);
    fbBuilder.addOffset(86, tesEventIdOffset);
    fbBuilder.addFloat64(87, _spd);
    fbBuilder.addFloat64(88, _avgSpd);
    fbBuilder.addFloat64(89, _tol);
    fbBuilder.addFloat64(90, _alt);
    fbBuilder.addFloat64(91, _hdng);
    fbBuilder.addFloat64(92, _course);
    fbBuilder.addFloat64(93, _propRpm);
    fbBuilder.addFloat64(94, _tpk);
    fbBuilder.addOffset(95, coopLocIndOffset);
    fbBuilder.addOffset(96, maneuverIndOffset);
    fbBuilder.addOffset(97, launchAouTypeOffset);
    fbBuilder.addOffset(98, launchAouDataOffset);
    fbBuilder.addOffset(99, impactAouTypeOffset);
    fbBuilder.addOffset(100, impactAouDataOffset);
    fbBuilder.addOffset(101, aouRptTypeOffset);
    fbBuilder.addOffset(102, aouRptDataOffset);
    fbBuilder.addOffset(103, ecefPosOffset);
    fbBuilder.addOffset(104, ecefVelOffset);
    fbBuilder.addFloat64(105, _containment);
    fbBuilder.addFloat64(106, _cpa);
    fbBuilder.addOffset(107, tcpaOffset);
    fbBuilder.addOffset(108, navStatusOffset);
    fbBuilder.addOffset(109, posDeviceTypeOffset);
    fbBuilder.addOffset(110, atonOffset);
    fbBuilder.addOffset(111, offPosIndOffset);
    fbBuilder.addOffset(112, antennaRefDimensionsOffset);
    fbBuilder.addOffset(113, shipClassOffset);
    fbBuilder.addInt32(114, _imon);
    fbBuilder.addInt32(115, _mmsi);
    fbBuilder.addFloat64(116, _draught);
    fbBuilder.addFloat64(117, _length);
    fbBuilder.addFloat64(118, _width);
    fbBuilder.addOffset(119, cargoTypeOffset);
    fbBuilder.addOffset(120, appGrpOffset);
    fbBuilder.addOffset(121, hullProfOffset);
    fbBuilder.addOffset(122, propTypeOffset);
    fbBuilder.addInt32(123, _numBlades);
    fbBuilder.addInt32(124, _numShafts);
    fbBuilder.addOffset(125, sternTypeOffset);
    fbBuilder.addFloat64(126, _vslWt);
    fbBuilder.addOffset(127, arrTimeOffset);
    fbBuilder.addOffset(128, arrFlagOffset);
    fbBuilder.addOffset(129, arrCargoOffset);
    fbBuilder.addOffset(130, arrPortOffset);
    fbBuilder.addOffset(131, depPortOffset);
    fbBuilder.addOffset(132, depFlagOffset);
    fbBuilder.addOffset(133, depCargoOffset);
    fbBuilder.addOffset(134, desFlagOffset);
    fbBuilder.addOffset(135, desCargoOffset);
    fbBuilder.addOffset(136, destinationOffset);
    fbBuilder.addOffset(137, etaOffset);
    fbBuilder.addOffset(138, etdOffset);
    fbBuilder.addOffset(139, iffOffset);
    fbBuilder.addBool(140, _emgInd);
    fbBuilder.addBool(141, _dropPtInd);
    fbBuilder.addBool(142, _reinforced);
    fbBuilder.addBool(143, _reduced);
    fbBuilder.addBool(144, _hq);
    fbBuilder.addBool(145, _dummy);
    fbBuilder.addBool(146, _taskForce);
    fbBuilder.addBool(147, _feint);
    fbBuilder.addBool(148, _installation);
    fbBuilder.addOffset(149, staffCmtsOffset);
    fbBuilder.addOffset(150, addInfoOffset);
    fbBuilder.addOffset(151, evalRatingOffset);
    fbBuilder.addOffset(152, createdAtOffset);
    fbBuilder.addOffset(153, createdByOffset);
    fbBuilder.addOffset(154, sourceOffset);
    fbBuilder.addOffset(155, originOffset);
    fbBuilder.addInt8(156, _dataMode?.value);
    fbBuilder.addOffset(157, origNetworkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
