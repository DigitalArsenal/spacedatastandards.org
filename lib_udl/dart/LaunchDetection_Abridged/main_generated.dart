// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class LaunchDetectionAbridgedDataModeEnum {
  final int value;
  const LaunchDetectionAbridgedDataModeEnum._(this.value);

  factory LaunchDetectionAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum LaunchDetectionAbridgedDataModeEnum');
    }
    return result;
  }

  static LaunchDetectionAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : LaunchDetectionAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const LaunchDetectionAbridgedDataModeEnum REAL = LaunchDetectionAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const LaunchDetectionAbridgedDataModeEnum TEST = LaunchDetectionAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const LaunchDetectionAbridgedDataModeEnum SIMULATED = LaunchDetectionAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const LaunchDetectionAbridgedDataModeEnum EXERCISE = LaunchDetectionAbridgedDataModeEnum._(3);
  static const Map<int, LaunchDetectionAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<LaunchDetectionAbridgedDataModeEnum> reader = _LaunchDetectionAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'LaunchDetectionAbridgedDataModeEnum{value: $value}';
  }
}

class _LaunchDetectionAbridgedDataModeEnumReader extends fb.Reader<LaunchDetectionAbridgedDataModeEnum> {
  const _LaunchDetectionAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  LaunchDetectionAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      LaunchDetectionAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Data to analyze launch detections.
class LaunchDetectionAbridged {
  LaunchDetectionAbridged._(this._bc, this._bcOffset);
  factory LaunchDetectionAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LaunchDetectionAbridged> reader = _LaunchDetectionAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: LAUNCHDETECTION-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Time of Launch.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get launchTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Type of message for the data.
  ///  Example: /// Example: Example-Msg-Type
  ///  Constraints: Minimum length = 1, Maximum length = 16
  String? get messageType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get launchLatitude => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get launchLongitude => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Angle measured clockwise from North for the launch heading (in Degrees).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get launchAzimuth => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Orbit Right Ascension of Ascending Node (in Degrees).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get raan => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Orbit Inclination (in Degrees).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get inclination => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Time of observation.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get observationTime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).
  ///  Example: /// Example: 45.23
  ///  Constraints: No constraints specified.
  double get observationLatitude => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Longitude of launch vehicle at observation time (in Degrees).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get observationLongitude => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Altitude of launch vehicle at observation time (in KM).
  ///  Example: /// Example: 1.23
  ///  Constraints: No constraints specified.
  double get observationAltitude => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Flag indicating multiple observers were used.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get stereoFlag => const fb.BoolReader().vTableGet(_bc, _bcOffset, 30, false);
  ///  Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get highZenithAzimuth => const fb.BoolReader().vTableGet(_bc, _bcOffset, 32, false);
  ///  Integer indicating how messages should be sequenced for a specific event.
  ///  Example: /// Example: 5
  ///  Constraints: No constraints specified.
  int get sequenceNumber => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  Id to be able to correlate different messages to a specific event.
  ///  Example: /// Example: EVENT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get eventId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  ///  Example: /// Example: Example descriptor
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get descriptor => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  LaunchDetectionAbridgedDataModeEnum get dataMode => LaunchDetectionAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 46, 0));
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Read-only time the row was updated in the database, set automatically by the system on update.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get updatedAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get updatedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);

  @override
  String toString() {
    return 'LaunchDetectionAbridged{id: ${id}, classificationMarking: ${classificationMarking}, launchTime: ${launchTime}, messageType: ${messageType}, launchLatitude: ${launchLatitude}, launchLongitude: ${launchLongitude}, launchAzimuth: ${launchAzimuth}, raan: ${raan}, inclination: ${inclination}, observationTime: ${observationTime}, observationLatitude: ${observationLatitude}, observationLongitude: ${observationLongitude}, observationAltitude: ${observationAltitude}, stereoFlag: ${stereoFlag}, highZenithAzimuth: ${highZenithAzimuth}, sequenceNumber: ${sequenceNumber}, eventId: ${eventId}, source: ${source}, origin: ${origin}, descriptor: ${descriptor}, origNetwork: ${origNetwork}, dataMode: ${dataMode}, createdAt: ${createdAt}, createdBy: ${createdBy}, updatedAt: ${updatedAt}, updatedBy: ${updatedBy}}';
  }
}

class _LaunchDetectionAbridgedReader extends fb.TableReader<LaunchDetectionAbridged> {
  const _LaunchDetectionAbridgedReader();

  @override
  LaunchDetectionAbridged createObject(fb.BufferContext bc, int offset) => 
    LaunchDetectionAbridged._(bc, offset);
}

class LaunchDetectionAbridgedBuilder {
  LaunchDetectionAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(26);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLaunchTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMessageTypeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addLaunchLatitude(double? launchLatitude) {
    fbBuilder.addFloat64(4, launchLatitude);
    return fbBuilder.offset;
  }
  int addLaunchLongitude(double? launchLongitude) {
    fbBuilder.addFloat64(5, launchLongitude);
    return fbBuilder.offset;
  }
  int addLaunchAzimuth(double? launchAzimuth) {
    fbBuilder.addFloat64(6, launchAzimuth);
    return fbBuilder.offset;
  }
  int addRaan(double? raan) {
    fbBuilder.addFloat64(7, raan);
    return fbBuilder.offset;
  }
  int addInclination(double? inclination) {
    fbBuilder.addFloat64(8, inclination);
    return fbBuilder.offset;
  }
  int addObservationTimeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addObservationLatitude(double? observationLatitude) {
    fbBuilder.addFloat64(10, observationLatitude);
    return fbBuilder.offset;
  }
  int addObservationLongitude(double? observationLongitude) {
    fbBuilder.addFloat64(11, observationLongitude);
    return fbBuilder.offset;
  }
  int addObservationAltitude(double? observationAltitude) {
    fbBuilder.addFloat64(12, observationAltitude);
    return fbBuilder.offset;
  }
  int addStereoFlag(bool? stereoFlag) {
    fbBuilder.addBool(13, stereoFlag);
    return fbBuilder.offset;
  }
  int addHighZenithAzimuth(bool? highZenithAzimuth) {
    fbBuilder.addBool(14, highZenithAzimuth);
    return fbBuilder.offset;
  }
  int addSequenceNumber(int? sequenceNumber) {
    fbBuilder.addInt32(15, sequenceNumber);
    return fbBuilder.offset;
  }
  int addEventIdOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addDescriptorOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addDataMode(LaunchDetectionAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(21, dataMode?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addUpdatedByOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LaunchDetectionAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _launchTime;
  final String? _messageType;
  final double? _launchLatitude;
  final double? _launchLongitude;
  final double? _launchAzimuth;
  final double? _raan;
  final double? _inclination;
  final String? _observationTime;
  final double? _observationLatitude;
  final double? _observationLongitude;
  final double? _observationAltitude;
  final bool? _stereoFlag;
  final bool? _highZenithAzimuth;
  final int? _sequenceNumber;
  final String? _eventId;
  final String? _source;
  final String? _origin;
  final String? _descriptor;
  final String? _origNetwork;
  final LaunchDetectionAbridgedDataModeEnum? _dataMode;
  final String? _createdAt;
  final String? _createdBy;
  final String? _updatedAt;
  final String? _updatedBy;

  LaunchDetectionAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? launchTime,
    String? messageType,
    double? launchLatitude,
    double? launchLongitude,
    double? launchAzimuth,
    double? raan,
    double? inclination,
    String? observationTime,
    double? observationLatitude,
    double? observationLongitude,
    double? observationAltitude,
    bool? stereoFlag,
    bool? highZenithAzimuth,
    int? sequenceNumber,
    String? eventId,
    String? source,
    String? origin,
    String? descriptor,
    String? origNetwork,
    LaunchDetectionAbridgedDataModeEnum? dataMode,
    String? createdAt,
    String? createdBy,
    String? updatedAt,
    String? updatedBy,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _launchTime = launchTime,
        _messageType = messageType,
        _launchLatitude = launchLatitude,
        _launchLongitude = launchLongitude,
        _launchAzimuth = launchAzimuth,
        _raan = raan,
        _inclination = inclination,
        _observationTime = observationTime,
        _observationLatitude = observationLatitude,
        _observationLongitude = observationLongitude,
        _observationAltitude = observationAltitude,
        _stereoFlag = stereoFlag,
        _highZenithAzimuth = highZenithAzimuth,
        _sequenceNumber = sequenceNumber,
        _eventId = eventId,
        _source = source,
        _origin = origin,
        _descriptor = descriptor,
        _origNetwork = origNetwork,
        _dataMode = dataMode,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _updatedAt = updatedAt,
        _updatedBy = updatedBy;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? launchTimeOffset = _launchTime == null ? null
        : fbBuilder.writeString(_launchTime!);
    final int? messageTypeOffset = _messageType == null ? null
        : fbBuilder.writeString(_messageType!);
    final int? observationTimeOffset = _observationTime == null ? null
        : fbBuilder.writeString(_observationTime!);
    final int? eventIdOffset = _eventId == null ? null
        : fbBuilder.writeString(_eventId!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? descriptorOffset = _descriptor == null ? null
        : fbBuilder.writeString(_descriptor!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? updatedAtOffset = _updatedAt == null ? null
        : fbBuilder.writeString(_updatedAt!);
    final int? updatedByOffset = _updatedBy == null ? null
        : fbBuilder.writeString(_updatedBy!);
    fbBuilder.startTable(26);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, launchTimeOffset);
    fbBuilder.addOffset(3, messageTypeOffset);
    fbBuilder.addFloat64(4, _launchLatitude);
    fbBuilder.addFloat64(5, _launchLongitude);
    fbBuilder.addFloat64(6, _launchAzimuth);
    fbBuilder.addFloat64(7, _raan);
    fbBuilder.addFloat64(8, _inclination);
    fbBuilder.addOffset(9, observationTimeOffset);
    fbBuilder.addFloat64(10, _observationLatitude);
    fbBuilder.addFloat64(11, _observationLongitude);
    fbBuilder.addFloat64(12, _observationAltitude);
    fbBuilder.addBool(13, _stereoFlag);
    fbBuilder.addBool(14, _highZenithAzimuth);
    fbBuilder.addInt32(15, _sequenceNumber);
    fbBuilder.addOffset(16, eventIdOffset);
    fbBuilder.addOffset(17, sourceOffset);
    fbBuilder.addOffset(18, originOffset);
    fbBuilder.addOffset(19, descriptorOffset);
    fbBuilder.addOffset(20, origNetworkOffset);
    fbBuilder.addInt8(21, _dataMode?.value);
    fbBuilder.addOffset(22, createdAtOffset);
    fbBuilder.addOffset(23, createdByOffset);
    fbBuilder.addOffset(24, updatedAtOffset);
    fbBuilder.addOffset(25, updatedByOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
