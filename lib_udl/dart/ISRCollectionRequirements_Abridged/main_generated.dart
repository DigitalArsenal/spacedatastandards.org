// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Tasking desired collection requirements.
class IsrcollectionRequirementsAbridged {
  IsrcollectionRequirementsAbridged._(this._bc, this._bcOffset);
  factory IsrcollectionRequirementsAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IsrcollectionRequirementsAbridged> reader = _IsrcollectionRequirementsAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Collection Requirement Unique Identifier.
  ///  Example: /// Example: ISCRCOLLECTIONREQUIREMENTS
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Encryption hashing algorithm.
  ///  Example: /// Example: HASH
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get hash => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Type collection this requirement applies to.
  ///  Example: /// Example: COLLECTION_TYPE
  ///  Constraints: Minimum length = 0, Maximum length = 128
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Collection Requirement Unique Identifier.
  ///  Example: /// Example: CRID
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get cridNumbers => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  1-n priority for this collection requirement.
  ///  Example: /// Example: 20.23
  ///  Constraints: No constraints specified.
  double get priority => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Record id.
  ///  Example: /// Example: RECORD-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get recordId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Reconnaissance Survey information the operator needs.
  ///  Example: /// Example: SURVEY_INFO
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get reconSurvey => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Primary type of intelligence to be collected for this requirement.
  ///  Example: /// Example: Sig
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get intelDiscipline => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Sub category of primary intelligence to be collected for this requirement.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get secondary => const fb.BoolReader().vTableGet(_bc, _bcOffset, 20, false);
  ///  Is this collection requirement an emphasized/critical requirement.
  ///  Example: /// Example: False
  ///  Constraints: No constraints specified.
  bool get emphasized => const fb.BoolReader().vTableGet(_bc, _bcOffset, 22, false);
  ///  Is this collection request for the Prism system?.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get isPrismCr => const fb.BoolReader().vTableGet(_bc, _bcOffset, 24, false);
  ///  Start time for this requirement, should be within the mission time window.
  ///  Example: /// Example: 2021-01-19T01:01:15.001Z
  ///  Constraints: No constraints specified.
  String? get start => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Stop time for this requirement, should be within the mission time window.
  ///  Example: /// Example: 2021-01-19T01:20:01.001Z
  ///  Constraints: No constraints specified.
  String? get stop => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Human readable name for this operation.
  ///  Example: /// Example: NAME
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get operation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  The name of the military unit that this assigned collection requirement will support.
  ///  Example: /// Example: UNIT
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get supportedUnit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Country code of the collection requirement. A Country may represent countries, multi-national consortiums, and international organizations.
  ///  Example: /// Example: COUNTRY_CODE
  ///  Constraints: Minimum length = 0, Maximum length = 4
  String? get country => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Region of the collection requirement.
  ///  Example: /// Example: REGION
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get region => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Subregion of the collection requirement.
  ///  Example: /// Example: SUBREGION
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get subregion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Free text field for the user to specify special instructions needed for this collection.
  ///  Example: /// Example: TEXT
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get specialComGuidance => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get criticalTimes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  No description provided.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  String? get exploitationRequirement => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Array of POI Id's for the targets being tasked.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get targetList => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 46);

  @override
  String toString() {
    return 'IsrcollectionRequirementsAbridged{id: ${id}, hash: ${hash}, type: ${type}, cridNumbers: ${cridNumbers}, priority: ${priority}, recordId: ${recordId}, reconSurvey: ${reconSurvey}, intelDiscipline: ${intelDiscipline}, secondary: ${secondary}, emphasized: ${emphasized}, isPrismCr: ${isPrismCr}, start: ${start}, stop: ${stop}, operation: ${operation}, supportedUnit: ${supportedUnit}, country: ${country}, region: ${region}, subregion: ${subregion}, specialComGuidance: ${specialComGuidance}, criticalTimes: ${criticalTimes}, exploitationRequirement: ${exploitationRequirement}, targetList: ${targetList}}';
  }
}

class _IsrcollectionRequirementsAbridgedReader extends fb.TableReader<IsrcollectionRequirementsAbridged> {
  const _IsrcollectionRequirementsAbridgedReader();

  @override
  IsrcollectionRequirementsAbridged createObject(fb.BufferContext bc, int offset) => 
    IsrcollectionRequirementsAbridged._(bc, offset);
}

class IsrcollectionRequirementsAbridgedBuilder {
  IsrcollectionRequirementsAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(22);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHashOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCridNumbersOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addPriority(double? priority) {
    fbBuilder.addFloat64(4, priority);
    return fbBuilder.offset;
  }
  int addRecordIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addReconSurveyOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addIntelDisciplineOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addSecondary(bool? secondary) {
    fbBuilder.addBool(8, secondary);
    return fbBuilder.offset;
  }
  int addEmphasized(bool? emphasized) {
    fbBuilder.addBool(9, emphasized);
    return fbBuilder.offset;
  }
  int addIsPrismCr(bool? isPrismCr) {
    fbBuilder.addBool(10, isPrismCr);
    return fbBuilder.offset;
  }
  int addStartOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addStopOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addOperationOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addSupportedUnitOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addCountryOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addRegionOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addSubregionOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addSpecialComGuidanceOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addCriticalTimesOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addExploitationRequirementOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addTargetListOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IsrcollectionRequirementsAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _hash;
  final String? _type;
  final String? _cridNumbers;
  final double? _priority;
  final String? _recordId;
  final String? _reconSurvey;
  final String? _intelDiscipline;
  final bool? _secondary;
  final bool? _emphasized;
  final bool? _isPrismCr;
  final String? _start;
  final String? _stop;
  final String? _operation;
  final String? _supportedUnit;
  final String? _country;
  final String? _region;
  final String? _subregion;
  final String? _specialComGuidance;
  final String? _criticalTimes;
  final String? _exploitationRequirement;
  final List<String>? _targetList;

  IsrcollectionRequirementsAbridgedObjectBuilder({
    String? id,
    String? hash,
    String? type,
    String? cridNumbers,
    double? priority,
    String? recordId,
    String? reconSurvey,
    String? intelDiscipline,
    bool? secondary,
    bool? emphasized,
    bool? isPrismCr,
    String? start,
    String? stop,
    String? operation,
    String? supportedUnit,
    String? country,
    String? region,
    String? subregion,
    String? specialComGuidance,
    String? criticalTimes,
    String? exploitationRequirement,
    List<String>? targetList,
  })
      : _id = id,
        _hash = hash,
        _type = type,
        _cridNumbers = cridNumbers,
        _priority = priority,
        _recordId = recordId,
        _reconSurvey = reconSurvey,
        _intelDiscipline = intelDiscipline,
        _secondary = secondary,
        _emphasized = emphasized,
        _isPrismCr = isPrismCr,
        _start = start,
        _stop = stop,
        _operation = operation,
        _supportedUnit = supportedUnit,
        _country = country,
        _region = region,
        _subregion = subregion,
        _specialComGuidance = specialComGuidance,
        _criticalTimes = criticalTimes,
        _exploitationRequirement = exploitationRequirement,
        _targetList = targetList;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? hashOffset = _hash == null ? null
        : fbBuilder.writeString(_hash!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? cridNumbersOffset = _cridNumbers == null ? null
        : fbBuilder.writeString(_cridNumbers!);
    final int? recordIdOffset = _recordId == null ? null
        : fbBuilder.writeString(_recordId!);
    final int? reconSurveyOffset = _reconSurvey == null ? null
        : fbBuilder.writeString(_reconSurvey!);
    final int? intelDisciplineOffset = _intelDiscipline == null ? null
        : fbBuilder.writeString(_intelDiscipline!);
    final int? startOffset = _start == null ? null
        : fbBuilder.writeString(_start!);
    final int? stopOffset = _stop == null ? null
        : fbBuilder.writeString(_stop!);
    final int? operationOffset = _operation == null ? null
        : fbBuilder.writeString(_operation!);
    final int? supportedUnitOffset = _supportedUnit == null ? null
        : fbBuilder.writeString(_supportedUnit!);
    final int? countryOffset = _country == null ? null
        : fbBuilder.writeString(_country!);
    final int? regionOffset = _region == null ? null
        : fbBuilder.writeString(_region!);
    final int? subregionOffset = _subregion == null ? null
        : fbBuilder.writeString(_subregion!);
    final int? specialComGuidanceOffset = _specialComGuidance == null ? null
        : fbBuilder.writeString(_specialComGuidance!);
    final int? criticalTimesOffset = _criticalTimes == null ? null
        : fbBuilder.writeString(_criticalTimes!);
    final int? exploitationRequirementOffset = _exploitationRequirement == null ? null
        : fbBuilder.writeString(_exploitationRequirement!);
    final int? targetListOffset = _targetList == null ? null
        : fbBuilder.writeList(_targetList!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(22);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, hashOffset);
    fbBuilder.addOffset(2, typeOffset);
    fbBuilder.addOffset(3, cridNumbersOffset);
    fbBuilder.addFloat64(4, _priority);
    fbBuilder.addOffset(5, recordIdOffset);
    fbBuilder.addOffset(6, reconSurveyOffset);
    fbBuilder.addOffset(7, intelDisciplineOffset);
    fbBuilder.addBool(8, _secondary);
    fbBuilder.addBool(9, _emphasized);
    fbBuilder.addBool(10, _isPrismCr);
    fbBuilder.addOffset(11, startOffset);
    fbBuilder.addOffset(12, stopOffset);
    fbBuilder.addOffset(13, operationOffset);
    fbBuilder.addOffset(14, supportedUnitOffset);
    fbBuilder.addOffset(15, countryOffset);
    fbBuilder.addOffset(16, regionOffset);
    fbBuilder.addOffset(17, subregionOffset);
    fbBuilder.addOffset(18, specialComGuidanceOffset);
    fbBuilder.addOffset(19, criticalTimesOffset);
    fbBuilder.addOffset(20, exploitationRequirementOffset);
    fbBuilder.addOffset(21, targetListOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
