// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// A single space environment observation.
class SeobservationIngest {
  SeobservationIngest._(this._bc, this._bcOffset);
  factory SeobservationIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SeobservationIngest> reader = _SeobservationIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The type of observation associated with this record.
  ///  Example: /// Example: INTEGRAL FLUX
  ///  Constraints: Minimum length = 1, Maximum length = 24
  String? get obType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.
  ///  Example: /// Example: particles/cm^2/s/sr
  ///  Constraints: Minimum length = 1, Maximum length = 32
  String? get obUoM => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  ///  Example: /// Example: 0.487687826
  ///  Constraints: No constraints specified.
  double get obValue => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  ///  Example: /// Example: C1.3
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get obString => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  ///  Example: /// Example: [1.7, 35.6, 21.2, 19.01]
  ///  Constraints: No constraints specified.
  List<String>? get obArray => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 12);
  ///  A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  ///  Example: /// Example: True
  ///  Constraints: No constraints specified.
  bool get obBool => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  ///  The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.
  ///  Example: /// Example: GOOD
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get obQuality => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Descriptive or additional information associated with this individual observation.
  ///  Example: /// Example: Observation Description Text
  ///  Constraints: Minimum length = 0, Maximum length = 512
  String? get obDescription => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'SeobservationIngest{obType: ${obType}, obUoM: ${obUoM}, obValue: ${obValue}, obString: ${obString}, obArray: ${obArray}, obBool: ${obBool}, obQuality: ${obQuality}, obDescription: ${obDescription}}';
  }
}

class _SeobservationIngestReader extends fb.TableReader<SeobservationIngest> {
  const _SeobservationIngestReader();

  @override
  SeobservationIngest createObject(fb.BufferContext bc, int offset) => 
    SeobservationIngest._(bc, offset);
}

class SeobservationIngestBuilder {
  SeobservationIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addObTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addObUoMOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addObValue(double? obValue) {
    fbBuilder.addFloat64(2, obValue);
    return fbBuilder.offset;
  }
  int addObStringOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addObArrayOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addObBool(bool? obBool) {
    fbBuilder.addBool(5, obBool);
    return fbBuilder.offset;
  }
  int addObQualityOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addObDescriptionOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SeobservationIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _obType;
  final String? _obUoM;
  final double? _obValue;
  final String? _obString;
  final List<String>? _obArray;
  final bool? _obBool;
  final String? _obQuality;
  final String? _obDescription;

  SeobservationIngestObjectBuilder({
    String? obType,
    String? obUoM,
    double? obValue,
    String? obString,
    List<String>? obArray,
    bool? obBool,
    String? obQuality,
    String? obDescription,
  })
      : _obType = obType,
        _obUoM = obUoM,
        _obValue = obValue,
        _obString = obString,
        _obArray = obArray,
        _obBool = obBool,
        _obQuality = obQuality,
        _obDescription = obDescription;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? obTypeOffset = _obType == null ? null
        : fbBuilder.writeString(_obType!);
    final int? obUoMOffset = _obUoM == null ? null
        : fbBuilder.writeString(_obUoM!);
    final int? obStringOffset = _obString == null ? null
        : fbBuilder.writeString(_obString!);
    final int? obArrayOffset = _obArray == null ? null
        : fbBuilder.writeList(_obArray!.map(fbBuilder.writeString).toList());
    final int? obQualityOffset = _obQuality == null ? null
        : fbBuilder.writeString(_obQuality!);
    final int? obDescriptionOffset = _obDescription == null ? null
        : fbBuilder.writeString(_obDescription!);
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, obTypeOffset);
    fbBuilder.addOffset(1, obUoMOffset);
    fbBuilder.addFloat64(2, _obValue);
    fbBuilder.addOffset(3, obStringOffset);
    fbBuilder.addOffset(4, obArrayOffset);
    fbBuilder.addBool(5, _obBool);
    fbBuilder.addOffset(6, obQualityOffset);
    fbBuilder.addOffset(7, obDescriptionOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
