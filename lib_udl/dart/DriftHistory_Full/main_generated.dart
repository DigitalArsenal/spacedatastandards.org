// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class DriftHistoryFullDataModeEnum {
  final int value;
  const DriftHistoryFullDataModeEnum._(this.value);

  factory DriftHistoryFullDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum DriftHistoryFullDataModeEnum');
    }
    return result;
  }

  static DriftHistoryFullDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : DriftHistoryFullDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const DriftHistoryFullDataModeEnum REAL = DriftHistoryFullDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const DriftHistoryFullDataModeEnum TEST = DriftHistoryFullDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const DriftHistoryFullDataModeEnum SIMULATED = DriftHistoryFullDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const DriftHistoryFullDataModeEnum EXERCISE = DriftHistoryFullDataModeEnum._(3);
  static const Map<int, DriftHistoryFullDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<DriftHistoryFullDataModeEnum> reader = _DriftHistoryFullDataModeEnumReader();

  @override
  String toString() {
    return 'DriftHistoryFullDataModeEnum{value: $value}';
  }
}

class _DriftHistoryFullDataModeEnumReader extends fb.Reader<DriftHistoryFullDataModeEnum> {
  const _DriftHistoryFullDataModeEnumReader();

  @override
  int get size => 1;

  @override
  DriftHistoryFullDataModeEnum read(fb.BufferContext bc, int offset) =>
      DriftHistoryFullDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Historical drift rates for GEO Onorbit objects resulting from updates to OnorbitDetails driftRate values.
class DriftHistoryFull {
  DriftHistoryFull._(this._bc, this._bcOffset);
  factory DriftHistoryFull(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DriftHistoryFull> reader = _DriftHistoryFullReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: DRIFTHISTORY-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  UUID of the parent Onorbit record.
  ///  Example: /// Example: ONORBIT-ID
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get idOnOrbit => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Time the drift rate was replaced with another value and no longer the current value.
  ///  Example: /// Example: 2021-01-01T01:01:01.123Z
  ///  Constraints: No constraints specified.
  String? get effectiveUntil => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  GEO drift rate, if applicable in degrees per day.
  ///  Example: /// Example: 1.1
  ///  Constraints: No constraints specified.
  double get driftRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Application user who created the row in the database, auto-populated by the system.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  DriftHistoryFullDataModeEnum get dataMode => DriftHistoryFullDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 20, 0));

  @override
  String toString() {
    return 'DriftHistoryFull{id: ${id}, idOnOrbit: ${idOnOrbit}, classificationMarking: ${classificationMarking}, effectiveUntil: ${effectiveUntil}, driftRate: ${driftRate}, createdBy: ${createdBy}, source: ${source}, origin: ${origin}, dataMode: ${dataMode}}';
  }
}

class _DriftHistoryFullReader extends fb.TableReader<DriftHistoryFull> {
  const _DriftHistoryFullReader();

  @override
  DriftHistoryFull createObject(fb.BufferContext bc, int offset) => 
    DriftHistoryFull._(bc, offset);
}

class DriftHistoryFullBuilder {
  DriftHistoryFullBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(9);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addEffectiveUntilOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDriftRate(double? driftRate) {
    fbBuilder.addFloat64(4, driftRate);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addDataMode(DriftHistoryFullDataModeEnum? dataMode) {
    fbBuilder.addInt8(8, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DriftHistoryFullObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _idOnOrbit;
  final String? _classificationMarking;
  final String? _effectiveUntil;
  final double? _driftRate;
  final String? _createdBy;
  final String? _source;
  final String? _origin;
  final DriftHistoryFullDataModeEnum? _dataMode;

  DriftHistoryFullObjectBuilder({
    String? id,
    String? idOnOrbit,
    String? classificationMarking,
    String? effectiveUntil,
    double? driftRate,
    String? createdBy,
    String? source,
    String? origin,
    DriftHistoryFullDataModeEnum? dataMode,
  })
      : _id = id,
        _idOnOrbit = idOnOrbit,
        _classificationMarking = classificationMarking,
        _effectiveUntil = effectiveUntil,
        _driftRate = driftRate,
        _createdBy = createdBy,
        _source = source,
        _origin = origin,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? idOnOrbitOffset = _idOnOrbit == null ? null
        : fbBuilder.writeString(_idOnOrbit!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? effectiveUntilOffset = _effectiveUntil == null ? null
        : fbBuilder.writeString(_effectiveUntil!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    fbBuilder.startTable(9);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, idOnOrbitOffset);
    fbBuilder.addOffset(2, classificationMarkingOffset);
    fbBuilder.addOffset(3, effectiveUntilOffset);
    fbBuilder.addFloat64(4, _driftRate);
    fbBuilder.addOffset(5, createdByOffset);
    fbBuilder.addOffset(6, sourceOffset);
    fbBuilder.addOffset(7, originOffset);
    fbBuilder.addInt8(8, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
