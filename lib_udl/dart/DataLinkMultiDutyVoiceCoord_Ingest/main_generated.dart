// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
class DataLinkMultiDutyVoiceCoordIngest {
  DataLinkMultiDutyVoiceCoordIngest._(this._bc, this._bcOffset);
  factory DataLinkMultiDutyVoiceCoordIngest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DataLinkMultiDutyVoiceCoordIngest> reader = _DataLinkMultiDutyVoiceCoordIngestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Designator assigned to a voice interface control and coordination net for multilink coordination (e.g. ADCCN, DCN, VPN, etc.).
  ///  Example: /// Example: VPN
  ///  Constraints: Minimum length = 0, Maximum length = 5
  String? get multiVoiceNetDes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Designator used in nonsecure communications to refer to a radio frequency for multilink coordination.
  ///  Example: /// Example: ST300A
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get multiFreqDes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Priority of a communication circuit, channel or frequency for multilink coordination (e.g. P - Primary, M - Monitor).
  ///  Example: /// Example: P
  ///  Constraints: Minimum length = 0, Maximum length = 1
  String? get multiCommPri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Array of telephone numbers or contact frequencies used for interface control for multilink coordination.
  ///  Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
  ///  Constraints: No constraints specified.
  List<String>? get multiTeleFreqNums => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'DataLinkMultiDutyVoiceCoordIngest{multiVoiceNetDes: ${multiVoiceNetDes}, multiFreqDes: ${multiFreqDes}, multiCommPri: ${multiCommPri}, multiTeleFreqNums: ${multiTeleFreqNums}}';
  }
}

class _DataLinkMultiDutyVoiceCoordIngestReader extends fb.TableReader<DataLinkMultiDutyVoiceCoordIngest> {
  const _DataLinkMultiDutyVoiceCoordIngestReader();

  @override
  DataLinkMultiDutyVoiceCoordIngest createObject(fb.BufferContext bc, int offset) => 
    DataLinkMultiDutyVoiceCoordIngest._(bc, offset);
}

class DataLinkMultiDutyVoiceCoordIngestBuilder {
  DataLinkMultiDutyVoiceCoordIngestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addMultiVoiceNetDesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMultiFreqDesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMultiCommPriOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMultiTeleFreqNumsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DataLinkMultiDutyVoiceCoordIngestObjectBuilder extends fb.ObjectBuilder {
  final String? _multiVoiceNetDes;
  final String? _multiFreqDes;
  final String? _multiCommPri;
  final List<String>? _multiTeleFreqNums;

  DataLinkMultiDutyVoiceCoordIngestObjectBuilder({
    String? multiVoiceNetDes,
    String? multiFreqDes,
    String? multiCommPri,
    List<String>? multiTeleFreqNums,
  })
      : _multiVoiceNetDes = multiVoiceNetDes,
        _multiFreqDes = multiFreqDes,
        _multiCommPri = multiCommPri,
        _multiTeleFreqNums = multiTeleFreqNums;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? multiVoiceNetDesOffset = _multiVoiceNetDes == null ? null
        : fbBuilder.writeString(_multiVoiceNetDes!);
    final int? multiFreqDesOffset = _multiFreqDes == null ? null
        : fbBuilder.writeString(_multiFreqDes!);
    final int? multiCommPriOffset = _multiCommPri == null ? null
        : fbBuilder.writeString(_multiCommPri!);
    final int? multiTeleFreqNumsOffset = _multiTeleFreqNums == null ? null
        : fbBuilder.writeList(_multiTeleFreqNums!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, multiVoiceNetDesOffset);
    fbBuilder.addOffset(1, multiFreqDesOffset);
    fbBuilder.addOffset(2, multiCommPriOffset);
    fbBuilder.addOffset(3, multiTeleFreqNumsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
