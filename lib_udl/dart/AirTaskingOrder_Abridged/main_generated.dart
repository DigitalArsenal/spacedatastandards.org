// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AirTaskingOrderAbridgedDataModeEnum {
  final int value;
  const AirTaskingOrderAbridgedDataModeEnum._(this.value);

  factory AirTaskingOrderAbridgedDataModeEnum.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AirTaskingOrderAbridgedDataModeEnum');
    }
    return result;
  }

  static AirTaskingOrderAbridgedDataModeEnum? _createOrNull(int? value) => 
      value == null ? null : AirTaskingOrderAbridgedDataModeEnum.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Data collected or produced that pertains to real-world objects, events, and analysis.
  static const AirTaskingOrderAbridgedDataModeEnum REAL = AirTaskingOrderAbridgedDataModeEnum._(0);

  ///  Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  static const AirTaskingOrderAbridgedDataModeEnum TEST = AirTaskingOrderAbridgedDataModeEnum._(1);

  ///  Synthetic data generated by a model to mimic real-world datasets.
  static const AirTaskingOrderAbridgedDataModeEnum SIMULATED = AirTaskingOrderAbridgedDataModeEnum._(2);

  ///  Data pertaining to a government or military exercise. The data may include both real and simulated data.
  static const AirTaskingOrderAbridgedDataModeEnum EXERCISE = AirTaskingOrderAbridgedDataModeEnum._(3);
  static const Map<int, AirTaskingOrderAbridgedDataModeEnum> values = {
    0: REAL,
    1: TEST,
    2: SIMULATED,
    3: EXERCISE};

  static const fb.Reader<AirTaskingOrderAbridgedDataModeEnum> reader = _AirTaskingOrderAbridgedDataModeEnumReader();

  @override
  String toString() {
    return 'AirTaskingOrderAbridgedDataModeEnum{value: $value}';
  }
}

class _AirTaskingOrderAbridgedDataModeEnumReader extends fb.Reader<AirTaskingOrderAbridgedDataModeEnum> {
  const _AirTaskingOrderAbridgedDataModeEnumReader();

  @override
  int get size => 1;

  @override
  AirTaskingOrderAbridgedDataModeEnum read(fb.BufferContext bc, int offset) =>
      AirTaskingOrderAbridgedDataModeEnum.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  /// Beta Version Air Tasking Order: The ATO is used to task air missions, assign cross force tasking as well as intraservice tasking.
class AirTaskingOrderAbridged {
  AirTaskingOrderAbridged._(this._bc, this._bcOffset);
  factory AirTaskingOrderAbridged(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AirTaskingOrderAbridged> reader = _AirTaskingOrderAbridgedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  ///  Example: /// Example: POI-ID
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  ///  Example: /// Example: U
  ///  Constraints: Minimum length = 1, Maximum length = 128
  String? get classificationMarking => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  ///  Example: /// Example: Example URI
  ///  Constraints: Minimum length = 0, Maximum length = 256
  String? get rawFileUri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
  ///  Example: /// Example: DESERT WIND
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get opExerName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  The identifier of the originator of the message.
  ///  Example: /// Example: USCENTCOM
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get msgOriginator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  The unique message identifier sequentially assigned by the originator.
  ///  Example: /// Example: ATO A
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get msgSn => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The month in which the message originated.
  ///  Example: /// Example: OCT
  ///  Constraints: Minimum length = 0, Maximum length = 16
  String? get msgMonth => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  The qualifier which caveats the message status.
  ///  Example: /// Example: CHG
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get msgQualifier => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  The indicator specifying an affirmative or a negatice condition for this message.
  ///  Example: /// Example: YES
  ///  Constraints: Minimum length = 0, Maximum length = 8
  String? get ackReqInd => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Specifies textual data amplifying the data contained in the acknowledgement requirement indicator (ackRedInd) field or the unit required to acknowledge.
  ///  Example: /// Example: INST:45TS
  ///  Constraints: Minimum length = 0, Maximum length = 36
  String? get ackUnitInstructions => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  The effective begin time for this ATO in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-10-25T12:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get beginTs => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The effective end time for this ATO in ISO 8601 UTC format with millisecond precision.
  ///  Example: /// Example: 2023-10-27T12:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get endTs => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  A collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get genText => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 28);
  ///  A collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get acMsnTasking => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  ///  A collection that specifies the naval flight operations for this ATO.
  ///  Example: /// Example: No example provided.
  ///  Constraints: No constraints specified.
  List<String>? get navalFltOps => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  ///  Time the row was created in the database.
  ///  Example: /// Example: 2018-01-01T16:00:00.123Z
  ///  Constraints: No constraints specified.
  String? get createdAt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Application user who created the row in the database.
  ///  Example: /// Example: some.user
  ///  Constraints: Minimum length = 1, Maximum length = 64
  String? get createdBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Source of the data.
  ///  Example: /// Example: Bluestaq
  ///  Constraints: Minimum length = 1, Maximum length = 36
  String? get source => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  ///  Example: /// Example: AXE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get sourceDl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ///  Example: /// Example: THIRD_PARTY_DATASOURCE
  ///  Constraints: Minimum length = 0, Maximum length = 64
  String? get origin => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  The originating source network on which this record was created, auto-populated by the system.
  ///  Example: /// Example: ORIG
  ///  Constraints: Minimum length = 0, Maximum length = 32
  String? get origNetwork => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  ///  EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ///  REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  ///  SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  ///  TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ///  Example: /// Example: TEST
  ///  Constraints: Minimum length = 1, Maximum length = 32
  AirTaskingOrderAbridgedDataModeEnum get dataMode => AirTaskingOrderAbridgedDataModeEnum.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 46, 0));

  @override
  String toString() {
    return 'AirTaskingOrderAbridged{id: ${id}, classificationMarking: ${classificationMarking}, rawFileUri: ${rawFileUri}, opExerName: ${opExerName}, msgOriginator: ${msgOriginator}, msgSn: ${msgSn}, msgMonth: ${msgMonth}, msgQualifier: ${msgQualifier}, ackReqInd: ${ackReqInd}, ackUnitInstructions: ${ackUnitInstructions}, beginTs: ${beginTs}, endTs: ${endTs}, genText: ${genText}, acMsnTasking: ${acMsnTasking}, navalFltOps: ${navalFltOps}, createdAt: ${createdAt}, createdBy: ${createdBy}, source: ${source}, sourceDl: ${sourceDl}, origin: ${origin}, origNetwork: ${origNetwork}, dataMode: ${dataMode}}';
  }
}

class _AirTaskingOrderAbridgedReader extends fb.TableReader<AirTaskingOrderAbridged> {
  const _AirTaskingOrderAbridgedReader();

  @override
  AirTaskingOrderAbridged createObject(fb.BufferContext bc, int offset) => 
    AirTaskingOrderAbridged._(bc, offset);
}

class AirTaskingOrderAbridgedBuilder {
  AirTaskingOrderAbridgedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(22);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationMarkingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addOpExerNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMsgOriginatorOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMsgSnOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addMsgMonthOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addMsgQualifierOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addAckReqIndOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addAckUnitInstructionsOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addBeginTsOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addEndTsOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addGenTextOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addAcMsnTaskingOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addNavalFltOpsOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addDataMode(AirTaskingOrderAbridgedDataModeEnum? dataMode) {
    fbBuilder.addInt8(21, dataMode?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AirTaskingOrderAbridgedObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _classificationMarking;
  final String? _rawFileUri;
  final String? _opExerName;
  final String? _msgOriginator;
  final String? _msgSn;
  final String? _msgMonth;
  final String? _msgQualifier;
  final String? _ackReqInd;
  final String? _ackUnitInstructions;
  final String? _beginTs;
  final String? _endTs;
  final List<String>? _genText;
  final List<String>? _acMsnTasking;
  final List<String>? _navalFltOps;
  final String? _createdAt;
  final String? _createdBy;
  final String? _source;
  final String? _sourceDl;
  final String? _origin;
  final String? _origNetwork;
  final AirTaskingOrderAbridgedDataModeEnum? _dataMode;

  AirTaskingOrderAbridgedObjectBuilder({
    String? id,
    String? classificationMarking,
    String? rawFileUri,
    String? opExerName,
    String? msgOriginator,
    String? msgSn,
    String? msgMonth,
    String? msgQualifier,
    String? ackReqInd,
    String? ackUnitInstructions,
    String? beginTs,
    String? endTs,
    List<String>? genText,
    List<String>? acMsnTasking,
    List<String>? navalFltOps,
    String? createdAt,
    String? createdBy,
    String? source,
    String? sourceDl,
    String? origin,
    String? origNetwork,
    AirTaskingOrderAbridgedDataModeEnum? dataMode,
  })
      : _id = id,
        _classificationMarking = classificationMarking,
        _rawFileUri = rawFileUri,
        _opExerName = opExerName,
        _msgOriginator = msgOriginator,
        _msgSn = msgSn,
        _msgMonth = msgMonth,
        _msgQualifier = msgQualifier,
        _ackReqInd = ackReqInd,
        _ackUnitInstructions = ackUnitInstructions,
        _beginTs = beginTs,
        _endTs = endTs,
        _genText = genText,
        _acMsnTasking = acMsnTasking,
        _navalFltOps = navalFltOps,
        _createdAt = createdAt,
        _createdBy = createdBy,
        _source = source,
        _sourceDl = sourceDl,
        _origin = origin,
        _origNetwork = origNetwork,
        _dataMode = dataMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? classificationMarkingOffset = _classificationMarking == null ? null
        : fbBuilder.writeString(_classificationMarking!);
    final int? rawFileUriOffset = _rawFileUri == null ? null
        : fbBuilder.writeString(_rawFileUri!);
    final int? opExerNameOffset = _opExerName == null ? null
        : fbBuilder.writeString(_opExerName!);
    final int? msgOriginatorOffset = _msgOriginator == null ? null
        : fbBuilder.writeString(_msgOriginator!);
    final int? msgSnOffset = _msgSn == null ? null
        : fbBuilder.writeString(_msgSn!);
    final int? msgMonthOffset = _msgMonth == null ? null
        : fbBuilder.writeString(_msgMonth!);
    final int? msgQualifierOffset = _msgQualifier == null ? null
        : fbBuilder.writeString(_msgQualifier!);
    final int? ackReqIndOffset = _ackReqInd == null ? null
        : fbBuilder.writeString(_ackReqInd!);
    final int? ackUnitInstructionsOffset = _ackUnitInstructions == null ? null
        : fbBuilder.writeString(_ackUnitInstructions!);
    final int? beginTsOffset = _beginTs == null ? null
        : fbBuilder.writeString(_beginTs!);
    final int? endTsOffset = _endTs == null ? null
        : fbBuilder.writeString(_endTs!);
    final int? genTextOffset = _genText == null ? null
        : fbBuilder.writeList(_genText!.map(fbBuilder.writeString).toList());
    final int? acMsnTaskingOffset = _acMsnTasking == null ? null
        : fbBuilder.writeList(_acMsnTasking!.map(fbBuilder.writeString).toList());
    final int? navalFltOpsOffset = _navalFltOps == null ? null
        : fbBuilder.writeList(_navalFltOps!.map(fbBuilder.writeString).toList());
    final int? createdAtOffset = _createdAt == null ? null
        : fbBuilder.writeString(_createdAt!);
    final int? createdByOffset = _createdBy == null ? null
        : fbBuilder.writeString(_createdBy!);
    final int? sourceOffset = _source == null ? null
        : fbBuilder.writeString(_source!);
    final int? sourceDlOffset = _sourceDl == null ? null
        : fbBuilder.writeString(_sourceDl!);
    final int? originOffset = _origin == null ? null
        : fbBuilder.writeString(_origin!);
    final int? origNetworkOffset = _origNetwork == null ? null
        : fbBuilder.writeString(_origNetwork!);
    fbBuilder.startTable(22);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, classificationMarkingOffset);
    fbBuilder.addOffset(2, rawFileUriOffset);
    fbBuilder.addOffset(3, opExerNameOffset);
    fbBuilder.addOffset(4, msgOriginatorOffset);
    fbBuilder.addOffset(5, msgSnOffset);
    fbBuilder.addOffset(6, msgMonthOffset);
    fbBuilder.addOffset(7, msgQualifierOffset);
    fbBuilder.addOffset(8, ackReqIndOffset);
    fbBuilder.addOffset(9, ackUnitInstructionsOffset);
    fbBuilder.addOffset(10, beginTsOffset);
    fbBuilder.addOffset(11, endTsOffset);
    fbBuilder.addOffset(12, genTextOffset);
    fbBuilder.addOffset(13, acMsnTaskingOffset);
    fbBuilder.addOffset(14, navalFltOpsOffset);
    fbBuilder.addOffset(15, createdAtOffset);
    fbBuilder.addOffset(16, createdByOffset);
    fbBuilder.addOffset(17, sourceOffset);
    fbBuilder.addOffset(18, sourceDlOffset);
    fbBuilder.addOffset(19, originOffset);
    fbBuilder.addOffset(20, origNetworkOffset);
    fbBuilder.addInt8(21, _dataMode?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
